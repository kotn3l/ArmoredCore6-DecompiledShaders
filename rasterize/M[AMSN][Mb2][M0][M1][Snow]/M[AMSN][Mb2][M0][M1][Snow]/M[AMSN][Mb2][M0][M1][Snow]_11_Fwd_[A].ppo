#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _988;
float _3378;
float _3379;
float _3380;
float _3381;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _239 = _234.z;
    float _243 = (_234.x * 2.0) + (-1.0);
    float _245 = (_234.y * 2.0) + (-1.0);
    float _246 = dot(vec2(_243, _245), vec2(_243, _245));
    float _3390 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _252 = sqrt(1.0 - (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))));
    float _255 = fma(_252, _218, fma(_245, _211, _243 * _197));
    float _258 = fma(_252, _219, fma(_245, _212, _243 * _198));
    float _261 = fma(_252, _220, fma(_245, _213, _243 * _199));
    float _265 = inversesqrt(dot(vec3(_255, _258, _261), vec3(_255, _258, _261)));
    float _282 = cbMtdParam._m0[11u].z + dot(vec4(_265 * _255, _265 * _258, _265 * _261, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3401 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    vec4 _301 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _306 = _301.x * cbMtdParam._m0[9u].x;
    float _307 = _301.y * cbMtdParam._m0[9u].y;
    float _308 = _301.z * cbMtdParam._m0[9u].z;
    vec4 _321 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _332 = ((_321.x - _306) * _283) + _306;
    float _333 = ((_321.y - _307) * _283) + _307;
    float _334 = ((_321.z - _308) * _283) + _308;
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _349 = _347.x;
    float _351 = _349 - (_349 * _283);
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = (_364.x * 2.0) + (-1.0);
    float _372 = (_364.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_371, _372), vec2(_371, _372));
    float _3412 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _381 = ((_364.z - _239) * _283) + _239;
    float _388 = ((_371 - _243) * _283) + _243;
    float _389 = ((_372 - _245) * _283) + _245;
    float _390 = ((sqrt(1.0 - (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) - _252) * _283) + _252;
    float _393 = fma(_390, _218, fma(_389, _211, _388 * _197));
    float _396 = fma(_390, _219, fma(_389, _212, _388 * _198));
    float _399 = fma(_390, _220, fma(_389, _213, _388 * _199));
    float _403 = inversesqrt(dot(vec3(_393, _396, _399), vec3(_393, _396, _399)));
    float _404 = _403 * _393;
    float _405 = _403 * _396;
    float _406 = _403 * _399;
    float _3423 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _407 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3445 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3456 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3467 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _411 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _427 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _478 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _468);
    float _479 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _468);
    float _480 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _468);
    float _484 = inversesqrt(dot(vec3(_478, _479, _480), vec3(_478, _479, _480)));
    float _485 = _478 * _484;
    float _486 = _479 * _484;
    float _487 = _480 * _484;
    vec4 _492 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _494 = _492.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _667 = sqrt(((_478 * _478) + (_479 * _479)) + (_480 * _480));
        float _673 = (cbMatDynParam._m0[5u].x * _667) + cbMatDynParam._m0[5u].y;
        float _3478 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _678 = (cbMatDynParam._m0[5u].z * _667) + cbMatDynParam._m0[5u].w;
        float _3489 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) - _674)) + _674) < ((_494 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _506 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _507 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _525 = fma(_406, cbSceneParam._m0[5u].z, fma(_405, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _404));
    float _528 = fma(_406, cbSceneParam._m0[6u].z, fma(_405, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _404));
    float _531 = fma(_406, cbSceneParam._m0[7u].z, fma(_405, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _404));
    uint _544 = uint(roundEven(NORMAL.w)) * 13u;
    uint _545 = _544 + 9u;
    uint _546 = _545 + uint(cbMatDynParam._m0[0u].w);
    float _552 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_546].x;
    float _553 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_546].y;
    float _554 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_546].z;
    float _3500 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _558 = 1.0 - _411;
    float _559 = _555 * _558;
    float _560 = _556 * _558;
    float _561 = _557 * _558;
    float _566 = (_555 + (-0.039999999105930328369140625)) * _411;
    float _567 = (_556 + (-0.039999999105930328369140625)) * _411;
    float _568 = (_557 + (-0.039999999105930328369140625)) * _411;
    float _569 = _566 + 0.039999999105930328369140625;
    float _571 = _567 + 0.039999999105930328369140625;
    float _572 = _568 + 0.039999999105930328369140625;
    vec4 _581 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _506, cbSceneParam._m0[86u].y * _507));
    float _584 = _581.x * TEXCOORD_9.w;
    float _585 = dot(vec3(_404, _405, _406), vec3(_485, _486, _487));
    float _588 = _585 * 2.0;
    float _592 = (_588 * _404) - _485;
    float _593 = (_588 * _405) - _486;
    float _594 = (_588 * _406) - _487;
    float _598 = abs(dot(vec3(_485, _486, _487), vec3(_404, _405, _406)));
    float _3533 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _600 = sqrt(_407);
    float _613 = exp2((_600 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_600 * 3.0));
    float _619 = (1.0 - _613) * ((_600 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _620 = _613 * _600;
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _987;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _712 = fma(_656, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648));
        float _716 = fma(_656, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648));
        float _720 = fma(_656, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648));
        float _745 = _648 + _404;
        float _746 = _652 + _405;
        float _747 = _656 + _406;
        float _757 = fma(_747, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745)) - _712;
        float _758 = fma(_747, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745)) - _716;
        float _759 = fma(_747, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745)) - _720;
        float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
        float _776 = ((_763 * _757) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_712 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_763 * _758) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_716 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_763 * _759) / cbModelParam._m0[34u].z) + ((((((_720 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        float _815 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_781.x + (-0.5));
        float _817 = _815 * (_781.y + (-0.5));
        float _818 = _815 * (_781.z + (-0.5));
        float _825 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_788.x + (-0.5));
        float _827 = _825 * (_788.y + (-0.5));
        float _828 = _825 * (_788.z + (-0.5));
        float _835 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_795.x + (-0.5));
        float _837 = _835 * (_795.y + (-0.5));
        float _838 = _835 * (_795.z + (-0.5));
        float _845 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_802.x + (-0.5));
        float _847 = _845 * (_802.y + (-0.5));
        float _848 = _845 * (_802.z + (-0.5));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = _816 * 0.5;
        float _853 = _826 * 0.5;
        float _854 = _836 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _869 = (dot(vec3(_404, _405, _406), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _879 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3581 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_881 + 1.0))) + _886) * _849;
        float _896 = _817 * 0.5;
        float _897 = _827 * 0.5;
        float _898 = _837 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_404, _405, _406), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3614 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_923 + 1.0))) + _928) * _850;
        float _938 = _818 * 0.5;
        float _939 = _828 * 0.5;
        float _940 = _838 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_404, _405, _406), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3647 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_965 + 1.0))) + _970) * _851;
        _987 = _818;
        _989 = _817;
        _990 = _816;
        _991 = _828;
        _992 = _827;
        _993 = _826;
        _994 = _838;
        _995 = _837;
        _996 = _836;
        _997 = _851;
        _998 = _850;
        _999 = _849;
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
    }
    else
    {
        _987 = _988;
        _989 = _988;
        _990 = _988;
        _991 = _988;
        _992 = _988;
        _993 = _988;
        _994 = _988;
        _995 = _988;
        _996 = _988;
        _997 = _988;
        _998 = _988;
        _999 = _988;
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
    }
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1031 = fma(_656, cbModelParam._m0[30u].z, fma(_652, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _648));
        float _1035 = fma(_656, cbModelParam._m0[31u].z, fma(_652, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _648));
        float _1039 = fma(_656, cbModelParam._m0[32u].z, fma(_652, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _648));
        float _1062 = _648 + _404;
        float _1063 = _652 + _405;
        float _1064 = _656 + _406;
        float _1074 = fma(_1064, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062)) - _1031;
        float _1075 = fma(_1064, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062)) - _1035;
        float _1076 = fma(_1064, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062)) - _1039;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1031 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1035 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[35u].z) + ((((((_1039 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1130 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1097.x + (-0.5));
        float _1132 = _1130 * (_1097.y + (-0.5));
        float _1133 = _1130 * (_1097.z + (-0.5));
        float _1140 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1104.x + (-0.5));
        float _1142 = _1140 * (_1104.y + (-0.5));
        float _1143 = _1140 * (_1104.z + (-0.5));
        float _1150 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1111.x + (-0.5));
        float _1152 = _1150 * (_1111.y + (-0.5));
        float _1153 = _1150 * (_1111.z + (-0.5));
        float _1160 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1118.x + (-0.5));
        float _1162 = _1160 * (_1118.y + (-0.5));
        float _1163 = _1160 * (_1118.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_404, _405, _406), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3710 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1194 + 1.0))) + _1199) * _1164;
        float _1209 = _1132 * 0.5;
        float _1210 = _1142 * 0.5;
        float _1211 = _1152 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_404, _405, _406), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3743 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1236 + 1.0))) + _1241) * _1165;
        float _1251 = _1133 * 0.5;
        float _1252 = _1143 * 0.5;
        float _1253 = _1153 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_404, _405, _406), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3776 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1278 + 1.0))) + _1283) * _1166;
        _1300 = _1133;
        _1301 = _1132;
        _1302 = _1131;
        _1303 = _1143;
        _1304 = _1142;
        _1305 = _1141;
        _1306 = _1153;
        _1307 = _1152;
        _1308 = _1151;
        _1309 = _1166;
        _1310 = _1165;
        _1311 = _1164;
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _988;
        _1301 = _988;
        _1302 = _988;
        _1303 = _988;
        _1304 = _988;
        _1305 = _988;
        _1306 = _988;
        _1307 = _988;
        _1308 = _988;
        _1309 = _988;
        _1310 = _988;
        _1311 = _988;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1000)) + _1000;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1001)) + _1001;
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1002)) + _1002;
    float _1347 = fma(_1326, cbSceneParam._m0[89u].z, fma(_1325, cbSceneParam._m0[89u].y, _1324 * cbSceneParam._m0[89u].x));
    float _1350 = fma(_1326, cbSceneParam._m0[90u].z, fma(_1325, cbSceneParam._m0[90u].y, _1324 * cbSceneParam._m0[90u].x));
    float _1353 = fma(_1326, cbSceneParam._m0[91u].z, fma(_1325, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1324));
    float _1368 = _592 * 0.5;
    float _1369 = _593 * 0.5;
    float _1370 = _594 * 0.5;
    float _1371 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1374 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1377 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1411;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1384 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_987, _991, _994, _997));
        float _1388 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_989, _992, _995, _998));
        float _1392 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_990, _993, _996, _999));
        float _1399 = dot(vec4(cbModelParam._m0[39u]), vec4(_1368, _1369, _1370, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1399) ? 0.0 : (isnan(0.0) ? _1399 : max(0.0, _1399))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1422;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1413 = dot(vec4(cbModelParam._m0[40u]), vec4(_1368, _1369, _1370, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1426 = (_1422 * cbModelParam._m0[1u].x) + (_1411 * (1.0 - cbModelParam._m0[1u].x));
    float _1436 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _407);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1436 : min(cbModelParam._m0[25u].z, _1436));
    float _1519;
    float _1521;
    float _1523;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1486 = fma(_656, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648)) + cbModelParam._m0[13u].w;
        float _1490 = fma(_656, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648)) + cbModelParam._m0[14u].w;
        float _1494 = fma(_656, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648)) + cbModelParam._m0[15u].w;
        float _1497 = fma(_594, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592));
        float _1500 = fma(_594, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592));
        float _1503 = fma(_594, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592));
        float _1531;
        if (_1497 > 0.0)
        {
            _1531 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1531 = frontier_phi_19_17_ladder;
        }
        float _1738;
        if (_1500 > 0.0)
        {
            _1738 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1738 = frontier_phi_28_24_ladder;
        }
        float _1992;
        if (_1503 > 0.0)
        {
            _1992 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1992 = frontier_phi_40_35_ladder;
        }
        float _1994 = isnan(_1738) ? _1531 : (isnan(_1531) ? _1738 : min(_1531, _1738));
        float _1995 = isnan(_1992) ? _1994 : (isnan(_1994) ? _1992 : min(_1994, _1992));
        float _1999 = (_1995 * _1497) + _1486;
        float _2000 = (_1995 * _1500) + _1490;
        float _2001 = (_1995 * _1503) + _1494;
        float _2002 = _1995 * 9.9999997473787516355514526367188e-05;
        float _2004 = (-1.0) - _2002;
        float _2006 = _2002 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2001 > _2006) || ((_2001 < _2004) || ((_2000 > _2006) || ((_2000 < _2004) || ((_1999 < _2004) || (_1999 > _2006))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2129 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2001, cbModelParam._m0[9u].z, fma(_2000, cbModelParam._m0[9u].y, _1999 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2001, cbModelParam._m0[10u].z, fma(_2000, cbModelParam._m0[10u].y, _1999 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2001, cbModelParam._m0[11u].z, fma(_2000, cbModelParam._m0[11u].y, _1999 * cbModelParam._m0[11u].x))), _1437);
            frontier_phi_18_40_ladder = _2129.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2129.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2129.x * cbModelParam._m0[1u].y;
        }
        _1519 = frontier_phi_18_40_ladder_2;
        _1521 = frontier_phi_18_40_ladder_1;
        _1523 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_592, _593, _594), _1437);
        _1519 = _1507.x * cbModelParam._m0[1u].y;
        _1521 = _1507.y * cbModelParam._m0[1u].y;
        _1523 = _1507.z * cbModelParam._m0[1u].y;
    }
    float _1527 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _407);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1527 : min(cbModelParam._m0[25u].w, _1527));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1585 = fma(_656, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648)) + cbModelParam._m0[21u].w;
        float _1589 = fma(_656, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648)) + cbModelParam._m0[22u].w;
        float _1593 = fma(_656, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648)) + cbModelParam._m0[23u].w;
        float _1596 = fma(_594, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592));
        float _1599 = fma(_594, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592));
        float _1602 = fma(_594, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592));
        float _1743;
        if (_1596 > 0.0)
        {
            _1743 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1743 = frontier_phi_30_26_ladder;
        }
        float _2019;
        if (_1599 > 0.0)
        {
            _2019 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2019 = frontier_phi_42_37_ladder;
        }
        float _2232;
        if (_1602 > 0.0)
        {
            _2232 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2232 = frontier_phi_51_48_ladder;
        }
        float _2234 = isnan(_2019) ? _1743 : (isnan(_1743) ? _2019 : min(_1743, _2019));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1596) + _1585;
        float _2240 = (_2235 * _1599) + _1589;
        float _2241 = (_2235 * _1602) + _1593;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2242;
        float _2245 = _2242 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2241 > _2245) || ((_2241 < _2243) || ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 < _2243) || (_2239 > _2245))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2241, cbModelParam._m0[17u].z, fma(_2240, cbModelParam._m0[17u].y, _2239 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2241, cbModelParam._m0[18u].z, fma(_2240, cbModelParam._m0[18u].y, _2239 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2241, cbModelParam._m0[19u].z, fma(_2240, cbModelParam._m0[19u].y, _2239 * cbModelParam._m0[19u].x))), _1528);
            frontier_phi_27_51_ladder = _2439.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2439.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2439.x * cbModelParam._m0[1u].z;
        }
        _1621 = frontier_phi_27_51_ladder_2;
        _1623 = frontier_phi_27_51_ladder_1;
        _1625 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_592, _593, _594), _1528);
        _1621 = _1605.x * cbModelParam._m0[1u].z;
        _1623 = _1605.y * cbModelParam._m0[1u].z;
        _1625 = _1605.z * cbModelParam._m0[1u].z;
    }
    float _1638 = (((_619 * _569) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1621 - _1519)) + _1519);
    float _1640 = (((_619 * _571) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1623 - _1521)) + _1521);
    float _1642 = (((_619 * _572) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1625 - _1523)) + _1523);
    float _1645 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, _1638 * cbSceneParam._m0[91u].x));
    uvec4 _1661 = floatBitsToUint(cbInstanceData._m0[_544 + 5u]);
    uint _1663 = _1661.x * 14u;
    uint _1664 = _1663 + 13u;
    float _1671 = _584 + (-1.0);
    float _1676 = (cbLight._m0[_1664].x * _1671) + 1.0;
    float _1677 = (cbLight._m0[_1664].y * _1671) + 1.0;
    float _1678 = (cbLight._m0[_1664].z * _1671) + 1.0;
    float _1679 = (cbLight._m0[_1664].w * _1671) + 1.0;
    uint _1680 = _1663 + 5u;
    float _1686 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1690 = _1663 + 4u;
    float _1697 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1701 = _1663 | 1u;
    float _1712 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_404, _405, _406));
    float _1715 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_404, _405, _406));
    float _3912 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _3923 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1720 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1722 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1729 = ((cbLight._m0[_1680].x * _1686) * _1722) + ((cbLight._m0[_1690].x * _1697) * _1720);
    float _1730 = ((_1686 * cbLight._m0[_1680].y) * _1722) + ((_1697 * cbLight._m0[_1690].y) * _1720);
    float _1731 = ((_1686 * cbLight._m0[_1680].z) * _1722) + ((_1697 * cbLight._m0[_1690].z) * _1720);
    uvec4 _1735 = floatBitsToUint(cbLight._m0[_1663 + 12u]);
    bool _1737 = _1735.x == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1737)
    {
        _1748 = _1729;
        _1750 = _1730;
        _1752 = _1731;
    }
    else
    {
        uint _1756 = _1663 + 6u;
        float _1772 = (dot(vec3(cbLight._m0[_1663 + 2u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _1773 = _1772 * _1772;
        float _3934 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1775 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1748 = (((cbLight._m0[_1756].x * 0.3183098733425140380859375) * _1774) * _1775) + _1729;
        _1750 = (((cbLight._m0[_1756].y * 0.3183098733425140380859375) * _1774) * _1775) + _1730;
        _1752 = (((cbLight._m0[_1756].z * 0.3183098733425140380859375) * _1774) * _1775) + _1731;
    }
    bool _1755 = _1735.y == 0u;
    float _1793;
    float _1795;
    float _1797;
    if (_1755)
    {
        _1793 = _1748;
        _1795 = _1750;
        _1797 = _1752;
    }
    else
    {
        uint _1963 = _1663 + 7u;
        float _1979 = (dot(vec3(cbLight._m0[_1663 + 3u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _1980 = _1979 * _1979;
        float _3950 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1982 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1793 = (((cbLight._m0[_1963].x * 0.3183098733425140380859375) * _1981) * _1982) + _1748;
        _1795 = (((cbLight._m0[_1963].y * 0.3183098733425140380859375) * _1981) * _1982) + _1750;
        _1797 = (((cbLight._m0[_1963].z * 0.3183098733425140380859375) * _1981) * _1982) + _1752;
    }
    uint _1800 = _1663 + 8u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _407) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1663].x + _485;
    float _1816 = cbLight._m0[_1663].y + _486;
    float _1817 = cbLight._m0[_1663].z + _487;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1663].xyz));
    float _3966 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _1829 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1830 = dot(vec3(_404, _405, _406), vec3(_1822, _1823, _1824));
    float _3988 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1822, _1823, _1824));
    float _3999 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1814 * _1814;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1850 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
    float _1851 = 0.959999978542327880859375 - _566;
    float _1853 = 0.959999978542327880859375 - _567;
    float _1854 = 0.959999978542327880859375 - _568;
    float _1861 = 1.0 - _1814;
    float _1872 = (0.5 / (((_1829 * ((_1828 * _1861) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _1861) + _1814) * _1828))) * _1828;
    float _4010 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1874 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    uint _1885 = _1663 + 9u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _407) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1701].x + _485;
    float _1899 = cbLight._m0[_1701].y + _486;
    float _1900 = cbLight._m0[_1701].z + _487;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1701].xyz));
    float _4021 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1912 = dot(vec3(_404, _405, _406), vec3(_1905, _1906, _1907));
    float _4032 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1905, _1906, _1907));
    float _4043 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1897 * _1897;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1931 = exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0);
    float _1938 = 1.0 - _1897;
    float _1948 = (0.5 / (((_1829 * ((_1911 * _1938) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _1938) + _1897) * _1911))) * _1911;
    float _4054 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    float _1960 = (((((_1931 * _1851) + _569) * cbLight._m0[_1885].x) * _1950) * _1686) + (((((_1850 * _1851) + _569) * cbLight._m0[_1800].x) * _1874) * _1697);
    float _1961 = (((((_1931 * _1853) + _571) * cbLight._m0[_1885].y) * _1950) * _1686) + (((((_1850 * _1853) + _571) * cbLight._m0[_1800].y) * _1874) * _1697);
    float _1962 = (((((_1931 * _1854) + _572) * cbLight._m0[_1885].z) * _1950) * _1686) + (((((_1850 * _1854) + _572) * cbLight._m0[_1800].z) * _1874) * _1697);
    float _2024;
    float _2026;
    float _2028;
    if (_1737)
    {
        _2024 = _1960;
        _2026 = _1961;
        _2028 = _1962;
    }
    else
    {
        uint _2030 = _1663 + 2u;
        uint _2034 = _1663 + 10u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _407) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _485;
        float _2051 = cbLight._m0[_2030].y + _486;
        float _2052 = cbLight._m0[_2030].z + _487;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2030].xyz));
        float _4065 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2064 = dot(vec3(_404, _405, _406), vec3(_2057, _2058, _2059));
        float _4076 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _4087 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
        float _2090 = 1.0 - _2049;
        float _2100 = (0.5 / (((_1829 * ((_2063 * _2090) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _2090) + _2049) * _2063))) * _2063;
        float _4098 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2102 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2103 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2024 = (((((_2083 * _1851) + _569) * cbLight._m0[_2034].x) * _2102) * _2103) + _1960;
        _2026 = (((((_2083 * _1853) + _571) * cbLight._m0[_2034].y) * _2102) * _2103) + _1961;
        _2028 = (((((_2083 * _1854) + _572) * cbLight._m0[_2034].z) * _2102) * _2103) + _1962;
    }
    float _2138;
    float _2140;
    float _2142;
    if (_1755)
    {
        _2138 = _2024;
        _2140 = _2026;
        _2142 = _2028;
    }
    else
    {
        uint _2149 = _1663 + 3u;
        uint _2153 = _1663 + 11u;
        float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _407) * 0.949999988079071044921875);
        float _2168 = _2167 * _2167;
        float _2169 = cbLight._m0[_2149].x + _485;
        float _2170 = cbLight._m0[_2149].y + _486;
        float _2171 = cbLight._m0[_2149].z + _487;
        float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
        float _2176 = _2175 * _2169;
        float _2177 = _2175 * _2170;
        float _2178 = _2175 * _2171;
        float _2179 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2149].xyz));
        float _4114 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2183 = dot(vec3(_404, _405, _406), vec3(_2176, _2177, _2178));
        float _4125 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2187 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2176, _2177, _2178));
        float _4136 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2191 = _2168 * _2168;
        float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
        float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
        float _2209 = 1.0 - _2168;
        float _2219 = (0.5 / (((_1829 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _2209) + _2168) * _2182))) * _2182;
        float _4147 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
        float _2222 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2138 = (((((_2202 * _1851) + _569) * cbLight._m0[_2153].x) * _2221) * _2222) + _2024;
        _2140 = (((((_2202 * _1853) + _571) * cbLight._m0[_2153].y) * _2221) * _2222) + _2026;
        _2142 = (((((_2202 * _1854) + _572) * cbLight._m0[_2153].z) * _2221) * _2222) + _2028;
    }
    float _2356;
    float _2358;
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    if (_1661.y == 0u)
    {
        float _2297 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2297;
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2297;
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2297;
        uvec4 _2312 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2313 = _2312.x;
        uint _2324 = uint((float(_2312.y) * floor(float(uint(cbSceneParam._m0[85u].y * _507) / _2313))) + floor(float(uint(cbSceneParam._m0[85u].x * _506) / _2313)));
        float _2334 = (log2(_2300 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2335 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        uint _2338 = uint(isnan(14.0) ? _2335 : (isnan(_2335) ? 14.0 : min(_2335, 14.0)));
        uvec4 _2343 = texelFetch(g_lightClusterGridBuffer, int(((_2338 << 2u) + (_2324 << 6u)) >> 2u));
        uint _2344 = _2343.x;
        uint _2345 = _2312.z;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        if (((((1u << ((_2345 >> 4u) & 15u)) + 4294967295u) & _2344) == 0u) || ((_2345 & 240u) == 0u))
        {
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
        }
        else
        {
            float _2445;
            float _2447;
            float _2449;
            float _2451;
            float _2453;
            float _2455;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            uint _2602 = 0u;
            uint _2611;
            bool _2612;
            for (;;)
            {
                _2611 = texelFetch(g_lightClassification, int((((_2338 << 5u) + (_2324 << 9u)) + (_2602 << 2u)) >> 2u)).x;
                _2612 = _2611 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2612)
                {
                    frontier_phi_68_pred = _2598;
                    frontier_phi_68_pred_1 = _2601;
                    frontier_phi_68_pred_2 = _2600;
                    frontier_phi_68_pred_3 = _2599;
                    frontier_phi_68_pred_4 = _2597;
                    frontier_phi_68_pred_5 = _2596;
                }
                else
                {
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    uint _2747;
                    _2741 = _2596;
                    _2742 = _2597;
                    _2743 = _2598;
                    _2744 = _2599;
                    _2745 = _2600;
                    _2746 = _2601;
                    _2747 = _2611;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    for (;;)
                    {
                        uint _2751 = uint(findLSB(_2747)) + (_2602 << 5u);
                        uint _2748 = (_2747 + 4294967295u) & _2747;
                        uint _2753 = _2751 * 48u;
                        vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 3u)).x));
                        uint _2773 = (_2751 * 48u) + 4u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 3u)).x));
                        uint _2792 = (_2751 * 48u) + 8u;
                        vec3 _2803 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x));
                        float _2807 = _2767.x - _2298;
                        float _2808 = _2767.y - _2299;
                        float _2809 = _2767.z - _2300;
                        float _2810 = dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809));
                        float _2813 = inversesqrt(_2810);
                        float _2814 = _2813 * _2807;
                        float _2815 = _2813 * _2808;
                        float _2816 = _2813 * _2809;
                        float _2817 = dot(vec3(_525, _528, _531), vec3(_2814, _2815, _2816));
                        float _2822 = 1.0 - (_2810 * _2767.w);
                        float _4173 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2823 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2824 = sqrt(_2810) * _2786.w;
                        float _2827 = 1.39999997615814208984375 / (_2824 + 1.39999997615814208984375);
                        float _2828 = _2827 * _2827;
                        float _2831 = ((1.0 - _2828) * _2817) + _2828;
                        float _2834 = _2824 * _2824;
                        float _2838 = ((isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))) * _2823) / ((_2834 * 0.699999988079071044921875) + 1.0);
                        float _2842 = (-0.0) - _2298;
                        float _2843 = (-0.0) - _2299;
                        float _2844 = (-0.0) - _2300;
                        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
                        float _2849 = _2848 * _2842;
                        float _2850 = _2848 * _2843;
                        float _2851 = _2848 * _2844;
                        float _2859 = exp2(log2(1.0 / ((_2834 * 3.5) + 5.0)) * 0.25);
                        float _2860 = 1.0 - _600;
                        float _2867 = sqrt(1.0 - ((1.0 - (_2860 * _2860)) * (1.0 - (_2859 * _2859))));
                        float _2868 = _2867 * _2867;
                        float _2869 = _2868 * _2868;
                        float _2870 = _2849 + _2814;
                        float _2871 = _2850 + _2815;
                        float _2872 = _2851 + _2816;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2880 = dot(vec3(_525, _528, _531), vec3(_2849, _2850, _2851));
                        float _4189 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2883 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2884 = dot(vec3(_525, _528, _531), vec3(_2876 * _2870, _2876 * _2871, _2876 * _2872));
                        float _4200 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2891 = ((_2887 * _2887) * (_2869 + (-1.0))) + 1.0;
                        float _2892 = _2827 * _2868;
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2817) + _2893;
                        float _4211 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2898 = 1.0 - _2868;
                        float _2908 = (0.5 / (((_2897 * ((_2883 * _2898) + _2868)) + 9.9999999392252902907785028219223e-09) + (((_2897 * _2898) + _2868) * _2883))) * _2897;
                        float _4222 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2919 = (((_2869 * 3.1415927410125732421875) * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) / ((_2891 * _2891) * ((_2834 * 2.1991131305694580078125) + 3.141590118408203125))) * _2823;
                        _2671 = (_2838 * _2786.x) + _2744;
                        _2672 = (_2838 * _2786.y) + _2745;
                        _2673 = (_2838 * _2786.z) + _2746;
                        _2668 = (_2919 * _2803.x) + _2741;
                        _2669 = (_2919 * _2803.y) + _2742;
                        _2670 = (_2919 * _2803.z) + _2743;
                        if (_2748 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2670;
                            _2744 = _2671;
                            _2745 = _2672;
                            _2746 = _2673;
                            _2747 = _2748;
                        }
                    }
                    frontier_phi_68_pred = _2670;
                    frontier_phi_68_pred_1 = _2673;
                    frontier_phi_68_pred_2 = _2672;
                    frontier_phi_68_pred_3 = _2671;
                    frontier_phi_68_pred_4 = _2669;
                    frontier_phi_68_pred_5 = _2668;
                }
                _2449 = frontier_phi_68_pred;
                _2455 = frontier_phi_68_pred_1;
                _2453 = frontier_phi_68_pred_2;
                _2451 = frontier_phi_68_pred_3;
                _2447 = frontier_phi_68_pred_4;
                _2445 = frontier_phi_68_pred_5;
                uint _2603 = _2602 + 1u;
                if (_2603 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2596 = _2445;
                    _2597 = _2447;
                    _2598 = _2449;
                    _2599 = _2451;
                    _2600 = _2453;
                    _2601 = _2455;
                    _2602 = _2603;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
        }
        uvec4 _2458 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2459 = _2458.z;
        uint _2461 = (_2459 >> 8u) & 15u;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((4294967295u << _2461) & _2344) == 0u)
        {
            _2564 = _2444;
            _2566 = _2446;
            _2568 = _2448;
            _2570 = _2450;
            _2572 = _2452;
            _2574 = _2454;
        }
        else
        {
            float _2589 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
            float _2590 = _2589 * _2298;
            float _2591 = _2589 * _2299;
            float _2592 = _2589 * _2300;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2461 < ((_2459 >> 12u) & 15u))
            {
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2724 = _2444;
                float _2725 = _2446;
                float _2726 = _2448;
                float _2727 = _2450;
                float _2728 = _2452;
                float _2729 = _2454;
                uint _2730 = _2461;
                uint _2739;
                bool _2740;
                for (;;)
                {
                    _2739 = texelFetch(g_lightClassification, int((((_2338 << 5u) + (_2324 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                    _2740 = _2739 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2740)
                    {
                        frontier_phi_79_pred = _2729;
                        frontier_phi_79_pred_1 = _2728;
                        frontier_phi_79_pred_2 = _2727;
                        frontier_phi_79_pred_3 = _2726;
                        frontier_phi_79_pred_4 = _2725;
                        frontier_phi_79_pred_5 = _2724;
                    }
                    else
                    {
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _2946 = _2724;
                        float _2947 = _2725;
                        float _2948 = _2726;
                        float _2949 = _2727;
                        float _2950 = _2728;
                        float _2951 = _2729;
                        uint _2952 = _2739;
                        uint _2953;
                        vec4 _2978;
                        float _2979;
                        vec4 _2994;
                        vec3 _3006;
                        vec4 _3022;
                        vec4 _3038;
                        float _3085;
                        bool _3086;
                        for (;;)
                        {
                            uint _2963 = ((_2730 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2952));
                            _2953 = (_2952 + 4294967295u) & _2952;
                            uint _2965 = _2963 * 40u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2979 = _2978.w;
                            uint _2981 = (_2963 * 40u) + 4u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2996 = (_2963 * 40u) + 8u;
                            _3006 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x));
                            uint _3009 = (_2963 * 40u) + 16u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3025 = (_2963 * 40u) + 20u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3041 = (_2963 * 40u) + 24u;
                            vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3060 = (_2963 * 40u) + 28u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            _3085 = fma(_2300, _3073.z, fma(_2299, _3073.y, _3073.x * _2298)) + _3073.w;
                            _3086 = !((fma(_2300, _3054.z, fma(_2299, _3054.y, _3054.x * _2298)) + _3054.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3086)
                            {
                                float _3113 = _2978.x - _2298;
                                float _3114 = _2978.y - _2299;
                                float _3115 = _2978.z - _2300;
                                float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                                float _3119 = inversesqrt(_3116);
                                float _3120 = _3119 * _3113;
                                float _3121 = _3119 * _3114;
                                float _3122 = _3119 * _3115;
                                float _3126 = 1.0 - (_3116 / (_2979 * _2979));
                                float _4233 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3131 = sqrt(_3116) * _2994.w;
                                float _3133 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                                float _3134 = _3133 * _3133;
                                float _3137 = ((1.0 - _3134) * dot(vec3(_3120, _3121, _3122), vec3(_525, _528, _531))) + _3134;
                                float _3140 = _3131 * _3131;
                                float _3144 = (fma(_2300, _3022.z, fma(_2299, _3022.y, _3022.x * _2298)) + _3022.w) / _3085;
                                float _3145 = (fma(_2300, _3038.z, fma(_2299, _3038.y, _3038.x * _2298)) + _3038.w) / _3085;
                                float _3149 = 1.0 - dot(vec2(_3144, _3145), vec2(_3144, _3145));
                                float _4249 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3151 = _3150 * (((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3127) / ((_3140 * 0.699999988079071044921875) + 1.0));
                                float _3163 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                                float _3164 = 1.0 - _600;
                                float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                                float _3172 = _3171 * _3171;
                                float _3173 = _3172 * _3172;
                                float _3174 = _3120 - _2590;
                                float _3175 = _3121 - _2591;
                                float _3176 = _3122 - _2592;
                                float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                                float _3184 = dot(vec3(_525, _528, _531), vec3((-0.0) - _2590, (-0.0) - _2591, (-0.0) - _2592));
                                float _4260 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3187 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3188 = dot(vec3(_525, _528, _531), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                                float _4271 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                                float _3196 = _3133 * _3172;
                                float _3197 = _3196 * _3196;
                                float _3203 = ((1.0 - _3197) * dot(vec3(_525, _528, _531), vec3(_3120, _3121, _3122))) + _3197;
                                float _4282 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3205 = 1.0 - _3172;
                                float _3215 = (0.5 / (((_3204 * ((_3187 * _3205) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3172) * _3187))) * _3204;
                                float _4293 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3225 = (_3150 * _3127) * (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) / ((_3195 * _3195) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3151 * _2994.z;
                                frontier_phi_85_pred_1 = _3151 * _2994.y;
                                frontier_phi_85_pred_2 = _3151 * _2994.x;
                                frontier_phi_85_pred_3 = _3225 * _3006.z;
                                frontier_phi_85_pred_4 = _3225 * _3006.y;
                                frontier_phi_85_pred_5 = _3225 * _3006.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3234 = frontier_phi_85_pred;
                            _3233 = frontier_phi_85_pred_1;
                            _3232 = frontier_phi_85_pred_2;
                            _3231 = frontier_phi_85_pred_3;
                            _3230 = frontier_phi_85_pred_4;
                            _3229 = frontier_phi_85_pred_5;
                            _2936 = _3232 + _2949;
                            _2937 = _3233 + _2950;
                            _2938 = _3234 + _2951;
                            _2933 = _3229 + _2946;
                            _2934 = _3230 + _2947;
                            _2935 = _3231 + _2948;
                            if (_2953 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2953;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2938;
                        frontier_phi_79_pred_1 = _2937;
                        frontier_phi_79_pred_2 = _2936;
                        frontier_phi_79_pred_3 = _2935;
                        frontier_phi_79_pred_4 = _2934;
                        frontier_phi_79_pred_5 = _2933;
                    }
                    _2575 = frontier_phi_79_pred;
                    _2573 = frontier_phi_79_pred_1;
                    _2571 = frontier_phi_79_pred_2;
                    _2569 = frontier_phi_79_pred_3;
                    _2567 = frontier_phi_79_pred_4;
                    _2565 = frontier_phi_79_pred_5;
                    uint _2731 = _2730 + 1u;
                    if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2724 = _2565;
                        _2725 = _2567;
                        _2726 = _2569;
                        _2727 = _2571;
                        _2728 = _2573;
                        _2729 = _2575;
                        _2730 = _2731;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2571;
                frontier_phi_60_61_ladder_1 = _2575;
                frontier_phi_60_61_ladder_2 = _2573;
                frontier_phi_60_61_ladder_3 = _2569;
                frontier_phi_60_61_ladder_4 = _2567;
                frontier_phi_60_61_ladder_5 = _2565;
            }
            else
            {
                frontier_phi_60_61_ladder = _2450;
                frontier_phi_60_61_ladder_1 = _2454;
                frontier_phi_60_61_ladder_2 = _2452;
                frontier_phi_60_61_ladder_3 = _2448;
                frontier_phi_60_61_ladder_4 = _2446;
                frontier_phi_60_61_ladder_5 = _2444;
            }
            _2564 = frontier_phi_60_61_ladder_5;
            _2566 = frontier_phi_60_61_ladder_4;
            _2568 = frontier_phi_60_61_ladder_3;
            _2570 = frontier_phi_60_61_ladder;
            _2572 = frontier_phi_60_61_ladder_2;
            _2574 = frontier_phi_60_61_ladder_1;
        }
        float _2579 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
        _2356 = (_2579 * _2570) + _1793;
        _2358 = (_2579 * _2572) + _1795;
        _2360 = (_2579 * _2574) + _1797;
        _2362 = ((_2564 * _569) * _2579) + _2138;
        _2364 = ((_2566 * _571) * _2579) + _2140;
        _2366 = ((_2568 * _572) * _2579) + _2142;
    }
    else
    {
        _2356 = _1793;
        _2358 = _1795;
        _2360 = _1797;
        _2362 = _2138;
        _2364 = _2140;
        _2366 = _2142;
    }
    float _4309 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4320 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4331 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _2383 = ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2356 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _584))) + ((_2362 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1426)) * cbPerFrame._m0[3u].x);
    float _2384 = ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2358 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _584))) + ((_2364 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1426)) * cbPerFrame._m0[3u].x);
    float _2385 = ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2360 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _584))) + ((_2366 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1426)) * cbPerFrame._m0[3u].x);
    uint _2386 = _544 + 6u;
    float _2394 = _506 / cbSceneParam._m0[86u].x;
    float _2395 = _507 / cbSceneParam._m0[86u].y;
    vec4 _2409 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, (log2((isnan(cbSceneParam._m0[77u].w) ? _427 : (isnan(_427) ? cbSceneParam._m0[77u].w : min(_427, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2411 = _2409.x;
    float _2412 = _2409.y;
    float _2413 = _2409.z;
    float _2414 = _2409.w;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_427 > cbSceneParam._m0[78u].w)
    {
        float _2469 = isnan(_427) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _427 : min(cbSceneParam._m0[80u].w, _427));
        float _2470 = _2469 / _427;
        float _2481 = _2470 * _478;
        float _2482 = _479 * _2470;
        float _2483 = (-0.0) - _2482;
        float _2484 = _2470 * _480;
        float _2486 = (cbSceneParam._m0[77u].w * _2483) / _2469;
        float _2487 = _2486 + cbSceneParam._m0[79u].w;
        float _2488 = cbSceneParam._m0[79u].w - _2482;
        float _2494 = sqrt(((_2481 * _2481) + (_2482 * _2482)) + (_2484 * _2484));
        float _2497 = (1.0 - (cbSceneParam._m0[77u].w / _2469)) * _2494;
        float _2502 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2504 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2681;
        if (abs((_2483 - _2486) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2681 = ((((_2487 > 0.0) ? exp2(_2502 * _2487) : (2.0 - exp2(_2504 * _2487))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2497;
        }
        else
        {
            float _2625 = 1.0 / cbSceneParam._m0[80u].x;
            float _2626 = isnan(_2488) ? _2487 : (isnan(_2487) ? _2488 : max(_2487, _2488));
            float _2627 = isnan(_2488) ? _2487 : (isnan(_2487) ? _2488 : min(_2487, _2488));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            float _2637 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : min(_2627, 0.0));
            _2681 = ((abs(_2494 / _2483) * cbSceneParam._m0[80u].y) * ((((_2636 - _2637) * 2.0) - ((exp2(_2502 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0)))) - exp2(_2502 * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0))))) * _2625)) - ((exp2(_2504 * _2636) - exp2(_2504 * _2637)) * _2625))) + (_2497 * cbSceneParam._m0[80u].z);
        }
        vec4 _2683 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, 1.0), 0.0);
        float _2692 = exp2((_2681 * (-1.44269502162933349609375)) * (1.0 - _2683.w));
        float _2693 = log2(_2692);
        float _2709 = log2(_2414);
        _2506 = (exp2(_2709 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].x)) * _2683.x) / cbSceneParam._m0[78u].x)) + _2411;
        _2508 = (exp2(_2709 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].y)) * _2683.y) / cbSceneParam._m0[78u].y)) + _2412;
        _2510 = (exp2(_2709 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2693 * cbSceneParam._m0[78u].z)) * _2683.z) / cbSceneParam._m0[78u].z)) + _2413;
        _2512 = _2692 * _2414;
    }
    else
    {
        _2506 = _2411;
        _2508 = _2412;
        _2510 = _2413;
        _2512 = _2414;
    }
    bool _2719;
    vec4 _2522;
    vec4 _2544;
    float _2546;
    float _2550;
    float _2551;
    float _2552;
    float _2553;
    bool _2563;
    for (;;)
    {
        _2522 = cbMatDynParam._m0[0u];
        float _2524 = roundEven(_2522.y);
        bool _2525 = _2524 == 3.0;
        float _2526 = log2(_2512);
        float _2533 = exp2(_2526 * cbSceneParam._m0[78u].x) * _2383;
        float _2534 = exp2(_2526 * cbSceneParam._m0[78u].y) * _2384;
        float _2535 = exp2(_2526 * cbSceneParam._m0[78u].z) * _2385;
        float _2542 = _494 + (-0.5);
        _2544 = cbMtdParam._m0[1u];
        _2546 = _2544.y * _2542;
        float _2549 = (_2524 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2550 = _2549 * (_2525 ? _2533 : (_2533 + (cbSceneParam._m0[72u].w * _2506)));
        _2551 = _2549 * (_2525 ? _2534 : (_2534 + (cbSceneParam._m0[72u].w * _2508)));
        _2552 = _2549 * (_2525 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2510)));
        _2553 = _2542 * 0.999000012874603271484375;
        _2563 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2563)
        {
            if ((cbInstanceData._m0[_544 + 7u].x + _2553) < 0.5)
            {
                _2719 = true;
                break;
            }
        }
        uint _2660 = _545 + uint(_2522.w);
        if ((cbInstanceData._m0[_2660].w < 1.0) && ((cbInstanceData._m0[_2660].w + _2553) < 0.5))
        {
            _2719 = true;
            break;
        }
        if ((_2546 + 1.0) < _2544.x)
        {
            _2719 = true;
            break;
        }
        _2719 = false;
        break;
    }
    float _2924;
    if (_2719)
    {
        discard_state = true;
        _2924 = 0.0;
    }
    else
    {
        _2924 = cbInstanceData._m0[_2386].w;
    }
    SV_Target.x = _2550;
    SV_Target.y = _2551;
    SV_Target.z = _2552;
    SV_Target.w = _2924;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2386].w;
    discard_exit();
}


