#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _953;
float _3346;
float _3347;
float _3348;
float _3349;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _239 = _234.z;
    float _243 = (_234.x * 2.0) + (-1.0);
    float _245 = (_234.y * 2.0) + (-1.0);
    float _246 = dot(vec2(_243, _245), vec2(_243, _245));
    float _3358 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _252 = sqrt(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))));
    float _255 = fma(_252, _218, fma(_245, _211, _243 * _197));
    float _258 = fma(_252, _219, fma(_245, _212, _243 * _198));
    float _261 = fma(_252, _220, fma(_245, _213, _243 * _199));
    float _265 = inversesqrt(dot(vec3(_255, _258, _261), vec3(_255, _258, _261)));
    float _282 = cbMtdParam._m0[11u].z + dot(vec4(_265 * _255, _265 * _258, _265 * _261, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3369 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    vec4 _301 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _306 = _301.x * cbMtdParam._m0[9u].x;
    float _307 = _301.y * cbMtdParam._m0[9u].y;
    float _308 = _301.z * cbMtdParam._m0[9u].z;
    vec4 _321 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _332 = ((_321.x - _306) * _283) + _306;
    float _333 = ((_321.y - _307) * _283) + _307;
    float _334 = ((_321.z - _308) * _283) + _308;
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _354 = (_347.x * 2.0) + (-1.0);
    float _355 = (_347.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_354, _355), vec2(_354, _355));
    float _3380 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _364 = ((_347.z - _239) * _283) + _239;
    float _371 = ((_354 - _243) * _283) + _243;
    float _372 = ((_355 - _245) * _283) + _245;
    float _373 = ((sqrt(1.0 - (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) - _252) * _283) + _252;
    float _376 = fma(_373, _218, fma(_372, _211, _371 * _197));
    float _379 = fma(_373, _219, fma(_372, _212, _371 * _198));
    float _382 = fma(_373, _220, fma(_372, _213, _371 * _199));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _3391 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _390 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _3402 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3413 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3424 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _409 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _460 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _450);
    float _461 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _450);
    float _462 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _450);
    float _466 = inversesqrt(dot(vec3(_460, _461, _462), vec3(_460, _461, _462)));
    float _467 = _460 * _466;
    float _468 = _461 * _466;
    float _469 = _462 * _466;
    vec4 _474 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _476 = _474.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _632 = sqrt(((_460 * _460) + (_461 * _461)) + (_462 * _462));
        float _638 = (cbMatDynParam._m0[5u].x * _632) + cbMatDynParam._m0[5u].y;
        float _3435 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _643 = (cbMatDynParam._m0[5u].z * _632) + cbMatDynParam._m0[5u].w;
        float _3446 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) - _639)) + _639) < ((_476 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _488 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _489 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _508 = fma(_389, cbSceneParam._m0[5u].z, fma(_388, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _387));
    float _511 = fma(_389, cbSceneParam._m0[6u].z, fma(_388, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _387));
    float _514 = fma(_389, cbSceneParam._m0[7u].z, fma(_388, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _387));
    uint _527 = uint(roundEven(NORMAL.w)) * 13u;
    uint _528 = _527 + 9u;
    uint _529 = _528 + uint(cbMatDynParam._m0[0u].w);
    float _535 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_529].x;
    float _536 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * cbInstanceData._m0[_529].y;
    float _537 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) * cbInstanceData._m0[_529].z;
    float _3457 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _3479 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    vec4 _549 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _488, cbSceneParam._m0[86u].y * _489));
    float _552 = _549.x * TEXCOORD_9.w;
    float _553 = dot(vec3(_387, _388, _389), vec3(_467, _468, _469));
    float _556 = _553 * 2.0;
    float _560 = (_556 * _387) - _467;
    float _561 = (_556 * _388) - _468;
    float _562 = (_556 * _389) - _469;
    float _566 = abs(dot(vec3(_467, _468, _469), vec3(_387, _388, _389)));
    float _3490 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _568 = sqrt(_390);
    float _581 = exp2((_568 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_568 * 3.0));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _952;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _677 = fma(_621, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613));
        float _681 = fma(_621, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613));
        float _685 = fma(_621, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613));
        float _710 = _613 + _387;
        float _711 = _617 + _388;
        float _712 = _621 + _389;
        float _722 = fma(_712, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710)) - _677;
        float _723 = fma(_712, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710)) - _681;
        float _724 = fma(_712, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710)) - _685;
        float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
        float _741 = ((_728 * _722) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_677 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_728 * _723) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_681 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_728 * _724) / cbModelParam._m0[34u].z) + ((((((_685 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        float _780 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_746.x + (-0.5));
        float _782 = _780 * (_746.y + (-0.5));
        float _783 = _780 * (_746.z + (-0.5));
        float _790 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_753.x + (-0.5));
        float _792 = _790 * (_753.y + (-0.5));
        float _793 = _790 * (_753.z + (-0.5));
        float _800 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_760.x + (-0.5));
        float _802 = _800 * (_760.y + (-0.5));
        float _803 = _800 * (_760.z + (-0.5));
        float _810 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_767.x + (-0.5));
        float _812 = _810 * (_767.y + (-0.5));
        float _813 = _810 * (_767.z + (-0.5));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = _781 * 0.5;
        float _818 = _791 * 0.5;
        float _819 = _801 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _834 = (dot(vec3(_387, _388, _389), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _844 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3538 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_846 + 1.0))) + _851) * _814;
        float _861 = _782 * 0.5;
        float _862 = _792 * 0.5;
        float _863 = _802 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_387, _388, _389), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3571 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_888 + 1.0))) + _893) * _815;
        float _903 = _783 * 0.5;
        float _904 = _793 * 0.5;
        float _905 = _803 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_387, _388, _389), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3604 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_930 + 1.0))) + _935) * _816;
        _952 = _783;
        _954 = _782;
        _955 = _781;
        _956 = _793;
        _957 = _792;
        _958 = _791;
        _959 = _803;
        _960 = _802;
        _961 = _801;
        _962 = _816;
        _963 = _815;
        _964 = _814;
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
    }
    else
    {
        _952 = _953;
        _954 = _953;
        _955 = _953;
        _956 = _953;
        _957 = _953;
        _958 = _953;
        _959 = _953;
        _960 = _953;
        _961 = _953;
        _962 = _953;
        _963 = _953;
        _964 = _953;
        _965 = 0.0;
        _966 = 0.0;
        _967 = 0.0;
    }
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _996 = fma(_621, cbModelParam._m0[30u].z, fma(_617, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _613));
        float _1000 = fma(_621, cbModelParam._m0[31u].z, fma(_617, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _613));
        float _1004 = fma(_621, cbModelParam._m0[32u].z, fma(_617, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _613));
        float _1027 = _613 + _387;
        float _1028 = _617 + _388;
        float _1029 = _621 + _389;
        float _1039 = fma(_1029, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027)) - _996;
        float _1040 = fma(_1029, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027)) - _1000;
        float _1041 = fma(_1029, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027)) - _1004;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_996 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1000 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[35u].z) + ((((((_1004 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1095 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1062.x + (-0.5));
        float _1097 = _1095 * (_1062.y + (-0.5));
        float _1098 = _1095 * (_1062.z + (-0.5));
        float _1105 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1069.x + (-0.5));
        float _1107 = _1105 * (_1069.y + (-0.5));
        float _1108 = _1105 * (_1069.z + (-0.5));
        float _1115 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1076.x + (-0.5));
        float _1117 = _1115 * (_1076.y + (-0.5));
        float _1118 = _1115 * (_1076.z + (-0.5));
        float _1125 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1083.x + (-0.5));
        float _1127 = _1125 * (_1083.y + (-0.5));
        float _1128 = _1125 * (_1083.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_387, _388, _389), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3667 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1159 + 1.0))) + _1164) * _1129;
        float _1174 = _1097 * 0.5;
        float _1175 = _1107 * 0.5;
        float _1176 = _1117 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_387, _388, _389), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3700 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1201 + 1.0))) + _1206) * _1130;
        float _1216 = _1098 * 0.5;
        float _1217 = _1108 * 0.5;
        float _1218 = _1118 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_387, _388, _389), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3733 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1243 + 1.0))) + _1248) * _1131;
        _1265 = _1098;
        _1266 = _1097;
        _1267 = _1096;
        _1268 = _1108;
        _1269 = _1107;
        _1270 = _1106;
        _1271 = _1118;
        _1272 = _1117;
        _1273 = _1116;
        _1274 = _1131;
        _1275 = _1130;
        _1276 = _1129;
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _953;
        _1266 = _953;
        _1267 = _953;
        _1268 = _953;
        _1269 = _953;
        _1270 = _953;
        _1271 = _953;
        _1272 = _953;
        _1273 = _953;
        _1274 = _953;
        _1275 = _953;
        _1276 = _953;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _965)) + _965;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1312 = fma(_1291, cbSceneParam._m0[89u].z, fma(_1290, cbSceneParam._m0[89u].y, _1289 * cbSceneParam._m0[89u].x));
    float _1315 = fma(_1291, cbSceneParam._m0[90u].z, fma(_1290, cbSceneParam._m0[90u].y, _1289 * cbSceneParam._m0[90u].x));
    float _1318 = fma(_1291, cbSceneParam._m0[91u].z, fma(_1290, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1289));
    float _1333 = _560 * 0.5;
    float _1334 = _561 * 0.5;
    float _1335 = _562 * 0.5;
    float _1336 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1339 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1342 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1376;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1349 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_952, _956, _959, _962));
        float _1353 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_954, _957, _960, _963));
        float _1357 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_955, _958, _961, _964));
        float _1364 = dot(vec4(cbModelParam._m0[39u]), vec4(_1333, _1334, _1335, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1387;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1378 = dot(vec4(cbModelParam._m0[40u]), vec4(_1333, _1334, _1335, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1391 = (_1387 * cbModelParam._m0[1u].x) + (_1376 * (1.0 - cbModelParam._m0[1u].x));
    float _1401 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _390);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1401 : min(cbModelParam._m0[25u].z, _1401));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1451 = fma(_621, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613)) + cbModelParam._m0[13u].w;
        float _1455 = fma(_621, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613)) + cbModelParam._m0[14u].w;
        float _1459 = fma(_621, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613)) + cbModelParam._m0[15u].w;
        float _1462 = fma(_562, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560));
        float _1465 = fma(_562, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560));
        float _1468 = fma(_562, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560));
        float _1496;
        if (_1462 > 0.0)
        {
            _1496 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1496 = frontier_phi_19_17_ladder;
        }
        float _1722;
        if (_1465 > 0.0)
        {
            _1722 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1722 = frontier_phi_28_24_ladder;
        }
        float _1968;
        if (_1468 > 0.0)
        {
            _1968 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1968 = frontier_phi_40_35_ladder;
        }
        float _1970 = isnan(_1722) ? _1496 : (isnan(_1496) ? _1722 : min(_1496, _1722));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1462) + _1451;
        float _1976 = (_1971 * _1465) + _1455;
        float _1977 = (_1971 * _1468) + _1459;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1978;
        float _1982 = _1978 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 > _1982) || ((_1976 < _1980) || ((_1975 < _1980) || (_1975 > _1982))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1977, cbModelParam._m0[9u].z, fma(_1976, cbModelParam._m0[9u].y, _1975 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1977, cbModelParam._m0[10u].z, fma(_1976, cbModelParam._m0[10u].y, _1975 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1977, cbModelParam._m0[11u].z, fma(_1976, cbModelParam._m0[11u].y, _1975 * cbModelParam._m0[11u].x))), _1402);
            frontier_phi_18_40_ladder = _2101.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2101.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2101.x * cbModelParam._m0[1u].y;
        }
        _1484 = frontier_phi_18_40_ladder_2;
        _1486 = frontier_phi_18_40_ladder_1;
        _1488 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_560, _561, _562), _1402);
        _1484 = _1472.x * cbModelParam._m0[1u].y;
        _1486 = _1472.y * cbModelParam._m0[1u].y;
        _1488 = _1472.z * cbModelParam._m0[1u].y;
    }
    float _1492 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _390);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1492 : min(cbModelParam._m0[25u].w, _1492));
    float _1586;
    float _1588;
    float _1590;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1550 = fma(_621, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613)) + cbModelParam._m0[21u].w;
        float _1554 = fma(_621, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613)) + cbModelParam._m0[22u].w;
        float _1558 = fma(_621, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613)) + cbModelParam._m0[23u].w;
        float _1561 = fma(_562, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560));
        float _1564 = fma(_562, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560));
        float _1567 = fma(_562, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560));
        float _1727;
        if (_1561 > 0.0)
        {
            _1727 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1727 = frontier_phi_30_26_ladder;
        }
        float _1995;
        if (_1564 > 0.0)
        {
            _1995 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1995 = frontier_phi_42_37_ladder;
        }
        float _2200;
        if (_1567 > 0.0)
        {
            _2200 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2200 = frontier_phi_51_48_ladder;
        }
        float _2202 = isnan(_1995) ? _1727 : (isnan(_1727) ? _1995 : min(_1727, _1995));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1561) + _1550;
        float _2208 = (_2203 * _1564) + _1554;
        float _2209 = (_2203 * _1567) + _1558;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1493);
            frontier_phi_27_51_ladder = _2407.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2407.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2407.x * cbModelParam._m0[1u].z;
        }
        _1586 = frontier_phi_27_51_ladder_2;
        _1588 = frontier_phi_27_51_ladder_1;
        _1590 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_560, _561, _562), _1493);
        _1586 = _1570.x * cbModelParam._m0[1u].z;
        _1588 = _1570.y * cbModelParam._m0[1u].z;
        _1590 = _1570.z * cbModelParam._m0[1u].z;
    }
    float _1602 = ((((1.0 - _581) * ((_568 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_581 * _568)) * _552;
    float _1603 = _1602 * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1604 = _1602 * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1605 = _1602 * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1608 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1603 * cbSceneParam._m0[91u].x));
    vec4 _1622 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_488, _489));
    float _1624 = _1622.w;
    float _1636 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1624);
    float _1637 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1624);
    float _1638 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1624);
    uvec4 _1642 = floatBitsToUint(cbInstanceData._m0[_527 + 5u]);
    uint _1644 = _1642.x * 14u;
    uint _1645 = _1644 + 13u;
    float _1652 = _552 + (-1.0);
    float _1657 = (cbLight._m0[_1645].x * _1652) + 1.0;
    float _1658 = (cbLight._m0[_1645].y * _1652) + 1.0;
    float _1659 = (cbLight._m0[_1645].z * _1652) + 1.0;
    float _1660 = (cbLight._m0[_1645].w * _1652) + 1.0;
    uint _1661 = _1644 + 5u;
    float _1667 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
    uint _1671 = _1644 + 4u;
    float _1681 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
    uint _1685 = _1644 | 1u;
    float _1696 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_387, _388, _389));
    float _1699 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_387, _388, _389));
    float _3869 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _3880 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1704 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.3183098733425140380859375;
    float _1706 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * 0.3183098733425140380859375;
    float _1713 = ((cbLight._m0[_1661].x * _1667) * _1706) + (((cbLight._m0[_1671].x * _1636) * _1681) * _1704);
    float _1714 = ((_1667 * cbLight._m0[_1661].y) * _1706) + (((cbLight._m0[_1671].y * _1637) * _1681) * _1704);
    float _1715 = ((_1667 * cbLight._m0[_1661].z) * _1706) + (((cbLight._m0[_1671].z * _1638) * _1681) * _1704);
    uvec4 _1719 = floatBitsToUint(cbLight._m0[_1644 + 12u]);
    bool _1721 = _1719.x == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1721)
    {
        _1732 = _1713;
        _1734 = _1714;
        _1736 = _1715;
    }
    else
    {
        uint _1740 = _1644 + 6u;
        float _1756 = (dot(vec3(cbLight._m0[_1644 + 2u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1757 = _1756 * _1756;
        float _3891 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1759 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1732 = (((cbLight._m0[_1740].x * 0.3183098733425140380859375) * _1758) * _1759) + _1713;
        _1734 = (((cbLight._m0[_1740].y * 0.3183098733425140380859375) * _1758) * _1759) + _1714;
        _1736 = (((cbLight._m0[_1740].z * 0.3183098733425140380859375) * _1758) * _1759) + _1715;
    }
    bool _1739 = _1719.y == 0u;
    float _1777;
    float _1779;
    float _1781;
    if (_1739)
    {
        _1777 = _1732;
        _1779 = _1734;
        _1781 = _1736;
    }
    else
    {
        uint _1939 = _1644 + 7u;
        float _1955 = (dot(vec3(cbLight._m0[_1644 + 3u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1956 = _1955 * _1955;
        float _3907 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1958 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _1777 = (((cbLight._m0[_1939].x * 0.3183098733425140380859375) * _1957) * _1958) + _1732;
        _1779 = (((cbLight._m0[_1939].y * 0.3183098733425140380859375) * _1957) * _1958) + _1734;
        _1781 = (((cbLight._m0[_1939].z * 0.3183098733425140380859375) * _1957) * _1958) + _1736;
    }
    uint _1784 = _1644 + 8u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1644].w)) * _390) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1644].x + _467;
    float _1800 = cbLight._m0[_1644].y + _468;
    float _1801 = cbLight._m0[_1644].z + _469;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1644].xyz));
    float _3923 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _1813 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1814 = dot(vec3(_387, _388, _389), vec3(_1806, _1807, _1808));
    float _3945 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_1806, _1807, _1808));
    float _3956 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1798 * _1798;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1837 = (exp2(log2(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1838 = 1.0 - _1798;
    float _1849 = (0.5 / (((_1813 * ((_1812 * _1838) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1838) + _1798) * _1812))) * _1812;
    float _3967 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1851 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    uint _1865 = _1644 + 9u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1685].w)) * _390) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1685].x + _467;
    float _1879 = cbLight._m0[_1685].y + _468;
    float _1880 = cbLight._m0[_1685].z + _469;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1685].xyz));
    float _3978 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1892 = dot(vec3(_387, _388, _389), vec3(_1885, _1886, _1887));
    float _3989 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1885, _1886, _1887));
    float _4000 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1877 * _1877;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1914 = 1.0 - _1877;
    float _1924 = (0.5 / (((_1813 * ((_1891 * _1914) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1914) + _1877) * _1891))) * _1891;
    float _4011 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    float _1936 = (((_1913 * cbLight._m0[_1865].x) * _1926) * _1667) + ((((cbLight._m0[_1784].x * _1636) * _1837) * _1851) * _1681);
    float _1937 = (((_1913 * cbLight._m0[_1865].y) * _1926) * _1667) + ((((cbLight._m0[_1784].y * _1637) * _1837) * _1851) * _1681);
    float _1938 = (((_1913 * cbLight._m0[_1865].z) * _1926) * _1667) + ((((cbLight._m0[_1784].z * _1638) * _1837) * _1851) * _1681);
    float _2000;
    float _2002;
    float _2004;
    if (_1721)
    {
        _2000 = _1936;
        _2002 = _1937;
        _2004 = _1938;
    }
    else
    {
        uint _2006 = _1644 + 2u;
        uint _2010 = _1644 + 10u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _390) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _467;
        float _2027 = cbLight._m0[_2006].y + _468;
        float _2028 = cbLight._m0[_2006].z + _469;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2006].xyz));
        float _4022 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2040 = dot(vec3(_387, _388, _389), vec3(_2033, _2034, _2035));
        float _4033 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _4044 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2062 = 1.0 - _2025;
        float _2072 = (0.5 / (((_1813 * ((_2039 * _2062) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2062) + _2025) * _2039))) * _2039;
        float _4055 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2074 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2075 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _2000 = (((_2061 * cbLight._m0[_2010].x) * _2074) * _2075) + _1936;
        _2002 = (((_2061 * cbLight._m0[_2010].y) * _2074) * _2075) + _1937;
        _2004 = (((_2061 * cbLight._m0[_2010].z) * _2074) * _2075) + _1938;
    }
    float _2110;
    float _2112;
    float _2114;
    if (_1739)
    {
        _2110 = _2000;
        _2112 = _2002;
        _2114 = _2004;
    }
    else
    {
        uint _2121 = _1644 + 3u;
        uint _2125 = _1644 + 11u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _390) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _467;
        float _2142 = cbLight._m0[_2121].y + _468;
        float _2143 = cbLight._m0[_2121].z + _469;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2121].xyz));
        float _4071 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2155 = dot(vec3(_387, _388, _389), vec3(_2148, _2149, _2150));
        float _4082 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4093 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = 1.0 - _2140;
        float _2187 = (0.5 / (((_1813 * ((_2154 * _2177) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2177) + _2140) * _2154))) * _2154;
        float _4104 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _2110 = (((_2176 * cbLight._m0[_2125].x) * _2189) * _2190) + _2000;
        _2112 = (((_2176 * cbLight._m0[_2125].y) * _2189) * _2190) + _2002;
        _2114 = (((_2176 * cbLight._m0[_2125].z) * _2189) * _2190) + _2004;
    }
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    if (_1642.y == 0u)
    {
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2265;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2265;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2265;
        uvec4 _2280 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2281 = _2280.x;
        uint _2292 = uint((float(_2280.y) * floor(float(uint(cbSceneParam._m0[85u].y * _489) / _2281))) + floor(float(uint(cbSceneParam._m0[85u].x * _488) / _2281)));
        float _2302 = (log2(_2268 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2303 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        uint _2306 = uint(isnan(14.0) ? _2303 : (isnan(_2303) ? 14.0 : min(_2303, 14.0)));
        uvec4 _2311 = texelFetch(g_lightClusterGridBuffer, int(((_2306 << 2u) + (_2292 << 6u)) >> 2u));
        uint _2312 = _2311.x;
        uint _2313 = _2280.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2313 >> 4u) & 15u)) + 4294967295u) & _2312) == 0u) || ((_2313 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            uint _2570 = 0u;
            uint _2579;
            bool _2580;
            for (;;)
            {
                _2579 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                _2580 = _2579 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2580)
                {
                    frontier_phi_68_pred = _2566;
                    frontier_phi_68_pred_1 = _2569;
                    frontier_phi_68_pred_2 = _2568;
                    frontier_phi_68_pred_3 = _2567;
                    frontier_phi_68_pred_4 = _2565;
                    frontier_phi_68_pred_5 = _2564;
                }
                else
                {
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    uint _2715;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2579;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    for (;;)
                    {
                        uint _2719 = uint(findLSB(_2715)) + (_2570 << 5u);
                        uint _2716 = (_2715 + 4294967295u) & _2715;
                        uint _2721 = _2719 * 48u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2741 = (_2719 * 48u) + 4u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2760 = (_2719 * 48u) + 8u;
                        vec3 _2771 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x));
                        float _2775 = _2735.x - _2266;
                        float _2776 = _2735.y - _2267;
                        float _2777 = _2735.z - _2268;
                        float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                        float _2781 = inversesqrt(_2778);
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2785 = dot(vec3(_508, _511, _514), vec3(_2782, _2783, _2784));
                        float _2790 = 1.0 - (_2778 * _2735.w);
                        float _4130 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2792 = sqrt(_2778) * _2754.w;
                        float _2795 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                        float _2796 = _2795 * _2795;
                        float _2799 = ((1.0 - _2796) * _2785) + _2796;
                        float _2802 = _2792 * _2792;
                        float _2806 = ((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2791) / ((_2802 * 0.699999988079071044921875) + 1.0);
                        float _2810 = (-0.0) - _2266;
                        float _2811 = (-0.0) - _2267;
                        float _2812 = (-0.0) - _2268;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2827 = exp2(log2(1.0 / ((_2802 * 3.5) + 5.0)) * 0.25);
                        float _2828 = 1.0 - _568;
                        float _2835 = sqrt(1.0 - ((1.0 - (_2828 * _2828)) * (1.0 - (_2827 * _2827))));
                        float _2836 = _2835 * _2835;
                        float _2837 = _2836 * _2836;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2848 = dot(vec3(_508, _511, _514), vec3(_2817, _2818, _2819));
                        float _4146 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2852 = dot(vec3(_508, _511, _514), vec3(_2844 * _2838, _2844 * _2839, _2844 * _2840));
                        float _4157 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2859 = ((_2855 * _2855) * (_2837 + (-1.0))) + 1.0;
                        float _2860 = _2795 * _2836;
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2785) + _2861;
                        float _4168 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2866 = 1.0 - _2836;
                        float _2876 = (0.5 / (((_2865 * ((_2851 * _2866) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2865 * _2866) + _2836) * _2851))) * _2865;
                        float _4179 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2887 = (((_2837 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_2859 * _2859) * ((_2802 * 2.1991131305694580078125) + 3.141590118408203125))) * _2791;
                        _2639 = (_2806 * _2754.x) + _2712;
                        _2640 = (_2806 * _2754.y) + _2713;
                        _2641 = (_2806 * _2754.z) + _2714;
                        _2636 = (_2887 * _2771.x) + _2709;
                        _2637 = (_2887 * _2771.y) + _2710;
                        _2638 = (_2887 * _2771.z) + _2711;
                        if (_2716 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2716;
                        }
                    }
                    frontier_phi_68_pred = _2638;
                    frontier_phi_68_pred_1 = _2641;
                    frontier_phi_68_pred_2 = _2640;
                    frontier_phi_68_pred_3 = _2639;
                    frontier_phi_68_pred_4 = _2637;
                    frontier_phi_68_pred_5 = _2636;
                }
                _2417 = frontier_phi_68_pred;
                _2423 = frontier_phi_68_pred_1;
                _2421 = frontier_phi_68_pred_2;
                _2419 = frontier_phi_68_pred_3;
                _2415 = frontier_phi_68_pred_4;
                _2413 = frontier_phi_68_pred_5;
                uint _2571 = _2570 + 1u;
                if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2564 = _2413;
                    _2565 = _2415;
                    _2566 = _2417;
                    _2567 = _2419;
                    _2568 = _2421;
                    _2569 = _2423;
                    _2570 = _2571;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((4294967295u << _2429) & _2312) == 0u)
        {
            _2532 = _2412;
            _2534 = _2414;
            _2536 = _2416;
            _2538 = _2418;
            _2540 = _2420;
            _2542 = _2422;
        }
        else
        {
            float _2557 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
            float _2558 = _2557 * _2266;
            float _2559 = _2557 * _2267;
            float _2560 = _2557 * _2268;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2692 = _2412;
                float _2693 = _2414;
                float _2694 = _2416;
                float _2695 = _2418;
                float _2696 = _2420;
                float _2697 = _2422;
                uint _2698 = _2429;
                uint _2707;
                bool _2708;
                for (;;)
                {
                    _2707 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                    _2708 = _2707 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2708)
                    {
                        frontier_phi_79_pred = _2697;
                        frontier_phi_79_pred_1 = _2696;
                        frontier_phi_79_pred_2 = _2695;
                        frontier_phi_79_pred_3 = _2694;
                        frontier_phi_79_pred_4 = _2693;
                        frontier_phi_79_pred_5 = _2692;
                    }
                    else
                    {
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        uint _2920 = _2707;
                        uint _2921;
                        vec4 _2946;
                        float _2947;
                        vec4 _2962;
                        vec3 _2974;
                        vec4 _2990;
                        vec4 _3006;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2931 = ((_2698 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2920));
                            _2921 = (_2920 + 4294967295u) & _2920;
                            uint _2933 = _2931 * 40u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2947 = _2946.w;
                            uint _2949 = (_2931 * 40u) + 4u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2931 * 40u) + 8u;
                            _2974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x));
                            uint _2977 = (_2931 * 40u) + 16u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2993 = (_2931 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2931 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2931 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_2268, _3041.z, fma(_2267, _3041.y, _3041.x * _2266)) + _3041.w;
                            _3054 = !((fma(_2268, _3022.z, fma(_2267, _3022.y, _3022.x * _2266)) + _3022.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2946.x - _2266;
                                float _3082 = _2946.y - _2267;
                                float _3083 = _2946.z - _2268;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2947 * _2947));
                                float _4190 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3099 = sqrt(_3084) * _2962.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_508, _511, _514))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_2268, _2990.z, fma(_2267, _2990.y, _2990.x * _2266)) + _2990.w) / _3053;
                                float _3113 = (fma(_2268, _3006.z, fma(_2267, _3006.y, _3006.x * _2266)) + _3006.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4206 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _568;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2558;
                                float _3143 = _3089 - _2559;
                                float _3144 = _3090 - _2560;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_508, _511, _514), vec3((-0.0) - _2558, (-0.0) - _2559, (-0.0) - _2560));
                                float _4217 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3156 = dot(vec3(_508, _511, _514), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4228 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_508, _511, _514), vec3(_3088, _3089, _3090))) + _3165;
                                float _4239 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4250 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3119 * _2962.z;
                                frontier_phi_85_pred_1 = _3119 * _2962.y;
                                frontier_phi_85_pred_2 = _3119 * _2962.x;
                                frontier_phi_85_pred_3 = _3193 * _2974.z;
                                frontier_phi_85_pred_4 = _3193 * _2974.y;
                                frontier_phi_85_pred_5 = _3193 * _2974.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3202 = frontier_phi_85_pred;
                            _3201 = frontier_phi_85_pred_1;
                            _3200 = frontier_phi_85_pred_2;
                            _3199 = frontier_phi_85_pred_3;
                            _3198 = frontier_phi_85_pred_4;
                            _3197 = frontier_phi_85_pred_5;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2901 = _3197 + _2914;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            if (_2921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2921;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2906;
                        frontier_phi_79_pred_1 = _2905;
                        frontier_phi_79_pred_2 = _2904;
                        frontier_phi_79_pred_3 = _2903;
                        frontier_phi_79_pred_4 = _2902;
                        frontier_phi_79_pred_5 = _2901;
                    }
                    _2543 = frontier_phi_79_pred;
                    _2541 = frontier_phi_79_pred_1;
                    _2539 = frontier_phi_79_pred_2;
                    _2537 = frontier_phi_79_pred_3;
                    _2535 = frontier_phi_79_pred_4;
                    _2533 = frontier_phi_79_pred_5;
                    uint _2699 = _2698 + 1u;
                    if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2692 = _2533;
                        _2693 = _2535;
                        _2694 = _2537;
                        _2695 = _2539;
                        _2696 = _2541;
                        _2697 = _2543;
                        _2698 = _2699;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2539;
                frontier_phi_60_61_ladder_1 = _2543;
                frontier_phi_60_61_ladder_2 = _2541;
                frontier_phi_60_61_ladder_3 = _2537;
                frontier_phi_60_61_ladder_4 = _2535;
                frontier_phi_60_61_ladder_5 = _2533;
            }
            else
            {
                frontier_phi_60_61_ladder = _2418;
                frontier_phi_60_61_ladder_1 = _2422;
                frontier_phi_60_61_ladder_2 = _2420;
                frontier_phi_60_61_ladder_3 = _2416;
                frontier_phi_60_61_ladder_4 = _2414;
                frontier_phi_60_61_ladder_5 = _2412;
            }
            _2532 = frontier_phi_60_61_ladder_5;
            _2534 = frontier_phi_60_61_ladder_4;
            _2536 = frontier_phi_60_61_ladder_3;
            _2538 = frontier_phi_60_61_ladder;
            _2540 = frontier_phi_60_61_ladder_2;
            _2542 = frontier_phi_60_61_ladder_1;
        }
        float _2547 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
        _2324 = (_2547 * _2538) + _1777;
        _2326 = (_2547 * _2540) + _1779;
        _2328 = (_2547 * _2542) + _1781;
        _2330 = ((_2532 * 0.039999999105930328369140625) * _2547) + _2110;
        _2332 = ((_2534 * 0.039999999105930328369140625) * _2547) + _2112;
        _2334 = ((_2536 * 0.039999999105930328369140625) * _2547) + _2114;
    }
    else
    {
        _2324 = _1777;
        _2326 = _1779;
        _2328 = _1781;
        _2330 = _2110;
        _2332 = _2112;
        _2334 = _2114;
    }
    float _4266 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4277 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4288 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _2351 = ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2324 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _552))) + ((_2330 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    float _2352 = ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2326 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _552))) + ((_2332 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    float _2353 = ((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2328 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _552))) + ((_2334 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    uint _2354 = _527 + 6u;
    float _2362 = _488 / cbSceneParam._m0[86u].x;
    float _2363 = _489 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _409 : (isnan(_409) ? cbSceneParam._m0[77u].w : min(_409, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_409 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_409) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _409 : min(cbSceneParam._m0[80u].w, _409));
        float _2438 = _2437 / _409;
        float _2449 = _2438 * _460;
        float _2450 = _461 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2452 = _2438 * _462;
        float _2454 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2450;
        float _2462 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2462;
        float _2470 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2472 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2649;
        if (abs((_2451 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2649 = ((((_2455 > 0.0) ? exp2(_2470 * _2455) : (2.0 - exp2(_2472 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2593 = 1.0 / cbSceneParam._m0[80u].x;
            float _2594 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2595 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            _2649 = ((abs(_2462 / _2451) * cbSceneParam._m0[80u].y) * ((((_2604 - _2605) * 2.0) - ((exp2(_2470 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)))) - exp2(_2470 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))))) * _2593)) - ((exp2(_2472 * _2604) - exp2(_2472 * _2605)) * _2593))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2651 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2660 = exp2((_2649 * (-1.44269502162933349609375)) * (1.0 - _2651.w));
        float _2661 = log2(_2660);
        float _2677 = log2(_2382);
        _2474 = (exp2(_2677 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].x)) * _2651.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2476 = (exp2(_2677 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].y)) * _2651.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2478 = (exp2(_2677 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].z)) * _2651.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2480 = _2660 * _2382;
    }
    else
    {
        _2474 = _2379;
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
    }
    bool _2687;
    vec4 _2490;
    vec4 _2512;
    float _2514;
    float _2518;
    float _2519;
    float _2520;
    float _2521;
    bool _2531;
    for (;;)
    {
        _2490 = cbMatDynParam._m0[0u];
        float _2492 = roundEven(_2490.y);
        bool _2493 = _2492 == 3.0;
        float _2494 = log2(_2480);
        float _2501 = exp2(_2494 * cbSceneParam._m0[78u].x) * _2351;
        float _2502 = exp2(_2494 * cbSceneParam._m0[78u].y) * _2352;
        float _2503 = exp2(_2494 * cbSceneParam._m0[78u].z) * _2353;
        float _2510 = _476 + (-0.5);
        _2512 = cbMtdParam._m0[1u];
        _2514 = _2512.y * _2510;
        float _2517 = (_2492 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2518 = _2517 * (_2493 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2474)));
        _2519 = _2517 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2476)));
        _2520 = _2517 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2478)));
        _2521 = _2510 * 0.999000012874603271484375;
        _2531 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2531)
        {
            if ((cbInstanceData._m0[_527 + 7u].x + _2521) < 0.5)
            {
                _2687 = true;
                break;
            }
        }
        uint _2628 = _528 + uint(_2490.w);
        if ((cbInstanceData._m0[_2628].w < 1.0) && ((cbInstanceData._m0[_2628].w + _2521) < 0.5))
        {
            _2687 = true;
            break;
        }
        if ((_2514 + 1.0) < _2512.x)
        {
            _2687 = true;
            break;
        }
        _2687 = false;
        break;
    }
    float _2892;
    if (_2687)
    {
        discard_state = true;
        _2892 = 0.0;
    }
    else
    {
        _2892 = cbInstanceData._m0[_2354].w;
    }
    SV_Target.x = _2518;
    SV_Target.y = _2519;
    SV_Target.z = _2520;
    SV_Target.w = _2892;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
    discard_exit();
}


