#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1043;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _244.x;
    float _248 = _244.y;
    float _249 = _244.z;
    vec4 _281 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _294 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3378 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _304 = ((_281.z - _249) * _295) + _249;
    float _308 = ((((_281.x - _247) * _295) + _247) * 2.0) + (-1.0);
    float _310 = ((((_281.y - _248) * _295) + _248) * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3389 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))));
    float _319 = fma(_316, _228, fma(_310, _221, _308 * _207));
    float _322 = fma(_316, _229, fma(_310, _222, _308 * _208));
    float _325 = fma(_316, _230, fma(_310, _223, _308 * _209));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _343 = cbMtdParam._m0[11u].z + dot(vec4(_329 * _319, _329 * _322, _329 * _325, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3400 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _367 = _362.x * cbMtdParam._m0[9u].x;
    float _368 = _362.y * cbMtdParam._m0[9u].y;
    float _369 = _362.z * cbMtdParam._m0[9u].z;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _402 = (((_388.x * cbMtdParam._m0[10u].x) - _367) * _295) + _367;
    float _403 = (((_388.y * cbMtdParam._m0[10u].y) - _368) * _295) + _368;
    float _404 = (((_388.z * cbMtdParam._m0[10u].z) - _369) * _295) + _369;
    vec4 _417 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _428 = ((_417.x - _402) * _344) + _402;
    float _429 = ((_417.y - _403) * _344) + _403;
    float _430 = ((_417.z - _404) * _344) + _404;
    float _446 = _295 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _448 = _446 - (_446 * _344);
    vec4 _461 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _468 = (_461.x * 2.0) + (-1.0);
    float _469 = (_461.y * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3411 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _478 = ((_461.z - _304) * _344) + _304;
    float _485 = ((_468 - _308) * _344) + _308;
    float _486 = ((_469 - _310) * _344) + _310;
    float _487 = ((sqrt(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) - _316) * _344) + _316;
    float _490 = fma(_487, _228, fma(_486, _221, _485 * _207));
    float _493 = fma(_487, _229, fma(_486, _222, _485 * _208));
    float _496 = fma(_487, _230, fma(_486, _223, _485 * _209));
    float _500 = inversesqrt(dot(vec3(_490, _493, _496), vec3(_490, _493, _496)));
    float _501 = _500 * _490;
    float _502 = _500 * _493;
    float _503 = _500 * _496;
    float _3422 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _504 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3444 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3455 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3466 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _508 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _609 = fma(_503, cbSceneParam._m0[5u].z, fma(_502, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _501));
    float _612 = fma(_503, cbSceneParam._m0[6u].z, fma(_502, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _501));
    float _615 = fma(_503, cbSceneParam._m0[7u].z, fma(_502, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _501));
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _630 = (_628 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _636 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_630].x;
    float _637 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_630].y;
    float _638 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_630].z;
    float _3477 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _642 = 1.0 - _508;
    float _643 = _639 * _642;
    float _644 = _640 * _642;
    float _645 = _641 * _642;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _508;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _508;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _508;
    float _653 = _650 + 0.039999999105930328369140625;
    float _655 = _651 + 0.039999999105930328369140625;
    float _656 = _652 + 0.039999999105930328369140625;
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _668 = _665.x * TEXCOORD_9.w;
    float _669 = dot(vec3(_501, _502, _503), vec3(_581, _582, _583));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _501) - _581;
    float _677 = (_672 * _502) - _582;
    float _678 = (_672 * _503) - _583;
    float _682 = abs(dot(vec3(_581, _582, _583), vec3(_501, _502, _503)));
    float _3510 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _684 = sqrt(_504);
    float _697 = exp2((_684 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_684 * 3.0));
    float _703 = (1.0 - _697) * ((_684 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _704 = _697 * _684;
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_740, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732));
        float _771 = fma(_740, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732));
        float _775 = fma(_740, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732));
        float _800 = _732 + _501;
        float _801 = _736 + _502;
        float _802 = _740 + _503;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_501, _502, _503), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3558 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_501, _502, _503), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3591 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_501, _502, _503), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3624 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_740, cbModelParam._m0[30u].z, fma(_736, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _732));
        float _1087 = fma(_740, cbModelParam._m0[31u].z, fma(_736, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _732));
        float _1091 = fma(_740, cbModelParam._m0[32u].z, fma(_736, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _732));
        float _1114 = _732 + _501;
        float _1115 = _736 + _502;
        float _1116 = _740 + _503;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_501, _502, _503), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3687 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_501, _502, _503), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3720 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_501, _502, _503), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3753 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1043;
        _1353 = _1043;
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _676 * 0.5;
    float _1421 = _677 * 0.5;
    float _1422 = _678 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _504);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_740, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_740, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_740, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1552 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1555 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1583 = frontier_phi_16_14_ladder;
        }
        float _1789;
        if (_1552 > 0.0)
        {
            _1789 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1789 = frontier_phi_25_21_ladder;
        }
        float _2043;
        if (_1555 > 0.0)
        {
            _2043 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2043 = frontier_phi_37_32_ladder;
        }
        float _2045 = isnan(_1789) ? _1583 : (isnan(_1583) ? _1789 : min(_1583, _1789));
        float _2046 = isnan(_2043) ? _2045 : (isnan(_2045) ? _2043 : min(_2045, _2043));
        float _2050 = (_2046 * _1549) + _1538;
        float _2051 = (_2046 * _1552) + _1542;
        float _2052 = (_2046 * _1555) + _1546;
        float _2053 = _2046 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2053;
        float _2057 = _2053 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 > _2057) || ((_2051 < _2055) || ((_2050 < _2055) || (_2050 > _2057))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2052, cbModelParam._m0[9u].z, fma(_2051, cbModelParam._m0[9u].y, _2050 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2052, cbModelParam._m0[10u].z, fma(_2051, cbModelParam._m0[10u].y, _2050 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2052, cbModelParam._m0[11u].z, fma(_2051, cbModelParam._m0[11u].y, _2050 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_15_37_ladder = _2180.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2180.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2180.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_15_37_ladder_2;
        _1573 = frontier_phi_15_37_ladder_1;
        _1575 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1489);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _504);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1637 = fma(_740, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732)) + cbModelParam._m0[21u].w;
        float _1641 = fma(_740, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732)) + cbModelParam._m0[22u].w;
        float _1645 = fma(_740, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732)) + cbModelParam._m0[23u].w;
        float _1648 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1651 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1654 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1794;
        if (_1648 > 0.0)
        {
            _1794 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1794 = frontier_phi_27_23_ladder;
        }
        float _2070;
        if (_1651 > 0.0)
        {
            _2070 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2070 = frontier_phi_39_34_ladder;
        }
        float _2283;
        if (_1654 > 0.0)
        {
            _2283 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2283 = frontier_phi_48_45_ladder;
        }
        float _2285 = isnan(_2070) ? _1794 : (isnan(_1794) ? _2070 : min(_1794, _2070));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1648) + _1637;
        float _2291 = (_2286 * _1651) + _1641;
        float _2292 = (_2286 * _1654) + _1645;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_24_48_ladder = _2490.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2490.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2490.x * cbModelParam._m0[1u].z;
        }
        _1673 = frontier_phi_24_48_ladder_2;
        _1675 = frontier_phi_24_48_ladder_1;
        _1677 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1580);
        _1673 = _1657.x * cbModelParam._m0[1u].z;
        _1675 = _1657.y * cbModelParam._m0[1u].z;
        _1677 = _1657.z * cbModelParam._m0[1u].z;
    }
    float _1690 = (((_703 * _653) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1673 - _1571)) + _1571);
    float _1692 = (((_703 * _655) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1694 = (((_703 * _656) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1697 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1690 * cbSceneParam._m0[91u].x));
    uvec4 _1713 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _1715 = _1713.x * 14u;
    uint _1716 = _1715 + 13u;
    float _1723 = _668 + (-1.0);
    float _1728 = (cbLight._m0[_1716].x * _1723) + 1.0;
    float _1729 = (cbLight._m0[_1716].y * _1723) + 1.0;
    float _1730 = (cbLight._m0[_1716].z * _1723) + 1.0;
    float _1731 = (cbLight._m0[_1716].w * _1723) + 1.0;
    uint _1732 = _1715 + 5u;
    float _1738 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
    uint _1742 = _1715 + 4u;
    float _1748 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
    uint _1752 = _1715 | 1u;
    float _1763 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_501, _502, _503));
    float _1766 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_501, _502, _503));
    float _3889 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _3900 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1771 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1773 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1780 = ((cbLight._m0[_1732].x * _1738) * _1773) + ((cbLight._m0[_1742].x * _1748) * _1771);
    float _1781 = ((_1738 * cbLight._m0[_1732].y) * _1773) + ((_1748 * cbLight._m0[_1742].y) * _1771);
    float _1782 = ((_1738 * cbLight._m0[_1732].z) * _1773) + ((_1748 * cbLight._m0[_1742].z) * _1771);
    uvec4 _1786 = floatBitsToUint(cbLight._m0[_1715 + 12u]);
    bool _1788 = _1786.x == 0u;
    float _1799;
    float _1801;
    float _1803;
    if (_1788)
    {
        _1799 = _1780;
        _1801 = _1781;
        _1803 = _1782;
    }
    else
    {
        uint _1807 = _1715 + 6u;
        float _1823 = (dot(vec3(cbLight._m0[_1715 + 2u].xyz), vec3(_501, _502, _503)) * 0.5) + 0.5;
        float _1824 = _1823 * _1823;
        float _3911 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1826 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _1799 = (((cbLight._m0[_1807].x * 0.3183098733425140380859375) * _1825) * _1826) + _1780;
        _1801 = (((cbLight._m0[_1807].y * 0.3183098733425140380859375) * _1825) * _1826) + _1781;
        _1803 = (((cbLight._m0[_1807].z * 0.3183098733425140380859375) * _1825) * _1826) + _1782;
    }
    bool _1806 = _1786.y == 0u;
    float _1844;
    float _1846;
    float _1848;
    if (_1806)
    {
        _1844 = _1799;
        _1846 = _1801;
        _1848 = _1803;
    }
    else
    {
        uint _2014 = _1715 + 7u;
        float _2030 = (dot(vec3(cbLight._m0[_1715 + 3u].xyz), vec3(_501, _502, _503)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _3927 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2033 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _1844 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1799;
        _1846 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1801;
        _1848 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1803;
    }
    uint _1851 = _1715 + 8u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1715].w)) * _504) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1715].x + _581;
    float _1867 = cbLight._m0[_1715].y + _582;
    float _1868 = cbLight._m0[_1715].z + _583;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_1715].xyz));
    float _3943 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1880 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1881 = dot(vec3(_501, _502, _503), vec3(_1873, _1874, _1875));
    float _3965 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1873, _1874, _1875));
    float _3976 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1865 * _1865;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1901 = exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0);
    float _1902 = 0.959999978542327880859375 - _650;
    float _1904 = 0.959999978542327880859375 - _651;
    float _1905 = 0.959999978542327880859375 - _652;
    float _1912 = 1.0 - _1865;
    float _1923 = (0.5 / (((_1880 * ((_1879 * _1912) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1912) + _1865) * _1879))) * _1879;
    float _3987 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    uint _1936 = _1715 + 9u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _504) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1752].x + _581;
    float _1950 = cbLight._m0[_1752].y + _582;
    float _1951 = cbLight._m0[_1752].z + _583;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_1752].xyz));
    float _3998 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1963 = dot(vec3(_501, _502, _503), vec3(_1956, _1957, _1958));
    float _4009 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1956, _1957, _1958));
    float _4020 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1948 * _1948;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
    float _1989 = 1.0 - _1948;
    float _1999 = (0.5 / (((_1880 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1989) + _1948) * _1962))) * _1962;
    float _4031 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    float _2011 = (((((_1982 * _1902) + _653) * cbLight._m0[_1936].x) * _2001) * _1738) + (((((_1901 * _1902) + _653) * cbLight._m0[_1851].x) * _1925) * _1748);
    float _2012 = (((((_1982 * _1904) + _655) * cbLight._m0[_1936].y) * _2001) * _1738) + (((((_1901 * _1904) + _655) * cbLight._m0[_1851].y) * _1925) * _1748);
    float _2013 = (((((_1982 * _1905) + _656) * cbLight._m0[_1936].z) * _2001) * _1738) + (((((_1901 * _1905) + _656) * cbLight._m0[_1851].z) * _1925) * _1748);
    float _2075;
    float _2077;
    float _2079;
    if (_1788)
    {
        _2075 = _2011;
        _2077 = _2012;
        _2079 = _2013;
    }
    else
    {
        uint _2081 = _1715 + 2u;
        uint _2085 = _1715 + 10u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _504) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _581;
        float _2102 = cbLight._m0[_2081].y + _582;
        float _2103 = cbLight._m0[_2081].z + _583;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2081].xyz));
        float _4042 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2115 = dot(vec3(_501, _502, _503), vec3(_2108, _2109, _2110));
        float _4053 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4064 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
        float _2141 = 1.0 - _2100;
        float _2151 = (0.5 / (((_1880 * ((_2114 * _2141) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _2141) + _2100) * _2114))) * _2114;
        float _4075 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2154 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _2075 = (((((_2134 * _1902) + _653) * cbLight._m0[_2085].x) * _2153) * _2154) + _2011;
        _2077 = (((((_2134 * _1904) + _655) * cbLight._m0[_2085].y) * _2153) * _2154) + _2012;
        _2079 = (((((_2134 * _1905) + _656) * cbLight._m0[_2085].z) * _2153) * _2154) + _2013;
    }
    float _2189;
    float _2191;
    float _2193;
    if (_1806)
    {
        _2189 = _2075;
        _2191 = _2077;
        _2193 = _2079;
    }
    else
    {
        uint _2200 = _1715 + 3u;
        uint _2204 = _1715 + 11u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _504) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _581;
        float _2221 = cbLight._m0[_2200].y + _582;
        float _2222 = cbLight._m0[_2200].z + _583;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2200].xyz));
        float _4091 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2234 = dot(vec3(_501, _502, _503), vec3(_2227, _2228, _2229));
        float _4102 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4113 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
        float _2260 = 1.0 - _2219;
        float _2270 = (0.5 / (((_1880 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _2260) + _2219) * _2233))) * _2233;
        float _4124 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _2189 = (((((_2253 * _1902) + _653) * cbLight._m0[_2204].x) * _2272) * _2273) + _2075;
        _2191 = (((((_2253 * _1904) + _655) * cbLight._m0[_2204].y) * _2272) * _2273) + _2077;
        _2193 = (((((_2253 * _1905) + _656) * cbLight._m0[_2204].z) * _2272) * _2273) + _2079;
    }
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_1713.y == 0u)
    {
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2348;
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2348;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2348;
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.x;
        uint _2375 = uint((float(_2363.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2364))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2364)));
        float _2385 = (log2(_2351 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2386 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        uint _2389 = uint(isnan(14.0) ? _2386 : (isnan(_2386) ? 14.0 : min(_2386, 14.0)));
        uvec4 _2394 = texelFetch(g_lightClusterGridBuffer, int(((_2389 << 2u) + (_2375 << 6u)) >> 2u));
        uint _2395 = _2394.x;
        uint _2396 = _2363.z;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((((1u << ((_2396 >> 4u) & 15u)) + 4294967295u) & _2395) == 0u) || ((_2396 & 240u) == 0u))
        {
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
        }
        else
        {
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            uint _2645 = 0u;
            uint _2654;
            bool _2655;
            for (;;)
            {
                _2654 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                _2655 = _2654 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2655)
                {
                    frontier_phi_63_pred = _2644;
                    frontier_phi_63_pred_1 = _2643;
                    frontier_phi_63_pred_2 = _2642;
                    frontier_phi_63_pred_3 = _2641;
                    frontier_phi_63_pred_4 = _2640;
                    frontier_phi_63_pred_5 = _2639;
                }
                else
                {
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    uint _2769;
                    _2763 = _2639;
                    _2764 = _2640;
                    _2765 = _2641;
                    _2766 = _2642;
                    _2767 = _2643;
                    _2768 = _2644;
                    _2769 = _2654;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    for (;;)
                    {
                        uint _2773 = uint(findLSB(_2769)) + (_2645 << 5u);
                        uint _2770 = (_2769 + 4294967295u) & _2769;
                        uint _2775 = _2773 * 48u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2775)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 3u)).x));
                        uint _2795 = (_2773 * 48u) + 4u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 3u)).x));
                        uint _2814 = (_2773 * 48u) + 8u;
                        vec3 _2825 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x));
                        float _2829 = _2789.x - _2349;
                        float _2830 = _2789.y - _2350;
                        float _2831 = _2789.z - _2351;
                        float _2832 = dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831));
                        float _2835 = inversesqrt(_2832);
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2839 = dot(vec3(_609, _612, _615), vec3(_2836, _2837, _2838));
                        float _2844 = 1.0 - (_2832 * _2789.w);
                        float _4150 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2845 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2846 = sqrt(_2832) * _2808.w;
                        float _2849 = 1.39999997615814208984375 / (_2846 + 1.39999997615814208984375);
                        float _2850 = _2849 * _2849;
                        float _2853 = ((1.0 - _2850) * _2839) + _2850;
                        float _2856 = _2846 * _2846;
                        float _2860 = ((isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))) * _2845) / ((_2856 * 0.699999988079071044921875) + 1.0);
                        float _2864 = (-0.0) - _2349;
                        float _2865 = (-0.0) - _2350;
                        float _2866 = (-0.0) - _2351;
                        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2881 = exp2(log2(1.0 / ((_2856 * 3.5) + 5.0)) * 0.25);
                        float _2882 = 1.0 - _684;
                        float _2889 = sqrt(1.0 - ((1.0 - (_2882 * _2882)) * (1.0 - (_2881 * _2881))));
                        float _2890 = _2889 * _2889;
                        float _2891 = _2890 * _2890;
                        float _2892 = _2871 + _2836;
                        float _2893 = _2872 + _2837;
                        float _2894 = _2873 + _2838;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2902 = dot(vec3(_609, _612, _615), vec3(_2871, _2872, _2873));
                        float _4166 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2906 = dot(vec3(_609, _612, _615), vec3(_2898 * _2892, _2898 * _2893, _2898 * _2894));
                        float _4177 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2913 = ((_2909 * _2909) * (_2891 + (-1.0))) + 1.0;
                        float _2914 = _2849 * _2890;
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2839) + _2915;
                        float _4188 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2920 = 1.0 - _2890;
                        float _2930 = (0.5 / (((_2919 * ((_2905 * _2920) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2919 * _2920) + _2890) * _2905))) * _2919;
                        float _4199 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2941 = (((_2891 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_2913 * _2913) * ((_2856 * 2.1991131305694580078125) + 3.141590118408203125))) * _2845;
                        _2698 = (_2860 * _2808.x) + _2766;
                        _2699 = (_2860 * _2808.y) + _2767;
                        _2700 = (_2860 * _2808.z) + _2768;
                        _2695 = (_2941 * _2825.x) + _2763;
                        _2696 = (_2941 * _2825.y) + _2764;
                        _2697 = (_2941 * _2825.z) + _2765;
                        if (_2770 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2698;
                            _2767 = _2699;
                            _2768 = _2700;
                            _2769 = _2770;
                        }
                    }
                    frontier_phi_63_pred = _2700;
                    frontier_phi_63_pred_1 = _2699;
                    frontier_phi_63_pred_2 = _2698;
                    frontier_phi_63_pred_3 = _2697;
                    frontier_phi_63_pred_4 = _2696;
                    frontier_phi_63_pred_5 = _2695;
                }
                _2506 = frontier_phi_63_pred;
                _2504 = frontier_phi_63_pred_1;
                _2502 = frontier_phi_63_pred_2;
                _2500 = frontier_phi_63_pred_3;
                _2498 = frontier_phi_63_pred_4;
                _2496 = frontier_phi_63_pred_5;
                uint _2646 = _2645 + 1u;
                if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2639 = _2496;
                    _2640 = _2498;
                    _2641 = _2500;
                    _2642 = _2502;
                    _2643 = _2504;
                    _2644 = _2506;
                    _2645 = _2646;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
        }
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.z;
        uint _2512 = (_2510 >> 8u) & 15u;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((4294967295u << _2512) & _2395) == 0u)
        {
            _2607 = _2495;
            _2609 = _2497;
            _2611 = _2499;
            _2613 = _2501;
            _2615 = _2503;
            _2617 = _2505;
        }
        else
        {
            float _2632 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
            float _2633 = _2632 * _2349;
            float _2634 = _2632 * _2350;
            float _2635 = _2632 * _2351;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2512 < ((_2510 >> 12u) & 15u))
            {
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2746 = _2495;
                float _2747 = _2497;
                float _2748 = _2499;
                float _2749 = _2501;
                float _2750 = _2503;
                float _2751 = _2505;
                uint _2752 = _2512;
                uint _2761;
                bool _2762;
                for (;;)
                {
                    _2761 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                    _2762 = _2761 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2762)
                    {
                        frontier_phi_69_pred = _2751;
                        frontier_phi_69_pred_1 = _2750;
                        frontier_phi_69_pred_2 = _2749;
                        frontier_phi_69_pred_3 = _2748;
                        frontier_phi_69_pred_4 = _2747;
                        frontier_phi_69_pred_5 = _2746;
                    }
                    else
                    {
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _2959 = _2746;
                        float _2960 = _2747;
                        float _2961 = _2748;
                        float _2962 = _2749;
                        float _2963 = _2750;
                        float _2964 = _2751;
                        uint _2965 = _2761;
                        uint _2966;
                        vec4 _2991;
                        float _2992;
                        vec4 _3007;
                        vec3 _3019;
                        vec4 _3035;
                        vec4 _3051;
                        float _3098;
                        bool _3099;
                        for (;;)
                        {
                            uint _2976 = ((_2752 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2965));
                            _2966 = (_2965 + 4294967295u) & _2965;
                            uint _2978 = _2976 * 40u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _2992 = _2991.w;
                            uint _2994 = (_2976 * 40u) + 4u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2976 * 40u) + 8u;
                            _3019 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x));
                            uint _3022 = (_2976 * 40u) + 16u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3038 = (_2976 * 40u) + 20u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3054 = (_2976 * 40u) + 24u;
                            vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3073 = (_2976 * 40u) + 28u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3098 = fma(_2351, _3086.z, fma(_2350, _3086.y, _3086.x * _2349)) + _3086.w;
                            _3099 = !((fma(_2351, _3067.z, fma(_2350, _3067.y, _3067.x * _2349)) + _3067.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3099)
                            {
                                float _3126 = _2991.x - _2349;
                                float _3127 = _2991.y - _2350;
                                float _3128 = _2991.z - _2351;
                                float _3129 = dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128));
                                float _3132 = inversesqrt(_3129);
                                float _3133 = _3132 * _3126;
                                float _3134 = _3132 * _3127;
                                float _3135 = _3132 * _3128;
                                float _3139 = 1.0 - (_3129 / (_2992 * _2992));
                                float _4210 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3144 = sqrt(_3129) * _3007.w;
                                float _3146 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                                float _3147 = _3146 * _3146;
                                float _3150 = ((1.0 - _3147) * dot(vec3(_3133, _3134, _3135), vec3(_609, _612, _615))) + _3147;
                                float _3153 = _3144 * _3144;
                                float _3157 = (fma(_2351, _3035.z, fma(_2350, _3035.y, _3035.x * _2349)) + _3035.w) / _3098;
                                float _3158 = (fma(_2351, _3051.z, fma(_2350, _3051.y, _3051.x * _2349)) + _3051.w) / _3098;
                                float _3162 = 1.0 - dot(vec2(_3157, _3158), vec2(_3157, _3158));
                                float _4226 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3164 = _3163 * (((isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))) * _3140) / ((_3153 * 0.699999988079071044921875) + 1.0));
                                float _3176 = exp2(log2(1.0 / ((_3153 * 3.5) + 5.0)) * 0.25);
                                float _3177 = 1.0 - _684;
                                float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                                float _3185 = _3184 * _3184;
                                float _3186 = _3185 * _3185;
                                float _3187 = _3133 - _2633;
                                float _3188 = _3134 - _2634;
                                float _3189 = _3135 - _2635;
                                float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                                float _3197 = dot(vec3(_609, _612, _615), vec3((-0.0) - _2633, (-0.0) - _2634, (-0.0) - _2635));
                                float _4237 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3200 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3201 = dot(vec3(_609, _612, _615), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                                float _4248 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3204 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                                float _3209 = _3146 * _3185;
                                float _3210 = _3209 * _3209;
                                float _3216 = ((1.0 - _3210) * dot(vec3(_609, _612, _615), vec3(_3133, _3134, _3135))) + _3210;
                                float _4259 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3218 = 1.0 - _3185;
                                float _3228 = (0.5 / (((_3217 * ((_3200 * _3218) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3217 * _3218) + _3185) * _3200))) * _3217;
                                float _4270 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3238 = (_3163 * _3140) * (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_3208 * _3208) * ((_3153 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3164 * _3007.z;
                                frontier_phi_75_pred_1 = _3164 * _3007.y;
                                frontier_phi_75_pred_2 = _3164 * _3007.x;
                                frontier_phi_75_pred_3 = _3238 * _3019.z;
                                frontier_phi_75_pred_4 = _3238 * _3019.y;
                                frontier_phi_75_pred_5 = _3238 * _3019.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3247 = frontier_phi_75_pred;
                            _3246 = frontier_phi_75_pred_1;
                            _3245 = frontier_phi_75_pred_2;
                            _3244 = frontier_phi_75_pred_3;
                            _3243 = frontier_phi_75_pred_4;
                            _3242 = frontier_phi_75_pred_5;
                            _2949 = _3245 + _2962;
                            _2950 = _3246 + _2963;
                            _2951 = _3247 + _2964;
                            _2946 = _3242 + _2959;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            if (_2966 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2966;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2951;
                        frontier_phi_69_pred_1 = _2950;
                        frontier_phi_69_pred_2 = _2949;
                        frontier_phi_69_pred_3 = _2948;
                        frontier_phi_69_pred_4 = _2947;
                        frontier_phi_69_pred_5 = _2946;
                    }
                    _2618 = frontier_phi_69_pred;
                    _2616 = frontier_phi_69_pred_1;
                    _2614 = frontier_phi_69_pred_2;
                    _2612 = frontier_phi_69_pred_3;
                    _2610 = frontier_phi_69_pred_4;
                    _2608 = frontier_phi_69_pred_5;
                    uint _2753 = _2752 + 1u;
                    if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2746 = _2608;
                        _2747 = _2610;
                        _2748 = _2612;
                        _2749 = _2614;
                        _2750 = _2616;
                        _2751 = _2618;
                        _2752 = _2753;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2618;
                frontier_phi_57_58_ladder_1 = _2616;
                frontier_phi_57_58_ladder_2 = _2614;
                frontier_phi_57_58_ladder_3 = _2612;
                frontier_phi_57_58_ladder_4 = _2610;
                frontier_phi_57_58_ladder_5 = _2608;
            }
            else
            {
                frontier_phi_57_58_ladder = _2505;
                frontier_phi_57_58_ladder_1 = _2503;
                frontier_phi_57_58_ladder_2 = _2501;
                frontier_phi_57_58_ladder_3 = _2499;
                frontier_phi_57_58_ladder_4 = _2497;
                frontier_phi_57_58_ladder_5 = _2495;
            }
            _2607 = frontier_phi_57_58_ladder_5;
            _2609 = frontier_phi_57_58_ladder_4;
            _2611 = frontier_phi_57_58_ladder_3;
            _2613 = frontier_phi_57_58_ladder_2;
            _2615 = frontier_phi_57_58_ladder_1;
            _2617 = frontier_phi_57_58_ladder;
        }
        float _2622 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2407 = (_2622 * _2613) + _1844;
        _2409 = (_2622 * _2615) + _1846;
        _2411 = (_2622 * _2617) + _1848;
        _2413 = ((_2607 * _653) * _2622) + _2189;
        _2415 = ((_2609 * _655) * _2622) + _2191;
        _2417 = ((_2611 * _656) * _2622) + _2193;
    }
    else
    {
        _2407 = _1844;
        _2409 = _1846;
        _2411 = _1848;
        _2413 = _2189;
        _2415 = _2191;
        _2417 = _2193;
    }
    float _4286 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4297 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4308 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    uint _2437 = _628 + 6u;
    float _2445 = _589 / cbSceneParam._m0[86u].x;
    float _2446 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2460 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2462 = _2460.x;
    float _2463 = _2460.y;
    float _2464 = _2460.z;
    float _2465 = _2460.w;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2520 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2521 = _2520 / _524;
        float _2532 = _2521 * _574;
        float _2533 = _575 * _2521;
        float _2534 = (-0.0) - _2533;
        float _2535 = _2521 * _576;
        float _2537 = (cbSceneParam._m0[77u].w * _2534) / _2520;
        float _2538 = _2537 + cbSceneParam._m0[79u].w;
        float _2539 = cbSceneParam._m0[79u].w - _2533;
        float _2545 = sqrt(((_2532 * _2532) + (_2533 * _2533)) + (_2535 * _2535));
        float _2548 = (1.0 - (cbSceneParam._m0[77u].w / _2520)) * _2545;
        float _2553 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2555 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2708;
        if (abs((_2534 - _2537) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2708 = ((((_2538 > 0.0) ? exp2(_2553 * _2538) : (2.0 - exp2(_2555 * _2538))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2548;
        }
        else
        {
            float _2668 = 1.0 / cbSceneParam._m0[80u].x;
            float _2669 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : max(_2538, _2539));
            float _2670 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : min(_2538, _2539));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            float _2680 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : min(_2670, 0.0));
            _2708 = ((abs(_2545 / _2534) * cbSceneParam._m0[80u].y) * ((((_2679 - _2680) * 2.0) - ((exp2(_2553 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)))) - exp2(_2553 * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0))))) * _2668)) - ((exp2(_2555 * _2679) - exp2(_2555 * _2680)) * _2668))) + (_2548 * cbSceneParam._m0[80u].z);
        }
        vec4 _2710 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, 1.0), 0.0);
        float _2719 = exp2((_2708 * (-1.44269502162933349609375)) * (1.0 - _2710.w));
        float _2720 = log2(_2719);
        float _2736 = log2(_2465);
        _2557 = (exp2(_2736 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2720 * cbSceneParam._m0[78u].x)) * _2710.x) / cbSceneParam._m0[78u].x)) + _2462;
        _2559 = (exp2(_2736 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2720 * cbSceneParam._m0[78u].y)) * _2710.y) / cbSceneParam._m0[78u].y)) + _2463;
        _2561 = (exp2(_2736 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2720 * cbSceneParam._m0[78u].z)) * _2710.z) / cbSceneParam._m0[78u].z)) + _2464;
        _2563 = _2719 * _2465;
    }
    else
    {
        _2557 = _2462;
        _2559 = _2463;
        _2561 = _2464;
        _2563 = _2465;
    }
    float _2575 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2576 = _2575 == 3.0;
    float _2577 = log2(_2563);
    float _2584 = exp2(_2577 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2407 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _668))) + ((_2413 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1478)) * cbPerFrame._m0[3u].x));
    float _2585 = exp2(_2577 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2409 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _668))) + ((_2415 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1478)) * cbPerFrame._m0[3u].x));
    float _2586 = exp2(_2577 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2411 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _668))) + ((_2417 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1478)) * cbPerFrame._m0[3u].x));
    float _2595 = (_2575 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2595 * (_2576 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2557)));
    SV_Target.y = _2595 * (_2576 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2559)));
    SV_Target.z = _2595 * (_2576 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2561)));
    SV_Target.w = cbInstanceData._m0[_2437].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2437].w;
}


