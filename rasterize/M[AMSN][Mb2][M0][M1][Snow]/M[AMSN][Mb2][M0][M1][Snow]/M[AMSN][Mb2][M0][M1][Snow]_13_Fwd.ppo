#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _844;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _226 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _231 = _226.z;
    float _235 = (_226.x * 2.0) + (-1.0);
    float _237 = (_226.y * 2.0) + (-1.0);
    float _238 = dot(vec2(_235, _237), vec2(_235, _237));
    float _3181 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _244 = sqrt(1.0 - (isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))));
    vec4 _262 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _262.x * cbMtdParam._m0[9u].x;
    float _268 = _262.y * cbMtdParam._m0[9u].y;
    float _269 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _284 = _282.x;
    float _287 = fma(_244, _210, fma(_237, _202 * TANGENT.x, (_188 * _180) * _235));
    float _290 = fma(_244, _211, fma(_237, _202 * TANGENT.y, (_188 * _181) * _235));
    float _293 = fma(_244, _212, fma(_237, _202 * TANGENT.z, (_188 * _182) * _235));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _3192 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _301 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
    float _3203 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3214 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3225 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3236 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _305 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _410 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _413 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _416 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = (_429 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3247 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _3258 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
    float _3269 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _443 = 1.0 - _305;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _305;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _305;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _469 = _466.x * TEXCOORD_9.w;
    float _470 = dot(vec3(_298, _299, _300), vec3(_381, _382, _383));
    float _473 = _470 * 2.0;
    float _477 = (_473 * _298) - _381;
    float _478 = (_473 * _299) - _382;
    float _479 = (_473 * _300) - _383;
    float _483 = abs(dot(vec3(_381, _382, _383), vec3(_298, _299, _300)));
    float _3280 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = sqrt(_301);
    float _498 = exp2((_485 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_485 * 3.0));
    float _504 = (1.0 - _498) * ((_485 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _505 = _498 * _485;
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _572 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _576 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _601 = _533 + _298;
        float _602 = _537 + _299;
        float _603 = _541 + _300;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_298, _299, _300), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3306 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3317 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3328 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_298, _299, _300), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3361 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_298, _299, _300), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3394 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _888 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _892 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _915 = _533 + _298;
        float _916 = _537 + _299;
        float _917 = _541 + _300;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_298, _299, _300), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3457 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_298, _299, _300), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3490 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_298, _299, _300), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3523 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _844;
        _1154 = _844;
        _1155 = _844;
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _477 * 0.5;
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1237 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_843, _847, _850, _853));
        float _1241 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_845, _848, _851, _854));
        float _1245 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_846, _849, _852, _855));
        float _1252 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1266 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1279 = (_1275 * cbModelParam._m0[1u].x) + (_1264 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1290 = isnan(_1289) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1289 : min(cbModelParam._m0[25u].z, _1289));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1339 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1343 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1347 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1350 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1353 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1356 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1384;
        if (_1350 > 0.0)
        {
            _1384 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1384 = frontier_phi_16_14_ladder;
        }
        float _1592;
        if (_1353 > 0.0)
        {
            _1592 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1592 = frontier_phi_25_21_ladder;
        }
        float _1846;
        if (_1356 > 0.0)
        {
            _1846 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1846 = frontier_phi_37_32_ladder;
        }
        float _1848 = isnan(_1592) ? _1384 : (isnan(_1384) ? _1592 : min(_1384, _1592));
        float _1849 = isnan(_1846) ? _1848 : (isnan(_1848) ? _1846 : min(_1848, _1846));
        float _1853 = (_1849 * _1350) + _1339;
        float _1854 = (_1849 * _1353) + _1343;
        float _1855 = (_1849 * _1356) + _1347;
        float _1856 = _1849 * 9.9999997473787516355514526367188e-05;
        float _1858 = (-1.0) - _1856;
        float _1860 = _1856 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1855 > _1860) || ((_1855 < _1858) || ((_1854 > _1860) || ((_1854 < _1858) || ((_1853 < _1858) || (_1853 > _1860))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1983 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1855, cbModelParam._m0[9u].z, fma(_1854, cbModelParam._m0[9u].y, _1853 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1855, cbModelParam._m0[10u].z, fma(_1854, cbModelParam._m0[10u].y, _1853 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1855, cbModelParam._m0[11u].z, fma(_1854, cbModelParam._m0[11u].y, _1853 * cbModelParam._m0[11u].x))), _1290);
            frontier_phi_15_37_ladder = _1983.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1983.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1983.x * cbModelParam._m0[1u].y;
        }
        _1372 = frontier_phi_15_37_ladder_2;
        _1374 = frontier_phi_15_37_ladder_1;
        _1376 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1290);
        _1372 = _1360.x * cbModelParam._m0[1u].y;
        _1374 = _1360.y * cbModelParam._m0[1u].y;
        _1376 = _1360.z * cbModelParam._m0[1u].y;
    }
    float _1380 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1380 : min(cbModelParam._m0[25u].w, _1380));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1438 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1442 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1446 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1449 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1452 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1455 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1597;
        if (_1449 > 0.0)
        {
            _1597 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1597 = frontier_phi_27_23_ladder;
        }
        float _1873;
        if (_1452 > 0.0)
        {
            _1873 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1873 = frontier_phi_39_34_ladder;
        }
        float _2086;
        if (_1455 > 0.0)
        {
            _2086 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2086 = frontier_phi_48_45_ladder;
        }
        float _2088 = isnan(_1873) ? _1597 : (isnan(_1597) ? _1873 : min(_1597, _1873));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1449) + _1438;
        float _2094 = (_2089 * _1452) + _1442;
        float _2095 = (_2089 * _1455) + _1446;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2096;
        float _2099 = _2096 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2095 > _2099) || ((_2095 < _2097) || ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 < _2097) || (_2093 > _2099))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2095, cbModelParam._m0[17u].z, fma(_2094, cbModelParam._m0[17u].y, _2093 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2095, cbModelParam._m0[18u].z, fma(_2094, cbModelParam._m0[18u].y, _2093 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2095, cbModelParam._m0[19u].z, fma(_2094, cbModelParam._m0[19u].y, _2093 * cbModelParam._m0[19u].x))), _1381);
            frontier_phi_24_48_ladder = _2293.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2293.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2293.x * cbModelParam._m0[1u].z;
        }
        _1474 = frontier_phi_24_48_ladder_2;
        _1476 = frontier_phi_24_48_ladder_1;
        _1478 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1381);
        _1474 = _1458.x * cbModelParam._m0[1u].z;
        _1476 = _1458.y * cbModelParam._m0[1u].z;
        _1478 = _1458.z * cbModelParam._m0[1u].z;
    }
    float _1491 = (((_504 * _454) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1474 - _1372)) + _1372);
    float _1493 = (((_504 * _456) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1495 = (((_504 * _457) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1498 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, _1491 * cbSceneParam._m0[91u].x));
    uvec4 _1514 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1516 = _1514.x * 14u;
    uint _1517 = _1516 + 13u;
    float _1524 = _469 + (-1.0);
    float _1529 = (cbLight._m0[_1517].x * _1524) + 1.0;
    float _1530 = (cbLight._m0[_1517].y * _1524) + 1.0;
    float _1531 = (cbLight._m0[_1517].z * _1524) + 1.0;
    float _1532 = (cbLight._m0[_1517].w * _1524) + 1.0;
    uint _1533 = _1516 + 5u;
    float _1539 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
    uint _1543 = _1516 + 4u;
    float _1550 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1554 = _1516 | 1u;
    float _1565 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_298, _299, _300));
    float _1568 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_298, _299, _300));
    float _3659 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _3670 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1573 = (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.3183098733425140380859375;
    float _1575 = (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.3183098733425140380859375;
    float _1582 = ((cbLight._m0[_1533].x * _1539) * _1575) + ((cbLight._m0[_1543].x * _1550) * _1573);
    float _1583 = ((_1539 * cbLight._m0[_1533].y) * _1575) + ((_1550 * cbLight._m0[_1543].y) * _1573);
    float _1584 = ((_1539 * cbLight._m0[_1533].z) * _1575) + ((_1550 * cbLight._m0[_1543].z) * _1573);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1516 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1582;
        _1604 = _1583;
        _1606 = _1584;
    }
    else
    {
        uint _1610 = _1516 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1516 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3681 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1629 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1582;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1817 = _1516 + 7u;
        float _1833 = (dot(vec3(cbLight._m0[_1516 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3697 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1836 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1647 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1602;
        _1649 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1604;
        _1651 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1606;
    }
    uint _1654 = _1516 + 8u;
    float _1667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1516].w)) * _301) * 0.949999988079071044921875);
    float _1668 = _1667 * _1667;
    float _1669 = cbLight._m0[_1516].x + _381;
    float _1670 = cbLight._m0[_1516].y + _382;
    float _1671 = cbLight._m0[_1516].z + _383;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1676 = _1675 * _1669;
    float _1677 = _1675 * _1670;
    float _1678 = _1675 * _1671;
    float _1679 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1516].xyz));
    float _3713 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _1683 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _1684 = dot(vec3(_298, _299, _300), vec3(_1676, _1677, _1678));
    float _3735 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _1688 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_1676, _1677, _1678));
    float _3746 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1692 = _1668 * _1668;
    float _1696 = ((_1687 * _1687) * (_1692 + (-1.0))) + 1.0;
    float _1704 = exp2(log2(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * 5.0);
    float _1705 = 0.959999978542327880859375 - _451;
    float _1707 = 0.959999978542327880859375 - _452;
    float _1708 = 0.959999978542327880859375 - _453;
    float _1715 = 1.0 - _1668;
    float _1726 = (0.5 / (((_1683 * ((_1682 * _1715) + _1668)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1715) + _1668) * _1682))) * _1682;
    float _3757 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1728 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1692 / ((_1696 * _1696) * 3.141590118408203125));
    uint _1739 = _1516 + 9u;
    float _1750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _301) * 0.949999988079071044921875);
    float _1751 = _1750 * _1750;
    float _1752 = cbLight._m0[_1554].x + _381;
    float _1753 = cbLight._m0[_1554].y + _382;
    float _1754 = cbLight._m0[_1554].z + _383;
    float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
    float _1759 = _1758 * _1752;
    float _1760 = _1758 * _1753;
    float _1761 = _1758 * _1754;
    float _1762 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1554].xyz));
    float _3768 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1766 = dot(vec3(_298, _299, _300), vec3(_1759, _1760, _1761));
    float _3779 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1759, _1760, _1761));
    float _3790 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = _1751 * _1751;
    float _1778 = ((_1769 * _1769) * (_1774 + (-1.0))) + 1.0;
    float _1785 = exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0);
    float _1792 = 1.0 - _1751;
    float _1802 = (0.5 / (((_1683 * ((_1765 * _1792) + _1751)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1792) + _1751) * _1765))) * _1765;
    float _3801 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1804 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1774 / ((_1778 * _1778) * 3.141590118408203125));
    float _1814 = (((((_1785 * _1705) + _454) * cbLight._m0[_1739].x) * _1804) * _1539) + (((((_1704 * _1705) + _454) * cbLight._m0[_1654].x) * _1728) * _1550);
    float _1815 = (((((_1785 * _1707) + _456) * cbLight._m0[_1739].y) * _1804) * _1539) + (((((_1704 * _1707) + _456) * cbLight._m0[_1654].y) * _1728) * _1550);
    float _1816 = (((((_1785 * _1708) + _457) * cbLight._m0[_1739].z) * _1804) * _1539) + (((((_1704 * _1708) + _457) * cbLight._m0[_1654].z) * _1728) * _1550);
    float _1878;
    float _1880;
    float _1882;
    if (_1591)
    {
        _1878 = _1814;
        _1880 = _1815;
        _1882 = _1816;
    }
    else
    {
        uint _1884 = _1516 + 2u;
        uint _1888 = _1516 + 10u;
        float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _301) * 0.949999988079071044921875);
        float _1903 = _1902 * _1902;
        float _1904 = cbLight._m0[_1884].x + _381;
        float _1905 = cbLight._m0[_1884].y + _382;
        float _1906 = cbLight._m0[_1884].z + _383;
        float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
        float _1911 = _1910 * _1904;
        float _1912 = _1910 * _1905;
        float _1913 = _1910 * _1906;
        float _1914 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1884].xyz));
        float _3812 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1917 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1918 = dot(vec3(_298, _299, _300), vec3(_1911, _1912, _1913));
        float _3823 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1922 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_1911, _1912, _1913));
        float _3834 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = _1903 * _1903;
        float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
        float _1937 = exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0);
        float _1944 = 1.0 - _1903;
        float _1954 = (0.5 / (((_1683 * ((_1917 * _1944) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1944) + _1903) * _1917))) * _1917;
        float _3845 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1956 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
        float _1957 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1878 = (((((_1937 * _1705) + _454) * cbLight._m0[_1888].x) * _1956) * _1957) + _1814;
        _1880 = (((((_1937 * _1707) + _456) * cbLight._m0[_1888].y) * _1956) * _1957) + _1815;
        _1882 = (((((_1937 * _1708) + _457) * cbLight._m0[_1888].z) * _1956) * _1957) + _1816;
    }
    float _1992;
    float _1994;
    float _1996;
    if (_1609)
    {
        _1992 = _1878;
        _1994 = _1880;
        _1996 = _1882;
    }
    else
    {
        uint _2003 = _1516 + 3u;
        uint _2007 = _1516 + 11u;
        float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _301) * 0.949999988079071044921875);
        float _2022 = _2021 * _2021;
        float _2023 = cbLight._m0[_2003].x + _381;
        float _2024 = cbLight._m0[_2003].y + _382;
        float _2025 = cbLight._m0[_2003].z + _383;
        float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
        float _2030 = _2029 * _2023;
        float _2031 = _2029 * _2024;
        float _2032 = _2029 * _2025;
        float _2033 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2003].xyz));
        float _3861 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _2037 = dot(vec3(_298, _299, _300), vec3(_2030, _2031, _2032));
        float _3872 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _2041 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2030, _2031, _2032));
        float _3883 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2045 = _2022 * _2022;
        float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
        float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * 5.0);
        float _2063 = 1.0 - _2022;
        float _2073 = (0.5 / (((_1683 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _2063) + _2022) * _2036))) * _2036;
        float _3894 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2075 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
        float _2076 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1992 = (((((_2056 * _1705) + _454) * cbLight._m0[_2007].x) * _2075) * _2076) + _1878;
        _1994 = (((((_2056 * _1707) + _456) * cbLight._m0[_2007].y) * _2075) * _2076) + _1880;
        _1996 = (((((_2056 * _1708) + _457) * cbLight._m0[_2007].z) * _2075) * _2076) + _1882;
    }
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    if (_1514.y == 0u)
    {
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2151;
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2151;
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2151;
        uvec4 _2166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2167 = _2166.x;
        uint _2178 = uint((float(_2166.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2167))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2167)));
        float _2188 = (log2(_2154 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2189 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        uint _2192 = uint(isnan(14.0) ? _2189 : (isnan(_2189) ? 14.0 : min(_2189, 14.0)));
        uvec4 _2197 = texelFetch(g_lightClusterGridBuffer, int(((_2192 << 2u) + (_2178 << 6u)) >> 2u));
        uint _2198 = _2197.x;
        uint _2199 = _2166.z;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        if (((((1u << ((_2199 >> 4u) & 15u)) + 4294967295u) & _2198) == 0u) || ((_2199 & 240u) == 0u))
        {
            _2298 = 0.0;
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
        }
        else
        {
            float _2299;
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            uint _2448 = 0u;
            uint _2457;
            bool _2458;
            for (;;)
            {
                _2457 = texelFetch(g_lightClassification, int((((_2192 << 5u) + (_2178 << 9u)) + (_2448 << 2u)) >> 2u)).x;
                _2458 = _2457 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2458)
                {
                    frontier_phi_63_pred = _2447;
                    frontier_phi_63_pred_1 = _2446;
                    frontier_phi_63_pred_2 = _2445;
                    frontier_phi_63_pred_3 = _2444;
                    frontier_phi_63_pred_4 = _2443;
                    frontier_phi_63_pred_5 = _2442;
                }
                else
                {
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    uint _2572;
                    _2566 = _2442;
                    _2567 = _2443;
                    _2568 = _2444;
                    _2569 = _2445;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2457;
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    for (;;)
                    {
                        uint _2576 = uint(findLSB(_2572)) + (_2448 << 5u);
                        uint _2573 = (_2572 + 4294967295u) & _2572;
                        uint _2578 = _2576 * 48u;
                        vec4 _2592 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 3u)).x));
                        uint _2598 = (_2576 * 48u) + 4u;
                        vec4 _2611 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2617 = (_2576 * 48u) + 8u;
                        vec3 _2628 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x));
                        float _2632 = _2592.x - _2152;
                        float _2633 = _2592.y - _2153;
                        float _2634 = _2592.z - _2154;
                        float _2635 = dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634));
                        float _2638 = inversesqrt(_2635);
                        float _2639 = _2638 * _2632;
                        float _2640 = _2638 * _2633;
                        float _2641 = _2638 * _2634;
                        float _2642 = dot(vec3(_410, _413, _416), vec3(_2639, _2640, _2641));
                        float _2647 = 1.0 - (_2635 * _2592.w);
                        float _3920 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2648 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                        float _2649 = sqrt(_2635) * _2611.w;
                        float _2652 = 1.39999997615814208984375 / (_2649 + 1.39999997615814208984375);
                        float _2653 = _2652 * _2652;
                        float _2656 = ((1.0 - _2653) * _2642) + _2653;
                        float _2659 = _2649 * _2649;
                        float _2663 = ((isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))) * _2648) / ((_2659 * 0.699999988079071044921875) + 1.0);
                        float _2667 = (-0.0) - _2152;
                        float _2668 = (-0.0) - _2153;
                        float _2669 = (-0.0) - _2154;
                        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
                        float _2674 = _2673 * _2667;
                        float _2675 = _2673 * _2668;
                        float _2676 = _2673 * _2669;
                        float _2684 = exp2(log2(1.0 / ((_2659 * 3.5) + 5.0)) * 0.25);
                        float _2685 = 1.0 - _485;
                        float _2692 = sqrt(1.0 - ((1.0 - (_2685 * _2685)) * (1.0 - (_2684 * _2684))));
                        float _2693 = _2692 * _2692;
                        float _2694 = _2693 * _2693;
                        float _2695 = _2674 + _2639;
                        float _2696 = _2675 + _2640;
                        float _2697 = _2676 + _2641;
                        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
                        float _2705 = dot(vec3(_410, _413, _416), vec3(_2674, _2675, _2676));
                        float _3936 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2708 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                        float _2709 = dot(vec3(_410, _413, _416), vec3(_2701 * _2695, _2701 * _2696, _2701 * _2697));
                        float _3947 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                        float _2716 = ((_2712 * _2712) * (_2694 + (-1.0))) + 1.0;
                        float _2717 = _2652 * _2693;
                        float _2718 = _2717 * _2717;
                        float _2721 = ((1.0 - _2718) * _2642) + _2718;
                        float _3958 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2722 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                        float _2723 = 1.0 - _2693;
                        float _2733 = (0.5 / (((_2722 * ((_2708 * _2723) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2723) + _2693) * _2708))) * _2722;
                        float _3969 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2744 = (((_2694 * 3.1415927410125732421875) * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) / ((_2716 * _2716) * ((_2659 * 2.1991131305694580078125) + 3.141590118408203125))) * _2648;
                        _2501 = (_2663 * _2611.x) + _2569;
                        _2502 = (_2663 * _2611.y) + _2570;
                        _2503 = (_2663 * _2611.z) + _2571;
                        _2498 = (_2744 * _2628.x) + _2566;
                        _2499 = (_2744 * _2628.y) + _2567;
                        _2500 = (_2744 * _2628.z) + _2568;
                        if (_2573 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2566 = _2498;
                            _2567 = _2499;
                            _2568 = _2500;
                            _2569 = _2501;
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2573;
                        }
                    }
                    frontier_phi_63_pred = _2503;
                    frontier_phi_63_pred_1 = _2502;
                    frontier_phi_63_pred_2 = _2501;
                    frontier_phi_63_pred_3 = _2500;
                    frontier_phi_63_pred_4 = _2499;
                    frontier_phi_63_pred_5 = _2498;
                }
                _2309 = frontier_phi_63_pred;
                _2307 = frontier_phi_63_pred_1;
                _2305 = frontier_phi_63_pred_2;
                _2303 = frontier_phi_63_pred_3;
                _2301 = frontier_phi_63_pred_4;
                _2299 = frontier_phi_63_pred_5;
                uint _2449 = _2448 + 1u;
                if (_2449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2442 = _2299;
                    _2443 = _2301;
                    _2444 = _2303;
                    _2445 = _2305;
                    _2446 = _2307;
                    _2447 = _2309;
                    _2448 = _2449;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2298 = _2299;
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
        }
        uvec4 _2312 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2313 = _2312.z;
        uint _2315 = (_2313 >> 8u) & 15u;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        if (((4294967295u << _2315) & _2198) == 0u)
        {
            _2410 = _2298;
            _2412 = _2300;
            _2414 = _2302;
            _2416 = _2304;
            _2418 = _2306;
            _2420 = _2308;
        }
        else
        {
            float _2435 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
            float _2436 = _2435 * _2152;
            float _2437 = _2435 * _2153;
            float _2438 = _2435 * _2154;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2315 < ((_2313 >> 12u) & 15u))
            {
                float _2411;
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2549 = _2298;
                float _2550 = _2300;
                float _2551 = _2302;
                float _2552 = _2304;
                float _2553 = _2306;
                float _2554 = _2308;
                uint _2555 = _2315;
                uint _2564;
                bool _2565;
                for (;;)
                {
                    _2564 = texelFetch(g_lightClassification, int((((_2192 << 5u) + (_2178 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                    _2565 = _2564 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2565)
                    {
                        frontier_phi_69_pred = _2554;
                        frontier_phi_69_pred_1 = _2553;
                        frontier_phi_69_pred_2 = _2552;
                        frontier_phi_69_pred_3 = _2551;
                        frontier_phi_69_pred_4 = _2550;
                        frontier_phi_69_pred_5 = _2549;
                    }
                    else
                    {
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2754;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _2762 = _2549;
                        float _2763 = _2550;
                        float _2764 = _2551;
                        float _2765 = _2552;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        uint _2768 = _2564;
                        uint _2769;
                        vec4 _2794;
                        float _2795;
                        vec4 _2810;
                        vec3 _2822;
                        vec4 _2838;
                        vec4 _2854;
                        float _2901;
                        bool _2902;
                        for (;;)
                        {
                            uint _2779 = ((_2555 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2768));
                            _2769 = (_2768 + 4294967295u) & _2768;
                            uint _2781 = _2779 * 40u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            _2795 = _2794.w;
                            uint _2797 = (_2779 * 40u) + 4u;
                            _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            uint _2812 = (_2779 * 40u) + 8u;
                            _2822 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x));
                            uint _2825 = (_2779 * 40u) + 16u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            uint _2841 = (_2779 * 40u) + 20u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2857 = (_2779 * 40u) + 24u;
                            vec4 _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2876 = (_2779 * 40u) + 28u;
                            vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            _2901 = fma(_2154, _2889.z, fma(_2153, _2889.y, _2889.x * _2152)) + _2889.w;
                            _2902 = !((fma(_2154, _2870.z, fma(_2153, _2870.y, _2870.x * _2152)) + _2870.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2902)
                            {
                                float _2929 = _2794.x - _2152;
                                float _2930 = _2794.y - _2153;
                                float _2931 = _2794.z - _2154;
                                float _2932 = dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931));
                                float _2935 = inversesqrt(_2932);
                                float _2936 = _2935 * _2929;
                                float _2937 = _2935 * _2930;
                                float _2938 = _2935 * _2931;
                                float _2942 = 1.0 - (_2932 / (_2795 * _2795));
                                float _3980 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                                float _2943 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                                float _2947 = sqrt(_2932) * _2810.w;
                                float _2949 = 1.39999997615814208984375 / (_2947 + 1.39999997615814208984375);
                                float _2950 = _2949 * _2949;
                                float _2953 = ((1.0 - _2950) * dot(vec3(_2936, _2937, _2938), vec3(_410, _413, _416))) + _2950;
                                float _2956 = _2947 * _2947;
                                float _2960 = (fma(_2154, _2838.z, fma(_2153, _2838.y, _2838.x * _2152)) + _2838.w) / _2901;
                                float _2961 = (fma(_2154, _2854.z, fma(_2153, _2854.y, _2854.x * _2152)) + _2854.w) / _2901;
                                float _2965 = 1.0 - dot(vec2(_2960, _2961), vec2(_2960, _2961));
                                float _3996 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2966 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                                float _2967 = _2966 * (((isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))) * _2943) / ((_2956 * 0.699999988079071044921875) + 1.0));
                                float _2979 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                                float _2980 = 1.0 - _485;
                                float _2987 = sqrt(1.0 - ((1.0 - (_2980 * _2980)) * (1.0 - (_2979 * _2979))));
                                float _2988 = _2987 * _2987;
                                float _2989 = _2988 * _2988;
                                float _2990 = _2936 - _2436;
                                float _2991 = _2937 - _2437;
                                float _2992 = _2938 - _2438;
                                float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                                float _3000 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2436, (-0.0) - _2437, (-0.0) - _2438));
                                float _4007 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3003 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                                float _3004 = dot(vec3(_410, _413, _416), vec3(_2996 * _2990, _2996 * _2991, _2996 * _2992));
                                float _4018 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3007 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                                float _3011 = ((_3007 * _3007) * (_2989 + (-1.0))) + 1.0;
                                float _3012 = _2949 * _2988;
                                float _3013 = _3012 * _3012;
                                float _3019 = ((1.0 - _3013) * dot(vec3(_410, _413, _416), vec3(_2936, _2937, _2938))) + _3013;
                                float _4029 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3020 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                                float _3021 = 1.0 - _2988;
                                float _3031 = (0.5 / (((_3020 * ((_3003 * _3021) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_3020 * _3021) + _2988) * _3003))) * _3020;
                                float _4040 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3041 = (_2966 * _2943) * (((_2989 * 3.1415927410125732421875) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) / ((_3011 * _3011) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2967 * _2810.z;
                                frontier_phi_75_pred_1 = _2967 * _2810.y;
                                frontier_phi_75_pred_2 = _2967 * _2810.x;
                                frontier_phi_75_pred_3 = _3041 * _2822.z;
                                frontier_phi_75_pred_4 = _3041 * _2822.y;
                                frontier_phi_75_pred_5 = _3041 * _2822.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3050 = frontier_phi_75_pred;
                            _3049 = frontier_phi_75_pred_1;
                            _3048 = frontier_phi_75_pred_2;
                            _3047 = frontier_phi_75_pred_3;
                            _3046 = frontier_phi_75_pred_4;
                            _3045 = frontier_phi_75_pred_5;
                            _2752 = _3048 + _2765;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2749 = _3045 + _2762;
                            _2750 = _3046 + _2763;
                            _2751 = _3047 + _2764;
                            if (_2769 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2769;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2754;
                        frontier_phi_69_pred_1 = _2753;
                        frontier_phi_69_pred_2 = _2752;
                        frontier_phi_69_pred_3 = _2751;
                        frontier_phi_69_pred_4 = _2750;
                        frontier_phi_69_pred_5 = _2749;
                    }
                    _2421 = frontier_phi_69_pred;
                    _2419 = frontier_phi_69_pred_1;
                    _2417 = frontier_phi_69_pred_2;
                    _2415 = frontier_phi_69_pred_3;
                    _2413 = frontier_phi_69_pred_4;
                    _2411 = frontier_phi_69_pred_5;
                    uint _2556 = _2555 + 1u;
                    if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2549 = _2411;
                        _2550 = _2413;
                        _2551 = _2415;
                        _2552 = _2417;
                        _2553 = _2419;
                        _2554 = _2421;
                        _2555 = _2556;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2421;
                frontier_phi_57_58_ladder_1 = _2419;
                frontier_phi_57_58_ladder_2 = _2417;
                frontier_phi_57_58_ladder_3 = _2415;
                frontier_phi_57_58_ladder_4 = _2413;
                frontier_phi_57_58_ladder_5 = _2411;
            }
            else
            {
                frontier_phi_57_58_ladder = _2308;
                frontier_phi_57_58_ladder_1 = _2306;
                frontier_phi_57_58_ladder_2 = _2304;
                frontier_phi_57_58_ladder_3 = _2302;
                frontier_phi_57_58_ladder_4 = _2300;
                frontier_phi_57_58_ladder_5 = _2298;
            }
            _2410 = frontier_phi_57_58_ladder_5;
            _2412 = frontier_phi_57_58_ladder_4;
            _2414 = frontier_phi_57_58_ladder_3;
            _2416 = frontier_phi_57_58_ladder_2;
            _2418 = frontier_phi_57_58_ladder_1;
            _2420 = frontier_phi_57_58_ladder;
        }
        float _2425 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2210 = (_2425 * _2416) + _1647;
        _2212 = (_2425 * _2418) + _1649;
        _2214 = (_2425 * _2420) + _1651;
        _2216 = ((_2410 * _454) * _2425) + _1992;
        _2218 = ((_2412 * _456) * _2425) + _1994;
        _2220 = ((_2414 * _457) * _2425) + _1996;
    }
    else
    {
        _2210 = _1647;
        _2212 = _1649;
        _2214 = _1651;
        _2216 = _1992;
        _2218 = _1994;
        _2220 = _1996;
    }
    float _4056 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4067 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4078 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    uint _2240 = _429 + 6u;
    float _2248 = _389 / cbSceneParam._m0[86u].x;
    float _2249 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2263 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2248, _2249, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2265 = _2263.x;
    float _2266 = _2263.y;
    float _2267 = _2263.z;
    float _2268 = _2263.w;
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2323 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2324 = _2323 / _321;
        float _2335 = _2324 * _374;
        float _2336 = _375 * _2324;
        float _2337 = (-0.0) - _2336;
        float _2338 = _2324 * _376;
        float _2340 = (cbSceneParam._m0[77u].w * _2337) / _2323;
        float _2341 = _2340 + cbSceneParam._m0[79u].w;
        float _2342 = cbSceneParam._m0[79u].w - _2336;
        float _2348 = sqrt(((_2335 * _2335) + (_2336 * _2336)) + (_2338 * _2338));
        float _2351 = (1.0 - (cbSceneParam._m0[77u].w / _2323)) * _2348;
        float _2356 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2358 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2511;
        if (abs((_2337 - _2340) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2511 = ((((_2341 > 0.0) ? exp2(_2356 * _2341) : (2.0 - exp2(_2358 * _2341))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2351;
        }
        else
        {
            float _2471 = 1.0 / cbSceneParam._m0[80u].x;
            float _2472 = isnan(_2342) ? _2341 : (isnan(_2341) ? _2342 : max(_2341, _2342));
            float _2473 = isnan(_2342) ? _2341 : (isnan(_2341) ? _2342 : min(_2341, _2342));
            float _2482 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : min(_2472, 0.0));
            float _2483 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : min(_2473, 0.0));
            _2511 = ((abs(_2348 / _2337) * cbSceneParam._m0[80u].y) * ((((_2482 - _2483) * 2.0) - ((exp2(_2356 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)))) - exp2(_2356 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0))))) * _2471)) - ((exp2(_2358 * _2482) - exp2(_2358 * _2483)) * _2471))) + (_2351 * cbSceneParam._m0[80u].z);
        }
        vec4 _2513 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2248, _2249, 1.0), 0.0);
        float _2522 = exp2((_2511 * (-1.44269502162933349609375)) * (1.0 - _2513.w));
        float _2523 = log2(_2522);
        float _2539 = log2(_2268);
        _2360 = (exp2(_2539 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].x)) * _2513.x) / cbSceneParam._m0[78u].x)) + _2265;
        _2362 = (exp2(_2539 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].y)) * _2513.y) / cbSceneParam._m0[78u].y)) + _2266;
        _2364 = (exp2(_2539 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].z)) * _2513.z) / cbSceneParam._m0[78u].z)) + _2267;
        _2366 = _2522 * _2268;
    }
    else
    {
        _2360 = _2265;
        _2362 = _2266;
        _2364 = _2267;
        _2366 = _2268;
    }
    float _2378 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2379 = _2378 == 3.0;
    float _2380 = log2(_2366);
    float _2387 = exp2(_2380 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_2210 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _469))) + ((_2216 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2388 = exp2(_2380 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2212 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _469))) + ((_2218 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2389 = exp2(_2380 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2214 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _469))) + ((_2220 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2398 = (_2378 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2398 * (_2379 ? _2387 : (_2387 + (cbSceneParam._m0[72u].w * _2360)));
    SV_Target.y = _2398 * (_2379 ? _2388 : (_2388 + (cbSceneParam._m0[72u].w * _2362)));
    SV_Target.z = _2398 * (_2379 ? _2389 : (_2389 + (cbSceneParam._m0[72u].w * _2364)));
    SV_Target.w = cbInstanceData._m0[_2240].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2240].w;
}


