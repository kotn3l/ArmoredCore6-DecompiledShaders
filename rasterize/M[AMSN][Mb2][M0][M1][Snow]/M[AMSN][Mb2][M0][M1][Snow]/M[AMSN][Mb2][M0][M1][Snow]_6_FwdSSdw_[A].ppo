#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1010;
float _3424;
float _3425;
float _3426;
float _3427;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3436 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3447 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))));
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _343 = _338.x * cbMtdParam._m0[9u].x;
    float _344 = _338.y * cbMtdParam._m0[9u].y;
    float _345 = _338.z * cbMtdParam._m0[9u].z;
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _378 = (((_364.x * cbMtdParam._m0[10u].x) - _343) * _299) + _343;
    float _379 = (((_364.y * cbMtdParam._m0[10u].y) - _344) * _299) + _344;
    float _380 = (((_364.z * cbMtdParam._m0[10u].z) - _345) * _299) + _345;
    vec4 _393 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _395 = _393.x;
    float _413 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _395) * _299) + _395;
    float _416 = fma(_320, _232, fma(_314, _224 * TANGENT.x, (_210 * _202) * _312));
    float _419 = fma(_320, _233, fma(_314, _224 * TANGENT.y, (_210 * _203) * _312));
    float _422 = fma(_320, _234, fma(_314, _224 * TANGENT.z, (_210 * _204) * _312));
    float _426 = inversesqrt(dot(vec3(_416, _419, _422), vec3(_416, _419, _422)));
    float _427 = _426 * _416;
    float _428 = _426 * _419;
    float _429 = _426 * _422;
    float _3458 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _430 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3480 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3491 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3502 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _434 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _450 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _501 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _491);
    float _502 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _491);
    float _503 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _491);
    float _507 = inversesqrt(dot(vec3(_501, _502, _503), vec3(_501, _502, _503)));
    float _508 = _501 * _507;
    float _509 = _502 * _507;
    float _510 = _503 * _507;
    vec4 _515 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _517 = _515.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _690 = sqrt(((_501 * _501) + (_502 * _502)) + (_503 * _503));
        float _696 = (cbMatDynParam._m0[5u].x * _690) + cbMatDynParam._m0[5u].y;
        float _3513 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _701 = (cbMatDynParam._m0[5u].z * _690) + cbMatDynParam._m0[5u].w;
        float _3524 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) - _697)) + _697) < ((_517 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _528 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _529 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _548 = fma(_429, cbSceneParam._m0[5u].z, fma(_428, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _427));
    float _551 = fma(_429, cbSceneParam._m0[6u].z, fma(_428, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _427));
    float _554 = fma(_429, cbSceneParam._m0[7u].z, fma(_428, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _427));
    uint _567 = uint(roundEven(NORMAL.w)) * 13u;
    uint _568 = _567 + 9u;
    uint _569 = _568 + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_569].z;
    float _3535 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _581 = 1.0 - _434;
    float _582 = _578 * _581;
    float _583 = _579 * _581;
    float _584 = _580 * _581;
    float _589 = (_578 + (-0.039999999105930328369140625)) * _434;
    float _590 = (_579 + (-0.039999999105930328369140625)) * _434;
    float _591 = (_580 + (-0.039999999105930328369140625)) * _434;
    float _592 = _589 + 0.039999999105930328369140625;
    float _594 = _590 + 0.039999999105930328369140625;
    float _595 = _591 + 0.039999999105930328369140625;
    vec4 _604 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _528, cbSceneParam._m0[86u].y * _529));
    float _607 = _604.x * TEXCOORD_9.w;
    float _608 = dot(vec3(_427, _428, _429), vec3(_508, _509, _510));
    float _611 = _608 * 2.0;
    float _615 = (_611 * _427) - _508;
    float _616 = (_611 * _428) - _509;
    float _617 = (_611 * _429) - _510;
    float _621 = abs(dot(vec3(_508, _509, _510), vec3(_427, _428, _429)));
    float _3568 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _623 = sqrt(_430);
    float _636 = exp2((_623 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _642 = (1.0 - _636) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _643 = _636 * _623;
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1009;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _734 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _738 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _742 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _767 = _671 + _427;
        float _768 = _675 + _428;
        float _769 = _679 + _429;
        float _779 = fma(_769, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767)) - _734;
        float _780 = fma(_769, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767)) - _738;
        float _781 = fma(_769, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767)) - _742;
        float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
        float _798 = ((_785 * _779) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_734 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_785 * _780) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_738 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_785 * _781) / cbModelParam._m0[34u].z) + ((((((_742 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        float _837 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_803.x + (-0.5));
        float _839 = _837 * (_803.y + (-0.5));
        float _840 = _837 * (_803.z + (-0.5));
        float _847 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_810.x + (-0.5));
        float _849 = _847 * (_810.y + (-0.5));
        float _850 = _847 * (_810.z + (-0.5));
        float _857 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_817.x + (-0.5));
        float _859 = _857 * (_817.y + (-0.5));
        float _860 = _857 * (_817.z + (-0.5));
        float _867 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_824.x + (-0.5));
        float _869 = _867 * (_824.y + (-0.5));
        float _870 = _867 * (_824.z + (-0.5));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = _838 * 0.5;
        float _875 = _848 * 0.5;
        float _876 = _858 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _891 = (dot(vec3(_427, _428, _429), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _901 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3616 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_903 + 1.0))) + _908) * _871;
        float _918 = _839 * 0.5;
        float _919 = _849 * 0.5;
        float _920 = _859 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_427, _428, _429), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3649 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_945 + 1.0))) + _950) * _872;
        float _960 = _840 * 0.5;
        float _961 = _850 * 0.5;
        float _962 = _860 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_427, _428, _429), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3682 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_987 + 1.0))) + _992) * _873;
        _1009 = _840;
        _1011 = _839;
        _1012 = _838;
        _1013 = _850;
        _1014 = _849;
        _1015 = _848;
        _1016 = _860;
        _1017 = _859;
        _1018 = _858;
        _1019 = _873;
        _1020 = _872;
        _1021 = _871;
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
    }
    else
    {
        _1009 = _1010;
        _1011 = _1010;
        _1012 = _1010;
        _1013 = _1010;
        _1014 = _1010;
        _1015 = _1010;
        _1016 = _1010;
        _1017 = _1010;
        _1018 = _1010;
        _1019 = _1010;
        _1020 = _1010;
        _1021 = _1010;
        _1022 = 0.0;
        _1023 = 0.0;
        _1024 = 0.0;
    }
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1053 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1057 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1061 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1084 = _671 + _427;
        float _1085 = _675 + _428;
        float _1086 = _679 + _429;
        float _1096 = fma(_1086, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084)) - _1053;
        float _1097 = fma(_1086, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084)) - _1057;
        float _1098 = fma(_1086, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084)) - _1061;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1053 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1057 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[35u].z) + ((((((_1061 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1152 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1119.x + (-0.5));
        float _1154 = _1152 * (_1119.y + (-0.5));
        float _1155 = _1152 * (_1119.z + (-0.5));
        float _1162 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1126.x + (-0.5));
        float _1164 = _1162 * (_1126.y + (-0.5));
        float _1165 = _1162 * (_1126.z + (-0.5));
        float _1172 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1133.x + (-0.5));
        float _1174 = _1172 * (_1133.y + (-0.5));
        float _1175 = _1172 * (_1133.z + (-0.5));
        float _1182 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1140.x + (-0.5));
        float _1184 = _1182 * (_1140.y + (-0.5));
        float _1185 = _1182 * (_1140.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_427, _428, _429), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3745 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1216 + 1.0))) + _1221) * _1186;
        float _1231 = _1154 * 0.5;
        float _1232 = _1164 * 0.5;
        float _1233 = _1174 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_427, _428, _429), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3778 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1258 + 1.0))) + _1263) * _1187;
        float _1273 = _1155 * 0.5;
        float _1274 = _1165 * 0.5;
        float _1275 = _1175 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_427, _428, _429), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3811 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1300 + 1.0))) + _1305) * _1188;
        _1322 = _1155;
        _1323 = _1154;
        _1324 = _1153;
        _1325 = _1165;
        _1326 = _1164;
        _1327 = _1163;
        _1328 = _1175;
        _1329 = _1174;
        _1330 = _1173;
        _1331 = _1188;
        _1332 = _1187;
        _1333 = _1186;
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1010;
        _1323 = _1010;
        _1324 = _1010;
        _1325 = _1010;
        _1326 = _1010;
        _1327 = _1010;
        _1328 = _1010;
        _1329 = _1010;
        _1330 = _1010;
        _1331 = _1010;
        _1332 = _1010;
        _1333 = _1010;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1022)) + _1022;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1023)) + _1023;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1024)) + _1024;
    float _1369 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1346));
    float _1390 = _615 * 0.5;
    float _1391 = _616 * 0.5;
    float _1392 = _617 * 0.5;
    float _1393 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1396 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1399 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1433;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1406 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1009, _1013, _1016, _1019));
        float _1410 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1414 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1421 = dot(vec4(cbModelParam._m0[39u]), vec4(_1390, _1391, _1392, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1444;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1435 = dot(vec4(cbModelParam._m0[40u]), vec4(_1390, _1391, _1392, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1448 = (_1444 * cbModelParam._m0[1u].x) + (_1433 * (1.0 - cbModelParam._m0[1u].x));
    float _1458 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _430);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1458 : min(cbModelParam._m0[25u].z, _1458));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1522 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1525 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1553;
        if (_1519 > 0.0)
        {
            _1553 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1553 = frontier_phi_19_17_ladder;
        }
        float _1781;
        if (_1522 > 0.0)
        {
            _1781 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1781 = frontier_phi_28_24_ladder;
        }
        float _2038;
        if (_1525 > 0.0)
        {
            _2038 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2038 = frontier_phi_40_35_ladder;
        }
        float _2040 = isnan(_1781) ? _1553 : (isnan(_1553) ? _1781 : min(_1553, _1781));
        float _2041 = isnan(_2038) ? _2040 : (isnan(_2040) ? _2038 : min(_2040, _2038));
        float _2045 = (_2041 * _1519) + _1508;
        float _2046 = (_2041 * _1522) + _1512;
        float _2047 = (_2041 * _1525) + _1516;
        float _2048 = _2041 * 9.9999997473787516355514526367188e-05;
        float _2050 = (-1.0) - _2048;
        float _2052 = _2048 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2047 > _2052) || ((_2047 < _2050) || ((_2046 > _2052) || ((_2046 < _2050) || ((_2045 < _2050) || (_2045 > _2052))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2175 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2047, cbModelParam._m0[9u].z, fma(_2046, cbModelParam._m0[9u].y, _2045 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2047, cbModelParam._m0[10u].z, fma(_2046, cbModelParam._m0[10u].y, _2045 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2047, cbModelParam._m0[11u].z, fma(_2046, cbModelParam._m0[11u].y, _2045 * cbModelParam._m0[11u].x))), _1459);
            frontier_phi_18_40_ladder = _2175.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2175.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2175.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_18_40_ladder_2;
        _1543 = frontier_phi_18_40_ladder_1;
        _1545 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1459);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1549 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _430);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1549 : min(cbModelParam._m0[25u].w, _1549));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1607 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1611 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1615 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1618 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1621 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1624 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1786;
        if (_1618 > 0.0)
        {
            _1786 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1786 = frontier_phi_30_26_ladder;
        }
        float _2065;
        if (_1621 > 0.0)
        {
            _2065 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2065 = frontier_phi_42_37_ladder;
        }
        float _2278;
        if (_1624 > 0.0)
        {
            _2278 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2278 = frontier_phi_51_48_ladder;
        }
        float _2280 = isnan(_2065) ? _1786 : (isnan(_1786) ? _2065 : min(_1786, _2065));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1618) + _1607;
        float _2286 = (_2281 * _1621) + _1611;
        float _2287 = (_2281 * _1624) + _1615;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2288;
        float _2291 = _2288 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2287 > _2291) || ((_2287 < _2289) || ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 < _2289) || (_2285 > _2291))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2287, cbModelParam._m0[17u].z, fma(_2286, cbModelParam._m0[17u].y, _2285 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2287, cbModelParam._m0[18u].z, fma(_2286, cbModelParam._m0[18u].y, _2285 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2287, cbModelParam._m0[19u].z, fma(_2286, cbModelParam._m0[19u].y, _2285 * cbModelParam._m0[19u].x))), _1550);
            frontier_phi_27_51_ladder = _2485.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2485.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2485.x * cbModelParam._m0[1u].z;
        }
        _1643 = frontier_phi_27_51_ladder_2;
        _1645 = frontier_phi_27_51_ladder_1;
        _1647 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1550);
        _1643 = _1627.x * cbModelParam._m0[1u].z;
        _1645 = _1627.y * cbModelParam._m0[1u].z;
        _1647 = _1627.z * cbModelParam._m0[1u].z;
    }
    float _1660 = (((_642 * _592) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1662 = (((_642 * _594) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1645 - _1543)) + _1543);
    float _1664 = (((_642 * _595) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1647 - _1545)) + _1545);
    float _1667 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, _1660 * cbSceneParam._m0[91u].x));
    vec4 _1681 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_528, _529));
    float _1683 = _1681.w;
    float _1695 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1683);
    float _1696 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1683);
    float _1697 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1683);
    uvec4 _1701 = floatBitsToUint(cbInstanceData._m0[_567 + 5u]);
    uint _1703 = _1701.x * 14u;
    uint _1704 = _1703 + 13u;
    float _1711 = _607 + (-1.0);
    float _1716 = (cbLight._m0[_1704].x * _1711) + 1.0;
    float _1717 = (cbLight._m0[_1704].y * _1711) + 1.0;
    float _1718 = (cbLight._m0[_1704].z * _1711) + 1.0;
    float _1719 = (cbLight._m0[_1704].w * _1711) + 1.0;
    uint _1720 = _1703 + 5u;
    float _1726 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1730 = _1703 + 4u;
    float _1739 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1743 = _1703 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_427, _428, _429));
    float _1757 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_427, _428, _429));
    float _3947 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _3958 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1762 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1764 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _1771 = ((cbLight._m0[_1720].x * _1726) * _1764) + (((cbLight._m0[_1730].x * _1695) * _1739) * _1762);
    float _1772 = ((_1726 * cbLight._m0[_1720].y) * _1764) + (((cbLight._m0[_1730].y * _1696) * _1739) * _1762);
    float _1773 = ((_1726 * cbLight._m0[_1720].z) * _1764) + (((cbLight._m0[_1730].z * _1697) * _1739) * _1762);
    uvec4 _1778 = floatBitsToUint(cbLight._m0[_1703 + 12u]);
    bool _1780 = _1778.x == 0u;
    float _1791;
    float _1793;
    float _1795;
    if (_1780)
    {
        _1791 = _1771;
        _1793 = _1772;
        _1795 = _1773;
    }
    else
    {
        uint _1799 = _1703 + 6u;
        float _1815 = (dot(vec3(cbLight._m0[_1703 + 2u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _1816 = _1815 * _1815;
        float _3969 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1818 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1791 = (((cbLight._m0[_1799].x * 0.3183098733425140380859375) * _1817) * _1818) + _1771;
        _1793 = (((cbLight._m0[_1799].y * 0.3183098733425140380859375) * _1817) * _1818) + _1772;
        _1795 = (((cbLight._m0[_1799].z * 0.3183098733425140380859375) * _1817) * _1818) + _1773;
    }
    bool _1798 = _1778.y == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1798)
    {
        _1836 = _1791;
        _1838 = _1793;
        _1840 = _1795;
    }
    else
    {
        uint _2009 = _1703 + 7u;
        float _2025 = (dot(vec3(cbLight._m0[_1703 + 3u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _3985 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2028 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1836 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1791;
        _1838 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1793;
        _1840 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1795;
    }
    uint _1843 = _1703 + 8u;
    float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _430) * 0.949999988079071044921875);
    float _1857 = _1856 * _1856;
    float _1858 = cbLight._m0[_1703].x + _508;
    float _1859 = cbLight._m0[_1703].y + _509;
    float _1860 = cbLight._m0[_1703].z + _510;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1865 = _1864 * _1858;
    float _1866 = _1864 * _1859;
    float _1867 = _1864 * _1860;
    float _1868 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1703].xyz));
    float _4001 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _1872 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1873 = dot(vec3(_427, _428, _429), vec3(_1865, _1866, _1867));
    float _4023 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1877 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1865, _1866, _1867));
    float _4034 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1881 = _1857 * _1857;
    float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
    float _1893 = exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0);
    float _1894 = 0.959999978542327880859375 - _589;
    float _1896 = 0.959999978542327880859375 - _590;
    float _1897 = 0.959999978542327880859375 - _591;
    float _1904 = 1.0 - _1857;
    float _1915 = (0.5 / (((_1872 * ((_1871 * _1904) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _1904) + _1857) * _1871))) * _1871;
    float _4045 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
    uint _1931 = _1703 + 9u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _430) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1743].x + _508;
    float _1945 = cbLight._m0[_1743].y + _509;
    float _1946 = cbLight._m0[_1743].z + _510;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1743].xyz));
    float _4056 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1958 = dot(vec3(_427, _428, _429), vec3(_1951, _1952, _1953));
    float _4067 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _1962 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1951, _1952, _1953));
    float _4078 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1966 = _1943 * _1943;
    float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
    float _1977 = exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0);
    float _1984 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1872 * ((_1957 * _1984) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _1984) + _1943) * _1957))) * _1957;
    float _4089 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
    float _2006 = (((((_1977 * _1894) + _592) * cbLight._m0[_1931].x) * _1996) * _1726) + ((((cbLight._m0[_1843].x * _1695) * ((_1893 * _1894) + _592)) * _1917) * _1739);
    float _2007 = (((((_1977 * _1896) + _594) * cbLight._m0[_1931].y) * _1996) * _1726) + ((((cbLight._m0[_1843].y * _1696) * ((_1893 * _1896) + _594)) * _1917) * _1739);
    float _2008 = (((((_1977 * _1897) + _595) * cbLight._m0[_1931].z) * _1996) * _1726) + ((((cbLight._m0[_1843].z * _1697) * ((_1893 * _1897) + _595)) * _1917) * _1739);
    float _2070;
    float _2072;
    float _2074;
    if (_1780)
    {
        _2070 = _2006;
        _2072 = _2007;
        _2074 = _2008;
    }
    else
    {
        uint _2076 = _1703 + 2u;
        uint _2080 = _1703 + 10u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _430) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _508;
        float _2097 = cbLight._m0[_2076].y + _509;
        float _2098 = cbLight._m0[_2076].z + _510;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2076].xyz));
        float _4100 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2110 = dot(vec3(_427, _428, _429), vec3(_2103, _2104, _2105));
        float _4111 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4122 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
        float _2136 = 1.0 - _2095;
        float _2146 = (0.5 / (((_1872 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _2136) + _2095) * _2109))) * _2109;
        float _4133 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2070 = (((((_2129 * _1894) + _592) * cbLight._m0[_2080].x) * _2148) * _2149) + _2006;
        _2072 = (((((_2129 * _1896) + _594) * cbLight._m0[_2080].y) * _2148) * _2149) + _2007;
        _2074 = (((((_2129 * _1897) + _595) * cbLight._m0[_2080].z) * _2148) * _2149) + _2008;
    }
    float _2184;
    float _2186;
    float _2188;
    if (_1798)
    {
        _2184 = _2070;
        _2186 = _2072;
        _2188 = _2074;
    }
    else
    {
        uint _2195 = _1703 + 3u;
        uint _2199 = _1703 + 11u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _430) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _508;
        float _2216 = cbLight._m0[_2195].y + _509;
        float _2217 = cbLight._m0[_2195].z + _510;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2195].xyz));
        float _4149 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2229 = dot(vec3(_427, _428, _429), vec3(_2222, _2223, _2224));
        float _4160 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4171 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2248 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
        float _2255 = 1.0 - _2214;
        float _2265 = (0.5 / (((_1872 * ((_2228 * _2255) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _2255) + _2214) * _2228))) * _2228;
        float _4182 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2184 = (((((_2248 * _1894) + _592) * cbLight._m0[_2199].x) * _2267) * _2268) + _2070;
        _2186 = (((((_2248 * _1896) + _594) * cbLight._m0[_2199].y) * _2267) * _2268) + _2072;
        _2188 = (((((_2248 * _1897) + _595) * cbLight._m0[_2199].z) * _2267) * _2268) + _2074;
    }
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_1701.y == 0u)
    {
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2343;
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2343;
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2343;
        uvec4 _2358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2359 = _2358.x;
        uint _2370 = uint((float(_2358.y) * floor(float(uint(cbSceneParam._m0[85u].y * _529) / _2359))) + floor(float(uint(cbSceneParam._m0[85u].x * _528) / _2359)));
        float _2380 = (log2(_2346 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2381 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        uint _2384 = uint(isnan(14.0) ? _2381 : (isnan(_2381) ? 14.0 : min(_2381, 14.0)));
        uvec4 _2389 = texelFetch(g_lightClusterGridBuffer, int(((_2384 << 2u) + (_2370 << 6u)) >> 2u));
        uint _2390 = _2389.x;
        uint _2391 = _2358.z;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        if (((((1u << ((_2391 >> 4u) & 15u)) + 4294967295u) & _2390) == 0u) || ((_2391 & 240u) == 0u))
        {
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
        }
        else
        {
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            uint _2648 = 0u;
            uint _2657;
            bool _2658;
            for (;;)
            {
                _2657 = texelFetch(g_lightClassification, int((((_2384 << 5u) + (_2370 << 9u)) + (_2648 << 2u)) >> 2u)).x;
                _2658 = _2657 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2658)
                {
                    frontier_phi_68_pred = _2644;
                    frontier_phi_68_pred_1 = _2647;
                    frontier_phi_68_pred_2 = _2646;
                    frontier_phi_68_pred_3 = _2645;
                    frontier_phi_68_pred_4 = _2643;
                    frontier_phi_68_pred_5 = _2642;
                }
                else
                {
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    uint _2793;
                    _2787 = _2642;
                    _2788 = _2643;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2657;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    for (;;)
                    {
                        uint _2797 = uint(findLSB(_2793)) + (_2648 << 5u);
                        uint _2794 = (_2793 + 4294967295u) & _2793;
                        uint _2799 = _2797 * 48u;
                        vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2819 = (_2797 * 48u) + 4u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2838 = (_2797 * 48u) + 8u;
                        vec3 _2849 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x));
                        float _2853 = _2813.x - _2344;
                        float _2854 = _2813.y - _2345;
                        float _2855 = _2813.z - _2346;
                        float _2856 = dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855));
                        float _2859 = inversesqrt(_2856);
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2863 = dot(vec3(_548, _551, _554), vec3(_2860, _2861, _2862));
                        float _2868 = 1.0 - (_2856 * _2813.w);
                        float _4208 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2869 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2870 = sqrt(_2856) * _2832.w;
                        float _2873 = 1.39999997615814208984375 / (_2870 + 1.39999997615814208984375);
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2863) + _2874;
                        float _2880 = _2870 * _2870;
                        float _2884 = ((isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))) * _2869) / ((_2880 * 0.699999988079071044921875) + 1.0);
                        float _2888 = (-0.0) - _2344;
                        float _2889 = (-0.0) - _2345;
                        float _2890 = (-0.0) - _2346;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2905 = exp2(log2(1.0 / ((_2880 * 3.5) + 5.0)) * 0.25);
                        float _2906 = 1.0 - _623;
                        float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                        float _2914 = _2913 * _2913;
                        float _2915 = _2914 * _2914;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2926 = dot(vec3(_548, _551, _554), vec3(_2895, _2896, _2897));
                        float _4224 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2930 = dot(vec3(_548, _551, _554), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                        float _4235 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                        float _2938 = _2873 * _2914;
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2863) + _2939;
                        float _4246 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2944 = 1.0 - _2914;
                        float _2954 = (0.5 / (((_2943 * ((_2929 * _2944) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2943 * _2944) + _2914) * _2929))) * _2943;
                        float _4257 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2965 = (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_2937 * _2937) * ((_2880 * 2.1991131305694580078125) + 3.141590118408203125))) * _2869;
                        _2717 = (_2884 * _2832.x) + _2790;
                        _2718 = (_2884 * _2832.y) + _2791;
                        _2719 = (_2884 * _2832.z) + _2792;
                        _2714 = (_2965 * _2849.x) + _2787;
                        _2715 = (_2965 * _2849.y) + _2788;
                        _2716 = (_2965 * _2849.z) + _2789;
                        if (_2794 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2787 = _2714;
                            _2788 = _2715;
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2794;
                        }
                    }
                    frontier_phi_68_pred = _2716;
                    frontier_phi_68_pred_1 = _2719;
                    frontier_phi_68_pred_2 = _2718;
                    frontier_phi_68_pred_3 = _2717;
                    frontier_phi_68_pred_4 = _2715;
                    frontier_phi_68_pred_5 = _2714;
                }
                _2495 = frontier_phi_68_pred;
                _2501 = frontier_phi_68_pred_1;
                _2499 = frontier_phi_68_pred_2;
                _2497 = frontier_phi_68_pred_3;
                _2493 = frontier_phi_68_pred_4;
                _2491 = frontier_phi_68_pred_5;
                uint _2649 = _2648 + 1u;
                if (_2649 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2642 = _2491;
                    _2643 = _2493;
                    _2644 = _2495;
                    _2645 = _2497;
                    _2646 = _2499;
                    _2647 = _2501;
                    _2648 = _2649;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
        }
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.z;
        uint _2507 = (_2505 >> 8u) & 15u;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((4294967295u << _2507) & _2390) == 0u)
        {
            _2610 = _2490;
            _2612 = _2492;
            _2614 = _2494;
            _2616 = _2496;
            _2618 = _2498;
            _2620 = _2500;
        }
        else
        {
            float _2635 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
            float _2636 = _2635 * _2344;
            float _2637 = _2635 * _2345;
            float _2638 = _2635 * _2346;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2507 < ((_2505 >> 12u) & 15u))
            {
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2770 = _2490;
                float _2771 = _2492;
                float _2772 = _2494;
                float _2773 = _2496;
                float _2774 = _2498;
                float _2775 = _2500;
                uint _2776 = _2507;
                uint _2785;
                bool _2786;
                for (;;)
                {
                    _2785 = texelFetch(g_lightClassification, int((((_2384 << 5u) + (_2370 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                    _2786 = _2785 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2786)
                    {
                        frontier_phi_79_pred = _2775;
                        frontier_phi_79_pred_1 = _2774;
                        frontier_phi_79_pred_2 = _2773;
                        frontier_phi_79_pred_3 = _2772;
                        frontier_phi_79_pred_4 = _2771;
                        frontier_phi_79_pred_5 = _2770;
                    }
                    else
                    {
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _2992 = _2770;
                        float _2993 = _2771;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        float _2997 = _2775;
                        uint _2998 = _2785;
                        uint _2999;
                        vec4 _3024;
                        float _3025;
                        vec4 _3040;
                        vec3 _3052;
                        vec4 _3068;
                        vec4 _3084;
                        float _3131;
                        bool _3132;
                        for (;;)
                        {
                            uint _3009 = ((_2776 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2998));
                            _2999 = (_2998 + 4294967295u) & _2998;
                            uint _3011 = _3009 * 40u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3025 = _3024.w;
                            uint _3027 = (_3009 * 40u) + 4u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_3009 * 40u) + 8u;
                            _3052 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x));
                            uint _3055 = (_3009 * 40u) + 16u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3071 = (_3009 * 40u) + 20u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3087 = (_3009 * 40u) + 24u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3106 = (_3009 * 40u) + 28u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3131 = fma(_2346, _3119.z, fma(_2345, _3119.y, _3119.x * _2344)) + _3119.w;
                            _3132 = !((fma(_2346, _3100.z, fma(_2345, _3100.y, _3100.x * _2344)) + _3100.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3132)
                            {
                                float _3159 = _3024.x - _2344;
                                float _3160 = _3024.y - _2345;
                                float _3161 = _3024.z - _2346;
                                float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                                float _3165 = inversesqrt(_3162);
                                float _3166 = _3165 * _3159;
                                float _3167 = _3165 * _3160;
                                float _3168 = _3165 * _3161;
                                float _3172 = 1.0 - (_3162 / (_3025 * _3025));
                                float _4268 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3177 = sqrt(_3162) * _3040.w;
                                float _3179 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                                float _3180 = _3179 * _3179;
                                float _3183 = ((1.0 - _3180) * dot(vec3(_3166, _3167, _3168), vec3(_548, _551, _554))) + _3180;
                                float _3186 = _3177 * _3177;
                                float _3190 = (fma(_2346, _3068.z, fma(_2345, _3068.y, _3068.x * _2344)) + _3068.w) / _3131;
                                float _3191 = (fma(_2346, _3084.z, fma(_2345, _3084.y, _3084.x * _2344)) + _3084.w) / _3131;
                                float _3195 = 1.0 - dot(vec2(_3190, _3191), vec2(_3190, _3191));
                                float _4284 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3197 = _3196 * (((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3173) / ((_3186 * 0.699999988079071044921875) + 1.0));
                                float _3209 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                                float _3210 = 1.0 - _623;
                                float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                                float _3218 = _3217 * _3217;
                                float _3219 = _3218 * _3218;
                                float _3220 = _3166 - _2636;
                                float _3221 = _3167 - _2637;
                                float _3222 = _3168 - _2638;
                                float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                                float _3230 = dot(vec3(_548, _551, _554), vec3((-0.0) - _2636, (-0.0) - _2637, (-0.0) - _2638));
                                float _4295 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3234 = dot(vec3(_548, _551, _554), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                                float _4306 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                                float _3242 = _3179 * _3218;
                                float _3243 = _3242 * _3242;
                                float _3249 = ((1.0 - _3243) * dot(vec3(_548, _551, _554), vec3(_3166, _3167, _3168))) + _3243;
                                float _4317 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3251 = 1.0 - _3218;
                                float _3261 = (0.5 / (((_3250 * ((_3233 * _3251) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3218) * _3233))) * _3250;
                                float _4328 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3271 = (_3196 * _3173) * (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3241 * _3241) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3197 * _3040.z;
                                frontier_phi_85_pred_1 = _3197 * _3040.y;
                                frontier_phi_85_pred_2 = _3197 * _3040.x;
                                frontier_phi_85_pred_3 = _3271 * _3052.z;
                                frontier_phi_85_pred_4 = _3271 * _3052.y;
                                frontier_phi_85_pred_5 = _3271 * _3052.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3280 = frontier_phi_85_pred;
                            _3279 = frontier_phi_85_pred_1;
                            _3278 = frontier_phi_85_pred_2;
                            _3277 = frontier_phi_85_pred_3;
                            _3276 = frontier_phi_85_pred_4;
                            _3275 = frontier_phi_85_pred_5;
                            _2982 = _3278 + _2995;
                            _2983 = _3279 + _2996;
                            _2984 = _3280 + _2997;
                            _2979 = _3275 + _2992;
                            _2980 = _3276 + _2993;
                            _2981 = _3277 + _2994;
                            if (_2999 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2999;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2984;
                        frontier_phi_79_pred_1 = _2983;
                        frontier_phi_79_pred_2 = _2982;
                        frontier_phi_79_pred_3 = _2981;
                        frontier_phi_79_pred_4 = _2980;
                        frontier_phi_79_pred_5 = _2979;
                    }
                    _2621 = frontier_phi_79_pred;
                    _2619 = frontier_phi_79_pred_1;
                    _2617 = frontier_phi_79_pred_2;
                    _2615 = frontier_phi_79_pred_3;
                    _2613 = frontier_phi_79_pred_4;
                    _2611 = frontier_phi_79_pred_5;
                    uint _2777 = _2776 + 1u;
                    if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2770 = _2611;
                        _2771 = _2613;
                        _2772 = _2615;
                        _2773 = _2617;
                        _2774 = _2619;
                        _2775 = _2621;
                        _2776 = _2777;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2617;
                frontier_phi_60_61_ladder_1 = _2621;
                frontier_phi_60_61_ladder_2 = _2619;
                frontier_phi_60_61_ladder_3 = _2615;
                frontier_phi_60_61_ladder_4 = _2613;
                frontier_phi_60_61_ladder_5 = _2611;
            }
            else
            {
                frontier_phi_60_61_ladder = _2496;
                frontier_phi_60_61_ladder_1 = _2500;
                frontier_phi_60_61_ladder_2 = _2498;
                frontier_phi_60_61_ladder_3 = _2494;
                frontier_phi_60_61_ladder_4 = _2492;
                frontier_phi_60_61_ladder_5 = _2490;
            }
            _2610 = frontier_phi_60_61_ladder_5;
            _2612 = frontier_phi_60_61_ladder_4;
            _2614 = frontier_phi_60_61_ladder_3;
            _2616 = frontier_phi_60_61_ladder;
            _2618 = frontier_phi_60_61_ladder_2;
            _2620 = frontier_phi_60_61_ladder_1;
        }
        float _2625 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
        _2402 = (_2625 * _2616) + _1836;
        _2404 = (_2625 * _2618) + _1838;
        _2406 = (_2625 * _2620) + _1840;
        _2408 = ((_2610 * _592) * _2625) + _2184;
        _2410 = ((_2612 * _594) * _2625) + _2186;
        _2412 = ((_2614 * _595) * _2625) + _2188;
    }
    else
    {
        _2402 = _1836;
        _2404 = _1838;
        _2406 = _1840;
        _2408 = _2184;
        _2410 = _2186;
        _2412 = _2188;
    }
    float _4344 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4355 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4366 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _2429 = ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2402 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _607))) + ((_2408 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1448)) * cbPerFrame._m0[3u].x);
    float _2430 = ((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2404 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _607))) + ((_2410 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1448)) * cbPerFrame._m0[3u].x);
    float _2431 = ((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2406 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _607))) + ((_2412 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1448)) * cbPerFrame._m0[3u].x);
    uint _2432 = _567 + 6u;
    float _2440 = _528 / cbSceneParam._m0[86u].x;
    float _2441 = _529 / cbSceneParam._m0[86u].y;
    vec4 _2455 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, (log2((isnan(cbSceneParam._m0[77u].w) ? _450 : (isnan(_450) ? cbSceneParam._m0[77u].w : min(_450, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2457 = _2455.x;
    float _2458 = _2455.y;
    float _2459 = _2455.z;
    float _2460 = _2455.w;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_450 > cbSceneParam._m0[78u].w)
    {
        float _2515 = isnan(_450) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _450 : min(cbSceneParam._m0[80u].w, _450));
        float _2516 = _2515 / _450;
        float _2527 = _2516 * _501;
        float _2528 = _502 * _2516;
        float _2529 = (-0.0) - _2528;
        float _2530 = _2516 * _503;
        float _2532 = (cbSceneParam._m0[77u].w * _2529) / _2515;
        float _2533 = _2532 + cbSceneParam._m0[79u].w;
        float _2534 = cbSceneParam._m0[79u].w - _2528;
        float _2540 = sqrt(((_2527 * _2527) + (_2528 * _2528)) + (_2530 * _2530));
        float _2543 = (1.0 - (cbSceneParam._m0[77u].w / _2515)) * _2540;
        float _2548 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2550 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2727;
        if (abs((_2529 - _2532) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2727 = ((((_2533 > 0.0) ? exp2(_2548 * _2533) : (2.0 - exp2(_2550 * _2533))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2543;
        }
        else
        {
            float _2671 = 1.0 / cbSceneParam._m0[80u].x;
            float _2672 = isnan(_2534) ? _2533 : (isnan(_2533) ? _2534 : max(_2533, _2534));
            float _2673 = isnan(_2534) ? _2533 : (isnan(_2533) ? _2534 : min(_2533, _2534));
            float _2682 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : min(_2672, 0.0));
            float _2683 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : min(_2673, 0.0));
            _2727 = ((abs(_2540 / _2529) * cbSceneParam._m0[80u].y) * ((((_2682 - _2683) * 2.0) - ((exp2(_2548 * (isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0)))) - exp2(_2548 * (isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0))))) * _2671)) - ((exp2(_2550 * _2682) - exp2(_2550 * _2683)) * _2671))) + (_2543 * cbSceneParam._m0[80u].z);
        }
        vec4 _2729 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, 1.0), 0.0);
        float _2738 = exp2((_2727 * (-1.44269502162933349609375)) * (1.0 - _2729.w));
        float _2739 = log2(_2738);
        float _2755 = log2(_2460);
        _2552 = (exp2(_2755 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].x)) * _2729.x) / cbSceneParam._m0[78u].x)) + _2457;
        _2554 = (exp2(_2755 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].y)) * _2729.y) / cbSceneParam._m0[78u].y)) + _2458;
        _2556 = (exp2(_2755 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].z)) * _2729.z) / cbSceneParam._m0[78u].z)) + _2459;
        _2558 = _2738 * _2460;
    }
    else
    {
        _2552 = _2457;
        _2554 = _2458;
        _2556 = _2459;
        _2558 = _2460;
    }
    bool _2765;
    vec4 _2568;
    vec4 _2590;
    float _2592;
    float _2596;
    float _2597;
    float _2598;
    float _2599;
    bool _2609;
    for (;;)
    {
        _2568 = cbMatDynParam._m0[0u];
        float _2570 = roundEven(_2568.y);
        bool _2571 = _2570 == 3.0;
        float _2572 = log2(_2558);
        float _2579 = exp2(_2572 * cbSceneParam._m0[78u].x) * _2429;
        float _2580 = exp2(_2572 * cbSceneParam._m0[78u].y) * _2430;
        float _2581 = exp2(_2572 * cbSceneParam._m0[78u].z) * _2431;
        float _2588 = _517 + (-0.5);
        _2590 = cbMtdParam._m0[1u];
        _2592 = _2590.y * _2588;
        float _2595 = (_2570 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2596 = _2595 * (_2571 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2552)));
        _2597 = _2595 * (_2571 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2554)));
        _2598 = _2595 * (_2571 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2556)));
        _2599 = _2588 * 0.999000012874603271484375;
        _2609 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2609)
        {
            if ((cbInstanceData._m0[_567 + 7u].x + _2599) < 0.5)
            {
                _2765 = true;
                break;
            }
        }
        uint _2706 = _568 + uint(_2568.w);
        if ((cbInstanceData._m0[_2706].w < 1.0) && ((cbInstanceData._m0[_2706].w + _2599) < 0.5))
        {
            _2765 = true;
            break;
        }
        if ((_2592 + 1.0) < _2590.x)
        {
            _2765 = true;
            break;
        }
        _2765 = false;
        break;
    }
    float _2970;
    if (_2765)
    {
        discard_state = true;
        _2970 = 0.0;
    }
    else
    {
        _2970 = cbInstanceData._m0[_2432].w;
    }
    SV_Target.x = _2596;
    SV_Target.y = _2597;
    SV_Target.z = _2598;
    SV_Target.w = _2970;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2432].w;
    discard_exit();
}


