#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3404 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3415 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))));
    float _321 = fma(_318, _230, fma(_312, _223, _310 * _209));
    float _324 = fma(_318, _231, fma(_312, _224, _310 * _210));
    float _327 = fma(_318, _232, fma(_312, _225, _310 * _211));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _345 = cbMtdParam._m0[11u].z + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3426 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _369 = _364.x * cbMtdParam._m0[9u].x;
    float _370 = _364.y * cbMtdParam._m0[9u].y;
    float _371 = _364.z * cbMtdParam._m0[9u].z;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _404 = (((_390.x * cbMtdParam._m0[10u].x) - _369) * _297) + _369;
    float _405 = (((_390.y * cbMtdParam._m0[10u].y) - _370) * _297) + _370;
    float _406 = (((_390.z * cbMtdParam._m0[10u].z) - _371) * _297) + _371;
    vec4 _419 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _430 = ((_419.x - _404) * _346) + _404;
    float _431 = ((_419.y - _405) * _346) + _405;
    float _432 = ((_419.z - _406) * _346) + _406;
    float _448 = _297 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _450 = _448 - (_448 * _346);
    vec4 _463 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _470 = (_463.x * 2.0) + (-1.0);
    float _471 = (_463.y * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3437 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _480 = ((_463.z - _306) * _346) + _306;
    float _487 = ((_470 - _310) * _346) + _310;
    float _488 = ((_471 - _312) * _346) + _312;
    float _489 = ((sqrt(1.0 - (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) - _318) * _346) + _318;
    float _492 = fma(_489, _230, fma(_488, _223, _487 * _209));
    float _495 = fma(_489, _231, fma(_488, _224, _487 * _210));
    float _498 = fma(_489, _232, fma(_488, _225, _487 * _211));
    float _502 = inversesqrt(dot(vec3(_492, _495, _498), vec3(_492, _495, _498)));
    float _503 = _502 * _492;
    float _504 = _502 * _495;
    float _505 = _502 * _498;
    float _3448 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _506 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3470 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3481 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3492 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _510 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _526 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _576 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _566);
    float _577 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _566);
    float _578 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _566);
    float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
    float _583 = _576 * _582;
    float _584 = _577 * _582;
    float _585 = _578 * _582;
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _611 = fma(_505, cbSceneParam._m0[5u].z, fma(_504, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _503));
    float _614 = fma(_505, cbSceneParam._m0[6u].z, fma(_504, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _503));
    float _617 = fma(_505, cbSceneParam._m0[7u].z, fma(_504, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _503));
    uint _630 = uint(roundEven(NORMAL.w)) * 13u;
    uint _632 = (_630 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _638 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_632].x;
    float _639 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_632].y;
    float _640 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_632].z;
    float _3503 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _644 = 1.0 - _510;
    float _645 = _641 * _644;
    float _646 = _642 * _644;
    float _647 = _643 * _644;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _510;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _510;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _510;
    float _655 = _652 + 0.039999999105930328369140625;
    float _657 = _653 + 0.039999999105930328369140625;
    float _658 = _654 + 0.039999999105930328369140625;
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _670 = _667.x * TEXCOORD_9.w;
    float _671 = dot(vec3(_503, _504, _505), vec3(_583, _584, _585));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _503) - _583;
    float _679 = (_674 * _504) - _584;
    float _680 = (_674 * _505) - _585;
    float _684 = abs(dot(vec3(_583, _584, _585), vec3(_503, _504, _505)));
    float _3536 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _686 = sqrt(_506);
    float _699 = exp2((_686 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_686 * 3.0));
    float _705 = (1.0 - _699) * ((_686 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _706 = _699 * _686;
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _773 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _777 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _802 = _734 + _503;
        float _803 = _738 + _504;
        float _804 = _742 + _505;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_503, _504, _505), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3584 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_503, _504, _505), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3617 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_503, _504, _505), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3650 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1089 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1093 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1116 = _734 + _503;
        float _1117 = _738 + _504;
        float _1118 = _742 + _505;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_503, _504, _505), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3713 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_503, _504, _505), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3746 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_503, _504, _505), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3779 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _678 * 0.5;
    float _1423 = _679 * 0.5;
    float _1424 = _680 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _506);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1554 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1557 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1585 = frontier_phi_16_14_ladder;
        }
        float _1812;
        if (_1554 > 0.0)
        {
            _1812 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1812 = frontier_phi_25_21_ladder;
        }
        float _2069;
        if (_1557 > 0.0)
        {
            _2069 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2069 = frontier_phi_37_32_ladder;
        }
        float _2071 = isnan(_1812) ? _1585 : (isnan(_1585) ? _1812 : min(_1585, _1812));
        float _2072 = isnan(_2069) ? _2071 : (isnan(_2071) ? _2069 : min(_2071, _2069));
        float _2076 = (_2072 * _1551) + _1540;
        float _2077 = (_2072 * _1554) + _1544;
        float _2078 = (_2072 * _1557) + _1548;
        float _2079 = _2072 * 9.9999997473787516355514526367188e-05;
        float _2081 = (-1.0) - _2079;
        float _2083 = _2079 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2078 > _2083) || ((_2078 < _2081) || ((_2077 > _2083) || ((_2077 < _2081) || ((_2076 < _2081) || (_2076 > _2083))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2078, cbModelParam._m0[9u].z, fma(_2077, cbModelParam._m0[9u].y, _2076 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2078, cbModelParam._m0[10u].z, fma(_2077, cbModelParam._m0[10u].y, _2076 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2078, cbModelParam._m0[11u].z, fma(_2077, cbModelParam._m0[11u].y, _2076 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_15_37_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_15_37_ladder_2;
        _1575 = frontier_phi_15_37_ladder_1;
        _1577 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1491);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _506);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1653 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1656 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1817;
        if (_1650 > 0.0)
        {
            _1817 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1817 = frontier_phi_27_23_ladder;
        }
        float _2096;
        if (_1653 > 0.0)
        {
            _2096 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2096 = frontier_phi_39_34_ladder;
        }
        float _2309;
        if (_1656 > 0.0)
        {
            _2309 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2309 = frontier_phi_48_45_ladder;
        }
        float _2311 = isnan(_2096) ? _1817 : (isnan(_1817) ? _2096 : min(_1817, _2096));
        float _2312 = isnan(_2309) ? _2311 : (isnan(_2311) ? _2309 : min(_2311, _2309));
        float _2316 = (_2312 * _1650) + _1639;
        float _2317 = (_2312 * _1653) + _1643;
        float _2318 = (_2312 * _1656) + _1647;
        float _2319 = _2312 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2319;
        float _2322 = _2319 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2318 > _2322) || ((_2318 < _2320) || ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 < _2320) || (_2316 > _2322))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2318, cbModelParam._m0[17u].z, fma(_2317, cbModelParam._m0[17u].y, _2316 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2318, cbModelParam._m0[18u].z, fma(_2317, cbModelParam._m0[18u].y, _2316 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2318, cbModelParam._m0[19u].z, fma(_2317, cbModelParam._m0[19u].y, _2316 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_24_48_ladder = _2516.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2516.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2516.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_24_48_ladder_2;
        _1677 = frontier_phi_24_48_ladder_1;
        _1679 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1582);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_705 * _655) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1694 = (((_705 * _657) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1696 = (((_705 * _658) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1679 - _1577)) + _1577);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    vec4 _1713 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_591, _592));
    float _1715 = _1713.w;
    float _1727 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1715);
    float _1728 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1715);
    float _1729 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1715);
    uvec4 _1733 = floatBitsToUint(cbInstanceData._m0[_630 + 5u]);
    uint _1735 = _1733.x * 14u;
    uint _1736 = _1735 + 13u;
    float _1743 = _670 + (-1.0);
    float _1748 = (cbLight._m0[_1736].x * _1743) + 1.0;
    float _1749 = (cbLight._m0[_1736].y * _1743) + 1.0;
    float _1750 = (cbLight._m0[_1736].z * _1743) + 1.0;
    float _1751 = (cbLight._m0[_1736].w * _1743) + 1.0;
    uint _1752 = _1735 + 5u;
    float _1758 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1762 = _1735 + 4u;
    float _1771 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1775 = _1735 | 1u;
    float _1786 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_503, _504, _505));
    float _1789 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_503, _504, _505));
    float _3915 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _3926 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1794 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1796 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1803 = ((cbLight._m0[_1752].x * _1758) * _1796) + (((cbLight._m0[_1762].x * _1727) * _1771) * _1794);
    float _1804 = ((_1758 * cbLight._m0[_1752].y) * _1796) + (((cbLight._m0[_1762].y * _1728) * _1771) * _1794);
    float _1805 = ((_1758 * cbLight._m0[_1752].z) * _1796) + (((cbLight._m0[_1762].z * _1729) * _1771) * _1794);
    uvec4 _1809 = floatBitsToUint(cbLight._m0[_1735 + 12u]);
    bool _1811 = _1809.x == 0u;
    float _1822;
    float _1824;
    float _1826;
    if (_1811)
    {
        _1822 = _1803;
        _1824 = _1804;
        _1826 = _1805;
    }
    else
    {
        uint _1830 = _1735 + 6u;
        float _1846 = (dot(vec3(cbLight._m0[_1735 + 2u].xyz), vec3(_503, _504, _505)) * 0.5) + 0.5;
        float _1847 = _1846 * _1846;
        float _3937 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1849 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _1822 = (((cbLight._m0[_1830].x * 0.3183098733425140380859375) * _1848) * _1849) + _1803;
        _1824 = (((cbLight._m0[_1830].y * 0.3183098733425140380859375) * _1848) * _1849) + _1804;
        _1826 = (((cbLight._m0[_1830].z * 0.3183098733425140380859375) * _1848) * _1849) + _1805;
    }
    bool _1829 = _1809.y == 0u;
    float _1867;
    float _1869;
    float _1871;
    if (_1829)
    {
        _1867 = _1822;
        _1869 = _1824;
        _1871 = _1826;
    }
    else
    {
        uint _2040 = _1735 + 7u;
        float _2056 = (dot(vec3(cbLight._m0[_1735 + 3u].xyz), vec3(_503, _504, _505)) * 0.5) + 0.5;
        float _2057 = _2056 * _2056;
        float _3953 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2058 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2059 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _1867 = (((cbLight._m0[_2040].x * 0.3183098733425140380859375) * _2058) * _2059) + _1822;
        _1869 = (((cbLight._m0[_2040].y * 0.3183098733425140380859375) * _2058) * _2059) + _1824;
        _1871 = (((cbLight._m0[_2040].z * 0.3183098733425140380859375) * _2058) * _2059) + _1826;
    }
    uint _1874 = _1735 + 8u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _506) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1735].x + _583;
    float _1890 = cbLight._m0[_1735].y + _584;
    float _1891 = cbLight._m0[_1735].z + _585;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_1735].xyz));
    float _3969 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _1903 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1904 = dot(vec3(_503, _504, _505), vec3(_1896, _1897, _1898));
    float _3991 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1896, _1897, _1898));
    float _4002 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1888 * _1888;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
    float _1925 = 0.959999978542327880859375 - _652;
    float _1927 = 0.959999978542327880859375 - _653;
    float _1928 = 0.959999978542327880859375 - _654;
    float _1935 = 1.0 - _1888;
    float _1946 = (0.5 / (((_1903 * ((_1902 * _1935) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _1935) + _1888) * _1902))) * _1902;
    float _4013 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    uint _1962 = _1735 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _506) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1775].x + _583;
    float _1976 = cbLight._m0[_1775].y + _584;
    float _1977 = cbLight._m0[_1775].z + _585;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_1775].xyz));
    float _4024 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1989 = dot(vec3(_503, _504, _505), vec3(_1982, _1983, _1984));
    float _4035 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1982, _1983, _1984));
    float _4046 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0);
    float _2015 = 1.0 - _1974;
    float _2025 = (0.5 / (((_1903 * ((_1988 * _2015) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2015) + _1974) * _1988))) * _1988;
    float _4057 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2037 = (((((_2008 * _1925) + _655) * cbLight._m0[_1962].x) * _2027) * _1758) + ((((cbLight._m0[_1874].x * _1727) * ((_1924 * _1925) + _655)) * _1948) * _1771);
    float _2038 = (((((_2008 * _1927) + _657) * cbLight._m0[_1962].y) * _2027) * _1758) + ((((cbLight._m0[_1874].y * _1728) * ((_1924 * _1927) + _657)) * _1948) * _1771);
    float _2039 = (((((_2008 * _1928) + _658) * cbLight._m0[_1962].z) * _2027) * _1758) + ((((cbLight._m0[_1874].z * _1729) * ((_1924 * _1928) + _658)) * _1948) * _1771);
    float _2101;
    float _2103;
    float _2105;
    if (_1811)
    {
        _2101 = _2037;
        _2103 = _2038;
        _2105 = _2039;
    }
    else
    {
        uint _2107 = _1735 + 2u;
        uint _2111 = _1735 + 10u;
        float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _506) * 0.949999988079071044921875);
        float _2126 = _2125 * _2125;
        float _2127 = cbLight._m0[_2107].x + _583;
        float _2128 = cbLight._m0[_2107].y + _584;
        float _2129 = cbLight._m0[_2107].z + _585;
        float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
        float _2134 = _2133 * _2127;
        float _2135 = _2133 * _2128;
        float _2136 = _2133 * _2129;
        float _2137 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2107].xyz));
        float _4068 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2141 = dot(vec3(_503, _504, _505), vec3(_2134, _2135, _2136));
        float _4079 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2145 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2134, _2135, _2136));
        float _4090 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2149 = _2126 * _2126;
        float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
        float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
        float _2167 = 1.0 - _2126;
        float _2177 = (0.5 / (((_1903 * ((_2140 * _2167) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2167) + _2126) * _2140))) * _2140;
        float _4101 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2179 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
        float _2180 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _2101 = (((((_2160 * _1925) + _655) * cbLight._m0[_2111].x) * _2179) * _2180) + _2037;
        _2103 = (((((_2160 * _1927) + _657) * cbLight._m0[_2111].y) * _2179) * _2180) + _2038;
        _2105 = (((((_2160 * _1928) + _658) * cbLight._m0[_2111].z) * _2179) * _2180) + _2039;
    }
    float _2215;
    float _2217;
    float _2219;
    if (_1829)
    {
        _2215 = _2101;
        _2217 = _2103;
        _2219 = _2105;
    }
    else
    {
        uint _2226 = _1735 + 3u;
        uint _2230 = _1735 + 11u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _506) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _583;
        float _2247 = cbLight._m0[_2226].y + _584;
        float _2248 = cbLight._m0[_2226].z + _585;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2226].xyz));
        float _4117 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2260 = dot(vec3(_503, _504, _505), vec3(_2253, _2254, _2255));
        float _4128 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4139 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0);
        float _2286 = 1.0 - _2245;
        float _2296 = (0.5 / (((_1903 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2286) + _2245) * _2259))) * _2259;
        float _4150 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _2215 = (((((_2279 * _1925) + _655) * cbLight._m0[_2230].x) * _2298) * _2299) + _2101;
        _2217 = (((((_2279 * _1927) + _657) * cbLight._m0[_2230].y) * _2298) * _2299) + _2103;
        _2219 = (((((_2279 * _1928) + _658) * cbLight._m0[_2230].z) * _2298) * _2299) + _2105;
    }
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_1733.y == 0u)
    {
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2374;
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2374;
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2374;
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.x;
        uint _2401 = uint((float(_2389.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _2390))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _2390)));
        float _2411 = (log2(_2377 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2412 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        uint _2415 = uint(isnan(14.0) ? _2412 : (isnan(_2412) ? 14.0 : min(_2412, 14.0)));
        uvec4 _2420 = texelFetch(g_lightClusterGridBuffer, int(((_2415 << 2u) + (_2401 << 6u)) >> 2u));
        uint _2421 = _2420.x;
        uint _2422 = _2389.z;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((((1u << ((_2422 >> 4u) & 15u)) + 4294967295u) & _2421) == 0u) || ((_2422 & 240u) == 0u))
        {
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
        }
        else
        {
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            uint _2671 = 0u;
            uint _2680;
            bool _2681;
            for (;;)
            {
                _2680 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                _2681 = _2680 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2681)
                {
                    frontier_phi_63_pred = _2670;
                    frontier_phi_63_pred_1 = _2669;
                    frontier_phi_63_pred_2 = _2668;
                    frontier_phi_63_pred_3 = _2667;
                    frontier_phi_63_pred_4 = _2666;
                    frontier_phi_63_pred_5 = _2665;
                }
                else
                {
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    uint _2795;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2680;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    for (;;)
                    {
                        uint _2799 = uint(findLSB(_2795)) + (_2671 << 5u);
                        uint _2796 = (_2795 + 4294967295u) & _2795;
                        uint _2801 = _2799 * 48u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2821 = (_2799 * 48u) + 4u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2840 = (_2799 * 48u) + 8u;
                        vec3 _2851 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x));
                        float _2855 = _2815.x - _2375;
                        float _2856 = _2815.y - _2376;
                        float _2857 = _2815.z - _2377;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_611, _614, _617), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2815.w);
                        float _4176 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2872 = sqrt(_2858) * _2834.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2865) + _2876;
                        float _2882 = _2872 * _2872;
                        float _2886 = ((isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))) * _2871) / ((_2882 * 0.699999988079071044921875) + 1.0);
                        float _2890 = (-0.0) - _2375;
                        float _2891 = (-0.0) - _2376;
                        float _2892 = (-0.0) - _2377;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2907 = exp2(log2(1.0 / ((_2882 * 3.5) + 5.0)) * 0.25);
                        float _2908 = 1.0 - _686;
                        float _2915 = sqrt(1.0 - ((1.0 - (_2908 * _2908)) * (1.0 - (_2907 * _2907))));
                        float _2916 = _2915 * _2915;
                        float _2917 = _2916 * _2916;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2928 = dot(vec3(_611, _614, _617), vec3(_2897, _2898, _2899));
                        float _4192 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2932 = dot(vec3(_611, _614, _617), vec3(_2924 * _2918, _2924 * _2919, _2924 * _2920));
                        float _4203 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2939 = ((_2935 * _2935) * (_2917 + (-1.0))) + 1.0;
                        float _2940 = _2875 * _2916;
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2865) + _2941;
                        float _4214 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2946 = 1.0 - _2916;
                        float _2956 = (0.5 / (((_2945 * ((_2931 * _2946) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2945 * _2946) + _2916) * _2931))) * _2945;
                        float _4225 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2967 = (((_2917 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_2939 * _2939) * ((_2882 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2724 = (_2886 * _2834.x) + _2792;
                        _2725 = (_2886 * _2834.y) + _2793;
                        _2726 = (_2886 * _2834.z) + _2794;
                        _2721 = (_2967 * _2851.x) + _2789;
                        _2722 = (_2967 * _2851.y) + _2790;
                        _2723 = (_2967 * _2851.z) + _2791;
                        if (_2796 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2796;
                        }
                    }
                    frontier_phi_63_pred = _2726;
                    frontier_phi_63_pred_1 = _2725;
                    frontier_phi_63_pred_2 = _2724;
                    frontier_phi_63_pred_3 = _2723;
                    frontier_phi_63_pred_4 = _2722;
                    frontier_phi_63_pred_5 = _2721;
                }
                _2532 = frontier_phi_63_pred;
                _2530 = frontier_phi_63_pred_1;
                _2528 = frontier_phi_63_pred_2;
                _2526 = frontier_phi_63_pred_3;
                _2524 = frontier_phi_63_pred_4;
                _2522 = frontier_phi_63_pred_5;
                uint _2672 = _2671 + 1u;
                if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2665 = _2522;
                    _2666 = _2524;
                    _2667 = _2526;
                    _2668 = _2528;
                    _2669 = _2530;
                    _2670 = _2532;
                    _2671 = _2672;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
        }
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.z;
        uint _2538 = (_2536 >> 8u) & 15u;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((4294967295u << _2538) & _2421) == 0u)
        {
            _2633 = _2521;
            _2635 = _2523;
            _2637 = _2525;
            _2639 = _2527;
            _2641 = _2529;
            _2643 = _2531;
        }
        else
        {
            float _2658 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
            float _2659 = _2658 * _2375;
            float _2660 = _2658 * _2376;
            float _2661 = _2658 * _2377;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2538 < ((_2536 >> 12u) & 15u))
            {
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2772 = _2521;
                float _2773 = _2523;
                float _2774 = _2525;
                float _2775 = _2527;
                float _2776 = _2529;
                float _2777 = _2531;
                uint _2778 = _2538;
                uint _2787;
                bool _2788;
                for (;;)
                {
                    _2787 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                    _2788 = _2787 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2788)
                    {
                        frontier_phi_69_pred = _2777;
                        frontier_phi_69_pred_1 = _2776;
                        frontier_phi_69_pred_2 = _2775;
                        frontier_phi_69_pred_3 = _2774;
                        frontier_phi_69_pred_4 = _2773;
                        frontier_phi_69_pred_5 = _2772;
                    }
                    else
                    {
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _2985 = _2772;
                        float _2986 = _2773;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        uint _2991 = _2787;
                        uint _2992;
                        vec4 _3017;
                        float _3018;
                        vec4 _3033;
                        vec3 _3045;
                        vec4 _3061;
                        vec4 _3077;
                        float _3124;
                        bool _3125;
                        for (;;)
                        {
                            uint _3002 = ((_2778 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2991));
                            _2992 = (_2991 + 4294967295u) & _2991;
                            uint _3004 = _3002 * 40u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3018 = _3017.w;
                            uint _3020 = (_3002 * 40u) + 4u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3035 = (_3002 * 40u) + 8u;
                            _3045 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x));
                            uint _3048 = (_3002 * 40u) + 16u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3064 = (_3002 * 40u) + 20u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3080 = (_3002 * 40u) + 24u;
                            vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3099 = (_3002 * 40u) + 28u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3124 = fma(_2377, _3112.z, fma(_2376, _3112.y, _3112.x * _2375)) + _3112.w;
                            _3125 = !((fma(_2377, _3093.z, fma(_2376, _3093.y, _3093.x * _2375)) + _3093.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3125)
                            {
                                float _3152 = _3017.x - _2375;
                                float _3153 = _3017.y - _2376;
                                float _3154 = _3017.z - _2377;
                                float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                                float _3158 = inversesqrt(_3155);
                                float _3159 = _3158 * _3152;
                                float _3160 = _3158 * _3153;
                                float _3161 = _3158 * _3154;
                                float _3165 = 1.0 - (_3155 / (_3018 * _3018));
                                float _4236 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3170 = sqrt(_3155) * _3033.w;
                                float _3172 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                                float _3173 = _3172 * _3172;
                                float _3176 = ((1.0 - _3173) * dot(vec3(_3159, _3160, _3161), vec3(_611, _614, _617))) + _3173;
                                float _3179 = _3170 * _3170;
                                float _3183 = (fma(_2377, _3061.z, fma(_2376, _3061.y, _3061.x * _2375)) + _3061.w) / _3124;
                                float _3184 = (fma(_2377, _3077.z, fma(_2376, _3077.y, _3077.x * _2375)) + _3077.w) / _3124;
                                float _3188 = 1.0 - dot(vec2(_3183, _3184), vec2(_3183, _3184));
                                float _4252 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3190 = _3189 * (((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3166) / ((_3179 * 0.699999988079071044921875) + 1.0));
                                float _3202 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                                float _3203 = 1.0 - _686;
                                float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                                float _3211 = _3210 * _3210;
                                float _3212 = _3211 * _3211;
                                float _3213 = _3159 - _2659;
                                float _3214 = _3160 - _2660;
                                float _3215 = _3161 - _2661;
                                float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                                float _3223 = dot(vec3(_611, _614, _617), vec3((-0.0) - _2659, (-0.0) - _2660, (-0.0) - _2661));
                                float _4263 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3227 = dot(vec3(_611, _614, _617), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                                float _4274 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                                float _3235 = _3172 * _3211;
                                float _3236 = _3235 * _3235;
                                float _3242 = ((1.0 - _3236) * dot(vec3(_611, _614, _617), vec3(_3159, _3160, _3161))) + _3236;
                                float _4285 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3244 = 1.0 - _3211;
                                float _3254 = (0.5 / (((_3243 * ((_3226 * _3244) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3211) * _3226))) * _3243;
                                float _4296 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3264 = (_3189 * _3166) * (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_3234 * _3234) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3190 * _3033.z;
                                frontier_phi_75_pred_1 = _3190 * _3033.y;
                                frontier_phi_75_pred_2 = _3190 * _3033.x;
                                frontier_phi_75_pred_3 = _3264 * _3045.z;
                                frontier_phi_75_pred_4 = _3264 * _3045.y;
                                frontier_phi_75_pred_5 = _3264 * _3045.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3273 = frontier_phi_75_pred;
                            _3272 = frontier_phi_75_pred_1;
                            _3271 = frontier_phi_75_pred_2;
                            _3270 = frontier_phi_75_pred_3;
                            _3269 = frontier_phi_75_pred_4;
                            _3268 = frontier_phi_75_pred_5;
                            _2975 = _3271 + _2988;
                            _2976 = _3272 + _2989;
                            _2977 = _3273 + _2990;
                            _2972 = _3268 + _2985;
                            _2973 = _3269 + _2986;
                            _2974 = _3270 + _2987;
                            if (_2992 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2992;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2977;
                        frontier_phi_69_pred_1 = _2976;
                        frontier_phi_69_pred_2 = _2975;
                        frontier_phi_69_pred_3 = _2974;
                        frontier_phi_69_pred_4 = _2973;
                        frontier_phi_69_pred_5 = _2972;
                    }
                    _2644 = frontier_phi_69_pred;
                    _2642 = frontier_phi_69_pred_1;
                    _2640 = frontier_phi_69_pred_2;
                    _2638 = frontier_phi_69_pred_3;
                    _2636 = frontier_phi_69_pred_4;
                    _2634 = frontier_phi_69_pred_5;
                    uint _2779 = _2778 + 1u;
                    if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2772 = _2634;
                        _2773 = _2636;
                        _2774 = _2638;
                        _2775 = _2640;
                        _2776 = _2642;
                        _2777 = _2644;
                        _2778 = _2779;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2644;
                frontier_phi_57_58_ladder_1 = _2642;
                frontier_phi_57_58_ladder_2 = _2640;
                frontier_phi_57_58_ladder_3 = _2638;
                frontier_phi_57_58_ladder_4 = _2636;
                frontier_phi_57_58_ladder_5 = _2634;
            }
            else
            {
                frontier_phi_57_58_ladder = _2531;
                frontier_phi_57_58_ladder_1 = _2529;
                frontier_phi_57_58_ladder_2 = _2527;
                frontier_phi_57_58_ladder_3 = _2525;
                frontier_phi_57_58_ladder_4 = _2523;
                frontier_phi_57_58_ladder_5 = _2521;
            }
            _2633 = frontier_phi_57_58_ladder_5;
            _2635 = frontier_phi_57_58_ladder_4;
            _2637 = frontier_phi_57_58_ladder_3;
            _2639 = frontier_phi_57_58_ladder_2;
            _2641 = frontier_phi_57_58_ladder_1;
            _2643 = frontier_phi_57_58_ladder;
        }
        float _2648 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2433 = (_2648 * _2639) + _1867;
        _2435 = (_2648 * _2641) + _1869;
        _2437 = (_2648 * _2643) + _1871;
        _2439 = ((_2633 * _655) * _2648) + _2215;
        _2441 = ((_2635 * _657) * _2648) + _2217;
        _2443 = ((_2637 * _658) * _2648) + _2219;
    }
    else
    {
        _2433 = _1867;
        _2435 = _1869;
        _2437 = _1871;
        _2439 = _2215;
        _2441 = _2217;
        _2443 = _2219;
    }
    float _4312 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4323 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4334 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    uint _2463 = _630 + 6u;
    float _2471 = _591 / cbSceneParam._m0[86u].x;
    float _2472 = _592 / cbSceneParam._m0[86u].y;
    vec4 _2486 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, (log2((isnan(cbSceneParam._m0[77u].w) ? _526 : (isnan(_526) ? cbSceneParam._m0[77u].w : min(_526, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2488 = _2486.x;
    float _2489 = _2486.y;
    float _2490 = _2486.z;
    float _2491 = _2486.w;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_526 > cbSceneParam._m0[78u].w)
    {
        float _2546 = isnan(_526) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _526 : min(cbSceneParam._m0[80u].w, _526));
        float _2547 = _2546 / _526;
        float _2558 = _2547 * _576;
        float _2559 = _577 * _2547;
        float _2560 = (-0.0) - _2559;
        float _2561 = _2547 * _578;
        float _2563 = (cbSceneParam._m0[77u].w * _2560) / _2546;
        float _2564 = _2563 + cbSceneParam._m0[79u].w;
        float _2565 = cbSceneParam._m0[79u].w - _2559;
        float _2571 = sqrt(((_2558 * _2558) + (_2559 * _2559)) + (_2561 * _2561));
        float _2574 = (1.0 - (cbSceneParam._m0[77u].w / _2546)) * _2571;
        float _2579 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2581 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2734;
        if (abs((_2560 - _2563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2734 = ((((_2564 > 0.0) ? exp2(_2579 * _2564) : (2.0 - exp2(_2581 * _2564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2574;
        }
        else
        {
            float _2694 = 1.0 / cbSceneParam._m0[80u].x;
            float _2695 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : max(_2564, _2565));
            float _2696 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : min(_2564, _2565));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            _2734 = ((abs(_2571 / _2560) * cbSceneParam._m0[80u].y) * ((((_2705 - _2706) * 2.0) - ((exp2(_2579 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)))) - exp2(_2579 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))))) * _2694)) - ((exp2(_2581 * _2705) - exp2(_2581 * _2706)) * _2694))) + (_2574 * cbSceneParam._m0[80u].z);
        }
        vec4 _2736 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, 1.0), 0.0);
        float _2745 = exp2((_2734 * (-1.44269502162933349609375)) * (1.0 - _2736.w));
        float _2746 = log2(_2745);
        float _2762 = log2(_2491);
        _2583 = (exp2(_2762 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].x)) * _2736.x) / cbSceneParam._m0[78u].x)) + _2488;
        _2585 = (exp2(_2762 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].y)) * _2736.y) / cbSceneParam._m0[78u].y)) + _2489;
        _2587 = (exp2(_2762 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].z)) * _2736.z) / cbSceneParam._m0[78u].z)) + _2490;
        _2589 = _2745 * _2491;
    }
    else
    {
        _2583 = _2488;
        _2585 = _2489;
        _2587 = _2490;
        _2589 = _2491;
    }
    float _2601 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2602 = _2601 == 3.0;
    float _2603 = log2(_2589);
    float _2610 = exp2(_2603 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2433 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _670))) + ((_2439 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1480)) * cbPerFrame._m0[3u].x));
    float _2611 = exp2(_2603 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2435 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _670))) + ((_2441 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1480)) * cbPerFrame._m0[3u].x));
    float _2612 = exp2(_2603 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2437 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _670))) + ((_2443 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1480)) * cbPerFrame._m0[3u].x));
    float _2621 = (_2601 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2621 * (_2602 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.y = _2621 * (_2602 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.z = _2621 * (_2602 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.w = cbInstanceData._m0[_2463].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2463].w;
}


