#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1080;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3415 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3426 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    float _323 = fma(_320, _232, fma(_314, _225, _312 * _211));
    float _326 = fma(_320, _233, fma(_314, _226, _312 * _212));
    float _329 = fma(_320, _234, fma(_314, _227, _312 * _213));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _361 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _365 = (cbMtdParam._m0[11u].z + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_361.x * cbMtdParam._m0[11u].w);
    float _3437 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _388 = _383.x * cbMtdParam._m0[9u].x;
    float _389 = _383.y * cbMtdParam._m0[9u].y;
    float _390 = _383.z * cbMtdParam._m0[9u].z;
    vec4 _409 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _423 = (((_409.x * cbMtdParam._m0[10u].x) - _388) * _299) + _388;
    float _424 = (((_409.y * cbMtdParam._m0[10u].y) - _389) * _299) + _389;
    float _425 = (((_409.z * cbMtdParam._m0[10u].z) - _390) * _299) + _390;
    vec4 _438 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _449 = ((_438.x - _423) * _366) + _423;
    float _450 = ((_438.y - _424) * _366) + _424;
    float _451 = ((_438.z - _425) * _366) + _425;
    vec4 _464 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _466 = _464.x;
    float _484 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _466) * _299) + _466;
    float _486 = _484 - (_484 * _366);
    vec4 _499 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _506 = (_499.x * 2.0) + (-1.0);
    float _507 = (_499.y * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _3448 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _516 = ((_499.z - _308) * _366) + _308;
    float _523 = ((_506 - _312) * _366) + _312;
    float _524 = ((_507 - _314) * _366) + _314;
    float _525 = ((sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) - _320) * _366) + _320;
    float _528 = fma(_525, _232, fma(_524, _225, _523 * _211));
    float _531 = fma(_525, _233, fma(_524, _226, _523 * _212));
    float _534 = fma(_525, _234, fma(_524, _227, _523 * _213));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3459 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _542 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3481 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3492 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3503 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _546 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _612 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _602);
    float _613 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _602);
    float _614 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _602);
    float _618 = inversesqrt(dot(vec3(_612, _613, _614), vec3(_612, _613, _614)));
    float _619 = _612 * _618;
    float _620 = _613 * _618;
    float _621 = _614 * _618;
    float _627 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _628 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _646 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _649 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _652 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _665 = uint(roundEven(NORMAL.w)) * 13u;
    uint _667 = (_665 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _673 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_667].x;
    float _674 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_667].y;
    float _675 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_667].z;
    float _3514 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _679 = 1.0 - _546;
    float _680 = _676 * _679;
    float _681 = _677 * _679;
    float _682 = _678 * _679;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _546;
    float _688 = (_677 + (-0.039999999105930328369140625)) * _546;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _546;
    float _690 = _687 + 0.039999999105930328369140625;
    float _692 = _688 + 0.039999999105930328369140625;
    float _693 = _689 + 0.039999999105930328369140625;
    vec4 _702 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _627, cbSceneParam._m0[86u].y * _628));
    float _705 = _702.x * TEXCOORD_9.w;
    float _706 = dot(vec3(_539, _540, _541), vec3(_619, _620, _621));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _539) - _619;
    float _714 = (_709 * _540) - _620;
    float _715 = (_709 * _541) - _621;
    float _719 = abs(dot(vec3(_619, _620, _621), vec3(_539, _540, _541)));
    float _3547 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_542);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _740 = (1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _741 = _734 * _721;
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_777, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769));
        float _808 = fma(_777, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769));
        float _812 = fma(_777, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769));
        float _837 = _769 + _539;
        float _838 = _773 + _540;
        float _839 = _777 + _541;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _804;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _808;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _812;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_539, _540, _541), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3595 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_539, _540, _541), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3628 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_539, _540, _541), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3661 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1120 = fma(_777, cbModelParam._m0[30u].z, fma(_773, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _769));
        float _1124 = fma(_777, cbModelParam._m0[31u].z, fma(_773, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _769));
        float _1128 = fma(_777, cbModelParam._m0[32u].z, fma(_773, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _769));
        float _1151 = _769 + _539;
        float _1152 = _773 + _540;
        float _1153 = _777 + _541;
        float _1163 = fma(_1153, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151)) - _1120;
        float _1164 = fma(_1153, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151)) - _1124;
        float _1165 = fma(_1153, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151)) - _1128;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1120 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1124 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[35u].z) + ((((((_1128 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1219 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1186.x + (-0.5));
        float _1221 = _1219 * (_1186.y + (-0.5));
        float _1222 = _1219 * (_1186.z + (-0.5));
        float _1229 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1193.x + (-0.5));
        float _1231 = _1229 * (_1193.y + (-0.5));
        float _1232 = _1229 * (_1193.z + (-0.5));
        float _1239 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1200.x + (-0.5));
        float _1241 = _1239 * (_1200.y + (-0.5));
        float _1242 = _1239 * (_1200.z + (-0.5));
        float _1249 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1207.x + (-0.5));
        float _1251 = _1249 * (_1207.y + (-0.5));
        float _1252 = _1249 * (_1207.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_539, _540, _541), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3724 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1283 + 1.0))) + _1288) * _1253;
        float _1298 = _1221 * 0.5;
        float _1299 = _1231 * 0.5;
        float _1300 = _1241 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_539, _540, _541), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3757 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1325 + 1.0))) + _1330) * _1254;
        float _1340 = _1222 * 0.5;
        float _1341 = _1232 * 0.5;
        float _1342 = _1242 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_539, _540, _541), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3790 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1367 + 1.0))) + _1372) * _1255;
        _1389 = _1222;
        _1390 = _1221;
        _1391 = _1220;
        _1392 = _1232;
        _1393 = _1231;
        _1394 = _1230;
        _1395 = _1242;
        _1396 = _1241;
        _1397 = _1240;
        _1398 = _1255;
        _1399 = _1254;
        _1400 = _1253;
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1080;
        _1390 = _1080;
        _1391 = _1080;
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1092)) + _1092;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1093)) + _1093;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1094)) + _1094;
    float _1436 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1439 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1442 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1413));
    float _1457 = _713 * 0.5;
    float _1458 = _714 * 0.5;
    float _1459 = _715 * 0.5;
    float _1460 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1463 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1466 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1500;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1473 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1477 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1481 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1488 = dot(vec4(cbModelParam._m0[39u]), vec4(_1457, _1458, _1459, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1511;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1502 = dot(vec4(cbModelParam._m0[40u]), vec4(_1457, _1458, _1459, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1515 = (_1511 * cbModelParam._m0[1u].x) + (_1500 * (1.0 - cbModelParam._m0[1u].x));
    float _1525 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1525 : min(cbModelParam._m0[25u].z, _1525));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1575 = fma(_777, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769)) + cbModelParam._m0[13u].w;
        float _1579 = fma(_777, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769)) + cbModelParam._m0[14u].w;
        float _1583 = fma(_777, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769)) + cbModelParam._m0[15u].w;
        float _1586 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1589 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1592 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1620;
        if (_1586 > 0.0)
        {
            _1620 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1620 = frontier_phi_16_14_ladder;
        }
        float _1826;
        if (_1589 > 0.0)
        {
            _1826 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1826 = frontier_phi_25_21_ladder;
        }
        float _2080;
        if (_1592 > 0.0)
        {
            _2080 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2080 = frontier_phi_37_32_ladder;
        }
        float _2082 = isnan(_1826) ? _1620 : (isnan(_1620) ? _1826 : min(_1620, _1826));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1586) + _1575;
        float _2088 = (_2083 * _1589) + _1579;
        float _2089 = (_2083 * _1592) + _1583;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2090;
        float _2094 = _2090 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 > _2094) || ((_2088 < _2092) || ((_2087 < _2092) || (_2087 > _2094))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2089, cbModelParam._m0[9u].z, fma(_2088, cbModelParam._m0[9u].y, _2087 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2089, cbModelParam._m0[10u].z, fma(_2088, cbModelParam._m0[10u].y, _2087 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2089, cbModelParam._m0[11u].z, fma(_2088, cbModelParam._m0[11u].y, _2087 * cbModelParam._m0[11u].x))), _1526);
            frontier_phi_15_37_ladder = _2217.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2217.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2217.x * cbModelParam._m0[1u].y;
        }
        _1608 = frontier_phi_15_37_ladder_2;
        _1610 = frontier_phi_15_37_ladder_1;
        _1612 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1526);
        _1608 = _1596.x * cbModelParam._m0[1u].y;
        _1610 = _1596.y * cbModelParam._m0[1u].y;
        _1612 = _1596.z * cbModelParam._m0[1u].y;
    }
    float _1616 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1616 : min(cbModelParam._m0[25u].w, _1616));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1674 = fma(_777, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769)) + cbModelParam._m0[21u].w;
        float _1678 = fma(_777, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769)) + cbModelParam._m0[22u].w;
        float _1682 = fma(_777, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769)) + cbModelParam._m0[23u].w;
        float _1685 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1688 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1691 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1831;
        if (_1685 > 0.0)
        {
            _1831 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1831 = frontier_phi_27_23_ladder;
        }
        float _2107;
        if (_1688 > 0.0)
        {
            _2107 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2107 = frontier_phi_39_34_ladder;
        }
        float _2320;
        if (_1691 > 0.0)
        {
            _2320 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2320 = frontier_phi_48_45_ladder;
        }
        float _2322 = isnan(_2107) ? _1831 : (isnan(_1831) ? _2107 : min(_1831, _2107));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1685) + _1674;
        float _2328 = (_2323 * _1688) + _1678;
        float _2329 = (_2323 * _1691) + _1682;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2330;
        float _2333 = _2330 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2329 > _2333) || ((_2329 < _2331) || ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 < _2331) || (_2327 > _2333))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2329, cbModelParam._m0[17u].z, fma(_2328, cbModelParam._m0[17u].y, _2327 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2329, cbModelParam._m0[18u].z, fma(_2328, cbModelParam._m0[18u].y, _2327 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2329, cbModelParam._m0[19u].z, fma(_2328, cbModelParam._m0[19u].y, _2327 * cbModelParam._m0[19u].x))), _1617);
            frontier_phi_24_48_ladder = _2527.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2527.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2527.x * cbModelParam._m0[1u].z;
        }
        _1710 = frontier_phi_24_48_ladder_2;
        _1712 = frontier_phi_24_48_ladder_1;
        _1714 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1617);
        _1710 = _1694.x * cbModelParam._m0[1u].z;
        _1712 = _1694.y * cbModelParam._m0[1u].z;
        _1714 = _1694.z * cbModelParam._m0[1u].z;
    }
    float _1727 = (((_740 * _690) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1710 - _1608)) + _1608);
    float _1729 = (((_740 * _692) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1712 - _1610)) + _1610);
    float _1731 = (((_740 * _693) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1714 - _1612)) + _1612);
    float _1734 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, _1727 * cbSceneParam._m0[91u].x));
    uvec4 _1750 = floatBitsToUint(cbInstanceData._m0[_665 + 5u]);
    uint _1752 = _1750.x * 14u;
    uint _1753 = _1752 + 13u;
    float _1760 = _705 + (-1.0);
    float _1765 = (cbLight._m0[_1753].x * _1760) + 1.0;
    float _1766 = (cbLight._m0[_1753].y * _1760) + 1.0;
    float _1767 = (cbLight._m0[_1753].z * _1760) + 1.0;
    float _1768 = (cbLight._m0[_1753].w * _1760) + 1.0;
    uint _1769 = _1752 + 5u;
    float _1775 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1779 = _1752 + 4u;
    float _1785 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1789 = _1752 | 1u;
    float _1800 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_539, _540, _541));
    float _1803 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_539, _540, _541));
    float _3926 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _3937 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1808 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1810 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1817 = ((cbLight._m0[_1769].x * _1775) * _1810) + ((cbLight._m0[_1779].x * _1785) * _1808);
    float _1818 = ((_1775 * cbLight._m0[_1769].y) * _1810) + ((_1785 * cbLight._m0[_1779].y) * _1808);
    float _1819 = ((_1775 * cbLight._m0[_1769].z) * _1810) + ((_1785 * cbLight._m0[_1779].z) * _1808);
    uvec4 _1823 = floatBitsToUint(cbLight._m0[_1752 + 12u]);
    bool _1825 = _1823.x == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1825)
    {
        _1836 = _1817;
        _1838 = _1818;
        _1840 = _1819;
    }
    else
    {
        uint _1844 = _1752 + 6u;
        float _1860 = (dot(vec3(cbLight._m0[_1752 + 2u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _3948 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1863 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1836 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1817;
        _1838 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1818;
        _1840 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1819;
    }
    bool _1843 = _1823.y == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1843)
    {
        _1881 = _1836;
        _1883 = _1838;
        _1885 = _1840;
    }
    else
    {
        uint _2051 = _1752 + 7u;
        float _2067 = (dot(vec3(cbLight._m0[_1752 + 3u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _3964 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2070 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1881 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1836;
        _1883 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1838;
        _1885 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1840;
    }
    uint _1888 = _1752 + 8u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _542) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1752].x + _619;
    float _1904 = cbLight._m0[_1752].y + _620;
    float _1905 = cbLight._m0[_1752].z + _621;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1752].xyz));
    float _3980 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1917 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1918 = dot(vec3(_539, _540, _541), vec3(_1910, _1911, _1912));
    float _4002 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1910, _1911, _1912));
    float _4013 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1902 * _1902;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0);
    float _1939 = 0.959999978542327880859375 - _687;
    float _1941 = 0.959999978542327880859375 - _688;
    float _1942 = 0.959999978542327880859375 - _689;
    float _1949 = 1.0 - _1902;
    float _1960 = (0.5 / (((_1917 * ((_1916 * _1949) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _1949) + _1902) * _1916))) * _1916;
    float _4024 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    uint _1973 = _1752 + 9u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _542) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1789].x + _619;
    float _1987 = cbLight._m0[_1789].y + _620;
    float _1988 = cbLight._m0[_1789].z + _621;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1789].xyz));
    float _4035 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _2000 = dot(vec3(_539, _540, _541), vec3(_1993, _1994, _1995));
    float _4046 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1993, _1994, _1995));
    float _4057 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1985 * _1985;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2019 = exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0);
    float _2026 = 1.0 - _1985;
    float _2036 = (0.5 / (((_1917 * ((_1999 * _2026) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2026) + _1985) * _1999))) * _1999;
    float _4068 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    float _2048 = (((((_2019 * _1939) + _690) * cbLight._m0[_1973].x) * _2038) * _1775) + (((((_1938 * _1939) + _690) * cbLight._m0[_1888].x) * _1962) * _1785);
    float _2049 = (((((_2019 * _1941) + _692) * cbLight._m0[_1973].y) * _2038) * _1775) + (((((_1938 * _1941) + _692) * cbLight._m0[_1888].y) * _1962) * _1785);
    float _2050 = (((((_2019 * _1942) + _693) * cbLight._m0[_1973].z) * _2038) * _1775) + (((((_1938 * _1942) + _693) * cbLight._m0[_1888].z) * _1962) * _1785);
    float _2112;
    float _2114;
    float _2116;
    if (_1825)
    {
        _2112 = _2048;
        _2114 = _2049;
        _2116 = _2050;
    }
    else
    {
        uint _2118 = _1752 + 2u;
        uint _2122 = _1752 + 10u;
        float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _542) * 0.949999988079071044921875);
        float _2137 = _2136 * _2136;
        float _2138 = cbLight._m0[_2118].x + _619;
        float _2139 = cbLight._m0[_2118].y + _620;
        float _2140 = cbLight._m0[_2118].z + _621;
        float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
        float _2145 = _2144 * _2138;
        float _2146 = _2144 * _2139;
        float _2147 = _2144 * _2140;
        float _2148 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2118].xyz));
        float _4079 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2152 = dot(vec3(_539, _540, _541), vec3(_2145, _2146, _2147));
        float _4090 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2156 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2145, _2146, _2147));
        float _4101 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2160 = _2137 * _2137;
        float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
        float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0);
        float _2178 = 1.0 - _2137;
        float _2188 = (0.5 / (((_1917 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2178) + _2137) * _2151))) * _2151;
        float _4112 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2112 = (((((_2171 * _1939) + _690) * cbLight._m0[_2122].x) * _2190) * _2191) + _2048;
        _2114 = (((((_2171 * _1941) + _692) * cbLight._m0[_2122].y) * _2190) * _2191) + _2049;
        _2116 = (((((_2171 * _1942) + _693) * cbLight._m0[_2122].z) * _2190) * _2191) + _2050;
    }
    float _2226;
    float _2228;
    float _2230;
    if (_1843)
    {
        _2226 = _2112;
        _2228 = _2114;
        _2230 = _2116;
    }
    else
    {
        uint _2237 = _1752 + 3u;
        uint _2241 = _1752 + 11u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _542) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _619;
        float _2258 = cbLight._m0[_2237].y + _620;
        float _2259 = cbLight._m0[_2237].z + _621;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2237].xyz));
        float _4128 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2271 = dot(vec3(_539, _540, _541), vec3(_2264, _2265, _2266));
        float _4139 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4150 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0);
        float _2297 = 1.0 - _2256;
        float _2307 = (0.5 / (((_1917 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2297) + _2256) * _2270))) * _2270;
        float _4161 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2309 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2310 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2226 = (((((_2290 * _1939) + _690) * cbLight._m0[_2241].x) * _2309) * _2310) + _2112;
        _2228 = (((((_2290 * _1941) + _692) * cbLight._m0[_2241].y) * _2309) * _2310) + _2114;
        _2230 = (((((_2290 * _1942) + _693) * cbLight._m0[_2241].z) * _2309) * _2310) + _2116;
    }
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_1750.y == 0u)
    {
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2385;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2385;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2385;
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.x;
        uint _2412 = uint((float(_2400.y) * floor(float(uint(cbSceneParam._m0[85u].y * _628) / _2401))) + floor(float(uint(cbSceneParam._m0[85u].x * _627) / _2401)));
        float _2422 = (log2(_2388 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2423 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        uint _2426 = uint(isnan(14.0) ? _2423 : (isnan(_2423) ? 14.0 : min(_2423, 14.0)));
        uvec4 _2431 = texelFetch(g_lightClusterGridBuffer, int(((_2426 << 2u) + (_2412 << 6u)) >> 2u));
        uint _2432 = _2431.x;
        uint _2433 = _2400.z;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((((1u << ((_2433 >> 4u) & 15u)) + 4294967295u) & _2432) == 0u) || ((_2433 & 240u) == 0u))
        {
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
        }
        else
        {
            float _2533;
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            uint _2682 = 0u;
            uint _2691;
            bool _2692;
            for (;;)
            {
                _2691 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                _2692 = _2691 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2692)
                {
                    frontier_phi_63_pred = _2681;
                    frontier_phi_63_pred_1 = _2680;
                    frontier_phi_63_pred_2 = _2679;
                    frontier_phi_63_pred_3 = _2678;
                    frontier_phi_63_pred_4 = _2677;
                    frontier_phi_63_pred_5 = _2676;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2691;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2682 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        float _2866 = _2826.x - _2386;
                        float _2867 = _2826.y - _2387;
                        float _2868 = _2826.z - _2388;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2876 = dot(vec3(_646, _649, _652), vec3(_2873, _2874, _2875));
                        float _2881 = 1.0 - (_2869 * _2826.w);
                        float _4187 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2883 = sqrt(_2869) * _2845.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2876) + _2887;
                        float _2893 = _2883 * _2883;
                        float _2897 = ((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2882) / ((_2893 * 0.699999988079071044921875) + 1.0);
                        float _2901 = (-0.0) - _2386;
                        float _2902 = (-0.0) - _2387;
                        float _2903 = (-0.0) - _2388;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2918 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                        float _2919 = 1.0 - _721;
                        float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2918 * _2918))));
                        float _2927 = _2926 * _2926;
                        float _2928 = _2927 * _2927;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2939 = dot(vec3(_646, _649, _652), vec3(_2908, _2909, _2910));
                        float _4203 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2943 = dot(vec3(_646, _649, _652), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                        float _4214 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                        float _2951 = _2886 * _2927;
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2876) + _2952;
                        float _4225 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2957 = 1.0 - _2927;
                        float _2967 = (0.5 / (((_2956 * ((_2942 * _2957) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2927) * _2942))) * _2956;
                        float _4236 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2978 = (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_2950 * _2950) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125))) * _2882;
                        _2735 = (_2897 * _2845.x) + _2803;
                        _2736 = (_2897 * _2845.y) + _2804;
                        _2737 = (_2897 * _2845.z) + _2805;
                        _2732 = (_2978 * _2862.x) + _2800;
                        _2733 = (_2978 * _2862.y) + _2801;
                        _2734 = (_2978 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_63_pred = _2737;
                    frontier_phi_63_pred_1 = _2736;
                    frontier_phi_63_pred_2 = _2735;
                    frontier_phi_63_pred_3 = _2734;
                    frontier_phi_63_pred_4 = _2733;
                    frontier_phi_63_pred_5 = _2732;
                }
                _2543 = frontier_phi_63_pred;
                _2541 = frontier_phi_63_pred_1;
                _2539 = frontier_phi_63_pred_2;
                _2537 = frontier_phi_63_pred_3;
                _2535 = frontier_phi_63_pred_4;
                _2533 = frontier_phi_63_pred_5;
                uint _2683 = _2682 + 1u;
                if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2676 = _2533;
                    _2677 = _2535;
                    _2678 = _2537;
                    _2679 = _2539;
                    _2680 = _2541;
                    _2681 = _2543;
                    _2682 = _2683;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
        }
        uvec4 _2546 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2547 = _2546.z;
        uint _2549 = (_2547 >> 8u) & 15u;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((4294967295u << _2549) & _2432) == 0u)
        {
            _2644 = _2532;
            _2646 = _2534;
            _2648 = _2536;
            _2650 = _2538;
            _2652 = _2540;
            _2654 = _2542;
        }
        else
        {
            float _2669 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
            float _2670 = _2669 * _2386;
            float _2671 = _2669 * _2387;
            float _2672 = _2669 * _2388;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2549 < ((_2547 >> 12u) & 15u))
            {
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2783 = _2532;
                float _2784 = _2534;
                float _2785 = _2536;
                float _2786 = _2538;
                float _2787 = _2540;
                float _2788 = _2542;
                uint _2789 = _2549;
                uint _2798;
                bool _2799;
                for (;;)
                {
                    _2798 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                    _2799 = _2798 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2799)
                    {
                        frontier_phi_69_pred = _2788;
                        frontier_phi_69_pred_1 = _2787;
                        frontier_phi_69_pred_2 = _2786;
                        frontier_phi_69_pred_3 = _2785;
                        frontier_phi_69_pred_4 = _2784;
                        frontier_phi_69_pred_5 = _2783;
                    }
                    else
                    {
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        uint _3002 = _2798;
                        uint _3003;
                        vec4 _3028;
                        float _3029;
                        vec4 _3044;
                        vec3 _3056;
                        vec4 _3072;
                        vec4 _3088;
                        float _3135;
                        bool _3136;
                        for (;;)
                        {
                            uint _3013 = ((_2789 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3002));
                            _3003 = (_3002 + 4294967295u) & _3002;
                            uint _3015 = _3013 * 40u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.w;
                            uint _3031 = (_3013 * 40u) + 4u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_3013 * 40u) + 8u;
                            _3056 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x));
                            uint _3059 = (_3013 * 40u) + 16u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3075 = (_3013 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3091 = (_3013 * 40u) + 24u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3110 = (_3013 * 40u) + 28u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3135 = fma(_2388, _3123.z, fma(_2387, _3123.y, _3123.x * _2386)) + _3123.w;
                            _3136 = !((fma(_2388, _3104.z, fma(_2387, _3104.y, _3104.x * _2386)) + _3104.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3136)
                            {
                                float _3163 = _3028.x - _2386;
                                float _3164 = _3028.y - _2387;
                                float _3165 = _3028.z - _2388;
                                float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                                float _3169 = inversesqrt(_3166);
                                float _3170 = _3169 * _3163;
                                float _3171 = _3169 * _3164;
                                float _3172 = _3169 * _3165;
                                float _3176 = 1.0 - (_3166 / (_3029 * _3029));
                                float _4247 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3181 = sqrt(_3166) * _3044.w;
                                float _3183 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                                float _3184 = _3183 * _3183;
                                float _3187 = ((1.0 - _3184) * dot(vec3(_3170, _3171, _3172), vec3(_646, _649, _652))) + _3184;
                                float _3190 = _3181 * _3181;
                                float _3194 = (fma(_2388, _3072.z, fma(_2387, _3072.y, _3072.x * _2386)) + _3072.w) / _3135;
                                float _3195 = (fma(_2388, _3088.z, fma(_2387, _3088.y, _3088.x * _2386)) + _3088.w) / _3135;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4263 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3177) / ((_3190 * 0.699999988079071044921875) + 1.0));
                                float _3213 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                                float _3214 = 1.0 - _721;
                                float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                                float _3222 = _3221 * _3221;
                                float _3223 = _3222 * _3222;
                                float _3224 = _3170 - _2670;
                                float _3225 = _3171 - _2671;
                                float _3226 = _3172 - _2672;
                                float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                                float _3234 = dot(vec3(_646, _649, _652), vec3((-0.0) - _2670, (-0.0) - _2671, (-0.0) - _2672));
                                float _4274 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3238 = dot(vec3(_646, _649, _652), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                                float _4285 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                                float _3246 = _3183 * _3222;
                                float _3247 = _3246 * _3246;
                                float _3253 = ((1.0 - _3247) * dot(vec3(_646, _649, _652), vec3(_3170, _3171, _3172))) + _3247;
                                float _4296 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3255 = 1.0 - _3222;
                                float _3265 = (0.5 / (((_3254 * ((_3237 * _3255) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3222) * _3237))) * _3254;
                                float _4307 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3275 = (_3200 * _3177) * (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3245 * _3245) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3201 * _3044.z;
                                frontier_phi_75_pred_1 = _3201 * _3044.y;
                                frontier_phi_75_pred_2 = _3201 * _3044.x;
                                frontier_phi_75_pred_3 = _3275 * _3056.z;
                                frontier_phi_75_pred_4 = _3275 * _3056.y;
                                frontier_phi_75_pred_5 = _3275 * _3056.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3284 = frontier_phi_75_pred;
                            _3283 = frontier_phi_75_pred_1;
                            _3282 = frontier_phi_75_pred_2;
                            _3281 = frontier_phi_75_pred_3;
                            _3280 = frontier_phi_75_pred_4;
                            _3279 = frontier_phi_75_pred_5;
                            _2986 = _3282 + _2999;
                            _2987 = _3283 + _3000;
                            _2988 = _3284 + _3001;
                            _2983 = _3279 + _2996;
                            _2984 = _3280 + _2997;
                            _2985 = _3281 + _2998;
                            if (_3003 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _3003;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2988;
                        frontier_phi_69_pred_1 = _2987;
                        frontier_phi_69_pred_2 = _2986;
                        frontier_phi_69_pred_3 = _2985;
                        frontier_phi_69_pred_4 = _2984;
                        frontier_phi_69_pred_5 = _2983;
                    }
                    _2655 = frontier_phi_69_pred;
                    _2653 = frontier_phi_69_pred_1;
                    _2651 = frontier_phi_69_pred_2;
                    _2649 = frontier_phi_69_pred_3;
                    _2647 = frontier_phi_69_pred_4;
                    _2645 = frontier_phi_69_pred_5;
                    uint _2790 = _2789 + 1u;
                    if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2783 = _2645;
                        _2784 = _2647;
                        _2785 = _2649;
                        _2786 = _2651;
                        _2787 = _2653;
                        _2788 = _2655;
                        _2789 = _2790;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2655;
                frontier_phi_57_58_ladder_1 = _2653;
                frontier_phi_57_58_ladder_2 = _2651;
                frontier_phi_57_58_ladder_3 = _2649;
                frontier_phi_57_58_ladder_4 = _2647;
                frontier_phi_57_58_ladder_5 = _2645;
            }
            else
            {
                frontier_phi_57_58_ladder = _2542;
                frontier_phi_57_58_ladder_1 = _2540;
                frontier_phi_57_58_ladder_2 = _2538;
                frontier_phi_57_58_ladder_3 = _2536;
                frontier_phi_57_58_ladder_4 = _2534;
                frontier_phi_57_58_ladder_5 = _2532;
            }
            _2644 = frontier_phi_57_58_ladder_5;
            _2646 = frontier_phi_57_58_ladder_4;
            _2648 = frontier_phi_57_58_ladder_3;
            _2650 = frontier_phi_57_58_ladder_2;
            _2652 = frontier_phi_57_58_ladder_1;
            _2654 = frontier_phi_57_58_ladder;
        }
        float _2659 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2444 = (_2659 * _2650) + _1881;
        _2446 = (_2659 * _2652) + _1883;
        _2448 = (_2659 * _2654) + _1885;
        _2450 = ((_2644 * _690) * _2659) + _2226;
        _2452 = ((_2646 * _692) * _2659) + _2228;
        _2454 = ((_2648 * _693) * _2659) + _2230;
    }
    else
    {
        _2444 = _1881;
        _2446 = _1883;
        _2448 = _1885;
        _2450 = _2226;
        _2452 = _2228;
        _2454 = _2230;
    }
    float _4323 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4334 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4345 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    uint _2474 = _665 + 6u;
    float _2482 = _627 / cbSceneParam._m0[86u].x;
    float _2483 = _628 / cbSceneParam._m0[86u].y;
    vec4 _2497 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2482, _2483, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2499 = _2497.x;
    float _2500 = _2497.y;
    float _2501 = _2497.z;
    float _2502 = _2497.w;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _2557 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _2558 = _2557 / _562;
        float _2569 = _2558 * _612;
        float _2570 = _613 * _2558;
        float _2571 = (-0.0) - _2570;
        float _2572 = _2558 * _614;
        float _2574 = (cbSceneParam._m0[77u].w * _2571) / _2557;
        float _2575 = _2574 + cbSceneParam._m0[79u].w;
        float _2576 = cbSceneParam._m0[79u].w - _2570;
        float _2582 = sqrt(((_2569 * _2569) + (_2570 * _2570)) + (_2572 * _2572));
        float _2585 = (1.0 - (cbSceneParam._m0[77u].w / _2557)) * _2582;
        float _2590 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2592 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2745;
        if (abs((_2571 - _2574) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2745 = ((((_2575 > 0.0) ? exp2(_2590 * _2575) : (2.0 - exp2(_2592 * _2575))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2585;
        }
        else
        {
            float _2705 = 1.0 / cbSceneParam._m0[80u].x;
            float _2706 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : max(_2575, _2576));
            float _2707 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : min(_2575, _2576));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            _2745 = ((abs(_2582 / _2571) * cbSceneParam._m0[80u].y) * ((((_2716 - _2717) * 2.0) - ((exp2(_2590 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0)))) - exp2(_2590 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))))) * _2705)) - ((exp2(_2592 * _2716) - exp2(_2592 * _2717)) * _2705))) + (_2585 * cbSceneParam._m0[80u].z);
        }
        vec4 _2747 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2482, _2483, 1.0), 0.0);
        float _2756 = exp2((_2745 * (-1.44269502162933349609375)) * (1.0 - _2747.w));
        float _2757 = log2(_2756);
        float _2773 = log2(_2502);
        _2594 = (exp2(_2773 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].x)) * _2747.x) / cbSceneParam._m0[78u].x)) + _2499;
        _2596 = (exp2(_2773 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].y)) * _2747.y) / cbSceneParam._m0[78u].y)) + _2500;
        _2598 = (exp2(_2773 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].z)) * _2747.z) / cbSceneParam._m0[78u].z)) + _2501;
        _2600 = _2756 * _2502;
    }
    else
    {
        _2594 = _2499;
        _2596 = _2500;
        _2598 = _2501;
        _2600 = _2502;
    }
    float _2612 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2613 = _2612 == 3.0;
    float _2614 = log2(_2600);
    float _2621 = exp2(_2614 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2444 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _705))) + ((_2450 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2622 = exp2(_2614 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2446 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _705))) + ((_2452 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2623 = exp2(_2614 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2448 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _705))) + ((_2454 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1515)) * cbPerFrame._m0[3u].x));
    float _2632 = (_2612 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2632 * (_2613 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.y = _2632 * (_2613 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.z = _2632 * (_2613 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2598)));
    SV_Target.w = cbInstanceData._m0[_2474].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2474].w;
}


