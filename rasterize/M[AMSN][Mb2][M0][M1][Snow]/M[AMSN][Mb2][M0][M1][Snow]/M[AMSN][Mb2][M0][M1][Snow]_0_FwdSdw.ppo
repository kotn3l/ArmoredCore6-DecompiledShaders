#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1084;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _252.x;
    float _256 = _252.y;
    float _257 = _252.z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _302 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3702 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _312 = ((_289.z - _257) * _303) + _257;
    float _316 = ((((_289.x - _255) * _303) + _255) * 2.0) + (-1.0);
    float _318 = ((((_289.y - _256) * _303) + _256) * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3713 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    float _327 = fma(_324, _236, fma(_318, _229, _316 * _215));
    float _330 = fma(_324, _237, fma(_318, _230, _316 * _216));
    float _333 = fma(_324, _238, fma(_318, _231, _316 * _217));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    vec4 _365 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _369 = (cbMtdParam._m0[11u].z + dot(vec4(_337 * _327, _337 * _330, _337 * _333, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_365.x * cbMtdParam._m0[11u].w);
    float _3724 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _392 = _387.x * cbMtdParam._m0[9u].x;
    float _393 = _387.y * cbMtdParam._m0[9u].y;
    float _394 = _387.z * cbMtdParam._m0[9u].z;
    vec4 _413 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _427 = (((_413.x * cbMtdParam._m0[10u].x) - _392) * _303) + _392;
    float _428 = (((_413.y * cbMtdParam._m0[10u].y) - _393) * _303) + _393;
    float _429 = (((_413.z * cbMtdParam._m0[10u].z) - _394) * _303) + _394;
    vec4 _442 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _453 = ((_442.x - _427) * _370) + _427;
    float _454 = ((_442.y - _428) * _370) + _428;
    float _455 = ((_442.z - _429) * _370) + _429;
    vec4 _468 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _470 = _468.x;
    float _488 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _470) * _303) + _470;
    float _490 = _488 - (_488 * _370);
    vec4 _503 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _510 = (_503.x * 2.0) + (-1.0);
    float _511 = (_503.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3735 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _520 = ((_503.z - _312) * _370) + _312;
    float _527 = ((_510 - _316) * _370) + _316;
    float _528 = ((_511 - _318) * _370) + _318;
    float _529 = ((sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _324) * _370) + _324;
    float _532 = fma(_529, _236, fma(_528, _229, _527 * _215));
    float _535 = fma(_529, _237, fma(_528, _230, _527 * _216));
    float _538 = fma(_529, _238, fma(_528, _231, _527 * _217));
    float _542 = inversesqrt(dot(vec3(_532, _535, _538), vec3(_532, _535, _538)));
    float _543 = _542 * _532;
    float _544 = _542 * _535;
    float _545 = _542 * _538;
    float _3746 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _546 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3768 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3779 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3790 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _550 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _566 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _616 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _606);
    float _617 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _606);
    float _618 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _606);
    float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
    float _623 = _616 * _622;
    float _624 = _617 * _622;
    float _625 = _618 * _622;
    float _631 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _632 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _650 = fma(_545, cbSceneParam._m0[5u].z, fma(_544, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _543));
    float _653 = fma(_545, cbSceneParam._m0[6u].z, fma(_544, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _543));
    float _656 = fma(_545, cbSceneParam._m0[7u].z, fma(_544, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _543));
    uint _669 = uint(roundEven(NORMAL.w)) * 13u;
    uint _671 = (_669 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _677 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_671].x;
    float _678 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_671].y;
    float _679 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_671].z;
    float _3801 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _683 = 1.0 - _550;
    float _684 = _680 * _683;
    float _685 = _681 * _683;
    float _686 = _682 * _683;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _550;
    float _692 = (_681 + (-0.039999999105930328369140625)) * _550;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _550;
    float _694 = _691 + 0.039999999105930328369140625;
    float _696 = _692 + 0.039999999105930328369140625;
    float _697 = _693 + 0.039999999105930328369140625;
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _631, cbSceneParam._m0[86u].y * _632));
    float _709 = _706.x * TEXCOORD_9.w;
    float _710 = dot(vec3(_543, _544, _545), vec3(_623, _624, _625));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _543) - _623;
    float _718 = (_713 * _544) - _624;
    float _719 = (_713 * _545) - _625;
    float _723 = abs(dot(vec3(_623, _624, _625), vec3(_543, _544, _545)));
    float _3834 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _725 = sqrt(_546);
    float _738 = exp2((_725 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_725 * 3.0));
    float _744 = (1.0 - _738) * ((_725 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _745 = _738 * _725;
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1083;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_781, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773));
        float _812 = fma(_781, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773));
        float _816 = fma(_781, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773));
        float _841 = _773 + _543;
        float _842 = _777 + _544;
        float _843 = _781 + _545;
        float _853 = fma(_843, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841)) - _808;
        float _854 = fma(_843, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841)) - _812;
        float _855 = fma(_843, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841)) - _816;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _911 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_877.x + (-0.5));
        float _913 = _911 * (_877.y + (-0.5));
        float _914 = _911 * (_877.z + (-0.5));
        float _921 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_884.x + (-0.5));
        float _923 = _921 * (_884.y + (-0.5));
        float _924 = _921 * (_884.z + (-0.5));
        float _931 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_891.x + (-0.5));
        float _933 = _931 * (_891.y + (-0.5));
        float _934 = _931 * (_891.z + (-0.5));
        float _941 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_898.x + (-0.5));
        float _943 = _941 * (_898.y + (-0.5));
        float _944 = _941 * (_898.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _965 = (dot(vec3(_543, _544, _545), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _975 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3882 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_977 + 1.0))) + _982) * _945;
        float _992 = _913 * 0.5;
        float _993 = _923 * 0.5;
        float _994 = _933 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_543, _544, _545), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3915 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1019 + 1.0))) + _1024) * _946;
        float _1034 = _914 * 0.5;
        float _1035 = _924 * 0.5;
        float _1036 = _934 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_543, _544, _545), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3948 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1061 + 1.0))) + _1066) * _947;
        _1083 = _914;
        _1085 = _913;
        _1086 = _912;
        _1087 = _924;
        _1088 = _923;
        _1089 = _922;
        _1090 = _934;
        _1091 = _933;
        _1092 = _932;
        _1093 = _947;
        _1094 = _946;
        _1095 = _945;
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _1084;
        _1085 = _1084;
        _1086 = _1084;
        _1087 = _1084;
        _1088 = _1084;
        _1089 = _1084;
        _1090 = _1084;
        _1091 = _1084;
        _1092 = _1084;
        _1093 = _1084;
        _1094 = _1084;
        _1095 = _1084;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1124 = fma(_781, cbModelParam._m0[30u].z, fma(_777, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _773));
        float _1128 = fma(_781, cbModelParam._m0[31u].z, fma(_777, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _773));
        float _1132 = fma(_781, cbModelParam._m0[32u].z, fma(_777, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _773));
        float _1155 = _773 + _543;
        float _1156 = _777 + _544;
        float _1157 = _781 + _545;
        float _1167 = fma(_1157, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155)) - _1124;
        float _1168 = fma(_1157, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155)) - _1128;
        float _1169 = fma(_1157, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155)) - _1132;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1124 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1128 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[35u].z) + ((((((_1132 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1223 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1190.x + (-0.5));
        float _1225 = _1223 * (_1190.y + (-0.5));
        float _1226 = _1223 * (_1190.z + (-0.5));
        float _1233 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1197.x + (-0.5));
        float _1235 = _1233 * (_1197.y + (-0.5));
        float _1236 = _1233 * (_1197.z + (-0.5));
        float _1243 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1204.x + (-0.5));
        float _1245 = _1243 * (_1204.y + (-0.5));
        float _1246 = _1243 * (_1204.z + (-0.5));
        float _1253 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1211.x + (-0.5));
        float _1255 = _1253 * (_1211.y + (-0.5));
        float _1256 = _1253 * (_1211.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_543, _544, _545), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4011 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1287 + 1.0))) + _1292) * _1257;
        float _1302 = _1225 * 0.5;
        float _1303 = _1235 * 0.5;
        float _1304 = _1245 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_543, _544, _545), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4044 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1329 + 1.0))) + _1334) * _1258;
        float _1344 = _1226 * 0.5;
        float _1345 = _1236 * 0.5;
        float _1346 = _1246 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_543, _544, _545), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4077 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1371 + 1.0))) + _1376) * _1259;
        _1393 = _1226;
        _1394 = _1225;
        _1395 = _1224;
        _1396 = _1236;
        _1397 = _1235;
        _1398 = _1234;
        _1399 = _1246;
        _1400 = _1245;
        _1401 = _1244;
        _1402 = _1259;
        _1403 = _1258;
        _1404 = _1257;
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1084;
        _1394 = _1084;
        _1395 = _1084;
        _1396 = _1084;
        _1397 = _1084;
        _1398 = _1084;
        _1399 = _1084;
        _1400 = _1084;
        _1401 = _1084;
        _1402 = _1084;
        _1403 = _1084;
        _1404 = _1084;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1096)) + _1096;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1097)) + _1097;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1098)) + _1098;
    float _1440 = fma(_1419, cbSceneParam._m0[89u].z, fma(_1418, cbSceneParam._m0[89u].y, _1417 * cbSceneParam._m0[89u].x));
    float _1443 = fma(_1419, cbSceneParam._m0[90u].z, fma(_1418, cbSceneParam._m0[90u].y, _1417 * cbSceneParam._m0[90u].x));
    float _1446 = fma(_1419, cbSceneParam._m0[91u].z, fma(_1418, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1417));
    float _1461 = _717 * 0.5;
    float _1462 = _718 * 0.5;
    float _1463 = _719 * 0.5;
    float _1464 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1467 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1470 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1504;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1477 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1083, _1087, _1090, _1093));
        float _1481 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1485 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1492 = dot(vec4(cbModelParam._m0[39u]), vec4(_1461, _1462, _1463, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1515;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1506 = dot(vec4(cbModelParam._m0[40u]), vec4(_1461, _1462, _1463, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1519 = (_1515 * cbModelParam._m0[1u].x) + (_1504 * (1.0 - cbModelParam._m0[1u].x));
    float _1529 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _546);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1529 : min(cbModelParam._m0[25u].z, _1529));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1579 = fma(_781, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773)) + cbModelParam._m0[13u].w;
        float _1583 = fma(_781, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773)) + cbModelParam._m0[14u].w;
        float _1587 = fma(_781, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773)) + cbModelParam._m0[15u].w;
        float _1590 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1593 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1596 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1624;
        if (_1590 > 0.0)
        {
            _1624 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1624 = frontier_phi_16_14_ladder;
        }
        float _1799;
        if (_1593 > 0.0)
        {
            _1799 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1799 = frontier_phi_25_21_ladder;
        }
        float _2094;
        if (_1596 > 0.0)
        {
            _2094 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2094 = frontier_phi_37_32_ladder;
        }
        float _2096 = isnan(_1799) ? _1624 : (isnan(_1624) ? _1799 : min(_1624, _1799));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1590) + _1579;
        float _2102 = (_2097 * _1593) + _1583;
        float _2103 = (_2097 * _1596) + _1587;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2104;
        float _2108 = _2104 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 > _2108) || ((_2102 < _2106) || ((_2101 < _2106) || (_2101 > _2108))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2103, cbModelParam._m0[9u].z, fma(_2102, cbModelParam._m0[9u].y, _2101 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2103, cbModelParam._m0[10u].z, fma(_2102, cbModelParam._m0[10u].y, _2101 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2103, cbModelParam._m0[11u].z, fma(_2102, cbModelParam._m0[11u].y, _2101 * cbModelParam._m0[11u].x))), _1530);
            frontier_phi_15_37_ladder = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2248.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2248.z * cbModelParam._m0[1u].y;
        }
        _1612 = frontier_phi_15_37_ladder_1;
        _1614 = frontier_phi_15_37_ladder;
        _1616 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1530);
        _1612 = _1600.x * cbModelParam._m0[1u].y;
        _1614 = _1600.y * cbModelParam._m0[1u].y;
        _1616 = _1600.z * cbModelParam._m0[1u].y;
    }
    float _1620 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _546);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1620 : min(cbModelParam._m0[25u].w, _1620));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1678 = fma(_781, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773)) + cbModelParam._m0[21u].w;
        float _1682 = fma(_781, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773)) + cbModelParam._m0[22u].w;
        float _1686 = fma(_781, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773)) + cbModelParam._m0[23u].w;
        float _1689 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1692 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1695 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1804;
        if (_1689 > 0.0)
        {
            _1804 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1804 = frontier_phi_27_23_ladder;
        }
        float _2121;
        if (_1692 > 0.0)
        {
            _2121 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2121 = frontier_phi_39_34_ladder;
        }
        float _2459;
        if (_1695 > 0.0)
        {
            _2459 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2459 = frontier_phi_49_46_ladder;
        }
        float _2461 = isnan(_2121) ? _1804 : (isnan(_1804) ? _2121 : min(_1804, _2121));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1689) + _1678;
        float _2467 = (_2462 * _1692) + _1682;
        float _2468 = (_2462 * _1695) + _1686;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1621);
            frontier_phi_24_49_ladder = _2590.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2590.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2590.x * cbModelParam._m0[1u].z;
        }
        _1714 = frontier_phi_24_49_ladder_2;
        _1716 = frontier_phi_24_49_ladder_1;
        _1718 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1621);
        _1714 = _1698.x * cbModelParam._m0[1u].z;
        _1716 = _1698.y * cbModelParam._m0[1u].z;
        _1718 = _1698.z * cbModelParam._m0[1u].z;
    }
    float _1731 = (((_744 * _694) + _745) * _709) * ((cbModelParam._m0[1u].w * (_1714 - _1612)) + _1612);
    float _1733 = (((_744 * _696) + _745) * _709) * ((cbModelParam._m0[1u].w * (_1716 - _1614)) + _1614);
    float _1735 = (((_744 * _697) + _745) * _709) * ((cbModelParam._m0[1u].w * (_1718 - _1616)) + _1616);
    float _1738 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1731 * cbSceneParam._m0[91u].x));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1791 = _1778 / _1790;
    float _1792 = _1782 / _1790;
    float _1793 = _1786 / _1790;
    float _1940;
    float _1941;
    float _1942;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1820 = ((uint(_1793 > cbSceneParam._m0[59u].y) + uint(_1793 > cbSceneParam._m0[59u].x)) + uint(_1793 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1821 = _1820 + 43u;
        uint _1829 = _1820 + 44u;
        uint _1837 = _1820 + 45u;
        uint _1845 = _1820 + 46u;
        float _1856 = fma(_1790, cbSceneParam._m0[_1821].w, fma(_1786, cbSceneParam._m0[_1821].z, fma(_1782, cbSceneParam._m0[_1821].y, _1778 * cbSceneParam._m0[_1821].x)));
        float _1860 = fma(_1790, cbSceneParam._m0[_1829].w, fma(_1786, cbSceneParam._m0[_1829].z, fma(_1782, cbSceneParam._m0[_1829].y, _1778 * cbSceneParam._m0[_1829].x)));
        float _1868 = fma(_1790, cbSceneParam._m0[_1845].w, fma(_1786, cbSceneParam._m0[_1845].z, fma(_1782, cbSceneParam._m0[_1845].y, _1778 * cbSceneParam._m0[_1845].x)));
        float _1873 = cbSceneParam._m0[33u].z * _1868;
        float _1875 = cbSceneParam._m0[33u].w * _1868;
        float _1878 = fma(_1790, cbSceneParam._m0[_1837].w, fma(_1786, cbSceneParam._m0[_1837].z, fma(_1782, cbSceneParam._m0[_1837].y, _1778 * cbSceneParam._m0[_1837].x))) / _1868;
        float _1926 = (cbSceneParam._m0[33u].x - sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793))) * cbSceneParam._m0[33u].y;
        float _4203 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1933 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1873 + _1856) / _1868, (_1875 + _1860) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 + _1856) / _1868, (_1860 - _1873) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 - _1873) / _1868, (_1860 - _1875) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 - _1875) / _1868, (_1873 + _1860) / _1868), _1878), 0.0)).x), vec4(0.25)));
        _1940 = 1.0 - (_1933 * cbSceneParam._m0[34u].x);
        _1941 = 1.0 - (_1933 * cbSceneParam._m0[34u].y);
        _1942 = 1.0 - (_1933 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1940 = 1.0;
        _1941 = 1.0;
        _1942 = 1.0;
    }
    float _2006;
    float _2008;
    float _2010;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1994 = fma(_1790, cbSceneParam._m0[63u].w, fma(_1786, cbSceneParam._m0[63u].z, fma(_1782, cbSceneParam._m0[63u].y, _1778 * cbSceneParam._m0[63u].x)));
        float _1995 = fma(_1790, cbSceneParam._m0[60u].w, fma(_1786, cbSceneParam._m0[60u].z, fma(_1782, cbSceneParam._m0[60u].y, _1778 * cbSceneParam._m0[60u].x))) / _1994;
        float _1996 = fma(_1790, cbSceneParam._m0[61u].w, fma(_1786, cbSceneParam._m0[61u].z, fma(_1782, cbSceneParam._m0[61u].y, _1778 * cbSceneParam._m0[61u].x))) / _1994;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1995 >= cbSceneParam._m0[64u].x) && (_1996 >= cbSceneParam._m0[64u].y)) && (_1995 <= cbSceneParam._m0[64u].z)) && (_1996 <= cbSceneParam._m0[64u].w))
        {
            float _2134 = fma(_1790, cbSceneParam._m0[62u].w, fma(_1786, cbSceneParam._m0[62u].z, fma(_1782, cbSceneParam._m0[62u].y, _1778 * cbSceneParam._m0[62u].x))) / _1994;
            float _2138 = isnan(cbSceneParam._m0[41u].w) ? _2134 : (isnan(_2134) ? cbSceneParam._m0[41u].w : max(_2134, cbSceneParam._m0[41u].w));
            float _2181 = (cbSceneParam._m0[33u].x - sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793))) * cbSceneParam._m0[33u].y;
            float _4219 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
            float _2188 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1995, cbSceneParam._m0[33u].w + _1996), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1995, _1996 - cbSceneParam._m0[33u].z), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1995 - cbSceneParam._m0[33u].z, _1996 - cbSceneParam._m0[33u].w), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1995 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1996), _2138), 0.0)).x), vec4(0.25)));
            float _2192 = 1.0 - (_2188 * cbSceneParam._m0[34u].x);
            float _2193 = 1.0 - (_2188 * cbSceneParam._m0[34u].y);
            float _2194 = 1.0 - (_2188 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2193) ? _1941 : (isnan(_1941) ? _2193 : min(_1941, _2193));
            frontier_phi_36_35_ladder_1 = isnan(_2194) ? _1942 : (isnan(_1942) ? _2194 : min(_1942, _2194));
            frontier_phi_36_35_ladder_2 = isnan(_2192) ? _1940 : (isnan(_1940) ? _2192 : min(_1940, _2192));
        }
        else
        {
            frontier_phi_36_35_ladder = _1941;
            frontier_phi_36_35_ladder_1 = _1942;
            frontier_phi_36_35_ladder_2 = _1940;
        }
        _2006 = frontier_phi_36_35_ladder_2;
        _2008 = frontier_phi_36_35_ladder;
        _2010 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2006 = _1940;
        _2008 = _1941;
        _2010 = _1942;
    }
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_669 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _709 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2053 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2057 = _2017 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_543, _544, _545));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_543, _544, _545));
    float _4255 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4266 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2034].x * _2040) * _2078) + (((cbLight._m0[_2044].x * _2006) * _2053) * _2076);
    float _2086 = ((_2040 * cbLight._m0[_2034].y) * _2078) + (((cbLight._m0[_2044].y * _2008) * _2053) * _2076);
    float _2087 = ((_2040 * cbLight._m0[_2034].z) * _2078) + (((cbLight._m0[_2044].z * _2010) * _2053) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2195;
    float _2197;
    float _2199;
    if (_2093)
    {
        _2195 = _2085;
        _2197 = _2086;
        _2199 = _2087;
    }
    else
    {
        uint _2203 = _2017 + 6u;
        float _2219 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_543, _544, _545)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4277 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2222 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2195 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _2085;
        _2197 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _2086;
        _2199 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _2087;
    }
    bool _2202 = _2091.y == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2202)
    {
        _2257 = _2195;
        _2259 = _2197;
        _2261 = _2199;
    }
    else
    {
        uint _2430 = _2017 + 7u;
        float _2446 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_543, _544, _545)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4293 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2449 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2257 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2195;
        _2259 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2197;
        _2261 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2199;
    }
    uint _2264 = _2017 + 8u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _546) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2017].x + _623;
    float _2280 = cbLight._m0[_2017].y + _624;
    float _2281 = cbLight._m0[_2017].z + _625;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2017].xyz));
    float _4309 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _2293 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2294 = dot(vec3(_543, _544, _545), vec3(_2286, _2287, _2288));
    float _4331 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2286, _2287, _2288));
    float _4342 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2278 * _2278;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
    float _2315 = 0.959999978542327880859375 - _691;
    float _2317 = 0.959999978542327880859375 - _692;
    float _2318 = 0.959999978542327880859375 - _693;
    float _2325 = 1.0 - _2278;
    float _2336 = (0.5 / (((_2293 * ((_2292 * _2325) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2325) + _2278) * _2292))) * _2292;
    float _4353 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    uint _2352 = _2017 + 9u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _546) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2057].x + _623;
    float _2366 = cbLight._m0[_2057].y + _624;
    float _2367 = cbLight._m0[_2057].z + _625;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2057].xyz));
    float _4364 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2379 = dot(vec3(_543, _544, _545), vec3(_2372, _2373, _2374));
    float _4375 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2372, _2373, _2374));
    float _4386 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2364 * _2364;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
    float _2405 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2293 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2405) + _2364) * _2378))) * _2378;
    float _4397 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    float _2427 = (((((_2398 * _2315) + _694) * cbLight._m0[_2352].x) * _2417) * _2040) + ((((cbLight._m0[_2264].x * _2006) * ((_2314 * _2315) + _694)) * _2338) * _2053);
    float _2428 = (((((_2398 * _2317) + _696) * cbLight._m0[_2352].y) * _2417) * _2040) + ((((cbLight._m0[_2264].y * _2008) * ((_2314 * _2317) + _696)) * _2338) * _2053);
    float _2429 = (((((_2398 * _2318) + _697) * cbLight._m0[_2352].z) * _2417) * _2040) + ((((cbLight._m0[_2264].z * _2010) * ((_2314 * _2318) + _697)) * _2338) * _2053);
    float _2485;
    float _2487;
    float _2489;
    if (_2093)
    {
        _2485 = _2427;
        _2487 = _2428;
        _2489 = _2429;
    }
    else
    {
        uint _2491 = _2017 + 2u;
        uint _2495 = _2017 + 10u;
        float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2491].w)) * _546) * 0.949999988079071044921875);
        float _2510 = _2509 * _2509;
        float _2511 = cbLight._m0[_2491].x + _623;
        float _2512 = cbLight._m0[_2491].y + _624;
        float _2513 = cbLight._m0[_2491].z + _625;
        float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
        float _2518 = _2517 * _2511;
        float _2519 = _2517 * _2512;
        float _2520 = _2517 * _2513;
        float _2521 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2491].xyz));
        float _4408 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2525 = dot(vec3(_543, _544, _545), vec3(_2518, _2519, _2520));
        float _4419 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2529 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_2518, _2519, _2520));
        float _4430 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2533 = _2510 * _2510;
        float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
        float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2551 = 1.0 - _2510;
        float _2561 = (0.5 / (((_2293 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2551) + _2510) * _2524))) * _2524;
        float _4441 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2563 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
        float _2564 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2485 = (((((_2544 * _2315) + _694) * cbLight._m0[_2495].x) * _2563) * _2564) + _2427;
        _2487 = (((((_2544 * _2317) + _696) * cbLight._m0[_2495].y) * _2563) * _2564) + _2428;
        _2489 = (((((_2544 * _2318) + _697) * cbLight._m0[_2495].z) * _2563) * _2564) + _2429;
    }
    float _2595;
    float _2597;
    float _2599;
    if (_2202)
    {
        _2595 = _2485;
        _2597 = _2487;
        _2599 = _2489;
    }
    else
    {
        uint _2606 = _2017 + 3u;
        uint _2610 = _2017 + 11u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _546) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _623;
        float _2627 = cbLight._m0[_2606].y + _624;
        float _2628 = cbLight._m0[_2606].z + _625;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2606].xyz));
        float _4457 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2640 = dot(vec3(_543, _544, _545), vec3(_2633, _2634, _2635));
        float _4468 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4479 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
        float _2666 = 1.0 - _2625;
        float _2676 = (0.5 / (((_2293 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2666) + _2625) * _2639))) * _2639;
        float _4490 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2595 = (((((_2659 * _2315) + _694) * cbLight._m0[_2610].x) * _2678) * _2679) + _2485;
        _2597 = (((((_2659 * _2317) + _696) * cbLight._m0[_2610].y) * _2678) * _2679) + _2487;
        _2599 = (((((_2659 * _2318) + _697) * cbLight._m0[_2610].z) * _2678) * _2679) + _2489;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2015.y == 0u)
    {
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.x;
        uint _2712 = uint((float(_2700.y) * floor(float(uint(cbSceneParam._m0[85u].y * _632) / _2701))) + floor(float(uint(cbSceneParam._m0[85u].x * _631) / _2701)));
        float _2722 = (log2(_1793 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2723 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        uint _2726 = uint(isnan(14.0) ? _2723 : (isnan(_2723) ? 14.0 : min(_2723, 14.0)));
        uvec4 _2731 = texelFetch(g_lightClusterGridBuffer, int(((_2726 << 2u) + (_2712 << 6u)) >> 2u));
        uint _2732 = _2731.x;
        uint _2733 = _2700.z;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((((1u << ((_2733 >> 4u) & 15u)) + 4294967295u) & _2732) == 0u) || ((_2733 & 240u) == 0u))
        {
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
        }
        else
        {
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            uint _2961 = 0u;
            uint _2970;
            bool _2971;
            for (;;)
            {
                _2970 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                _2971 = _2970 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2971)
                {
                    frontier_phi_68_pred = _2960;
                    frontier_phi_68_pred_1 = _2959;
                    frontier_phi_68_pred_2 = _2958;
                    frontier_phi_68_pred_3 = _2956;
                    frontier_phi_68_pred_4 = _2955;
                    frontier_phi_68_pred_5 = _2957;
                }
                else
                {
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    uint _3085;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2970;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    for (;;)
                    {
                        uint _3089 = uint(findLSB(_3085)) + (_2961 << 5u);
                        uint _3086 = (_3085 + 4294967295u) & _3085;
                        uint _3091 = _3089 * 48u;
                        vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3111 = (_3089 * 48u) + 4u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 3u)).x));
                        uint _3130 = (_3089 * 48u) + 8u;
                        vec3 _3141 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x));
                        float _3145 = _3105.x - _1791;
                        float _3146 = _3105.y - _1792;
                        float _3147 = _3105.z - _1793;
                        float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                        float _3151 = inversesqrt(_3148);
                        float _3152 = _3151 * _3145;
                        float _3153 = _3151 * _3146;
                        float _3154 = _3151 * _3147;
                        float _3155 = dot(vec3(_650, _653, _656), vec3(_3152, _3153, _3154));
                        float _3160 = 1.0 - (_3148 * _3105.w);
                        float _4516 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3162 = sqrt(_3148) * _3124.w;
                        float _3165 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                        float _3166 = _3165 * _3165;
                        float _3169 = ((1.0 - _3166) * _3155) + _3166;
                        float _3172 = _3162 * _3162;
                        float _3176 = ((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3161) / ((_3172 * 0.699999988079071044921875) + 1.0);
                        float _3180 = (-0.0) - _1791;
                        float _3181 = (-0.0) - _1792;
                        float _3182 = (-0.0) - _1793;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3187 = _3186 * _3180;
                        float _3188 = _3186 * _3181;
                        float _3189 = _3186 * _3182;
                        float _3196 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                        float _3197 = 1.0 - _725;
                        float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                        float _3205 = _3204 * _3204;
                        float _3206 = _3205 * _3205;
                        float _3207 = _3187 + _3152;
                        float _3208 = _3188 + _3153;
                        float _3209 = _3189 + _3154;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3217 = dot(vec3(_650, _653, _656), vec3(_3187, _3188, _3189));
                        float _4532 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3221 = dot(vec3(_650, _653, _656), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                        float _4543 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                        float _3229 = _3165 * _3205;
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3155) + _3230;
                        float _4554 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3235 = 1.0 - _3205;
                        float _3245 = (0.5 / (((_3234 * ((_3220 * _3235) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3205) * _3220))) * _3234;
                        float _4565 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3256 = (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3228 * _3228) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125))) * _3161;
                        _3014 = (_3176 * _3124.x) + _3082;
                        _3015 = (_3176 * _3124.y) + _3083;
                        _3016 = (_3176 * _3124.z) + _3084;
                        _3011 = (_3256 * _3141.x) + _3079;
                        _3012 = (_3256 * _3141.y) + _3080;
                        _3013 = (_3256 * _3141.z) + _3081;
                        if (_3086 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3086;
                        }
                    }
                    frontier_phi_68_pred = _3016;
                    frontier_phi_68_pred_1 = _3015;
                    frontier_phi_68_pred_2 = _3014;
                    frontier_phi_68_pred_3 = _3012;
                    frontier_phi_68_pred_4 = _3011;
                    frontier_phi_68_pred_5 = _3013;
                }
                _2822 = frontier_phi_68_pred;
                _2820 = frontier_phi_68_pred_1;
                _2818 = frontier_phi_68_pred_2;
                _2814 = frontier_phi_68_pred_3;
                _2812 = frontier_phi_68_pred_4;
                _2816 = frontier_phi_68_pred_5;
                uint _2962 = _2961 + 1u;
                if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2955 = _2812;
                    _2956 = _2814;
                    _2957 = _2816;
                    _2958 = _2818;
                    _2959 = _2820;
                    _2960 = _2822;
                    _2961 = _2962;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
        }
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.z;
        uint _2828 = (_2826 >> 8u) & 15u;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        if (((4294967295u << _2828) & _2732) == 0u)
        {
            _2923 = _2811;
            _2925 = _2813;
            _2927 = _2815;
            _2929 = _2817;
            _2931 = _2819;
            _2933 = _2821;
        }
        else
        {
            float _2948 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
            float _2949 = _2948 * _1791;
            float _2950 = _2948 * _1792;
            float _2951 = _2948 * _1793;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2828 < ((_2826 >> 12u) & 15u))
            {
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _3062 = _2811;
                float _3063 = _2813;
                float _3064 = _2815;
                float _3065 = _2817;
                float _3066 = _2819;
                float _3067 = _2821;
                uint _3068 = _2828;
                uint _3077;
                bool _3078;
                for (;;)
                {
                    _3077 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                    _3078 = _3077 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3078)
                    {
                        frontier_phi_74_pred = _3064;
                        frontier_phi_74_pred_1 = _3063;
                        frontier_phi_74_pred_2 = _3062;
                        frontier_phi_74_pred_3 = _3067;
                        frontier_phi_74_pred_4 = _3066;
                        frontier_phi_74_pred_5 = _3065;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        float _3277 = _3065;
                        float _3278 = _3066;
                        float _3279 = _3067;
                        uint _3280 = _3077;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3350;
                        vec4 _3366;
                        float _3413;
                        bool _3414;
                        for (;;)
                        {
                            uint _3291 = ((_3068 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3337 = (_3291 * 40u) + 16u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3353 = (_3291 * 40u) + 20u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3369 = (_3291 * 40u) + 24u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3388 = (_3291 * 40u) + 28u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3413 = fma(_1793, _3401.z, fma(_1792, _3401.y, _3401.x * _1791)) + _3401.w;
                            _3414 = !((fma(_1793, _3382.z, fma(_1792, _3382.y, _3382.x * _1791)) + _3382.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3414)
                            {
                                float _3441 = _3306.x - _1791;
                                float _3442 = _3306.y - _1792;
                                float _3443 = _3306.z - _1793;
                                float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                                float _3447 = inversesqrt(_3444);
                                float _3448 = _3447 * _3441;
                                float _3449 = _3447 * _3442;
                                float _3450 = _3447 * _3443;
                                float _3454 = 1.0 - (_3444 / (_3307 * _3307));
                                float _4576 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3459 = sqrt(_3444) * _3322.w;
                                float _3461 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                                float _3462 = _3461 * _3461;
                                float _3465 = ((1.0 - _3462) * dot(vec3(_3448, _3449, _3450), vec3(_650, _653, _656))) + _3462;
                                float _3468 = _3459 * _3459;
                                float _3472 = (fma(_1793, _3350.z, fma(_1792, _3350.y, _3350.x * _1791)) + _3350.w) / _3413;
                                float _3473 = (fma(_1793, _3366.z, fma(_1792, _3366.y, _3366.x * _1791)) + _3366.w) / _3413;
                                float _3477 = 1.0 - dot(vec2(_3472, _3473), vec2(_3472, _3473));
                                float _4592 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3479 = _3478 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3455) / ((_3468 * 0.699999988079071044921875) + 1.0));
                                float _3491 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                                float _3492 = 1.0 - _725;
                                float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                                float _3500 = _3499 * _3499;
                                float _3501 = _3500 * _3500;
                                float _3502 = _3448 - _2949;
                                float _3503 = _3449 - _2950;
                                float _3504 = _3450 - _2951;
                                float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                                float _3512 = dot(vec3(_650, _653, _656), vec3((-0.0) - _2949, (-0.0) - _2950, (-0.0) - _2951));
                                float _4603 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3516 = dot(vec3(_650, _653, _656), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                                float _4614 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                                float _3524 = _3461 * _3500;
                                float _3525 = _3524 * _3524;
                                float _3531 = ((1.0 - _3525) * dot(vec3(_650, _653, _656), vec3(_3448, _3449, _3450))) + _3525;
                                float _4625 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3533 = 1.0 - _3500;
                                float _3543 = (0.5 / (((_3532 * ((_3515 * _3533) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3500) * _3515))) * _3532;
                                float _4636 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3553 = (_3478 * _3455) * (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3523 * _3523) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3553 * _3334.z;
                                frontier_phi_80_pred_1 = _3553 * _3334.y;
                                frontier_phi_80_pred_2 = _3553 * _3334.x;
                                frontier_phi_80_pred_3 = _3479 * _3322.z;
                                frontier_phi_80_pred_4 = _3479 * _3322.y;
                                frontier_phi_80_pred_5 = _3479 * _3322.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3559 = frontier_phi_80_pred;
                            _3558 = frontier_phi_80_pred_1;
                            _3557 = frontier_phi_80_pred_2;
                            _3562 = frontier_phi_80_pred_3;
                            _3561 = frontier_phi_80_pred_4;
                            _3560 = frontier_phi_80_pred_5;
                            _3264 = _3560 + _3277;
                            _3265 = _3561 + _3278;
                            _3266 = _3562 + _3279;
                            _3261 = _3557 + _3274;
                            _3262 = _3558 + _3275;
                            _3263 = _3559 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3263;
                        frontier_phi_74_pred_1 = _3262;
                        frontier_phi_74_pred_2 = _3261;
                        frontier_phi_74_pred_3 = _3266;
                        frontier_phi_74_pred_4 = _3265;
                        frontier_phi_74_pred_5 = _3264;
                    }
                    _2928 = frontier_phi_74_pred;
                    _2926 = frontier_phi_74_pred_1;
                    _2924 = frontier_phi_74_pred_2;
                    _2934 = frontier_phi_74_pred_3;
                    _2932 = frontier_phi_74_pred_4;
                    _2930 = frontier_phi_74_pred_5;
                    uint _3069 = _3068 + 1u;
                    if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3062 = _2924;
                        _3063 = _2926;
                        _3064 = _2928;
                        _3065 = _2930;
                        _3066 = _2932;
                        _3067 = _2934;
                        _3068 = _3069;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2932;
                frontier_phi_62_63_ladder_1 = _2930;
                frontier_phi_62_63_ladder_2 = _2928;
                frontier_phi_62_63_ladder_3 = _2934;
                frontier_phi_62_63_ladder_4 = _2926;
                frontier_phi_62_63_ladder_5 = _2924;
            }
            else
            {
                frontier_phi_62_63_ladder = _2819;
                frontier_phi_62_63_ladder_1 = _2817;
                frontier_phi_62_63_ladder_2 = _2815;
                frontier_phi_62_63_ladder_3 = _2821;
                frontier_phi_62_63_ladder_4 = _2813;
                frontier_phi_62_63_ladder_5 = _2811;
            }
            _2923 = frontier_phi_62_63_ladder_5;
            _2925 = frontier_phi_62_63_ladder_4;
            _2927 = frontier_phi_62_63_ladder_2;
            _2929 = frontier_phi_62_63_ladder_1;
            _2931 = frontier_phi_62_63_ladder;
            _2933 = frontier_phi_62_63_ladder_3;
        }
        float _2938 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2744 = (_2938 * _2929) + _2257;
        _2746 = (_2938 * _2931) + _2259;
        _2748 = (_2938 * _2933) + _2261;
        _2750 = ((_2923 * _694) * _2938) + _2595;
        _2752 = ((_2925 * _696) * _2938) + _2597;
        _2754 = ((_2927 * _697) * _2938) + _2599;
    }
    else
    {
        _2744 = _2257;
        _2746 = _2259;
        _2748 = _2261;
        _2750 = _2595;
        _2752 = _2597;
        _2754 = _2599;
    }
    float _4652 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4663 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4674 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    uint _2774 = _669 + 6u;
    float _2782 = _631 / cbSceneParam._m0[86u].x;
    float _2783 = _632 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _566 : (isnan(_566) ? cbSceneParam._m0[77u].w : min(_566, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_566 > cbSceneParam._m0[78u].w)
    {
        float _2836 = isnan(_566) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _566 : min(cbSceneParam._m0[80u].w, _566));
        float _2837 = _2836 / _566;
        float _2848 = _2837 * _616;
        float _2849 = _617 * _2837;
        float _2850 = (-0.0) - _2849;
        float _2851 = _2837 * _618;
        float _2853 = (cbSceneParam._m0[77u].w * _2850) / _2836;
        float _2854 = _2853 + cbSceneParam._m0[79u].w;
        float _2855 = cbSceneParam._m0[79u].w - _2849;
        float _2861 = sqrt(((_2848 * _2848) + (_2849 * _2849)) + (_2851 * _2851));
        float _2864 = (1.0 - (cbSceneParam._m0[77u].w / _2836)) * _2861;
        float _2869 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2871 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3024;
        if (abs((_2850 - _2853) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3024 = ((((_2854 > 0.0) ? exp2(_2869 * _2854) : (2.0 - exp2(_2871 * _2854))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2864;
        }
        else
        {
            float _2984 = 1.0 / cbSceneParam._m0[80u].x;
            float _2985 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : max(_2854, _2855));
            float _2986 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : min(_2854, _2855));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            _3024 = ((abs(_2861 / _2850) * cbSceneParam._m0[80u].y) * ((((_2995 - _2996) * 2.0) - ((exp2(_2869 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0)))) - exp2(_2869 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))))) * _2984)) - ((exp2(_2871 * _2995) - exp2(_2871 * _2996)) * _2984))) + (_2864 * cbSceneParam._m0[80u].z);
        }
        vec4 _3026 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3035 = exp2((_3024 * (-1.44269502162933349609375)) * (1.0 - _3026.w));
        float _3036 = log2(_3035);
        float _3052 = log2(_2802);
        _2873 = (exp2(_3052 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].x)) * _3026.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2875 = (exp2(_3052 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].y)) * _3026.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2877 = (exp2(_3052 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].z)) * _3026.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2879 = _3035 * _2802;
    }
    else
    {
        _2873 = _2799;
        _2875 = _2800;
        _2877 = _2801;
        _2879 = _2802;
    }
    float _2891 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2892 = _2891 == 3.0;
    float _2893 = log2(_2879);
    float _2900 = exp2(_2893 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2744 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _709))) + ((_2750 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2901 = exp2(_2893 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2746 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _709))) + ((_2752 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2902 = exp2(_2893 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2748 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _709))) + ((_2754 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2911 = (_2891 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2911 * (_2892 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.y = _2911 * (_2892 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.z = _2911 * (_2892 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2877)));
    SV_Target.w = cbInstanceData._m0[_2774].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2774].w;
}


