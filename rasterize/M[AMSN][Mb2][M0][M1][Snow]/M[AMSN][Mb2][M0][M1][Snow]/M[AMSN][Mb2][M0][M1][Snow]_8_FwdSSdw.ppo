#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _912;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _243 = _240.x;
    float _244 = _240.y;
    float _245 = _240.z;
    vec4 _277 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _290 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3251 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _300 = ((_277.z - _245) * _291) + _245;
    float _304 = ((((_277.x - _243) * _291) + _243) * 2.0) + (-1.0);
    float _306 = ((((_277.y - _244) * _291) + _244) * 2.0) + (-1.0);
    float _307 = dot(vec2(_304, _306), vec2(_304, _306));
    float _3262 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _312 = sqrt(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))));
    vec4 _330 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _335 = _330.x * cbMtdParam._m0[9u].x;
    float _336 = _330.y * cbMtdParam._m0[9u].y;
    float _337 = _330.z * cbMtdParam._m0[9u].z;
    vec4 _356 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _370 = (((_356.x * cbMtdParam._m0[10u].x) - _335) * _291) + _335;
    float _371 = (((_356.y * cbMtdParam._m0[10u].y) - _336) * _291) + _336;
    float _372 = (((_356.z * cbMtdParam._m0[10u].z) - _337) * _291) + _337;
    float _375 = fma(_312, _224, fma(_306, _216 * TANGENT.x, (_202 * _194) * _304));
    float _378 = fma(_312, _225, fma(_306, _216 * TANGENT.y, (_202 * _195) * _304));
    float _381 = fma(_312, _226, fma(_306, _216 * TANGENT.z, (_202 * _196) * _304));
    float _385 = inversesqrt(dot(vec3(_375, _378, _381), vec3(_375, _378, _381)));
    float _386 = _385 * _375;
    float _387 = _385 * _378;
    float _388 = _385 * _381;
    float _3273 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _389 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3295 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3306 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _459 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _449);
    float _460 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _449);
    float _461 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _449);
    float _465 = inversesqrt(dot(vec3(_459, _460, _461), vec3(_459, _460, _461)));
    float _466 = _459 * _465;
    float _467 = _460 * _465;
    float _468 = _461 * _465;
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _496 = fma(_388, cbSceneParam._m0[5u].z, fma(_387, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _386));
    float _499 = fma(_388, cbSceneParam._m0[6u].z, fma(_387, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _386));
    float _502 = fma(_388, cbSceneParam._m0[7u].z, fma(_387, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _386));
    uint _515 = uint(roundEven(NORMAL.w)) * 13u;
    uint _517 = (_515 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _523 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_517].x;
    float _524 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_517].y;
    float _525 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_517].z;
    float _3317 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    vec4 _537 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _540 = _537.x * TEXCOORD_9.w;
    float _541 = dot(vec3(_386, _387, _388), vec3(_466, _467, _468));
    float _544 = _541 * 2.0;
    float _548 = (_544 * _386) - _466;
    float _549 = (_544 * _387) - _467;
    float _550 = (_544 * _388) - _468;
    float _554 = abs(dot(vec3(_466, _467, _468), vec3(_386, _387, _388)));
    float _3350 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _556 = sqrt(_389);
    float _569 = exp2((_556 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_556 * 3.0));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _911;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _636 = fma(_609, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601));
        float _640 = fma(_609, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601));
        float _644 = fma(_609, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601));
        float _669 = _601 + _386;
        float _670 = _605 + _387;
        float _671 = _609 + _388;
        float _681 = fma(_671, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669)) - _636;
        float _682 = fma(_671, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669)) - _640;
        float _683 = fma(_671, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669)) - _644;
        float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
        float _700 = ((_687 * _681) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_636 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_687 * _682) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_640 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_687 * _683) / cbModelParam._m0[34u].z) + ((((((_644 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        float _739 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_705.x + (-0.5));
        float _741 = _739 * (_705.y + (-0.5));
        float _742 = _739 * (_705.z + (-0.5));
        float _749 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_712.x + (-0.5));
        float _751 = _749 * (_712.y + (-0.5));
        float _752 = _749 * (_712.z + (-0.5));
        float _759 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_719.x + (-0.5));
        float _761 = _759 * (_719.y + (-0.5));
        float _762 = _759 * (_719.z + (-0.5));
        float _769 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_726.x + (-0.5));
        float _771 = _769 * (_726.y + (-0.5));
        float _772 = _769 * (_726.z + (-0.5));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = _740 * 0.5;
        float _777 = _750 * 0.5;
        float _778 = _760 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _793 = (dot(vec3(_386, _387, _388), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _803 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3398 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_805 + 1.0))) + _810) * _773;
        float _820 = _741 * 0.5;
        float _821 = _751 * 0.5;
        float _822 = _761 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_386, _387, _388), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3431 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_847 + 1.0))) + _852) * _774;
        float _862 = _742 * 0.5;
        float _863 = _752 * 0.5;
        float _864 = _762 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_386, _387, _388), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3464 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_889 + 1.0))) + _894) * _775;
        _911 = _742;
        _913 = _741;
        _914 = _740;
        _915 = _752;
        _916 = _751;
        _917 = _750;
        _918 = _762;
        _919 = _761;
        _920 = _760;
        _921 = _775;
        _922 = _774;
        _923 = _773;
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
    }
    else
    {
        _911 = _912;
        _913 = _912;
        _914 = _912;
        _915 = _912;
        _916 = _912;
        _917 = _912;
        _918 = _912;
        _919 = _912;
        _920 = _912;
        _921 = _912;
        _922 = _912;
        _923 = _912;
        _924 = 0.0;
        _925 = 0.0;
        _926 = 0.0;
    }
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _952 = fma(_609, cbModelParam._m0[30u].z, fma(_605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _601));
        float _956 = fma(_609, cbModelParam._m0[31u].z, fma(_605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _601));
        float _960 = fma(_609, cbModelParam._m0[32u].z, fma(_605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _601));
        float _983 = _601 + _386;
        float _984 = _605 + _387;
        float _985 = _609 + _388;
        float _995 = fma(_985, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983)) - _952;
        float _996 = fma(_985, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983)) - _956;
        float _997 = fma(_985, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983)) - _960;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_952 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_956 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[35u].z) + ((((((_960 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1051 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1018.x + (-0.5));
        float _1053 = _1051 * (_1018.y + (-0.5));
        float _1054 = _1051 * (_1018.z + (-0.5));
        float _1061 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1025.x + (-0.5));
        float _1063 = _1061 * (_1025.y + (-0.5));
        float _1064 = _1061 * (_1025.z + (-0.5));
        float _1071 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1032.x + (-0.5));
        float _1073 = _1071 * (_1032.y + (-0.5));
        float _1074 = _1071 * (_1032.z + (-0.5));
        float _1081 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1039.x + (-0.5));
        float _1083 = _1081 * (_1039.y + (-0.5));
        float _1084 = _1081 * (_1039.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_386, _387, _388), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3527 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1115 + 1.0))) + _1120) * _1085;
        float _1130 = _1053 * 0.5;
        float _1131 = _1063 * 0.5;
        float _1132 = _1073 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_386, _387, _388), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3560 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1157 + 1.0))) + _1162) * _1086;
        float _1172 = _1054 * 0.5;
        float _1173 = _1064 * 0.5;
        float _1174 = _1074 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_386, _387, _388), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3593 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1199 + 1.0))) + _1204) * _1087;
        _1221 = _1054;
        _1222 = _1053;
        _1223 = _1052;
        _1224 = _1064;
        _1225 = _1063;
        _1226 = _1062;
        _1227 = _1074;
        _1228 = _1073;
        _1229 = _1072;
        _1230 = _1087;
        _1231 = _1086;
        _1232 = _1085;
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _912;
        _1222 = _912;
        _1223 = _912;
        _1224 = _912;
        _1225 = _912;
        _1226 = _912;
        _1227 = _912;
        _1228 = _912;
        _1229 = _912;
        _1230 = _912;
        _1231 = _912;
        _1232 = _912;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1268 = fma(_1247, cbSceneParam._m0[89u].z, fma(_1246, cbSceneParam._m0[89u].y, _1245 * cbSceneParam._m0[89u].x));
    float _1271 = fma(_1247, cbSceneParam._m0[90u].z, fma(_1246, cbSceneParam._m0[90u].y, _1245 * cbSceneParam._m0[90u].x));
    float _1274 = fma(_1247, cbSceneParam._m0[91u].z, fma(_1246, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1245));
    float _1289 = _548 * 0.5;
    float _1290 = _549 * 0.5;
    float _1291 = _550 * 0.5;
    float _1292 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1295 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1298 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1332;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1305 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_911, _915, _918, _921));
        float _1309 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_913, _916, _919, _922));
        float _1313 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_914, _917, _920, _923));
        float _1320 = dot(vec4(cbModelParam._m0[39u]), vec4(_1289, _1290, _1291, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1343;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1334 = dot(vec4(cbModelParam._m0[40u]), vec4(_1289, _1290, _1291, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1334) ? 0.0 : (isnan(0.0) ? _1334 : max(0.0, _1334))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1347 = (_1343 * cbModelParam._m0[1u].x) + (_1332 * (1.0 - cbModelParam._m0[1u].x));
    float _1357 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _389);
    float _1358 = isnan(_1357) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1357 : min(cbModelParam._m0[25u].z, _1357));
    float _1440;
    float _1442;
    float _1444;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1407 = fma(_609, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601)) + cbModelParam._m0[13u].w;
        float _1411 = fma(_609, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601)) + cbModelParam._m0[14u].w;
        float _1415 = fma(_609, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601)) + cbModelParam._m0[15u].w;
        float _1418 = fma(_550, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548));
        float _1421 = fma(_550, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548));
        float _1424 = fma(_550, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548));
        float _1452;
        if (_1418 > 0.0)
        {
            _1452 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1452 = frontier_phi_16_14_ladder;
        }
        float _1678;
        if (_1421 > 0.0)
        {
            _1678 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1678 = frontier_phi_25_21_ladder;
        }
        float _1924;
        if (_1424 > 0.0)
        {
            _1924 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1924 = frontier_phi_37_32_ladder;
        }
        float _1926 = isnan(_1678) ? _1452 : (isnan(_1452) ? _1678 : min(_1452, _1678));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1418) + _1407;
        float _1932 = (_1927 * _1421) + _1411;
        float _1933 = (_1927 * _1424) + _1415;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1358);
            frontier_phi_15_37_ladder = _2057.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2057.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2057.x * cbModelParam._m0[1u].y;
        }
        _1440 = frontier_phi_15_37_ladder_2;
        _1442 = frontier_phi_15_37_ladder_1;
        _1444 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_548, _549, _550), _1358);
        _1440 = _1428.x * cbModelParam._m0[1u].y;
        _1442 = _1428.y * cbModelParam._m0[1u].y;
        _1444 = _1428.z * cbModelParam._m0[1u].y;
    }
    float _1448 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _389);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1448 : min(cbModelParam._m0[25u].w, _1448));
    float _1542;
    float _1544;
    float _1546;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1506 = fma(_609, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601)) + cbModelParam._m0[21u].w;
        float _1510 = fma(_609, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601)) + cbModelParam._m0[22u].w;
        float _1514 = fma(_609, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601)) + cbModelParam._m0[23u].w;
        float _1517 = fma(_550, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548));
        float _1520 = fma(_550, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548));
        float _1523 = fma(_550, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548));
        float _1683;
        if (_1517 > 0.0)
        {
            _1683 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1683 = frontier_phi_27_23_ladder;
        }
        float _1951;
        if (_1520 > 0.0)
        {
            _1951 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1951 = frontier_phi_39_34_ladder;
        }
        float _2156;
        if (_1523 > 0.0)
        {
            _2156 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2156 = frontier_phi_48_45_ladder;
        }
        float _2158 = isnan(_1951) ? _1683 : (isnan(_1683) ? _1951 : min(_1683, _1951));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1517) + _1506;
        float _2164 = (_2159 * _1520) + _1510;
        float _2165 = (_2159 * _1523) + _1514;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2166;
        float _2169 = _2166 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2165 > _2169) || ((_2165 < _2167) || ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 < _2167) || (_2163 > _2169))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2165, cbModelParam._m0[17u].z, fma(_2164, cbModelParam._m0[17u].y, _2163 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2165, cbModelParam._m0[18u].z, fma(_2164, cbModelParam._m0[18u].y, _2163 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2165, cbModelParam._m0[19u].z, fma(_2164, cbModelParam._m0[19u].y, _2163 * cbModelParam._m0[19u].x))), _1449);
            frontier_phi_24_48_ladder = _2363.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2363.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2363.x * cbModelParam._m0[1u].z;
        }
        _1542 = frontier_phi_24_48_ladder_2;
        _1544 = frontier_phi_24_48_ladder_1;
        _1546 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_548, _549, _550), _1449);
        _1542 = _1526.x * cbModelParam._m0[1u].z;
        _1544 = _1526.y * cbModelParam._m0[1u].z;
        _1546 = _1526.z * cbModelParam._m0[1u].z;
    }
    float _1558 = ((((1.0 - _569) * ((_556 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_569 * _556)) * _540;
    float _1559 = _1558 * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1560 = _1558 * ((cbModelParam._m0[1u].w * (_1544 - _1442)) + _1442);
    float _1561 = _1558 * ((cbModelParam._m0[1u].w * (_1546 - _1444)) + _1444);
    float _1564 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1559 * cbSceneParam._m0[91u].x));
    vec4 _1578 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_474, _475));
    float _1580 = _1578.w;
    float _1592 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1580);
    float _1593 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1580);
    float _1594 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1580);
    uvec4 _1598 = floatBitsToUint(cbInstanceData._m0[_515 + 5u]);
    uint _1600 = _1598.x * 14u;
    uint _1601 = _1600 + 13u;
    float _1608 = _540 + (-1.0);
    float _1613 = (cbLight._m0[_1601].x * _1608) + 1.0;
    float _1614 = (cbLight._m0[_1601].y * _1608) + 1.0;
    float _1615 = (cbLight._m0[_1601].z * _1608) + 1.0;
    float _1616 = (cbLight._m0[_1601].w * _1608) + 1.0;
    uint _1617 = _1600 + 5u;
    float _1623 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1627 = _1600 + 4u;
    float _1636 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1640 = _1600 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_386, _387, _388));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_386, _387, _388));
    float _3729 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3740 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1617].x * _1623) * _1661) + (((cbLight._m0[_1627].x * _1592) * _1636) * _1659);
    float _1669 = ((_1623 * cbLight._m0[_1617].y) * _1661) + (((cbLight._m0[_1627].y * _1593) * _1636) * _1659);
    float _1670 = ((_1623 * cbLight._m0[_1617].z) * _1661) + (((cbLight._m0[_1627].z * _1594) * _1636) * _1659);
    uvec4 _1675 = floatBitsToUint(cbLight._m0[_1600 + 12u]);
    bool _1677 = _1675.x == 0u;
    float _1688;
    float _1690;
    float _1692;
    if (_1677)
    {
        _1688 = _1668;
        _1690 = _1669;
        _1692 = _1670;
    }
    else
    {
        uint _1696 = _1600 + 6u;
        float _1712 = (dot(vec3(cbLight._m0[_1600 + 2u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1713 = _1712 * _1712;
        float _3751 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1715 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1688 = (((cbLight._m0[_1696].x * 0.3183098733425140380859375) * _1714) * _1715) + _1668;
        _1690 = (((cbLight._m0[_1696].y * 0.3183098733425140380859375) * _1714) * _1715) + _1669;
        _1692 = (((cbLight._m0[_1696].z * 0.3183098733425140380859375) * _1714) * _1715) + _1670;
    }
    bool _1695 = _1675.y == 0u;
    float _1733;
    float _1735;
    float _1737;
    if (_1695)
    {
        _1733 = _1688;
        _1735 = _1690;
        _1737 = _1692;
    }
    else
    {
        uint _1895 = _1600 + 7u;
        float _1911 = (dot(vec3(cbLight._m0[_1600 + 3u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3767 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1914 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1733 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1688;
        _1735 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1690;
        _1737 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1692;
    }
    uint _1740 = _1600 + 8u;
    float _1753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _389) * 0.949999988079071044921875);
    float _1754 = _1753 * _1753;
    float _1755 = cbLight._m0[_1600].x + _466;
    float _1756 = cbLight._m0[_1600].y + _467;
    float _1757 = cbLight._m0[_1600].z + _468;
    float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
    float _1762 = _1761 * _1755;
    float _1763 = _1761 * _1756;
    float _1764 = _1761 * _1757;
    float _1765 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1600].xyz));
    float _3783 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _1769 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1770 = dot(vec3(_386, _387, _388), vec3(_1762, _1763, _1764));
    float _3805 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1762, _1763, _1764));
    float _3816 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1754 * _1754;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1793 = (exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1794 = 1.0 - _1754;
    float _1805 = (0.5 / (((_1769 * ((_1768 * _1794) + _1754)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1794) + _1754) * _1768))) * _1768;
    float _3827 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    uint _1821 = _1600 + 9u;
    float _1832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _389) * 0.949999988079071044921875);
    float _1833 = _1832 * _1832;
    float _1834 = cbLight._m0[_1640].x + _466;
    float _1835 = cbLight._m0[_1640].y + _467;
    float _1836 = cbLight._m0[_1640].z + _468;
    float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
    float _1841 = _1840 * _1834;
    float _1842 = _1840 * _1835;
    float _1843 = _1840 * _1836;
    float _1844 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1640].xyz));
    float _3838 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1848 = dot(vec3(_386, _387, _388), vec3(_1841, _1842, _1843));
    float _3849 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1852 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1841, _1842, _1843));
    float _3860 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1856 = _1833 * _1833;
    float _1860 = ((_1851 * _1851) * (_1856 + (-1.0))) + 1.0;
    float _1869 = (exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1870 = 1.0 - _1833;
    float _1880 = (0.5 / (((_1769 * ((_1847 * _1870) + _1833)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1870) + _1833) * _1847))) * _1847;
    float _3871 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1856 / ((_1860 * _1860) * 3.141590118408203125));
    float _1892 = (((_1869 * cbLight._m0[_1821].x) * _1882) * _1623) + ((((cbLight._m0[_1740].x * _1592) * _1793) * _1807) * _1636);
    float _1893 = (((_1869 * cbLight._m0[_1821].y) * _1882) * _1623) + ((((cbLight._m0[_1740].y * _1593) * _1793) * _1807) * _1636);
    float _1894 = (((_1869 * cbLight._m0[_1821].z) * _1882) * _1623) + ((((cbLight._m0[_1740].z * _1594) * _1793) * _1807) * _1636);
    float _1956;
    float _1958;
    float _1960;
    if (_1677)
    {
        _1956 = _1892;
        _1958 = _1893;
        _1960 = _1894;
    }
    else
    {
        uint _1962 = _1600 + 2u;
        uint _1966 = _1600 + 10u;
        float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _389) * 0.949999988079071044921875);
        float _1981 = _1980 * _1980;
        float _1982 = cbLight._m0[_1962].x + _466;
        float _1983 = cbLight._m0[_1962].y + _467;
        float _1984 = cbLight._m0[_1962].z + _468;
        float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
        float _1989 = _1988 * _1982;
        float _1990 = _1988 * _1983;
        float _1991 = _1988 * _1984;
        float _1992 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1962].xyz));
        float _3882 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1996 = dot(vec3(_386, _387, _388), vec3(_1989, _1990, _1991));
        float _3893 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _2000 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_1989, _1990, _1991));
        float _3904 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2004 = _1981 * _1981;
        float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
        float _2017 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2018 = 1.0 - _1981;
        float _2028 = (0.5 / (((_1769 * ((_1995 * _2018) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2018) + _1981) * _1995))) * _1995;
        float _3915 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2030 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
        float _2031 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1956 = (((_2017 * cbLight._m0[_1966].x) * _2030) * _2031) + _1892;
        _1958 = (((_2017 * cbLight._m0[_1966].y) * _2030) * _2031) + _1893;
        _1960 = (((_2017 * cbLight._m0[_1966].z) * _2030) * _2031) + _1894;
    }
    float _2066;
    float _2068;
    float _2070;
    if (_1695)
    {
        _2066 = _1956;
        _2068 = _1958;
        _2070 = _1960;
    }
    else
    {
        uint _2077 = _1600 + 3u;
        uint _2081 = _1600 + 11u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _389) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _466;
        float _2098 = cbLight._m0[_2077].y + _467;
        float _2099 = cbLight._m0[_2077].z + _468;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_2077].xyz));
        float _3931 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _2111 = dot(vec3(_386, _387, _388), vec3(_2104, _2105, _2106));
        float _3942 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _3953 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2133 = 1.0 - _2096;
        float _2143 = (0.5 / (((_1769 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2133) + _2096) * _2110))) * _2110;
        float _3964 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2145 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2146 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _2066 = (((_2132 * cbLight._m0[_2081].x) * _2145) * _2146) + _1956;
        _2068 = (((_2132 * cbLight._m0[_2081].y) * _2145) * _2146) + _1958;
        _2070 = (((_2132 * cbLight._m0[_2081].z) * _2145) * _2146) + _1960;
    }
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    if (_1598.y == 0u)
    {
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2221;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2221;
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2221;
        uvec4 _2236 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2237 = _2236.x;
        uint _2248 = uint((float(_2236.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2237))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2237)));
        float _2258 = (log2(_2224 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2259 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        uint _2262 = uint(isnan(14.0) ? _2259 : (isnan(_2259) ? 14.0 : min(_2259, 14.0)));
        uvec4 _2267 = texelFetch(g_lightClusterGridBuffer, int(((_2262 << 2u) + (_2248 << 6u)) >> 2u));
        uint _2268 = _2267.x;
        uint _2269 = _2236.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2269 >> 4u) & 15u)) + 4294967295u) & _2268) == 0u) || ((_2269 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            uint _2518 = 0u;
            uint _2527;
            bool _2528;
            for (;;)
            {
                _2527 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2518 << 2u)) >> 2u)).x;
                _2528 = _2527 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2528)
                {
                    frontier_phi_63_pred = _2517;
                    frontier_phi_63_pred_1 = _2516;
                    frontier_phi_63_pred_2 = _2515;
                    frontier_phi_63_pred_3 = _2514;
                    frontier_phi_63_pred_4 = _2513;
                    frontier_phi_63_pred_5 = _2512;
                }
                else
                {
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    uint _2642;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2527;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    for (;;)
                    {
                        uint _2646 = uint(findLSB(_2642)) + (_2518 << 5u);
                        uint _2643 = (_2642 + 4294967295u) & _2642;
                        uint _2648 = _2646 * 48u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 3u)).x));
                        uint _2668 = (_2646 * 48u) + 4u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2687 = (_2646 * 48u) + 8u;
                        vec3 _2698 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x));
                        float _2702 = _2662.x - _2222;
                        float _2703 = _2662.y - _2223;
                        float _2704 = _2662.z - _2224;
                        float _2705 = dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704));
                        float _2708 = inversesqrt(_2705);
                        float _2709 = _2708 * _2702;
                        float _2710 = _2708 * _2703;
                        float _2711 = _2708 * _2704;
                        float _2712 = dot(vec3(_496, _499, _502), vec3(_2709, _2710, _2711));
                        float _2717 = 1.0 - (_2705 * _2662.w);
                        float _3990 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2718 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2719 = sqrt(_2705) * _2681.w;
                        float _2722 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                        float _2723 = _2722 * _2722;
                        float _2726 = ((1.0 - _2723) * _2712) + _2723;
                        float _2729 = _2719 * _2719;
                        float _2733 = ((isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0))) * _2718) / ((_2729 * 0.699999988079071044921875) + 1.0);
                        float _2737 = (-0.0) - _2222;
                        float _2738 = (-0.0) - _2223;
                        float _2739 = (-0.0) - _2224;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2744 = _2743 * _2737;
                        float _2745 = _2743 * _2738;
                        float _2746 = _2743 * _2739;
                        float _2754 = exp2(log2(1.0 / ((_2729 * 3.5) + 5.0)) * 0.25);
                        float _2755 = 1.0 - _556;
                        float _2762 = sqrt(1.0 - ((1.0 - (_2755 * _2755)) * (1.0 - (_2754 * _2754))));
                        float _2763 = _2762 * _2762;
                        float _2764 = _2763 * _2763;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
                        float _2775 = dot(vec3(_496, _499, _502), vec3(_2744, _2745, _2746));
                        float _4006 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2778 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2779 = dot(vec3(_496, _499, _502), vec3(_2771 * _2765, _2771 * _2766, _2771 * _2767));
                        float _4017 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2782 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2786 = ((_2782 * _2782) * (_2764 + (-1.0))) + 1.0;
                        float _2787 = _2722 * _2763;
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * _2712) + _2788;
                        float _4028 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2792 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2793 = 1.0 - _2763;
                        float _2803 = (0.5 / (((_2792 * ((_2778 * _2793) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2792 * _2793) + _2763) * _2778))) * _2792;
                        float _4039 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2814 = (((_2764 * 3.1415927410125732421875) * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) / ((_2786 * _2786) * ((_2729 * 2.1991131305694580078125) + 3.141590118408203125))) * _2718;
                        _2571 = (_2733 * _2681.x) + _2639;
                        _2572 = (_2733 * _2681.y) + _2640;
                        _2573 = (_2733 * _2681.z) + _2641;
                        _2568 = (_2814 * _2698.x) + _2636;
                        _2569 = (_2814 * _2698.y) + _2637;
                        _2570 = (_2814 * _2698.z) + _2638;
                        if (_2643 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2643;
                        }
                    }
                    frontier_phi_63_pred = _2573;
                    frontier_phi_63_pred_1 = _2572;
                    frontier_phi_63_pred_2 = _2571;
                    frontier_phi_63_pred_3 = _2570;
                    frontier_phi_63_pred_4 = _2569;
                    frontier_phi_63_pred_5 = _2568;
                }
                _2379 = frontier_phi_63_pred;
                _2377 = frontier_phi_63_pred_1;
                _2375 = frontier_phi_63_pred_2;
                _2373 = frontier_phi_63_pred_3;
                _2371 = frontier_phi_63_pred_4;
                _2369 = frontier_phi_63_pred_5;
                uint _2519 = _2518 + 1u;
                if (_2519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2512 = _2369;
                    _2513 = _2371;
                    _2514 = _2373;
                    _2515 = _2375;
                    _2516 = _2377;
                    _2517 = _2379;
                    _2518 = _2519;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((4294967295u << _2385) & _2268) == 0u)
        {
            _2480 = _2368;
            _2482 = _2370;
            _2484 = _2372;
            _2486 = _2374;
            _2488 = _2376;
            _2490 = _2378;
        }
        else
        {
            float _2505 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
            float _2506 = _2505 * _2222;
            float _2507 = _2505 * _2223;
            float _2508 = _2505 * _2224;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2619 = _2368;
                float _2620 = _2370;
                float _2621 = _2372;
                float _2622 = _2374;
                float _2623 = _2376;
                float _2624 = _2378;
                uint _2625 = _2385;
                uint _2634;
                bool _2635;
                for (;;)
                {
                    _2634 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2625 << 2u)) >> 2u)).x;
                    _2635 = _2634 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2635)
                    {
                        frontier_phi_69_pred = _2624;
                        frontier_phi_69_pred_1 = _2623;
                        frontier_phi_69_pred_2 = _2622;
                        frontier_phi_69_pred_3 = _2621;
                        frontier_phi_69_pred_4 = _2620;
                        frontier_phi_69_pred_5 = _2619;
                    }
                    else
                    {
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        float _2837 = _2624;
                        uint _2838 = _2634;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        vec3 _2892;
                        vec4 _2908;
                        vec4 _2924;
                        float _2971;
                        bool _2972;
                        for (;;)
                        {
                            uint _2849 = ((_2625 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2849 * 40u) + 8u;
                            _2892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x));
                            uint _2895 = (_2849 * 40u) + 16u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2849 * 40u) + 20u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2849 * 40u) + 24u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2946 = (_2849 * 40u) + 28u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2971 = fma(_2224, _2959.z, fma(_2223, _2959.y, _2959.x * _2222)) + _2959.w;
                            _2972 = !((fma(_2224, _2940.z, fma(_2223, _2940.y, _2940.x * _2222)) + _2940.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2972)
                            {
                                float _2999 = _2864.x - _2222;
                                float _3000 = _2864.y - _2223;
                                float _3001 = _2864.z - _2224;
                                float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                                float _3005 = inversesqrt(_3002);
                                float _3006 = _3005 * _2999;
                                float _3007 = _3005 * _3000;
                                float _3008 = _3005 * _3001;
                                float _3012 = 1.0 - (_3002 / (_2865 * _2865));
                                float _4050 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3017 = sqrt(_3002) * _2880.w;
                                float _3019 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                                float _3020 = _3019 * _3019;
                                float _3023 = ((1.0 - _3020) * dot(vec3(_3006, _3007, _3008), vec3(_496, _499, _502))) + _3020;
                                float _3026 = _3017 * _3017;
                                float _3030 = (fma(_2224, _2908.z, fma(_2223, _2908.y, _2908.x * _2222)) + _2908.w) / _2971;
                                float _3031 = (fma(_2224, _2924.z, fma(_2223, _2924.y, _2924.x * _2222)) + _2924.w) / _2971;
                                float _3035 = 1.0 - dot(vec2(_3030, _3031), vec2(_3030, _3031));
                                float _4066 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3037 = _3036 * (((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3013) / ((_3026 * 0.699999988079071044921875) + 1.0));
                                float _3049 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                                float _3050 = 1.0 - _556;
                                float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                                float _3058 = _3057 * _3057;
                                float _3059 = _3058 * _3058;
                                float _3060 = _3006 - _2506;
                                float _3061 = _3007 - _2507;
                                float _3062 = _3008 - _2508;
                                float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                                float _3070 = dot(vec3(_496, _499, _502), vec3((-0.0) - _2506, (-0.0) - _2507, (-0.0) - _2508));
                                float _4077 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3074 = dot(vec3(_496, _499, _502), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                                float _4088 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3077 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                                float _3082 = _3019 * _3058;
                                float _3083 = _3082 * _3082;
                                float _3089 = ((1.0 - _3083) * dot(vec3(_496, _499, _502), vec3(_3006, _3007, _3008))) + _3083;
                                float _4099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3091 = 1.0 - _3058;
                                float _3101 = (0.5 / (((_3090 * ((_3073 * _3091) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3058) * _3073))) * _3090;
                                float _4110 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3111 = (_3036 * _3013) * (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) / ((_3081 * _3081) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3037 * _2880.z;
                                frontier_phi_75_pred_1 = _3037 * _2880.y;
                                frontier_phi_75_pred_2 = _3037 * _2880.x;
                                frontier_phi_75_pred_3 = _3111 * _2892.z;
                                frontier_phi_75_pred_4 = _3111 * _2892.y;
                                frontier_phi_75_pred_5 = _3111 * _2892.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_75_pred;
                            _3119 = frontier_phi_75_pred_1;
                            _3118 = frontier_phi_75_pred_2;
                            _3117 = frontier_phi_75_pred_3;
                            _3116 = frontier_phi_75_pred_4;
                            _3115 = frontier_phi_75_pred_5;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2824;
                        frontier_phi_69_pred_1 = _2823;
                        frontier_phi_69_pred_2 = _2822;
                        frontier_phi_69_pred_3 = _2821;
                        frontier_phi_69_pred_4 = _2820;
                        frontier_phi_69_pred_5 = _2819;
                    }
                    _2491 = frontier_phi_69_pred;
                    _2489 = frontier_phi_69_pred_1;
                    _2487 = frontier_phi_69_pred_2;
                    _2485 = frontier_phi_69_pred_3;
                    _2483 = frontier_phi_69_pred_4;
                    _2481 = frontier_phi_69_pred_5;
                    uint _2626 = _2625 + 1u;
                    if (_2626 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2619 = _2481;
                        _2620 = _2483;
                        _2621 = _2485;
                        _2622 = _2487;
                        _2623 = _2489;
                        _2624 = _2491;
                        _2625 = _2626;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2491;
                frontier_phi_57_58_ladder_1 = _2489;
                frontier_phi_57_58_ladder_2 = _2487;
                frontier_phi_57_58_ladder_3 = _2485;
                frontier_phi_57_58_ladder_4 = _2483;
                frontier_phi_57_58_ladder_5 = _2481;
            }
            else
            {
                frontier_phi_57_58_ladder = _2378;
                frontier_phi_57_58_ladder_1 = _2376;
                frontier_phi_57_58_ladder_2 = _2374;
                frontier_phi_57_58_ladder_3 = _2372;
                frontier_phi_57_58_ladder_4 = _2370;
                frontier_phi_57_58_ladder_5 = _2368;
            }
            _2480 = frontier_phi_57_58_ladder_5;
            _2482 = frontier_phi_57_58_ladder_4;
            _2484 = frontier_phi_57_58_ladder_3;
            _2486 = frontier_phi_57_58_ladder_2;
            _2488 = frontier_phi_57_58_ladder_1;
            _2490 = frontier_phi_57_58_ladder;
        }
        float _2495 = isnan(1.0) ? _540 : (isnan(_540) ? 1.0 : min(_540, 1.0));
        _2280 = (_2495 * _2486) + _1733;
        _2282 = (_2495 * _2488) + _1735;
        _2284 = (_2495 * _2490) + _1737;
        _2286 = ((_2480 * 0.039999999105930328369140625) * _2495) + _2066;
        _2288 = ((_2482 * 0.039999999105930328369140625) * _2495) + _2068;
        _2290 = ((_2484 * 0.039999999105930328369140625) * _2495) + _2070;
    }
    else
    {
        _2280 = _1733;
        _2282 = _1735;
        _2284 = _1737;
        _2286 = _2066;
        _2288 = _2068;
        _2290 = _2070;
    }
    float _4126 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4137 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4148 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    uint _2310 = _515 + 6u;
    float _2318 = _474 / cbSceneParam._m0[86u].x;
    float _2319 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2335 = _2333.x;
    float _2336 = _2333.y;
    float _2337 = _2333.z;
    float _2338 = _2333.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2394 = _2393 / _408;
        float _2405 = _2394 * _459;
        float _2406 = _460 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _461;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2581;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2581 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2541 = 1.0 / cbSceneParam._m0[80u].x;
            float _2542 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2543 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            _2581 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2552 - _2553) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))))) * _2541)) - ((exp2(_2428 * _2552) - exp2(_2428 * _2553)) * _2541))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2583 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, 1.0), 0.0);
        float _2592 = exp2((_2581 * (-1.44269502162933349609375)) * (1.0 - _2583.w));
        float _2593 = log2(_2592);
        float _2609 = log2(_2338);
        _2430 = (exp2(_2609 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].x)) * _2583.x) / cbSceneParam._m0[78u].x)) + _2335;
        _2432 = (exp2(_2609 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].y)) * _2583.y) / cbSceneParam._m0[78u].y)) + _2336;
        _2434 = (exp2(_2609 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].z)) * _2583.z) / cbSceneParam._m0[78u].z)) + _2337;
        _2436 = _2592 * _2338;
    }
    else
    {
        _2430 = _2335;
        _2432 = _2336;
        _2434 = _2337;
        _2436 = _2338;
    }
    float _2448 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2449 = _2448 == 3.0;
    float _2450 = log2(_2436);
    float _2457 = exp2(_2450 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2280 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _540))) + ((_2286 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1347)) * cbPerFrame._m0[3u].x));
    float _2458 = exp2(_2450 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2282 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _540))) + ((_2288 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1347)) * cbPerFrame._m0[3u].x));
    float _2459 = exp2(_2450 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2284 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _540))) + ((_2290 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1347)) * cbPerFrame._m0[3u].x));
    float _2468 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2468 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.y = _2468 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.z = _2468 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.w = cbInstanceData._m0[_2310].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2310].w;
}


