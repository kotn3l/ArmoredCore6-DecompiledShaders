#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1126;
float _3539;
float _3540;
float _3541;
float _3542;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _254.x;
    float _258 = _254.y;
    float _259 = _254.z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _304 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3551 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _314 = ((_291.z - _259) * _305) + _259;
    float _318 = ((((_291.x - _257) * _305) + _257) * 2.0) + (-1.0);
    float _320 = ((((_291.y - _258) * _305) + _258) * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3562 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))));
    float _329 = fma(_326, _238, fma(_320, _231, _318 * _217));
    float _332 = fma(_326, _239, fma(_320, _232, _318 * _218));
    float _335 = fma(_326, _240, fma(_320, _233, _318 * _219));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    vec4 _367 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _371 = (cbMtdParam._m0[11u].z + dot(vec4(_339 * _329, _339 * _332, _339 * _335, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_367.x * cbMtdParam._m0[11u].w);
    float _3573 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _394 = _389.x * cbMtdParam._m0[9u].x;
    float _395 = _389.y * cbMtdParam._m0[9u].y;
    float _396 = _389.z * cbMtdParam._m0[9u].z;
    vec4 _415 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _429 = (((_415.x * cbMtdParam._m0[10u].x) - _394) * _305) + _394;
    float _430 = (((_415.y * cbMtdParam._m0[10u].y) - _395) * _305) + _395;
    float _431 = (((_415.z * cbMtdParam._m0[10u].z) - _396) * _305) + _396;
    vec4 _444 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _455 = ((_444.x - _429) * _372) + _429;
    float _456 = ((_444.y - _430) * _372) + _430;
    float _457 = ((_444.z - _431) * _372) + _431;
    vec4 _470 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _472 = _470.x;
    float _490 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _472) * _305) + _472;
    float _492 = _490 - (_490 * _372);
    vec4 _505 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _512 = (_505.x * 2.0) + (-1.0);
    float _513 = (_505.y * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3584 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _522 = ((_505.z - _314) * _372) + _314;
    float _529 = ((_512 - _318) * _372) + _318;
    float _530 = ((_513 - _320) * _372) + _320;
    float _531 = ((sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) - _326) * _372) + _326;
    float _534 = fma(_531, _238, fma(_530, _231, _529 * _217));
    float _537 = fma(_531, _239, fma(_530, _232, _529 * _218));
    float _540 = fma(_531, _240, fma(_530, _233, _529 * _219));
    float _544 = inversesqrt(dot(vec3(_534, _537, _540), vec3(_534, _537, _540)));
    float _545 = _544 * _534;
    float _546 = _544 * _537;
    float _547 = _544 * _540;
    float _3595 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _548 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3617 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3628 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3639 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _552 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _568 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _618 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _608);
    float _619 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _608);
    float _620 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _608);
    float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
    float _625 = _618 * _624;
    float _626 = _619 * _624;
    float _627 = _620 * _624;
    vec4 _632 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _634 = _632.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _806 = sqrt(((_618 * _618) + (_619 * _619)) + (_620 * _620));
        float _812 = (cbMatDynParam._m0[5u].x * _806) + cbMatDynParam._m0[5u].y;
        float _3650 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _817 = (cbMatDynParam._m0[5u].z * _806) + cbMatDynParam._m0[5u].w;
        float _3661 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) - _813)) + _813) < ((_634 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _645 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _646 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _664 = fma(_547, cbSceneParam._m0[5u].z, fma(_546, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _545));
    float _667 = fma(_547, cbSceneParam._m0[6u].z, fma(_546, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _545));
    float _670 = fma(_547, cbSceneParam._m0[7u].z, fma(_546, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _545));
    uint _683 = uint(roundEven(NORMAL.w)) * 13u;
    uint _684 = _683 + 9u;
    uint _685 = _684 + uint(cbMatDynParam._m0[0u].w);
    float _691 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_685].x;
    float _692 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_685].y;
    float _693 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_685].z;
    float _3672 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _697 = 1.0 - _552;
    float _698 = _694 * _697;
    float _699 = _695 * _697;
    float _700 = _696 * _697;
    float _705 = (_694 + (-0.039999999105930328369140625)) * _552;
    float _706 = (_695 + (-0.039999999105930328369140625)) * _552;
    float _707 = (_696 + (-0.039999999105930328369140625)) * _552;
    float _708 = _705 + 0.039999999105930328369140625;
    float _710 = _706 + 0.039999999105930328369140625;
    float _711 = _707 + 0.039999999105930328369140625;
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _645, cbSceneParam._m0[86u].y * _646));
    float _723 = _720.x * TEXCOORD_9.w;
    float _724 = dot(vec3(_545, _546, _547), vec3(_625, _626, _627));
    float _727 = _724 * 2.0;
    float _731 = (_727 * _545) - _625;
    float _732 = (_727 * _546) - _626;
    float _733 = (_727 * _547) - _627;
    float _737 = abs(dot(vec3(_625, _626, _627), vec3(_545, _546, _547)));
    float _3705 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _739 = sqrt(_548);
    float _752 = exp2((_739 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_739 * 3.0));
    float _758 = (1.0 - _752) * ((_739 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _759 = _752 * _739;
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _850 = fma(_795, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787));
        float _854 = fma(_795, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787));
        float _858 = fma(_795, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787));
        float _883 = _787 + _545;
        float _884 = _791 + _546;
        float _885 = _795 + _547;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _850;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _854;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _858;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_850 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_854 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_858 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_545, _546, _547), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3753 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_545, _546, _547), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3786 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_545, _546, _547), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3819 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1169 = fma(_795, cbModelParam._m0[30u].z, fma(_791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787));
        float _1173 = fma(_795, cbModelParam._m0[31u].z, fma(_791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787));
        float _1177 = fma(_795, cbModelParam._m0[32u].z, fma(_791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787));
        float _1200 = _787 + _545;
        float _1201 = _791 + _546;
        float _1202 = _795 + _547;
        float _1212 = fma(_1202, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200)) - _1169;
        float _1213 = fma(_1202, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200)) - _1173;
        float _1214 = fma(_1202, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200)) - _1177;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1169 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1173 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[35u].z) + ((((((_1177 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_545, _546, _547), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3882 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_545, _546, _547), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3915 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_545, _546, _547), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3948 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = _1126;
        _1448 = _1126;
        _1449 = _1126;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1138)) + _1138;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1139)) + _1139;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1140)) + _1140;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _731 * 0.5;
    float _1507 = _732 * 0.5;
    float _1508 = _733 * 0.5;
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1549;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1560;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1551 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1564 = (_1560 * cbModelParam._m0[1u].x) + (_1549 * (1.0 - cbModelParam._m0[1u].x));
    float _1574 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _548);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1574 : min(cbModelParam._m0[25u].z, _1574));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_795, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_795, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_795, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_733, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731));
        float _1638 = fma(_733, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731));
        float _1641 = fma(_733, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1669 = frontier_phi_19_17_ladder;
        }
        float _1896;
        if (_1638 > 0.0)
        {
            _1896 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1896 = frontier_phi_28_24_ladder;
        }
        float _2153;
        if (_1641 > 0.0)
        {
            _2153 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2153 = frontier_phi_40_35_ladder;
        }
        float _2155 = isnan(_1896) ? _1669 : (isnan(_1669) ? _1896 : min(_1669, _1896));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1635) + _1624;
        float _2161 = (_2156 * _1638) + _1628;
        float _2162 = (_2156 * _1641) + _1632;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2163;
        float _2167 = _2163 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 > _2167) || ((_2161 < _2165) || ((_2160 < _2165) || (_2160 > _2167))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2162, cbModelParam._m0[9u].z, fma(_2161, cbModelParam._m0[9u].y, _2160 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2162, cbModelParam._m0[10u].z, fma(_2161, cbModelParam._m0[10u].y, _2160 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2162, cbModelParam._m0[11u].z, fma(_2161, cbModelParam._m0[11u].y, _2160 * cbModelParam._m0[11u].x))), _1575);
            frontier_phi_18_40_ladder = _2290.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2290.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2290.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_18_40_ladder_2;
        _1659 = frontier_phi_18_40_ladder_1;
        _1661 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_731, _732, _733), _1575);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _548);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_795, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_795, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_795, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_733, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731));
        float _1737 = fma(_733, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731));
        float _1740 = fma(_733, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731));
        float _1901;
        if (_1734 > 0.0)
        {
            _1901 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1901 = frontier_phi_30_26_ladder;
        }
        float _2180;
        if (_1737 > 0.0)
        {
            _2180 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2180 = frontier_phi_42_37_ladder;
        }
        float _2393;
        if (_1740 > 0.0)
        {
            _2393 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2393 = frontier_phi_51_48_ladder;
        }
        float _2395 = isnan(_2180) ? _1901 : (isnan(_1901) ? _2180 : min(_1901, _2180));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1734) + _1723;
        float _2401 = (_2396 * _1737) + _1727;
        float _2402 = (_2396 * _1740) + _1731;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2403;
        float _2406 = _2403 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2402 > _2406) || ((_2402 < _2404) || ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 < _2404) || (_2400 > _2406))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2402, cbModelParam._m0[17u].z, fma(_2401, cbModelParam._m0[17u].y, _2400 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2402, cbModelParam._m0[18u].z, fma(_2401, cbModelParam._m0[18u].y, _2400 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2402, cbModelParam._m0[19u].z, fma(_2401, cbModelParam._m0[19u].y, _2400 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_27_51_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_27_51_ladder_2;
        _1761 = frontier_phi_27_51_ladder_1;
        _1763 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_731, _732, _733), _1666);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1776 = (((_758 * _708) + _759) * _723) * ((cbModelParam._m0[1u].w * (_1759 - _1657)) + _1657);
    float _1778 = (((_758 * _710) + _759) * _723) * ((cbModelParam._m0[1u].w * (_1761 - _1659)) + _1659);
    float _1780 = (((_758 * _711) + _759) * _723) * ((cbModelParam._m0[1u].w * (_1763 - _1661)) + _1661);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    vec4 _1797 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_645, _646));
    float _1799 = _1797.w;
    float _1811 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1799);
    float _1812 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1799);
    float _1813 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1799);
    uvec4 _1817 = floatBitsToUint(cbInstanceData._m0[_683 + 5u]);
    uint _1819 = _1817.x * 14u;
    uint _1820 = _1819 + 13u;
    float _1827 = _723 + (-1.0);
    float _1832 = (cbLight._m0[_1820].x * _1827) + 1.0;
    float _1833 = (cbLight._m0[_1820].y * _1827) + 1.0;
    float _1834 = (cbLight._m0[_1820].z * _1827) + 1.0;
    float _1835 = (cbLight._m0[_1820].w * _1827) + 1.0;
    uint _1836 = _1819 + 5u;
    float _1842 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1846 = _1819 + 4u;
    float _1855 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1859 = _1819 | 1u;
    float _1870 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_545, _546, _547));
    float _1873 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_545, _546, _547));
    float _4084 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _4095 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1878 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1880 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.3183098733425140380859375;
    float _1887 = ((cbLight._m0[_1836].x * _1842) * _1880) + (((cbLight._m0[_1846].x * _1811) * _1855) * _1878);
    float _1888 = ((_1842 * cbLight._m0[_1836].y) * _1880) + (((cbLight._m0[_1846].y * _1812) * _1855) * _1878);
    float _1889 = ((_1842 * cbLight._m0[_1836].z) * _1880) + (((cbLight._m0[_1846].z * _1813) * _1855) * _1878);
    uvec4 _1893 = floatBitsToUint(cbLight._m0[_1819 + 12u]);
    bool _1895 = _1893.x == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1895)
    {
        _1906 = _1887;
        _1908 = _1888;
        _1910 = _1889;
    }
    else
    {
        uint _1914 = _1819 + 6u;
        float _1930 = (dot(vec3(cbLight._m0[_1819 + 2u].xyz), vec3(_545, _546, _547)) * 0.5) + 0.5;
        float _1931 = _1930 * _1930;
        float _4106 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1933 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1906 = (((cbLight._m0[_1914].x * 0.3183098733425140380859375) * _1932) * _1933) + _1887;
        _1908 = (((cbLight._m0[_1914].y * 0.3183098733425140380859375) * _1932) * _1933) + _1888;
        _1910 = (((cbLight._m0[_1914].z * 0.3183098733425140380859375) * _1932) * _1933) + _1889;
    }
    bool _1913 = _1893.y == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1913)
    {
        _1951 = _1906;
        _1953 = _1908;
        _1955 = _1910;
    }
    else
    {
        uint _2124 = _1819 + 7u;
        float _2140 = (dot(vec3(cbLight._m0[_1819 + 3u].xyz), vec3(_545, _546, _547)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4122 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2143 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1951 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _1906;
        _1953 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _1908;
        _1955 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _1910;
    }
    uint _1958 = _1819 + 8u;
    float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _548) * 0.949999988079071044921875);
    float _1972 = _1971 * _1971;
    float _1973 = cbLight._m0[_1819].x + _625;
    float _1974 = cbLight._m0[_1819].y + _626;
    float _1975 = cbLight._m0[_1819].z + _627;
    float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
    float _1980 = _1979 * _1973;
    float _1981 = _1979 * _1974;
    float _1982 = _1979 * _1975;
    float _1983 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_1819].xyz));
    float _4138 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _1987 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1988 = dot(vec3(_545, _546, _547), vec3(_1980, _1981, _1982));
    float _4160 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _1992 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1980, _1981, _1982));
    float _4171 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1996 = _1972 * _1972;
    float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
    float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
    float _2009 = 0.959999978542327880859375 - _705;
    float _2011 = 0.959999978542327880859375 - _706;
    float _2012 = 0.959999978542327880859375 - _707;
    float _2019 = 1.0 - _1972;
    float _2030 = (0.5 / (((_1987 * ((_1986 * _2019) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2019) + _1972) * _1986))) * _1986;
    float _4182 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
    uint _2046 = _1819 + 9u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _548) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1859].x + _625;
    float _2060 = cbLight._m0[_1859].y + _626;
    float _2061 = cbLight._m0[_1859].z + _627;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_1859].xyz));
    float _4193 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2073 = dot(vec3(_545, _546, _547), vec3(_2066, _2067, _2068));
    float _4204 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2066, _2067, _2068));
    float _4215 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2058 * _2058;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
    float _2099 = 1.0 - _2058;
    float _2109 = (0.5 / (((_1987 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2099) + _2058) * _2072))) * _2072;
    float _4226 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    float _2121 = (((((_2092 * _2009) + _708) * cbLight._m0[_2046].x) * _2111) * _1842) + ((((cbLight._m0[_1958].x * _1811) * ((_2008 * _2009) + _708)) * _2032) * _1855);
    float _2122 = (((((_2092 * _2011) + _710) * cbLight._m0[_2046].y) * _2111) * _1842) + ((((cbLight._m0[_1958].y * _1812) * ((_2008 * _2011) + _710)) * _2032) * _1855);
    float _2123 = (((((_2092 * _2012) + _711) * cbLight._m0[_2046].z) * _2111) * _1842) + ((((cbLight._m0[_1958].z * _1813) * ((_2008 * _2012) + _711)) * _2032) * _1855);
    float _2185;
    float _2187;
    float _2189;
    if (_1895)
    {
        _2185 = _2121;
        _2187 = _2122;
        _2189 = _2123;
    }
    else
    {
        uint _2191 = _1819 + 2u;
        uint _2195 = _1819 + 10u;
        float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _548) * 0.949999988079071044921875);
        float _2210 = _2209 * _2209;
        float _2211 = cbLight._m0[_2191].x + _625;
        float _2212 = cbLight._m0[_2191].y + _626;
        float _2213 = cbLight._m0[_2191].z + _627;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2218 = _2217 * _2211;
        float _2219 = _2217 * _2212;
        float _2220 = _2217 * _2213;
        float _2221 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_2191].xyz));
        float _4237 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2225 = dot(vec3(_545, _546, _547), vec3(_2218, _2219, _2220));
        float _4248 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2229 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2218, _2219, _2220));
        float _4259 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2233 = _2210 * _2210;
        float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
        float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0);
        float _2251 = 1.0 - _2210;
        float _2261 = (0.5 / (((_1987 * ((_2224 * _2251) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2251) + _2210) * _2224))) * _2224;
        float _4270 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2185 = (((((_2244 * _2009) + _708) * cbLight._m0[_2195].x) * _2263) * _2264) + _2121;
        _2187 = (((((_2244 * _2011) + _710) * cbLight._m0[_2195].y) * _2263) * _2264) + _2122;
        _2189 = (((((_2244 * _2012) + _711) * cbLight._m0[_2195].z) * _2263) * _2264) + _2123;
    }
    float _2299;
    float _2301;
    float _2303;
    if (_1913)
    {
        _2299 = _2185;
        _2301 = _2187;
        _2303 = _2189;
    }
    else
    {
        uint _2310 = _1819 + 3u;
        uint _2314 = _1819 + 11u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _548) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _625;
        float _2331 = cbLight._m0[_2310].y + _626;
        float _2332 = cbLight._m0[_2310].z + _627;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_545, _546, _547), vec3(cbLight._m0[_2310].xyz));
        float _4286 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2344 = dot(vec3(_545, _546, _547), vec3(_2337, _2338, _2339));
        float _4297 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4308 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0);
        float _2370 = 1.0 - _2329;
        float _2380 = (0.5 / (((_1987 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2370) + _2329) * _2343))) * _2343;
        float _4319 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2299 = (((((_2363 * _2009) + _708) * cbLight._m0[_2314].x) * _2382) * _2383) + _2185;
        _2301 = (((((_2363 * _2011) + _710) * cbLight._m0[_2314].y) * _2382) * _2383) + _2187;
        _2303 = (((((_2363 * _2012) + _711) * cbLight._m0[_2314].z) * _2382) * _2383) + _2189;
    }
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_1817.y == 0u)
    {
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2458;
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2458;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2458;
        uvec4 _2473 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2474 = _2473.x;
        uint _2485 = uint((float(_2473.y) * floor(float(uint(cbSceneParam._m0[85u].y * _646) / _2474))) + floor(float(uint(cbSceneParam._m0[85u].x * _645) / _2474)));
        float _2495 = (log2(_2461 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2496 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        uint _2499 = uint(isnan(14.0) ? _2496 : (isnan(_2496) ? 14.0 : min(_2496, 14.0)));
        uvec4 _2504 = texelFetch(g_lightClusterGridBuffer, int(((_2499 << 2u) + (_2485 << 6u)) >> 2u));
        uint _2505 = _2504.x;
        uint _2506 = _2473.z;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((((1u << ((_2506 >> 4u) & 15u)) + 4294967295u) & _2505) == 0u) || ((_2506 & 240u) == 0u))
        {
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
        }
        else
        {
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            uint _2763 = 0u;
            uint _2772;
            bool _2773;
            for (;;)
            {
                _2772 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                _2773 = _2772 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2773)
                {
                    frontier_phi_68_pred = _2759;
                    frontier_phi_68_pred_1 = _2762;
                    frontier_phi_68_pred_2 = _2761;
                    frontier_phi_68_pred_3 = _2760;
                    frontier_phi_68_pred_4 = _2758;
                    frontier_phi_68_pred_5 = _2757;
                }
                else
                {
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    uint _2908;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2772;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    for (;;)
                    {
                        uint _2912 = uint(findLSB(_2908)) + (_2763 << 5u);
                        uint _2909 = (_2908 + 4294967295u) & _2908;
                        uint _2914 = _2912 * 48u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2934 = (_2912 * 48u) + 4u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 3u)).x));
                        uint _2953 = (_2912 * 48u) + 8u;
                        vec3 _2964 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x));
                        float _2968 = _2928.x - _2459;
                        float _2969 = _2928.y - _2460;
                        float _2970 = _2928.z - _2461;
                        float _2971 = dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970));
                        float _2974 = inversesqrt(_2971);
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2978 = dot(vec3(_664, _667, _670), vec3(_2975, _2976, _2977));
                        float _2983 = 1.0 - (_2971 * _2928.w);
                        float _4345 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _2985 = sqrt(_2971) * _2947.w;
                        float _2988 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2978) + _2989;
                        float _2995 = _2985 * _2985;
                        float _2999 = ((isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))) * _2984) / ((_2995 * 0.699999988079071044921875) + 1.0);
                        float _3003 = (-0.0) - _2459;
                        float _3004 = (-0.0) - _2460;
                        float _3005 = (-0.0) - _2461;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3020 = exp2(log2(1.0 / ((_2995 * 3.5) + 5.0)) * 0.25);
                        float _3021 = 1.0 - _739;
                        float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                        float _3029 = _3028 * _3028;
                        float _3030 = _3029 * _3029;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3041 = dot(vec3(_664, _667, _670), vec3(_3010, _3011, _3012));
                        float _4361 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3045 = dot(vec3(_664, _667, _670), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                        float _4372 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3048 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                        float _3053 = _2988 * _3029;
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _2978) + _3054;
                        float _4383 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3059 = 1.0 - _3029;
                        float _3069 = (0.5 / (((_3058 * ((_3044 * _3059) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3029) * _3044))) * _3058;
                        float _4394 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3080 = (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) / ((_3052 * _3052) * ((_2995 * 2.1991131305694580078125) + 3.141590118408203125))) * _2984;
                        _2832 = (_2999 * _2947.x) + _2905;
                        _2833 = (_2999 * _2947.y) + _2906;
                        _2834 = (_2999 * _2947.z) + _2907;
                        _2829 = (_3080 * _2964.x) + _2902;
                        _2830 = (_3080 * _2964.y) + _2903;
                        _2831 = (_3080 * _2964.z) + _2904;
                        if (_2909 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2909;
                        }
                    }
                    frontier_phi_68_pred = _2831;
                    frontier_phi_68_pred_1 = _2834;
                    frontier_phi_68_pred_2 = _2833;
                    frontier_phi_68_pred_3 = _2832;
                    frontier_phi_68_pred_4 = _2830;
                    frontier_phi_68_pred_5 = _2829;
                }
                _2610 = frontier_phi_68_pred;
                _2616 = frontier_phi_68_pred_1;
                _2614 = frontier_phi_68_pred_2;
                _2612 = frontier_phi_68_pred_3;
                _2608 = frontier_phi_68_pred_4;
                _2606 = frontier_phi_68_pred_5;
                uint _2764 = _2763 + 1u;
                if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2757 = _2606;
                    _2758 = _2608;
                    _2759 = _2610;
                    _2760 = _2612;
                    _2761 = _2614;
                    _2762 = _2616;
                    _2763 = _2764;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
        }
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.z;
        uint _2622 = (_2620 >> 8u) & 15u;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((4294967295u << _2622) & _2505) == 0u)
        {
            _2725 = _2605;
            _2727 = _2607;
            _2729 = _2609;
            _2731 = _2611;
            _2733 = _2613;
            _2735 = _2615;
        }
        else
        {
            float _2750 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
            float _2751 = _2750 * _2459;
            float _2752 = _2750 * _2460;
            float _2753 = _2750 * _2461;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2622 < ((_2620 >> 12u) & 15u))
            {
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2885 = _2605;
                float _2886 = _2607;
                float _2887 = _2609;
                float _2888 = _2611;
                float _2889 = _2613;
                float _2890 = _2615;
                uint _2891 = _2622;
                uint _2900;
                bool _2901;
                for (;;)
                {
                    _2900 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                    _2901 = _2900 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2901)
                    {
                        frontier_phi_79_pred = _2890;
                        frontier_phi_79_pred_1 = _2889;
                        frontier_phi_79_pred_2 = _2888;
                        frontier_phi_79_pred_3 = _2887;
                        frontier_phi_79_pred_4 = _2886;
                        frontier_phi_79_pred_5 = _2885;
                    }
                    else
                    {
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        float _3111 = _2889;
                        float _3112 = _2890;
                        uint _3113 = _2900;
                        uint _3114;
                        vec4 _3139;
                        float _3140;
                        vec4 _3155;
                        vec3 _3167;
                        vec4 _3183;
                        vec4 _3199;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3124 = ((_2891 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3113));
                            _3114 = (_3113 + 4294967295u) & _3113;
                            uint _3126 = _3124 * 40u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3140 = _3139.w;
                            uint _3142 = (_3124 * 40u) + 4u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3124 * 40u) + 8u;
                            _3167 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x));
                            uint _3170 = (_3124 * 40u) + 16u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3186 = (_3124 * 40u) + 20u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3124 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3124 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2461, _3234.z, fma(_2460, _3234.y, _3234.x * _2459)) + _3234.w;
                            _3247 = !((fma(_2461, _3215.z, fma(_2460, _3215.y, _3215.x * _2459)) + _3215.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3139.x - _2459;
                                float _3275 = _3139.y - _2460;
                                float _3276 = _3139.z - _2461;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3140 * _3140));
                                float _4405 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3292 = sqrt(_3277) * _3155.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_664, _667, _670))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2461, _3183.z, fma(_2460, _3183.y, _3183.x * _2459)) + _3183.w) / _3246;
                                float _3306 = (fma(_2461, _3199.z, fma(_2460, _3199.y, _3199.x * _2459)) + _3199.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4421 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _739;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2751;
                                float _3336 = _3282 - _2752;
                                float _3337 = _3283 - _2753;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_664, _667, _670), vec3((-0.0) - _2751, (-0.0) - _2752, (-0.0) - _2753));
                                float _4432 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3349 = dot(vec3(_664, _667, _670), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4443 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_664, _667, _670), vec3(_3281, _3282, _3283))) + _3358;
                                float _4454 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4465 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3312 * _3155.z;
                                frontier_phi_85_pred_1 = _3312 * _3155.y;
                                frontier_phi_85_pred_2 = _3312 * _3155.x;
                                frontier_phi_85_pred_3 = _3386 * _3167.z;
                                frontier_phi_85_pred_4 = _3386 * _3167.y;
                                frontier_phi_85_pred_5 = _3386 * _3167.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3395 = frontier_phi_85_pred;
                            _3394 = frontier_phi_85_pred_1;
                            _3393 = frontier_phi_85_pred_2;
                            _3392 = frontier_phi_85_pred_3;
                            _3391 = frontier_phi_85_pred_4;
                            _3390 = frontier_phi_85_pred_5;
                            _3097 = _3393 + _3110;
                            _3098 = _3394 + _3111;
                            _3099 = _3395 + _3112;
                            _3094 = _3390 + _3107;
                            _3095 = _3391 + _3108;
                            _3096 = _3392 + _3109;
                            if (_3114 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3114;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3099;
                        frontier_phi_79_pred_1 = _3098;
                        frontier_phi_79_pred_2 = _3097;
                        frontier_phi_79_pred_3 = _3096;
                        frontier_phi_79_pred_4 = _3095;
                        frontier_phi_79_pred_5 = _3094;
                    }
                    _2736 = frontier_phi_79_pred;
                    _2734 = frontier_phi_79_pred_1;
                    _2732 = frontier_phi_79_pred_2;
                    _2730 = frontier_phi_79_pred_3;
                    _2728 = frontier_phi_79_pred_4;
                    _2726 = frontier_phi_79_pred_5;
                    uint _2892 = _2891 + 1u;
                    if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2885 = _2726;
                        _2886 = _2728;
                        _2887 = _2730;
                        _2888 = _2732;
                        _2889 = _2734;
                        _2890 = _2736;
                        _2891 = _2892;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2732;
                frontier_phi_60_61_ladder_1 = _2736;
                frontier_phi_60_61_ladder_2 = _2734;
                frontier_phi_60_61_ladder_3 = _2730;
                frontier_phi_60_61_ladder_4 = _2728;
                frontier_phi_60_61_ladder_5 = _2726;
            }
            else
            {
                frontier_phi_60_61_ladder = _2611;
                frontier_phi_60_61_ladder_1 = _2615;
                frontier_phi_60_61_ladder_2 = _2613;
                frontier_phi_60_61_ladder_3 = _2609;
                frontier_phi_60_61_ladder_4 = _2607;
                frontier_phi_60_61_ladder_5 = _2605;
            }
            _2725 = frontier_phi_60_61_ladder_5;
            _2727 = frontier_phi_60_61_ladder_4;
            _2729 = frontier_phi_60_61_ladder_3;
            _2731 = frontier_phi_60_61_ladder;
            _2733 = frontier_phi_60_61_ladder_2;
            _2735 = frontier_phi_60_61_ladder_1;
        }
        float _2740 = isnan(1.0) ? _723 : (isnan(_723) ? 1.0 : min(_723, 1.0));
        _2517 = (_2740 * _2731) + _1951;
        _2519 = (_2740 * _2733) + _1953;
        _2521 = (_2740 * _2735) + _1955;
        _2523 = ((_2725 * _708) * _2740) + _2299;
        _2525 = ((_2727 * _710) * _2740) + _2301;
        _2527 = ((_2729 * _711) * _2740) + _2303;
    }
    else
    {
        _2517 = _1951;
        _2519 = _1953;
        _2521 = _1955;
        _2523 = _2299;
        _2525 = _2301;
        _2527 = _2303;
    }
    float _4481 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4492 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4503 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _2544 = ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2517 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _723))) + ((_2523 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1564)) * cbPerFrame._m0[3u].x);
    float _2545 = ((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2519 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _723))) + ((_2525 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1564)) * cbPerFrame._m0[3u].x);
    float _2546 = ((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2521 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _723))) + ((_2527 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1564)) * cbPerFrame._m0[3u].x);
    uint _2547 = _683 + 6u;
    float _2555 = _645 / cbSceneParam._m0[86u].x;
    float _2556 = _646 / cbSceneParam._m0[86u].y;
    vec4 _2570 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, (log2((isnan(cbSceneParam._m0[77u].w) ? _568 : (isnan(_568) ? cbSceneParam._m0[77u].w : min(_568, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2572 = _2570.x;
    float _2573 = _2570.y;
    float _2574 = _2570.z;
    float _2575 = _2570.w;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_568 > cbSceneParam._m0[78u].w)
    {
        float _2630 = isnan(_568) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _568 : min(cbSceneParam._m0[80u].w, _568));
        float _2631 = _2630 / _568;
        float _2642 = _2631 * _618;
        float _2643 = _619 * _2631;
        float _2644 = (-0.0) - _2643;
        float _2645 = _2631 * _620;
        float _2647 = (cbSceneParam._m0[77u].w * _2644) / _2630;
        float _2648 = _2647 + cbSceneParam._m0[79u].w;
        float _2649 = cbSceneParam._m0[79u].w - _2643;
        float _2655 = sqrt(((_2642 * _2642) + (_2643 * _2643)) + (_2645 * _2645));
        float _2658 = (1.0 - (cbSceneParam._m0[77u].w / _2630)) * _2655;
        float _2663 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2665 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2842;
        if (abs((_2644 - _2647) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2842 = ((((_2648 > 0.0) ? exp2(_2663 * _2648) : (2.0 - exp2(_2665 * _2648))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2658;
        }
        else
        {
            float _2786 = 1.0 / cbSceneParam._m0[80u].x;
            float _2787 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : max(_2648, _2649));
            float _2788 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : min(_2648, _2649));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            _2842 = ((abs(_2655 / _2644) * cbSceneParam._m0[80u].y) * ((((_2797 - _2798) * 2.0) - ((exp2(_2663 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)))) - exp2(_2663 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))))) * _2786)) - ((exp2(_2665 * _2797) - exp2(_2665 * _2798)) * _2786))) + (_2658 * cbSceneParam._m0[80u].z);
        }
        vec4 _2844 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, 1.0), 0.0);
        float _2853 = exp2((_2842 * (-1.44269502162933349609375)) * (1.0 - _2844.w));
        float _2854 = log2(_2853);
        float _2870 = log2(_2575);
        _2667 = (exp2(_2870 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].x)) * _2844.x) / cbSceneParam._m0[78u].x)) + _2572;
        _2669 = (exp2(_2870 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].y)) * _2844.y) / cbSceneParam._m0[78u].y)) + _2573;
        _2671 = (exp2(_2870 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].z)) * _2844.z) / cbSceneParam._m0[78u].z)) + _2574;
        _2673 = _2853 * _2575;
    }
    else
    {
        _2667 = _2572;
        _2669 = _2573;
        _2671 = _2574;
        _2673 = _2575;
    }
    bool _2880;
    vec4 _2683;
    vec4 _2705;
    float _2707;
    float _2711;
    float _2712;
    float _2713;
    float _2714;
    bool _2724;
    for (;;)
    {
        _2683 = cbMatDynParam._m0[0u];
        float _2685 = roundEven(_2683.y);
        bool _2686 = _2685 == 3.0;
        float _2687 = log2(_2673);
        float _2694 = exp2(_2687 * cbSceneParam._m0[78u].x) * _2544;
        float _2695 = exp2(_2687 * cbSceneParam._m0[78u].y) * _2545;
        float _2696 = exp2(_2687 * cbSceneParam._m0[78u].z) * _2546;
        float _2703 = _634 + (-0.5);
        _2705 = cbMtdParam._m0[1u];
        _2707 = _2705.y * _2703;
        float _2710 = (_2685 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2711 = _2710 * (_2686 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2667)));
        _2712 = _2710 * (_2686 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2669)));
        _2713 = _2710 * (_2686 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2671)));
        _2714 = _2703 * 0.999000012874603271484375;
        _2724 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2724)
        {
            if ((cbInstanceData._m0[_683 + 7u].x + _2714) < 0.5)
            {
                _2880 = true;
                break;
            }
        }
        uint _2821 = _684 + uint(_2683.w);
        if ((cbInstanceData._m0[_2821].w < 1.0) && ((cbInstanceData._m0[_2821].w + _2714) < 0.5))
        {
            _2880 = true;
            break;
        }
        if ((_2707 + 1.0) < _2705.x)
        {
            _2880 = true;
            break;
        }
        _2880 = false;
        break;
    }
    float _3085;
    if (_2880)
    {
        discard_state = true;
        _3085 = 0.0;
    }
    else
    {
        _3085 = cbInstanceData._m0[_2547].w;
    }
    SV_Target.x = _2711;
    SV_Target.y = _2712;
    SV_Target.z = _2713;
    SV_Target.w = _3085;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2547].w;
    discard_exit();
}


