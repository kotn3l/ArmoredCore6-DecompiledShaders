#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _908;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _235 = _230.z;
    float _239 = (_230.x * 2.0) + (-1.0);
    float _241 = (_230.y * 2.0) + (-1.0);
    float _242 = dot(vec2(_239, _241), vec2(_239, _241));
    float _3247 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _248 = sqrt(1.0 - (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))));
    float _251 = fma(_248, _214, fma(_241, _207, _239 * _193));
    float _254 = fma(_248, _215, fma(_241, _208, _239 * _194));
    float _257 = fma(_248, _216, fma(_241, _209, _239 * _195));
    float _261 = inversesqrt(dot(vec3(_251, _254, _257), vec3(_251, _254, _257)));
    float _278 = cbMtdParam._m0[11u].z + dot(vec4(_261 * _251, _261 * _254, _261 * _257, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3258 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _302 = _297.x * cbMtdParam._m0[9u].x;
    float _303 = _297.y * cbMtdParam._m0[9u].y;
    float _304 = _297.z * cbMtdParam._m0[9u].z;
    vec4 _317 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = ((_317.x - _302) * _279) + _302;
    float _329 = ((_317.y - _303) * _279) + _303;
    float _330 = ((_317.z - _304) * _279) + _304;
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = (_343.x * 2.0) + (-1.0);
    float _351 = (_343.y * 2.0) + (-1.0);
    float _352 = dot(vec2(_350, _351), vec2(_350, _351));
    float _3269 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _360 = ((_343.z - _235) * _279) + _235;
    float _367 = ((_350 - _239) * _279) + _239;
    float _368 = ((_351 - _241) * _279) + _241;
    float _369 = ((sqrt(1.0 - (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) - _248) * _279) + _248;
    float _372 = fma(_369, _214, fma(_368, _207, _367 * _193));
    float _375 = fma(_369, _215, fma(_368, _208, _367 * _194));
    float _378 = fma(_369, _216, fma(_368, _209, _367 * _195));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _3280 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _386 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3302 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3313 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _405 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _456 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _446);
    float _457 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _446);
    float _458 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _446);
    float _462 = inversesqrt(dot(vec3(_456, _457, _458), vec3(_456, _457, _458)));
    float _463 = _456 * _462;
    float _464 = _457 * _462;
    float _465 = _458 * _462;
    float _471 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _472 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _492 = fma(_385, cbSceneParam._m0[5u].z, fma(_384, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _383));
    float _495 = fma(_385, cbSceneParam._m0[6u].z, fma(_384, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _383));
    float _498 = fma(_385, cbSceneParam._m0[7u].z, fma(_384, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _383));
    uint _511 = uint(roundEven(NORMAL.w)) * 13u;
    uint _513 = (_511 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _519 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_513].x;
    float _520 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_513].y;
    float _521 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_513].z;
    float _3324 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    vec4 _533 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _471, cbSceneParam._m0[86u].y * _472));
    float _536 = _533.x * TEXCOORD_9.w;
    float _537 = dot(vec3(_383, _384, _385), vec3(_463, _464, _465));
    float _540 = _537 * 2.0;
    float _544 = (_540 * _383) - _463;
    float _545 = (_540 * _384) - _464;
    float _546 = (_540 * _385) - _465;
    float _550 = abs(dot(vec3(_463, _464, _465), vec3(_383, _384, _385)));
    float _3357 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _552 = sqrt(_386);
    float _565 = exp2((_552 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_552 * 3.0));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _907;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _632 = fma(_605, cbModelParam._m0[26u].z, fma(_601, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597));
        float _636 = fma(_605, cbModelParam._m0[27u].z, fma(_601, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597));
        float _640 = fma(_605, cbModelParam._m0[28u].z, fma(_601, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597));
        float _665 = _597 + _383;
        float _666 = _601 + _384;
        float _667 = _605 + _385;
        float _677 = fma(_667, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665)) - _632;
        float _678 = fma(_667, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665)) - _636;
        float _679 = fma(_667, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665)) - _640;
        float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
        float _696 = ((_683 * _677) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_632 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_683 * _678) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_636 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_683 * _679) / cbModelParam._m0[34u].z) + ((((((_640 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        float _735 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_701.x + (-0.5));
        float _737 = _735 * (_701.y + (-0.5));
        float _738 = _735 * (_701.z + (-0.5));
        float _745 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_708.x + (-0.5));
        float _747 = _745 * (_708.y + (-0.5));
        float _748 = _745 * (_708.z + (-0.5));
        float _755 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_715.x + (-0.5));
        float _757 = _755 * (_715.y + (-0.5));
        float _758 = _755 * (_715.z + (-0.5));
        float _765 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_722.x + (-0.5));
        float _767 = _765 * (_722.y + (-0.5));
        float _768 = _765 * (_722.z + (-0.5));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = _736 * 0.5;
        float _773 = _746 * 0.5;
        float _774 = _756 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _789 = (dot(vec3(_383, _384, _385), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _799 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3405 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_801 + 1.0))) + _806) * _769;
        float _816 = _737 * 0.5;
        float _817 = _747 * 0.5;
        float _818 = _757 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_383, _384, _385), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3438 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_843 + 1.0))) + _848) * _770;
        float _858 = _738 * 0.5;
        float _859 = _748 * 0.5;
        float _860 = _758 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_383, _384, _385), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3471 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_885 + 1.0))) + _890) * _771;
        _907 = _738;
        _909 = _737;
        _910 = _736;
        _911 = _748;
        _912 = _747;
        _913 = _746;
        _914 = _758;
        _915 = _757;
        _916 = _756;
        _917 = _771;
        _918 = _770;
        _919 = _769;
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
    }
    else
    {
        _907 = _908;
        _909 = _908;
        _910 = _908;
        _911 = _908;
        _912 = _908;
        _913 = _908;
        _914 = _908;
        _915 = _908;
        _916 = _908;
        _917 = _908;
        _918 = _908;
        _919 = _908;
        _920 = 0.0;
        _921 = 0.0;
        _922 = 0.0;
    }
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _948 = fma(_605, cbModelParam._m0[30u].z, fma(_601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _597));
        float _952 = fma(_605, cbModelParam._m0[31u].z, fma(_601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _597));
        float _956 = fma(_605, cbModelParam._m0[32u].z, fma(_601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _597));
        float _979 = _597 + _383;
        float _980 = _601 + _384;
        float _981 = _605 + _385;
        float _991 = fma(_981, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979)) - _948;
        float _992 = fma(_981, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979)) - _952;
        float _993 = fma(_981, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979)) - _956;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_948 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_952 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[35u].z) + ((((((_956 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1047 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1014.x + (-0.5));
        float _1049 = _1047 * (_1014.y + (-0.5));
        float _1050 = _1047 * (_1014.z + (-0.5));
        float _1057 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1021.x + (-0.5));
        float _1059 = _1057 * (_1021.y + (-0.5));
        float _1060 = _1057 * (_1021.z + (-0.5));
        float _1067 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1028.x + (-0.5));
        float _1069 = _1067 * (_1028.y + (-0.5));
        float _1070 = _1067 * (_1028.z + (-0.5));
        float _1077 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1035.x + (-0.5));
        float _1079 = _1077 * (_1035.y + (-0.5));
        float _1080 = _1077 * (_1035.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_383, _384, _385), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3534 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1111 + 1.0))) + _1116) * _1081;
        float _1126 = _1049 * 0.5;
        float _1127 = _1059 * 0.5;
        float _1128 = _1069 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_383, _384, _385), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3567 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1153 + 1.0))) + _1158) * _1082;
        float _1168 = _1050 * 0.5;
        float _1169 = _1060 * 0.5;
        float _1170 = _1070 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_383, _384, _385), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3600 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1195 + 1.0))) + _1200) * _1083;
        _1217 = _1050;
        _1218 = _1049;
        _1219 = _1048;
        _1220 = _1060;
        _1221 = _1059;
        _1222 = _1058;
        _1223 = _1070;
        _1224 = _1069;
        _1225 = _1068;
        _1226 = _1083;
        _1227 = _1082;
        _1228 = _1081;
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _908;
        _1218 = _908;
        _1219 = _908;
        _1220 = _908;
        _1221 = _908;
        _1222 = _908;
        _1223 = _908;
        _1224 = _908;
        _1225 = _908;
        _1226 = _908;
        _1227 = _908;
        _1228 = _908;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _920)) + _920;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _922)) + _922;
    float _1264 = fma(_1243, cbSceneParam._m0[89u].z, fma(_1242, cbSceneParam._m0[89u].y, _1241 * cbSceneParam._m0[89u].x));
    float _1267 = fma(_1243, cbSceneParam._m0[90u].z, fma(_1242, cbSceneParam._m0[90u].y, _1241 * cbSceneParam._m0[90u].x));
    float _1270 = fma(_1243, cbSceneParam._m0[91u].z, fma(_1242, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1241));
    float _1285 = _544 * 0.5;
    float _1286 = _545 * 0.5;
    float _1287 = _546 * 0.5;
    float _1288 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1291 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1294 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1328;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1301 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_907, _911, _914, _917));
        float _1305 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_909, _912, _915, _918));
        float _1309 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_910, _913, _916, _919));
        float _1316 = dot(vec4(cbModelParam._m0[39u]), vec4(_1285, _1286, _1287, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1339;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1330 = dot(vec4(cbModelParam._m0[40u]), vec4(_1285, _1286, _1287, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1343 = (_1339 * cbModelParam._m0[1u].x) + (_1328 * (1.0 - cbModelParam._m0[1u].x));
    float _1353 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _386);
    float _1354 = isnan(_1353) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1353 : min(cbModelParam._m0[25u].z, _1353));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1403 = fma(_605, cbModelParam._m0[13u].z, fma(_601, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597)) + cbModelParam._m0[13u].w;
        float _1407 = fma(_605, cbModelParam._m0[14u].z, fma(_601, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597)) + cbModelParam._m0[14u].w;
        float _1411 = fma(_605, cbModelParam._m0[15u].z, fma(_601, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597)) + cbModelParam._m0[15u].w;
        float _1414 = fma(_546, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544));
        float _1417 = fma(_546, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544));
        float _1420 = fma(_546, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544));
        float _1448;
        if (_1414 > 0.0)
        {
            _1448 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1448 = frontier_phi_16_14_ladder;
        }
        float _1674;
        if (_1417 > 0.0)
        {
            _1674 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1674 = frontier_phi_25_21_ladder;
        }
        float _1920;
        if (_1420 > 0.0)
        {
            _1920 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1920 = frontier_phi_37_32_ladder;
        }
        float _1922 = isnan(_1674) ? _1448 : (isnan(_1448) ? _1674 : min(_1448, _1674));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1414) + _1403;
        float _1928 = (_1923 * _1417) + _1407;
        float _1929 = (_1923 * _1420) + _1411;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1932 = (-1.0) - _1930;
        float _1934 = _1930 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1929 > _1934) || ((_1929 < _1932) || ((_1928 > _1934) || ((_1928 < _1932) || ((_1927 < _1932) || (_1927 > _1934))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2053 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1929, cbModelParam._m0[9u].z, fma(_1928, cbModelParam._m0[9u].y, _1927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1929, cbModelParam._m0[10u].z, fma(_1928, cbModelParam._m0[10u].y, _1927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1929, cbModelParam._m0[11u].z, fma(_1928, cbModelParam._m0[11u].y, _1927 * cbModelParam._m0[11u].x))), _1354);
            frontier_phi_15_37_ladder = _2053.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2053.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2053.x * cbModelParam._m0[1u].y;
        }
        _1436 = frontier_phi_15_37_ladder_2;
        _1438 = frontier_phi_15_37_ladder_1;
        _1440 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_544, _545, _546), _1354);
        _1436 = _1424.x * cbModelParam._m0[1u].y;
        _1438 = _1424.y * cbModelParam._m0[1u].y;
        _1440 = _1424.z * cbModelParam._m0[1u].y;
    }
    float _1444 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _386);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1444 : min(cbModelParam._m0[25u].w, _1444));
    float _1538;
    float _1540;
    float _1542;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1502 = fma(_605, cbModelParam._m0[21u].z, fma(_601, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597)) + cbModelParam._m0[21u].w;
        float _1506 = fma(_605, cbModelParam._m0[22u].z, fma(_601, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597)) + cbModelParam._m0[22u].w;
        float _1510 = fma(_605, cbModelParam._m0[23u].z, fma(_601, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597)) + cbModelParam._m0[23u].w;
        float _1513 = fma(_546, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544));
        float _1516 = fma(_546, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544));
        float _1519 = fma(_546, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544));
        float _1679;
        if (_1513 > 0.0)
        {
            _1679 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1679 = frontier_phi_27_23_ladder;
        }
        float _1947;
        if (_1516 > 0.0)
        {
            _1947 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1947 = frontier_phi_39_34_ladder;
        }
        float _2152;
        if (_1519 > 0.0)
        {
            _2152 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2152 = frontier_phi_48_45_ladder;
        }
        float _2154 = isnan(_1947) ? _1679 : (isnan(_1679) ? _1947 : min(_1679, _1947));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1513) + _1502;
        float _2160 = (_2155 * _1516) + _1506;
        float _2161 = (_2155 * _1519) + _1510;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2162;
        float _2165 = _2162 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2161 > _2165) || ((_2161 < _2163) || ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 < _2163) || (_2159 > _2165))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2161, cbModelParam._m0[17u].z, fma(_2160, cbModelParam._m0[17u].y, _2159 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2161, cbModelParam._m0[18u].z, fma(_2160, cbModelParam._m0[18u].y, _2159 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2161, cbModelParam._m0[19u].z, fma(_2160, cbModelParam._m0[19u].y, _2159 * cbModelParam._m0[19u].x))), _1445);
            frontier_phi_24_48_ladder = _2359.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2359.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2359.x * cbModelParam._m0[1u].z;
        }
        _1538 = frontier_phi_24_48_ladder_2;
        _1540 = frontier_phi_24_48_ladder_1;
        _1542 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_544, _545, _546), _1445);
        _1538 = _1522.x * cbModelParam._m0[1u].z;
        _1540 = _1522.y * cbModelParam._m0[1u].z;
        _1542 = _1522.z * cbModelParam._m0[1u].z;
    }
    float _1554 = ((((1.0 - _565) * ((_552 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_565 * _552)) * _536;
    float _1555 = _1554 * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1556 = _1554 * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1557 = _1554 * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1560 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1555 * cbSceneParam._m0[91u].x));
    vec4 _1574 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_471, _472));
    float _1576 = _1574.w;
    float _1588 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1576);
    float _1589 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1576);
    float _1590 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1576);
    uvec4 _1594 = floatBitsToUint(cbInstanceData._m0[_511 + 5u]);
    uint _1596 = _1594.x * 14u;
    uint _1597 = _1596 + 13u;
    float _1604 = _536 + (-1.0);
    float _1609 = (cbLight._m0[_1597].x * _1604) + 1.0;
    float _1610 = (cbLight._m0[_1597].y * _1604) + 1.0;
    float _1611 = (cbLight._m0[_1597].z * _1604) + 1.0;
    float _1612 = (cbLight._m0[_1597].w * _1604) + 1.0;
    uint _1613 = _1596 + 5u;
    float _1619 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
    uint _1623 = _1596 + 4u;
    float _1633 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    uint _1637 = _1596 | 1u;
    float _1648 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_383, _384, _385));
    float _1651 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_383, _384, _385));
    float _3736 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _3747 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1656 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.3183098733425140380859375;
    float _1658 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1665 = ((cbLight._m0[_1613].x * _1619) * _1658) + (((cbLight._m0[_1623].x * _1588) * _1633) * _1656);
    float _1666 = ((_1619 * cbLight._m0[_1613].y) * _1658) + (((cbLight._m0[_1623].y * _1589) * _1633) * _1656);
    float _1667 = ((_1619 * cbLight._m0[_1613].z) * _1658) + (((cbLight._m0[_1623].z * _1590) * _1633) * _1656);
    uvec4 _1671 = floatBitsToUint(cbLight._m0[_1596 + 12u]);
    bool _1673 = _1671.x == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1673)
    {
        _1684 = _1665;
        _1686 = _1666;
        _1688 = _1667;
    }
    else
    {
        uint _1692 = _1596 + 6u;
        float _1708 = (dot(vec3(cbLight._m0[_1596 + 2u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1709 = _1708 * _1708;
        float _3758 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1711 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1684 = (((cbLight._m0[_1692].x * 0.3183098733425140380859375) * _1710) * _1711) + _1665;
        _1686 = (((cbLight._m0[_1692].y * 0.3183098733425140380859375) * _1710) * _1711) + _1666;
        _1688 = (((cbLight._m0[_1692].z * 0.3183098733425140380859375) * _1710) * _1711) + _1667;
    }
    bool _1691 = _1671.y == 0u;
    float _1729;
    float _1731;
    float _1733;
    if (_1691)
    {
        _1729 = _1684;
        _1731 = _1686;
        _1733 = _1688;
    }
    else
    {
        uint _1891 = _1596 + 7u;
        float _1907 = (dot(vec3(cbLight._m0[_1596 + 3u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _3774 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1910 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _1729 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1684;
        _1731 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1686;
        _1733 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1688;
    }
    uint _1736 = _1596 + 8u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1596].w)) * _386) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1596].x + _463;
    float _1752 = cbLight._m0[_1596].y + _464;
    float _1753 = cbLight._m0[_1596].z + _465;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1596].xyz));
    float _3790 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _1765 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1766 = dot(vec3(_383, _384, _385), vec3(_1758, _1759, _1760));
    float _3812 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_1758, _1759, _1760));
    float _3823 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = _1750 * _1750;
    float _1778 = ((_1769 * _1769) * (_1774 + (-1.0))) + 1.0;
    float _1789 = (exp2(log2(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1790 = 1.0 - _1750;
    float _1801 = (0.5 / (((_1765 * ((_1764 * _1790) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1790) + _1750) * _1764))) * _1764;
    float _3834 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1774 / ((_1778 * _1778) * 3.141590118408203125));
    uint _1817 = _1596 + 9u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _386) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1637].x + _463;
    float _1831 = cbLight._m0[_1637].y + _464;
    float _1832 = cbLight._m0[_1637].z + _465;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1637].xyz));
    float _3845 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1844 = dot(vec3(_383, _384, _385), vec3(_1837, _1838, _1839));
    float _3856 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1837, _1838, _1839));
    float _3867 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1829 * _1829;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1866 = 1.0 - _1829;
    float _1876 = (0.5 / (((_1765 * ((_1843 * _1866) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1866) + _1829) * _1843))) * _1843;
    float _3878 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1888 = (((_1865 * cbLight._m0[_1817].x) * _1878) * _1619) + ((((cbLight._m0[_1736].x * _1588) * _1789) * _1803) * _1633);
    float _1889 = (((_1865 * cbLight._m0[_1817].y) * _1878) * _1619) + ((((cbLight._m0[_1736].y * _1589) * _1789) * _1803) * _1633);
    float _1890 = (((_1865 * cbLight._m0[_1817].z) * _1878) * _1619) + ((((cbLight._m0[_1736].z * _1590) * _1789) * _1803) * _1633);
    float _1952;
    float _1954;
    float _1956;
    if (_1673)
    {
        _1952 = _1888;
        _1954 = _1889;
        _1956 = _1890;
    }
    else
    {
        uint _1958 = _1596 + 2u;
        uint _1962 = _1596 + 10u;
        float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _386) * 0.949999988079071044921875);
        float _1977 = _1976 * _1976;
        float _1978 = cbLight._m0[_1958].x + _463;
        float _1979 = cbLight._m0[_1958].y + _464;
        float _1980 = cbLight._m0[_1958].z + _465;
        float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
        float _1985 = _1984 * _1978;
        float _1986 = _1984 * _1979;
        float _1987 = _1984 * _1980;
        float _1988 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1958].xyz));
        float _3889 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1992 = dot(vec3(_383, _384, _385), vec3(_1985, _1986, _1987));
        float _3900 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1996 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_1985, _1986, _1987));
        float _3911 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2000 = _1977 * _1977;
        float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
        float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2014 = 1.0 - _1977;
        float _2024 = (0.5 / (((_1765 * ((_1991 * _2014) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2014) + _1977) * _1991))) * _1991;
        float _3922 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2026 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
        float _2027 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1952 = (((_2013 * cbLight._m0[_1962].x) * _2026) * _2027) + _1888;
        _1954 = (((_2013 * cbLight._m0[_1962].y) * _2026) * _2027) + _1889;
        _1956 = (((_2013 * cbLight._m0[_1962].z) * _2026) * _2027) + _1890;
    }
    float _2062;
    float _2064;
    float _2066;
    if (_1691)
    {
        _2062 = _1952;
        _2064 = _1954;
        _2066 = _1956;
    }
    else
    {
        uint _2073 = _1596 + 3u;
        uint _2077 = _1596 + 11u;
        float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _386) * 0.949999988079071044921875);
        float _2092 = _2091 * _2091;
        float _2093 = cbLight._m0[_2073].x + _463;
        float _2094 = cbLight._m0[_2073].y + _464;
        float _2095 = cbLight._m0[_2073].z + _465;
        float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
        float _2100 = _2099 * _2093;
        float _2101 = _2099 * _2094;
        float _2102 = _2099 * _2095;
        float _2103 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2073].xyz));
        float _3938 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _2107 = dot(vec3(_383, _384, _385), vec3(_2100, _2101, _2102));
        float _3949 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2111 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2100, _2101, _2102));
        float _3960 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2115 = _2092 * _2092;
        float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
        float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2129 = 1.0 - _2092;
        float _2139 = (0.5 / (((_1765 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2129) + _2092) * _2106))) * _2106;
        float _3971 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _2062 = (((_2128 * cbLight._m0[_2077].x) * _2141) * _2142) + _1952;
        _2064 = (((_2128 * cbLight._m0[_2077].y) * _2141) * _2142) + _1954;
        _2066 = (((_2128 * cbLight._m0[_2077].z) * _2141) * _2142) + _1956;
    }
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    if (_1594.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _472) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _471) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2524)
                {
                    frontier_phi_63_pred = _2513;
                    frontier_phi_63_pred_1 = _2512;
                    frontier_phi_63_pred_2 = _2511;
                    frontier_phi_63_pred_3 = _2510;
                    frontier_phi_63_pred_4 = _2509;
                    frontier_phi_63_pred_5 = _2508;
                }
                else
                {
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    uint _2638;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2523;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    for (;;)
                    {
                        uint _2642 = uint(findLSB(_2638)) + (_2514 << 5u);
                        uint _2639 = (_2638 + 4294967295u) & _2638;
                        uint _2644 = _2642 * 48u;
                        vec4 _2658 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2664 = (_2642 * 48u) + 4u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 3u)).x));
                        uint _2683 = (_2642 * 48u) + 8u;
                        vec3 _2694 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x));
                        float _2698 = _2658.x - _2218;
                        float _2699 = _2658.y - _2219;
                        float _2700 = _2658.z - _2220;
                        float _2701 = dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700));
                        float _2704 = inversesqrt(_2701);
                        float _2705 = _2704 * _2698;
                        float _2706 = _2704 * _2699;
                        float _2707 = _2704 * _2700;
                        float _2708 = dot(vec3(_492, _495, _498), vec3(_2705, _2706, _2707));
                        float _2713 = 1.0 - (_2701 * _2658.w);
                        float _3997 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2714 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2715 = sqrt(_2701) * _2677.w;
                        float _2718 = 1.39999997615814208984375 / (_2715 + 1.39999997615814208984375);
                        float _2719 = _2718 * _2718;
                        float _2722 = ((1.0 - _2719) * _2708) + _2719;
                        float _2725 = _2715 * _2715;
                        float _2729 = ((isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))) * _2714) / ((_2725 * 0.699999988079071044921875) + 1.0);
                        float _2733 = (-0.0) - _2218;
                        float _2734 = (-0.0) - _2219;
                        float _2735 = (-0.0) - _2220;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2740 = _2739 * _2733;
                        float _2741 = _2739 * _2734;
                        float _2742 = _2739 * _2735;
                        float _2750 = exp2(log2(1.0 / ((_2725 * 3.5) + 5.0)) * 0.25);
                        float _2751 = 1.0 - _552;
                        float _2758 = sqrt(1.0 - ((1.0 - (_2751 * _2751)) * (1.0 - (_2750 * _2750))));
                        float _2759 = _2758 * _2758;
                        float _2760 = _2759 * _2759;
                        float _2761 = _2740 + _2705;
                        float _2762 = _2741 + _2706;
                        float _2763 = _2742 + _2707;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2771 = dot(vec3(_492, _495, _498), vec3(_2740, _2741, _2742));
                        float _4013 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2774 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2775 = dot(vec3(_492, _495, _498), vec3(_2767 * _2761, _2767 * _2762, _2767 * _2763));
                        float _4024 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2778 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2782 = ((_2778 * _2778) * (_2760 + (-1.0))) + 1.0;
                        float _2783 = _2718 * _2759;
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2708) + _2784;
                        float _4035 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2788 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2789 = 1.0 - _2759;
                        float _2799 = (0.5 / (((_2788 * ((_2774 * _2789) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2788 * _2789) + _2759) * _2774))) * _2788;
                        float _4046 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2810 = (((_2760 * 3.1415927410125732421875) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) / ((_2782 * _2782) * ((_2725 * 2.1991131305694580078125) + 3.141590118408203125))) * _2714;
                        _2567 = (_2729 * _2677.x) + _2635;
                        _2568 = (_2729 * _2677.y) + _2636;
                        _2569 = (_2729 * _2677.z) + _2637;
                        _2564 = (_2810 * _2694.x) + _2632;
                        _2565 = (_2810 * _2694.y) + _2633;
                        _2566 = (_2810 * _2694.z) + _2634;
                        if (_2639 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2639;
                        }
                    }
                    frontier_phi_63_pred = _2569;
                    frontier_phi_63_pred_1 = _2568;
                    frontier_phi_63_pred_2 = _2567;
                    frontier_phi_63_pred_3 = _2566;
                    frontier_phi_63_pred_4 = _2565;
                    frontier_phi_63_pred_5 = _2564;
                }
                _2375 = frontier_phi_63_pred;
                _2373 = frontier_phi_63_pred_1;
                _2371 = frontier_phi_63_pred_2;
                _2369 = frontier_phi_63_pred_3;
                _2367 = frontier_phi_63_pred_4;
                _2365 = frontier_phi_63_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2365;
                    _2509 = _2367;
                    _2510 = _2369;
                    _2511 = _2371;
                    _2512 = _2373;
                    _2513 = _2375;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2381) & _2264) == 0u)
        {
            _2476 = _2364;
            _2478 = _2366;
            _2480 = _2368;
            _2482 = _2370;
            _2484 = _2372;
            _2486 = _2374;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2502 = _2501 * _2218;
            float _2503 = _2501 * _2219;
            float _2504 = _2501 * _2220;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2615 = _2364;
                float _2616 = _2366;
                float _2617 = _2368;
                float _2618 = _2370;
                float _2619 = _2372;
                float _2620 = _2374;
                uint _2621 = _2381;
                uint _2630;
                bool _2631;
                for (;;)
                {
                    _2630 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                    _2631 = _2630 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2631)
                    {
                        frontier_phi_69_pred = _2620;
                        frontier_phi_69_pred_1 = _2619;
                        frontier_phi_69_pred_2 = _2618;
                        frontier_phi_69_pred_3 = _2617;
                        frontier_phi_69_pred_4 = _2616;
                        frontier_phi_69_pred_5 = _2615;
                    }
                    else
                    {
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _2828 = _2615;
                        float _2829 = _2616;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        uint _2834 = _2630;
                        uint _2835;
                        vec4 _2860;
                        float _2861;
                        vec4 _2876;
                        vec3 _2888;
                        vec4 _2904;
                        vec4 _2920;
                        float _2967;
                        bool _2968;
                        for (;;)
                        {
                            uint _2845 = ((_2621 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2834));
                            _2835 = (_2834 + 4294967295u) & _2834;
                            uint _2847 = _2845 * 40u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            _2861 = _2860.w;
                            uint _2863 = (_2845 * 40u) + 4u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2878 = (_2845 * 40u) + 8u;
                            _2888 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x));
                            uint _2891 = (_2845 * 40u) + 16u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2907 = (_2845 * 40u) + 20u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2845 * 40u) + 24u;
                            vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2942 = (_2845 * 40u) + 28u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            _2967 = fma(_2220, _2955.z, fma(_2219, _2955.y, _2955.x * _2218)) + _2955.w;
                            _2968 = !((fma(_2220, _2936.z, fma(_2219, _2936.y, _2936.x * _2218)) + _2936.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2968)
                            {
                                float _2995 = _2860.x - _2218;
                                float _2996 = _2860.y - _2219;
                                float _2997 = _2860.z - _2220;
                                float _2998 = dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997));
                                float _3001 = inversesqrt(_2998);
                                float _3002 = _3001 * _2995;
                                float _3003 = _3001 * _2996;
                                float _3004 = _3001 * _2997;
                                float _3008 = 1.0 - (_2998 / (_2861 * _2861));
                                float _4057 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3013 = sqrt(_2998) * _2876.w;
                                float _3015 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                                float _3016 = _3015 * _3015;
                                float _3019 = ((1.0 - _3016) * dot(vec3(_3002, _3003, _3004), vec3(_492, _495, _498))) + _3016;
                                float _3022 = _3013 * _3013;
                                float _3026 = (fma(_2220, _2904.z, fma(_2219, _2904.y, _2904.x * _2218)) + _2904.w) / _2967;
                                float _3027 = (fma(_2220, _2920.z, fma(_2219, _2920.y, _2920.x * _2218)) + _2920.w) / _2967;
                                float _3031 = 1.0 - dot(vec2(_3026, _3027), vec2(_3026, _3027));
                                float _4073 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3033 = _3032 * (((isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))) * _3009) / ((_3022 * 0.699999988079071044921875) + 1.0));
                                float _3045 = exp2(log2(1.0 / ((_3022 * 3.5) + 5.0)) * 0.25);
                                float _3046 = 1.0 - _552;
                                float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                                float _3054 = _3053 * _3053;
                                float _3055 = _3054 * _3054;
                                float _3056 = _3002 - _2502;
                                float _3057 = _3003 - _2503;
                                float _3058 = _3004 - _2504;
                                float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                                float _3066 = dot(vec3(_492, _495, _498), vec3((-0.0) - _2502, (-0.0) - _2503, (-0.0) - _2504));
                                float _4084 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3069 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3070 = dot(vec3(_492, _495, _498), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                                float _4095 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                                float _3078 = _3015 * _3054;
                                float _3079 = _3078 * _3078;
                                float _3085 = ((1.0 - _3079) * dot(vec3(_492, _495, _498), vec3(_3002, _3003, _3004))) + _3079;
                                float _4106 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3087 = 1.0 - _3054;
                                float _3097 = (0.5 / (((_3086 * ((_3069 * _3087) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3054) * _3069))) * _3086;
                                float _4117 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3107 = (_3032 * _3009) * (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) / ((_3077 * _3077) * ((_3022 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3033 * _2876.z;
                                frontier_phi_75_pred_1 = _3033 * _2876.y;
                                frontier_phi_75_pred_2 = _3033 * _2876.x;
                                frontier_phi_75_pred_3 = _3107 * _2888.z;
                                frontier_phi_75_pred_4 = _3107 * _2888.y;
                                frontier_phi_75_pred_5 = _3107 * _2888.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3116 = frontier_phi_75_pred;
                            _3115 = frontier_phi_75_pred_1;
                            _3114 = frontier_phi_75_pred_2;
                            _3113 = frontier_phi_75_pred_3;
                            _3112 = frontier_phi_75_pred_4;
                            _3111 = frontier_phi_75_pred_5;
                            _2818 = _3114 + _2831;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            if (_2835 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2835;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2820;
                        frontier_phi_69_pred_1 = _2819;
                        frontier_phi_69_pred_2 = _2818;
                        frontier_phi_69_pred_3 = _2817;
                        frontier_phi_69_pred_4 = _2816;
                        frontier_phi_69_pred_5 = _2815;
                    }
                    _2487 = frontier_phi_69_pred;
                    _2485 = frontier_phi_69_pred_1;
                    _2483 = frontier_phi_69_pred_2;
                    _2481 = frontier_phi_69_pred_3;
                    _2479 = frontier_phi_69_pred_4;
                    _2477 = frontier_phi_69_pred_5;
                    uint _2622 = _2621 + 1u;
                    if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2615 = _2477;
                        _2616 = _2479;
                        _2617 = _2481;
                        _2618 = _2483;
                        _2619 = _2485;
                        _2620 = _2487;
                        _2621 = _2622;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2487;
                frontier_phi_57_58_ladder_1 = _2485;
                frontier_phi_57_58_ladder_2 = _2483;
                frontier_phi_57_58_ladder_3 = _2481;
                frontier_phi_57_58_ladder_4 = _2479;
                frontier_phi_57_58_ladder_5 = _2477;
            }
            else
            {
                frontier_phi_57_58_ladder = _2374;
                frontier_phi_57_58_ladder_1 = _2372;
                frontier_phi_57_58_ladder_2 = _2370;
                frontier_phi_57_58_ladder_3 = _2368;
                frontier_phi_57_58_ladder_4 = _2366;
                frontier_phi_57_58_ladder_5 = _2364;
            }
            _2476 = frontier_phi_57_58_ladder_5;
            _2478 = frontier_phi_57_58_ladder_4;
            _2480 = frontier_phi_57_58_ladder_3;
            _2482 = frontier_phi_57_58_ladder_2;
            _2484 = frontier_phi_57_58_ladder_1;
            _2486 = frontier_phi_57_58_ladder;
        }
        float _2491 = isnan(1.0) ? _536 : (isnan(_536) ? 1.0 : min(_536, 1.0));
        _2276 = (_2491 * _2482) + _1729;
        _2278 = (_2491 * _2484) + _1731;
        _2280 = (_2491 * _2486) + _1733;
        _2282 = ((_2476 * 0.039999999105930328369140625) * _2491) + _2062;
        _2284 = ((_2478 * 0.039999999105930328369140625) * _2491) + _2064;
        _2286 = ((_2480 * 0.039999999105930328369140625) * _2491) + _2066;
    }
    else
    {
        _2276 = _1729;
        _2278 = _1731;
        _2280 = _1733;
        _2282 = _2062;
        _2284 = _2064;
        _2286 = _2066;
    }
    float _4133 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4144 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4155 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    uint _2306 = _511 + 6u;
    float _2314 = _471 / cbSceneParam._m0[86u].x;
    float _2315 = _472 / cbSceneParam._m0[86u].y;
    vec4 _2329 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, (log2((isnan(cbSceneParam._m0[77u].w) ? _405 : (isnan(_405) ? cbSceneParam._m0[77u].w : min(_405, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2331 = _2329.x;
    float _2332 = _2329.y;
    float _2333 = _2329.z;
    float _2334 = _2329.w;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_405 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_405) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _405 : min(cbSceneParam._m0[80u].w, _405));
        float _2390 = _2389 / _405;
        float _2401 = _2390 * _456;
        float _2402 = _457 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2404 = _2390 * _458;
        float _2406 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2402;
        float _2414 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2414;
        float _2422 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2424 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2577;
        if (abs((_2403 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2577 = ((((_2407 > 0.0) ? exp2(_2422 * _2407) : (2.0 - exp2(_2424 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2537 = 1.0 / cbSceneParam._m0[80u].x;
            float _2538 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2539 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            _2577 = ((abs(_2414 / _2403) * cbSceneParam._m0[80u].y) * ((((_2548 - _2549) * 2.0) - ((exp2(_2422 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)))) - exp2(_2422 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))))) * _2537)) - ((exp2(_2424 * _2548) - exp2(_2424 * _2549)) * _2537))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2579 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, 1.0), 0.0);
        float _2588 = exp2((_2577 * (-1.44269502162933349609375)) * (1.0 - _2579.w));
        float _2589 = log2(_2588);
        float _2605 = log2(_2334);
        _2426 = (exp2(_2605 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].x)) * _2579.x) / cbSceneParam._m0[78u].x)) + _2331;
        _2428 = (exp2(_2605 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].y)) * _2579.y) / cbSceneParam._m0[78u].y)) + _2332;
        _2430 = (exp2(_2605 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].z)) * _2579.z) / cbSceneParam._m0[78u].z)) + _2333;
        _2432 = _2588 * _2334;
    }
    else
    {
        _2426 = _2331;
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
    }
    float _2444 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2445 = _2444 == 3.0;
    float _2446 = log2(_2432);
    float _2453 = exp2(_2446 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2276 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _536))) + ((_2282 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1343)) * cbPerFrame._m0[3u].x));
    float _2454 = exp2(_2446 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2278 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _536))) + ((_2284 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1343)) * cbPerFrame._m0[3u].x));
    float _2455 = exp2(_2446 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2280 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _536))) + ((_2286 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1343)) * cbPerFrame._m0[3u].x));
    float _2464 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2464 * (_2445 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2426)));
    SV_Target.y = _2464 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.z = _2464 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.w = cbInstanceData._m0[_2306].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2306].w;
}


