#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _956;
float _3349;
float _3350;
float _3351;
float _3352;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _244.x;
    float _248 = _244.y;
    float _249 = _244.z;
    vec4 _281 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _294 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3361 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _304 = ((_281.z - _249) * _295) + _249;
    float _308 = ((((_281.x - _247) * _295) + _247) * 2.0) + (-1.0);
    float _310 = ((((_281.y - _248) * _295) + _248) * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3372 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))));
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _339 = _334.x * cbMtdParam._m0[9u].x;
    float _340 = _334.y * cbMtdParam._m0[9u].y;
    float _341 = _334.z * cbMtdParam._m0[9u].z;
    vec4 _360 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _374 = (((_360.x * cbMtdParam._m0[10u].x) - _339) * _295) + _339;
    float _375 = (((_360.y * cbMtdParam._m0[10u].y) - _340) * _295) + _340;
    float _376 = (((_360.z * cbMtdParam._m0[10u].z) - _341) * _295) + _341;
    float _379 = fma(_316, _228, fma(_310, _220 * TANGENT.x, (_206 * _198) * _308));
    float _382 = fma(_316, _229, fma(_310, _220 * TANGENT.y, (_206 * _199) * _308));
    float _385 = fma(_316, _230, fma(_310, _220 * TANGENT.z, (_206 * _200) * _308));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3383 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _393 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3405 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3416 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    vec4 _477 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _479 = _477.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _636 = sqrt(((_463 * _463) + (_464 * _464)) + (_465 * _465));
        float _642 = (cbMatDynParam._m0[5u].x * _636) + cbMatDynParam._m0[5u].y;
        float _3427 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _643 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _647 = (cbMatDynParam._m0[5u].z * _636) + cbMatDynParam._m0[5u].w;
        float _3438 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) - _643)) + _643) < ((_479 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _491 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _492 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _512 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _515 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _518 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _531 = uint(roundEven(NORMAL.w)) * 13u;
    uint _532 = _531 + 9u;
    uint _533 = _532 + uint(cbMatDynParam._m0[0u].w);
    float _539 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_533].x;
    float _540 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_533].y;
    float _541 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * cbInstanceData._m0[_533].z;
    float _3449 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    vec4 _553 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _491, cbSceneParam._m0[86u].y * _492));
    float _556 = _553.x * TEXCOORD_9.w;
    float _557 = dot(vec3(_390, _391, _392), vec3(_470, _471, _472));
    float _560 = _557 * 2.0;
    float _564 = (_560 * _390) - _470;
    float _565 = (_560 * _391) - _471;
    float _566 = (_560 * _392) - _472;
    float _570 = abs(dot(vec3(_470, _471, _472), vec3(_390, _391, _392)));
    float _3482 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _572 = sqrt(_393);
    float _585 = exp2((_572 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_572 * 3.0));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_625, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _617));
        float _684 = fma(_625, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _617));
        float _688 = fma(_625, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _617));
        float _713 = _617 + _390;
        float _714 = _621 + _391;
        float _715 = _625 + _392;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_390, _391, _392), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3530 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_390, _391, _392), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3563 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_390, _391, _392), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3596 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_625, cbModelParam._m0[30u].z, fma(_621, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _617));
        float _1003 = fma(_625, cbModelParam._m0[31u].z, fma(_621, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _617));
        float _1007 = fma(_625, cbModelParam._m0[32u].z, fma(_621, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _617));
        float _1030 = _617 + _390;
        float _1031 = _621 + _391;
        float _1032 = _625 + _392;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_390, _391, _392), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3659 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_390, _391, _392), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3692 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_390, _391, _392), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3725 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = _956;
        _1278 = _956;
        _1279 = _956;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _564 * 0.5;
    float _1337 = _565 * 0.5;
    float _1338 = _566 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_955, _959, _962, _965));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_957, _960, _963, _966));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _961, _964, _967));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1454 = fma(_625, cbModelParam._m0[13u].z, fma(_621, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _617)) + cbModelParam._m0[13u].w;
        float _1458 = fma(_625, cbModelParam._m0[14u].z, fma(_621, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _617)) + cbModelParam._m0[14u].w;
        float _1462 = fma(_625, cbModelParam._m0[15u].z, fma(_621, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _617)) + cbModelParam._m0[15u].w;
        float _1465 = fma(_566, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564));
        float _1468 = fma(_566, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564));
        float _1471 = fma(_566, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564));
        float _1499;
        if (_1465 > 0.0)
        {
            _1499 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1499 = frontier_phi_19_17_ladder;
        }
        float _1725;
        if (_1468 > 0.0)
        {
            _1725 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1725 = frontier_phi_28_24_ladder;
        }
        float _1971;
        if (_1471 > 0.0)
        {
            _1971 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1971 = frontier_phi_40_35_ladder;
        }
        float _1973 = isnan(_1725) ? _1499 : (isnan(_1499) ? _1725 : min(_1499, _1725));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1465) + _1454;
        float _1979 = (_1974 * _1468) + _1458;
        float _1980 = (_1974 * _1471) + _1462;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2104 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_18_40_ladder = _2104.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2104.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2104.x * cbModelParam._m0[1u].y;
        }
        _1487 = frontier_phi_18_40_ladder_2;
        _1489 = frontier_phi_18_40_ladder_1;
        _1491 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_564, _565, _566), _1405);
        _1487 = _1475.x * cbModelParam._m0[1u].y;
        _1489 = _1475.y * cbModelParam._m0[1u].y;
        _1491 = _1475.z * cbModelParam._m0[1u].y;
    }
    float _1495 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1495 : min(cbModelParam._m0[25u].w, _1495));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_625, cbModelParam._m0[21u].z, fma(_621, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _617)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_625, cbModelParam._m0[22u].z, fma(_621, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _617)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_625, cbModelParam._m0[23u].z, fma(_621, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _617)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_566, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564));
        float _1567 = fma(_566, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564));
        float _1570 = fma(_566, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564));
        float _1730;
        if (_1564 > 0.0)
        {
            _1730 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1730 = frontier_phi_30_26_ladder;
        }
        float _1998;
        if (_1567 > 0.0)
        {
            _1998 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1998 = frontier_phi_42_37_ladder;
        }
        float _2203;
        if (_1570 > 0.0)
        {
            _2203 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2203 = frontier_phi_51_48_ladder;
        }
        float _2205 = isnan(_1998) ? _1730 : (isnan(_1730) ? _1998 : min(_1730, _1998));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1564) + _1553;
        float _2211 = (_2206 * _1567) + _1557;
        float _2212 = (_2206 * _1570) + _1561;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2212, cbModelParam._m0[17u].z, fma(_2211, cbModelParam._m0[17u].y, _2210 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2212, cbModelParam._m0[18u].z, fma(_2211, cbModelParam._m0[18u].y, _2210 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2212, cbModelParam._m0[19u].z, fma(_2211, cbModelParam._m0[19u].y, _2210 * cbModelParam._m0[19u].x))), _1496);
            frontier_phi_27_51_ladder = _2410.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2410.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2410.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_27_51_ladder_2;
        _1591 = frontier_phi_27_51_ladder_1;
        _1593 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_564, _565, _566), _1496);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1605 = ((((1.0 - _585) * ((_572 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_585 * _572)) * _556;
    float _1606 = _1605 * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1607 = _1605 * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1608 = _1605 * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    vec4 _1625 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_491, _492));
    float _1627 = _1625.w;
    float _1639 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1627);
    float _1640 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1627);
    float _1641 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1627);
    uvec4 _1645 = floatBitsToUint(cbInstanceData._m0[_531 + 5u]);
    uint _1647 = _1645.x * 14u;
    uint _1648 = _1647 + 13u;
    float _1655 = _556 + (-1.0);
    float _1660 = (cbLight._m0[_1648].x * _1655) + 1.0;
    float _1661 = (cbLight._m0[_1648].y * _1655) + 1.0;
    float _1662 = (cbLight._m0[_1648].z * _1655) + 1.0;
    float _1663 = (cbLight._m0[_1648].w * _1655) + 1.0;
    uint _1664 = _1647 + 5u;
    float _1670 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1674 = _1647 + 4u;
    float _1683 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1687 = _1647 | 1u;
    float _1698 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_390, _391, _392));
    float _1701 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_390, _391, _392));
    float _3861 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _3872 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1706 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1708 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
    float _1715 = ((cbLight._m0[_1664].x * _1670) * _1708) + (((cbLight._m0[_1674].x * _1639) * _1683) * _1706);
    float _1716 = ((_1670 * cbLight._m0[_1664].y) * _1708) + (((cbLight._m0[_1674].y * _1640) * _1683) * _1706);
    float _1717 = ((_1670 * cbLight._m0[_1664].z) * _1708) + (((cbLight._m0[_1674].z * _1641) * _1683) * _1706);
    uvec4 _1722 = floatBitsToUint(cbLight._m0[_1647 + 12u]);
    bool _1724 = _1722.x == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1724)
    {
        _1735 = _1715;
        _1737 = _1716;
        _1739 = _1717;
    }
    else
    {
        uint _1743 = _1647 + 6u;
        float _1759 = (dot(vec3(cbLight._m0[_1647 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1760 = _1759 * _1759;
        float _3883 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1762 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _1735 = (((cbLight._m0[_1743].x * 0.3183098733425140380859375) * _1761) * _1762) + _1715;
        _1737 = (((cbLight._m0[_1743].y * 0.3183098733425140380859375) * _1761) * _1762) + _1716;
        _1739 = (((cbLight._m0[_1743].z * 0.3183098733425140380859375) * _1761) * _1762) + _1717;
    }
    bool _1742 = _1722.y == 0u;
    float _1780;
    float _1782;
    float _1784;
    if (_1742)
    {
        _1780 = _1735;
        _1782 = _1737;
        _1784 = _1739;
    }
    else
    {
        uint _1942 = _1647 + 7u;
        float _1958 = (dot(vec3(cbLight._m0[_1647 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _3899 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1961 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1780 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1735;
        _1782 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1737;
        _1784 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1739;
    }
    uint _1787 = _1647 + 8u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _393) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1647].x + _470;
    float _1803 = cbLight._m0[_1647].y + _471;
    float _1804 = cbLight._m0[_1647].z + _472;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1647].xyz));
    float _3915 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _1816 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1817 = dot(vec3(_390, _391, _392), vec3(_1809, _1810, _1811));
    float _3937 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1821 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1809, _1810, _1811));
    float _3948 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1825 = _1801 * _1801;
    float _1829 = ((_1820 * _1820) * (_1825 + (-1.0))) + 1.0;
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1841 = 1.0 - _1801;
    float _1852 = (0.5 / (((_1816 * ((_1815 * _1841) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1841) + _1801) * _1815))) * _1815;
    float _3959 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1825 / ((_1829 * _1829) * 3.141590118408203125));
    uint _1868 = _1647 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _393) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1687].x + _470;
    float _1882 = cbLight._m0[_1687].y + _471;
    float _1883 = cbLight._m0[_1687].z + _472;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1687].xyz));
    float _3970 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1895 = dot(vec3(_390, _391, _392), vec3(_1888, _1889, _1890));
    float _3981 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1888, _1889, _1890));
    float _3992 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1917 = 1.0 - _1880;
    float _1927 = (0.5 / (((_1816 * ((_1894 * _1917) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1917) + _1880) * _1894))) * _1894;
    float _4003 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1939 = (((_1916 * cbLight._m0[_1868].x) * _1929) * _1670) + ((((cbLight._m0[_1787].x * _1639) * _1840) * _1854) * _1683);
    float _1940 = (((_1916 * cbLight._m0[_1868].y) * _1929) * _1670) + ((((cbLight._m0[_1787].y * _1640) * _1840) * _1854) * _1683);
    float _1941 = (((_1916 * cbLight._m0[_1868].z) * _1929) * _1670) + ((((cbLight._m0[_1787].z * _1641) * _1840) * _1854) * _1683);
    float _2003;
    float _2005;
    float _2007;
    if (_1724)
    {
        _2003 = _1939;
        _2005 = _1940;
        _2007 = _1941;
    }
    else
    {
        uint _2009 = _1647 + 2u;
        uint _2013 = _1647 + 10u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _393) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _470;
        float _2030 = cbLight._m0[_2009].y + _471;
        float _2031 = cbLight._m0[_2009].z + _472;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2009].xyz));
        float _4014 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2043 = dot(vec3(_390, _391, _392), vec3(_2036, _2037, _2038));
        float _4025 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _4036 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2065 = 1.0 - _2028;
        float _2075 = (0.5 / (((_1816 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2065) + _2028) * _2042))) * _2042;
        float _4047 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _2003 = (((_2064 * cbLight._m0[_2013].x) * _2077) * _2078) + _1939;
        _2005 = (((_2064 * cbLight._m0[_2013].y) * _2077) * _2078) + _1940;
        _2007 = (((_2064 * cbLight._m0[_2013].z) * _2077) * _2078) + _1941;
    }
    float _2113;
    float _2115;
    float _2117;
    if (_1742)
    {
        _2113 = _2003;
        _2115 = _2005;
        _2117 = _2007;
    }
    else
    {
        uint _2124 = _1647 + 3u;
        uint _2128 = _1647 + 11u;
        float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _393) * 0.949999988079071044921875);
        float _2143 = _2142 * _2142;
        float _2144 = cbLight._m0[_2124].x + _470;
        float _2145 = cbLight._m0[_2124].y + _471;
        float _2146 = cbLight._m0[_2124].z + _472;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2151 = _2150 * _2144;
        float _2152 = _2150 * _2145;
        float _2153 = _2150 * _2146;
        float _2154 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2124].xyz));
        float _4063 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2158 = dot(vec3(_390, _391, _392), vec3(_2151, _2152, _2153));
        float _4074 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2162 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2151, _2152, _2153));
        float _4085 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2166 = _2143 * _2143;
        float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
        float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2180 = 1.0 - _2143;
        float _2190 = (0.5 / (((_1816 * ((_2157 * _2180) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2180) + _2143) * _2157))) * _2157;
        float _4096 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2113 = (((_2179 * cbLight._m0[_2128].x) * _2192) * _2193) + _2003;
        _2115 = (((_2179 * cbLight._m0[_2128].y) * _2192) * _2193) + _2005;
        _2117 = (((_2179 * cbLight._m0[_2128].z) * _2192) * _2193) + _2007;
    }
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    if (_1645.y == 0u)
    {
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2268;
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2268;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2268;
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _492) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _491) / _2284)));
        float _2305 = (log2(_2271 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
        }
        else
        {
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            uint _2573 = 0u;
            uint _2582;
            bool _2583;
            for (;;)
            {
                _2582 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                _2583 = _2582 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2583)
                {
                    frontier_phi_68_pred = _2569;
                    frontier_phi_68_pred_1 = _2572;
                    frontier_phi_68_pred_2 = _2571;
                    frontier_phi_68_pred_3 = _2570;
                    frontier_phi_68_pred_4 = _2568;
                    frontier_phi_68_pred_5 = _2567;
                }
                else
                {
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    uint _2718;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2582;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    for (;;)
                    {
                        uint _2722 = uint(findLSB(_2718)) + (_2573 << 5u);
                        uint _2719 = (_2718 + 4294967295u) & _2718;
                        uint _2724 = _2722 * 48u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 3u)).x));
                        uint _2744 = (_2722 * 48u) + 4u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2763 = (_2722 * 48u) + 8u;
                        vec3 _2774 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x));
                        float _2778 = _2738.x - _2269;
                        float _2779 = _2738.y - _2270;
                        float _2780 = _2738.z - _2271;
                        float _2781 = dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780));
                        float _2784 = inversesqrt(_2781);
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2788 = dot(vec3(_512, _515, _518), vec3(_2785, _2786, _2787));
                        float _2793 = 1.0 - (_2781 * _2738.w);
                        float _4122 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2795 = sqrt(_2781) * _2757.w;
                        float _2798 = 1.39999997615814208984375 / (_2795 + 1.39999997615814208984375);
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2788) + _2799;
                        float _2805 = _2795 * _2795;
                        float _2809 = ((isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))) * _2794) / ((_2805 * 0.699999988079071044921875) + 1.0);
                        float _2813 = (-0.0) - _2269;
                        float _2814 = (-0.0) - _2270;
                        float _2815 = (-0.0) - _2271;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2830 = exp2(log2(1.0 / ((_2805 * 3.5) + 5.0)) * 0.25);
                        float _2831 = 1.0 - _572;
                        float _2838 = sqrt(1.0 - ((1.0 - (_2831 * _2831)) * (1.0 - (_2830 * _2830))));
                        float _2839 = _2838 * _2838;
                        float _2840 = _2839 * _2839;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2851 = dot(vec3(_512, _515, _518), vec3(_2820, _2821, _2822));
                        float _4138 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2855 = dot(vec3(_512, _515, _518), vec3(_2847 * _2841, _2847 * _2842, _2847 * _2843));
                        float _4149 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2862 = ((_2858 * _2858) * (_2840 + (-1.0))) + 1.0;
                        float _2863 = _2798 * _2839;
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2788) + _2864;
                        float _4160 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2869 = 1.0 - _2839;
                        float _2879 = (0.5 / (((_2868 * ((_2854 * _2869) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2869) + _2839) * _2854))) * _2868;
                        float _4171 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2890 = (((_2840 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_2862 * _2862) * ((_2805 * 2.1991131305694580078125) + 3.141590118408203125))) * _2794;
                        _2642 = (_2809 * _2757.x) + _2715;
                        _2643 = (_2809 * _2757.y) + _2716;
                        _2644 = (_2809 * _2757.z) + _2717;
                        _2639 = (_2890 * _2774.x) + _2712;
                        _2640 = (_2890 * _2774.y) + _2713;
                        _2641 = (_2890 * _2774.z) + _2714;
                        if (_2719 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2719;
                        }
                    }
                    frontier_phi_68_pred = _2641;
                    frontier_phi_68_pred_1 = _2644;
                    frontier_phi_68_pred_2 = _2643;
                    frontier_phi_68_pred_3 = _2642;
                    frontier_phi_68_pred_4 = _2640;
                    frontier_phi_68_pred_5 = _2639;
                }
                _2420 = frontier_phi_68_pred;
                _2426 = frontier_phi_68_pred_1;
                _2424 = frontier_phi_68_pred_2;
                _2422 = frontier_phi_68_pred_3;
                _2418 = frontier_phi_68_pred_4;
                _2416 = frontier_phi_68_pred_5;
                uint _2574 = _2573 + 1u;
                if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2567 = _2416;
                    _2568 = _2418;
                    _2569 = _2420;
                    _2570 = _2422;
                    _2571 = _2424;
                    _2572 = _2426;
                    _2573 = _2574;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
        }
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.z;
        uint _2432 = (_2430 >> 8u) & 15u;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        if (((4294967295u << _2432) & _2315) == 0u)
        {
            _2535 = _2415;
            _2537 = _2417;
            _2539 = _2419;
            _2541 = _2421;
            _2543 = _2423;
            _2545 = _2425;
        }
        else
        {
            float _2560 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
            float _2561 = _2560 * _2269;
            float _2562 = _2560 * _2270;
            float _2563 = _2560 * _2271;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2432 < ((_2430 >> 12u) & 15u))
            {
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2695 = _2415;
                float _2696 = _2417;
                float _2697 = _2419;
                float _2698 = _2421;
                float _2699 = _2423;
                float _2700 = _2425;
                uint _2701 = _2432;
                uint _2710;
                bool _2711;
                for (;;)
                {
                    _2710 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2701 << 2u)) >> 2u)).x;
                    _2711 = _2710 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2711)
                    {
                        frontier_phi_79_pred = _2700;
                        frontier_phi_79_pred_1 = _2699;
                        frontier_phi_79_pred_2 = _2698;
                        frontier_phi_79_pred_3 = _2697;
                        frontier_phi_79_pred_4 = _2696;
                        frontier_phi_79_pred_5 = _2695;
                    }
                    else
                    {
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        uint _2923 = _2710;
                        uint _2924;
                        vec4 _2949;
                        float _2950;
                        vec4 _2965;
                        vec3 _2977;
                        vec4 _2993;
                        vec4 _3009;
                        float _3056;
                        bool _3057;
                        for (;;)
                        {
                            uint _2934 = ((_2701 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2923));
                            _2924 = (_2923 + 4294967295u) & _2923;
                            uint _2936 = _2934 * 40u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2950 = _2949.w;
                            uint _2952 = (_2934 * 40u) + 4u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2967 = (_2934 * 40u) + 8u;
                            _2977 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x));
                            uint _2980 = (_2934 * 40u) + 16u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2996 = (_2934 * 40u) + 20u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2934 * 40u) + 24u;
                            vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3031 = (_2934 * 40u) + 28u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3056 = fma(_2271, _3044.z, fma(_2270, _3044.y, _3044.x * _2269)) + _3044.w;
                            _3057 = !((fma(_2271, _3025.z, fma(_2270, _3025.y, _3025.x * _2269)) + _3025.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3057)
                            {
                                float _3084 = _2949.x - _2269;
                                float _3085 = _2949.y - _2270;
                                float _3086 = _2949.z - _2271;
                                float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                                float _3090 = inversesqrt(_3087);
                                float _3091 = _3090 * _3084;
                                float _3092 = _3090 * _3085;
                                float _3093 = _3090 * _3086;
                                float _3097 = 1.0 - (_3087 / (_2950 * _2950));
                                float _4182 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3102 = sqrt(_3087) * _2965.w;
                                float _3104 = 1.39999997615814208984375 / (_3102 + 1.39999997615814208984375);
                                float _3105 = _3104 * _3104;
                                float _3108 = ((1.0 - _3105) * dot(vec3(_3091, _3092, _3093), vec3(_512, _515, _518))) + _3105;
                                float _3111 = _3102 * _3102;
                                float _3115 = (fma(_2271, _2993.z, fma(_2270, _2993.y, _2993.x * _2269)) + _2993.w) / _3056;
                                float _3116 = (fma(_2271, _3009.z, fma(_2270, _3009.y, _3009.x * _2269)) + _3009.w) / _3056;
                                float _3120 = 1.0 - dot(vec2(_3115, _3116), vec2(_3115, _3116));
                                float _4198 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3122 = _3121 * (((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3098) / ((_3111 * 0.699999988079071044921875) + 1.0));
                                float _3134 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                                float _3135 = 1.0 - _572;
                                float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                                float _3143 = _3142 * _3142;
                                float _3144 = _3143 * _3143;
                                float _3145 = _3091 - _2561;
                                float _3146 = _3092 - _2562;
                                float _3147 = _3093 - _2563;
                                float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                                float _3155 = dot(vec3(_512, _515, _518), vec3((-0.0) - _2561, (-0.0) - _2562, (-0.0) - _2563));
                                float _4209 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3159 = dot(vec3(_512, _515, _518), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                                float _4220 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                                float _3167 = _3104 * _3143;
                                float _3168 = _3167 * _3167;
                                float _3174 = ((1.0 - _3168) * dot(vec3(_512, _515, _518), vec3(_3091, _3092, _3093))) + _3168;
                                float _4231 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3176 = 1.0 - _3143;
                                float _3186 = (0.5 / (((_3175 * ((_3158 * _3176) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3143) * _3158))) * _3175;
                                float _4242 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3196 = (_3121 * _3098) * (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_3166 * _3166) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3122 * _2965.z;
                                frontier_phi_85_pred_1 = _3122 * _2965.y;
                                frontier_phi_85_pred_2 = _3122 * _2965.x;
                                frontier_phi_85_pred_3 = _3196 * _2977.z;
                                frontier_phi_85_pred_4 = _3196 * _2977.y;
                                frontier_phi_85_pred_5 = _3196 * _2977.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3205 = frontier_phi_85_pred;
                            _3204 = frontier_phi_85_pred_1;
                            _3203 = frontier_phi_85_pred_2;
                            _3202 = frontier_phi_85_pred_3;
                            _3201 = frontier_phi_85_pred_4;
                            _3200 = frontier_phi_85_pred_5;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            _2909 = _3205 + _2922;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            if (_2924 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2924;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2909;
                        frontier_phi_79_pred_1 = _2908;
                        frontier_phi_79_pred_2 = _2907;
                        frontier_phi_79_pred_3 = _2906;
                        frontier_phi_79_pred_4 = _2905;
                        frontier_phi_79_pred_5 = _2904;
                    }
                    _2546 = frontier_phi_79_pred;
                    _2544 = frontier_phi_79_pred_1;
                    _2542 = frontier_phi_79_pred_2;
                    _2540 = frontier_phi_79_pred_3;
                    _2538 = frontier_phi_79_pred_4;
                    _2536 = frontier_phi_79_pred_5;
                    uint _2702 = _2701 + 1u;
                    if (_2702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2695 = _2536;
                        _2696 = _2538;
                        _2697 = _2540;
                        _2698 = _2542;
                        _2699 = _2544;
                        _2700 = _2546;
                        _2701 = _2702;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2542;
                frontier_phi_60_61_ladder_1 = _2546;
                frontier_phi_60_61_ladder_2 = _2544;
                frontier_phi_60_61_ladder_3 = _2540;
                frontier_phi_60_61_ladder_4 = _2538;
                frontier_phi_60_61_ladder_5 = _2536;
            }
            else
            {
                frontier_phi_60_61_ladder = _2421;
                frontier_phi_60_61_ladder_1 = _2425;
                frontier_phi_60_61_ladder_2 = _2423;
                frontier_phi_60_61_ladder_3 = _2419;
                frontier_phi_60_61_ladder_4 = _2417;
                frontier_phi_60_61_ladder_5 = _2415;
            }
            _2535 = frontier_phi_60_61_ladder_5;
            _2537 = frontier_phi_60_61_ladder_4;
            _2539 = frontier_phi_60_61_ladder_3;
            _2541 = frontier_phi_60_61_ladder;
            _2543 = frontier_phi_60_61_ladder_2;
            _2545 = frontier_phi_60_61_ladder_1;
        }
        float _2550 = isnan(1.0) ? _556 : (isnan(_556) ? 1.0 : min(_556, 1.0));
        _2327 = (_2550 * _2541) + _1780;
        _2329 = (_2550 * _2543) + _1782;
        _2331 = (_2550 * _2545) + _1784;
        _2333 = ((_2535 * 0.039999999105930328369140625) * _2550) + _2113;
        _2335 = ((_2537 * 0.039999999105930328369140625) * _2550) + _2115;
        _2337 = ((_2539 * 0.039999999105930328369140625) * _2550) + _2117;
    }
    else
    {
        _2327 = _1780;
        _2329 = _1782;
        _2331 = _1784;
        _2333 = _2113;
        _2335 = _2115;
        _2337 = _2117;
    }
    float _4258 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4269 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4280 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _2354 = ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2327 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _556))) + ((_2333 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2355 = ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2329 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _556))) + ((_2335 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2356 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2331 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _556))) + ((_2337 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    uint _2357 = _531 + 6u;
    float _2365 = _491 / cbSceneParam._m0[86u].x;
    float _2366 = _492 / cbSceneParam._m0[86u].y;
    vec4 _2380 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2382 = _2380.x;
    float _2383 = _2380.y;
    float _2384 = _2380.z;
    float _2385 = _2380.w;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2440 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2441 = _2440 / _412;
        float _2452 = _2441 * _463;
        float _2453 = _464 * _2441;
        float _2454 = (-0.0) - _2453;
        float _2455 = _2441 * _465;
        float _2457 = (cbSceneParam._m0[77u].w * _2454) / _2440;
        float _2458 = _2457 + cbSceneParam._m0[79u].w;
        float _2459 = cbSceneParam._m0[79u].w - _2453;
        float _2465 = sqrt(((_2452 * _2452) + (_2453 * _2453)) + (_2455 * _2455));
        float _2468 = (1.0 - (cbSceneParam._m0[77u].w / _2440)) * _2465;
        float _2473 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2475 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2652;
        if (abs((_2454 - _2457) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2652 = ((((_2458 > 0.0) ? exp2(_2473 * _2458) : (2.0 - exp2(_2475 * _2458))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2468;
        }
        else
        {
            float _2596 = 1.0 / cbSceneParam._m0[80u].x;
            float _2597 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : max(_2458, _2459));
            float _2598 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : min(_2458, _2459));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            float _2608 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : min(_2598, 0.0));
            _2652 = ((abs(_2465 / _2454) * cbSceneParam._m0[80u].y) * ((((_2607 - _2608) * 2.0) - ((exp2(_2473 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0)))) - exp2(_2473 * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0))))) * _2596)) - ((exp2(_2475 * _2607) - exp2(_2475 * _2608)) * _2596))) + (_2468 * cbSceneParam._m0[80u].z);
        }
        vec4 _2654 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, 1.0), 0.0);
        float _2663 = exp2((_2652 * (-1.44269502162933349609375)) * (1.0 - _2654.w));
        float _2664 = log2(_2663);
        float _2680 = log2(_2385);
        _2477 = (exp2(_2680 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2664 * cbSceneParam._m0[78u].x)) * _2654.x) / cbSceneParam._m0[78u].x)) + _2382;
        _2479 = (exp2(_2680 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2664 * cbSceneParam._m0[78u].y)) * _2654.y) / cbSceneParam._m0[78u].y)) + _2383;
        _2481 = (exp2(_2680 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2664 * cbSceneParam._m0[78u].z)) * _2654.z) / cbSceneParam._m0[78u].z)) + _2384;
        _2483 = _2663 * _2385;
    }
    else
    {
        _2477 = _2382;
        _2479 = _2383;
        _2481 = _2384;
        _2483 = _2385;
    }
    bool _2690;
    vec4 _2493;
    vec4 _2515;
    float _2517;
    float _2521;
    float _2522;
    float _2523;
    float _2524;
    bool _2534;
    for (;;)
    {
        _2493 = cbMatDynParam._m0[0u];
        float _2495 = roundEven(_2493.y);
        bool _2496 = _2495 == 3.0;
        float _2497 = log2(_2483);
        float _2504 = exp2(_2497 * cbSceneParam._m0[78u].x) * _2354;
        float _2505 = exp2(_2497 * cbSceneParam._m0[78u].y) * _2355;
        float _2506 = exp2(_2497 * cbSceneParam._m0[78u].z) * _2356;
        float _2513 = _479 + (-0.5);
        _2515 = cbMtdParam._m0[1u];
        _2517 = _2515.y * _2513;
        float _2520 = (_2495 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2521 = _2520 * (_2496 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2477)));
        _2522 = _2520 * (_2496 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2479)));
        _2523 = _2520 * (_2496 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2481)));
        _2524 = _2513 * 0.999000012874603271484375;
        _2534 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2534)
        {
            if ((cbInstanceData._m0[_531 + 7u].x + _2524) < 0.5)
            {
                _2690 = true;
                break;
            }
        }
        uint _2631 = _532 + uint(_2493.w);
        if ((cbInstanceData._m0[_2631].w < 1.0) && ((cbInstanceData._m0[_2631].w + _2524) < 0.5))
        {
            _2690 = true;
            break;
        }
        if ((_2517 + 1.0) < _2515.x)
        {
            _2690 = true;
            break;
        }
        _2690 = false;
        break;
    }
    float _2895;
    if (_2690)
    {
        discard_state = true;
        _2895 = 0.0;
    }
    else
    {
        _2895 = cbInstanceData._m0[_2357].w;
    }
    SV_Target.x = _2521;
    SV_Target.y = _2522;
    SV_Target.z = _2523;
    SV_Target.w = _2895;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2357].w;
    discard_exit();
}


