#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _964;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _239 = _234.z;
    float _243 = (_234.x * 2.0) + (-1.0);
    float _245 = (_234.y * 2.0) + (-1.0);
    float _246 = dot(vec2(_243, _245), vec2(_243, _245));
    float _3324 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _252 = sqrt(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))));
    float _255 = fma(_252, _218, fma(_245, _211, _243 * _197));
    float _258 = fma(_252, _219, fma(_245, _212, _243 * _198));
    float _261 = fma(_252, _220, fma(_245, _213, _243 * _199));
    float _265 = inversesqrt(dot(vec3(_255, _258, _261), vec3(_255, _258, _261)));
    float _300 = (cbMtdParam._m0[11u].z + dot(vec4(_265 * _255, _265 * _258, _265 * _261, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3335 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    vec4 _318 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _323 = _318.x * cbMtdParam._m0[9u].x;
    float _324 = _318.y * cbMtdParam._m0[9u].y;
    float _325 = _318.z * cbMtdParam._m0[9u].z;
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _349 = ((_338.x - _323) * _301) + _323;
    float _350 = ((_338.y - _324) * _301) + _324;
    float _351 = ((_338.z - _325) * _301) + _325;
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _366 = _364.x;
    float _368 = _366 - (_366 * _301);
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _388 = (_381.x * 2.0) + (-1.0);
    float _389 = (_381.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3346 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _398 = ((_381.z - _239) * _301) + _239;
    float _405 = ((_388 - _243) * _301) + _243;
    float _406 = ((_389 - _245) * _301) + _245;
    float _407 = ((sqrt(1.0 - (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) - _252) * _301) + _252;
    float _410 = fma(_407, _218, fma(_406, _211, _405 * _197));
    float _413 = fma(_407, _219, fma(_406, _212, _405 * _198));
    float _416 = fma(_407, _220, fma(_406, _213, _405 * _199));
    float _420 = inversesqrt(dot(vec3(_410, _413, _416), vec3(_410, _413, _416)));
    float _421 = _420 * _410;
    float _422 = _420 * _413;
    float _423 = _420 * _416;
    float _3357 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _424 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _3368 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3379 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3390 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3401 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _428 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _444 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _495 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _485);
    float _496 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _485);
    float _497 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _485);
    float _501 = inversesqrt(dot(vec3(_495, _496, _497), vec3(_495, _496, _497)));
    float _502 = _495 * _501;
    float _503 = _496 * _501;
    float _504 = _497 * _501;
    float _510 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _511 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _530 = fma(_423, cbSceneParam._m0[5u].z, fma(_422, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _421));
    float _533 = fma(_423, cbSceneParam._m0[6u].z, fma(_422, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _421));
    float _536 = fma(_423, cbSceneParam._m0[7u].z, fma(_422, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _421));
    uint _549 = uint(roundEven(NORMAL.w)) * 13u;
    uint _551 = (_549 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _557 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_551].x;
    float _558 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_551].y;
    float _559 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_551].z;
    float _3412 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _563 = 1.0 - _428;
    float _564 = _560 * _563;
    float _565 = _561 * _563;
    float _566 = _562 * _563;
    float _571 = (_560 + (-0.039999999105930328369140625)) * _428;
    float _572 = (_561 + (-0.039999999105930328369140625)) * _428;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _428;
    float _574 = _571 + 0.039999999105930328369140625;
    float _576 = _572 + 0.039999999105930328369140625;
    float _577 = _573 + 0.039999999105930328369140625;
    vec4 _586 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _510, cbSceneParam._m0[86u].y * _511));
    float _589 = _586.x * TEXCOORD_9.w;
    float _590 = dot(vec3(_421, _422, _423), vec3(_502, _503, _504));
    float _593 = _590 * 2.0;
    float _597 = (_593 * _421) - _502;
    float _598 = (_593 * _422) - _503;
    float _599 = (_593 * _423) - _504;
    float _603 = abs(dot(vec3(_502, _503, _504), vec3(_421, _422, _423)));
    float _3445 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _605 = sqrt(_424);
    float _618 = exp2((_605 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_605 * 3.0));
    float _624 = (1.0 - _618) * ((_605 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _625 = _618 * _605;
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _963;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _688 = fma(_661, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653));
        float _692 = fma(_661, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653));
        float _696 = fma(_661, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653));
        float _721 = _653 + _421;
        float _722 = _657 + _422;
        float _723 = _661 + _423;
        float _733 = fma(_723, cbModelParam._m0[26u].z, fma(_722, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721)) - _688;
        float _734 = fma(_723, cbModelParam._m0[27u].z, fma(_722, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721)) - _692;
        float _735 = fma(_723, cbModelParam._m0[28u].z, fma(_722, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721)) - _696;
        float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
        float _752 = ((_739 * _733) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_688 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _753 = ((_739 * _734) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_692 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _754 = ((_739 * _735) / cbModelParam._m0[34u].z) + ((((((_696 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        float _791 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_757.x + (-0.5));
        float _793 = _791 * (_757.y + (-0.5));
        float _794 = _791 * (_757.z + (-0.5));
        float _801 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_764.x + (-0.5));
        float _803 = _801 * (_764.y + (-0.5));
        float _804 = _801 * (_764.z + (-0.5));
        float _811 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_771.x + (-0.5));
        float _813 = _811 * (_771.y + (-0.5));
        float _814 = _811 * (_771.z + (-0.5));
        float _821 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_778.x + (-0.5));
        float _823 = _821 * (_778.y + (-0.5));
        float _824 = _821 * (_778.z + (-0.5));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = _792 * 0.5;
        float _829 = _802 * 0.5;
        float _830 = _812 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _845 = (dot(vec3(_421, _422, _423), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _855 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3493 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_857 + 1.0))) + _862) * _825;
        float _872 = _793 * 0.5;
        float _873 = _803 * 0.5;
        float _874 = _813 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_421, _422, _423), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3526 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_899 + 1.0))) + _904) * _826;
        float _914 = _794 * 0.5;
        float _915 = _804 * 0.5;
        float _916 = _814 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_421, _422, _423), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3559 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_941 + 1.0))) + _946) * _827;
        _963 = _794;
        _965 = _793;
        _966 = _792;
        _967 = _804;
        _968 = _803;
        _969 = _802;
        _970 = _814;
        _971 = _813;
        _972 = _812;
        _973 = _827;
        _974 = _826;
        _975 = _825;
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
    }
    else
    {
        _963 = _964;
        _965 = _964;
        _966 = _964;
        _967 = _964;
        _968 = _964;
        _969 = _964;
        _970 = _964;
        _971 = _964;
        _972 = _964;
        _973 = _964;
        _974 = _964;
        _975 = _964;
        _976 = 0.0;
        _977 = 0.0;
        _978 = 0.0;
    }
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1004 = fma(_661, cbModelParam._m0[30u].z, fma(_657, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _653));
        float _1008 = fma(_661, cbModelParam._m0[31u].z, fma(_657, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _653));
        float _1012 = fma(_661, cbModelParam._m0[32u].z, fma(_657, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _653));
        float _1035 = _653 + _421;
        float _1036 = _657 + _422;
        float _1037 = _661 + _423;
        float _1047 = fma(_1037, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035)) - _1004;
        float _1048 = fma(_1037, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035)) - _1008;
        float _1049 = fma(_1037, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035)) - _1012;
        float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
        float _1066 = ((_1053 * _1047) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1004 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1053 * _1048) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1008 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1053 * _1049) / cbModelParam._m0[35u].z) + ((((((_1012 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        float _1103 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1070.x + (-0.5));
        float _1105 = _1103 * (_1070.y + (-0.5));
        float _1106 = _1103 * (_1070.z + (-0.5));
        float _1113 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1077.x + (-0.5));
        float _1115 = _1113 * (_1077.y + (-0.5));
        float _1116 = _1113 * (_1077.z + (-0.5));
        float _1123 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1084.x + (-0.5));
        float _1125 = _1123 * (_1084.y + (-0.5));
        float _1126 = _1123 * (_1084.z + (-0.5));
        float _1133 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1091.x + (-0.5));
        float _1135 = _1133 * (_1091.y + (-0.5));
        float _1136 = _1133 * (_1091.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_421, _422, _423), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3622 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1167 + 1.0))) + _1172) * _1137;
        float _1182 = _1105 * 0.5;
        float _1183 = _1115 * 0.5;
        float _1184 = _1125 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_421, _422, _423), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3655 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1209 + 1.0))) + _1214) * _1138;
        float _1224 = _1106 * 0.5;
        float _1225 = _1116 * 0.5;
        float _1226 = _1126 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_421, _422, _423), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3688 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1251 + 1.0))) + _1256) * _1139;
        _1273 = _1106;
        _1274 = _1105;
        _1275 = _1104;
        _1276 = _1116;
        _1277 = _1115;
        _1278 = _1114;
        _1279 = _1126;
        _1280 = _1125;
        _1281 = _1124;
        _1282 = _1139;
        _1283 = _1138;
        _1284 = _1137;
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _964;
        _1274 = _964;
        _1275 = _964;
        _1276 = _964;
        _1277 = _964;
        _1278 = _964;
        _1279 = _964;
        _1280 = _964;
        _1281 = _964;
        _1282 = _964;
        _1283 = _964;
        _1284 = _964;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _976)) + _976;
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _977)) + _977;
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _978)) + _978;
    float _1320 = fma(_1299, cbSceneParam._m0[89u].z, fma(_1298, cbSceneParam._m0[89u].y, _1297 * cbSceneParam._m0[89u].x));
    float _1323 = fma(_1299, cbSceneParam._m0[90u].z, fma(_1298, cbSceneParam._m0[90u].y, _1297 * cbSceneParam._m0[90u].x));
    float _1326 = fma(_1299, cbSceneParam._m0[91u].z, fma(_1298, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1297));
    float _1341 = _597 * 0.5;
    float _1342 = _598 * 0.5;
    float _1343 = _599 * 0.5;
    float _1344 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1347 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1350 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1384;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1357 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_963, _967, _970, _973));
        float _1361 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_965, _968, _971, _974));
        float _1365 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_966, _969, _972, _975));
        float _1372 = dot(vec4(cbModelParam._m0[39u]), vec4(_1341, _1342, _1343, 1.0));
        _1384 = dot(vec3(isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1384 = 1.0;
    }
    float _1395;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1386 = dot(vec4(cbModelParam._m0[40u]), vec4(_1341, _1342, _1343, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1399 = (_1395 * cbModelParam._m0[1u].x) + (_1384 * (1.0 - cbModelParam._m0[1u].x));
    float _1409 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _424);
    float _1410 = isnan(_1409) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1409 : min(cbModelParam._m0[25u].z, _1409));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1459 = fma(_661, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653)) + cbModelParam._m0[13u].w;
        float _1463 = fma(_661, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653)) + cbModelParam._m0[14u].w;
        float _1467 = fma(_661, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653)) + cbModelParam._m0[15u].w;
        float _1470 = fma(_599, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597));
        float _1473 = fma(_599, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597));
        float _1476 = fma(_599, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597));
        float _1504;
        if (_1470 > 0.0)
        {
            _1504 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1504 = frontier_phi_16_14_ladder;
        }
        float _1732;
        if (_1473 > 0.0)
        {
            _1732 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1732 = frontier_phi_25_21_ladder;
        }
        float _1989;
        if (_1476 > 0.0)
        {
            _1989 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1989 = frontier_phi_37_32_ladder;
        }
        float _1991 = isnan(_1732) ? _1504 : (isnan(_1504) ? _1732 : min(_1504, _1732));
        float _1992 = isnan(_1989) ? _1991 : (isnan(_1991) ? _1989 : min(_1991, _1989));
        float _1996 = (_1992 * _1470) + _1459;
        float _1997 = (_1992 * _1473) + _1463;
        float _1998 = (_1992 * _1476) + _1467;
        float _1999 = _1992 * 9.9999997473787516355514526367188e-05;
        float _2001 = (-1.0) - _1999;
        float _2003 = _1999 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1998 > _2003) || ((_1998 < _2001) || ((_1997 > _2003) || ((_1997 < _2001) || ((_1996 < _2001) || (_1996 > _2003))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2126 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1998, cbModelParam._m0[9u].z, fma(_1997, cbModelParam._m0[9u].y, _1996 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1998, cbModelParam._m0[10u].z, fma(_1997, cbModelParam._m0[10u].y, _1996 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1998, cbModelParam._m0[11u].z, fma(_1997, cbModelParam._m0[11u].y, _1996 * cbModelParam._m0[11u].x))), _1410);
            frontier_phi_15_37_ladder = _2126.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2126.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2126.x * cbModelParam._m0[1u].y;
        }
        _1492 = frontier_phi_15_37_ladder_2;
        _1494 = frontier_phi_15_37_ladder_1;
        _1496 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_597, _598, _599), _1410);
        _1492 = _1480.x * cbModelParam._m0[1u].y;
        _1494 = _1480.y * cbModelParam._m0[1u].y;
        _1496 = _1480.z * cbModelParam._m0[1u].y;
    }
    float _1500 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _424);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1500 : min(cbModelParam._m0[25u].w, _1500));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1558 = fma(_661, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653)) + cbModelParam._m0[21u].w;
        float _1562 = fma(_661, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653)) + cbModelParam._m0[22u].w;
        float _1566 = fma(_661, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653)) + cbModelParam._m0[23u].w;
        float _1569 = fma(_599, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597));
        float _1572 = fma(_599, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597));
        float _1575 = fma(_599, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597));
        float _1737;
        if (_1569 > 0.0)
        {
            _1737 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1737 = frontier_phi_27_23_ladder;
        }
        float _2016;
        if (_1572 > 0.0)
        {
            _2016 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2016 = frontier_phi_39_34_ladder;
        }
        float _2229;
        if (_1575 > 0.0)
        {
            _2229 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2229 = frontier_phi_48_45_ladder;
        }
        float _2231 = isnan(_2016) ? _1737 : (isnan(_1737) ? _2016 : min(_1737, _2016));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1569) + _1558;
        float _2237 = (_2232 * _1572) + _1562;
        float _2238 = (_2232 * _1575) + _1566;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2239;
        float _2242 = _2239 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2238 > _2242) || ((_2238 < _2240) || ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 < _2240) || (_2236 > _2242))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2238, cbModelParam._m0[17u].z, fma(_2237, cbModelParam._m0[17u].y, _2236 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2238, cbModelParam._m0[18u].z, fma(_2237, cbModelParam._m0[18u].y, _2236 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2238, cbModelParam._m0[19u].z, fma(_2237, cbModelParam._m0[19u].y, _2236 * cbModelParam._m0[19u].x))), _1501);
            frontier_phi_24_48_ladder = _2436.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2436.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2436.x * cbModelParam._m0[1u].z;
        }
        _1594 = frontier_phi_24_48_ladder_2;
        _1596 = frontier_phi_24_48_ladder_1;
        _1598 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_597, _598, _599), _1501);
        _1594 = _1578.x * cbModelParam._m0[1u].z;
        _1596 = _1578.y * cbModelParam._m0[1u].z;
        _1598 = _1578.z * cbModelParam._m0[1u].z;
    }
    float _1611 = (((_624 * _574) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1613 = (((_624 * _576) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1615 = (((_624 * _577) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1618 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, _1611 * cbSceneParam._m0[91u].x));
    vec4 _1632 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_510, _511));
    float _1634 = _1632.w;
    float _1646 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1634);
    float _1647 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1634);
    float _1648 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1634);
    uvec4 _1652 = floatBitsToUint(cbInstanceData._m0[_549 + 5u]);
    uint _1654 = _1652.x * 14u;
    uint _1655 = _1654 + 13u;
    float _1662 = _589 + (-1.0);
    float _1667 = (cbLight._m0[_1655].x * _1662) + 1.0;
    float _1668 = (cbLight._m0[_1655].y * _1662) + 1.0;
    float _1669 = (cbLight._m0[_1655].z * _1662) + 1.0;
    float _1670 = (cbLight._m0[_1655].w * _1662) + 1.0;
    uint _1671 = _1654 + 5u;
    float _1677 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
    uint _1681 = _1654 + 4u;
    float _1691 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
    uint _1695 = _1654 | 1u;
    float _1706 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_421, _422, _423));
    float _1709 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_421, _422, _423));
    float _3824 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _3835 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1714 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1716 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1723 = ((cbLight._m0[_1671].x * _1677) * _1716) + (((cbLight._m0[_1681].x * _1646) * _1691) * _1714);
    float _1724 = ((_1677 * cbLight._m0[_1671].y) * _1716) + (((cbLight._m0[_1681].y * _1647) * _1691) * _1714);
    float _1725 = ((_1677 * cbLight._m0[_1671].z) * _1716) + (((cbLight._m0[_1681].z * _1648) * _1691) * _1714);
    uvec4 _1729 = floatBitsToUint(cbLight._m0[_1654 + 12u]);
    bool _1731 = _1729.x == 0u;
    float _1742;
    float _1744;
    float _1746;
    if (_1731)
    {
        _1742 = _1723;
        _1744 = _1724;
        _1746 = _1725;
    }
    else
    {
        uint _1750 = _1654 + 6u;
        float _1766 = (dot(vec3(cbLight._m0[_1654 + 2u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1767 = _1766 * _1766;
        float _3846 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1769 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
        _1742 = (((cbLight._m0[_1750].x * 0.3183098733425140380859375) * _1768) * _1769) + _1723;
        _1744 = (((cbLight._m0[_1750].y * 0.3183098733425140380859375) * _1768) * _1769) + _1724;
        _1746 = (((cbLight._m0[_1750].z * 0.3183098733425140380859375) * _1768) * _1769) + _1725;
    }
    bool _1749 = _1729.y == 0u;
    float _1787;
    float _1789;
    float _1791;
    if (_1749)
    {
        _1787 = _1742;
        _1789 = _1744;
        _1791 = _1746;
    }
    else
    {
        uint _1960 = _1654 + 7u;
        float _1976 = (dot(vec3(cbLight._m0[_1654 + 3u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1977 = _1976 * _1976;
        float _3862 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1979 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _1787 = (((cbLight._m0[_1960].x * 0.3183098733425140380859375) * _1978) * _1979) + _1742;
        _1789 = (((cbLight._m0[_1960].y * 0.3183098733425140380859375) * _1978) * _1979) + _1744;
        _1791 = (((cbLight._m0[_1960].z * 0.3183098733425140380859375) * _1978) * _1979) + _1746;
    }
    uint _1794 = _1654 + 8u;
    float _1807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1654].w)) * _424) * 0.949999988079071044921875);
    float _1808 = _1807 * _1807;
    float _1809 = cbLight._m0[_1654].x + _502;
    float _1810 = cbLight._m0[_1654].y + _503;
    float _1811 = cbLight._m0[_1654].z + _504;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1816 = _1815 * _1809;
    float _1817 = _1815 * _1810;
    float _1818 = _1815 * _1811;
    float _1819 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1654].xyz));
    float _3878 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _1823 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1824 = dot(vec3(_421, _422, _423), vec3(_1816, _1817, _1818));
    float _3900 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_1816, _1817, _1818));
    float _3911 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1808 * _1808;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0);
    float _1845 = 0.959999978542327880859375 - _571;
    float _1847 = 0.959999978542327880859375 - _572;
    float _1848 = 0.959999978542327880859375 - _573;
    float _1855 = 1.0 - _1808;
    float _1866 = (0.5 / (((_1823 * ((_1822 * _1855) + _1808)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1855) + _1808) * _1822))) * _1822;
    float _3922 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    uint _1882 = _1654 + 9u;
    float _1893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _424) * 0.949999988079071044921875);
    float _1894 = _1893 * _1893;
    float _1895 = cbLight._m0[_1695].x + _502;
    float _1896 = cbLight._m0[_1695].y + _503;
    float _1897 = cbLight._m0[_1695].z + _504;
    float _1901 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
    float _1902 = _1901 * _1895;
    float _1903 = _1901 * _1896;
    float _1904 = _1901 * _1897;
    float _1905 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1695].xyz));
    float _3933 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1909 = dot(vec3(_421, _422, _423), vec3(_1902, _1903, _1904));
    float _3944 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1902, _1903, _1904));
    float _3955 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1894 * _1894;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1928 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
    float _1935 = 1.0 - _1894;
    float _1945 = (0.5 / (((_1823 * ((_1908 * _1935) + _1894)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1935) + _1894) * _1908))) * _1908;
    float _3966 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1947 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    float _1957 = (((((_1928 * _1845) + _574) * cbLight._m0[_1882].x) * _1947) * _1677) + ((((cbLight._m0[_1794].x * _1646) * ((_1844 * _1845) + _574)) * _1868) * _1691);
    float _1958 = (((((_1928 * _1847) + _576) * cbLight._m0[_1882].y) * _1947) * _1677) + ((((cbLight._m0[_1794].y * _1647) * ((_1844 * _1847) + _576)) * _1868) * _1691);
    float _1959 = (((((_1928 * _1848) + _577) * cbLight._m0[_1882].z) * _1947) * _1677) + ((((cbLight._m0[_1794].z * _1648) * ((_1844 * _1848) + _577)) * _1868) * _1691);
    float _2021;
    float _2023;
    float _2025;
    if (_1731)
    {
        _2021 = _1957;
        _2023 = _1958;
        _2025 = _1959;
    }
    else
    {
        uint _2027 = _1654 + 2u;
        uint _2031 = _1654 + 10u;
        float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _424) * 0.949999988079071044921875);
        float _2046 = _2045 * _2045;
        float _2047 = cbLight._m0[_2027].x + _502;
        float _2048 = cbLight._m0[_2027].y + _503;
        float _2049 = cbLight._m0[_2027].z + _504;
        float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
        float _2054 = _2053 * _2047;
        float _2055 = _2053 * _2048;
        float _2056 = _2053 * _2049;
        float _2057 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2027].xyz));
        float _3977 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2061 = dot(vec3(_421, _422, _423), vec3(_2054, _2055, _2056));
        float _3988 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2065 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2054, _2055, _2056));
        float _3999 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2069 = _2046 * _2046;
        float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
        float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
        float _2087 = 1.0 - _2046;
        float _2097 = (0.5 / (((_1823 * ((_2060 * _2087) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2087) + _2046) * _2060))) * _2060;
        float _4010 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2099 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
        float _2100 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
        _2021 = (((((_2080 * _1845) + _574) * cbLight._m0[_2031].x) * _2099) * _2100) + _1957;
        _2023 = (((((_2080 * _1847) + _576) * cbLight._m0[_2031].y) * _2099) * _2100) + _1958;
        _2025 = (((((_2080 * _1848) + _577) * cbLight._m0[_2031].z) * _2099) * _2100) + _1959;
    }
    float _2135;
    float _2137;
    float _2139;
    if (_1749)
    {
        _2135 = _2021;
        _2137 = _2023;
        _2139 = _2025;
    }
    else
    {
        uint _2146 = _1654 + 3u;
        uint _2150 = _1654 + 11u;
        float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _424) * 0.949999988079071044921875);
        float _2165 = _2164 * _2164;
        float _2166 = cbLight._m0[_2146].x + _502;
        float _2167 = cbLight._m0[_2146].y + _503;
        float _2168 = cbLight._m0[_2146].z + _504;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2173 = _2172 * _2166;
        float _2174 = _2172 * _2167;
        float _2175 = _2172 * _2168;
        float _2176 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2146].xyz));
        float _4026 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2180 = dot(vec3(_421, _422, _423), vec3(_2173, _2174, _2175));
        float _4037 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2184 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2173, _2174, _2175));
        float _4048 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2188 = _2165 * _2165;
        float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
        float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0);
        float _2206 = 1.0 - _2165;
        float _2216 = (0.5 / (((_1823 * ((_2179 * _2206) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2206) + _2165) * _2179))) * _2179;
        float _4059 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2218 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
        float _2219 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _2135 = (((((_2199 * _1845) + _574) * cbLight._m0[_2150].x) * _2218) * _2219) + _2021;
        _2137 = (((((_2199 * _1847) + _576) * cbLight._m0[_2150].y) * _2218) * _2219) + _2023;
        _2139 = (((((_2199 * _1848) + _577) * cbLight._m0[_2150].z) * _2218) * _2219) + _2025;
    }
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    if (_1652.y == 0u)
    {
        float _2294 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2295 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2294;
        float _2296 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2294;
        float _2297 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2294;
        uvec4 _2309 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2310 = _2309.x;
        uint _2321 = uint((float(_2309.y) * floor(float(uint(cbSceneParam._m0[85u].y * _511) / _2310))) + floor(float(uint(cbSceneParam._m0[85u].x * _510) / _2310)));
        float _2331 = (log2(_2297 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2332 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        uint _2335 = uint(isnan(14.0) ? _2332 : (isnan(_2332) ? 14.0 : min(_2332, 14.0)));
        uvec4 _2340 = texelFetch(g_lightClusterGridBuffer, int(((_2335 << 2u) + (_2321 << 6u)) >> 2u));
        uint _2341 = _2340.x;
        uint _2342 = _2309.z;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        if (((((1u << ((_2342 >> 4u) & 15u)) + 4294967295u) & _2341) == 0u) || ((_2342 & 240u) == 0u))
        {
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
        }
        else
        {
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            uint _2591 = 0u;
            uint _2600;
            bool _2601;
            for (;;)
            {
                _2600 = texelFetch(g_lightClassification, int((((_2335 << 5u) + (_2321 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                _2601 = _2600 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2601)
                {
                    frontier_phi_63_pred = _2590;
                    frontier_phi_63_pred_1 = _2589;
                    frontier_phi_63_pred_2 = _2588;
                    frontier_phi_63_pred_3 = _2587;
                    frontier_phi_63_pred_4 = _2586;
                    frontier_phi_63_pred_5 = _2585;
                }
                else
                {
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    uint _2715;
                    _2709 = _2585;
                    _2710 = _2586;
                    _2711 = _2587;
                    _2712 = _2588;
                    _2713 = _2589;
                    _2714 = _2590;
                    _2715 = _2600;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    for (;;)
                    {
                        uint _2719 = uint(findLSB(_2715)) + (_2591 << 5u);
                        uint _2716 = (_2715 + 4294967295u) & _2715;
                        uint _2721 = _2719 * 48u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2741 = (_2719 * 48u) + 4u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2760 = (_2719 * 48u) + 8u;
                        vec3 _2771 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x));
                        float _2775 = _2735.x - _2295;
                        float _2776 = _2735.y - _2296;
                        float _2777 = _2735.z - _2297;
                        float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                        float _2781 = inversesqrt(_2778);
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2785 = dot(vec3(_530, _533, _536), vec3(_2782, _2783, _2784));
                        float _2790 = 1.0 - (_2778 * _2735.w);
                        float _4085 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2792 = sqrt(_2778) * _2754.w;
                        float _2795 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                        float _2796 = _2795 * _2795;
                        float _2799 = ((1.0 - _2796) * _2785) + _2796;
                        float _2802 = _2792 * _2792;
                        float _2806 = ((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2791) / ((_2802 * 0.699999988079071044921875) + 1.0);
                        float _2810 = (-0.0) - _2295;
                        float _2811 = (-0.0) - _2296;
                        float _2812 = (-0.0) - _2297;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2827 = exp2(log2(1.0 / ((_2802 * 3.5) + 5.0)) * 0.25);
                        float _2828 = 1.0 - _605;
                        float _2835 = sqrt(1.0 - ((1.0 - (_2828 * _2828)) * (1.0 - (_2827 * _2827))));
                        float _2836 = _2835 * _2835;
                        float _2837 = _2836 * _2836;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2848 = dot(vec3(_530, _533, _536), vec3(_2817, _2818, _2819));
                        float _4101 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2852 = dot(vec3(_530, _533, _536), vec3(_2844 * _2838, _2844 * _2839, _2844 * _2840));
                        float _4112 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2859 = ((_2855 * _2855) * (_2837 + (-1.0))) + 1.0;
                        float _2860 = _2795 * _2836;
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2785) + _2861;
                        float _4123 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2866 = 1.0 - _2836;
                        float _2876 = (0.5 / (((_2865 * ((_2851 * _2866) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2865 * _2866) + _2836) * _2851))) * _2865;
                        float _4134 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2887 = (((_2837 * 3.1415927410125732421875) * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) / ((_2859 * _2859) * ((_2802 * 2.1991131305694580078125) + 3.141590118408203125))) * _2791;
                        _2644 = (_2806 * _2754.x) + _2712;
                        _2645 = (_2806 * _2754.y) + _2713;
                        _2646 = (_2806 * _2754.z) + _2714;
                        _2641 = (_2887 * _2771.x) + _2709;
                        _2642 = (_2887 * _2771.y) + _2710;
                        _2643 = (_2887 * _2771.z) + _2711;
                        if (_2716 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2709 = _2641;
                            _2710 = _2642;
                            _2711 = _2643;
                            _2712 = _2644;
                            _2713 = _2645;
                            _2714 = _2646;
                            _2715 = _2716;
                        }
                    }
                    frontier_phi_63_pred = _2646;
                    frontier_phi_63_pred_1 = _2645;
                    frontier_phi_63_pred_2 = _2644;
                    frontier_phi_63_pred_3 = _2643;
                    frontier_phi_63_pred_4 = _2642;
                    frontier_phi_63_pred_5 = _2641;
                }
                _2452 = frontier_phi_63_pred;
                _2450 = frontier_phi_63_pred_1;
                _2448 = frontier_phi_63_pred_2;
                _2446 = frontier_phi_63_pred_3;
                _2444 = frontier_phi_63_pred_4;
                _2442 = frontier_phi_63_pred_5;
                uint _2592 = _2591 + 1u;
                if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2585 = _2442;
                    _2586 = _2444;
                    _2587 = _2446;
                    _2588 = _2448;
                    _2589 = _2450;
                    _2590 = _2452;
                    _2591 = _2592;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
        }
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.z;
        uint _2458 = (_2456 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2458) & _2341) == 0u)
        {
            _2553 = _2441;
            _2555 = _2443;
            _2557 = _2445;
            _2559 = _2447;
            _2561 = _2449;
            _2563 = _2451;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
            float _2579 = _2578 * _2295;
            float _2580 = _2578 * _2296;
            float _2581 = _2578 * _2297;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2458 < ((_2456 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2692 = _2441;
                float _2693 = _2443;
                float _2694 = _2445;
                float _2695 = _2447;
                float _2696 = _2449;
                float _2697 = _2451;
                uint _2698 = _2458;
                uint _2707;
                bool _2708;
                for (;;)
                {
                    _2707 = texelFetch(g_lightClassification, int((((_2335 << 5u) + (_2321 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                    _2708 = _2707 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2708)
                    {
                        frontier_phi_69_pred = _2697;
                        frontier_phi_69_pred_1 = _2696;
                        frontier_phi_69_pred_2 = _2695;
                        frontier_phi_69_pred_3 = _2694;
                        frontier_phi_69_pred_4 = _2693;
                        frontier_phi_69_pred_5 = _2692;
                    }
                    else
                    {
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _2905 = _2692;
                        float _2906 = _2693;
                        float _2907 = _2694;
                        float _2908 = _2695;
                        float _2909 = _2696;
                        float _2910 = _2697;
                        uint _2911 = _2707;
                        uint _2912;
                        vec4 _2937;
                        float _2938;
                        vec4 _2953;
                        vec3 _2965;
                        vec4 _2981;
                        vec4 _2997;
                        float _3044;
                        bool _3045;
                        for (;;)
                        {
                            uint _2922 = ((_2698 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2911));
                            _2912 = (_2911 + 4294967295u) & _2911;
                            uint _2924 = _2922 * 40u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            _2938 = _2937.w;
                            uint _2940 = (_2922 * 40u) + 4u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2955 = (_2922 * 40u) + 8u;
                            _2965 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x));
                            uint _2968 = (_2922 * 40u) + 16u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2922 * 40u) + 20u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3000 = (_2922 * 40u) + 24u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3019 = (_2922 * 40u) + 28u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3044 = fma(_2297, _3032.z, fma(_2296, _3032.y, _3032.x * _2295)) + _3032.w;
                            _3045 = !((fma(_2297, _3013.z, fma(_2296, _3013.y, _3013.x * _2295)) + _3013.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3045)
                            {
                                float _3072 = _2937.x - _2295;
                                float _3073 = _2937.y - _2296;
                                float _3074 = _2937.z - _2297;
                                float _3075 = dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074));
                                float _3078 = inversesqrt(_3075);
                                float _3079 = _3078 * _3072;
                                float _3080 = _3078 * _3073;
                                float _3081 = _3078 * _3074;
                                float _3085 = 1.0 - (_3075 / (_2938 * _2938));
                                float _4145 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3090 = sqrt(_3075) * _2953.w;
                                float _3092 = 1.39999997615814208984375 / (_3090 + 1.39999997615814208984375);
                                float _3093 = _3092 * _3092;
                                float _3096 = ((1.0 - _3093) * dot(vec3(_3079, _3080, _3081), vec3(_530, _533, _536))) + _3093;
                                float _3099 = _3090 * _3090;
                                float _3103 = (fma(_2297, _2981.z, fma(_2296, _2981.y, _2981.x * _2295)) + _2981.w) / _3044;
                                float _3104 = (fma(_2297, _2997.z, fma(_2296, _2997.y, _2997.x * _2295)) + _2997.w) / _3044;
                                float _3108 = 1.0 - dot(vec2(_3103, _3104), vec2(_3103, _3104));
                                float _4161 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3110 = _3109 * (((isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))) * _3086) / ((_3099 * 0.699999988079071044921875) + 1.0));
                                float _3122 = exp2(log2(1.0 / ((_3099 * 3.5) + 5.0)) * 0.25);
                                float _3123 = 1.0 - _605;
                                float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                                float _3131 = _3130 * _3130;
                                float _3132 = _3131 * _3131;
                                float _3133 = _3079 - _2579;
                                float _3134 = _3080 - _2580;
                                float _3135 = _3081 - _2581;
                                float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                                float _3143 = dot(vec3(_530, _533, _536), vec3((-0.0) - _2579, (-0.0) - _2580, (-0.0) - _2581));
                                float _4172 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3146 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3147 = dot(vec3(_530, _533, _536), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                                float _4183 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3150 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                                float _3155 = _3092 * _3131;
                                float _3156 = _3155 * _3155;
                                float _3162 = ((1.0 - _3156) * dot(vec3(_530, _533, _536), vec3(_3079, _3080, _3081))) + _3156;
                                float _4194 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3164 = 1.0 - _3131;
                                float _3174 = (0.5 / (((_3163 * ((_3146 * _3164) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3131) * _3146))) * _3163;
                                float _4205 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3184 = (_3109 * _3086) * (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) / ((_3154 * _3154) * ((_3099 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3110 * _2953.z;
                                frontier_phi_75_pred_1 = _3110 * _2953.y;
                                frontier_phi_75_pred_2 = _3110 * _2953.x;
                                frontier_phi_75_pred_3 = _3184 * _2965.z;
                                frontier_phi_75_pred_4 = _3184 * _2965.y;
                                frontier_phi_75_pred_5 = _3184 * _2965.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3193 = frontier_phi_75_pred;
                            _3192 = frontier_phi_75_pred_1;
                            _3191 = frontier_phi_75_pred_2;
                            _3190 = frontier_phi_75_pred_3;
                            _3189 = frontier_phi_75_pred_4;
                            _3188 = frontier_phi_75_pred_5;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            _2897 = _3193 + _2910;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            if (_2912 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2912;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2897;
                        frontier_phi_69_pred_1 = _2896;
                        frontier_phi_69_pred_2 = _2895;
                        frontier_phi_69_pred_3 = _2894;
                        frontier_phi_69_pred_4 = _2893;
                        frontier_phi_69_pred_5 = _2892;
                    }
                    _2564 = frontier_phi_69_pred;
                    _2562 = frontier_phi_69_pred_1;
                    _2560 = frontier_phi_69_pred_2;
                    _2558 = frontier_phi_69_pred_3;
                    _2556 = frontier_phi_69_pred_4;
                    _2554 = frontier_phi_69_pred_5;
                    uint _2699 = _2698 + 1u;
                    if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2692 = _2554;
                        _2693 = _2556;
                        _2694 = _2558;
                        _2695 = _2560;
                        _2696 = _2562;
                        _2697 = _2564;
                        _2698 = _2699;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2564;
                frontier_phi_57_58_ladder_1 = _2562;
                frontier_phi_57_58_ladder_2 = _2560;
                frontier_phi_57_58_ladder_3 = _2558;
                frontier_phi_57_58_ladder_4 = _2556;
                frontier_phi_57_58_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_57_58_ladder = _2451;
                frontier_phi_57_58_ladder_1 = _2449;
                frontier_phi_57_58_ladder_2 = _2447;
                frontier_phi_57_58_ladder_3 = _2445;
                frontier_phi_57_58_ladder_4 = _2443;
                frontier_phi_57_58_ladder_5 = _2441;
            }
            _2553 = frontier_phi_57_58_ladder_5;
            _2555 = frontier_phi_57_58_ladder_4;
            _2557 = frontier_phi_57_58_ladder_3;
            _2559 = frontier_phi_57_58_ladder_2;
            _2561 = frontier_phi_57_58_ladder_1;
            _2563 = frontier_phi_57_58_ladder;
        }
        float _2568 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
        _2353 = (_2568 * _2559) + _1787;
        _2355 = (_2568 * _2561) + _1789;
        _2357 = (_2568 * _2563) + _1791;
        _2359 = ((_2553 * _574) * _2568) + _2135;
        _2361 = ((_2555 * _576) * _2568) + _2137;
        _2363 = ((_2557 * _577) * _2568) + _2139;
    }
    else
    {
        _2353 = _1787;
        _2355 = _1789;
        _2357 = _1791;
        _2359 = _2135;
        _2361 = _2137;
        _2363 = _2139;
    }
    float _4221 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4232 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4243 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    uint _2383 = _549 + 6u;
    float _2391 = _510 / cbSceneParam._m0[86u].x;
    float _2392 = _511 / cbSceneParam._m0[86u].y;
    vec4 _2406 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2391, _2392, (log2((isnan(cbSceneParam._m0[77u].w) ? _444 : (isnan(_444) ? cbSceneParam._m0[77u].w : min(_444, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2408 = _2406.x;
    float _2409 = _2406.y;
    float _2410 = _2406.z;
    float _2411 = _2406.w;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_444 > cbSceneParam._m0[78u].w)
    {
        float _2466 = isnan(_444) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _444 : min(cbSceneParam._m0[80u].w, _444));
        float _2467 = _2466 / _444;
        float _2478 = _2467 * _495;
        float _2479 = _496 * _2467;
        float _2480 = (-0.0) - _2479;
        float _2481 = _2467 * _497;
        float _2483 = (cbSceneParam._m0[77u].w * _2480) / _2466;
        float _2484 = _2483 + cbSceneParam._m0[79u].w;
        float _2485 = cbSceneParam._m0[79u].w - _2479;
        float _2491 = sqrt(((_2478 * _2478) + (_2479 * _2479)) + (_2481 * _2481));
        float _2494 = (1.0 - (cbSceneParam._m0[77u].w / _2466)) * _2491;
        float _2499 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2501 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2654;
        if (abs((_2480 - _2483) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2654 = ((((_2484 > 0.0) ? exp2(_2499 * _2484) : (2.0 - exp2(_2501 * _2484))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2494;
        }
        else
        {
            float _2614 = 1.0 / cbSceneParam._m0[80u].x;
            float _2615 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : max(_2484, _2485));
            float _2616 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : min(_2484, _2485));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            _2654 = ((abs(_2491 / _2480) * cbSceneParam._m0[80u].y) * ((((_2625 - _2626) * 2.0) - ((exp2(_2499 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)))) - exp2(_2499 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))))) * _2614)) - ((exp2(_2501 * _2625) - exp2(_2501 * _2626)) * _2614))) + (_2494 * cbSceneParam._m0[80u].z);
        }
        vec4 _2656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2391, _2392, 1.0), 0.0);
        float _2665 = exp2((_2654 * (-1.44269502162933349609375)) * (1.0 - _2656.w));
        float _2666 = log2(_2665);
        float _2682 = log2(_2411);
        _2503 = (exp2(_2682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].x)) * _2656.x) / cbSceneParam._m0[78u].x)) + _2408;
        _2505 = (exp2(_2682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].y)) * _2656.y) / cbSceneParam._m0[78u].y)) + _2409;
        _2507 = (exp2(_2682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].z)) * _2656.z) / cbSceneParam._m0[78u].z)) + _2410;
        _2509 = _2665 * _2411;
    }
    else
    {
        _2503 = _2408;
        _2505 = _2409;
        _2507 = _2410;
        _2509 = _2411;
    }
    float _2521 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2522 = _2521 == 3.0;
    float _2523 = log2(_2509);
    float _2530 = exp2(_2523 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2353 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _589))) + ((_2359 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1399)) * cbPerFrame._m0[3u].x));
    float _2531 = exp2(_2523 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2355 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _589))) + ((_2361 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1399)) * cbPerFrame._m0[3u].x));
    float _2532 = exp2(_2523 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2357 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _589))) + ((_2363 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1399)) * cbPerFrame._m0[3u].x));
    float _2541 = (_2521 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2541 * (_2522 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2503)));
    SV_Target.y = _2541 * (_2522 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2505)));
    SV_Target.z = _2541 * (_2522 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2507)));
    SV_Target.w = cbInstanceData._m0[_2383].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2383].w;
}


