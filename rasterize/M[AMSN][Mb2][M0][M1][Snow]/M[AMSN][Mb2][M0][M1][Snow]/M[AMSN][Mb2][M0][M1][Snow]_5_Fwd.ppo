#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1005;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _242.x;
    float _246 = _242.y;
    float _247 = _242.z;
    vec4 _279 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _292 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3319 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _302 = ((_279.z - _247) * _293) + _247;
    float _306 = ((((_279.x - _245) * _293) + _245) * 2.0) + (-1.0);
    float _308 = ((((_279.y - _246) * _293) + _246) * 2.0) + (-1.0);
    float _309 = dot(vec2(_306, _308), vec2(_306, _308));
    float _3330 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _314 = sqrt(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))));
    float _317 = fma(_314, _226, fma(_308, _219, _306 * _205));
    float _320 = fma(_314, _227, fma(_308, _220, _306 * _206));
    float _323 = fma(_314, _228, fma(_308, _221, _306 * _207));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    float _341 = cbMtdParam._m0[11u].z + dot(vec4(_327 * _317, _327 * _320, _327 * _323, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3341 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    vec4 _360 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _365 = _360.x * cbMtdParam._m0[9u].x;
    float _366 = _360.y * cbMtdParam._m0[9u].y;
    float _367 = _360.z * cbMtdParam._m0[9u].z;
    vec4 _386 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _400 = (((_386.x * cbMtdParam._m0[10u].x) - _365) * _293) + _365;
    float _401 = (((_386.y * cbMtdParam._m0[10u].y) - _366) * _293) + _366;
    float _402 = (((_386.z * cbMtdParam._m0[10u].z) - _367) * _293) + _367;
    vec4 _415 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _426 = ((_415.x - _400) * _342) + _400;
    float _427 = ((_415.y - _401) * _342) + _401;
    float _428 = ((_415.z - _402) * _342) + _402;
    vec4 _441 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _448 = (_441.x * 2.0) + (-1.0);
    float _449 = (_441.y * 2.0) + (-1.0);
    float _450 = dot(vec2(_448, _449), vec2(_448, _449));
    float _3352 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _458 = ((_441.z - _302) * _342) + _302;
    float _465 = ((_448 - _306) * _342) + _306;
    float _466 = ((_449 - _308) * _342) + _308;
    float _467 = ((sqrt(1.0 - (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) - _314) * _342) + _314;
    float _470 = fma(_467, _226, fma(_466, _219, _465 * _205));
    float _473 = fma(_467, _227, fma(_466, _220, _465 * _206));
    float _476 = fma(_467, _228, fma(_466, _221, _465 * _207));
    float _480 = inversesqrt(dot(vec3(_470, _473, _476), vec3(_470, _473, _476)));
    float _481 = _480 * _470;
    float _482 = _480 * _473;
    float _483 = _480 * _476;
    float _3363 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _484 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3385 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3396 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _503 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _553 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _543);
    float _554 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _543);
    float _555 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _543);
    float _559 = inversesqrt(dot(vec3(_553, _554, _555), vec3(_553, _554, _555)));
    float _560 = _553 * _559;
    float _561 = _554 * _559;
    float _562 = _555 * _559;
    float _568 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _569 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _589 = fma(_483, cbSceneParam._m0[5u].z, fma(_482, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _481));
    float _592 = fma(_483, cbSceneParam._m0[6u].z, fma(_482, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _481));
    float _595 = fma(_483, cbSceneParam._m0[7u].z, fma(_482, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _481));
    uint _608 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = (_608 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3407 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _568, cbSceneParam._m0[86u].y * _569));
    float _633 = _630.x * TEXCOORD_9.w;
    float _634 = dot(vec3(_481, _482, _483), vec3(_560, _561, _562));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _481) - _560;
    float _642 = (_637 * _482) - _561;
    float _643 = (_637 * _483) - _562;
    float _647 = abs(dot(vec3(_560, _561, _562), vec3(_481, _482, _483)));
    float _3440 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_484);
    float _662 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1004;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _729 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _733 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _737 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _762 = _694 + _481;
        float _763 = _698 + _482;
        float _764 = _702 + _483;
        float _774 = fma(_764, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762)) - _729;
        float _775 = fma(_764, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762)) - _733;
        float _776 = fma(_764, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762)) - _737;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_729 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_733 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[34u].z) + ((((((_737 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _832 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_798.x + (-0.5));
        float _834 = _832 * (_798.y + (-0.5));
        float _835 = _832 * (_798.z + (-0.5));
        float _842 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_805.x + (-0.5));
        float _844 = _842 * (_805.y + (-0.5));
        float _845 = _842 * (_805.z + (-0.5));
        float _852 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_812.x + (-0.5));
        float _854 = _852 * (_812.y + (-0.5));
        float _855 = _852 * (_812.z + (-0.5));
        float _862 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_819.x + (-0.5));
        float _864 = _862 * (_819.y + (-0.5));
        float _865 = _862 * (_819.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _886 = (dot(vec3(_481, _482, _483), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _896 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3488 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_898 + 1.0))) + _903) * _866;
        float _913 = _834 * 0.5;
        float _914 = _844 * 0.5;
        float _915 = _854 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_481, _482, _483), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3521 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_940 + 1.0))) + _945) * _867;
        float _955 = _835 * 0.5;
        float _956 = _845 * 0.5;
        float _957 = _855 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_481, _482, _483), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3554 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_982 + 1.0))) + _987) * _868;
        _1004 = _835;
        _1006 = _834;
        _1007 = _833;
        _1008 = _845;
        _1009 = _844;
        _1010 = _843;
        _1011 = _855;
        _1012 = _854;
        _1013 = _853;
        _1014 = _868;
        _1015 = _867;
        _1016 = _866;
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _1005;
        _1006 = _1005;
        _1007 = _1005;
        _1008 = _1005;
        _1009 = _1005;
        _1010 = _1005;
        _1011 = _1005;
        _1012 = _1005;
        _1013 = _1005;
        _1014 = _1005;
        _1015 = _1005;
        _1016 = _1005;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1049 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1053 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1076 = _694 + _481;
        float _1077 = _698 + _482;
        float _1078 = _702 + _483;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_481, _482, _483), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3617 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_481, _482, _483), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3650 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_481, _482, _483), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3683 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1005;
        _1315 = _1005;
        _1316 = _1005;
        _1317 = _1005;
        _1318 = _1005;
        _1319 = _1005;
        _1320 = _1005;
        _1321 = _1005;
        _1322 = _1005;
        _1323 = _1005;
        _1324 = _1005;
        _1325 = _1005;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1017)) + _1017;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _641 * 0.5;
    float _1383 = _642 * 0.5;
    float _1384 = _643 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1008, _1011, _1014));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _484);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1500 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1504 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1508 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1511 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1514 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1517 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1545;
        if (_1511 > 0.0)
        {
            _1545 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1545 = frontier_phi_16_14_ladder;
        }
        float _1749;
        if (_1514 > 0.0)
        {
            _1749 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1749 = frontier_phi_25_21_ladder;
        }
        float _1992;
        if (_1517 > 0.0)
        {
            _1992 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1992 = frontier_phi_37_32_ladder;
        }
        float _1994 = isnan(_1749) ? _1545 : (isnan(_1545) ? _1749 : min(_1545, _1749));
        float _1995 = isnan(_1992) ? _1994 : (isnan(_1994) ? _1992 : min(_1994, _1992));
        float _1999 = (_1995 * _1511) + _1500;
        float _2000 = (_1995 * _1514) + _1504;
        float _2001 = (_1995 * _1517) + _1508;
        float _2002 = _1995 * 9.9999997473787516355514526367188e-05;
        float _2004 = (-1.0) - _2002;
        float _2006 = _2002 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2001 > _2006) || ((_2001 < _2004) || ((_2000 > _2006) || ((_2000 < _2004) || ((_1999 < _2004) || (_1999 > _2006))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2001, cbModelParam._m0[9u].z, fma(_2000, cbModelParam._m0[9u].y, _1999 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2001, cbModelParam._m0[10u].z, fma(_2000, cbModelParam._m0[10u].y, _1999 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2001, cbModelParam._m0[11u].z, fma(_2000, cbModelParam._m0[11u].y, _1999 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_15_37_ladder = _2125.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2125.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2125.x * cbModelParam._m0[1u].y;
        }
        _1533 = frontier_phi_15_37_ladder_2;
        _1535 = frontier_phi_15_37_ladder_1;
        _1537 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1451);
        _1533 = _1521.x * cbModelParam._m0[1u].y;
        _1535 = _1521.y * cbModelParam._m0[1u].y;
        _1537 = _1521.z * cbModelParam._m0[1u].y;
    }
    float _1541 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _484);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1541 : min(cbModelParam._m0[25u].w, _1541));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1599 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1603 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1607 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1610 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1613 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1616 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1754;
        if (_1610 > 0.0)
        {
            _1754 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1754 = frontier_phi_27_23_ladder;
        }
        float _2019;
        if (_1613 > 0.0)
        {
            _2019 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2019 = frontier_phi_39_34_ladder;
        }
        float _2224;
        if (_1616 > 0.0)
        {
            _2224 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2224 = frontier_phi_48_45_ladder;
        }
        float _2226 = isnan(_2019) ? _1754 : (isnan(_1754) ? _2019 : min(_1754, _2019));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1610) + _1599;
        float _2232 = (_2227 * _1613) + _1603;
        float _2233 = (_2227 * _1616) + _1607;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2234;
        float _2237 = _2234 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2233 > _2237) || ((_2233 < _2235) || ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 < _2235) || (_2231 > _2237))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2233, cbModelParam._m0[17u].z, fma(_2232, cbModelParam._m0[17u].y, _2231 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2233, cbModelParam._m0[18u].z, fma(_2232, cbModelParam._m0[18u].y, _2231 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2233, cbModelParam._m0[19u].z, fma(_2232, cbModelParam._m0[19u].y, _2231 * cbModelParam._m0[19u].x))), _1542);
            frontier_phi_24_48_ladder = _2431.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2431.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2431.x * cbModelParam._m0[1u].z;
        }
        _1635 = frontier_phi_24_48_ladder_2;
        _1637 = frontier_phi_24_48_ladder_1;
        _1639 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1542);
        _1635 = _1619.x * cbModelParam._m0[1u].z;
        _1637 = _1619.y * cbModelParam._m0[1u].z;
        _1639 = _1619.z * cbModelParam._m0[1u].z;
    }
    float _1651 = ((((1.0 - _662) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_662 * _649)) * _633;
    float _1652 = _1651 * ((cbModelParam._m0[1u].w * (_1635 - _1533)) + _1533);
    float _1653 = _1651 * ((cbModelParam._m0[1u].w * (_1637 - _1535)) + _1535);
    float _1654 = _1651 * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1657 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, _1652 * cbSceneParam._m0[91u].x));
    uvec4 _1673 = floatBitsToUint(cbInstanceData._m0[_608 + 5u]);
    uint _1675 = _1673.x * 14u;
    uint _1676 = _1675 + 13u;
    float _1683 = _633 + (-1.0);
    float _1688 = (cbLight._m0[_1676].x * _1683) + 1.0;
    float _1689 = (cbLight._m0[_1676].y * _1683) + 1.0;
    float _1690 = (cbLight._m0[_1676].z * _1683) + 1.0;
    float _1691 = (cbLight._m0[_1676].w * _1683) + 1.0;
    uint _1692 = _1675 + 5u;
    float _1698 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
    uint _1702 = _1675 + 4u;
    float _1708 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1712 = _1675 | 1u;
    float _1723 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_481, _482, _483));
    float _1726 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_481, _482, _483));
    float _3819 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _3830 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1731 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.3183098733425140380859375;
    float _1733 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1740 = ((cbLight._m0[_1692].x * _1698) * _1733) + ((cbLight._m0[_1702].x * _1708) * _1731);
    float _1741 = ((_1698 * cbLight._m0[_1692].y) * _1733) + ((_1708 * cbLight._m0[_1702].y) * _1731);
    float _1742 = ((_1698 * cbLight._m0[_1692].z) * _1733) + ((_1708 * cbLight._m0[_1702].z) * _1731);
    uvec4 _1746 = floatBitsToUint(cbLight._m0[_1675 + 12u]);
    bool _1748 = _1746.x == 0u;
    float _1759;
    float _1761;
    float _1763;
    if (_1748)
    {
        _1759 = _1740;
        _1761 = _1741;
        _1763 = _1742;
    }
    else
    {
        uint _1767 = _1675 + 6u;
        float _1783 = (dot(vec3(cbLight._m0[_1675 + 2u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _1784 = _1783 * _1783;
        float _3841 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1786 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _1759 = (((cbLight._m0[_1767].x * 0.3183098733425140380859375) * _1785) * _1786) + _1740;
        _1761 = (((cbLight._m0[_1767].y * 0.3183098733425140380859375) * _1785) * _1786) + _1741;
        _1763 = (((cbLight._m0[_1767].z * 0.3183098733425140380859375) * _1785) * _1786) + _1742;
    }
    bool _1766 = _1746.y == 0u;
    float _1804;
    float _1806;
    float _1808;
    if (_1766)
    {
        _1804 = _1759;
        _1806 = _1761;
        _1808 = _1763;
    }
    else
    {
        uint _1963 = _1675 + 7u;
        float _1979 = (dot(vec3(cbLight._m0[_1675 + 3u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _1980 = _1979 * _1979;
        float _3857 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1982 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _1804 = (((cbLight._m0[_1963].x * 0.3183098733425140380859375) * _1981) * _1982) + _1759;
        _1806 = (((cbLight._m0[_1963].y * 0.3183098733425140380859375) * _1981) * _1982) + _1761;
        _1808 = (((cbLight._m0[_1963].z * 0.3183098733425140380859375) * _1981) * _1982) + _1763;
    }
    uint _1811 = _1675 + 8u;
    float _1824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1675].w)) * _484) * 0.949999988079071044921875);
    float _1825 = _1824 * _1824;
    float _1826 = cbLight._m0[_1675].x + _560;
    float _1827 = cbLight._m0[_1675].y + _561;
    float _1828 = cbLight._m0[_1675].z + _562;
    float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
    float _1833 = _1832 * _1826;
    float _1834 = _1832 * _1827;
    float _1835 = _1832 * _1828;
    float _1836 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1675].xyz));
    float _3873 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _1840 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1841 = dot(vec3(_481, _482, _483), vec3(_1833, _1834, _1835));
    float _3895 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1845 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_1833, _1834, _1835));
    float _3906 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1849 = _1825 * _1825;
    float _1853 = ((_1844 * _1844) * (_1849 + (-1.0))) + 1.0;
    float _1864 = (exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1865 = 1.0 - _1825;
    float _1876 = (0.5 / (((_1840 * ((_1839 * _1865) + _1825)) + 9.9999999392252902907785028219223e-09) + (((_1840 * _1865) + _1825) * _1839))) * _1839;
    float _3917 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1849 / ((_1853 * _1853) * 3.141590118408203125));
    uint _1889 = _1675 + 9u;
    float _1900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1712].w)) * _484) * 0.949999988079071044921875);
    float _1901 = _1900 * _1900;
    float _1902 = cbLight._m0[_1712].x + _560;
    float _1903 = cbLight._m0[_1712].y + _561;
    float _1904 = cbLight._m0[_1712].z + _562;
    float _1908 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
    float _1909 = _1908 * _1902;
    float _1910 = _1908 * _1903;
    float _1911 = _1908 * _1904;
    float _1912 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1712].xyz));
    float _3928 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1916 = dot(vec3(_481, _482, _483), vec3(_1909, _1910, _1911));
    float _3939 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1909, _1910, _1911));
    float _3950 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1901 * _1901;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1937 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = 1.0 - _1901;
    float _1948 = (0.5 / (((_1840 * ((_1915 * _1938) + _1901)) + 9.9999999392252902907785028219223e-09) + (((_1840 * _1938) + _1901) * _1915))) * _1915;
    float _3961 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    float _1960 = (((_1937 * cbLight._m0[_1889].x) * _1950) * _1698) + (((_1864 * cbLight._m0[_1811].x) * _1878) * _1708);
    float _1961 = (((_1937 * cbLight._m0[_1889].y) * _1950) * _1698) + (((_1864 * cbLight._m0[_1811].y) * _1878) * _1708);
    float _1962 = (((_1937 * cbLight._m0[_1889].z) * _1950) * _1698) + (((_1864 * cbLight._m0[_1811].z) * _1878) * _1708);
    float _2024;
    float _2026;
    float _2028;
    if (_1748)
    {
        _2024 = _1960;
        _2026 = _1961;
        _2028 = _1962;
    }
    else
    {
        uint _2030 = _1675 + 2u;
        uint _2034 = _1675 + 10u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _484) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _560;
        float _2051 = cbLight._m0[_2030].y + _561;
        float _2052 = cbLight._m0[_2030].z + _562;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2030].xyz));
        float _3972 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2064 = dot(vec3(_481, _482, _483), vec3(_2057, _2058, _2059));
        float _3983 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _3994 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2086 = 1.0 - _2049;
        float _2096 = (0.5 / (((_1840 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1840 * _2086) + _2049) * _2063))) * _2063;
        float _4005 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2098 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2099 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _2024 = (((_2085 * cbLight._m0[_2034].x) * _2098) * _2099) + _1960;
        _2026 = (((_2085 * cbLight._m0[_2034].y) * _2098) * _2099) + _1961;
        _2028 = (((_2085 * cbLight._m0[_2034].z) * _2098) * _2099) + _1962;
    }
    float _2134;
    float _2136;
    float _2138;
    if (_1766)
    {
        _2134 = _2024;
        _2136 = _2026;
        _2138 = _2028;
    }
    else
    {
        uint _2145 = _1675 + 3u;
        uint _2149 = _1675 + 11u;
        float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _484) * 0.949999988079071044921875);
        float _2164 = _2163 * _2163;
        float _2165 = cbLight._m0[_2145].x + _560;
        float _2166 = cbLight._m0[_2145].y + _561;
        float _2167 = cbLight._m0[_2145].z + _562;
        float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
        float _2172 = _2171 * _2165;
        float _2173 = _2171 * _2166;
        float _2174 = _2171 * _2167;
        float _2175 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2145].xyz));
        float _4021 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2179 = dot(vec3(_481, _482, _483), vec3(_2172, _2173, _2174));
        float _4032 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2183 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2172, _2173, _2174));
        float _4043 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2187 = _2164 * _2164;
        float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
        float _2200 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2201 = 1.0 - _2164;
        float _2211 = (0.5 / (((_1840 * ((_2178 * _2201) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_1840 * _2201) + _2164) * _2178))) * _2178;
        float _4054 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2213 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
        float _2214 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _2134 = (((_2200 * cbLight._m0[_2149].x) * _2213) * _2214) + _2024;
        _2136 = (((_2200 * cbLight._m0[_2149].y) * _2213) * _2214) + _2026;
        _2138 = (((_2200 * cbLight._m0[_2149].z) * _2213) * _2214) + _2028;
    }
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    if (_1673.y == 0u)
    {
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2289;
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2289;
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2289;
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.x;
        uint _2316 = uint((float(_2304.y) * floor(float(uint(cbSceneParam._m0[85u].y * _569) / _2305))) + floor(float(uint(cbSceneParam._m0[85u].x * _568) / _2305)));
        float _2326 = (log2(_2292 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2327 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        uint _2330 = uint(isnan(14.0) ? _2327 : (isnan(_2327) ? 14.0 : min(_2327, 14.0)));
        uvec4 _2335 = texelFetch(g_lightClusterGridBuffer, int(((_2330 << 2u) + (_2316 << 6u)) >> 2u));
        uint _2336 = _2335.x;
        uint _2337 = _2304.z;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        if (((((1u << ((_2337 >> 4u) & 15u)) + 4294967295u) & _2336) == 0u) || ((_2337 & 240u) == 0u))
        {
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
        }
        else
        {
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            uint _2586 = 0u;
            uint _2595;
            bool _2596;
            for (;;)
            {
                _2595 = texelFetch(g_lightClassification, int((((_2330 << 5u) + (_2316 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                _2596 = _2595 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2596)
                {
                    frontier_phi_63_pred = _2585;
                    frontier_phi_63_pred_1 = _2584;
                    frontier_phi_63_pred_2 = _2583;
                    frontier_phi_63_pred_3 = _2582;
                    frontier_phi_63_pred_4 = _2581;
                    frontier_phi_63_pred_5 = _2580;
                }
                else
                {
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    uint _2710;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2583;
                    _2708 = _2584;
                    _2709 = _2585;
                    _2710 = _2595;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    for (;;)
                    {
                        uint _2714 = uint(findLSB(_2710)) + (_2586 << 5u);
                        uint _2711 = (_2710 + 4294967295u) & _2710;
                        uint _2716 = _2714 * 48u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2736 = (_2714 * 48u) + 4u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 3u)).x));
                        uint _2755 = (_2714 * 48u) + 8u;
                        vec3 _2766 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x));
                        float _2770 = _2730.x - _2290;
                        float _2771 = _2730.y - _2291;
                        float _2772 = _2730.z - _2292;
                        float _2773 = dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772));
                        float _2776 = inversesqrt(_2773);
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2780 = dot(vec3(_589, _592, _595), vec3(_2777, _2778, _2779));
                        float _2785 = 1.0 - (_2773 * _2730.w);
                        float _4080 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2787 = sqrt(_2773) * _2749.w;
                        float _2790 = 1.39999997615814208984375 / (_2787 + 1.39999997615814208984375);
                        float _2791 = _2790 * _2790;
                        float _2794 = ((1.0 - _2791) * _2780) + _2791;
                        float _2797 = _2787 * _2787;
                        float _2801 = ((isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * _2786) / ((_2797 * 0.699999988079071044921875) + 1.0);
                        float _2805 = (-0.0) - _2290;
                        float _2806 = (-0.0) - _2291;
                        float _2807 = (-0.0) - _2292;
                        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
                        float _2812 = _2811 * _2805;
                        float _2813 = _2811 * _2806;
                        float _2814 = _2811 * _2807;
                        float _2822 = exp2(log2(1.0 / ((_2797 * 3.5) + 5.0)) * 0.25);
                        float _2823 = 1.0 - _649;
                        float _2830 = sqrt(1.0 - ((1.0 - (_2823 * _2823)) * (1.0 - (_2822 * _2822))));
                        float _2831 = _2830 * _2830;
                        float _2832 = _2831 * _2831;
                        float _2833 = _2812 + _2777;
                        float _2834 = _2813 + _2778;
                        float _2835 = _2814 + _2779;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2843 = dot(vec3(_589, _592, _595), vec3(_2812, _2813, _2814));
                        float _4096 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2846 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2847 = dot(vec3(_589, _592, _595), vec3(_2839 * _2833, _2839 * _2834, _2839 * _2835));
                        float _4107 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2850 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2854 = ((_2850 * _2850) * (_2832 + (-1.0))) + 1.0;
                        float _2855 = _2790 * _2831;
                        float _2856 = _2855 * _2855;
                        float _2859 = ((1.0 - _2856) * _2780) + _2856;
                        float _4118 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2861 = 1.0 - _2831;
                        float _2871 = (0.5 / (((_2860 * ((_2846 * _2861) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2860 * _2861) + _2831) * _2846))) * _2860;
                        float _4129 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2882 = (((_2832 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_2854 * _2854) * ((_2797 * 2.1991131305694580078125) + 3.141590118408203125))) * _2786;
                        _2639 = (_2801 * _2749.x) + _2707;
                        _2640 = (_2801 * _2749.y) + _2708;
                        _2641 = (_2801 * _2749.z) + _2709;
                        _2636 = (_2882 * _2766.x) + _2704;
                        _2637 = (_2882 * _2766.y) + _2705;
                        _2638 = (_2882 * _2766.z) + _2706;
                        if (_2711 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2640;
                            _2709 = _2641;
                            _2710 = _2711;
                        }
                    }
                    frontier_phi_63_pred = _2641;
                    frontier_phi_63_pred_1 = _2640;
                    frontier_phi_63_pred_2 = _2639;
                    frontier_phi_63_pred_3 = _2638;
                    frontier_phi_63_pred_4 = _2637;
                    frontier_phi_63_pred_5 = _2636;
                }
                _2447 = frontier_phi_63_pred;
                _2445 = frontier_phi_63_pred_1;
                _2443 = frontier_phi_63_pred_2;
                _2441 = frontier_phi_63_pred_3;
                _2439 = frontier_phi_63_pred_4;
                _2437 = frontier_phi_63_pred_5;
                uint _2587 = _2586 + 1u;
                if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2580 = _2437;
                    _2581 = _2439;
                    _2582 = _2441;
                    _2583 = _2443;
                    _2584 = _2445;
                    _2585 = _2447;
                    _2586 = _2587;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
        }
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.z;
        uint _2453 = (_2451 >> 8u) & 15u;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((4294967295u << _2453) & _2336) == 0u)
        {
            _2548 = _2436;
            _2550 = _2438;
            _2552 = _2440;
            _2554 = _2442;
            _2556 = _2444;
            _2558 = _2446;
        }
        else
        {
            float _2573 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
            float _2574 = _2573 * _2290;
            float _2575 = _2573 * _2291;
            float _2576 = _2573 * _2292;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2453 < ((_2451 >> 12u) & 15u))
            {
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2687 = _2436;
                float _2688 = _2438;
                float _2689 = _2440;
                float _2690 = _2442;
                float _2691 = _2444;
                float _2692 = _2446;
                uint _2693 = _2453;
                uint _2702;
                bool _2703;
                for (;;)
                {
                    _2702 = texelFetch(g_lightClassification, int((((_2330 << 5u) + (_2316 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                    _2703 = _2702 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2703)
                    {
                        frontier_phi_69_pred = _2692;
                        frontier_phi_69_pred_1 = _2691;
                        frontier_phi_69_pred_2 = _2690;
                        frontier_phi_69_pred_3 = _2689;
                        frontier_phi_69_pred_4 = _2688;
                        frontier_phi_69_pred_5 = _2687;
                    }
                    else
                    {
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _2900 = _2687;
                        float _2901 = _2688;
                        float _2902 = _2689;
                        float _2903 = _2690;
                        float _2904 = _2691;
                        float _2905 = _2692;
                        uint _2906 = _2702;
                        uint _2907;
                        vec4 _2932;
                        float _2933;
                        vec4 _2948;
                        vec3 _2960;
                        vec4 _2976;
                        vec4 _2992;
                        float _3039;
                        bool _3040;
                        for (;;)
                        {
                            uint _2917 = ((_2693 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2906));
                            _2907 = (_2906 + 4294967295u) & _2906;
                            uint _2919 = _2917 * 40u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            _2933 = _2932.w;
                            uint _2935 = (_2917 * 40u) + 4u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2950 = (_2917 * 40u) + 8u;
                            _2960 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x));
                            uint _2963 = (_2917 * 40u) + 16u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2979 = (_2917 * 40u) + 20u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2995 = (_2917 * 40u) + 24u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3014 = (_2917 * 40u) + 28u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3039 = fma(_2292, _3027.z, fma(_2291, _3027.y, _3027.x * _2290)) + _3027.w;
                            _3040 = !((fma(_2292, _3008.z, fma(_2291, _3008.y, _3008.x * _2290)) + _3008.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3040)
                            {
                                float _3067 = _2932.x - _2290;
                                float _3068 = _2932.y - _2291;
                                float _3069 = _2932.z - _2292;
                                float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                                float _3073 = inversesqrt(_3070);
                                float _3074 = _3073 * _3067;
                                float _3075 = _3073 * _3068;
                                float _3076 = _3073 * _3069;
                                float _3080 = 1.0 - (_3070 / (_2933 * _2933));
                                float _4140 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3085 = sqrt(_3070) * _2948.w;
                                float _3087 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                                float _3088 = _3087 * _3087;
                                float _3091 = ((1.0 - _3088) * dot(vec3(_3074, _3075, _3076), vec3(_589, _592, _595))) + _3088;
                                float _3094 = _3085 * _3085;
                                float _3098 = (fma(_2292, _2976.z, fma(_2291, _2976.y, _2976.x * _2290)) + _2976.w) / _3039;
                                float _3099 = (fma(_2292, _2992.z, fma(_2291, _2992.y, _2992.x * _2290)) + _2992.w) / _3039;
                                float _3103 = 1.0 - dot(vec2(_3098, _3099), vec2(_3098, _3099));
                                float _4156 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3105 = _3104 * (((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3081) / ((_3094 * 0.699999988079071044921875) + 1.0));
                                float _3117 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                                float _3118 = 1.0 - _649;
                                float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                                float _3126 = _3125 * _3125;
                                float _3127 = _3126 * _3126;
                                float _3128 = _3074 - _2574;
                                float _3129 = _3075 - _2575;
                                float _3130 = _3076 - _2576;
                                float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                                float _3138 = dot(vec3(_589, _592, _595), vec3((-0.0) - _2574, (-0.0) - _2575, (-0.0) - _2576));
                                float _4167 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3142 = dot(vec3(_589, _592, _595), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                                float _4178 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3145 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                                float _3150 = _3087 * _3126;
                                float _3151 = _3150 * _3150;
                                float _3157 = ((1.0 - _3151) * dot(vec3(_589, _592, _595), vec3(_3074, _3075, _3076))) + _3151;
                                float _4189 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3159 = 1.0 - _3126;
                                float _3169 = (0.5 / (((_3158 * ((_3141 * _3159) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3126) * _3141))) * _3158;
                                float _4200 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3179 = (_3104 * _3081) * (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_3149 * _3149) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3105 * _2948.z;
                                frontier_phi_75_pred_1 = _3105 * _2948.y;
                                frontier_phi_75_pred_2 = _3105 * _2948.x;
                                frontier_phi_75_pred_3 = _3179 * _2960.z;
                                frontier_phi_75_pred_4 = _3179 * _2960.y;
                                frontier_phi_75_pred_5 = _3179 * _2960.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3188 = frontier_phi_75_pred;
                            _3187 = frontier_phi_75_pred_1;
                            _3186 = frontier_phi_75_pred_2;
                            _3185 = frontier_phi_75_pred_3;
                            _3184 = frontier_phi_75_pred_4;
                            _3183 = frontier_phi_75_pred_5;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            _2892 = _3188 + _2905;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            _2889 = _3185 + _2902;
                            if (_2907 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2907;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2892;
                        frontier_phi_69_pred_1 = _2891;
                        frontier_phi_69_pred_2 = _2890;
                        frontier_phi_69_pred_3 = _2889;
                        frontier_phi_69_pred_4 = _2888;
                        frontier_phi_69_pred_5 = _2887;
                    }
                    _2559 = frontier_phi_69_pred;
                    _2557 = frontier_phi_69_pred_1;
                    _2555 = frontier_phi_69_pred_2;
                    _2553 = frontier_phi_69_pred_3;
                    _2551 = frontier_phi_69_pred_4;
                    _2549 = frontier_phi_69_pred_5;
                    uint _2694 = _2693 + 1u;
                    if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2687 = _2549;
                        _2688 = _2551;
                        _2689 = _2553;
                        _2690 = _2555;
                        _2691 = _2557;
                        _2692 = _2559;
                        _2693 = _2694;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2559;
                frontier_phi_57_58_ladder_1 = _2557;
                frontier_phi_57_58_ladder_2 = _2555;
                frontier_phi_57_58_ladder_3 = _2553;
                frontier_phi_57_58_ladder_4 = _2551;
                frontier_phi_57_58_ladder_5 = _2549;
            }
            else
            {
                frontier_phi_57_58_ladder = _2446;
                frontier_phi_57_58_ladder_1 = _2444;
                frontier_phi_57_58_ladder_2 = _2442;
                frontier_phi_57_58_ladder_3 = _2440;
                frontier_phi_57_58_ladder_4 = _2438;
                frontier_phi_57_58_ladder_5 = _2436;
            }
            _2548 = frontier_phi_57_58_ladder_5;
            _2550 = frontier_phi_57_58_ladder_4;
            _2552 = frontier_phi_57_58_ladder_3;
            _2554 = frontier_phi_57_58_ladder_2;
            _2556 = frontier_phi_57_58_ladder_1;
            _2558 = frontier_phi_57_58_ladder;
        }
        float _2563 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2348 = (_2563 * _2554) + _1804;
        _2350 = (_2563 * _2556) + _1806;
        _2352 = (_2563 * _2558) + _1808;
        _2354 = ((_2548 * 0.039999999105930328369140625) * _2563) + _2134;
        _2356 = ((_2550 * 0.039999999105930328369140625) * _2563) + _2136;
        _2358 = ((_2552 * 0.039999999105930328369140625) * _2563) + _2138;
    }
    else
    {
        _2348 = _1804;
        _2350 = _1806;
        _2352 = _1808;
        _2354 = _2134;
        _2356 = _2136;
        _2358 = _2138;
    }
    float _4216 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4227 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4238 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    uint _2378 = _608 + 6u;
    float _2386 = _568 / cbSceneParam._m0[86u].x;
    float _2387 = _569 / cbSceneParam._m0[86u].y;
    vec4 _2401 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2386, _2387, (log2((isnan(cbSceneParam._m0[77u].w) ? _503 : (isnan(_503) ? cbSceneParam._m0[77u].w : min(_503, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2403 = _2401.x;
    float _2404 = _2401.y;
    float _2405 = _2401.z;
    float _2406 = _2401.w;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_503 > cbSceneParam._m0[78u].w)
    {
        float _2461 = isnan(_503) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _503 : min(cbSceneParam._m0[80u].w, _503));
        float _2462 = _2461 / _503;
        float _2473 = _2462 * _553;
        float _2474 = _554 * _2462;
        float _2475 = (-0.0) - _2474;
        float _2476 = _2462 * _555;
        float _2478 = (cbSceneParam._m0[77u].w * _2475) / _2461;
        float _2479 = _2478 + cbSceneParam._m0[79u].w;
        float _2480 = cbSceneParam._m0[79u].w - _2474;
        float _2486 = sqrt(((_2473 * _2473) + (_2474 * _2474)) + (_2476 * _2476));
        float _2489 = (1.0 - (cbSceneParam._m0[77u].w / _2461)) * _2486;
        float _2494 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2496 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2649;
        if (abs((_2475 - _2478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2649 = ((((_2479 > 0.0) ? exp2(_2494 * _2479) : (2.0 - exp2(_2496 * _2479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2489;
        }
        else
        {
            float _2609 = 1.0 / cbSceneParam._m0[80u].x;
            float _2610 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : max(_2479, _2480));
            float _2611 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : min(_2479, _2480));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            _2649 = ((abs(_2486 / _2475) * cbSceneParam._m0[80u].y) * ((((_2620 - _2621) * 2.0) - ((exp2(_2494 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)))) - exp2(_2494 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))))) * _2609)) - ((exp2(_2496 * _2620) - exp2(_2496 * _2621)) * _2609))) + (_2489 * cbSceneParam._m0[80u].z);
        }
        vec4 _2651 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2386, _2387, 1.0), 0.0);
        float _2660 = exp2((_2649 * (-1.44269502162933349609375)) * (1.0 - _2651.w));
        float _2661 = log2(_2660);
        float _2677 = log2(_2406);
        _2498 = (exp2(_2677 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].x)) * _2651.x) / cbSceneParam._m0[78u].x)) + _2403;
        _2500 = (exp2(_2677 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].y)) * _2651.y) / cbSceneParam._m0[78u].y)) + _2404;
        _2502 = (exp2(_2677 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].z)) * _2651.z) / cbSceneParam._m0[78u].z)) + _2405;
        _2504 = _2660 * _2406;
    }
    else
    {
        _2498 = _2403;
        _2500 = _2404;
        _2502 = _2405;
        _2504 = _2406;
    }
    float _2516 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2517 = _2516 == 3.0;
    float _2518 = log2(_2504);
    float _2525 = exp2(_2518 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2348 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _633))) + ((_2354 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1440)) * cbPerFrame._m0[3u].x));
    float _2526 = exp2(_2518 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2350 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _633))) + ((_2356 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1440)) * cbPerFrame._m0[3u].x));
    float _2527 = exp2(_2518 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2352 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _633))) + ((_2358 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1440)) * cbPerFrame._m0[3u].x));
    float _2536 = (_2516 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2536 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2498)));
    SV_Target.y = _2536 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.z = _2536 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.w = cbInstanceData._m0[_2378].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2378].w;
}


