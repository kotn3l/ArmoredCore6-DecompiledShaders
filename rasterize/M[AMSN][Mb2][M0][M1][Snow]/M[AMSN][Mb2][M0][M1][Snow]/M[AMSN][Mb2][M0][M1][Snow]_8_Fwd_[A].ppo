#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _954;
float _3323;
float _3324;
float _3325;
float _3326;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _242.x;
    float _246 = _242.y;
    float _247 = _242.z;
    vec4 _279 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _292 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3335 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _302 = ((_279.z - _247) * _293) + _247;
    float _306 = ((((_279.x - _245) * _293) + _245) * 2.0) + (-1.0);
    float _308 = ((((_279.y - _246) * _293) + _246) * 2.0) + (-1.0);
    float _309 = dot(vec2(_306, _308), vec2(_306, _308));
    float _3346 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _314 = sqrt(1.0 - (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))));
    vec4 _332 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _337 = _332.x * cbMtdParam._m0[9u].x;
    float _338 = _332.y * cbMtdParam._m0[9u].y;
    float _339 = _332.z * cbMtdParam._m0[9u].z;
    vec4 _358 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _372 = (((_358.x * cbMtdParam._m0[10u].x) - _337) * _293) + _337;
    float _373 = (((_358.y * cbMtdParam._m0[10u].y) - _338) * _293) + _338;
    float _374 = (((_358.z * cbMtdParam._m0[10u].z) - _339) * _293) + _339;
    float _377 = fma(_314, _226, fma(_308, _218 * TANGENT.x, (_204 * _196) * _306));
    float _380 = fma(_314, _227, fma(_308, _218 * TANGENT.y, (_204 * _197) * _306));
    float _383 = fma(_314, _228, fma(_308, _218 * TANGENT.z, (_204 * _198) * _306));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _3357 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _391 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _3368 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3379 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3390 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _461 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _451);
    float _462 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _451);
    float _463 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _451);
    float _467 = inversesqrt(dot(vec3(_461, _462, _463), vec3(_461, _462, _463)));
    float _468 = _461 * _467;
    float _469 = _462 * _467;
    float _470 = _463 * _467;
    vec4 _475 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _477 = _475.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _634 = sqrt(((_461 * _461) + (_462 * _462)) + (_463 * _463));
        float _640 = (cbMatDynParam._m0[5u].x * _634) + cbMatDynParam._m0[5u].y;
        float _3401 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _645 = (cbMatDynParam._m0[5u].z * _634) + cbMatDynParam._m0[5u].w;
        float _3412 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) - _641)) + _641) < ((_477 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _489 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _490 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _510 = fma(_390, cbSceneParam._m0[5u].z, fma(_389, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _388));
    float _513 = fma(_390, cbSceneParam._m0[6u].z, fma(_389, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _388));
    float _516 = fma(_390, cbSceneParam._m0[7u].z, fma(_389, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _388));
    uint _529 = uint(roundEven(NORMAL.w)) * 13u;
    uint _530 = _529 + 9u;
    uint _531 = _530 + uint(cbMatDynParam._m0[0u].w);
    float _537 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_531].x;
    float _538 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_531].y;
    float _539 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_531].z;
    float _3423 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    vec4 _551 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _489, cbSceneParam._m0[86u].y * _490));
    float _554 = _551.x * TEXCOORD_9.w;
    float _555 = dot(vec3(_388, _389, _390), vec3(_468, _469, _470));
    float _558 = _555 * 2.0;
    float _562 = (_558 * _388) - _468;
    float _563 = (_558 * _389) - _469;
    float _564 = (_558 * _390) - _470;
    float _568 = abs(dot(vec3(_468, _469, _470), vec3(_388, _389, _390)));
    float _3456 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _570 = sqrt(_391);
    float _583 = exp2((_570 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_570 * 3.0));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _953;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _678 = fma(_623, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615));
        float _682 = fma(_623, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615));
        float _686 = fma(_623, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615));
        float _711 = _615 + _388;
        float _712 = _619 + _389;
        float _713 = _623 + _390;
        float _723 = fma(_713, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) - _678;
        float _724 = fma(_713, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) - _682;
        float _725 = fma(_713, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) - _686;
        float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
        float _742 = ((_729 * _723) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_678 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_729 * _724) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_682 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_729 * _725) / cbModelParam._m0[34u].z) + ((((((_686 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        float _781 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_747.x + (-0.5));
        float _783 = _781 * (_747.y + (-0.5));
        float _784 = _781 * (_747.z + (-0.5));
        float _791 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_754.x + (-0.5));
        float _793 = _791 * (_754.y + (-0.5));
        float _794 = _791 * (_754.z + (-0.5));
        float _801 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_761.x + (-0.5));
        float _803 = _801 * (_761.y + (-0.5));
        float _804 = _801 * (_761.z + (-0.5));
        float _811 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_768.x + (-0.5));
        float _813 = _811 * (_768.y + (-0.5));
        float _814 = _811 * (_768.z + (-0.5));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = _782 * 0.5;
        float _819 = _792 * 0.5;
        float _820 = _802 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _835 = (dot(vec3(_388, _389, _390), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _845 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3504 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_847 + 1.0))) + _852) * _815;
        float _862 = _783 * 0.5;
        float _863 = _793 * 0.5;
        float _864 = _803 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_388, _389, _390), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3537 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_889 + 1.0))) + _894) * _816;
        float _904 = _784 * 0.5;
        float _905 = _794 * 0.5;
        float _906 = _804 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_388, _389, _390), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3570 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_931 + 1.0))) + _936) * _817;
        _953 = _784;
        _955 = _783;
        _956 = _782;
        _957 = _794;
        _958 = _793;
        _959 = _792;
        _960 = _804;
        _961 = _803;
        _962 = _802;
        _963 = _817;
        _964 = _816;
        _965 = _815;
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
    }
    else
    {
        _953 = _954;
        _955 = _954;
        _956 = _954;
        _957 = _954;
        _958 = _954;
        _959 = _954;
        _960 = _954;
        _961 = _954;
        _962 = _954;
        _963 = _954;
        _964 = _954;
        _965 = _954;
        _966 = 0.0;
        _967 = 0.0;
        _968 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_623, cbModelParam._m0[30u].z, fma(_619, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _615));
        float _1001 = fma(_623, cbModelParam._m0[31u].z, fma(_619, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _615));
        float _1005 = fma(_623, cbModelParam._m0[32u].z, fma(_619, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _615));
        float _1028 = _615 + _388;
        float _1029 = _619 + _389;
        float _1030 = _623 + _390;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_388, _389, _390), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3633 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_388, _389, _390), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3666 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_388, _389, _390), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3699 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _954;
        _1267 = _954;
        _1268 = _954;
        _1269 = _954;
        _1270 = _954;
        _1271 = _954;
        _1272 = _954;
        _1273 = _954;
        _1274 = _954;
        _1275 = _954;
        _1276 = _954;
        _1277 = _954;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _562 * 0.5;
    float _1335 = _563 * 0.5;
    float _1336 = _564 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_953, _957, _960, _963));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_955, _958, _961, _964));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_956, _959, _962, _965));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _391);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1452 = fma(_623, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615)) + cbModelParam._m0[13u].w;
        float _1456 = fma(_623, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615)) + cbModelParam._m0[14u].w;
        float _1460 = fma(_623, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615)) + cbModelParam._m0[15u].w;
        float _1463 = fma(_564, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562));
        float _1466 = fma(_564, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562));
        float _1469 = fma(_564, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562));
        float _1497;
        if (_1463 > 0.0)
        {
            _1497 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1497 = frontier_phi_19_17_ladder;
        }
        float _1702;
        if (_1466 > 0.0)
        {
            _1702 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1702 = frontier_phi_28_24_ladder;
        }
        float _1945;
        if (_1469 > 0.0)
        {
            _1945 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1945 = frontier_phi_40_35_ladder;
        }
        float _1947 = isnan(_1702) ? _1497 : (isnan(_1497) ? _1702 : min(_1497, _1702));
        float _1948 = isnan(_1945) ? _1947 : (isnan(_1947) ? _1945 : min(_1947, _1945));
        float _1952 = (_1948 * _1463) + _1452;
        float _1953 = (_1948 * _1466) + _1456;
        float _1954 = (_1948 * _1469) + _1460;
        float _1955 = _1948 * 9.9999997473787516355514526367188e-05;
        float _1957 = (-1.0) - _1955;
        float _1959 = _1955 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1954 > _1959) || ((_1954 < _1957) || ((_1953 > _1959) || ((_1953 < _1957) || ((_1952 < _1957) || (_1952 > _1959))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1954, cbModelParam._m0[9u].z, fma(_1953, cbModelParam._m0[9u].y, _1952 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1954, cbModelParam._m0[10u].z, fma(_1953, cbModelParam._m0[10u].y, _1952 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1954, cbModelParam._m0[11u].z, fma(_1953, cbModelParam._m0[11u].y, _1952 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_18_40_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1485 = frontier_phi_18_40_ladder_2;
        _1487 = frontier_phi_18_40_ladder_1;
        _1489 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_562, _563, _564), _1403);
        _1485 = _1473.x * cbModelParam._m0[1u].y;
        _1487 = _1473.y * cbModelParam._m0[1u].y;
        _1489 = _1473.z * cbModelParam._m0[1u].y;
    }
    float _1493 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _391);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1493 : min(cbModelParam._m0[25u].w, _1493));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_623, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_623, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_623, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_564, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562));
        float _1565 = fma(_564, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562));
        float _1568 = fma(_564, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562));
        float _1707;
        if (_1562 > 0.0)
        {
            _1707 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1707 = frontier_phi_30_26_ladder;
        }
        float _1972;
        if (_1565 > 0.0)
        {
            _1972 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1972 = frontier_phi_42_37_ladder;
        }
        float _2177;
        if (_1568 > 0.0)
        {
            _2177 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2177 = frontier_phi_51_48_ladder;
        }
        float _2179 = isnan(_1972) ? _1707 : (isnan(_1707) ? _1972 : min(_1707, _1972));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1562) + _1551;
        float _2185 = (_2180 * _1565) + _1555;
        float _2186 = (_2180 * _1568) + _1559;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2186, cbModelParam._m0[17u].z, fma(_2185, cbModelParam._m0[17u].y, _2184 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2186, cbModelParam._m0[18u].z, fma(_2185, cbModelParam._m0[18u].y, _2184 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2186, cbModelParam._m0[19u].z, fma(_2185, cbModelParam._m0[19u].y, _2184 * cbModelParam._m0[19u].x))), _1494);
            frontier_phi_27_51_ladder = _2384.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2384.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2384.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_27_51_ladder_2;
        _1589 = frontier_phi_27_51_ladder_1;
        _1591 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_562, _563, _564), _1494);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1603 = ((((1.0 - _583) * ((_570 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_583 * _570)) * _554;
    float _1604 = _1603 * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1605 = _1603 * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1606 = _1603 * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    uvec4 _1625 = floatBitsToUint(cbInstanceData._m0[_529 + 5u]);
    uint _1627 = _1625.x * 14u;
    uint _1628 = _1627 + 13u;
    float _1635 = _554 + (-1.0);
    float _1640 = (cbLight._m0[_1628].x * _1635) + 1.0;
    float _1641 = (cbLight._m0[_1628].y * _1635) + 1.0;
    float _1642 = (cbLight._m0[_1628].z * _1635) + 1.0;
    float _1643 = (cbLight._m0[_1628].w * _1635) + 1.0;
    uint _1644 = _1627 + 5u;
    float _1650 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1654 = _1627 + 4u;
    float _1660 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1664 = _1627 | 1u;
    float _1675 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_388, _389, _390));
    float _1678 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_388, _389, _390));
    float _3835 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _3846 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1683 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1685 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1692 = ((cbLight._m0[_1644].x * _1650) * _1685) + ((cbLight._m0[_1654].x * _1660) * _1683);
    float _1693 = ((_1650 * cbLight._m0[_1644].y) * _1685) + ((_1660 * cbLight._m0[_1654].y) * _1683);
    float _1694 = ((_1650 * cbLight._m0[_1644].z) * _1685) + ((_1660 * cbLight._m0[_1654].z) * _1683);
    uvec4 _1699 = floatBitsToUint(cbLight._m0[_1627 + 12u]);
    bool _1701 = _1699.x == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1701)
    {
        _1712 = _1692;
        _1714 = _1693;
        _1716 = _1694;
    }
    else
    {
        uint _1720 = _1627 + 6u;
        float _1736 = (dot(vec3(cbLight._m0[_1627 + 2u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1737 = _1736 * _1736;
        float _3857 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1739 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1712 = (((cbLight._m0[_1720].x * 0.3183098733425140380859375) * _1738) * _1739) + _1692;
        _1714 = (((cbLight._m0[_1720].y * 0.3183098733425140380859375) * _1738) * _1739) + _1693;
        _1716 = (((cbLight._m0[_1720].z * 0.3183098733425140380859375) * _1738) * _1739) + _1694;
    }
    bool _1719 = _1699.y == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1719)
    {
        _1757 = _1712;
        _1759 = _1714;
        _1761 = _1716;
    }
    else
    {
        uint _1916 = _1627 + 7u;
        float _1932 = (dot(vec3(cbLight._m0[_1627 + 3u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _3873 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1935 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1757 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1712;
        _1759 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1714;
        _1761 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1716;
    }
    uint _1764 = _1627 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _391) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1627].x + _468;
    float _1780 = cbLight._m0[_1627].y + _469;
    float _1781 = cbLight._m0[_1627].z + _470;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1627].xyz));
    float _3889 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _1793 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1794 = dot(vec3(_388, _389, _390), vec3(_1786, _1787, _1788));
    float _3911 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1786, _1787, _1788));
    float _3922 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1818 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1793 * ((_1792 * _1818) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1818) + _1778) * _1792))) * _1792;
    float _3933 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1842 = _1627 + 9u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _391) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1664].x + _468;
    float _1856 = cbLight._m0[_1664].y + _469;
    float _1857 = cbLight._m0[_1664].z + _470;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1664].xyz));
    float _3944 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1869 = dot(vec3(_388, _389, _390), vec3(_1862, _1863, _1864));
    float _3955 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1862, _1863, _1864));
    float _3966 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1854 * _1854;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = 1.0 - _1854;
    float _1901 = (0.5 / (((_1793 * ((_1868 * _1891) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1891) + _1854) * _1868))) * _1868;
    float _3977 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1913 = (((_1890 * cbLight._m0[_1842].x) * _1903) * _1650) + (((_1817 * cbLight._m0[_1764].x) * _1831) * _1660);
    float _1914 = (((_1890 * cbLight._m0[_1842].y) * _1903) * _1650) + (((_1817 * cbLight._m0[_1764].y) * _1831) * _1660);
    float _1915 = (((_1890 * cbLight._m0[_1842].z) * _1903) * _1650) + (((_1817 * cbLight._m0[_1764].z) * _1831) * _1660);
    float _1977;
    float _1979;
    float _1981;
    if (_1701)
    {
        _1977 = _1913;
        _1979 = _1914;
        _1981 = _1915;
    }
    else
    {
        uint _1983 = _1627 + 2u;
        uint _1987 = _1627 + 10u;
        float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _391) * 0.949999988079071044921875);
        float _2002 = _2001 * _2001;
        float _2003 = cbLight._m0[_1983].x + _468;
        float _2004 = cbLight._m0[_1983].y + _469;
        float _2005 = cbLight._m0[_1983].z + _470;
        float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
        float _2010 = _2009 * _2003;
        float _2011 = _2009 * _2004;
        float _2012 = _2009 * _2005;
        float _2013 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1983].xyz));
        float _3988 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2017 = dot(vec3(_388, _389, _390), vec3(_2010, _2011, _2012));
        float _3999 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2021 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2010, _2011, _2012));
        float _4010 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2025 = _2002 * _2002;
        float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
        float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2039 = 1.0 - _2002;
        float _2049 = (0.5 / (((_1793 * ((_2016 * _2039) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2039) + _2002) * _2016))) * _2016;
        float _4021 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2051 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
        float _2052 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1977 = (((_2038 * cbLight._m0[_1987].x) * _2051) * _2052) + _1913;
        _1979 = (((_2038 * cbLight._m0[_1987].y) * _2051) * _2052) + _1914;
        _1981 = (((_2038 * cbLight._m0[_1987].z) * _2051) * _2052) + _1915;
    }
    float _2087;
    float _2089;
    float _2091;
    if (_1719)
    {
        _2087 = _1977;
        _2089 = _1979;
        _2091 = _1981;
    }
    else
    {
        uint _2098 = _1627 + 3u;
        uint _2102 = _1627 + 11u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _391) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _468;
        float _2119 = cbLight._m0[_2098].y + _469;
        float _2120 = cbLight._m0[_2098].z + _470;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2098].xyz));
        float _4037 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2132 = dot(vec3(_388, _389, _390), vec3(_2125, _2126, _2127));
        float _4048 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4059 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2154 = 1.0 - _2117;
        float _2164 = (0.5 / (((_1793 * ((_2131 * _2154) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2154) + _2117) * _2131))) * _2131;
        float _4070 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _2087 = (((_2153 * cbLight._m0[_2102].x) * _2166) * _2167) + _1977;
        _2089 = (((_2153 * cbLight._m0[_2102].y) * _2166) * _2167) + _1979;
        _2091 = (((_2153 * cbLight._m0[_2102].z) * _2166) * _2167) + _1981;
    }
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1625.y == 0u)
    {
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2242;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2242;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2242;
        uvec4 _2257 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2258 = _2257.x;
        uint _2269 = uint((float(_2257.y) * floor(float(uint(cbSceneParam._m0[85u].y * _490) / _2258))) + floor(float(uint(cbSceneParam._m0[85u].x * _489) / _2258)));
        float _2279 = (log2(_2245 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2280 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        uint _2283 = uint(isnan(14.0) ? _2280 : (isnan(_2280) ? 14.0 : min(_2280, 14.0)));
        uvec4 _2288 = texelFetch(g_lightClusterGridBuffer, int(((_2283 << 2u) + (_2269 << 6u)) >> 2u));
        uint _2289 = _2288.x;
        uint _2290 = _2257.z;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((((1u << ((_2290 >> 4u) & 15u)) + 4294967295u) & _2289) == 0u) || ((_2290 & 240u) == 0u))
        {
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
        }
        else
        {
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            uint _2547 = 0u;
            uint _2556;
            bool _2557;
            for (;;)
            {
                _2556 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2547 << 2u)) >> 2u)).x;
                _2557 = _2556 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2557)
                {
                    frontier_phi_68_pred = _2543;
                    frontier_phi_68_pred_1 = _2546;
                    frontier_phi_68_pred_2 = _2545;
                    frontier_phi_68_pred_3 = _2544;
                    frontier_phi_68_pred_4 = _2542;
                    frontier_phi_68_pred_5 = _2541;
                }
                else
                {
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    uint _2692;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2556;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    for (;;)
                    {
                        uint _2696 = uint(findLSB(_2692)) + (_2547 << 5u);
                        uint _2693 = (_2692 + 4294967295u) & _2692;
                        uint _2698 = _2696 * 48u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 3u)).x));
                        uint _2718 = (_2696 * 48u) + 4u;
                        vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 3u)).x));
                        uint _2737 = (_2696 * 48u) + 8u;
                        vec3 _2748 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x));
                        float _2752 = _2712.x - _2243;
                        float _2753 = _2712.y - _2244;
                        float _2754 = _2712.z - _2245;
                        float _2755 = dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754));
                        float _2758 = inversesqrt(_2755);
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2762 = dot(vec3(_510, _513, _516), vec3(_2759, _2760, _2761));
                        float _2767 = 1.0 - (_2755 * _2712.w);
                        float _4096 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2769 = sqrt(_2755) * _2731.w;
                        float _2772 = 1.39999997615814208984375 / (_2769 + 1.39999997615814208984375);
                        float _2773 = _2772 * _2772;
                        float _2776 = ((1.0 - _2773) * _2762) + _2773;
                        float _2779 = _2769 * _2769;
                        float _2783 = ((isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))) * _2768) / ((_2779 * 0.699999988079071044921875) + 1.0);
                        float _2787 = (-0.0) - _2243;
                        float _2788 = (-0.0) - _2244;
                        float _2789 = (-0.0) - _2245;
                        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                        float _2794 = _2793 * _2787;
                        float _2795 = _2793 * _2788;
                        float _2796 = _2793 * _2789;
                        float _2804 = exp2(log2(1.0 / ((_2779 * 3.5) + 5.0)) * 0.25);
                        float _2805 = 1.0 - _570;
                        float _2812 = sqrt(1.0 - ((1.0 - (_2805 * _2805)) * (1.0 - (_2804 * _2804))));
                        float _2813 = _2812 * _2812;
                        float _2814 = _2813 * _2813;
                        float _2815 = _2794 + _2759;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2825 = dot(vec3(_510, _513, _516), vec3(_2794, _2795, _2796));
                        float _4112 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2828 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2829 = dot(vec3(_510, _513, _516), vec3(_2821 * _2815, _2821 * _2816, _2821 * _2817));
                        float _4123 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2832 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2836 = ((_2832 * _2832) * (_2814 + (-1.0))) + 1.0;
                        float _2837 = _2772 * _2813;
                        float _2838 = _2837 * _2837;
                        float _2841 = ((1.0 - _2838) * _2762) + _2838;
                        float _4134 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2843 = 1.0 - _2813;
                        float _2853 = (0.5 / (((_2842 * ((_2828 * _2843) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2842 * _2843) + _2813) * _2828))) * _2842;
                        float _4145 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2864 = (((_2814 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_2836 * _2836) * ((_2779 * 2.1991131305694580078125) + 3.141590118408203125))) * _2768;
                        _2616 = (_2783 * _2731.x) + _2689;
                        _2617 = (_2783 * _2731.y) + _2690;
                        _2618 = (_2783 * _2731.z) + _2691;
                        _2613 = (_2864 * _2748.x) + _2686;
                        _2614 = (_2864 * _2748.y) + _2687;
                        _2615 = (_2864 * _2748.z) + _2688;
                        if (_2693 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2693;
                        }
                    }
                    frontier_phi_68_pred = _2615;
                    frontier_phi_68_pred_1 = _2618;
                    frontier_phi_68_pred_2 = _2617;
                    frontier_phi_68_pred_3 = _2616;
                    frontier_phi_68_pred_4 = _2614;
                    frontier_phi_68_pred_5 = _2613;
                }
                _2394 = frontier_phi_68_pred;
                _2400 = frontier_phi_68_pred_1;
                _2398 = frontier_phi_68_pred_2;
                _2396 = frontier_phi_68_pred_3;
                _2392 = frontier_phi_68_pred_4;
                _2390 = frontier_phi_68_pred_5;
                uint _2548 = _2547 + 1u;
                if (_2548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2541 = _2390;
                    _2542 = _2392;
                    _2543 = _2394;
                    _2544 = _2396;
                    _2545 = _2398;
                    _2546 = _2400;
                    _2547 = _2548;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
        }
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.z;
        uint _2406 = (_2404 >> 8u) & 15u;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((4294967295u << _2406) & _2289) == 0u)
        {
            _2509 = _2389;
            _2511 = _2391;
            _2513 = _2393;
            _2515 = _2395;
            _2517 = _2397;
            _2519 = _2399;
        }
        else
        {
            float _2534 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
            float _2535 = _2534 * _2243;
            float _2536 = _2534 * _2244;
            float _2537 = _2534 * _2245;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2406 < ((_2404 >> 12u) & 15u))
            {
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2669 = _2389;
                float _2670 = _2391;
                float _2671 = _2393;
                float _2672 = _2395;
                float _2673 = _2397;
                float _2674 = _2399;
                uint _2675 = _2406;
                uint _2684;
                bool _2685;
                for (;;)
                {
                    _2684 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                    _2685 = _2684 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2685)
                    {
                        frontier_phi_79_pred = _2674;
                        frontier_phi_79_pred_1 = _2673;
                        frontier_phi_79_pred_2 = _2672;
                        frontier_phi_79_pred_3 = _2671;
                        frontier_phi_79_pred_4 = _2670;
                        frontier_phi_79_pred_5 = _2669;
                    }
                    else
                    {
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        uint _2897 = _2684;
                        uint _2898;
                        vec4 _2923;
                        float _2924;
                        vec4 _2939;
                        vec3 _2951;
                        vec4 _2967;
                        vec4 _2983;
                        float _3030;
                        bool _3031;
                        for (;;)
                        {
                            uint _2908 = ((_2675 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2897));
                            _2898 = (_2897 + 4294967295u) & _2897;
                            uint _2910 = _2908 * 40u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            _2924 = _2923.w;
                            uint _2926 = (_2908 * 40u) + 4u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2941 = (_2908 * 40u) + 8u;
                            _2951 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x));
                            uint _2954 = (_2908 * 40u) + 16u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2970 = (_2908 * 40u) + 20u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2908 * 40u) + 24u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3005 = (_2908 * 40u) + 28u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            _3030 = fma(_2245, _3018.z, fma(_2244, _3018.y, _3018.x * _2243)) + _3018.w;
                            _3031 = !((fma(_2245, _2999.z, fma(_2244, _2999.y, _2999.x * _2243)) + _2999.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3031)
                            {
                                float _3058 = _2923.x - _2243;
                                float _3059 = _2923.y - _2244;
                                float _3060 = _2923.z - _2245;
                                float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                                float _3064 = inversesqrt(_3061);
                                float _3065 = _3064 * _3058;
                                float _3066 = _3064 * _3059;
                                float _3067 = _3064 * _3060;
                                float _3071 = 1.0 - (_3061 / (_2924 * _2924));
                                float _4156 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3076 = sqrt(_3061) * _2939.w;
                                float _3078 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                                float _3079 = _3078 * _3078;
                                float _3082 = ((1.0 - _3079) * dot(vec3(_3065, _3066, _3067), vec3(_510, _513, _516))) + _3079;
                                float _3085 = _3076 * _3076;
                                float _3089 = (fma(_2245, _2967.z, fma(_2244, _2967.y, _2967.x * _2243)) + _2967.w) / _3030;
                                float _3090 = (fma(_2245, _2983.z, fma(_2244, _2983.y, _2983.x * _2243)) + _2983.w) / _3030;
                                float _3094 = 1.0 - dot(vec2(_3089, _3090), vec2(_3089, _3090));
                                float _4172 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3096 = _3095 * (((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3072) / ((_3085 * 0.699999988079071044921875) + 1.0));
                                float _3108 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                                float _3109 = 1.0 - _570;
                                float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                                float _3117 = _3116 * _3116;
                                float _3118 = _3117 * _3117;
                                float _3119 = _3065 - _2535;
                                float _3120 = _3066 - _2536;
                                float _3121 = _3067 - _2537;
                                float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                                float _3129 = dot(vec3(_510, _513, _516), vec3((-0.0) - _2535, (-0.0) - _2536, (-0.0) - _2537));
                                float _4183 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3132 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3133 = dot(vec3(_510, _513, _516), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                                float _4194 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                                float _3141 = _3078 * _3117;
                                float _3142 = _3141 * _3141;
                                float _3148 = ((1.0 - _3142) * dot(vec3(_510, _513, _516), vec3(_3065, _3066, _3067))) + _3142;
                                float _4205 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3150 = 1.0 - _3117;
                                float _3160 = (0.5 / (((_3149 * ((_3132 * _3150) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3117) * _3132))) * _3149;
                                float _4216 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3170 = (_3095 * _3072) * (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_3140 * _3140) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3096 * _2939.z;
                                frontier_phi_85_pred_1 = _3096 * _2939.y;
                                frontier_phi_85_pred_2 = _3096 * _2939.x;
                                frontier_phi_85_pred_3 = _3170 * _2951.z;
                                frontier_phi_85_pred_4 = _3170 * _2951.y;
                                frontier_phi_85_pred_5 = _3170 * _2951.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3179 = frontier_phi_85_pred;
                            _3178 = frontier_phi_85_pred_1;
                            _3177 = frontier_phi_85_pred_2;
                            _3176 = frontier_phi_85_pred_3;
                            _3175 = frontier_phi_85_pred_4;
                            _3174 = frontier_phi_85_pred_5;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            if (_2898 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2898;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2883;
                        frontier_phi_79_pred_1 = _2882;
                        frontier_phi_79_pred_2 = _2881;
                        frontier_phi_79_pred_3 = _2880;
                        frontier_phi_79_pred_4 = _2879;
                        frontier_phi_79_pred_5 = _2878;
                    }
                    _2520 = frontier_phi_79_pred;
                    _2518 = frontier_phi_79_pred_1;
                    _2516 = frontier_phi_79_pred_2;
                    _2514 = frontier_phi_79_pred_3;
                    _2512 = frontier_phi_79_pred_4;
                    _2510 = frontier_phi_79_pred_5;
                    uint _2676 = _2675 + 1u;
                    if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2669 = _2510;
                        _2670 = _2512;
                        _2671 = _2514;
                        _2672 = _2516;
                        _2673 = _2518;
                        _2674 = _2520;
                        _2675 = _2676;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2516;
                frontier_phi_60_61_ladder_1 = _2520;
                frontier_phi_60_61_ladder_2 = _2518;
                frontier_phi_60_61_ladder_3 = _2514;
                frontier_phi_60_61_ladder_4 = _2512;
                frontier_phi_60_61_ladder_5 = _2510;
            }
            else
            {
                frontier_phi_60_61_ladder = _2395;
                frontier_phi_60_61_ladder_1 = _2399;
                frontier_phi_60_61_ladder_2 = _2397;
                frontier_phi_60_61_ladder_3 = _2393;
                frontier_phi_60_61_ladder_4 = _2391;
                frontier_phi_60_61_ladder_5 = _2389;
            }
            _2509 = frontier_phi_60_61_ladder_5;
            _2511 = frontier_phi_60_61_ladder_4;
            _2513 = frontier_phi_60_61_ladder_3;
            _2515 = frontier_phi_60_61_ladder;
            _2517 = frontier_phi_60_61_ladder_2;
            _2519 = frontier_phi_60_61_ladder_1;
        }
        float _2524 = isnan(1.0) ? _554 : (isnan(_554) ? 1.0 : min(_554, 1.0));
        _2301 = (_2524 * _2515) + _1757;
        _2303 = (_2524 * _2517) + _1759;
        _2305 = (_2524 * _2519) + _1761;
        _2307 = ((_2509 * 0.039999999105930328369140625) * _2524) + _2087;
        _2309 = ((_2511 * 0.039999999105930328369140625) * _2524) + _2089;
        _2311 = ((_2513 * 0.039999999105930328369140625) * _2524) + _2091;
    }
    else
    {
        _2301 = _1757;
        _2303 = _1759;
        _2305 = _1761;
        _2307 = _2087;
        _2309 = _2089;
        _2311 = _2091;
    }
    float _4232 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4243 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4254 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2328 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2301 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _554))) + ((_2307 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2329 = ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2303 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _554))) + ((_2309 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2330 = ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2305 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _554))) + ((_2311 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    uint _2331 = _529 + 6u;
    float _2339 = _489 / cbSceneParam._m0[86u].x;
    float _2340 = _490 / cbSceneParam._m0[86u].y;
    vec4 _2354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2356 = _2354.x;
    float _2357 = _2354.y;
    float _2358 = _2354.z;
    float _2359 = _2354.w;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2414 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2415 = _2414 / _410;
        float _2426 = _2415 * _461;
        float _2427 = _462 * _2415;
        float _2428 = (-0.0) - _2427;
        float _2429 = _2415 * _463;
        float _2431 = (cbSceneParam._m0[77u].w * _2428) / _2414;
        float _2432 = _2431 + cbSceneParam._m0[79u].w;
        float _2433 = cbSceneParam._m0[79u].w - _2427;
        float _2439 = sqrt(((_2426 * _2426) + (_2427 * _2427)) + (_2429 * _2429));
        float _2442 = (1.0 - (cbSceneParam._m0[77u].w / _2414)) * _2439;
        float _2447 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2449 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2626;
        if (abs((_2428 - _2431) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2626 = ((((_2432 > 0.0) ? exp2(_2447 * _2432) : (2.0 - exp2(_2449 * _2432))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2442;
        }
        else
        {
            float _2570 = 1.0 / cbSceneParam._m0[80u].x;
            float _2571 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : max(_2432, _2433));
            float _2572 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : min(_2432, _2433));
            float _2581 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : min(_2571, 0.0));
            float _2582 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : min(_2572, 0.0));
            _2626 = ((abs(_2439 / _2428) * cbSceneParam._m0[80u].y) * ((((_2581 - _2582) * 2.0) - ((exp2(_2447 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0)))) - exp2(_2447 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0))))) * _2570)) - ((exp2(_2449 * _2581) - exp2(_2449 * _2582)) * _2570))) + (_2442 * cbSceneParam._m0[80u].z);
        }
        vec4 _2628 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, 1.0), 0.0);
        float _2637 = exp2((_2626 * (-1.44269502162933349609375)) * (1.0 - _2628.w));
        float _2638 = log2(_2637);
        float _2654 = log2(_2359);
        _2451 = (exp2(_2654 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].x)) * _2628.x) / cbSceneParam._m0[78u].x)) + _2356;
        _2453 = (exp2(_2654 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].y)) * _2628.y) / cbSceneParam._m0[78u].y)) + _2357;
        _2455 = (exp2(_2654 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].z)) * _2628.z) / cbSceneParam._m0[78u].z)) + _2358;
        _2457 = _2637 * _2359;
    }
    else
    {
        _2451 = _2356;
        _2453 = _2357;
        _2455 = _2358;
        _2457 = _2359;
    }
    bool _2664;
    vec4 _2467;
    vec4 _2489;
    float _2491;
    float _2495;
    float _2496;
    float _2497;
    float _2498;
    bool _2508;
    for (;;)
    {
        _2467 = cbMatDynParam._m0[0u];
        float _2469 = roundEven(_2467.y);
        bool _2470 = _2469 == 3.0;
        float _2471 = log2(_2457);
        float _2478 = exp2(_2471 * cbSceneParam._m0[78u].x) * _2328;
        float _2479 = exp2(_2471 * cbSceneParam._m0[78u].y) * _2329;
        float _2480 = exp2(_2471 * cbSceneParam._m0[78u].z) * _2330;
        float _2487 = _477 + (-0.5);
        _2489 = cbMtdParam._m0[1u];
        _2491 = _2489.y * _2487;
        float _2494 = (_2469 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2495 = _2494 * (_2470 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2451)));
        _2496 = _2494 * (_2470 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2453)));
        _2497 = _2494 * (_2470 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2455)));
        _2498 = _2487 * 0.999000012874603271484375;
        _2508 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2508)
        {
            if ((cbInstanceData._m0[_529 + 7u].x + _2498) < 0.5)
            {
                _2664 = true;
                break;
            }
        }
        uint _2605 = _530 + uint(_2467.w);
        if ((cbInstanceData._m0[_2605].w < 1.0) && ((cbInstanceData._m0[_2605].w + _2498) < 0.5))
        {
            _2664 = true;
            break;
        }
        if ((_2491 + 1.0) < _2489.x)
        {
            _2664 = true;
            break;
        }
        _2664 = false;
        break;
    }
    float _2869;
    if (_2664)
    {
        discard_state = true;
        _2869 = 0.0;
    }
    else
    {
        _2869 = cbInstanceData._m0[_2331].w;
    }
    SV_Target.x = _2495;
    SV_Target.y = _2496;
    SV_Target.z = _2497;
    SV_Target.w = _2869;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2331].w;
    discard_exit();
}


