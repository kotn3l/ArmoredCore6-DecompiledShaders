#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _846;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _233 = _228.z;
    float _237 = (_228.x * 2.0) + (-1.0);
    float _239 = (_228.y * 2.0) + (-1.0);
    float _240 = dot(vec2(_237, _239), vec2(_237, _239));
    float _3207 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _246 = sqrt(1.0 - (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))));
    vec4 _264 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _264.x * cbMtdParam._m0[9u].x;
    float _270 = _264.y * cbMtdParam._m0[9u].y;
    float _271 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _284 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _286 = _284.x;
    float _289 = fma(_246, _212, fma(_239, _204 * TANGENT.x, (_190 * _182) * _237));
    float _292 = fma(_246, _213, fma(_239, _204 * TANGENT.y, (_190 * _183) * _237));
    float _295 = fma(_246, _214, fma(_239, _204 * TANGENT.z, (_190 * _184) * _237));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3218 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _303 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
    float _3229 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3240 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3251 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3262 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _307 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _412 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _415 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _418 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = (_431 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3273 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _445 = 1.0 - _307;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _307;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _307;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _307;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _471 = _468.x * TEXCOORD_9.w;
    float _472 = dot(vec3(_300, _301, _302), vec3(_383, _384, _385));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _300) - _383;
    float _480 = (_475 * _301) - _384;
    float _481 = (_475 * _302) - _385;
    float _485 = abs(dot(vec3(_383, _384, _385), vec3(_300, _301, _302)));
    float _3306 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_303);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _574 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _578 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _603 = _535 + _300;
        float _604 = _539 + _301;
        float _605 = _543 + _302;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_300, _301, _302), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3332 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3343 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3354 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_300, _301, _302), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3387 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_300, _301, _302), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3420 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _890 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _894 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _917 = _535 + _300;
        float _918 = _539 + _301;
        float _919 = _543 + _302;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_300, _301, _302), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3483 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_300, _301, _302), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3516 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_300, _301, _302), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3549 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _846;
        _1156 = _846;
        _1157 = _846;
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _849, _852, _855));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_847, _850, _853, _856));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_848, _851, _854, _857));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1355 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1358 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1386;
        if (_1352 > 0.0)
        {
            _1386 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1386 = frontier_phi_16_14_ladder;
        }
        float _1615;
        if (_1355 > 0.0)
        {
            _1615 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1615 = frontier_phi_25_21_ladder;
        }
        float _1872;
        if (_1358 > 0.0)
        {
            _1872 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1872 = frontier_phi_37_32_ladder;
        }
        float _1874 = isnan(_1615) ? _1386 : (isnan(_1386) ? _1615 : min(_1386, _1615));
        float _1875 = isnan(_1872) ? _1874 : (isnan(_1874) ? _1872 : min(_1874, _1872));
        float _1879 = (_1875 * _1352) + _1341;
        float _1880 = (_1875 * _1355) + _1345;
        float _1881 = (_1875 * _1358) + _1349;
        float _1882 = _1875 * 9.9999997473787516355514526367188e-05;
        float _1884 = (-1.0) - _1882;
        float _1886 = _1882 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1881 > _1886) || ((_1881 < _1884) || ((_1880 > _1886) || ((_1880 < _1884) || ((_1879 < _1884) || (_1879 > _1886))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1881, cbModelParam._m0[9u].z, fma(_1880, cbModelParam._m0[9u].y, _1879 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1881, cbModelParam._m0[10u].z, fma(_1880, cbModelParam._m0[10u].y, _1879 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1881, cbModelParam._m0[11u].z, fma(_1880, cbModelParam._m0[11u].y, _1879 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_15_37_ladder = _2009.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2009.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2009.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_15_37_ladder_2;
        _1376 = frontier_phi_15_37_ladder_1;
        _1378 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1292);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1382 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1382 : min(cbModelParam._m0[25u].w, _1382));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1454 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1457 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1620;
        if (_1451 > 0.0)
        {
            _1620 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1620 = frontier_phi_27_23_ladder;
        }
        float _1899;
        if (_1454 > 0.0)
        {
            _1899 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1899 = frontier_phi_39_34_ladder;
        }
        float _2112;
        if (_1457 > 0.0)
        {
            _2112 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2112 = frontier_phi_48_45_ladder;
        }
        float _2114 = isnan(_1899) ? _1620 : (isnan(_1620) ? _1899 : min(_1620, _1899));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1451) + _1440;
        float _2120 = (_2115 * _1454) + _1444;
        float _2121 = (_2115 * _1457) + _1448;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2122;
        float _2125 = _2122 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2121 > _2125) || ((_2121 < _2123) || ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 < _2123) || (_2119 > _2125))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2121, cbModelParam._m0[17u].z, fma(_2120, cbModelParam._m0[17u].y, _2119 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2121, cbModelParam._m0[18u].z, fma(_2120, cbModelParam._m0[18u].y, _2119 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2121, cbModelParam._m0[19u].z, fma(_2120, cbModelParam._m0[19u].y, _2119 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_24_48_ladder = _2319.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2319.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2319.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_24_48_ladder_2;
        _1478 = frontier_phi_24_48_ladder_1;
        _1480 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1383);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1493 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1495 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1500 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, _1493 * cbSceneParam._m0[91u].x));
    vec4 _1514 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_391, _392));
    float _1516 = _1514.w;
    float _1528 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1516);
    float _1529 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1516);
    float _1530 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1516);
    uvec4 _1534 = floatBitsToUint(cbInstanceData._m0[_431 + 5u]);
    uint _1536 = _1534.x * 14u;
    uint _1537 = _1536 + 13u;
    float _1544 = _471 + (-1.0);
    float _1549 = (cbLight._m0[_1537].x * _1544) + 1.0;
    float _1550 = (cbLight._m0[_1537].y * _1544) + 1.0;
    float _1551 = (cbLight._m0[_1537].z * _1544) + 1.0;
    float _1552 = (cbLight._m0[_1537].w * _1544) + 1.0;
    uint _1553 = _1536 + 5u;
    float _1559 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1563 = _1536 + 4u;
    float _1573 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1577 = _1536 | 1u;
    float _1588 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_300, _301, _302));
    float _1591 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_300, _301, _302));
    float _3685 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _3696 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1596 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.3183098733425140380859375;
    float _1598 = (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.3183098733425140380859375;
    float _1605 = ((cbLight._m0[_1553].x * _1559) * _1598) + (((cbLight._m0[_1563].x * _1528) * _1573) * _1596);
    float _1606 = ((_1559 * cbLight._m0[_1553].y) * _1598) + (((cbLight._m0[_1563].y * _1529) * _1573) * _1596);
    float _1607 = ((_1559 * cbLight._m0[_1553].z) * _1598) + (((cbLight._m0[_1563].z * _1530) * _1573) * _1596);
    uvec4 _1612 = floatBitsToUint(cbLight._m0[_1536 + 12u]);
    bool _1614 = _1612.x == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1614)
    {
        _1625 = _1605;
        _1627 = _1606;
        _1629 = _1607;
    }
    else
    {
        uint _1633 = _1536 + 6u;
        float _1649 = (dot(vec3(cbLight._m0[_1536 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1650 = _1649 * _1649;
        float _3707 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1652 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1625 = (((cbLight._m0[_1633].x * 0.3183098733425140380859375) * _1651) * _1652) + _1605;
        _1627 = (((cbLight._m0[_1633].y * 0.3183098733425140380859375) * _1651) * _1652) + _1606;
        _1629 = (((cbLight._m0[_1633].z * 0.3183098733425140380859375) * _1651) * _1652) + _1607;
    }
    bool _1632 = _1612.y == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1632)
    {
        _1670 = _1625;
        _1672 = _1627;
        _1674 = _1629;
    }
    else
    {
        uint _1843 = _1536 + 7u;
        float _1859 = (dot(vec3(cbLight._m0[_1536 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1860 = _1859 * _1859;
        float _3723 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1862 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1670 = (((cbLight._m0[_1843].x * 0.3183098733425140380859375) * _1861) * _1862) + _1625;
        _1672 = (((cbLight._m0[_1843].y * 0.3183098733425140380859375) * _1861) * _1862) + _1627;
        _1674 = (((cbLight._m0[_1843].z * 0.3183098733425140380859375) * _1861) * _1862) + _1629;
    }
    uint _1677 = _1536 + 8u;
    float _1690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1536].w)) * _303) * 0.949999988079071044921875);
    float _1691 = _1690 * _1690;
    float _1692 = cbLight._m0[_1536].x + _383;
    float _1693 = cbLight._m0[_1536].y + _384;
    float _1694 = cbLight._m0[_1536].z + _385;
    float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
    float _1699 = _1698 * _1692;
    float _1700 = _1698 * _1693;
    float _1701 = _1698 * _1694;
    float _1702 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1536].xyz));
    float _3739 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1706 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _1707 = dot(vec3(_300, _301, _302), vec3(_1699, _1700, _1701));
    float _3761 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1710 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _1711 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_1699, _1700, _1701));
    float _3772 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1715 = _1691 * _1691;
    float _1719 = ((_1710 * _1710) * (_1715 + (-1.0))) + 1.0;
    float _1727 = exp2(log2(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * 5.0);
    float _1728 = 0.959999978542327880859375 - _453;
    float _1730 = 0.959999978542327880859375 - _454;
    float _1731 = 0.959999978542327880859375 - _455;
    float _1738 = 1.0 - _1691;
    float _1749 = (0.5 / (((_1706 * ((_1705 * _1738) + _1691)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1738) + _1691) * _1705))) * _1705;
    float _3783 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1751 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1715 / ((_1719 * _1719) * 3.141590118408203125));
    uint _1765 = _1536 + 9u;
    float _1776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _303) * 0.949999988079071044921875);
    float _1777 = _1776 * _1776;
    float _1778 = cbLight._m0[_1577].x + _383;
    float _1779 = cbLight._m0[_1577].y + _384;
    float _1780 = cbLight._m0[_1577].z + _385;
    float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
    float _1785 = _1784 * _1778;
    float _1786 = _1784 * _1779;
    float _1787 = _1784 * _1780;
    float _1788 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1577].xyz));
    float _3794 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1792 = dot(vec3(_300, _301, _302), vec3(_1785, _1786, _1787));
    float _3805 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1785, _1786, _1787));
    float _3816 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1777 * _1777;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1811 = exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0);
    float _1818 = 1.0 - _1777;
    float _1828 = (0.5 / (((_1706 * ((_1791 * _1818) + _1777)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1818) + _1777) * _1791))) * _1791;
    float _3827 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    float _1840 = (((((_1811 * _1728) + _456) * cbLight._m0[_1765].x) * _1830) * _1559) + ((((cbLight._m0[_1677].x * _1528) * ((_1727 * _1728) + _456)) * _1751) * _1573);
    float _1841 = (((((_1811 * _1730) + _458) * cbLight._m0[_1765].y) * _1830) * _1559) + ((((cbLight._m0[_1677].y * _1529) * ((_1727 * _1730) + _458)) * _1751) * _1573);
    float _1842 = (((((_1811 * _1731) + _459) * cbLight._m0[_1765].z) * _1830) * _1559) + ((((cbLight._m0[_1677].z * _1530) * ((_1727 * _1731) + _459)) * _1751) * _1573);
    float _1904;
    float _1906;
    float _1908;
    if (_1614)
    {
        _1904 = _1840;
        _1906 = _1841;
        _1908 = _1842;
    }
    else
    {
        uint _1910 = _1536 + 2u;
        uint _1914 = _1536 + 10u;
        float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _303) * 0.949999988079071044921875);
        float _1929 = _1928 * _1928;
        float _1930 = cbLight._m0[_1910].x + _383;
        float _1931 = cbLight._m0[_1910].y + _384;
        float _1932 = cbLight._m0[_1910].z + _385;
        float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
        float _1937 = _1936 * _1930;
        float _1938 = _1936 * _1931;
        float _1939 = _1936 * _1932;
        float _1940 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1910].xyz));
        float _3838 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1943 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1944 = dot(vec3(_300, _301, _302), vec3(_1937, _1938, _1939));
        float _3849 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1948 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_1937, _1938, _1939));
        float _3860 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1952 = _1929 * _1929;
        float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
        float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0);
        float _1970 = 1.0 - _1929;
        float _1980 = (0.5 / (((_1706 * ((_1943 * _1970) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1970) + _1929) * _1943))) * _1943;
        float _3871 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1982 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
        float _1983 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1904 = (((((_1963 * _1728) + _456) * cbLight._m0[_1914].x) * _1982) * _1983) + _1840;
        _1906 = (((((_1963 * _1730) + _458) * cbLight._m0[_1914].y) * _1982) * _1983) + _1841;
        _1908 = (((((_1963 * _1731) + _459) * cbLight._m0[_1914].z) * _1982) * _1983) + _1842;
    }
    float _2018;
    float _2020;
    float _2022;
    if (_1632)
    {
        _2018 = _1904;
        _2020 = _1906;
        _2022 = _1908;
    }
    else
    {
        uint _2029 = _1536 + 3u;
        uint _2033 = _1536 + 11u;
        float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _303) * 0.949999988079071044921875);
        float _2048 = _2047 * _2047;
        float _2049 = cbLight._m0[_2029].x + _383;
        float _2050 = cbLight._m0[_2029].y + _384;
        float _2051 = cbLight._m0[_2029].z + _385;
        float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
        float _2056 = _2055 * _2049;
        float _2057 = _2055 * _2050;
        float _2058 = _2055 * _2051;
        float _2059 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2029].xyz));
        float _3887 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _2063 = dot(vec3(_300, _301, _302), vec3(_2056, _2057, _2058));
        float _3898 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _2067 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2056, _2057, _2058));
        float _3909 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2071 = _2048 * _2048;
        float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
        float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0);
        float _2089 = 1.0 - _2048;
        float _2099 = (0.5 / (((_1706 * ((_2062 * _2089) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _2089) + _2048) * _2062))) * _2062;
        float _3920 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2101 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
        float _2102 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _2018 = (((((_2082 * _1728) + _456) * cbLight._m0[_2033].x) * _2101) * _2102) + _1904;
        _2020 = (((((_2082 * _1730) + _458) * cbLight._m0[_2033].y) * _2101) * _2102) + _1906;
        _2022 = (((((_2082 * _1731) + _459) * cbLight._m0[_2033].z) * _2101) * _2102) + _1908;
    }
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    if (_1534.y == 0u)
    {
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2177;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2177;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2177;
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.x;
        uint _2204 = uint((float(_2192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2193))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2193)));
        float _2214 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2215 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        uint _2218 = uint(isnan(14.0) ? _2215 : (isnan(_2215) ? 14.0 : min(_2215, 14.0)));
        uvec4 _2223 = texelFetch(g_lightClusterGridBuffer, int(((_2218 << 2u) + (_2204 << 6u)) >> 2u));
        uint _2224 = _2223.x;
        uint _2225 = _2192.z;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        if (((((1u << ((_2225 >> 4u) & 15u)) + 4294967295u) & _2224) == 0u) || ((_2225 & 240u) == 0u))
        {
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
        }
        else
        {
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            uint _2474 = 0u;
            uint _2483;
            bool _2484;
            for (;;)
            {
                _2483 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2474 << 2u)) >> 2u)).x;
                _2484 = _2483 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2484)
                {
                    frontier_phi_63_pred = _2473;
                    frontier_phi_63_pred_1 = _2472;
                    frontier_phi_63_pred_2 = _2471;
                    frontier_phi_63_pred_3 = _2470;
                    frontier_phi_63_pred_4 = _2469;
                    frontier_phi_63_pred_5 = _2468;
                }
                else
                {
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    uint _2598;
                    _2592 = _2468;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2483;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    for (;;)
                    {
                        uint _2602 = uint(findLSB(_2598)) + (_2474 << 5u);
                        uint _2599 = (_2598 + 4294967295u) & _2598;
                        uint _2604 = _2602 * 48u;
                        vec4 _2618 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 3u)).x));
                        uint _2624 = (_2602 * 48u) + 4u;
                        vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2643 = (_2602 * 48u) + 8u;
                        vec3 _2654 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2643)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 2u)).x));
                        float _2658 = _2618.x - _2178;
                        float _2659 = _2618.y - _2179;
                        float _2660 = _2618.z - _2180;
                        float _2661 = dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660));
                        float _2664 = inversesqrt(_2661);
                        float _2665 = _2664 * _2658;
                        float _2666 = _2664 * _2659;
                        float _2667 = _2664 * _2660;
                        float _2668 = dot(vec3(_412, _415, _418), vec3(_2665, _2666, _2667));
                        float _2673 = 1.0 - (_2661 * _2618.w);
                        float _3946 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2674 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                        float _2675 = sqrt(_2661) * _2637.w;
                        float _2678 = 1.39999997615814208984375 / (_2675 + 1.39999997615814208984375);
                        float _2679 = _2678 * _2678;
                        float _2682 = ((1.0 - _2679) * _2668) + _2679;
                        float _2685 = _2675 * _2675;
                        float _2689 = ((isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))) * _2674) / ((_2685 * 0.699999988079071044921875) + 1.0);
                        float _2693 = (-0.0) - _2178;
                        float _2694 = (-0.0) - _2179;
                        float _2695 = (-0.0) - _2180;
                        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2710 = exp2(log2(1.0 / ((_2685 * 3.5) + 5.0)) * 0.25);
                        float _2711 = 1.0 - _487;
                        float _2718 = sqrt(1.0 - ((1.0 - (_2711 * _2711)) * (1.0 - (_2710 * _2710))));
                        float _2719 = _2718 * _2718;
                        float _2720 = _2719 * _2719;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
                        float _2731 = dot(vec3(_412, _415, _418), vec3(_2700, _2701, _2702));
                        float _3962 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2735 = dot(vec3(_412, _415, _418), vec3(_2727 * _2721, _2727 * _2722, _2727 * _2723));
                        float _3973 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2742 = ((_2738 * _2738) * (_2720 + (-1.0))) + 1.0;
                        float _2743 = _2678 * _2719;
                        float _2744 = _2743 * _2743;
                        float _2747 = ((1.0 - _2744) * _2668) + _2744;
                        float _3984 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2748 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                        float _2749 = 1.0 - _2719;
                        float _2759 = (0.5 / (((_2748 * ((_2734 * _2749) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _2749) + _2719) * _2734))) * _2748;
                        float _3995 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2770 = (((_2720 * 3.1415927410125732421875) * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) / ((_2742 * _2742) * ((_2685 * 2.1991131305694580078125) + 3.141590118408203125))) * _2674;
                        _2527 = (_2689 * _2637.x) + _2595;
                        _2528 = (_2689 * _2637.y) + _2596;
                        _2529 = (_2689 * _2637.z) + _2597;
                        _2524 = (_2770 * _2654.x) + _2592;
                        _2525 = (_2770 * _2654.y) + _2593;
                        _2526 = (_2770 * _2654.z) + _2594;
                        if (_2599 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2592 = _2524;
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2599;
                        }
                    }
                    frontier_phi_63_pred = _2529;
                    frontier_phi_63_pred_1 = _2528;
                    frontier_phi_63_pred_2 = _2527;
                    frontier_phi_63_pred_3 = _2526;
                    frontier_phi_63_pred_4 = _2525;
                    frontier_phi_63_pred_5 = _2524;
                }
                _2335 = frontier_phi_63_pred;
                _2333 = frontier_phi_63_pred_1;
                _2331 = frontier_phi_63_pred_2;
                _2329 = frontier_phi_63_pred_3;
                _2327 = frontier_phi_63_pred_4;
                _2325 = frontier_phi_63_pred_5;
                uint _2475 = _2474 + 1u;
                if (_2475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2468 = _2325;
                    _2469 = _2327;
                    _2470 = _2329;
                    _2471 = _2331;
                    _2472 = _2333;
                    _2473 = _2335;
                    _2474 = _2475;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
        }
        uvec4 _2338 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2339 = _2338.z;
        uint _2341 = (_2339 >> 8u) & 15u;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        if (((4294967295u << _2341) & _2224) == 0u)
        {
            _2436 = _2324;
            _2438 = _2326;
            _2440 = _2328;
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
        }
        else
        {
            float _2461 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _2462 = _2461 * _2178;
            float _2463 = _2461 * _2179;
            float _2464 = _2461 * _2180;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2341 < ((_2339 >> 12u) & 15u))
            {
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2575 = _2324;
                float _2576 = _2326;
                float _2577 = _2328;
                float _2578 = _2330;
                float _2579 = _2332;
                float _2580 = _2334;
                uint _2581 = _2341;
                uint _2590;
                bool _2591;
                for (;;)
                {
                    _2590 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                    _2591 = _2590 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2591)
                    {
                        frontier_phi_69_pred = _2580;
                        frontier_phi_69_pred_1 = _2579;
                        frontier_phi_69_pred_2 = _2578;
                        frontier_phi_69_pred_3 = _2577;
                        frontier_phi_69_pred_4 = _2576;
                        frontier_phi_69_pred_5 = _2575;
                    }
                    else
                    {
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _2788 = _2575;
                        float _2789 = _2576;
                        float _2790 = _2577;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        uint _2794 = _2590;
                        uint _2795;
                        vec4 _2820;
                        float _2821;
                        vec4 _2836;
                        vec3 _2848;
                        vec4 _2864;
                        vec4 _2880;
                        float _2927;
                        bool _2928;
                        for (;;)
                        {
                            uint _2805 = ((_2581 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2794));
                            _2795 = (_2794 + 4294967295u) & _2794;
                            uint _2807 = _2805 * 40u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            _2821 = _2820.w;
                            uint _2823 = (_2805 * 40u) + 4u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2838 = (_2805 * 40u) + 8u;
                            _2848 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x));
                            uint _2851 = (_2805 * 40u) + 16u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2867 = (_2805 * 40u) + 20u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2883 = (_2805 * 40u) + 24u;
                            vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2902 = (_2805 * 40u) + 28u;
                            vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            _2927 = fma(_2180, _2915.z, fma(_2179, _2915.y, _2915.x * _2178)) + _2915.w;
                            _2928 = !((fma(_2180, _2896.z, fma(_2179, _2896.y, _2896.x * _2178)) + _2896.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2928)
                            {
                                float _2955 = _2820.x - _2178;
                                float _2956 = _2820.y - _2179;
                                float _2957 = _2820.z - _2180;
                                float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                                float _2961 = inversesqrt(_2958);
                                float _2962 = _2961 * _2955;
                                float _2963 = _2961 * _2956;
                                float _2964 = _2961 * _2957;
                                float _2968 = 1.0 - (_2958 / (_2821 * _2821));
                                float _4006 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2969 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                                float _2973 = sqrt(_2958) * _2836.w;
                                float _2975 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                                float _2976 = _2975 * _2975;
                                float _2979 = ((1.0 - _2976) * dot(vec3(_2962, _2963, _2964), vec3(_412, _415, _418))) + _2976;
                                float _2982 = _2973 * _2973;
                                float _2986 = (fma(_2180, _2864.z, fma(_2179, _2864.y, _2864.x * _2178)) + _2864.w) / _2927;
                                float _2987 = (fma(_2180, _2880.z, fma(_2179, _2880.y, _2880.x * _2178)) + _2880.w) / _2927;
                                float _2991 = 1.0 - dot(vec2(_2986, _2987), vec2(_2986, _2987));
                                float _4022 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2992 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _2993 = _2992 * (((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2969) / ((_2982 * 0.699999988079071044921875) + 1.0));
                                float _3005 = exp2(log2(1.0 / ((_2982 * 3.5) + 5.0)) * 0.25);
                                float _3006 = 1.0 - _487;
                                float _3013 = sqrt(1.0 - ((1.0 - (_3006 * _3006)) * (1.0 - (_3005 * _3005))));
                                float _3014 = _3013 * _3013;
                                float _3015 = _3014 * _3014;
                                float _3016 = _2962 - _2462;
                                float _3017 = _2963 - _2463;
                                float _3018 = _2964 - _2464;
                                float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
                                float _3026 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2462, (-0.0) - _2463, (-0.0) - _2464));
                                float _4033 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3029 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3030 = dot(vec3(_412, _415, _418), vec3(_3022 * _3016, _3022 * _3017, _3022 * _3018));
                                float _4044 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _3037 = ((_3033 * _3033) * (_3015 + (-1.0))) + 1.0;
                                float _3038 = _2975 * _3014;
                                float _3039 = _3038 * _3038;
                                float _3045 = ((1.0 - _3039) * dot(vec3(_412, _415, _418), vec3(_2962, _2963, _2964))) + _3039;
                                float _4055 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                                float _3047 = 1.0 - _3014;
                                float _3057 = (0.5 / (((_3046 * ((_3029 * _3047) + _3014)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3014) * _3029))) * _3046;
                                float _4066 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3067 = (_2992 * _2969) * (((_3015 * 3.1415927410125732421875) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) / ((_3037 * _3037) * ((_2982 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2993 * _2836.z;
                                frontier_phi_75_pred_1 = _2993 * _2836.y;
                                frontier_phi_75_pred_2 = _2993 * _2836.x;
                                frontier_phi_75_pred_3 = _3067 * _2848.z;
                                frontier_phi_75_pred_4 = _3067 * _2848.y;
                                frontier_phi_75_pred_5 = _3067 * _2848.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3076 = frontier_phi_75_pred;
                            _3075 = frontier_phi_75_pred_1;
                            _3074 = frontier_phi_75_pred_2;
                            _3073 = frontier_phi_75_pred_3;
                            _3072 = frontier_phi_75_pred_4;
                            _3071 = frontier_phi_75_pred_5;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            if (_2795 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2795;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2780;
                        frontier_phi_69_pred_1 = _2779;
                        frontier_phi_69_pred_2 = _2778;
                        frontier_phi_69_pred_3 = _2777;
                        frontier_phi_69_pred_4 = _2776;
                        frontier_phi_69_pred_5 = _2775;
                    }
                    _2447 = frontier_phi_69_pred;
                    _2445 = frontier_phi_69_pred_1;
                    _2443 = frontier_phi_69_pred_2;
                    _2441 = frontier_phi_69_pred_3;
                    _2439 = frontier_phi_69_pred_4;
                    _2437 = frontier_phi_69_pred_5;
                    uint _2582 = _2581 + 1u;
                    if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2575 = _2437;
                        _2576 = _2439;
                        _2577 = _2441;
                        _2578 = _2443;
                        _2579 = _2445;
                        _2580 = _2447;
                        _2581 = _2582;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2447;
                frontier_phi_57_58_ladder_1 = _2445;
                frontier_phi_57_58_ladder_2 = _2443;
                frontier_phi_57_58_ladder_3 = _2441;
                frontier_phi_57_58_ladder_4 = _2439;
                frontier_phi_57_58_ladder_5 = _2437;
            }
            else
            {
                frontier_phi_57_58_ladder = _2334;
                frontier_phi_57_58_ladder_1 = _2332;
                frontier_phi_57_58_ladder_2 = _2330;
                frontier_phi_57_58_ladder_3 = _2328;
                frontier_phi_57_58_ladder_4 = _2326;
                frontier_phi_57_58_ladder_5 = _2324;
            }
            _2436 = frontier_phi_57_58_ladder_5;
            _2438 = frontier_phi_57_58_ladder_4;
            _2440 = frontier_phi_57_58_ladder_3;
            _2442 = frontier_phi_57_58_ladder_2;
            _2444 = frontier_phi_57_58_ladder_1;
            _2446 = frontier_phi_57_58_ladder;
        }
        float _2451 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2236 = (_2451 * _2442) + _1670;
        _2238 = (_2451 * _2444) + _1672;
        _2240 = (_2451 * _2446) + _1674;
        _2242 = ((_2436 * _456) * _2451) + _2018;
        _2244 = ((_2438 * _458) * _2451) + _2020;
        _2246 = ((_2440 * _459) * _2451) + _2022;
    }
    else
    {
        _2236 = _1670;
        _2238 = _1672;
        _2240 = _1674;
        _2242 = _2018;
        _2244 = _2020;
        _2246 = _2022;
    }
    float _4082 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4093 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4104 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    uint _2266 = _431 + 6u;
    float _2274 = _391 / cbSceneParam._m0[86u].x;
    float _2275 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2289 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2274, _2275, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2291 = _2289.x;
    float _2292 = _2289.y;
    float _2293 = _2289.z;
    float _2294 = _2289.w;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2349 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2350 = _2349 / _323;
        float _2361 = _2350 * _376;
        float _2362 = _377 * _2350;
        float _2363 = (-0.0) - _2362;
        float _2364 = _2350 * _378;
        float _2366 = (cbSceneParam._m0[77u].w * _2363) / _2349;
        float _2367 = _2366 + cbSceneParam._m0[79u].w;
        float _2368 = cbSceneParam._m0[79u].w - _2362;
        float _2374 = sqrt(((_2361 * _2361) + (_2362 * _2362)) + (_2364 * _2364));
        float _2377 = (1.0 - (cbSceneParam._m0[77u].w / _2349)) * _2374;
        float _2382 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2384 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2537;
        if (abs((_2363 - _2366) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2537 = ((((_2367 > 0.0) ? exp2(_2382 * _2367) : (2.0 - exp2(_2384 * _2367))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2377;
        }
        else
        {
            float _2497 = 1.0 / cbSceneParam._m0[80u].x;
            float _2498 = isnan(_2368) ? _2367 : (isnan(_2367) ? _2368 : max(_2367, _2368));
            float _2499 = isnan(_2368) ? _2367 : (isnan(_2367) ? _2368 : min(_2367, _2368));
            float _2508 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : min(_2498, 0.0));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            _2537 = ((abs(_2374 / _2363) * cbSceneParam._m0[80u].y) * ((((_2508 - _2509) * 2.0) - ((exp2(_2382 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0)))) - exp2(_2382 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))))) * _2497)) - ((exp2(_2384 * _2508) - exp2(_2384 * _2509)) * _2497))) + (_2377 * cbSceneParam._m0[80u].z);
        }
        vec4 _2539 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2274, _2275, 1.0), 0.0);
        float _2548 = exp2((_2537 * (-1.44269502162933349609375)) * (1.0 - _2539.w));
        float _2549 = log2(_2548);
        float _2565 = log2(_2294);
        _2386 = (exp2(_2565 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2549 * cbSceneParam._m0[78u].x)) * _2539.x) / cbSceneParam._m0[78u].x)) + _2291;
        _2388 = (exp2(_2565 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2549 * cbSceneParam._m0[78u].y)) * _2539.y) / cbSceneParam._m0[78u].y)) + _2292;
        _2390 = (exp2(_2565 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2549 * cbSceneParam._m0[78u].z)) * _2539.z) / cbSceneParam._m0[78u].z)) + _2293;
        _2392 = _2548 * _2294;
    }
    else
    {
        _2386 = _2291;
        _2388 = _2292;
        _2390 = _2293;
        _2392 = _2294;
    }
    float _2404 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2405 = _2404 == 3.0;
    float _2406 = log2(_2392);
    float _2413 = exp2(_2406 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2236 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _471))) + ((_2242 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2414 = exp2(_2406 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2238 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _471))) + ((_2244 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2415 = exp2(_2406 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2240 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _471))) + ((_2246 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2424 = (_2404 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2424 * (_2405 ? _2413 : (_2413 + (cbSceneParam._m0[72u].w * _2386)));
    SV_Target.y = _2424 * (_2405 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2388)));
    SV_Target.z = _2424 * (_2405 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.w = cbInstanceData._m0[_2266].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2266].w;
}


