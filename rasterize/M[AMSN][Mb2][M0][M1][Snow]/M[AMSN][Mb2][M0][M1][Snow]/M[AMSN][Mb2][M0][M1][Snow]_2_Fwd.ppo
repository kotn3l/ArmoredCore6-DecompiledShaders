#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1024;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _244.x;
    float _248 = _244.y;
    float _249 = _244.z;
    vec4 _281 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _294 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3338 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _304 = ((_281.z - _249) * _295) + _249;
    float _308 = ((((_281.x - _247) * _295) + _247) * 2.0) + (-1.0);
    float _310 = ((((_281.y - _248) * _295) + _248) * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3349 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))));
    float _319 = fma(_316, _228, fma(_310, _221, _308 * _207));
    float _322 = fma(_316, _229, fma(_310, _222, _308 * _208));
    float _325 = fma(_316, _230, fma(_310, _223, _308 * _209));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    vec4 _357 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _361 = (cbMtdParam._m0[11u].z + dot(vec4(_329 * _319, _329 * _322, _329 * _325, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_357.x * cbMtdParam._m0[11u].w);
    float _3360 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _384 = _379.x * cbMtdParam._m0[9u].x;
    float _385 = _379.y * cbMtdParam._m0[9u].y;
    float _386 = _379.z * cbMtdParam._m0[9u].z;
    vec4 _405 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _419 = (((_405.x * cbMtdParam._m0[10u].x) - _384) * _295) + _384;
    float _420 = (((_405.y * cbMtdParam._m0[10u].y) - _385) * _295) + _385;
    float _421 = (((_405.z * cbMtdParam._m0[10u].z) - _386) * _295) + _386;
    vec4 _434 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _445 = ((_434.x - _419) * _362) + _419;
    float _446 = ((_434.y - _420) * _362) + _420;
    float _447 = ((_434.z - _421) * _362) + _421;
    vec4 _460 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _467 = (_460.x * 2.0) + (-1.0);
    float _468 = (_460.y * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3371 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _477 = ((_460.z - _304) * _362) + _304;
    float _484 = ((_467 - _308) * _362) + _308;
    float _485 = ((_468 - _310) * _362) + _310;
    float _486 = ((sqrt(1.0 - (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) - _316) * _362) + _316;
    float _489 = fma(_486, _228, fma(_485, _221, _484 * _207));
    float _492 = fma(_486, _229, fma(_485, _222, _484 * _208));
    float _495 = fma(_486, _230, fma(_485, _223, _484 * _209));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3382 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _503 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3404 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3415 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _608 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _611 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _614 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _627 = uint(roundEven(NORMAL.w)) * 13u;
    uint _629 = (_627 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3426 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _652 = _649.x * TEXCOORD_9.w;
    float _653 = dot(vec3(_500, _501, _502), vec3(_579, _580, _581));
    float _656 = _653 * 2.0;
    float _660 = (_656 * _500) - _579;
    float _661 = (_656 * _501) - _580;
    float _662 = (_656 * _502) - _581;
    float _666 = abs(dot(vec3(_579, _580, _581), vec3(_500, _501, _502)));
    float _3459 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _668 = sqrt(_503);
    float _681 = exp2((_668 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1023;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _748 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _752 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _756 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _781 = _713 + _500;
        float _782 = _717 + _501;
        float _783 = _721 + _502;
        float _793 = fma(_783, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781)) - _748;
        float _794 = fma(_783, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781)) - _752;
        float _795 = fma(_783, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781)) - _756;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_748 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_752 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[34u].z) + ((((((_756 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _851 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_817.x + (-0.5));
        float _853 = _851 * (_817.y + (-0.5));
        float _854 = _851 * (_817.z + (-0.5));
        float _861 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_824.x + (-0.5));
        float _863 = _861 * (_824.y + (-0.5));
        float _864 = _861 * (_824.z + (-0.5));
        float _871 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_831.x + (-0.5));
        float _873 = _871 * (_831.y + (-0.5));
        float _874 = _871 * (_831.z + (-0.5));
        float _881 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_838.x + (-0.5));
        float _883 = _881 * (_838.y + (-0.5));
        float _884 = _881 * (_838.z + (-0.5));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = _852 * 0.5;
        float _889 = _862 * 0.5;
        float _890 = _872 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _905 = (dot(vec3(_500, _501, _502), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _915 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3507 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_917 + 1.0))) + _922) * _885;
        float _932 = _853 * 0.5;
        float _933 = _863 * 0.5;
        float _934 = _873 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_500, _501, _502), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3540 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_959 + 1.0))) + _964) * _886;
        float _974 = _854 * 0.5;
        float _975 = _864 * 0.5;
        float _976 = _874 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_500, _501, _502), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3573 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1001 + 1.0))) + _1006) * _887;
        _1023 = _854;
        _1025 = _853;
        _1026 = _852;
        _1027 = _864;
        _1028 = _863;
        _1029 = _862;
        _1030 = _874;
        _1031 = _873;
        _1032 = _872;
        _1033 = _887;
        _1034 = _886;
        _1035 = _885;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
    }
    else
    {
        _1023 = _1024;
        _1025 = _1024;
        _1026 = _1024;
        _1027 = _1024;
        _1028 = _1024;
        _1029 = _1024;
        _1030 = _1024;
        _1031 = _1024;
        _1032 = _1024;
        _1033 = _1024;
        _1034 = _1024;
        _1035 = _1024;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1064 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1068 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1072 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1095 = _713 + _500;
        float _1096 = _717 + _501;
        float _1097 = _721 + _502;
        float _1107 = fma(_1097, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095)) - _1064;
        float _1108 = fma(_1097, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095)) - _1068;
        float _1109 = fma(_1097, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095)) - _1072;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1064 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1068 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[35u].z) + ((((((_1072 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1163 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1130.x + (-0.5));
        float _1165 = _1163 * (_1130.y + (-0.5));
        float _1166 = _1163 * (_1130.z + (-0.5));
        float _1173 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1137.x + (-0.5));
        float _1175 = _1173 * (_1137.y + (-0.5));
        float _1176 = _1173 * (_1137.z + (-0.5));
        float _1183 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1144.x + (-0.5));
        float _1185 = _1183 * (_1144.y + (-0.5));
        float _1186 = _1183 * (_1144.z + (-0.5));
        float _1193 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1151.x + (-0.5));
        float _1195 = _1193 * (_1151.y + (-0.5));
        float _1196 = _1193 * (_1151.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_500, _501, _502), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3636 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1227 + 1.0))) + _1232) * _1197;
        float _1242 = _1165 * 0.5;
        float _1243 = _1175 * 0.5;
        float _1244 = _1185 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_500, _501, _502), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3669 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1269 + 1.0))) + _1274) * _1198;
        float _1284 = _1166 * 0.5;
        float _1285 = _1176 * 0.5;
        float _1286 = _1186 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_500, _501, _502), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3702 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1311 + 1.0))) + _1316) * _1199;
        _1333 = _1166;
        _1334 = _1165;
        _1335 = _1164;
        _1336 = _1176;
        _1337 = _1175;
        _1338 = _1174;
        _1339 = _1186;
        _1340 = _1185;
        _1341 = _1184;
        _1342 = _1199;
        _1343 = _1198;
        _1344 = _1197;
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1024;
        _1334 = _1024;
        _1335 = _1024;
        _1336 = _1024;
        _1337 = _1024;
        _1338 = _1024;
        _1339 = _1024;
        _1340 = _1024;
        _1341 = _1024;
        _1342 = _1024;
        _1343 = _1024;
        _1344 = _1024;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1037)) + _1037;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1380 = fma(_1359, cbSceneParam._m0[89u].z, fma(_1358, cbSceneParam._m0[89u].y, _1357 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1359, cbSceneParam._m0[90u].z, fma(_1358, cbSceneParam._m0[90u].y, _1357 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1359, cbSceneParam._m0[91u].z, fma(_1358, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1357));
    float _1401 = _660 * 0.5;
    float _1402 = _661 * 0.5;
    float _1403 = _662 * 0.5;
    float _1404 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1407 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1410 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1444;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1417 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1023, _1027, _1030, _1033));
        float _1421 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1425 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1432 = dot(vec4(cbModelParam._m0[39u]), vec4(_1401, _1402, _1403, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1455;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1446 = dot(vec4(cbModelParam._m0[40u]), vec4(_1401, _1402, _1403, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1459 = (_1455 * cbModelParam._m0[1u].x) + (_1444 * (1.0 - cbModelParam._m0[1u].x));
    float _1469 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1469 : min(cbModelParam._m0[25u].z, _1469));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1519 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1523 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1527 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1530 = fma(_662, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660));
        float _1533 = fma(_662, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660));
        float _1536 = fma(_662, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660));
        float _1564;
        if (_1530 > 0.0)
        {
            _1564 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1564 = frontier_phi_16_14_ladder;
        }
        float _1768;
        if (_1533 > 0.0)
        {
            _1768 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1768 = frontier_phi_25_21_ladder;
        }
        float _2011;
        if (_1536 > 0.0)
        {
            _2011 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2011 = frontier_phi_37_32_ladder;
        }
        float _2013 = isnan(_1768) ? _1564 : (isnan(_1564) ? _1768 : min(_1564, _1768));
        float _2014 = isnan(_2011) ? _2013 : (isnan(_2013) ? _2011 : min(_2013, _2011));
        float _2018 = (_2014 * _1530) + _1519;
        float _2019 = (_2014 * _1533) + _1523;
        float _2020 = (_2014 * _1536) + _1527;
        float _2021 = _2014 * 9.9999997473787516355514526367188e-05;
        float _2023 = (-1.0) - _2021;
        float _2025 = _2021 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2020 > _2025) || ((_2020 < _2023) || ((_2019 > _2025) || ((_2019 < _2023) || ((_2018 < _2023) || (_2018 > _2025))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2144 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2020, cbModelParam._m0[9u].z, fma(_2019, cbModelParam._m0[9u].y, _2018 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2020, cbModelParam._m0[10u].z, fma(_2019, cbModelParam._m0[10u].y, _2018 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2020, cbModelParam._m0[11u].z, fma(_2019, cbModelParam._m0[11u].y, _2018 * cbModelParam._m0[11u].x))), _1470);
            frontier_phi_15_37_ladder = _2144.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2144.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2144.x * cbModelParam._m0[1u].y;
        }
        _1552 = frontier_phi_15_37_ladder_2;
        _1554 = frontier_phi_15_37_ladder_1;
        _1556 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_660, _661, _662), _1470);
        _1552 = _1540.x * cbModelParam._m0[1u].y;
        _1554 = _1540.y * cbModelParam._m0[1u].y;
        _1556 = _1540.z * cbModelParam._m0[1u].y;
    }
    float _1560 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1560 : min(cbModelParam._m0[25u].w, _1560));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1618 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1622 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1626 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1629 = fma(_662, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660));
        float _1632 = fma(_662, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660));
        float _1635 = fma(_662, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660));
        float _1773;
        if (_1629 > 0.0)
        {
            _1773 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1773 = frontier_phi_27_23_ladder;
        }
        float _2038;
        if (_1632 > 0.0)
        {
            _2038 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2038 = frontier_phi_39_34_ladder;
        }
        float _2243;
        if (_1635 > 0.0)
        {
            _2243 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2243 = frontier_phi_48_45_ladder;
        }
        float _2245 = isnan(_2038) ? _1773 : (isnan(_1773) ? _2038 : min(_1773, _2038));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1629) + _1618;
        float _2251 = (_2246 * _1632) + _1622;
        float _2252 = (_2246 * _1635) + _1626;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2253;
        float _2256 = _2253 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2252 > _2256) || ((_2252 < _2254) || ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 < _2254) || (_2250 > _2256))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2252, cbModelParam._m0[17u].z, fma(_2251, cbModelParam._m0[17u].y, _2250 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2252, cbModelParam._m0[18u].z, fma(_2251, cbModelParam._m0[18u].y, _2250 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2252, cbModelParam._m0[19u].z, fma(_2251, cbModelParam._m0[19u].y, _2250 * cbModelParam._m0[19u].x))), _1561);
            frontier_phi_24_48_ladder = _2450.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2450.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2450.x * cbModelParam._m0[1u].z;
        }
        _1654 = frontier_phi_24_48_ladder_2;
        _1656 = frontier_phi_24_48_ladder_1;
        _1658 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_660, _661, _662), _1561);
        _1654 = _1638.x * cbModelParam._m0[1u].z;
        _1656 = _1638.y * cbModelParam._m0[1u].z;
        _1658 = _1638.z * cbModelParam._m0[1u].z;
    }
    float _1670 = ((((1.0 - _681) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_681 * _668)) * _652;
    float _1671 = _1670 * ((cbModelParam._m0[1u].w * (_1654 - _1552)) + _1552);
    float _1672 = _1670 * ((cbModelParam._m0[1u].w * (_1656 - _1554)) + _1554);
    float _1673 = _1670 * ((cbModelParam._m0[1u].w * (_1658 - _1556)) + _1556);
    float _1676 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, _1671 * cbSceneParam._m0[91u].x));
    uvec4 _1692 = floatBitsToUint(cbInstanceData._m0[_627 + 5u]);
    uint _1694 = _1692.x * 14u;
    uint _1695 = _1694 + 13u;
    float _1702 = _652 + (-1.0);
    float _1707 = (cbLight._m0[_1695].x * _1702) + 1.0;
    float _1708 = (cbLight._m0[_1695].y * _1702) + 1.0;
    float _1709 = (cbLight._m0[_1695].z * _1702) + 1.0;
    float _1710 = (cbLight._m0[_1695].w * _1702) + 1.0;
    uint _1711 = _1694 + 5u;
    float _1717 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1721 = _1694 + 4u;
    float _1727 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
    uint _1731 = _1694 | 1u;
    float _1742 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_500, _501, _502));
    float _1745 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_500, _501, _502));
    float _3838 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _3849 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1750 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1752 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _1759 = ((cbLight._m0[_1711].x * _1717) * _1752) + ((cbLight._m0[_1721].x * _1727) * _1750);
    float _1760 = ((_1717 * cbLight._m0[_1711].y) * _1752) + ((_1727 * cbLight._m0[_1721].y) * _1750);
    float _1761 = ((_1717 * cbLight._m0[_1711].z) * _1752) + ((_1727 * cbLight._m0[_1721].z) * _1750);
    uvec4 _1765 = floatBitsToUint(cbLight._m0[_1694 + 12u]);
    bool _1767 = _1765.x == 0u;
    float _1778;
    float _1780;
    float _1782;
    if (_1767)
    {
        _1778 = _1759;
        _1780 = _1760;
        _1782 = _1761;
    }
    else
    {
        uint _1786 = _1694 + 6u;
        float _1802 = (dot(vec3(cbLight._m0[_1694 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1803 = _1802 * _1802;
        float _3860 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1805 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _1778 = (((cbLight._m0[_1786].x * 0.3183098733425140380859375) * _1804) * _1805) + _1759;
        _1780 = (((cbLight._m0[_1786].y * 0.3183098733425140380859375) * _1804) * _1805) + _1760;
        _1782 = (((cbLight._m0[_1786].z * 0.3183098733425140380859375) * _1804) * _1805) + _1761;
    }
    bool _1785 = _1765.y == 0u;
    float _1823;
    float _1825;
    float _1827;
    if (_1785)
    {
        _1823 = _1778;
        _1825 = _1780;
        _1827 = _1782;
    }
    else
    {
        uint _1982 = _1694 + 7u;
        float _1998 = (dot(vec3(cbLight._m0[_1694 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _3876 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _2001 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _1823 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1778;
        _1825 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1780;
        _1827 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1782;
    }
    uint _1830 = _1694 + 8u;
    float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1694].w)) * _503) * 0.949999988079071044921875);
    float _1844 = _1843 * _1843;
    float _1845 = cbLight._m0[_1694].x + _579;
    float _1846 = cbLight._m0[_1694].y + _580;
    float _1847 = cbLight._m0[_1694].z + _581;
    float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
    float _1852 = _1851 * _1845;
    float _1853 = _1851 * _1846;
    float _1854 = _1851 * _1847;
    float _1855 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1694].xyz));
    float _3892 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _1859 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1860 = dot(vec3(_500, _501, _502), vec3(_1852, _1853, _1854));
    float _3914 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1852, _1853, _1854));
    float _3925 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1844 * _1844;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1884 = 1.0 - _1844;
    float _1895 = (0.5 / (((_1859 * ((_1858 * _1884) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1884) + _1844) * _1858))) * _1858;
    float _3936 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    uint _1908 = _1694 + 9u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1731].w)) * _503) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1731].x + _579;
    float _1922 = cbLight._m0[_1731].y + _580;
    float _1923 = cbLight._m0[_1731].z + _581;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1731].xyz));
    float _3947 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1935 = dot(vec3(_500, _501, _502), vec3(_1928, _1929, _1930));
    float _3958 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_1928, _1929, _1930));
    float _3969 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1920 * _1920;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1956 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1957 = 1.0 - _1920;
    float _1967 = (0.5 / (((_1859 * ((_1934 * _1957) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1957) + _1920) * _1934))) * _1934;
    float _3980 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    float _1979 = (((_1956 * cbLight._m0[_1908].x) * _1969) * _1717) + (((_1883 * cbLight._m0[_1830].x) * _1897) * _1727);
    float _1980 = (((_1956 * cbLight._m0[_1908].y) * _1969) * _1717) + (((_1883 * cbLight._m0[_1830].y) * _1897) * _1727);
    float _1981 = (((_1956 * cbLight._m0[_1908].z) * _1969) * _1717) + (((_1883 * cbLight._m0[_1830].z) * _1897) * _1727);
    float _2043;
    float _2045;
    float _2047;
    if (_1767)
    {
        _2043 = _1979;
        _2045 = _1980;
        _2047 = _1981;
    }
    else
    {
        uint _2049 = _1694 + 2u;
        uint _2053 = _1694 + 10u;
        float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _503) * 0.949999988079071044921875);
        float _2068 = _2067 * _2067;
        float _2069 = cbLight._m0[_2049].x + _579;
        float _2070 = cbLight._m0[_2049].y + _580;
        float _2071 = cbLight._m0[_2049].z + _581;
        float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
        float _2076 = _2075 * _2069;
        float _2077 = _2075 * _2070;
        float _2078 = _2075 * _2071;
        float _2079 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2049].xyz));
        float _3991 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2083 = dot(vec3(_500, _501, _502), vec3(_2076, _2077, _2078));
        float _4002 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2087 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2076, _2077, _2078));
        float _4013 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2091 = _2068 * _2068;
        float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
        float _2104 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2105 = 1.0 - _2068;
        float _2115 = (0.5 / (((_1859 * ((_2082 * _2105) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _2105) + _2068) * _2082))) * _2082;
        float _4024 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2117 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
        float _2118 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _2043 = (((_2104 * cbLight._m0[_2053].x) * _2117) * _2118) + _1979;
        _2045 = (((_2104 * cbLight._m0[_2053].y) * _2117) * _2118) + _1980;
        _2047 = (((_2104 * cbLight._m0[_2053].z) * _2117) * _2118) + _1981;
    }
    float _2153;
    float _2155;
    float _2157;
    if (_1785)
    {
        _2153 = _2043;
        _2155 = _2045;
        _2157 = _2047;
    }
    else
    {
        uint _2164 = _1694 + 3u;
        uint _2168 = _1694 + 11u;
        float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _503) * 0.949999988079071044921875);
        float _2183 = _2182 * _2182;
        float _2184 = cbLight._m0[_2164].x + _579;
        float _2185 = cbLight._m0[_2164].y + _580;
        float _2186 = cbLight._m0[_2164].z + _581;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2191 = _2190 * _2184;
        float _2192 = _2190 * _2185;
        float _2193 = _2190 * _2186;
        float _2194 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2164].xyz));
        float _4040 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2198 = dot(vec3(_500, _501, _502), vec3(_2191, _2192, _2193));
        float _4051 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2191, _2192, _2193));
        float _4062 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _2183 * _2183;
        float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
        float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2220 = 1.0 - _2183;
        float _2230 = (0.5 / (((_1859 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _2220) + _2183) * _2197))) * _2197;
        float _4073 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _2153 = (((_2219 * cbLight._m0[_2168].x) * _2232) * _2233) + _2043;
        _2155 = (((_2219 * cbLight._m0[_2168].y) * _2232) * _2233) + _2045;
        _2157 = (((_2219 * cbLight._m0[_2168].z) * _2232) * _2233) + _2047;
    }
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    if (_1692.y == 0u)
    {
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2308;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2308;
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2308;
        uvec4 _2323 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2324 = _2323.x;
        uint _2335 = uint((float(_2323.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2324))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2324)));
        float _2345 = (log2(_2311 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2346 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        uint _2349 = uint(isnan(14.0) ? _2346 : (isnan(_2346) ? 14.0 : min(_2346, 14.0)));
        uvec4 _2354 = texelFetch(g_lightClusterGridBuffer, int(((_2349 << 2u) + (_2335 << 6u)) >> 2u));
        uint _2355 = _2354.x;
        uint _2356 = _2323.z;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        if (((((1u << ((_2356 >> 4u) & 15u)) + 4294967295u) & _2355) == 0u) || ((_2356 & 240u) == 0u))
        {
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
        }
        else
        {
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            uint _2605 = 0u;
            uint _2614;
            bool _2615;
            for (;;)
            {
                _2614 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2605 << 2u)) >> 2u)).x;
                _2615 = _2614 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2615)
                {
                    frontier_phi_63_pred = _2604;
                    frontier_phi_63_pred_1 = _2603;
                    frontier_phi_63_pred_2 = _2602;
                    frontier_phi_63_pred_3 = _2601;
                    frontier_phi_63_pred_4 = _2600;
                    frontier_phi_63_pred_5 = _2599;
                }
                else
                {
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    uint _2729;
                    _2723 = _2599;
                    _2724 = _2600;
                    _2725 = _2601;
                    _2726 = _2602;
                    _2727 = _2603;
                    _2728 = _2604;
                    _2729 = _2614;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2733 = uint(findLSB(_2729)) + (_2605 << 5u);
                        uint _2730 = (_2729 + 4294967295u) & _2729;
                        uint _2735 = _2733 * 48u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2755 = (_2733 * 48u) + 4u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 3u)).x));
                        uint _2774 = (_2733 * 48u) + 8u;
                        vec3 _2785 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x));
                        float _2789 = _2749.x - _2309;
                        float _2790 = _2749.y - _2310;
                        float _2791 = _2749.z - _2311;
                        float _2792 = dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791));
                        float _2795 = inversesqrt(_2792);
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2799 = dot(vec3(_608, _611, _614), vec3(_2796, _2797, _2798));
                        float _2804 = 1.0 - (_2792 * _2749.w);
                        float _4099 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2806 = sqrt(_2792) * _2768.w;
                        float _2809 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2799) + _2810;
                        float _2816 = _2806 * _2806;
                        float _2820 = ((isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))) * _2805) / ((_2816 * 0.699999988079071044921875) + 1.0);
                        float _2824 = (-0.0) - _2309;
                        float _2825 = (-0.0) - _2310;
                        float _2826 = (-0.0) - _2311;
                        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2841 = exp2(log2(1.0 / ((_2816 * 3.5) + 5.0)) * 0.25);
                        float _2842 = 1.0 - _668;
                        float _2849 = sqrt(1.0 - ((1.0 - (_2842 * _2842)) * (1.0 - (_2841 * _2841))));
                        float _2850 = _2849 * _2849;
                        float _2851 = _2850 * _2850;
                        float _2852 = _2831 + _2796;
                        float _2853 = _2832 + _2797;
                        float _2854 = _2833 + _2798;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2862 = dot(vec3(_608, _611, _614), vec3(_2831, _2832, _2833));
                        float _4115 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2866 = dot(vec3(_608, _611, _614), vec3(_2858 * _2852, _2858 * _2853, _2858 * _2854));
                        float _4126 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2869 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2873 = ((_2869 * _2869) * (_2851 + (-1.0))) + 1.0;
                        float _2874 = _2809 * _2850;
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2799) + _2875;
                        float _4137 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2880 = 1.0 - _2850;
                        float _2890 = (0.5 / (((_2879 * ((_2865 * _2880) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2879 * _2880) + _2850) * _2865))) * _2879;
                        float _4148 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2901 = (((_2851 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_2873 * _2873) * ((_2816 * 2.1991131305694580078125) + 3.141590118408203125))) * _2805;
                        _2658 = (_2820 * _2768.x) + _2726;
                        _2659 = (_2820 * _2768.y) + _2727;
                        _2660 = (_2820 * _2768.z) + _2728;
                        _2655 = (_2901 * _2785.x) + _2723;
                        _2656 = (_2901 * _2785.y) + _2724;
                        _2657 = (_2901 * _2785.z) + _2725;
                        if (_2730 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2730;
                        }
                    }
                    frontier_phi_63_pred = _2660;
                    frontier_phi_63_pred_1 = _2659;
                    frontier_phi_63_pred_2 = _2658;
                    frontier_phi_63_pred_3 = _2657;
                    frontier_phi_63_pred_4 = _2656;
                    frontier_phi_63_pred_5 = _2655;
                }
                _2466 = frontier_phi_63_pred;
                _2464 = frontier_phi_63_pred_1;
                _2462 = frontier_phi_63_pred_2;
                _2460 = frontier_phi_63_pred_3;
                _2458 = frontier_phi_63_pred_4;
                _2456 = frontier_phi_63_pred_5;
                uint _2606 = _2605 + 1u;
                if (_2606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2599 = _2456;
                    _2600 = _2458;
                    _2601 = _2460;
                    _2602 = _2462;
                    _2603 = _2464;
                    _2604 = _2466;
                    _2605 = _2606;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
        }
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.z;
        uint _2472 = (_2470 >> 8u) & 15u;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        if (((4294967295u << _2472) & _2355) == 0u)
        {
            _2567 = _2455;
            _2569 = _2457;
            _2571 = _2459;
            _2573 = _2461;
            _2575 = _2463;
            _2577 = _2465;
        }
        else
        {
            float _2592 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
            float _2593 = _2592 * _2309;
            float _2594 = _2592 * _2310;
            float _2595 = _2592 * _2311;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2472 < ((_2470 >> 12u) & 15u))
            {
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2706 = _2455;
                float _2707 = _2457;
                float _2708 = _2459;
                float _2709 = _2461;
                float _2710 = _2463;
                float _2711 = _2465;
                uint _2712 = _2472;
                uint _2721;
                bool _2722;
                for (;;)
                {
                    _2721 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2712 << 2u)) >> 2u)).x;
                    _2722 = _2721 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2722)
                    {
                        frontier_phi_69_pred = _2711;
                        frontier_phi_69_pred_1 = _2710;
                        frontier_phi_69_pred_2 = _2709;
                        frontier_phi_69_pred_3 = _2708;
                        frontier_phi_69_pred_4 = _2707;
                        frontier_phi_69_pred_5 = _2706;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _2919 = _2706;
                        float _2920 = _2707;
                        float _2921 = _2708;
                        float _2922 = _2709;
                        float _2923 = _2710;
                        float _2924 = _2711;
                        uint _2925 = _2721;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        vec3 _2979;
                        vec4 _2995;
                        vec4 _3011;
                        float _3058;
                        bool _3059;
                        for (;;)
                        {
                            uint _2936 = ((_2712 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2936 * 40u) + 8u;
                            _2979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x));
                            uint _2982 = (_2936 * 40u) + 16u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2936 * 40u) + 20u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2936 * 40u) + 24u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3033 = (_2936 * 40u) + 28u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3058 = fma(_2311, _3046.z, fma(_2310, _3046.y, _3046.x * _2309)) + _3046.w;
                            _3059 = !((fma(_2311, _3027.z, fma(_2310, _3027.y, _3027.x * _2309)) + _3027.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3059)
                            {
                                float _3086 = _2951.x - _2309;
                                float _3087 = _2951.y - _2310;
                                float _3088 = _2951.z - _2311;
                                float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                                float _3092 = inversesqrt(_3089);
                                float _3093 = _3092 * _3086;
                                float _3094 = _3092 * _3087;
                                float _3095 = _3092 * _3088;
                                float _3099 = 1.0 - (_3089 / (_2952 * _2952));
                                float _4159 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3104 = sqrt(_3089) * _2967.w;
                                float _3106 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                                float _3107 = _3106 * _3106;
                                float _3110 = ((1.0 - _3107) * dot(vec3(_3093, _3094, _3095), vec3(_608, _611, _614))) + _3107;
                                float _3113 = _3104 * _3104;
                                float _3117 = (fma(_2311, _2995.z, fma(_2310, _2995.y, _2995.x * _2309)) + _2995.w) / _3058;
                                float _3118 = (fma(_2311, _3011.z, fma(_2310, _3011.y, _3011.x * _2309)) + _3011.w) / _3058;
                                float _3122 = 1.0 - dot(vec2(_3117, _3118), vec2(_3117, _3118));
                                float _4175 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3124 = _3123 * (((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3100) / ((_3113 * 0.699999988079071044921875) + 1.0));
                                float _3136 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                                float _3137 = 1.0 - _668;
                                float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                                float _3145 = _3144 * _3144;
                                float _3146 = _3145 * _3145;
                                float _3147 = _3093 - _2593;
                                float _3148 = _3094 - _2594;
                                float _3149 = _3095 - _2595;
                                float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                                float _3157 = dot(vec3(_608, _611, _614), vec3((-0.0) - _2593, (-0.0) - _2594, (-0.0) - _2595));
                                float _4186 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3161 = dot(vec3(_608, _611, _614), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                                float _4197 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                                float _3169 = _3106 * _3145;
                                float _3170 = _3169 * _3169;
                                float _3176 = ((1.0 - _3170) * dot(vec3(_608, _611, _614), vec3(_3093, _3094, _3095))) + _3170;
                                float _4208 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3178 = 1.0 - _3145;
                                float _3188 = (0.5 / (((_3177 * ((_3160 * _3178) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3145) * _3160))) * _3177;
                                float _4219 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3198 = (_3123 * _3100) * (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_3168 * _3168) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3124 * _2967.z;
                                frontier_phi_75_pred_1 = _3124 * _2967.y;
                                frontier_phi_75_pred_2 = _3124 * _2967.x;
                                frontier_phi_75_pred_3 = _3198 * _2979.z;
                                frontier_phi_75_pred_4 = _3198 * _2979.y;
                                frontier_phi_75_pred_5 = _3198 * _2979.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3207 = frontier_phi_75_pred;
                            _3206 = frontier_phi_75_pred_1;
                            _3205 = frontier_phi_75_pred_2;
                            _3204 = frontier_phi_75_pred_3;
                            _3203 = frontier_phi_75_pred_4;
                            _3202 = frontier_phi_75_pred_5;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2911;
                        frontier_phi_69_pred_1 = _2910;
                        frontier_phi_69_pred_2 = _2909;
                        frontier_phi_69_pred_3 = _2908;
                        frontier_phi_69_pred_4 = _2907;
                        frontier_phi_69_pred_5 = _2906;
                    }
                    _2578 = frontier_phi_69_pred;
                    _2576 = frontier_phi_69_pred_1;
                    _2574 = frontier_phi_69_pred_2;
                    _2572 = frontier_phi_69_pred_3;
                    _2570 = frontier_phi_69_pred_4;
                    _2568 = frontier_phi_69_pred_5;
                    uint _2713 = _2712 + 1u;
                    if (_2713 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2706 = _2568;
                        _2707 = _2570;
                        _2708 = _2572;
                        _2709 = _2574;
                        _2710 = _2576;
                        _2711 = _2578;
                        _2712 = _2713;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2578;
                frontier_phi_57_58_ladder_1 = _2576;
                frontier_phi_57_58_ladder_2 = _2574;
                frontier_phi_57_58_ladder_3 = _2572;
                frontier_phi_57_58_ladder_4 = _2570;
                frontier_phi_57_58_ladder_5 = _2568;
            }
            else
            {
                frontier_phi_57_58_ladder = _2465;
                frontier_phi_57_58_ladder_1 = _2463;
                frontier_phi_57_58_ladder_2 = _2461;
                frontier_phi_57_58_ladder_3 = _2459;
                frontier_phi_57_58_ladder_4 = _2457;
                frontier_phi_57_58_ladder_5 = _2455;
            }
            _2567 = frontier_phi_57_58_ladder_5;
            _2569 = frontier_phi_57_58_ladder_4;
            _2571 = frontier_phi_57_58_ladder_3;
            _2573 = frontier_phi_57_58_ladder_2;
            _2575 = frontier_phi_57_58_ladder_1;
            _2577 = frontier_phi_57_58_ladder;
        }
        float _2582 = isnan(1.0) ? _652 : (isnan(_652) ? 1.0 : min(_652, 1.0));
        _2367 = (_2582 * _2573) + _1823;
        _2369 = (_2582 * _2575) + _1825;
        _2371 = (_2582 * _2577) + _1827;
        _2373 = ((_2567 * 0.039999999105930328369140625) * _2582) + _2153;
        _2375 = ((_2569 * 0.039999999105930328369140625) * _2582) + _2155;
        _2377 = ((_2571 * 0.039999999105930328369140625) * _2582) + _2157;
    }
    else
    {
        _2367 = _1823;
        _2369 = _1825;
        _2371 = _1827;
        _2373 = _2153;
        _2375 = _2155;
        _2377 = _2157;
    }
    float _4235 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4246 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4257 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    uint _2397 = _627 + 6u;
    float _2405 = _587 / cbSceneParam._m0[86u].x;
    float _2406 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2420 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2422 = _2420.x;
    float _2423 = _2420.y;
    float _2424 = _2420.z;
    float _2425 = _2420.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2480 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2481 = _2480 / _522;
        float _2492 = _2481 * _572;
        float _2493 = _573 * _2481;
        float _2494 = (-0.0) - _2493;
        float _2495 = _2481 * _574;
        float _2497 = (cbSceneParam._m0[77u].w * _2494) / _2480;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2493;
        float _2505 = sqrt(((_2492 * _2492) + (_2493 * _2493)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2480)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2494 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2628 = 1.0 / cbSceneParam._m0[80u].x;
            float _2629 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2630 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2639 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : min(_2629, 0.0));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            _2668 = ((abs(_2505 / _2494) * cbSceneParam._m0[80u].y) * ((((_2639 - _2640) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))))) * _2628)) - ((exp2(_2515 * _2639) - exp2(_2515 * _2640)) * _2628))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2425);
        _2517 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2422;
        _2519 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2423;
        _2521 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2424;
        _2523 = _2679 * _2425;
    }
    else
    {
        _2517 = _2422;
        _2519 = _2423;
        _2521 = _2424;
        _2523 = _2425;
    }
    float _2535 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2536 = _2535 == 3.0;
    float _2537 = log2(_2523);
    float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2367 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _652))) + ((_2373 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1459)) * cbPerFrame._m0[3u].x));
    float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2369 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _652))) + ((_2375 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1459)) * cbPerFrame._m0[3u].x));
    float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2371 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _652))) + ((_2377 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1459)) * cbPerFrame._m0[3u].x));
    float _2555 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2555 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
    SV_Target.y = _2555 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
    SV_Target.z = _2555 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
    SV_Target.w = cbInstanceData._m0[_2397].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2397].w;
}


