#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1110;
float _3782;
float _3783;
float _3784;
float _3785;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _254.x;
    float _258 = _254.y;
    float _259 = _254.z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _304 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3794 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _314 = ((_291.z - _259) * _305) + _259;
    float _318 = ((((_291.x - _257) * _305) + _257) * 2.0) + (-1.0);
    float _320 = ((((_291.y - _258) * _305) + _258) * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3805 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    float _329 = fma(_326, _238, fma(_320, _231, _318 * _217));
    float _332 = fma(_326, _239, fma(_320, _232, _318 * _218));
    float _335 = fma(_326, _240, fma(_320, _233, _318 * _219));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    vec4 _367 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _371 = (cbMtdParam._m0[11u].z + dot(vec4(_339 * _329, _339 * _332, _339 * _335, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_367.x * cbMtdParam._m0[11u].w);
    float _3816 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _394 = _389.x * cbMtdParam._m0[9u].x;
    float _395 = _389.y * cbMtdParam._m0[9u].y;
    float _396 = _389.z * cbMtdParam._m0[9u].z;
    vec4 _415 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _429 = (((_415.x * cbMtdParam._m0[10u].x) - _394) * _305) + _394;
    float _430 = (((_415.y * cbMtdParam._m0[10u].y) - _395) * _305) + _395;
    float _431 = (((_415.z * cbMtdParam._m0[10u].z) - _396) * _305) + _396;
    vec4 _444 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _455 = ((_444.x - _429) * _372) + _429;
    float _456 = ((_444.y - _430) * _372) + _430;
    float _457 = ((_444.z - _431) * _372) + _431;
    float _473 = _305 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _475 = _473 - (_473 * _372);
    vec4 _488 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _495 = (_488.x * 2.0) + (-1.0);
    float _496 = (_488.y * 2.0) + (-1.0);
    float _497 = dot(vec2(_495, _496), vec2(_495, _496));
    float _3827 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _505 = ((_488.z - _314) * _372) + _314;
    float _512 = ((_495 - _318) * _372) + _318;
    float _513 = ((_496 - _320) * _372) + _320;
    float _514 = ((sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _326) * _372) + _326;
    float _517 = fma(_514, _238, fma(_513, _231, _512 * _217));
    float _520 = fma(_514, _239, fma(_513, _232, _512 * _218));
    float _523 = fma(_514, _240, fma(_513, _233, _512 * _219));
    float _527 = inversesqrt(dot(vec3(_517, _520, _523), vec3(_517, _520, _523)));
    float _528 = _527 * _517;
    float _529 = _527 * _520;
    float _530 = _527 * _523;
    float _3838 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _531 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3860 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3871 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3882 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _535 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _601 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _591);
    float _602 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _591);
    float _603 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _591);
    float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
    float _608 = _601 * _607;
    float _609 = _602 * _607;
    float _610 = _603 * _607;
    vec4 _615 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _617 = _615.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _790 = sqrt(((_601 * _601) + (_602 * _602)) + (_603 * _603));
        float _796 = (cbMatDynParam._m0[5u].x * _790) + cbMatDynParam._m0[5u].y;
        float _3893 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _801 = (cbMatDynParam._m0[5u].z * _790) + cbMatDynParam._m0[5u].w;
        float _3904 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) - _797)) + _797) < ((_617 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _628 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _629 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _648 = fma(_530, cbSceneParam._m0[5u].z, fma(_529, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _528));
    float _651 = fma(_530, cbSceneParam._m0[6u].z, fma(_529, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _528));
    float _654 = fma(_530, cbSceneParam._m0[7u].z, fma(_529, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _528));
    uint _667 = uint(roundEven(NORMAL.w)) * 13u;
    uint _668 = _667 + 9u;
    uint _669 = _668 + uint(cbMatDynParam._m0[0u].w);
    float _675 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_669].x;
    float _676 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_669].y;
    float _677 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_669].z;
    float _3915 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _681 = 1.0 - _535;
    float _682 = _678 * _681;
    float _683 = _679 * _681;
    float _684 = _680 * _681;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _535;
    float _690 = (_679 + (-0.039999999105930328369140625)) * _535;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _535;
    float _692 = _689 + 0.039999999105930328369140625;
    float _694 = _690 + 0.039999999105930328369140625;
    float _695 = _691 + 0.039999999105930328369140625;
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _628, cbSceneParam._m0[86u].y * _629));
    float _707 = _704.x * TEXCOORD_9.w;
    float _708 = dot(vec3(_528, _529, _530), vec3(_608, _609, _610));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _528) - _608;
    float _716 = (_711 * _529) - _609;
    float _717 = (_711 * _530) - _610;
    float _721 = abs(dot(vec3(_608, _609, _610), vec3(_528, _529, _530)));
    float _3948 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_531);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _742 = (1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _743 = _736 * _723;
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771));
        float _838 = fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771));
        float _842 = fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771));
        float _867 = _771 + _528;
        float _868 = _775 + _529;
        float _869 = _779 + _530;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _834;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _838;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _842;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_528, _529, _530), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3996 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_528, _529, _530), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _4029 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_528, _529, _530), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _4062 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771));
        float _1157 = fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771));
        float _1161 = fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771));
        float _1184 = _771 + _528;
        float _1185 = _775 + _529;
        float _1186 = _779 + _530;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_528, _529, _530), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4125 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_528, _529, _530), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4158 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_528, _529, _530), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4191 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = _1110;
        _1431 = _1110;
        _1432 = _1110;
        _1433 = _1110;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1123)) + _1123;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1124)) + _1124;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _715 * 0.5;
    float _1491 = _716 * 0.5;
    float _1492 = _717 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _531);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1622 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1625 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1653 = frontier_phi_19_17_ladder;
        }
        float _1828;
        if (_1622 > 0.0)
        {
            _1828 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1828 = frontier_phi_28_24_ladder;
        }
        float _2123;
        if (_1625 > 0.0)
        {
            _2123 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2123 = frontier_phi_40_35_ladder;
        }
        float _2125 = isnan(_1828) ? _1653 : (isnan(_1653) ? _1828 : min(_1653, _1828));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1619) + _1608;
        float _2131 = (_2126 * _1622) + _1612;
        float _2132 = (_2126 * _1625) + _1616;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2135 = (-1.0) - _2133;
        float _2137 = _2133 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2132 > _2137) || ((_2132 < _2135) || ((_2131 > _2137) || ((_2131 < _2135) || ((_2130 < _2135) || (_2130 > _2137))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2132, cbModelParam._m0[9u].z, fma(_2131, cbModelParam._m0[9u].y, _2130 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2132, cbModelParam._m0[10u].z, fma(_2131, cbModelParam._m0[10u].y, _2130 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2132, cbModelParam._m0[11u].z, fma(_2131, cbModelParam._m0[11u].y, _2130 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_18_40_ladder = _2277.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2277.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2277.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_18_40_ladder_2;
        _1643 = frontier_phi_18_40_ladder_1;
        _1645 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1559);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _531);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1707 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1711 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1715 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1718 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1721 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1724 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1833;
        if (_1718 > 0.0)
        {
            _1833 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1833 = frontier_phi_30_26_ladder;
        }
        float _2150;
        if (_1721 > 0.0)
        {
            _2150 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2150 = frontier_phi_42_37_ladder;
        }
        float _2488;
        if (_1724 > 0.0)
        {
            _2488 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2488 = frontier_phi_52_49_ladder;
        }
        float _2490 = isnan(_2150) ? _1833 : (isnan(_1833) ? _2150 : min(_1833, _2150));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1718) + _1707;
        float _2496 = (_2491 * _1721) + _1711;
        float _2497 = (_2491 * _1724) + _1715;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2498;
        float _2501 = _2498 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2497 > _2501) || ((_2497 < _2499) || ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 < _2499) || (_2495 > _2501))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2497, cbModelParam._m0[17u].z, fma(_2496, cbModelParam._m0[17u].y, _2495 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2497, cbModelParam._m0[18u].z, fma(_2496, cbModelParam._m0[18u].y, _2495 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2497, cbModelParam._m0[19u].z, fma(_2496, cbModelParam._m0[19u].y, _2495 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_27_52_ladder = _2619.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2619.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2619.x * cbModelParam._m0[1u].z;
        }
        _1743 = frontier_phi_27_52_ladder_2;
        _1745 = frontier_phi_27_52_ladder_1;
        _1747 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1650);
        _1743 = _1727.x * cbModelParam._m0[1u].z;
        _1745 = _1727.y * cbModelParam._m0[1u].z;
        _1747 = _1727.z * cbModelParam._m0[1u].z;
    }
    float _1760 = (((_742 * _692) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1743 - _1641)) + _1641);
    float _1762 = (((_742 * _694) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1745 - _1643)) + _1643);
    float _1764 = (((_742 * _695) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1747 - _1645)) + _1645);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, _1760 * cbSceneParam._m0[91u].x));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1820 = _1807 / _1819;
    float _1821 = _1811 / _1819;
    float _1822 = _1815 / _1819;
    float _1969;
    float _1970;
    float _1971;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1849 = ((uint(_1822 > cbSceneParam._m0[59u].y) + uint(_1822 > cbSceneParam._m0[59u].x)) + uint(_1822 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1850 = _1849 + 43u;
        uint _1858 = _1849 + 44u;
        uint _1866 = _1849 + 45u;
        uint _1874 = _1849 + 46u;
        float _1885 = fma(_1819, cbSceneParam._m0[_1850].w, fma(_1815, cbSceneParam._m0[_1850].z, fma(_1811, cbSceneParam._m0[_1850].y, _1807 * cbSceneParam._m0[_1850].x)));
        float _1889 = fma(_1819, cbSceneParam._m0[_1858].w, fma(_1815, cbSceneParam._m0[_1858].z, fma(_1811, cbSceneParam._m0[_1858].y, _1807 * cbSceneParam._m0[_1858].x)));
        float _1897 = fma(_1819, cbSceneParam._m0[_1874].w, fma(_1815, cbSceneParam._m0[_1874].z, fma(_1811, cbSceneParam._m0[_1874].y, _1807 * cbSceneParam._m0[_1874].x)));
        float _1902 = cbSceneParam._m0[33u].z * _1897;
        float _1904 = cbSceneParam._m0[33u].w * _1897;
        float _1907 = fma(_1819, cbSceneParam._m0[_1866].w, fma(_1815, cbSceneParam._m0[_1866].z, fma(_1811, cbSceneParam._m0[_1866].y, _1807 * cbSceneParam._m0[_1866].x))) / _1897;
        float _1955 = (cbSceneParam._m0[33u].x - sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822))) * cbSceneParam._m0[33u].y;
        float _4317 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1962 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 + _1885) / _1897, (_1904 + _1889) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 + _1885) / _1897, (_1889 - _1902) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 - _1902) / _1897, (_1889 - _1904) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 - _1904) / _1897, (_1902 + _1889) / _1897), _1907), 0.0)).x), vec4(0.25)));
        _1969 = 1.0 - (_1962 * cbSceneParam._m0[34u].x);
        _1970 = 1.0 - (_1962 * cbSceneParam._m0[34u].y);
        _1971 = 1.0 - (_1962 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1969 = 1.0;
        _1970 = 1.0;
        _1971 = 1.0;
    }
    float _2035;
    float _2037;
    float _2039;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2023 = fma(_1819, cbSceneParam._m0[63u].w, fma(_1815, cbSceneParam._m0[63u].z, fma(_1811, cbSceneParam._m0[63u].y, _1807 * cbSceneParam._m0[63u].x)));
        float _2024 = fma(_1819, cbSceneParam._m0[60u].w, fma(_1815, cbSceneParam._m0[60u].z, fma(_1811, cbSceneParam._m0[60u].y, _1807 * cbSceneParam._m0[60u].x))) / _2023;
        float _2025 = fma(_1819, cbSceneParam._m0[61u].w, fma(_1815, cbSceneParam._m0[61u].z, fma(_1811, cbSceneParam._m0[61u].y, _1807 * cbSceneParam._m0[61u].x))) / _2023;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2024 >= cbSceneParam._m0[64u].x) && (_2025 >= cbSceneParam._m0[64u].y)) && (_2024 <= cbSceneParam._m0[64u].z)) && (_2025 <= cbSceneParam._m0[64u].w))
        {
            float _2163 = fma(_1819, cbSceneParam._m0[62u].w, fma(_1815, cbSceneParam._m0[62u].z, fma(_1811, cbSceneParam._m0[62u].y, _1807 * cbSceneParam._m0[62u].x))) / _2023;
            float _2167 = isnan(cbSceneParam._m0[41u].w) ? _2163 : (isnan(_2163) ? cbSceneParam._m0[41u].w : max(_2163, cbSceneParam._m0[41u].w));
            float _2210 = (cbSceneParam._m0[33u].x - sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822))) * cbSceneParam._m0[33u].y;
            float _4333 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
            float _2217 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2024, cbSceneParam._m0[33u].w + _2025), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2024, _2025 - cbSceneParam._m0[33u].z), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2024 - cbSceneParam._m0[33u].z, _2025 - cbSceneParam._m0[33u].w), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2024 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2025), _2167), 0.0)).x), vec4(0.25)));
            float _2221 = 1.0 - (_2217 * cbSceneParam._m0[34u].x);
            float _2222 = 1.0 - (_2217 * cbSceneParam._m0[34u].y);
            float _2223 = 1.0 - (_2217 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2222) ? _1970 : (isnan(_1970) ? _2222 : min(_1970, _2222));
            frontier_phi_39_38_ladder_1 = isnan(_2221) ? _1969 : (isnan(_1969) ? _2221 : min(_1969, _2221));
            frontier_phi_39_38_ladder_2 = isnan(_2223) ? _1971 : (isnan(_1971) ? _2223 : min(_1971, _2223));
        }
        else
        {
            frontier_phi_39_38_ladder = _1970;
            frontier_phi_39_38_ladder_1 = _1969;
            frontier_phi_39_38_ladder_2 = _1971;
        }
        _2035 = frontier_phi_39_38_ladder_1;
        _2037 = frontier_phi_39_38_ladder;
        _2039 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2035 = _1969;
        _2037 = _1970;
        _2039 = _1971;
    }
    uvec4 _2044 = floatBitsToUint(cbInstanceData._m0[_667 + 5u]);
    uint _2046 = _2044.x * 14u;
    uint _2047 = _2046 + 13u;
    float _2054 = _707 + (-1.0);
    float _2059 = (cbLight._m0[_2047].x * _2054) + 1.0;
    float _2060 = (cbLight._m0[_2047].y * _2054) + 1.0;
    float _2061 = (cbLight._m0[_2047].z * _2054) + 1.0;
    float _2062 = (cbLight._m0[_2047].w * _2054) + 1.0;
    uint _2063 = _2046 + 5u;
    float _2069 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2073 = _2046 + 4u;
    float _2082 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2086 = _2046 | 1u;
    float _2097 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_528, _529, _530));
    float _2100 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_528, _529, _530));
    float _4369 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _4380 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2105 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2107 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2114 = ((cbLight._m0[_2063].x * _2069) * _2107) + (((cbLight._m0[_2073].x * _2035) * _2082) * _2105);
    float _2115 = ((_2069 * cbLight._m0[_2063].y) * _2107) + (((cbLight._m0[_2073].y * _2037) * _2082) * _2105);
    float _2116 = ((_2069 * cbLight._m0[_2063].z) * _2107) + (((cbLight._m0[_2073].z * _2039) * _2082) * _2105);
    uvec4 _2120 = floatBitsToUint(cbLight._m0[_2046 + 12u]);
    bool _2122 = _2120.x == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2122)
    {
        _2224 = _2114;
        _2226 = _2115;
        _2228 = _2116;
    }
    else
    {
        uint _2232 = _2046 + 6u;
        float _2248 = (dot(vec3(cbLight._m0[_2046 + 2u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4391 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2251 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2224 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2114;
        _2226 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2115;
        _2228 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2116;
    }
    bool _2231 = _2120.y == 0u;
    float _2286;
    float _2288;
    float _2290;
    if (_2231)
    {
        _2286 = _2224;
        _2288 = _2226;
        _2290 = _2228;
    }
    else
    {
        uint _2459 = _2046 + 7u;
        float _2475 = (dot(vec3(cbLight._m0[_2046 + 3u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4407 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2478 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2286 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2224;
        _2288 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2226;
        _2290 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2228;
    }
    uint _2293 = _2046 + 8u;
    float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _531) * 0.949999988079071044921875);
    float _2307 = _2306 * _2306;
    float _2308 = cbLight._m0[_2046].x + _608;
    float _2309 = cbLight._m0[_2046].y + _609;
    float _2310 = cbLight._m0[_2046].z + _610;
    float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
    float _2315 = _2314 * _2308;
    float _2316 = _2314 * _2309;
    float _2317 = _2314 * _2310;
    float _2318 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2046].xyz));
    float _4423 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2322 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2323 = dot(vec3(_528, _529, _530), vec3(_2315, _2316, _2317));
    float _4445 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2327 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2315, _2316, _2317));
    float _4456 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2331 = _2307 * _2307;
    float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
    float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2344 = 0.959999978542327880859375 - _689;
    float _2346 = 0.959999978542327880859375 - _690;
    float _2347 = 0.959999978542327880859375 - _691;
    float _2354 = 1.0 - _2307;
    float _2365 = (0.5 / (((_2322 * ((_2321 * _2354) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2354) + _2307) * _2321))) * _2321;
    float _4467 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
    uint _2381 = _2046 + 9u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _531) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2086].x + _608;
    float _2395 = cbLight._m0[_2086].y + _609;
    float _2396 = cbLight._m0[_2086].z + _610;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2086].xyz));
    float _4478 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2408 = dot(vec3(_528, _529, _530), vec3(_2401, _2402, _2403));
    float _4489 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2401, _2402, _2403));
    float _4500 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2393 * _2393;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2434 = 1.0 - _2393;
    float _2444 = (0.5 / (((_2322 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2434) + _2393) * _2407))) * _2407;
    float _4511 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    float _2456 = (((((_2427 * _2344) + _692) * cbLight._m0[_2381].x) * _2446) * _2069) + ((((cbLight._m0[_2293].x * _2035) * ((_2343 * _2344) + _692)) * _2367) * _2082);
    float _2457 = (((((_2427 * _2346) + _694) * cbLight._m0[_2381].y) * _2446) * _2069) + ((((cbLight._m0[_2293].y * _2037) * ((_2343 * _2346) + _694)) * _2367) * _2082);
    float _2458 = (((((_2427 * _2347) + _695) * cbLight._m0[_2381].z) * _2446) * _2069) + ((((cbLight._m0[_2293].z * _2039) * ((_2343 * _2347) + _695)) * _2367) * _2082);
    float _2514;
    float _2516;
    float _2518;
    if (_2122)
    {
        _2514 = _2456;
        _2516 = _2457;
        _2518 = _2458;
    }
    else
    {
        uint _2520 = _2046 + 2u;
        uint _2524 = _2046 + 10u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _531) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _608;
        float _2541 = cbLight._m0[_2520].y + _609;
        float _2542 = cbLight._m0[_2520].z + _610;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2520].xyz));
        float _4522 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2554 = dot(vec3(_528, _529, _530), vec3(_2547, _2548, _2549));
        float _4533 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4544 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2580 = 1.0 - _2539;
        float _2590 = (0.5 / (((_2322 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2580) + _2539) * _2553))) * _2553;
        float _4555 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2514 = (((((_2573 * _2344) + _692) * cbLight._m0[_2524].x) * _2592) * _2593) + _2456;
        _2516 = (((((_2573 * _2346) + _694) * cbLight._m0[_2524].y) * _2592) * _2593) + _2457;
        _2518 = (((((_2573 * _2347) + _695) * cbLight._m0[_2524].z) * _2592) * _2593) + _2458;
    }
    float _2624;
    float _2626;
    float _2628;
    if (_2231)
    {
        _2624 = _2514;
        _2626 = _2516;
        _2628 = _2518;
    }
    else
    {
        uint _2635 = _2046 + 3u;
        uint _2639 = _2046 + 11u;
        float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2635].w)) * _531) * 0.949999988079071044921875);
        float _2654 = _2653 * _2653;
        float _2655 = cbLight._m0[_2635].x + _608;
        float _2656 = cbLight._m0[_2635].y + _609;
        float _2657 = cbLight._m0[_2635].z + _610;
        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
        float _2662 = _2661 * _2655;
        float _2663 = _2661 * _2656;
        float _2664 = _2661 * _2657;
        float _2665 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2635].xyz));
        float _4571 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2669 = dot(vec3(_528, _529, _530), vec3(_2662, _2663, _2664));
        float _4582 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2673 = dot(vec3(cbLight._m0[_2635].xyz), vec3(_2662, _2663, _2664));
        float _4593 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2677 = _2654 * _2654;
        float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
        float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2695 = 1.0 - _2654;
        float _2705 = (0.5 / (((_2322 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2695) + _2654) * _2668))) * _2668;
        float _4604 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2707 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
        float _2708 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2624 = (((((_2688 * _2344) + _692) * cbLight._m0[_2639].x) * _2707) * _2708) + _2514;
        _2626 = (((((_2688 * _2346) + _694) * cbLight._m0[_2639].y) * _2707) * _2708) + _2516;
        _2628 = (((((_2688 * _2347) + _695) * cbLight._m0[_2639].z) * _2707) * _2708) + _2518;
    }
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_2044.y == 0u)
    {
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.x;
        uint _2741 = uint((float(_2729.y) * floor(float(uint(cbSceneParam._m0[85u].y * _629) / _2730))) + floor(float(uint(cbSceneParam._m0[85u].x * _628) / _2730)));
        float _2751 = (log2(_1822 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2752 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        uint _2755 = uint(isnan(14.0) ? _2752 : (isnan(_2752) ? 14.0 : min(_2752, 14.0)));
        uvec4 _2760 = texelFetch(g_lightClusterGridBuffer, int(((_2755 << 2u) + (_2741 << 6u)) >> 2u));
        uint _2761 = _2760.x;
        uint _2762 = _2729.z;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        if (((((1u << ((_2762 >> 4u) & 15u)) + 4294967295u) & _2761) == 0u) || ((_2762 & 240u) == 0u))
        {
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
        }
        else
        {
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            uint _2998 = 0u;
            uint _3007;
            bool _3008;
            for (;;)
            {
                _3007 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                _3008 = _3007 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3008)
                {
                    frontier_phi_73_pred = _2997;
                    frontier_phi_73_pred_1 = _2996;
                    frontier_phi_73_pred_2 = _2995;
                    frontier_phi_73_pred_3 = _2994;
                    frontier_phi_73_pred_4 = _2993;
                    frontier_phi_73_pred_5 = _2992;
                }
                else
                {
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    uint _3143;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _3007;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    for (;;)
                    {
                        uint _3147 = uint(findLSB(_3143)) + (_2998 << 5u);
                        uint _3144 = (_3143 + 4294967295u) & _3143;
                        uint _3149 = _3147 * 48u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3169 = (_3147 * 48u) + 4u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3188 = (_3147 * 48u) + 8u;
                        vec3 _3199 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x));
                        float _3203 = _3163.x - _1820;
                        float _3204 = _3163.y - _1821;
                        float _3205 = _3163.z - _1822;
                        float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                        float _3209 = inversesqrt(_3206);
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3213 = dot(vec3(_648, _651, _654), vec3(_3210, _3211, _3212));
                        float _3218 = 1.0 - (_3206 * _3163.w);
                        float _4630 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3220 = sqrt(_3206) * _3182.w;
                        float _3223 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3213) + _3224;
                        float _3230 = _3220 * _3220;
                        float _3234 = ((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3219) / ((_3230 * 0.699999988079071044921875) + 1.0);
                        float _3238 = (-0.0) - _1820;
                        float _3239 = (-0.0) - _1821;
                        float _3240 = (-0.0) - _1822;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3254 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                        float _3255 = 1.0 - _723;
                        float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                        float _3263 = _3262 * _3262;
                        float _3264 = _3263 * _3263;
                        float _3265 = _3245 + _3210;
                        float _3266 = _3246 + _3211;
                        float _3267 = _3247 + _3212;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3275 = dot(vec3(_648, _651, _654), vec3(_3245, _3246, _3247));
                        float _4646 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3279 = dot(vec3(_648, _651, _654), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                        float _4657 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                        float _3287 = _3223 * _3263;
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3213) + _3288;
                        float _4668 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3293 = 1.0 - _3263;
                        float _3303 = (0.5 / (((_3292 * ((_3278 * _3293) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3263) * _3278))) * _3292;
                        float _4679 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3314 = (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3286 * _3286) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125))) * _3219;
                        _3067 = (_3234 * _3182.x) + _3140;
                        _3068 = (_3234 * _3182.y) + _3141;
                        _3069 = (_3234 * _3182.z) + _3142;
                        _3064 = (_3314 * _3199.x) + _3137;
                        _3065 = (_3314 * _3199.y) + _3138;
                        _3066 = (_3314 * _3199.z) + _3139;
                        if (_3144 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3144;
                        }
                    }
                    frontier_phi_73_pred = _3069;
                    frontier_phi_73_pred_1 = _3068;
                    frontier_phi_73_pred_2 = _3067;
                    frontier_phi_73_pred_3 = _3066;
                    frontier_phi_73_pred_4 = _3065;
                    frontier_phi_73_pred_5 = _3064;
                }
                _2851 = frontier_phi_73_pred;
                _2849 = frontier_phi_73_pred_1;
                _2847 = frontier_phi_73_pred_2;
                _2845 = frontier_phi_73_pred_3;
                _2843 = frontier_phi_73_pred_4;
                _2841 = frontier_phi_73_pred_5;
                uint _2999 = _2998 + 1u;
                if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2992 = _2841;
                    _2993 = _2843;
                    _2994 = _2845;
                    _2995 = _2847;
                    _2996 = _2849;
                    _2997 = _2851;
                    _2998 = _2999;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
        }
        uvec4 _2854 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2855 = _2854.z;
        uint _2857 = (_2855 >> 8u) & 15u;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((4294967295u << _2857) & _2761) == 0u)
        {
            _2960 = _2840;
            _2962 = _2842;
            _2964 = _2844;
            _2966 = _2846;
            _2968 = _2848;
            _2970 = _2850;
        }
        else
        {
            float _2985 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
            float _2986 = _2985 * _1820;
            float _2987 = _2985 * _1821;
            float _2988 = _2985 * _1822;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2857 < ((_2855 >> 12u) & 15u))
            {
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _3120 = _2840;
                float _3121 = _2842;
                float _3122 = _2844;
                float _3123 = _2846;
                float _3124 = _2848;
                float _3125 = _2850;
                uint _3126 = _2857;
                uint _3135;
                bool _3136;
                for (;;)
                {
                    _3135 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                    _3136 = _3135 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3136)
                    {
                        frontier_phi_84_pred = _3124;
                        frontier_phi_84_pred_1 = _3123;
                        frontier_phi_84_pred_2 = _3122;
                        frontier_phi_84_pred_3 = _3121;
                        frontier_phi_84_pred_4 = _3120;
                        frontier_phi_84_pred_5 = _3125;
                    }
                    else
                    {
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3341 = _3120;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        uint _3347 = _3135;
                        uint _3348;
                        vec4 _3373;
                        float _3374;
                        vec4 _3389;
                        vec3 _3401;
                        vec4 _3417;
                        vec4 _3433;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3358 = ((_3126 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3347));
                            _3348 = (_3347 + 4294967295u) & _3347;
                            uint _3360 = _3358 * 40u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            _3374 = _3373.w;
                            uint _3376 = (_3358 * 40u) + 4u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3358 * 40u) + 8u;
                            _3401 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x));
                            uint _3404 = (_3358 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3420 = (_3358 * 40u) + 20u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3436 = (_3358 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3358 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_1822, _3468.z, fma(_1821, _3468.y, _3468.x * _1820)) + _3468.w;
                            _3481 = !((fma(_1822, _3449.z, fma(_1821, _3449.y, _3449.x * _1820)) + _3449.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3373.x - _1820;
                                float _3509 = _3373.y - _1821;
                                float _3510 = _3373.z - _1822;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3374 * _3374));
                                float _4690 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3526 = sqrt(_3511) * _3389.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_648, _651, _654))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_1822, _3417.z, fma(_1821, _3417.y, _3417.x * _1820)) + _3417.w) / _3480;
                                float _3540 = (fma(_1822, _3433.z, fma(_1821, _3433.y, _3433.x * _1820)) + _3433.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4706 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _723;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _2986;
                                float _3570 = _3516 - _2987;
                                float _3571 = _3517 - _2988;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_648, _651, _654), vec3((-0.0) - _2986, (-0.0) - _2987, (-0.0) - _2988));
                                float _4717 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3583 = dot(vec3(_648, _651, _654), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4728 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_648, _651, _654), vec3(_3515, _3516, _3517))) + _3592;
                                float _4739 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4750 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3546 * _3389.y;
                                frontier_phi_90_pred_1 = _3546 * _3389.x;
                                frontier_phi_90_pred_2 = _3620 * _3401.z;
                                frontier_phi_90_pred_3 = _3620 * _3401.y;
                                frontier_phi_90_pred_4 = _3620 * _3401.x;
                                frontier_phi_90_pred_5 = _3546 * _3389.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3628 = frontier_phi_90_pred;
                            _3627 = frontier_phi_90_pred_1;
                            _3626 = frontier_phi_90_pred_2;
                            _3625 = frontier_phi_90_pred_3;
                            _3624 = frontier_phi_90_pred_4;
                            _3629 = frontier_phi_90_pred_5;
                            _3331 = _3627 + _3344;
                            _3332 = _3628 + _3345;
                            _3333 = _3629 + _3346;
                            _3328 = _3624 + _3341;
                            _3329 = _3625 + _3342;
                            _3330 = _3626 + _3343;
                            if (_3348 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3348;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3332;
                        frontier_phi_84_pred_1 = _3331;
                        frontier_phi_84_pred_2 = _3330;
                        frontier_phi_84_pred_3 = _3329;
                        frontier_phi_84_pred_4 = _3328;
                        frontier_phi_84_pred_5 = _3333;
                    }
                    _2969 = frontier_phi_84_pred;
                    _2967 = frontier_phi_84_pred_1;
                    _2965 = frontier_phi_84_pred_2;
                    _2963 = frontier_phi_84_pred_3;
                    _2961 = frontier_phi_84_pred_4;
                    _2971 = frontier_phi_84_pred_5;
                    uint _3127 = _3126 + 1u;
                    if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3120 = _2961;
                        _3121 = _2963;
                        _3122 = _2965;
                        _3123 = _2967;
                        _3124 = _2969;
                        _3125 = _2971;
                        _3126 = _3127;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2971;
                frontier_phi_65_66_ladder_1 = _2967;
                frontier_phi_65_66_ladder_2 = _2969;
                frontier_phi_65_66_ladder_3 = _2963;
                frontier_phi_65_66_ladder_4 = _2961;
                frontier_phi_65_66_ladder_5 = _2965;
            }
            else
            {
                frontier_phi_65_66_ladder = _2850;
                frontier_phi_65_66_ladder_1 = _2846;
                frontier_phi_65_66_ladder_2 = _2848;
                frontier_phi_65_66_ladder_3 = _2842;
                frontier_phi_65_66_ladder_4 = _2840;
                frontier_phi_65_66_ladder_5 = _2844;
            }
            _2960 = frontier_phi_65_66_ladder_4;
            _2962 = frontier_phi_65_66_ladder_3;
            _2964 = frontier_phi_65_66_ladder_5;
            _2966 = frontier_phi_65_66_ladder_1;
            _2968 = frontier_phi_65_66_ladder_2;
            _2970 = frontier_phi_65_66_ladder;
        }
        float _2975 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2773 = (_2975 * _2966) + _2286;
        _2775 = (_2975 * _2968) + _2288;
        _2777 = (_2975 * _2970) + _2290;
        _2779 = ((_2960 * _692) * _2975) + _2624;
        _2781 = ((_2962 * _694) * _2975) + _2626;
        _2783 = ((_2964 * _695) * _2975) + _2628;
    }
    else
    {
        _2773 = _2286;
        _2775 = _2288;
        _2777 = _2290;
        _2779 = _2624;
        _2781 = _2626;
        _2783 = _2628;
    }
    float _4766 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4777 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4788 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2800 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2773 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _707))) + ((_2779 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2775 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _707))) + ((_2781 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    float _2802 = ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2777 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _707))) + ((_2783 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    uint _2803 = _667 + 6u;
    float _2811 = _628 / cbSceneParam._m0[86u].x;
    float _2812 = _629 / cbSceneParam._m0[86u].y;
    vec4 _2826 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2828 = _2826.x;
    float _2829 = _2826.y;
    float _2830 = _2826.z;
    float _2831 = _2826.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2865 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2866 = _2865 / _551;
        float _2877 = _2866 * _601;
        float _2878 = _602 * _2866;
        float _2879 = (-0.0) - _2878;
        float _2880 = _2866 * _603;
        float _2882 = (cbSceneParam._m0[77u].w * _2879) / _2865;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2878;
        float _2890 = sqrt(((_2877 * _2877) + (_2878 * _2878)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2865)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3077;
        if (abs((_2879 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3077 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3021 = 1.0 / cbSceneParam._m0[80u].x;
            float _3022 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3023 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            _3077 = ((abs(_2890 / _2879) * cbSceneParam._m0[80u].y) * ((((_3032 - _3033) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))))) * _3021)) - ((exp2(_2900 * _3032) - exp2(_2900 * _3033)) * _3021))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3079 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, 1.0), 0.0);
        float _3088 = exp2((_3077 * (-1.44269502162933349609375)) * (1.0 - _3079.w));
        float _3089 = log2(_3088);
        float _3105 = log2(_2831);
        _2902 = (exp2(_3105 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].x)) * _3079.x) / cbSceneParam._m0[78u].x)) + _2828;
        _2904 = (exp2(_3105 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].y)) * _3079.y) / cbSceneParam._m0[78u].y)) + _2829;
        _2906 = (exp2(_3105 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].z)) * _3079.z) / cbSceneParam._m0[78u].z)) + _2830;
        _2908 = _3088 * _2831;
    }
    else
    {
        _2902 = _2828;
        _2904 = _2829;
        _2906 = _2830;
        _2908 = _2831;
    }
    bool _3115;
    vec4 _2918;
    vec4 _2940;
    float _2942;
    float _2946;
    float _2947;
    float _2948;
    float _2949;
    bool _2959;
    for (;;)
    {
        _2918 = cbMatDynParam._m0[0u];
        float _2920 = roundEven(_2918.y);
        bool _2921 = _2920 == 3.0;
        float _2922 = log2(_2908);
        float _2929 = exp2(_2922 * cbSceneParam._m0[78u].x) * _2800;
        float _2930 = exp2(_2922 * cbSceneParam._m0[78u].y) * _2801;
        float _2931 = exp2(_2922 * cbSceneParam._m0[78u].z) * _2802;
        float _2938 = _617 + (-0.5);
        _2940 = cbMtdParam._m0[1u];
        _2942 = _2940.y * _2938;
        float _2945 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2946 = _2945 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
        _2947 = _2945 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
        _2948 = _2945 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
        _2949 = _2938 * 0.999000012874603271484375;
        _2959 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2959)
        {
            if ((cbInstanceData._m0[_667 + 7u].x + _2949) < 0.5)
            {
                _3115 = true;
                break;
            }
        }
        uint _3056 = _668 + uint(_2918.w);
        if ((cbInstanceData._m0[_3056].w < 1.0) && ((cbInstanceData._m0[_3056].w + _2949) < 0.5))
        {
            _3115 = true;
            break;
        }
        if ((_2942 + 1.0) < _2940.x)
        {
            _3115 = true;
            break;
        }
        _3115 = false;
        break;
    }
    float _3319;
    if (_3115)
    {
        discard_state = true;
        _3319 = 0.0;
    }
    else
    {
        _3319 = cbInstanceData._m0[_2803].w;
    }
    SV_Target.x = _2946;
    SV_Target.y = _2947;
    SV_Target.z = _2948;
    SV_Target.w = _3319;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2803].w;
    discard_exit();
}


