#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1051;
float _3443;
float _3444;
float _3445;
float _3446;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3455 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3466 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))));
    float _323 = fma(_320, _232, fma(_314, _225, _312 * _211));
    float _326 = fma(_320, _233, fma(_314, _226, _312 * _212));
    float _329 = fma(_320, _234, fma(_314, _227, _312 * _213));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    float _347 = cbMtdParam._m0[11u].z + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3477 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _371 = _366.x * cbMtdParam._m0[9u].x;
    float _372 = _366.y * cbMtdParam._m0[9u].y;
    float _373 = _366.z * cbMtdParam._m0[9u].z;
    vec4 _392 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _406 = (((_392.x * cbMtdParam._m0[10u].x) - _371) * _299) + _371;
    float _407 = (((_392.y * cbMtdParam._m0[10u].y) - _372) * _299) + _372;
    float _408 = (((_392.z * cbMtdParam._m0[10u].z) - _373) * _299) + _373;
    vec4 _421 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _432 = ((_421.x - _406) * _348) + _406;
    float _433 = ((_421.y - _407) * _348) + _407;
    float _434 = ((_421.z - _408) * _348) + _408;
    vec4 _447 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _454 = (_447.x * 2.0) + (-1.0);
    float _455 = (_447.y * 2.0) + (-1.0);
    float _456 = dot(vec2(_454, _455), vec2(_454, _455));
    float _3488 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _464 = ((_447.z - _308) * _348) + _308;
    float _471 = ((_454 - _312) * _348) + _312;
    float _472 = ((_455 - _314) * _348) + _314;
    float _473 = ((sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) - _320) * _348) + _320;
    float _476 = fma(_473, _232, fma(_472, _225, _471 * _211));
    float _479 = fma(_473, _233, fma(_472, _226, _471 * _212));
    float _482 = fma(_473, _234, fma(_472, _227, _471 * _213));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _489 = _486 * _482;
    float _3499 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _490 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3521 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3532 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _509 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _559 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _549);
    float _560 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _549);
    float _561 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _549);
    float _565 = inversesqrt(dot(vec3(_559, _560, _561), vec3(_559, _560, _561)));
    float _566 = _559 * _565;
    float _567 = _560 * _565;
    float _568 = _561 * _565;
    vec4 _573 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _575 = _573.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _731 = sqrt(((_559 * _559) + (_560 * _560)) + (_561 * _561));
        float _737 = (cbMatDynParam._m0[5u].x * _731) + cbMatDynParam._m0[5u].y;
        float _3543 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _742 = (cbMatDynParam._m0[5u].z * _731) + cbMatDynParam._m0[5u].w;
        float _3554 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) - _738)) + _738) < ((_575 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _607 = fma(_489, cbSceneParam._m0[5u].z, fma(_488, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _487));
    float _610 = fma(_489, cbSceneParam._m0[6u].z, fma(_488, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _487));
    float _613 = fma(_489, cbSceneParam._m0[7u].z, fma(_488, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _487));
    uint _626 = uint(roundEven(NORMAL.w)) * 13u;
    uint _627 = _626 + 9u;
    uint _628 = _627 + uint(cbMatDynParam._m0[0u].w);
    float _634 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_628].x;
    float _635 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_628].y;
    float _636 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_628].z;
    float _3565 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    vec4 _648 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _651 = _648.x * TEXCOORD_9.w;
    float _652 = dot(vec3(_487, _488, _489), vec3(_566, _567, _568));
    float _655 = _652 * 2.0;
    float _659 = (_655 * _487) - _566;
    float _660 = (_655 * _488) - _567;
    float _661 = (_655 * _489) - _568;
    float _665 = abs(dot(vec3(_566, _567, _568), vec3(_487, _488, _489)));
    float _3598 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _667 = sqrt(_490);
    float _680 = exp2((_667 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_667 * 3.0));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_720, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712));
        float _779 = fma(_720, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712));
        float _783 = fma(_720, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712));
        float _808 = _712 + _487;
        float _809 = _716 + _488;
        float _810 = _720 + _489;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _775;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _779;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _783;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_487, _488, _489), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3646 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_487, _488, _489), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3679 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_487, _488, _489), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3712 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_720, cbModelParam._m0[30u].z, fma(_716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _712));
        float _1098 = fma(_720, cbModelParam._m0[31u].z, fma(_716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _712));
        float _1102 = fma(_720, cbModelParam._m0[32u].z, fma(_716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _712));
        float _1125 = _712 + _487;
        float _1126 = _716 + _488;
        float _1127 = _720 + _489;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_487, _488, _489), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3775 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_487, _488, _489), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3808 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_487, _488, _489), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3841 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1051;
        _1364 = _1051;
        _1365 = _1051;
        _1366 = _1051;
        _1367 = _1051;
        _1368 = _1051;
        _1369 = _1051;
        _1370 = _1051;
        _1371 = _1051;
        _1372 = _1051;
        _1373 = _1051;
        _1374 = _1051;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1064)) + _1064;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1065)) + _1065;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _659 * 0.5;
    float _1432 = _660 * 0.5;
    float _1433 = _661 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _490);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1549 = fma(_720, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712)) + cbModelParam._m0[13u].w;
        float _1553 = fma(_720, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712)) + cbModelParam._m0[14u].w;
        float _1557 = fma(_720, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712)) + cbModelParam._m0[15u].w;
        float _1560 = fma(_661, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _659));
        float _1563 = fma(_661, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _659));
        float _1566 = fma(_661, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _659));
        float _1594;
        if (_1560 > 0.0)
        {
            _1594 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1594 = frontier_phi_19_17_ladder;
        }
        float _1819;
        if (_1563 > 0.0)
        {
            _1819 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1819 = frontier_phi_28_24_ladder;
        }
        float _2065;
        if (_1566 > 0.0)
        {
            _2065 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2065 = frontier_phi_40_35_ladder;
        }
        float _2067 = isnan(_1819) ? _1594 : (isnan(_1594) ? _1819 : min(_1594, _1819));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1560) + _1549;
        float _2073 = (_2068 * _1563) + _1553;
        float _2074 = (_2068 * _1566) + _1557;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_18_40_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1582 = frontier_phi_18_40_ladder_2;
        _1584 = frontier_phi_18_40_ladder_1;
        _1586 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_659, _660, _661), _1500);
        _1582 = _1570.x * cbModelParam._m0[1u].y;
        _1584 = _1570.y * cbModelParam._m0[1u].y;
        _1586 = _1570.z * cbModelParam._m0[1u].y;
    }
    float _1590 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _490);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1590 : min(cbModelParam._m0[25u].w, _1590));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1648 = fma(_720, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712)) + cbModelParam._m0[21u].w;
        float _1652 = fma(_720, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712)) + cbModelParam._m0[22u].w;
        float _1656 = fma(_720, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712)) + cbModelParam._m0[23u].w;
        float _1659 = fma(_661, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _659));
        float _1662 = fma(_661, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _659));
        float _1665 = fma(_661, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _659));
        float _1824;
        if (_1659 > 0.0)
        {
            _1824 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1824 = frontier_phi_30_26_ladder;
        }
        float _2092;
        if (_1662 > 0.0)
        {
            _2092 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2092 = frontier_phi_42_37_ladder;
        }
        float _2297;
        if (_1665 > 0.0)
        {
            _2297 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2297 = frontier_phi_51_48_ladder;
        }
        float _2299 = isnan(_2092) ? _1824 : (isnan(_1824) ? _2092 : min(_1824, _2092));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1659) + _1648;
        float _2305 = (_2300 * _1662) + _1652;
        float _2306 = (_2300 * _1665) + _1656;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2306, cbModelParam._m0[17u].z, fma(_2305, cbModelParam._m0[17u].y, _2304 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2306, cbModelParam._m0[18u].z, fma(_2305, cbModelParam._m0[18u].y, _2304 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2306, cbModelParam._m0[19u].z, fma(_2305, cbModelParam._m0[19u].y, _2304 * cbModelParam._m0[19u].x))), _1591);
            frontier_phi_27_51_ladder = _2504.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2504.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2504.x * cbModelParam._m0[1u].z;
        }
        _1684 = frontier_phi_27_51_ladder_2;
        _1686 = frontier_phi_27_51_ladder_1;
        _1688 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_659, _660, _661), _1591);
        _1684 = _1668.x * cbModelParam._m0[1u].z;
        _1686 = _1668.y * cbModelParam._m0[1u].z;
        _1688 = _1668.z * cbModelParam._m0[1u].z;
    }
    float _1700 = ((((1.0 - _680) * ((_667 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_680 * _667)) * _651;
    float _1701 = _1700 * ((cbModelParam._m0[1u].w * (_1684 - _1582)) + _1582);
    float _1702 = _1700 * ((cbModelParam._m0[1u].w * (_1686 - _1584)) + _1584);
    float _1703 = _1700 * ((cbModelParam._m0[1u].w * (_1688 - _1586)) + _1586);
    float _1706 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, _1701 * cbSceneParam._m0[91u].x));
    vec4 _1720 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_587, _588));
    float _1722 = _1720.w;
    float _1734 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1722);
    float _1735 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1722);
    float _1736 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1722);
    uvec4 _1740 = floatBitsToUint(cbInstanceData._m0[_626 + 5u]);
    uint _1742 = _1740.x * 14u;
    uint _1743 = _1742 + 13u;
    float _1750 = _651 + (-1.0);
    float _1755 = (cbLight._m0[_1743].x * _1750) + 1.0;
    float _1756 = (cbLight._m0[_1743].y * _1750) + 1.0;
    float _1757 = (cbLight._m0[_1743].z * _1750) + 1.0;
    float _1758 = (cbLight._m0[_1743].w * _1750) + 1.0;
    uint _1759 = _1742 + 5u;
    float _1765 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1769 = _1742 + 4u;
    float _1778 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
    uint _1782 = _1742 | 1u;
    float _1793 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_487, _488, _489));
    float _1796 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_487, _488, _489));
    float _3977 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _3988 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1801 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1803 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1810 = ((cbLight._m0[_1759].x * _1765) * _1803) + (((cbLight._m0[_1769].x * _1734) * _1778) * _1801);
    float _1811 = ((_1765 * cbLight._m0[_1759].y) * _1803) + (((cbLight._m0[_1769].y * _1735) * _1778) * _1801);
    float _1812 = ((_1765 * cbLight._m0[_1759].z) * _1803) + (((cbLight._m0[_1769].z * _1736) * _1778) * _1801);
    uvec4 _1816 = floatBitsToUint(cbLight._m0[_1742 + 12u]);
    bool _1818 = _1816.x == 0u;
    float _1829;
    float _1831;
    float _1833;
    if (_1818)
    {
        _1829 = _1810;
        _1831 = _1811;
        _1833 = _1812;
    }
    else
    {
        uint _1837 = _1742 + 6u;
        float _1853 = (dot(vec3(cbLight._m0[_1742 + 2u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _1854 = _1853 * _1853;
        float _3999 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1856 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _1829 = (((cbLight._m0[_1837].x * 0.3183098733425140380859375) * _1855) * _1856) + _1810;
        _1831 = (((cbLight._m0[_1837].y * 0.3183098733425140380859375) * _1855) * _1856) + _1811;
        _1833 = (((cbLight._m0[_1837].z * 0.3183098733425140380859375) * _1855) * _1856) + _1812;
    }
    bool _1836 = _1816.y == 0u;
    float _1874;
    float _1876;
    float _1878;
    if (_1836)
    {
        _1874 = _1829;
        _1876 = _1831;
        _1878 = _1833;
    }
    else
    {
        uint _2036 = _1742 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1742 + 3u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _4015 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2055 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _1874 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1829;
        _1876 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1831;
        _1878 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1833;
    }
    uint _1881 = _1742 + 8u;
    float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1742].w)) * _490) * 0.949999988079071044921875);
    float _1895 = _1894 * _1894;
    float _1896 = cbLight._m0[_1742].x + _566;
    float _1897 = cbLight._m0[_1742].y + _567;
    float _1898 = cbLight._m0[_1742].z + _568;
    float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
    float _1903 = _1902 * _1896;
    float _1904 = _1902 * _1897;
    float _1905 = _1902 * _1898;
    float _1906 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1742].xyz));
    float _4031 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _1910 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1911 = dot(vec3(_487, _488, _489), vec3(_1903, _1904, _1905));
    float _4053 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1903, _1904, _1905));
    float _4064 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1895 * _1895;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1934 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1935 = 1.0 - _1895;
    float _1946 = (0.5 / (((_1910 * ((_1909 * _1935) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _1935) + _1895) * _1909))) * _1909;
    float _4075 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    uint _1962 = _1742 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _490) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1782].x + _566;
    float _1976 = cbLight._m0[_1782].y + _567;
    float _1977 = cbLight._m0[_1782].z + _568;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1782].xyz));
    float _4086 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1989 = dot(vec3(_487, _488, _489), vec3(_1982, _1983, _1984));
    float _4097 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1982, _1983, _1984));
    float _4108 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1974;
    float _2021 = (0.5 / (((_1910 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2011) + _1974) * _1988))) * _1988;
    float _4119 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2033 = (((_2010 * cbLight._m0[_1962].x) * _2023) * _1765) + ((((cbLight._m0[_1881].x * _1734) * _1934) * _1948) * _1778);
    float _2034 = (((_2010 * cbLight._m0[_1962].y) * _2023) * _1765) + ((((cbLight._m0[_1881].y * _1735) * _1934) * _1948) * _1778);
    float _2035 = (((_2010 * cbLight._m0[_1962].z) * _2023) * _1765) + ((((cbLight._m0[_1881].z * _1736) * _1934) * _1948) * _1778);
    float _2097;
    float _2099;
    float _2101;
    if (_1818)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1742 + 2u;
        uint _2107 = _1742 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _490) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _566;
        float _2124 = cbLight._m0[_2103].y + _567;
        float _2125 = cbLight._m0[_2103].z + _568;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2103].xyz));
        float _4130 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2137 = dot(vec3(_487, _488, _489), vec3(_2130, _2131, _2132));
        float _4141 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4152 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2159 = 1.0 - _2122;
        float _2169 = (0.5 / (((_1910 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2159) + _2122) * _2136))) * _2136;
        float _4163 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2171 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2172 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _2097 = (((_2158 * cbLight._m0[_2107].x) * _2171) * _2172) + _2033;
        _2099 = (((_2158 * cbLight._m0[_2107].y) * _2171) * _2172) + _2034;
        _2101 = (((_2158 * cbLight._m0[_2107].z) * _2171) * _2172) + _2035;
    }
    float _2207;
    float _2209;
    float _2211;
    if (_1836)
    {
        _2207 = _2097;
        _2209 = _2099;
        _2211 = _2101;
    }
    else
    {
        uint _2218 = _1742 + 3u;
        uint _2222 = _1742 + 11u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _490) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _566;
        float _2239 = cbLight._m0[_2218].y + _567;
        float _2240 = cbLight._m0[_2218].z + _568;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2218].xyz));
        float _4179 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2252 = dot(vec3(_487, _488, _489), vec3(_2245, _2246, _2247));
        float _4190 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4201 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2274 = 1.0 - _2237;
        float _2284 = (0.5 / (((_1910 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2274) + _2237) * _2251))) * _2251;
        float _4212 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _2207 = (((_2273 * cbLight._m0[_2222].x) * _2286) * _2287) + _2097;
        _2209 = (((_2273 * cbLight._m0[_2222].y) * _2286) * _2287) + _2099;
        _2211 = (((_2273 * cbLight._m0[_2222].z) * _2286) * _2287) + _2101;
    }
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_1740.y == 0u)
    {
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2362;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2362;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2362;
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.x;
        uint _2389 = uint((float(_2377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2378))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2378)));
        float _2399 = (log2(_2365 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2400 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        uint _2403 = uint(isnan(14.0) ? _2400 : (isnan(_2400) ? 14.0 : min(_2400, 14.0)));
        uvec4 _2408 = texelFetch(g_lightClusterGridBuffer, int(((_2403 << 2u) + (_2389 << 6u)) >> 2u));
        uint _2409 = _2408.x;
        uint _2410 = _2377.z;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((((1u << ((_2410 >> 4u) & 15u)) + 4294967295u) & _2409) == 0u) || ((_2410 & 240u) == 0u))
        {
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
        }
        else
        {
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            uint _2667 = 0u;
            uint _2676;
            bool _2677;
            for (;;)
            {
                _2676 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                _2677 = _2676 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2677)
                {
                    frontier_phi_68_pred = _2663;
                    frontier_phi_68_pred_1 = _2666;
                    frontier_phi_68_pred_2 = _2665;
                    frontier_phi_68_pred_3 = _2664;
                    frontier_phi_68_pred_4 = _2662;
                    frontier_phi_68_pred_5 = _2661;
                }
                else
                {
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    uint _2812;
                    _2806 = _2661;
                    _2807 = _2662;
                    _2808 = _2663;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2676;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    for (;;)
                    {
                        uint _2816 = uint(findLSB(_2812)) + (_2667 << 5u);
                        uint _2813 = (_2812 + 4294967295u) & _2812;
                        uint _2818 = _2816 * 48u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2838 = (_2816 * 48u) + 4u;
                        vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 3u)).x));
                        uint _2857 = (_2816 * 48u) + 8u;
                        vec3 _2868 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x));
                        float _2872 = _2832.x - _2363;
                        float _2873 = _2832.y - _2364;
                        float _2874 = _2832.z - _2365;
                        float _2875 = dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874));
                        float _2878 = inversesqrt(_2875);
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2882 = dot(vec3(_607, _610, _613), vec3(_2879, _2880, _2881));
                        float _2887 = 1.0 - (_2875 * _2832.w);
                        float _4238 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2889 = sqrt(_2875) * _2851.w;
                        float _2892 = 1.39999997615814208984375 / (_2889 + 1.39999997615814208984375);
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2882) + _2893;
                        float _2899 = _2889 * _2889;
                        float _2903 = ((isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))) * _2888) / ((_2899 * 0.699999988079071044921875) + 1.0);
                        float _2907 = (-0.0) - _2363;
                        float _2908 = (-0.0) - _2364;
                        float _2909 = (-0.0) - _2365;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2924 = exp2(log2(1.0 / ((_2899 * 3.5) + 5.0)) * 0.25);
                        float _2925 = 1.0 - _667;
                        float _2932 = sqrt(1.0 - ((1.0 - (_2925 * _2925)) * (1.0 - (_2924 * _2924))));
                        float _2933 = _2932 * _2932;
                        float _2934 = _2933 * _2933;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2945 = dot(vec3(_607, _610, _613), vec3(_2914, _2915, _2916));
                        float _4254 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2948 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2949 = dot(vec3(_607, _610, _613), vec3(_2941 * _2935, _2941 * _2936, _2941 * _2937));
                        float _4265 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2952 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2956 = ((_2952 * _2952) * (_2934 + (-1.0))) + 1.0;
                        float _2957 = _2892 * _2933;
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2882) + _2958;
                        float _4276 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2962 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2963 = 1.0 - _2933;
                        float _2973 = (0.5 / (((_2962 * ((_2948 * _2963) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2962 * _2963) + _2933) * _2948))) * _2962;
                        float _4287 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2984 = (((_2934 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_2956 * _2956) * ((_2899 * 2.1991131305694580078125) + 3.141590118408203125))) * _2888;
                        _2736 = (_2903 * _2851.x) + _2809;
                        _2737 = (_2903 * _2851.y) + _2810;
                        _2738 = (_2903 * _2851.z) + _2811;
                        _2733 = (_2984 * _2868.x) + _2806;
                        _2734 = (_2984 * _2868.y) + _2807;
                        _2735 = (_2984 * _2868.z) + _2808;
                        if (_2813 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2813;
                        }
                    }
                    frontier_phi_68_pred = _2735;
                    frontier_phi_68_pred_1 = _2738;
                    frontier_phi_68_pred_2 = _2737;
                    frontier_phi_68_pred_3 = _2736;
                    frontier_phi_68_pred_4 = _2734;
                    frontier_phi_68_pred_5 = _2733;
                }
                _2514 = frontier_phi_68_pred;
                _2520 = frontier_phi_68_pred_1;
                _2518 = frontier_phi_68_pred_2;
                _2516 = frontier_phi_68_pred_3;
                _2512 = frontier_phi_68_pred_4;
                _2510 = frontier_phi_68_pred_5;
                uint _2668 = _2667 + 1u;
                if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2661 = _2510;
                    _2662 = _2512;
                    _2663 = _2514;
                    _2664 = _2516;
                    _2665 = _2518;
                    _2666 = _2520;
                    _2667 = _2668;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
        }
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.z;
        uint _2526 = (_2524 >> 8u) & 15u;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((4294967295u << _2526) & _2409) == 0u)
        {
            _2629 = _2509;
            _2631 = _2511;
            _2633 = _2513;
            _2635 = _2515;
            _2637 = _2517;
            _2639 = _2519;
        }
        else
        {
            float _2654 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
            float _2655 = _2654 * _2363;
            float _2656 = _2654 * _2364;
            float _2657 = _2654 * _2365;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2526 < ((_2524 >> 12u) & 15u))
            {
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2789 = _2509;
                float _2790 = _2511;
                float _2791 = _2513;
                float _2792 = _2515;
                float _2793 = _2517;
                float _2794 = _2519;
                uint _2795 = _2526;
                uint _2804;
                bool _2805;
                for (;;)
                {
                    _2804 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                    _2805 = _2804 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2805)
                    {
                        frontier_phi_79_pred = _2794;
                        frontier_phi_79_pred_1 = _2793;
                        frontier_phi_79_pred_2 = _2792;
                        frontier_phi_79_pred_3 = _2791;
                        frontier_phi_79_pred_4 = _2790;
                        frontier_phi_79_pred_5 = _2789;
                    }
                    else
                    {
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3011 = _2789;
                        float _3012 = _2790;
                        float _3013 = _2791;
                        float _3014 = _2792;
                        float _3015 = _2793;
                        float _3016 = _2794;
                        uint _3017 = _2804;
                        uint _3018;
                        vec4 _3043;
                        float _3044;
                        vec4 _3059;
                        vec3 _3071;
                        vec4 _3087;
                        vec4 _3103;
                        float _3150;
                        bool _3151;
                        for (;;)
                        {
                            uint _3028 = ((_2795 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3017));
                            _3018 = (_3017 + 4294967295u) & _3017;
                            uint _3030 = _3028 * 40u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            _3044 = _3043.w;
                            uint _3046 = (_3028 * 40u) + 4u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3061 = (_3028 * 40u) + 8u;
                            _3071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x));
                            uint _3074 = (_3028 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3028 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3106 = (_3028 * 40u) + 24u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3125 = (_3028 * 40u) + 28u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3150 = fma(_2365, _3138.z, fma(_2364, _3138.y, _3138.x * _2363)) + _3138.w;
                            _3151 = !((fma(_2365, _3119.z, fma(_2364, _3119.y, _3119.x * _2363)) + _3119.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3151)
                            {
                                float _3178 = _3043.x - _2363;
                                float _3179 = _3043.y - _2364;
                                float _3180 = _3043.z - _2365;
                                float _3181 = dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180));
                                float _3184 = inversesqrt(_3181);
                                float _3185 = _3184 * _3178;
                                float _3186 = _3184 * _3179;
                                float _3187 = _3184 * _3180;
                                float _3191 = 1.0 - (_3181 / (_3044 * _3044));
                                float _4298 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3196 = sqrt(_3181) * _3059.w;
                                float _3198 = 1.39999997615814208984375 / (_3196 + 1.39999997615814208984375);
                                float _3199 = _3198 * _3198;
                                float _3202 = ((1.0 - _3199) * dot(vec3(_3185, _3186, _3187), vec3(_607, _610, _613))) + _3199;
                                float _3205 = _3196 * _3196;
                                float _3209 = (fma(_2365, _3087.z, fma(_2364, _3087.y, _3087.x * _2363)) + _3087.w) / _3150;
                                float _3210 = (fma(_2365, _3103.z, fma(_2364, _3103.y, _3103.x * _2363)) + _3103.w) / _3150;
                                float _3214 = 1.0 - dot(vec2(_3209, _3210), vec2(_3209, _3210));
                                float _4314 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3216 = _3215 * (((isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))) * _3192) / ((_3205 * 0.699999988079071044921875) + 1.0));
                                float _3228 = exp2(log2(1.0 / ((_3205 * 3.5) + 5.0)) * 0.25);
                                float _3229 = 1.0 - _667;
                                float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                                float _3237 = _3236 * _3236;
                                float _3238 = _3237 * _3237;
                                float _3239 = _3185 - _2655;
                                float _3240 = _3186 - _2656;
                                float _3241 = _3187 - _2657;
                                float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                                float _3249 = dot(vec3(_607, _610, _613), vec3((-0.0) - _2655, (-0.0) - _2656, (-0.0) - _2657));
                                float _4325 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3253 = dot(vec3(_607, _610, _613), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                                float _4336 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                                float _3261 = _3198 * _3237;
                                float _3262 = _3261 * _3261;
                                float _3268 = ((1.0 - _3262) * dot(vec3(_607, _610, _613), vec3(_3185, _3186, _3187))) + _3262;
                                float _4347 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3270 = 1.0 - _3237;
                                float _3280 = (0.5 / (((_3269 * ((_3252 * _3270) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3269 * _3270) + _3237) * _3252))) * _3269;
                                float _4358 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3290 = (_3215 * _3192) * (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3260 * _3260) * ((_3205 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3216 * _3059.z;
                                frontier_phi_85_pred_1 = _3216 * _3059.y;
                                frontier_phi_85_pred_2 = _3216 * _3059.x;
                                frontier_phi_85_pred_3 = _3290 * _3071.z;
                                frontier_phi_85_pred_4 = _3290 * _3071.y;
                                frontier_phi_85_pred_5 = _3290 * _3071.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3299 = frontier_phi_85_pred;
                            _3298 = frontier_phi_85_pred_1;
                            _3297 = frontier_phi_85_pred_2;
                            _3296 = frontier_phi_85_pred_3;
                            _3295 = frontier_phi_85_pred_4;
                            _3294 = frontier_phi_85_pred_5;
                            _3001 = _3297 + _3014;
                            _3002 = _3298 + _3015;
                            _3003 = _3299 + _3016;
                            _2998 = _3294 + _3011;
                            _2999 = _3295 + _3012;
                            _3000 = _3296 + _3013;
                            if (_3018 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3018;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3003;
                        frontier_phi_79_pred_1 = _3002;
                        frontier_phi_79_pred_2 = _3001;
                        frontier_phi_79_pred_3 = _3000;
                        frontier_phi_79_pred_4 = _2999;
                        frontier_phi_79_pred_5 = _2998;
                    }
                    _2640 = frontier_phi_79_pred;
                    _2638 = frontier_phi_79_pred_1;
                    _2636 = frontier_phi_79_pred_2;
                    _2634 = frontier_phi_79_pred_3;
                    _2632 = frontier_phi_79_pred_4;
                    _2630 = frontier_phi_79_pred_5;
                    uint _2796 = _2795 + 1u;
                    if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2789 = _2630;
                        _2790 = _2632;
                        _2791 = _2634;
                        _2792 = _2636;
                        _2793 = _2638;
                        _2794 = _2640;
                        _2795 = _2796;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2636;
                frontier_phi_60_61_ladder_1 = _2640;
                frontier_phi_60_61_ladder_2 = _2638;
                frontier_phi_60_61_ladder_3 = _2634;
                frontier_phi_60_61_ladder_4 = _2632;
                frontier_phi_60_61_ladder_5 = _2630;
            }
            else
            {
                frontier_phi_60_61_ladder = _2515;
                frontier_phi_60_61_ladder_1 = _2519;
                frontier_phi_60_61_ladder_2 = _2517;
                frontier_phi_60_61_ladder_3 = _2513;
                frontier_phi_60_61_ladder_4 = _2511;
                frontier_phi_60_61_ladder_5 = _2509;
            }
            _2629 = frontier_phi_60_61_ladder_5;
            _2631 = frontier_phi_60_61_ladder_4;
            _2633 = frontier_phi_60_61_ladder_3;
            _2635 = frontier_phi_60_61_ladder;
            _2637 = frontier_phi_60_61_ladder_2;
            _2639 = frontier_phi_60_61_ladder_1;
        }
        float _2644 = isnan(1.0) ? _651 : (isnan(_651) ? 1.0 : min(_651, 1.0));
        _2421 = (_2644 * _2635) + _1874;
        _2423 = (_2644 * _2637) + _1876;
        _2425 = (_2644 * _2639) + _1878;
        _2427 = ((_2629 * 0.039999999105930328369140625) * _2644) + _2207;
        _2429 = ((_2631 * 0.039999999105930328369140625) * _2644) + _2209;
        _2431 = ((_2633 * 0.039999999105930328369140625) * _2644) + _2211;
    }
    else
    {
        _2421 = _1874;
        _2423 = _1876;
        _2425 = _1878;
        _2427 = _2207;
        _2429 = _2209;
        _2431 = _2211;
    }
    float _4374 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4385 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4396 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _2448 = ((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2421 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _651))) + ((_2427 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2449 = ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2423 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _651))) + ((_2429 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2450 = ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2425 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _651))) + ((_2431 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    uint _2451 = _626 + 6u;
    float _2459 = _587 / cbSceneParam._m0[86u].x;
    float _2460 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2474 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, (log2((isnan(cbSceneParam._m0[77u].w) ? _509 : (isnan(_509) ? cbSceneParam._m0[77u].w : min(_509, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2476 = _2474.x;
    float _2477 = _2474.y;
    float _2478 = _2474.z;
    float _2479 = _2474.w;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    if (_509 > cbSceneParam._m0[78u].w)
    {
        float _2534 = isnan(_509) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _509 : min(cbSceneParam._m0[80u].w, _509));
        float _2535 = _2534 / _509;
        float _2546 = _2535 * _559;
        float _2547 = _560 * _2535;
        float _2548 = (-0.0) - _2547;
        float _2549 = _2535 * _561;
        float _2551 = (cbSceneParam._m0[77u].w * _2548) / _2534;
        float _2552 = _2551 + cbSceneParam._m0[79u].w;
        float _2553 = cbSceneParam._m0[79u].w - _2547;
        float _2559 = sqrt(((_2546 * _2546) + (_2547 * _2547)) + (_2549 * _2549));
        float _2562 = (1.0 - (cbSceneParam._m0[77u].w / _2534)) * _2559;
        float _2567 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2569 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2746;
        if (abs((_2548 - _2551) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2746 = ((((_2552 > 0.0) ? exp2(_2567 * _2552) : (2.0 - exp2(_2569 * _2552))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2562;
        }
        else
        {
            float _2690 = 1.0 / cbSceneParam._m0[80u].x;
            float _2691 = isnan(_2553) ? _2552 : (isnan(_2552) ? _2553 : max(_2552, _2553));
            float _2692 = isnan(_2553) ? _2552 : (isnan(_2552) ? _2553 : min(_2552, _2553));
            float _2701 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : min(_2691, 0.0));
            float _2702 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : min(_2692, 0.0));
            _2746 = ((abs(_2559 / _2548) * cbSceneParam._m0[80u].y) * ((((_2701 - _2702) * 2.0) - ((exp2(_2567 * (isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0)))) - exp2(_2567 * (isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0))))) * _2690)) - ((exp2(_2569 * _2701) - exp2(_2569 * _2702)) * _2690))) + (_2562 * cbSceneParam._m0[80u].z);
        }
        vec4 _2748 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, 1.0), 0.0);
        float _2757 = exp2((_2746 * (-1.44269502162933349609375)) * (1.0 - _2748.w));
        float _2758 = log2(_2757);
        float _2774 = log2(_2479);
        _2571 = (exp2(_2774 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].x)) * _2748.x) / cbSceneParam._m0[78u].x)) + _2476;
        _2573 = (exp2(_2774 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].y)) * _2748.y) / cbSceneParam._m0[78u].y)) + _2477;
        _2575 = (exp2(_2774 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].z)) * _2748.z) / cbSceneParam._m0[78u].z)) + _2478;
        _2577 = _2757 * _2479;
    }
    else
    {
        _2571 = _2476;
        _2573 = _2477;
        _2575 = _2478;
        _2577 = _2479;
    }
    bool _2784;
    vec4 _2587;
    vec4 _2609;
    float _2611;
    float _2615;
    float _2616;
    float _2617;
    float _2618;
    bool _2628;
    for (;;)
    {
        _2587 = cbMatDynParam._m0[0u];
        float _2589 = roundEven(_2587.y);
        bool _2590 = _2589 == 3.0;
        float _2591 = log2(_2577);
        float _2598 = exp2(_2591 * cbSceneParam._m0[78u].x) * _2448;
        float _2599 = exp2(_2591 * cbSceneParam._m0[78u].y) * _2449;
        float _2600 = exp2(_2591 * cbSceneParam._m0[78u].z) * _2450;
        float _2607 = _575 + (-0.5);
        _2609 = cbMtdParam._m0[1u];
        _2611 = _2609.y * _2607;
        float _2614 = (_2589 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2615 = _2614 * (_2590 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2571)));
        _2616 = _2614 * (_2590 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2573)));
        _2617 = _2614 * (_2590 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2575)));
        _2618 = _2607 * 0.999000012874603271484375;
        _2628 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2628)
        {
            if ((cbInstanceData._m0[_626 + 7u].x + _2618) < 0.5)
            {
                _2784 = true;
                break;
            }
        }
        uint _2725 = _627 + uint(_2587.w);
        if ((cbInstanceData._m0[_2725].w < 1.0) && ((cbInstanceData._m0[_2725].w + _2618) < 0.5))
        {
            _2784 = true;
            break;
        }
        if ((_2611 + 1.0) < _2609.x)
        {
            _2784 = true;
            break;
        }
        _2784 = false;
        break;
    }
    float _2989;
    if (_2784)
    {
        discard_state = true;
        _2989 = 0.0;
    }
    else
    {
        _2989 = cbInstanceData._m0[_2451].w;
    }
    SV_Target.x = _2615;
    SV_Target.y = _2616;
    SV_Target.z = _2617;
    SV_Target.w = _2989;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2451].w;
    discard_exit();
}


