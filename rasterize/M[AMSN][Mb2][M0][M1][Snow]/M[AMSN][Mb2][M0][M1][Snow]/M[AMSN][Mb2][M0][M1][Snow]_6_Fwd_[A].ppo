#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1008;
float _3398;
float _3399;
float _3400;
float _3401;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3410 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3421 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))));
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _341 = _336.x * cbMtdParam._m0[9u].x;
    float _342 = _336.y * cbMtdParam._m0[9u].y;
    float _343 = _336.z * cbMtdParam._m0[9u].z;
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _376 = (((_362.x * cbMtdParam._m0[10u].x) - _341) * _297) + _341;
    float _377 = (((_362.y * cbMtdParam._m0[10u].y) - _342) * _297) + _342;
    float _378 = (((_362.z * cbMtdParam._m0[10u].z) - _343) * _297) + _343;
    vec4 _391 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _393 = _391.x;
    float _411 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _393) * _297) + _393;
    float _414 = fma(_318, _230, fma(_312, _222 * TANGENT.x, (_208 * _200) * _310));
    float _417 = fma(_318, _231, fma(_312, _222 * TANGENT.y, (_208 * _201) * _310));
    float _420 = fma(_318, _232, fma(_312, _222 * TANGENT.z, (_208 * _202) * _310));
    float _424 = inversesqrt(dot(vec3(_414, _417, _420), vec3(_414, _417, _420)));
    float _425 = _424 * _414;
    float _426 = _424 * _417;
    float _427 = _424 * _420;
    float _3432 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _428 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3454 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3465 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3476 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _432 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _448 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _499 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _489);
    float _500 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _489);
    float _501 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _489);
    float _505 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
    float _506 = _499 * _505;
    float _507 = _500 * _505;
    float _508 = _501 * _505;
    vec4 _513 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _515 = _513.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _688 = sqrt(((_499 * _499) + (_500 * _500)) + (_501 * _501));
        float _694 = (cbMatDynParam._m0[5u].x * _688) + cbMatDynParam._m0[5u].y;
        float _3487 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _699 = (cbMatDynParam._m0[5u].z * _688) + cbMatDynParam._m0[5u].w;
        float _3498 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) - _695)) + _695) < ((_515 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _526 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _527 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _546 = fma(_427, cbSceneParam._m0[5u].z, fma(_426, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _425));
    float _549 = fma(_427, cbSceneParam._m0[6u].z, fma(_426, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _425));
    float _552 = fma(_427, cbSceneParam._m0[7u].z, fma(_426, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _425));
    uint _565 = uint(roundEven(NORMAL.w)) * 13u;
    uint _566 = _565 + 9u;
    uint _567 = _566 + uint(cbMatDynParam._m0[0u].w);
    float _573 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_567].x;
    float _574 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_567].y;
    float _575 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_567].z;
    float _3509 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _579 = 1.0 - _432;
    float _580 = _576 * _579;
    float _581 = _577 * _579;
    float _582 = _578 * _579;
    float _587 = (_576 + (-0.039999999105930328369140625)) * _432;
    float _588 = (_577 + (-0.039999999105930328369140625)) * _432;
    float _589 = (_578 + (-0.039999999105930328369140625)) * _432;
    float _590 = _587 + 0.039999999105930328369140625;
    float _592 = _588 + 0.039999999105930328369140625;
    float _593 = _589 + 0.039999999105930328369140625;
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _526, cbSceneParam._m0[86u].y * _527));
    float _605 = _602.x * TEXCOORD_9.w;
    float _606 = dot(vec3(_425, _426, _427), vec3(_506, _507, _508));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _425) - _506;
    float _614 = (_609 * _426) - _507;
    float _615 = (_609 * _427) - _508;
    float _619 = abs(dot(vec3(_506, _507, _508), vec3(_425, _426, _427)));
    float _3542 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_428);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _640 = (1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _641 = _634 * _621;
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1007;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _732 = fma(_677, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669));
        float _736 = fma(_677, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669));
        float _740 = fma(_677, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669));
        float _765 = _669 + _425;
        float _766 = _673 + _426;
        float _767 = _677 + _427;
        float _777 = fma(_767, cbModelParam._m0[26u].z, fma(_766, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765)) - _732;
        float _778 = fma(_767, cbModelParam._m0[27u].z, fma(_766, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765)) - _736;
        float _779 = fma(_767, cbModelParam._m0[28u].z, fma(_766, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765)) - _740;
        float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
        float _796 = ((_783 * _777) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_732 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_783 * _778) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_736 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_783 * _779) / cbModelParam._m0[34u].z) + ((((((_740 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        float _835 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_801.x + (-0.5));
        float _837 = _835 * (_801.y + (-0.5));
        float _838 = _835 * (_801.z + (-0.5));
        float _845 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_808.x + (-0.5));
        float _847 = _845 * (_808.y + (-0.5));
        float _848 = _845 * (_808.z + (-0.5));
        float _855 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_815.x + (-0.5));
        float _857 = _855 * (_815.y + (-0.5));
        float _858 = _855 * (_815.z + (-0.5));
        float _865 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_822.x + (-0.5));
        float _867 = _865 * (_822.y + (-0.5));
        float _868 = _865 * (_822.z + (-0.5));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = _836 * 0.5;
        float _873 = _846 * 0.5;
        float _874 = _856 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _889 = (dot(vec3(_425, _426, _427), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _899 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3590 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_901 + 1.0))) + _906) * _869;
        float _916 = _837 * 0.5;
        float _917 = _847 * 0.5;
        float _918 = _857 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_425, _426, _427), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3623 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_943 + 1.0))) + _948) * _870;
        float _958 = _838 * 0.5;
        float _959 = _848 * 0.5;
        float _960 = _858 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_425, _426, _427), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3656 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_985 + 1.0))) + _990) * _871;
        _1007 = _838;
        _1009 = _837;
        _1010 = _836;
        _1011 = _848;
        _1012 = _847;
        _1013 = _846;
        _1014 = _858;
        _1015 = _857;
        _1016 = _856;
        _1017 = _871;
        _1018 = _870;
        _1019 = _869;
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
    }
    else
    {
        _1007 = _1008;
        _1009 = _1008;
        _1010 = _1008;
        _1011 = _1008;
        _1012 = _1008;
        _1013 = _1008;
        _1014 = _1008;
        _1015 = _1008;
        _1016 = _1008;
        _1017 = _1008;
        _1018 = _1008;
        _1019 = _1008;
        _1020 = 0.0;
        _1021 = 0.0;
        _1022 = 0.0;
    }
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1051 = fma(_677, cbModelParam._m0[30u].z, fma(_673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _669));
        float _1055 = fma(_677, cbModelParam._m0[31u].z, fma(_673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _669));
        float _1059 = fma(_677, cbModelParam._m0[32u].z, fma(_673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _669));
        float _1082 = _669 + _425;
        float _1083 = _673 + _426;
        float _1084 = _677 + _427;
        float _1094 = fma(_1084, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082)) - _1051;
        float _1095 = fma(_1084, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082)) - _1055;
        float _1096 = fma(_1084, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082)) - _1059;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1051 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1055 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[35u].z) + ((((((_1059 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1150 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1117.x + (-0.5));
        float _1152 = _1150 * (_1117.y + (-0.5));
        float _1153 = _1150 * (_1117.z + (-0.5));
        float _1160 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1124.x + (-0.5));
        float _1162 = _1160 * (_1124.y + (-0.5));
        float _1163 = _1160 * (_1124.z + (-0.5));
        float _1170 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1131.x + (-0.5));
        float _1172 = _1170 * (_1131.y + (-0.5));
        float _1173 = _1170 * (_1131.z + (-0.5));
        float _1180 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1138.x + (-0.5));
        float _1182 = _1180 * (_1138.y + (-0.5));
        float _1183 = _1180 * (_1138.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_425, _426, _427), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3719 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1214 + 1.0))) + _1219) * _1184;
        float _1229 = _1152 * 0.5;
        float _1230 = _1162 * 0.5;
        float _1231 = _1172 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_425, _426, _427), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3752 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1256 + 1.0))) + _1261) * _1185;
        float _1271 = _1153 * 0.5;
        float _1272 = _1163 * 0.5;
        float _1273 = _1173 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_425, _426, _427), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3785 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1298 + 1.0))) + _1303) * _1186;
        _1320 = _1153;
        _1321 = _1152;
        _1322 = _1151;
        _1323 = _1163;
        _1324 = _1162;
        _1325 = _1161;
        _1326 = _1173;
        _1327 = _1172;
        _1328 = _1171;
        _1329 = _1186;
        _1330 = _1185;
        _1331 = _1184;
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1008;
        _1321 = _1008;
        _1322 = _1008;
        _1323 = _1008;
        _1324 = _1008;
        _1325 = _1008;
        _1326 = _1008;
        _1327 = _1008;
        _1328 = _1008;
        _1329 = _1008;
        _1330 = _1008;
        _1331 = _1008;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1020)) + _1020;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1021)) + _1021;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1022)) + _1022;
    float _1367 = fma(_1346, cbSceneParam._m0[89u].z, fma(_1345, cbSceneParam._m0[89u].y, _1344 * cbSceneParam._m0[89u].x));
    float _1370 = fma(_1346, cbSceneParam._m0[90u].z, fma(_1345, cbSceneParam._m0[90u].y, _1344 * cbSceneParam._m0[90u].x));
    float _1373 = fma(_1346, cbSceneParam._m0[91u].z, fma(_1345, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1344));
    float _1388 = _613 * 0.5;
    float _1389 = _614 * 0.5;
    float _1390 = _615 * 0.5;
    float _1391 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1394 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1397 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1431;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1404 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1007, _1011, _1014, _1017));
        float _1408 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1412 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1010, _1013, _1016, _1019));
        float _1419 = dot(vec4(cbModelParam._m0[39u]), vec4(_1388, _1389, _1390, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1442;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1433 = dot(vec4(cbModelParam._m0[40u]), vec4(_1388, _1389, _1390, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1446 = (_1442 * cbModelParam._m0[1u].x) + (_1431 * (1.0 - cbModelParam._m0[1u].x));
    float _1456 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _428);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1456 : min(cbModelParam._m0[25u].z, _1456));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1506 = fma(_677, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669)) + cbModelParam._m0[13u].w;
        float _1510 = fma(_677, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669)) + cbModelParam._m0[14u].w;
        float _1514 = fma(_677, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669)) + cbModelParam._m0[15u].w;
        float _1517 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1520 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1523 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1551;
        if (_1517 > 0.0)
        {
            _1551 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1551 = frontier_phi_19_17_ladder;
        }
        float _1758;
        if (_1520 > 0.0)
        {
            _1758 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1758 = frontier_phi_28_24_ladder;
        }
        float _2012;
        if (_1523 > 0.0)
        {
            _2012 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2012 = frontier_phi_40_35_ladder;
        }
        float _2014 = isnan(_1758) ? _1551 : (isnan(_1551) ? _1758 : min(_1551, _1758));
        float _2015 = isnan(_2012) ? _2014 : (isnan(_2014) ? _2012 : min(_2014, _2012));
        float _2019 = (_2015 * _1517) + _1506;
        float _2020 = (_2015 * _1520) + _1510;
        float _2021 = (_2015 * _1523) + _1514;
        float _2022 = _2015 * 9.9999997473787516355514526367188e-05;
        float _2024 = (-1.0) - _2022;
        float _2026 = _2022 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2021 > _2026) || ((_2021 < _2024) || ((_2020 > _2026) || ((_2020 < _2024) || ((_2019 < _2024) || (_2019 > _2026))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2021, cbModelParam._m0[9u].z, fma(_2020, cbModelParam._m0[9u].y, _2019 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2021, cbModelParam._m0[10u].z, fma(_2020, cbModelParam._m0[10u].y, _2019 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2021, cbModelParam._m0[11u].z, fma(_2020, cbModelParam._m0[11u].y, _2019 * cbModelParam._m0[11u].x))), _1457);
            frontier_phi_18_40_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1539 = frontier_phi_18_40_ladder_2;
        _1541 = frontier_phi_18_40_ladder_1;
        _1543 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1457);
        _1539 = _1527.x * cbModelParam._m0[1u].y;
        _1541 = _1527.y * cbModelParam._m0[1u].y;
        _1543 = _1527.z * cbModelParam._m0[1u].y;
    }
    float _1547 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _428);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1547 : min(cbModelParam._m0[25u].w, _1547));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1605 = fma(_677, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669)) + cbModelParam._m0[21u].w;
        float _1609 = fma(_677, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669)) + cbModelParam._m0[22u].w;
        float _1613 = fma(_677, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669)) + cbModelParam._m0[23u].w;
        float _1616 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1619 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1622 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1763;
        if (_1616 > 0.0)
        {
            _1763 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1763 = frontier_phi_30_26_ladder;
        }
        float _2039;
        if (_1619 > 0.0)
        {
            _2039 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2039 = frontier_phi_42_37_ladder;
        }
        float _2252;
        if (_1622 > 0.0)
        {
            _2252 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2252 = frontier_phi_51_48_ladder;
        }
        float _2254 = isnan(_2039) ? _1763 : (isnan(_1763) ? _2039 : min(_1763, _2039));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1616) + _1605;
        float _2260 = (_2255 * _1619) + _1609;
        float _2261 = (_2255 * _1622) + _1613;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_27_51_ladder = _2459.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2459.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2459.x * cbModelParam._m0[1u].z;
        }
        _1641 = frontier_phi_27_51_ladder_2;
        _1643 = frontier_phi_27_51_ladder_1;
        _1645 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1548);
        _1641 = _1625.x * cbModelParam._m0[1u].z;
        _1643 = _1625.y * cbModelParam._m0[1u].z;
        _1645 = _1625.z * cbModelParam._m0[1u].z;
    }
    float _1658 = (((_640 * _590) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1660 = (((_640 * _592) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1662 = (((_640 * _593) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1645 - _1543)) + _1543);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_565 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _605 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1716 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1720 = _1683 | 1u;
    float _1731 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_425, _426, _427));
    float _1734 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_425, _426, _427));
    float _3921 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _3932 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1739 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1741 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1748 = ((cbLight._m0[_1700].x * _1706) * _1741) + ((cbLight._m0[_1710].x * _1716) * _1739);
    float _1749 = ((_1706 * cbLight._m0[_1700].y) * _1741) + ((_1716 * cbLight._m0[_1710].y) * _1739);
    float _1750 = ((_1706 * cbLight._m0[_1700].z) * _1741) + ((_1716 * cbLight._m0[_1710].z) * _1739);
    uvec4 _1755 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1757 = _1755.x == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1757)
    {
        _1768 = _1748;
        _1770 = _1749;
        _1772 = _1750;
    }
    else
    {
        uint _1776 = _1683 + 6u;
        float _1792 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _1793 = _1792 * _1792;
        float _3943 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1795 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1768 = (((cbLight._m0[_1776].x * 0.3183098733425140380859375) * _1794) * _1795) + _1748;
        _1770 = (((cbLight._m0[_1776].y * 0.3183098733425140380859375) * _1794) * _1795) + _1749;
        _1772 = (((cbLight._m0[_1776].z * 0.3183098733425140380859375) * _1794) * _1795) + _1750;
    }
    bool _1775 = _1755.y == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1775)
    {
        _1813 = _1768;
        _1815 = _1770;
        _1817 = _1772;
    }
    else
    {
        uint _1983 = _1683 + 7u;
        float _1999 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _3959 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2002 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1813 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1768;
        _1815 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1770;
        _1817 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1772;
    }
    uint _1820 = _1683 + 8u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _428) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1683].x + _506;
    float _1836 = cbLight._m0[_1683].y + _507;
    float _1837 = cbLight._m0[_1683].z + _508;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1683].xyz));
    float _3975 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _1849 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1850 = dot(vec3(_425, _426, _427), vec3(_1842, _1843, _1844));
    float _3997 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1842, _1843, _1844));
    float _4008 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1834 * _1834;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1870 = exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0);
    float _1871 = 0.959999978542327880859375 - _587;
    float _1873 = 0.959999978542327880859375 - _588;
    float _1874 = 0.959999978542327880859375 - _589;
    float _1881 = 1.0 - _1834;
    float _1892 = (0.5 / (((_1849 * ((_1848 * _1881) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1881) + _1834) * _1848))) * _1848;
    float _4019 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    uint _1905 = _1683 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _428) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1720].x + _506;
    float _1919 = cbLight._m0[_1720].y + _507;
    float _1920 = cbLight._m0[_1720].z + _508;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1720].xyz));
    float _4030 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1932 = dot(vec3(_425, _426, _427), vec3(_1925, _1926, _1927));
    float _4041 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1925, _1926, _1927));
    float _4052 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0);
    float _1958 = 1.0 - _1917;
    float _1968 = (0.5 / (((_1849 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _1958) + _1917) * _1931))) * _1931;
    float _4063 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1980 = (((((_1951 * _1871) + _590) * cbLight._m0[_1905].x) * _1970) * _1706) + (((((_1870 * _1871) + _590) * cbLight._m0[_1820].x) * _1894) * _1716);
    float _1981 = (((((_1951 * _1873) + _592) * cbLight._m0[_1905].y) * _1970) * _1706) + (((((_1870 * _1873) + _592) * cbLight._m0[_1820].y) * _1894) * _1716);
    float _1982 = (((((_1951 * _1874) + _593) * cbLight._m0[_1905].z) * _1970) * _1706) + (((((_1870 * _1874) + _593) * cbLight._m0[_1820].z) * _1894) * _1716);
    float _2044;
    float _2046;
    float _2048;
    if (_1757)
    {
        _2044 = _1980;
        _2046 = _1981;
        _2048 = _1982;
    }
    else
    {
        uint _2050 = _1683 + 2u;
        uint _2054 = _1683 + 10u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _428) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _506;
        float _2071 = cbLight._m0[_2050].y + _507;
        float _2072 = cbLight._m0[_2050].z + _508;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2050].xyz));
        float _4074 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2084 = dot(vec3(_425, _426, _427), vec3(_2077, _2078, _2079));
        float _4085 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4096 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1849 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2110) + _2069) * _2083))) * _2083;
        float _4107 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2044 = (((((_2103 * _1871) + _590) * cbLight._m0[_2054].x) * _2122) * _2123) + _1980;
        _2046 = (((((_2103 * _1873) + _592) * cbLight._m0[_2054].y) * _2122) * _2123) + _1981;
        _2048 = (((((_2103 * _1874) + _593) * cbLight._m0[_2054].z) * _2122) * _2123) + _1982;
    }
    float _2158;
    float _2160;
    float _2162;
    if (_1775)
    {
        _2158 = _2044;
        _2160 = _2046;
        _2162 = _2048;
    }
    else
    {
        uint _2169 = _1683 + 3u;
        uint _2173 = _1683 + 11u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _428) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _506;
        float _2190 = cbLight._m0[_2169].y + _507;
        float _2191 = cbLight._m0[_2169].z + _508;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2169].xyz));
        float _4123 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2203 = dot(vec3(_425, _426, _427), vec3(_2196, _2197, _2198));
        float _4134 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4145 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0);
        float _2229 = 1.0 - _2188;
        float _2239 = (0.5 / (((_1849 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1849 * _2229) + _2188) * _2202))) * _2202;
        float _4156 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2158 = (((((_2222 * _1871) + _590) * cbLight._m0[_2173].x) * _2241) * _2242) + _2044;
        _2160 = (((((_2222 * _1873) + _592) * cbLight._m0[_2173].y) * _2241) * _2242) + _2046;
        _2162 = (((((_2222 * _1874) + _593) * cbLight._m0[_2173].z) * _2241) * _2242) + _2048;
    }
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    if (_1681.y == 0u)
    {
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2317;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2317;
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2317;
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.x;
        uint _2344 = uint((float(_2332.y) * floor(float(uint(cbSceneParam._m0[85u].y * _527) / _2333))) + floor(float(uint(cbSceneParam._m0[85u].x * _526) / _2333)));
        float _2354 = (log2(_2320 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2355 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        uint _2358 = uint(isnan(14.0) ? _2355 : (isnan(_2355) ? 14.0 : min(_2355, 14.0)));
        uvec4 _2363 = texelFetch(g_lightClusterGridBuffer, int(((_2358 << 2u) + (_2344 << 6u)) >> 2u));
        uint _2364 = _2363.x;
        uint _2365 = _2332.z;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        if (((((1u << ((_2365 >> 4u) & 15u)) + 4294967295u) & _2364) == 0u) || ((_2365 & 240u) == 0u))
        {
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
        }
        else
        {
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2475;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            uint _2622 = 0u;
            uint _2631;
            bool _2632;
            for (;;)
            {
                _2631 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                _2632 = _2631 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2632)
                {
                    frontier_phi_68_pred = _2618;
                    frontier_phi_68_pred_1 = _2621;
                    frontier_phi_68_pred_2 = _2620;
                    frontier_phi_68_pred_3 = _2619;
                    frontier_phi_68_pred_4 = _2617;
                    frontier_phi_68_pred_5 = _2616;
                }
                else
                {
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    uint _2767;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2621;
                    _2767 = _2631;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    for (;;)
                    {
                        uint _2771 = uint(findLSB(_2767)) + (_2622 << 5u);
                        uint _2768 = (_2767 + 4294967295u) & _2767;
                        uint _2773 = _2771 * 48u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 3u)).x));
                        uint _2793 = (_2771 * 48u) + 4u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2812 = (_2771 * 48u) + 8u;
                        vec3 _2823 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x));
                        float _2827 = _2787.x - _2318;
                        float _2828 = _2787.y - _2319;
                        float _2829 = _2787.z - _2320;
                        float _2830 = dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829));
                        float _2833 = inversesqrt(_2830);
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2837 = dot(vec3(_546, _549, _552), vec3(_2834, _2835, _2836));
                        float _2842 = 1.0 - (_2830 * _2787.w);
                        float _4182 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2844 = sqrt(_2830) * _2806.w;
                        float _2847 = 1.39999997615814208984375 / (_2844 + 1.39999997615814208984375);
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2837) + _2848;
                        float _2854 = _2844 * _2844;
                        float _2858 = ((isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))) * _2843) / ((_2854 * 0.699999988079071044921875) + 1.0);
                        float _2862 = (-0.0) - _2318;
                        float _2863 = (-0.0) - _2319;
                        float _2864 = (-0.0) - _2320;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2879 = exp2(log2(1.0 / ((_2854 * 3.5) + 5.0)) * 0.25);
                        float _2880 = 1.0 - _621;
                        float _2887 = sqrt(1.0 - ((1.0 - (_2880 * _2880)) * (1.0 - (_2879 * _2879))));
                        float _2888 = _2887 * _2887;
                        float _2889 = _2888 * _2888;
                        float _2890 = _2869 + _2834;
                        float _2891 = _2870 + _2835;
                        float _2892 = _2871 + _2836;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2900 = dot(vec3(_546, _549, _552), vec3(_2869, _2870, _2871));
                        float _4198 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2903 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2904 = dot(vec3(_546, _549, _552), vec3(_2896 * _2890, _2896 * _2891, _2896 * _2892));
                        float _4209 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2907 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2911 = ((_2907 * _2907) * (_2889 + (-1.0))) + 1.0;
                        float _2912 = _2847 * _2888;
                        float _2913 = _2912 * _2912;
                        float _2916 = ((1.0 - _2913) * _2837) + _2913;
                        float _4220 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2918 = 1.0 - _2888;
                        float _2928 = (0.5 / (((_2917 * ((_2903 * _2918) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2917 * _2918) + _2888) * _2903))) * _2917;
                        float _4231 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2939 = (((_2889 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2911 * _2911) * ((_2854 * 2.1991131305694580078125) + 3.141590118408203125))) * _2843;
                        _2691 = (_2858 * _2806.x) + _2764;
                        _2692 = (_2858 * _2806.y) + _2765;
                        _2693 = (_2858 * _2806.z) + _2766;
                        _2688 = (_2939 * _2823.x) + _2761;
                        _2689 = (_2939 * _2823.y) + _2762;
                        _2690 = (_2939 * _2823.z) + _2763;
                        if (_2768 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2693;
                            _2767 = _2768;
                        }
                    }
                    frontier_phi_68_pred = _2690;
                    frontier_phi_68_pred_1 = _2693;
                    frontier_phi_68_pred_2 = _2692;
                    frontier_phi_68_pred_3 = _2691;
                    frontier_phi_68_pred_4 = _2689;
                    frontier_phi_68_pred_5 = _2688;
                }
                _2469 = frontier_phi_68_pred;
                _2475 = frontier_phi_68_pred_1;
                _2473 = frontier_phi_68_pred_2;
                _2471 = frontier_phi_68_pred_3;
                _2467 = frontier_phi_68_pred_4;
                _2465 = frontier_phi_68_pred_5;
                uint _2623 = _2622 + 1u;
                if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2616 = _2465;
                    _2617 = _2467;
                    _2618 = _2469;
                    _2619 = _2471;
                    _2620 = _2473;
                    _2621 = _2475;
                    _2622 = _2623;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
        }
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.z;
        uint _2481 = (_2479 >> 8u) & 15u;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((4294967295u << _2481) & _2364) == 0u)
        {
            _2584 = _2464;
            _2586 = _2466;
            _2588 = _2468;
            _2590 = _2470;
            _2592 = _2472;
            _2594 = _2474;
        }
        else
        {
            float _2609 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
            float _2610 = _2609 * _2318;
            float _2611 = _2609 * _2319;
            float _2612 = _2609 * _2320;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2481 < ((_2479 >> 12u) & 15u))
            {
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2744 = _2464;
                float _2745 = _2466;
                float _2746 = _2468;
                float _2747 = _2470;
                float _2748 = _2472;
                float _2749 = _2474;
                uint _2750 = _2481;
                uint _2759;
                bool _2760;
                for (;;)
                {
                    _2759 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2750 << 2u)) >> 2u)).x;
                    _2760 = _2759 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2760)
                    {
                        frontier_phi_79_pred = _2749;
                        frontier_phi_79_pred_1 = _2748;
                        frontier_phi_79_pred_2 = _2747;
                        frontier_phi_79_pred_3 = _2746;
                        frontier_phi_79_pred_4 = _2745;
                        frontier_phi_79_pred_5 = _2744;
                    }
                    else
                    {
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _2966 = _2744;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        float _2970 = _2748;
                        float _2971 = _2749;
                        uint _2972 = _2759;
                        uint _2973;
                        vec4 _2998;
                        float _2999;
                        vec4 _3014;
                        vec3 _3026;
                        vec4 _3042;
                        vec4 _3058;
                        float _3105;
                        bool _3106;
                        for (;;)
                        {
                            uint _2983 = ((_2750 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2972));
                            _2973 = (_2972 + 4294967295u) & _2972;
                            uint _2985 = _2983 * 40u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _2999 = _2998.w;
                            uint _3001 = (_2983 * 40u) + 4u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2983 * 40u) + 8u;
                            _3026 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x));
                            uint _3029 = (_2983 * 40u) + 16u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2983 * 40u) + 20u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3061 = (_2983 * 40u) + 24u;
                            vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3080 = (_2983 * 40u) + 28u;
                            vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3105 = fma(_2320, _3093.z, fma(_2319, _3093.y, _3093.x * _2318)) + _3093.w;
                            _3106 = !((fma(_2320, _3074.z, fma(_2319, _3074.y, _3074.x * _2318)) + _3074.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3106)
                            {
                                float _3133 = _2998.x - _2318;
                                float _3134 = _2998.y - _2319;
                                float _3135 = _2998.z - _2320;
                                float _3136 = dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135));
                                float _3139 = inversesqrt(_3136);
                                float _3140 = _3139 * _3133;
                                float _3141 = _3139 * _3134;
                                float _3142 = _3139 * _3135;
                                float _3146 = 1.0 - (_3136 / (_2999 * _2999));
                                float _4242 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3151 = sqrt(_3136) * _3014.w;
                                float _3153 = 1.39999997615814208984375 / (_3151 + 1.39999997615814208984375);
                                float _3154 = _3153 * _3153;
                                float _3157 = ((1.0 - _3154) * dot(vec3(_3140, _3141, _3142), vec3(_546, _549, _552))) + _3154;
                                float _3160 = _3151 * _3151;
                                float _3164 = (fma(_2320, _3042.z, fma(_2319, _3042.y, _3042.x * _2318)) + _3042.w) / _3105;
                                float _3165 = (fma(_2320, _3058.z, fma(_2319, _3058.y, _3058.x * _2318)) + _3058.w) / _3105;
                                float _3169 = 1.0 - dot(vec2(_3164, _3165), vec2(_3164, _3165));
                                float _4258 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3171 = _3170 * (((isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))) * _3147) / ((_3160 * 0.699999988079071044921875) + 1.0));
                                float _3183 = exp2(log2(1.0 / ((_3160 * 3.5) + 5.0)) * 0.25);
                                float _3184 = 1.0 - _621;
                                float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                                float _3192 = _3191 * _3191;
                                float _3193 = _3192 * _3192;
                                float _3194 = _3140 - _2610;
                                float _3195 = _3141 - _2611;
                                float _3196 = _3142 - _2612;
                                float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                                float _3204 = dot(vec3(_546, _549, _552), vec3((-0.0) - _2610, (-0.0) - _2611, (-0.0) - _2612));
                                float _4269 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3207 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3208 = dot(vec3(_546, _549, _552), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                                float _4280 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                                float _3216 = _3153 * _3192;
                                float _3217 = _3216 * _3216;
                                float _3223 = ((1.0 - _3217) * dot(vec3(_546, _549, _552), vec3(_3140, _3141, _3142))) + _3217;
                                float _4291 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3225 = 1.0 - _3192;
                                float _3235 = (0.5 / (((_3224 * ((_3207 * _3225) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3192) * _3207))) * _3224;
                                float _4302 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3245 = (_3170 * _3147) * (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3215 * _3215) * ((_3160 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3171 * _3014.z;
                                frontier_phi_85_pred_1 = _3171 * _3014.y;
                                frontier_phi_85_pred_2 = _3171 * _3014.x;
                                frontier_phi_85_pred_3 = _3245 * _3026.z;
                                frontier_phi_85_pred_4 = _3245 * _3026.y;
                                frontier_phi_85_pred_5 = _3245 * _3026.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3254 = frontier_phi_85_pred;
                            _3253 = frontier_phi_85_pred_1;
                            _3252 = frontier_phi_85_pred_2;
                            _3251 = frontier_phi_85_pred_3;
                            _3250 = frontier_phi_85_pred_4;
                            _3249 = frontier_phi_85_pred_5;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            _2958 = _3254 + _2971;
                            _2953 = _3249 + _2966;
                            _2954 = _3250 + _2967;
                            _2955 = _3251 + _2968;
                            if (_2973 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2973;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2958;
                        frontier_phi_79_pred_1 = _2957;
                        frontier_phi_79_pred_2 = _2956;
                        frontier_phi_79_pred_3 = _2955;
                        frontier_phi_79_pred_4 = _2954;
                        frontier_phi_79_pred_5 = _2953;
                    }
                    _2595 = frontier_phi_79_pred;
                    _2593 = frontier_phi_79_pred_1;
                    _2591 = frontier_phi_79_pred_2;
                    _2589 = frontier_phi_79_pred_3;
                    _2587 = frontier_phi_79_pred_4;
                    _2585 = frontier_phi_79_pred_5;
                    uint _2751 = _2750 + 1u;
                    if (_2751 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2744 = _2585;
                        _2745 = _2587;
                        _2746 = _2589;
                        _2747 = _2591;
                        _2748 = _2593;
                        _2749 = _2595;
                        _2750 = _2751;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2591;
                frontier_phi_60_61_ladder_1 = _2595;
                frontier_phi_60_61_ladder_2 = _2593;
                frontier_phi_60_61_ladder_3 = _2589;
                frontier_phi_60_61_ladder_4 = _2587;
                frontier_phi_60_61_ladder_5 = _2585;
            }
            else
            {
                frontier_phi_60_61_ladder = _2470;
                frontier_phi_60_61_ladder_1 = _2474;
                frontier_phi_60_61_ladder_2 = _2472;
                frontier_phi_60_61_ladder_3 = _2468;
                frontier_phi_60_61_ladder_4 = _2466;
                frontier_phi_60_61_ladder_5 = _2464;
            }
            _2584 = frontier_phi_60_61_ladder_5;
            _2586 = frontier_phi_60_61_ladder_4;
            _2588 = frontier_phi_60_61_ladder_3;
            _2590 = frontier_phi_60_61_ladder;
            _2592 = frontier_phi_60_61_ladder_2;
            _2594 = frontier_phi_60_61_ladder_1;
        }
        float _2599 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2376 = (_2599 * _2590) + _1813;
        _2378 = (_2599 * _2592) + _1815;
        _2380 = (_2599 * _2594) + _1817;
        _2382 = ((_2584 * _590) * _2599) + _2158;
        _2384 = ((_2586 * _592) * _2599) + _2160;
        _2386 = ((_2588 * _593) * _2599) + _2162;
    }
    else
    {
        _2376 = _1813;
        _2378 = _1815;
        _2380 = _1817;
        _2382 = _2158;
        _2384 = _2160;
        _2386 = _2162;
    }
    float _4318 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4329 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4340 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2403 = ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2376 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _605))) + ((_2382 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1446)) * cbPerFrame._m0[3u].x);
    float _2404 = ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2378 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _605))) + ((_2384 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1446)) * cbPerFrame._m0[3u].x);
    float _2405 = ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2380 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _605))) + ((_2386 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1446)) * cbPerFrame._m0[3u].x);
    uint _2406 = _565 + 6u;
    float _2414 = _526 / cbSceneParam._m0[86u].x;
    float _2415 = _527 / cbSceneParam._m0[86u].y;
    vec4 _2429 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2414, _2415, (log2((isnan(cbSceneParam._m0[77u].w) ? _448 : (isnan(_448) ? cbSceneParam._m0[77u].w : min(_448, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2431 = _2429.x;
    float _2432 = _2429.y;
    float _2433 = _2429.z;
    float _2434 = _2429.w;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_448 > cbSceneParam._m0[78u].w)
    {
        float _2489 = isnan(_448) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _448 : min(cbSceneParam._m0[80u].w, _448));
        float _2490 = _2489 / _448;
        float _2501 = _2490 * _499;
        float _2502 = _500 * _2490;
        float _2503 = (-0.0) - _2502;
        float _2504 = _2490 * _501;
        float _2506 = (cbSceneParam._m0[77u].w * _2503) / _2489;
        float _2507 = _2506 + cbSceneParam._m0[79u].w;
        float _2508 = cbSceneParam._m0[79u].w - _2502;
        float _2514 = sqrt(((_2501 * _2501) + (_2502 * _2502)) + (_2504 * _2504));
        float _2517 = (1.0 - (cbSceneParam._m0[77u].w / _2489)) * _2514;
        float _2522 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2524 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2701;
        if (abs((_2503 - _2506) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2701 = ((((_2507 > 0.0) ? exp2(_2522 * _2507) : (2.0 - exp2(_2524 * _2507))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2517;
        }
        else
        {
            float _2645 = 1.0 / cbSceneParam._m0[80u].x;
            float _2646 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : max(_2507, _2508));
            float _2647 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : min(_2507, _2508));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            float _2657 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : min(_2647, 0.0));
            _2701 = ((abs(_2514 / _2503) * cbSceneParam._m0[80u].y) * ((((_2656 - _2657) * 2.0) - ((exp2(_2522 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0)))) - exp2(_2522 * (isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))))) * _2645)) - ((exp2(_2524 * _2656) - exp2(_2524 * _2657)) * _2645))) + (_2517 * cbSceneParam._m0[80u].z);
        }
        vec4 _2703 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2414, _2415, 1.0), 0.0);
        float _2712 = exp2((_2701 * (-1.44269502162933349609375)) * (1.0 - _2703.w));
        float _2713 = log2(_2712);
        float _2729 = log2(_2434);
        _2526 = (exp2(_2729 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].x)) * _2703.x) / cbSceneParam._m0[78u].x)) + _2431;
        _2528 = (exp2(_2729 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].y)) * _2703.y) / cbSceneParam._m0[78u].y)) + _2432;
        _2530 = (exp2(_2729 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].z)) * _2703.z) / cbSceneParam._m0[78u].z)) + _2433;
        _2532 = _2712 * _2434;
    }
    else
    {
        _2526 = _2431;
        _2528 = _2432;
        _2530 = _2433;
        _2532 = _2434;
    }
    bool _2739;
    vec4 _2542;
    vec4 _2564;
    float _2566;
    float _2570;
    float _2571;
    float _2572;
    float _2573;
    bool _2583;
    for (;;)
    {
        _2542 = cbMatDynParam._m0[0u];
        float _2544 = roundEven(_2542.y);
        bool _2545 = _2544 == 3.0;
        float _2546 = log2(_2532);
        float _2553 = exp2(_2546 * cbSceneParam._m0[78u].x) * _2403;
        float _2554 = exp2(_2546 * cbSceneParam._m0[78u].y) * _2404;
        float _2555 = exp2(_2546 * cbSceneParam._m0[78u].z) * _2405;
        float _2562 = _515 + (-0.5);
        _2564 = cbMtdParam._m0[1u];
        _2566 = _2564.y * _2562;
        float _2569 = (_2544 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2570 = _2569 * (_2545 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2526)));
        _2571 = _2569 * (_2545 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2528)));
        _2572 = _2569 * (_2545 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2530)));
        _2573 = _2562 * 0.999000012874603271484375;
        _2583 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2583)
        {
            if ((cbInstanceData._m0[_565 + 7u].x + _2573) < 0.5)
            {
                _2739 = true;
                break;
            }
        }
        uint _2680 = _566 + uint(_2542.w);
        if ((cbInstanceData._m0[_2680].w < 1.0) && ((cbInstanceData._m0[_2680].w + _2573) < 0.5))
        {
            _2739 = true;
            break;
        }
        if ((_2566 + 1.0) < _2564.x)
        {
            _2739 = true;
            break;
        }
        _2739 = false;
        break;
    }
    float _2944;
    if (_2739)
    {
        discard_state = true;
        _2944 = 0.0;
    }
    else
    {
        _2944 = cbInstanceData._m0[_2406].w;
    }
    SV_Target.x = _2570;
    SV_Target.y = _2571;
    SV_Target.z = _2572;
    SV_Target.w = _2944;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2406].w;
    discard_exit();
}


