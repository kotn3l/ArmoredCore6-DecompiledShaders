#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1009;
float _3423;
float _3424;
float _3425;
float _3426;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3435 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))));
    float _259 = fma(_256, _222, fma(_249, _215, _247 * _201));
    float _262 = fma(_256, _223, fma(_249, _216, _247 * _202));
    float _265 = fma(_256, _224, fma(_249, _217, _247 * _203));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _304 = (cbMtdParam._m0[11u].z + dot(vec4(_269 * _259, _269 * _262, _269 * _265, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3446 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    vec4 _322 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _327 = _322.x * cbMtdParam._m0[9u].x;
    float _328 = _322.y * cbMtdParam._m0[9u].y;
    float _329 = _322.z * cbMtdParam._m0[9u].z;
    vec4 _342 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _353 = ((_342.x - _327) * _305) + _327;
    float _354 = ((_342.y - _328) * _305) + _328;
    float _355 = ((_342.z - _329) * _305) + _329;
    vec4 _368 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _370 = _368.x;
    float _372 = _370 - (_370 * _305);
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _392 = (_385.x * 2.0) + (-1.0);
    float _393 = (_385.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3457 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _402 = ((_385.z - _243) * _305) + _243;
    float _409 = ((_392 - _247) * _305) + _247;
    float _410 = ((_393 - _249) * _305) + _249;
    float _411 = ((sqrt(1.0 - (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) - _256) * _305) + _256;
    float _414 = fma(_411, _222, fma(_410, _215, _409 * _201));
    float _417 = fma(_411, _223, fma(_410, _216, _409 * _202));
    float _420 = fma(_411, _224, fma(_410, _217, _409 * _203));
    float _424 = inversesqrt(dot(vec3(_414, _417, _420), vec3(_414, _417, _420)));
    float _425 = _424 * _414;
    float _426 = _424 * _417;
    float _427 = _424 * _420;
    float _3468 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _428 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _3479 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3490 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3501 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3512 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _432 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _448 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _499 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _489);
    float _500 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _489);
    float _501 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _489);
    float _505 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
    float _506 = _499 * _505;
    float _507 = _500 * _505;
    float _508 = _501 * _505;
    vec4 _513 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _515 = _513.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _688 = sqrt(((_499 * _499) + (_500 * _500)) + (_501 * _501));
        float _694 = (cbMatDynParam._m0[5u].x * _688) + cbMatDynParam._m0[5u].y;
        float _3523 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _699 = (cbMatDynParam._m0[5u].z * _688) + cbMatDynParam._m0[5u].w;
        float _3534 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) - _695)) + _695) < ((_515 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _527 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _528 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _546 = fma(_427, cbSceneParam._m0[5u].z, fma(_426, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _425));
    float _549 = fma(_427, cbSceneParam._m0[6u].z, fma(_426, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _425));
    float _552 = fma(_427, cbSceneParam._m0[7u].z, fma(_426, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _425));
    uint _565 = uint(roundEven(NORMAL.w)) * 13u;
    uint _566 = _565 + 9u;
    uint _567 = _566 + uint(cbMatDynParam._m0[0u].w);
    float _573 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_567].x;
    float _574 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_567].y;
    float _575 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_567].z;
    float _3545 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _579 = 1.0 - _432;
    float _580 = _576 * _579;
    float _581 = _577 * _579;
    float _582 = _578 * _579;
    float _587 = (_576 + (-0.039999999105930328369140625)) * _432;
    float _588 = (_577 + (-0.039999999105930328369140625)) * _432;
    float _589 = (_578 + (-0.039999999105930328369140625)) * _432;
    float _590 = _587 + 0.039999999105930328369140625;
    float _592 = _588 + 0.039999999105930328369140625;
    float _593 = _589 + 0.039999999105930328369140625;
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _527, cbSceneParam._m0[86u].y * _528));
    float _605 = _602.x * TEXCOORD_9.w;
    float _606 = dot(vec3(_425, _426, _427), vec3(_506, _507, _508));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _425) - _506;
    float _614 = (_609 * _426) - _507;
    float _615 = (_609 * _427) - _508;
    float _619 = abs(dot(vec3(_506, _507, _508), vec3(_425, _426, _427)));
    float _3578 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_428);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _640 = (1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _641 = _634 * _621;
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1008;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _733 = fma(_677, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669));
        float _737 = fma(_677, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669));
        float _741 = fma(_677, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669));
        float _766 = _669 + _425;
        float _767 = _673 + _426;
        float _768 = _677 + _427;
        float _778 = fma(_768, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766)) - _733;
        float _779 = fma(_768, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766)) - _737;
        float _780 = fma(_768, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766)) - _741;
        float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
        float _797 = ((_784 * _778) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_733 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_784 * _779) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_737 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_784 * _780) / cbModelParam._m0[34u].z) + ((((((_741 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        float _836 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_802.x + (-0.5));
        float _838 = _836 * (_802.y + (-0.5));
        float _839 = _836 * (_802.z + (-0.5));
        float _846 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_809.x + (-0.5));
        float _848 = _846 * (_809.y + (-0.5));
        float _849 = _846 * (_809.z + (-0.5));
        float _856 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_816.x + (-0.5));
        float _858 = _856 * (_816.y + (-0.5));
        float _859 = _856 * (_816.z + (-0.5));
        float _866 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_823.x + (-0.5));
        float _868 = _866 * (_823.y + (-0.5));
        float _869 = _866 * (_823.z + (-0.5));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = _837 * 0.5;
        float _874 = _847 * 0.5;
        float _875 = _857 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _890 = (dot(vec3(_425, _426, _427), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _900 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3626 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_902 + 1.0))) + _907) * _870;
        float _917 = _838 * 0.5;
        float _918 = _848 * 0.5;
        float _919 = _858 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_425, _426, _427), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3659 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_944 + 1.0))) + _949) * _871;
        float _959 = _839 * 0.5;
        float _960 = _849 * 0.5;
        float _961 = _859 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_425, _426, _427), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3692 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_986 + 1.0))) + _991) * _872;
        _1008 = _839;
        _1010 = _838;
        _1011 = _837;
        _1012 = _849;
        _1013 = _848;
        _1014 = _847;
        _1015 = _859;
        _1016 = _858;
        _1017 = _857;
        _1018 = _872;
        _1019 = _871;
        _1020 = _870;
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
    }
    else
    {
        _1008 = _1009;
        _1010 = _1009;
        _1011 = _1009;
        _1012 = _1009;
        _1013 = _1009;
        _1014 = _1009;
        _1015 = _1009;
        _1016 = _1009;
        _1017 = _1009;
        _1018 = _1009;
        _1019 = _1009;
        _1020 = _1009;
        _1021 = 0.0;
        _1022 = 0.0;
        _1023 = 0.0;
    }
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1052 = fma(_677, cbModelParam._m0[30u].z, fma(_673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _669));
        float _1056 = fma(_677, cbModelParam._m0[31u].z, fma(_673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _669));
        float _1060 = fma(_677, cbModelParam._m0[32u].z, fma(_673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _669));
        float _1083 = _669 + _425;
        float _1084 = _673 + _426;
        float _1085 = _677 + _427;
        float _1095 = fma(_1085, cbModelParam._m0[30u].z, fma(_1084, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083)) - _1052;
        float _1096 = fma(_1085, cbModelParam._m0[31u].z, fma(_1084, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083)) - _1056;
        float _1097 = fma(_1085, cbModelParam._m0[32u].z, fma(_1084, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083)) - _1060;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1052 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1056 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[35u].z) + ((((((_1060 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1151 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1118.x + (-0.5));
        float _1153 = _1151 * (_1118.y + (-0.5));
        float _1154 = _1151 * (_1118.z + (-0.5));
        float _1161 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1125.x + (-0.5));
        float _1163 = _1161 * (_1125.y + (-0.5));
        float _1164 = _1161 * (_1125.z + (-0.5));
        float _1171 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1132.x + (-0.5));
        float _1173 = _1171 * (_1132.y + (-0.5));
        float _1174 = _1171 * (_1132.z + (-0.5));
        float _1181 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1139.x + (-0.5));
        float _1183 = _1181 * (_1139.y + (-0.5));
        float _1184 = _1181 * (_1139.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_425, _426, _427), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3755 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1215 + 1.0))) + _1220) * _1185;
        float _1230 = _1153 * 0.5;
        float _1231 = _1163 * 0.5;
        float _1232 = _1173 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_425, _426, _427), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3788 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1257 + 1.0))) + _1262) * _1186;
        float _1272 = _1154 * 0.5;
        float _1273 = _1164 * 0.5;
        float _1274 = _1174 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_425, _426, _427), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3821 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1299 + 1.0))) + _1304) * _1187;
        _1321 = _1154;
        _1322 = _1153;
        _1323 = _1152;
        _1324 = _1164;
        _1325 = _1163;
        _1326 = _1162;
        _1327 = _1174;
        _1328 = _1173;
        _1329 = _1172;
        _1330 = _1187;
        _1331 = _1186;
        _1332 = _1185;
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
    }
    else
    {
        _1321 = _1009;
        _1322 = _1009;
        _1323 = _1009;
        _1324 = _1009;
        _1325 = _1009;
        _1326 = _1009;
        _1327 = _1009;
        _1328 = _1009;
        _1329 = _1009;
        _1330 = _1009;
        _1331 = _1009;
        _1332 = _1009;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1021)) + _1021;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1022)) + _1022;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1023)) + _1023;
    float _1368 = fma(_1347, cbSceneParam._m0[89u].z, fma(_1346, cbSceneParam._m0[89u].y, _1345 * cbSceneParam._m0[89u].x));
    float _1371 = fma(_1347, cbSceneParam._m0[90u].z, fma(_1346, cbSceneParam._m0[90u].y, _1345 * cbSceneParam._m0[90u].x));
    float _1374 = fma(_1347, cbSceneParam._m0[91u].z, fma(_1346, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1345));
    float _1389 = _613 * 0.5;
    float _1390 = _614 * 0.5;
    float _1391 = _615 * 0.5;
    float _1392 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1395 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1398 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1432;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1405 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1008, _1012, _1015, _1018));
        float _1409 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1010, _1013, _1016, _1019));
        float _1413 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1420 = dot(vec4(cbModelParam._m0[39u]), vec4(_1389, _1390, _1391, 1.0));
        _1432 = dot(vec3(isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1432 = 1.0;
    }
    float _1443;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1434 = dot(vec4(cbModelParam._m0[40u]), vec4(_1389, _1390, _1391, 1.0));
        _1443 = dot(vec3(isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1443 = 1.0;
    }
    float _1447 = (_1443 * cbModelParam._m0[1u].x) + (_1432 * (1.0 - cbModelParam._m0[1u].x));
    float _1457 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _428);
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1457 : min(cbModelParam._m0[25u].z, _1457));
    float _1540;
    float _1542;
    float _1544;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1507 = fma(_677, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669)) + cbModelParam._m0[13u].w;
        float _1511 = fma(_677, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669)) + cbModelParam._m0[14u].w;
        float _1515 = fma(_677, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669)) + cbModelParam._m0[15u].w;
        float _1518 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1521 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1524 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1552;
        if (_1518 > 0.0)
        {
            _1552 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1552 = frontier_phi_19_17_ladder;
        }
        float _1780;
        if (_1521 > 0.0)
        {
            _1780 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1780 = frontier_phi_28_24_ladder;
        }
        float _2037;
        if (_1524 > 0.0)
        {
            _2037 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2037 = frontier_phi_40_35_ladder;
        }
        float _2039 = isnan(_1780) ? _1552 : (isnan(_1552) ? _1780 : min(_1552, _1780));
        float _2040 = isnan(_2037) ? _2039 : (isnan(_2039) ? _2037 : min(_2039, _2037));
        float _2044 = (_2040 * _1518) + _1507;
        float _2045 = (_2040 * _1521) + _1511;
        float _2046 = (_2040 * _1524) + _1515;
        float _2047 = _2040 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2047;
        float _2051 = _2047 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 > _2051) || ((_2045 < _2049) || ((_2044 < _2049) || (_2044 > _2051))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2174 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2046, cbModelParam._m0[9u].z, fma(_2045, cbModelParam._m0[9u].y, _2044 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2046, cbModelParam._m0[10u].z, fma(_2045, cbModelParam._m0[10u].y, _2044 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2046, cbModelParam._m0[11u].z, fma(_2045, cbModelParam._m0[11u].y, _2044 * cbModelParam._m0[11u].x))), _1458);
            frontier_phi_18_40_ladder = _2174.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2174.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2174.x * cbModelParam._m0[1u].y;
        }
        _1540 = frontier_phi_18_40_ladder_2;
        _1542 = frontier_phi_18_40_ladder_1;
        _1544 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1458);
        _1540 = _1528.x * cbModelParam._m0[1u].y;
        _1542 = _1528.y * cbModelParam._m0[1u].y;
        _1544 = _1528.z * cbModelParam._m0[1u].y;
    }
    float _1548 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _428);
    float _1549 = isnan(_1548) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1548 : min(cbModelParam._m0[25u].w, _1548));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1606 = fma(_677, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669)) + cbModelParam._m0[21u].w;
        float _1610 = fma(_677, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669)) + cbModelParam._m0[22u].w;
        float _1614 = fma(_677, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669)) + cbModelParam._m0[23u].w;
        float _1617 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1620 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1623 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1785;
        if (_1617 > 0.0)
        {
            _1785 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1785 = frontier_phi_30_26_ladder;
        }
        float _2064;
        if (_1620 > 0.0)
        {
            _2064 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2064 = frontier_phi_42_37_ladder;
        }
        float _2277;
        if (_1623 > 0.0)
        {
            _2277 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2277 = frontier_phi_51_48_ladder;
        }
        float _2279 = isnan(_2064) ? _1785 : (isnan(_1785) ? _2064 : min(_1785, _2064));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1617) + _1606;
        float _2285 = (_2280 * _1620) + _1610;
        float _2286 = (_2280 * _1623) + _1614;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2287;
        float _2290 = _2287 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2286 > _2290) || ((_2286 < _2288) || ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 < _2288) || (_2284 > _2290))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2286, cbModelParam._m0[17u].z, fma(_2285, cbModelParam._m0[17u].y, _2284 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2286, cbModelParam._m0[18u].z, fma(_2285, cbModelParam._m0[18u].y, _2284 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2286, cbModelParam._m0[19u].z, fma(_2285, cbModelParam._m0[19u].y, _2284 * cbModelParam._m0[19u].x))), _1549);
            frontier_phi_27_51_ladder = _2484.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2484.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2484.x * cbModelParam._m0[1u].z;
        }
        _1642 = frontier_phi_27_51_ladder_2;
        _1644 = frontier_phi_27_51_ladder_1;
        _1646 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1549);
        _1642 = _1626.x * cbModelParam._m0[1u].z;
        _1644 = _1626.y * cbModelParam._m0[1u].z;
        _1646 = _1626.z * cbModelParam._m0[1u].z;
    }
    float _1659 = (((_640 * _590) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1642 - _1540)) + _1540);
    float _1661 = (((_640 * _592) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1644 - _1542)) + _1542);
    float _1663 = (((_640 * _593) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1646 - _1544)) + _1544);
    float _1666 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1659 * cbSceneParam._m0[91u].x));
    vec4 _1680 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_527, _528));
    float _1682 = _1680.w;
    float _1694 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1682);
    float _1695 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1682);
    float _1696 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1682);
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_565 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1710 = _605 + (-1.0);
    float _1715 = (cbLight._m0[_1703].x * _1710) + 1.0;
    float _1716 = (cbLight._m0[_1703].y * _1710) + 1.0;
    float _1717 = (cbLight._m0[_1703].z * _1710) + 1.0;
    float _1718 = (cbLight._m0[_1703].w * _1710) + 1.0;
    uint _1719 = _1702 + 5u;
    float _1725 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1729 = _1702 + 4u;
    float _1739 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1743 = _1702 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_425, _426, _427));
    float _1757 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_425, _426, _427));
    float _3957 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _3968 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1762 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.3183098733425140380859375;
    float _1764 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.3183098733425140380859375;
    float _1771 = ((cbLight._m0[_1719].x * _1725) * _1764) + (((cbLight._m0[_1729].x * _1694) * _1739) * _1762);
    float _1772 = ((_1725 * cbLight._m0[_1719].y) * _1764) + (((cbLight._m0[_1729].y * _1695) * _1739) * _1762);
    float _1773 = ((_1725 * cbLight._m0[_1719].z) * _1764) + (((cbLight._m0[_1729].z * _1696) * _1739) * _1762);
    uvec4 _1777 = floatBitsToUint(cbLight._m0[_1702 + 12u]);
    bool _1779 = _1777.x == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1779)
    {
        _1790 = _1771;
        _1792 = _1772;
        _1794 = _1773;
    }
    else
    {
        uint _1798 = _1702 + 6u;
        float _1814 = (dot(vec3(cbLight._m0[_1702 + 2u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _1815 = _1814 * _1814;
        float _3979 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1817 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1790 = (((cbLight._m0[_1798].x * 0.3183098733425140380859375) * _1816) * _1817) + _1771;
        _1792 = (((cbLight._m0[_1798].y * 0.3183098733425140380859375) * _1816) * _1817) + _1772;
        _1794 = (((cbLight._m0[_1798].z * 0.3183098733425140380859375) * _1816) * _1817) + _1773;
    }
    bool _1797 = _1777.y == 0u;
    float _1835;
    float _1837;
    float _1839;
    if (_1797)
    {
        _1835 = _1790;
        _1837 = _1792;
        _1839 = _1794;
    }
    else
    {
        uint _2008 = _1702 + 7u;
        float _2024 = (dot(vec3(cbLight._m0[_1702 + 3u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _3995 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2027 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1835 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1790;
        _1837 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1792;
        _1839 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1794;
    }
    uint _1842 = _1702 + 8u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _428) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1702].x + _506;
    float _1858 = cbLight._m0[_1702].y + _507;
    float _1859 = cbLight._m0[_1702].z + _508;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1702].xyz));
    float _4011 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _1871 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1872 = dot(vec3(_425, _426, _427), vec3(_1864, _1865, _1866));
    float _4033 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1864, _1865, _1866));
    float _4044 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1856 * _1856;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
    float _1893 = 0.959999978542327880859375 - _587;
    float _1895 = 0.959999978542327880859375 - _588;
    float _1896 = 0.959999978542327880859375 - _589;
    float _1903 = 1.0 - _1856;
    float _1914 = (0.5 / (((_1871 * ((_1870 * _1903) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1903) + _1856) * _1870))) * _1870;
    float _4055 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1916 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    uint _1930 = _1702 + 9u;
    float _1941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _428) * 0.949999988079071044921875);
    float _1942 = _1941 * _1941;
    float _1943 = cbLight._m0[_1743].x + _506;
    float _1944 = cbLight._m0[_1743].y + _507;
    float _1945 = cbLight._m0[_1743].z + _508;
    float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
    float _1950 = _1949 * _1943;
    float _1951 = _1949 * _1944;
    float _1952 = _1949 * _1945;
    float _1953 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1743].xyz));
    float _4066 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1957 = dot(vec3(_425, _426, _427), vec3(_1950, _1951, _1952));
    float _4077 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1950, _1951, _1952));
    float _4088 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1942 * _1942;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1976 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
    float _1983 = 1.0 - _1942;
    float _1993 = (0.5 / (((_1871 * ((_1956 * _1983) + _1942)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1983) + _1942) * _1956))) * _1956;
    float _4099 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    float _2005 = (((((_1976 * _1893) + _590) * cbLight._m0[_1930].x) * _1995) * _1725) + ((((cbLight._m0[_1842].x * _1694) * ((_1892 * _1893) + _590)) * _1916) * _1739);
    float _2006 = (((((_1976 * _1895) + _592) * cbLight._m0[_1930].y) * _1995) * _1725) + ((((cbLight._m0[_1842].y * _1695) * ((_1892 * _1895) + _592)) * _1916) * _1739);
    float _2007 = (((((_1976 * _1896) + _593) * cbLight._m0[_1930].z) * _1995) * _1725) + ((((cbLight._m0[_1842].z * _1696) * ((_1892 * _1896) + _593)) * _1916) * _1739);
    float _2069;
    float _2071;
    float _2073;
    if (_1779)
    {
        _2069 = _2005;
        _2071 = _2006;
        _2073 = _2007;
    }
    else
    {
        uint _2075 = _1702 + 2u;
        uint _2079 = _1702 + 10u;
        float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _428) * 0.949999988079071044921875);
        float _2094 = _2093 * _2093;
        float _2095 = cbLight._m0[_2075].x + _506;
        float _2096 = cbLight._m0[_2075].y + _507;
        float _2097 = cbLight._m0[_2075].z + _508;
        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
        float _2102 = _2101 * _2095;
        float _2103 = _2101 * _2096;
        float _2104 = _2101 * _2097;
        float _2105 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2075].xyz));
        float _4110 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2109 = dot(vec3(_425, _426, _427), vec3(_2102, _2103, _2104));
        float _4121 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2113 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2102, _2103, _2104));
        float _4132 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2117 = _2094 * _2094;
        float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
        float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
        float _2135 = 1.0 - _2094;
        float _2145 = (0.5 / (((_1871 * ((_2108 * _2135) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2135) + _2094) * _2108))) * _2108;
        float _4143 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2147 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
        float _2148 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2069 = (((((_2128 * _1893) + _590) * cbLight._m0[_2079].x) * _2147) * _2148) + _2005;
        _2071 = (((((_2128 * _1895) + _592) * cbLight._m0[_2079].y) * _2147) * _2148) + _2006;
        _2073 = (((((_2128 * _1896) + _593) * cbLight._m0[_2079].z) * _2147) * _2148) + _2007;
    }
    float _2183;
    float _2185;
    float _2187;
    if (_1797)
    {
        _2183 = _2069;
        _2185 = _2071;
        _2187 = _2073;
    }
    else
    {
        uint _2194 = _1702 + 3u;
        uint _2198 = _1702 + 11u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _428) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _506;
        float _2215 = cbLight._m0[_2194].y + _507;
        float _2216 = cbLight._m0[_2194].z + _508;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2194].xyz));
        float _4159 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2228 = dot(vec3(_425, _426, _427), vec3(_2221, _2222, _2223));
        float _4170 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4181 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0);
        float _2254 = 1.0 - _2213;
        float _2264 = (0.5 / (((_1871 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2254) + _2213) * _2227))) * _2227;
        float _4192 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2183 = (((((_2247 * _1893) + _590) * cbLight._m0[_2198].x) * _2266) * _2267) + _2069;
        _2185 = (((((_2247 * _1895) + _592) * cbLight._m0[_2198].y) * _2266) * _2267) + _2071;
        _2187 = (((((_2247 * _1896) + _593) * cbLight._m0[_2198].z) * _2266) * _2267) + _2073;
    }
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_1700.y == 0u)
    {
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2342;
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2342;
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2342;
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.x;
        uint _2369 = uint((float(_2357.y) * floor(float(uint(cbSceneParam._m0[85u].y * _528) / _2358))) + floor(float(uint(cbSceneParam._m0[85u].x * _527) / _2358)));
        float _2379 = (log2(_2345 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2380 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        uint _2383 = uint(isnan(14.0) ? _2380 : (isnan(_2380) ? 14.0 : min(_2380, 14.0)));
        uvec4 _2388 = texelFetch(g_lightClusterGridBuffer, int(((_2383 << 2u) + (_2369 << 6u)) >> 2u));
        uint _2389 = _2388.x;
        uint _2390 = _2357.z;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        if (((((1u << ((_2390 >> 4u) & 15u)) + 4294967295u) & _2389) == 0u) || ((_2390 & 240u) == 0u))
        {
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
        }
        else
        {
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2500;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            uint _2647 = 0u;
            uint _2656;
            bool _2657;
            for (;;)
            {
                _2656 = texelFetch(g_lightClassification, int((((_2383 << 5u) + (_2369 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                _2657 = _2656 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2657)
                {
                    frontier_phi_68_pred = _2643;
                    frontier_phi_68_pred_1 = _2646;
                    frontier_phi_68_pred_2 = _2645;
                    frontier_phi_68_pred_3 = _2644;
                    frontier_phi_68_pred_4 = _2642;
                    frontier_phi_68_pred_5 = _2641;
                }
                else
                {
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    uint _2792;
                    _2786 = _2641;
                    _2787 = _2642;
                    _2788 = _2643;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2656;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    for (;;)
                    {
                        uint _2796 = uint(findLSB(_2792)) + (_2647 << 5u);
                        uint _2793 = (_2792 + 4294967295u) & _2792;
                        uint _2798 = _2796 * 48u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 3u)).x));
                        uint _2818 = (_2796 * 48u) + 4u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2837 = (_2796 * 48u) + 8u;
                        vec3 _2848 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x));
                        float _2852 = _2812.x - _2343;
                        float _2853 = _2812.y - _2344;
                        float _2854 = _2812.z - _2345;
                        float _2855 = dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854));
                        float _2858 = inversesqrt(_2855);
                        float _2859 = _2858 * _2852;
                        float _2860 = _2858 * _2853;
                        float _2861 = _2858 * _2854;
                        float _2862 = dot(vec3(_546, _549, _552), vec3(_2859, _2860, _2861));
                        float _2867 = 1.0 - (_2855 * _2812.w);
                        float _4218 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2869 = sqrt(_2855) * _2831.w;
                        float _2872 = 1.39999997615814208984375 / (_2869 + 1.39999997615814208984375);
                        float _2873 = _2872 * _2872;
                        float _2876 = ((1.0 - _2873) * _2862) + _2873;
                        float _2879 = _2869 * _2869;
                        float _2883 = ((isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))) * _2868) / ((_2879 * 0.699999988079071044921875) + 1.0);
                        float _2887 = (-0.0) - _2343;
                        float _2888 = (-0.0) - _2344;
                        float _2889 = (-0.0) - _2345;
                        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
                        float _2894 = _2893 * _2887;
                        float _2895 = _2893 * _2888;
                        float _2896 = _2893 * _2889;
                        float _2904 = exp2(log2(1.0 / ((_2879 * 3.5) + 5.0)) * 0.25);
                        float _2905 = 1.0 - _621;
                        float _2912 = sqrt(1.0 - ((1.0 - (_2905 * _2905)) * (1.0 - (_2904 * _2904))));
                        float _2913 = _2912 * _2912;
                        float _2914 = _2913 * _2913;
                        float _2915 = _2894 + _2859;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2925 = dot(vec3(_546, _549, _552), vec3(_2894, _2895, _2896));
                        float _4234 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2929 = dot(vec3(_546, _549, _552), vec3(_2921 * _2915, _2921 * _2916, _2921 * _2917));
                        float _4245 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2932 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2936 = ((_2932 * _2932) * (_2914 + (-1.0))) + 1.0;
                        float _2937 = _2872 * _2913;
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2862) + _2938;
                        float _4256 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2943 = 1.0 - _2913;
                        float _2953 = (0.5 / (((_2942 * ((_2928 * _2943) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2942 * _2943) + _2913) * _2928))) * _2942;
                        float _4267 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2964 = (((_2914 * 3.1415927410125732421875) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) / ((_2936 * _2936) * ((_2879 * 2.1991131305694580078125) + 3.141590118408203125))) * _2868;
                        _2716 = (_2883 * _2831.x) + _2789;
                        _2717 = (_2883 * _2831.y) + _2790;
                        _2718 = (_2883 * _2831.z) + _2791;
                        _2713 = (_2964 * _2848.x) + _2786;
                        _2714 = (_2964 * _2848.y) + _2787;
                        _2715 = (_2964 * _2848.z) + _2788;
                        if (_2793 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2786 = _2713;
                            _2787 = _2714;
                            _2788 = _2715;
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2793;
                        }
                    }
                    frontier_phi_68_pred = _2715;
                    frontier_phi_68_pred_1 = _2718;
                    frontier_phi_68_pred_2 = _2717;
                    frontier_phi_68_pred_3 = _2716;
                    frontier_phi_68_pred_4 = _2714;
                    frontier_phi_68_pred_5 = _2713;
                }
                _2494 = frontier_phi_68_pred;
                _2500 = frontier_phi_68_pred_1;
                _2498 = frontier_phi_68_pred_2;
                _2496 = frontier_phi_68_pred_3;
                _2492 = frontier_phi_68_pred_4;
                _2490 = frontier_phi_68_pred_5;
                uint _2648 = _2647 + 1u;
                if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2641 = _2490;
                    _2642 = _2492;
                    _2643 = _2494;
                    _2644 = _2496;
                    _2645 = _2498;
                    _2646 = _2500;
                    _2647 = _2648;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
        }
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.z;
        uint _2506 = (_2504 >> 8u) & 15u;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((4294967295u << _2506) & _2389) == 0u)
        {
            _2609 = _2489;
            _2611 = _2491;
            _2613 = _2493;
            _2615 = _2495;
            _2617 = _2497;
            _2619 = _2499;
        }
        else
        {
            float _2634 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
            float _2635 = _2634 * _2343;
            float _2636 = _2634 * _2344;
            float _2637 = _2634 * _2345;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2506 < ((_2504 >> 12u) & 15u))
            {
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2620;
                float _2769 = _2489;
                float _2770 = _2491;
                float _2771 = _2493;
                float _2772 = _2495;
                float _2773 = _2497;
                float _2774 = _2499;
                uint _2775 = _2506;
                uint _2784;
                bool _2785;
                for (;;)
                {
                    _2784 = texelFetch(g_lightClassification, int((((_2383 << 5u) + (_2369 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                    _2785 = _2784 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2785)
                    {
                        frontier_phi_79_pred = _2774;
                        frontier_phi_79_pred_1 = _2773;
                        frontier_phi_79_pred_2 = _2772;
                        frontier_phi_79_pred_3 = _2771;
                        frontier_phi_79_pred_4 = _2770;
                        frontier_phi_79_pred_5 = _2769;
                    }
                    else
                    {
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2991 = _2769;
                        float _2992 = _2770;
                        float _2993 = _2771;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        uint _2997 = _2784;
                        uint _2998;
                        vec4 _3023;
                        float _3024;
                        vec4 _3039;
                        vec3 _3051;
                        vec4 _3067;
                        vec4 _3083;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3008 = ((_2775 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2997));
                            _2998 = (_2997 + 4294967295u) & _2997;
                            uint _3010 = _3008 * 40u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3024 = _3023.w;
                            uint _3026 = (_3008 * 40u) + 4u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3041 = (_3008 * 40u) + 8u;
                            _3051 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x));
                            uint _3054 = (_3008 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_3008 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3086 = (_3008 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3008 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2345, _3118.z, fma(_2344, _3118.y, _3118.x * _2343)) + _3118.w;
                            _3131 = !((fma(_2345, _3099.z, fma(_2344, _3099.y, _3099.x * _2343)) + _3099.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3023.x - _2343;
                                float _3159 = _3023.y - _2344;
                                float _3160 = _3023.z - _2345;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3024 * _3024));
                                float _4278 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3176 = sqrt(_3161) * _3039.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_546, _549, _552))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2345, _3067.z, fma(_2344, _3067.y, _3067.x * _2343)) + _3067.w) / _3130;
                                float _3190 = (fma(_2345, _3083.z, fma(_2344, _3083.y, _3083.x * _2343)) + _3083.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4294 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _621;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2635;
                                float _3220 = _3166 - _2636;
                                float _3221 = _3167 - _2637;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_546, _549, _552), vec3((-0.0) - _2635, (-0.0) - _2636, (-0.0) - _2637));
                                float _4305 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3233 = dot(vec3(_546, _549, _552), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4316 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_546, _549, _552), vec3(_3165, _3166, _3167))) + _3242;
                                float _4327 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4338 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3196 * _3039.z;
                                frontier_phi_85_pred_1 = _3196 * _3039.y;
                                frontier_phi_85_pred_2 = _3196 * _3039.x;
                                frontier_phi_85_pred_3 = _3270 * _3051.z;
                                frontier_phi_85_pred_4 = _3270 * _3051.y;
                                frontier_phi_85_pred_5 = _3270 * _3051.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3279 = frontier_phi_85_pred;
                            _3278 = frontier_phi_85_pred_1;
                            _3277 = frontier_phi_85_pred_2;
                            _3276 = frontier_phi_85_pred_3;
                            _3275 = frontier_phi_85_pred_4;
                            _3274 = frontier_phi_85_pred_5;
                            _2981 = _3277 + _2994;
                            _2982 = _3278 + _2995;
                            _2983 = _3279 + _2996;
                            _2978 = _3274 + _2991;
                            _2979 = _3275 + _2992;
                            _2980 = _3276 + _2993;
                            if (_2998 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2998;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2983;
                        frontier_phi_79_pred_1 = _2982;
                        frontier_phi_79_pred_2 = _2981;
                        frontier_phi_79_pred_3 = _2980;
                        frontier_phi_79_pred_4 = _2979;
                        frontier_phi_79_pred_5 = _2978;
                    }
                    _2620 = frontier_phi_79_pred;
                    _2618 = frontier_phi_79_pred_1;
                    _2616 = frontier_phi_79_pred_2;
                    _2614 = frontier_phi_79_pred_3;
                    _2612 = frontier_phi_79_pred_4;
                    _2610 = frontier_phi_79_pred_5;
                    uint _2776 = _2775 + 1u;
                    if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2769 = _2610;
                        _2770 = _2612;
                        _2771 = _2614;
                        _2772 = _2616;
                        _2773 = _2618;
                        _2774 = _2620;
                        _2775 = _2776;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2616;
                frontier_phi_60_61_ladder_1 = _2620;
                frontier_phi_60_61_ladder_2 = _2618;
                frontier_phi_60_61_ladder_3 = _2614;
                frontier_phi_60_61_ladder_4 = _2612;
                frontier_phi_60_61_ladder_5 = _2610;
            }
            else
            {
                frontier_phi_60_61_ladder = _2495;
                frontier_phi_60_61_ladder_1 = _2499;
                frontier_phi_60_61_ladder_2 = _2497;
                frontier_phi_60_61_ladder_3 = _2493;
                frontier_phi_60_61_ladder_4 = _2491;
                frontier_phi_60_61_ladder_5 = _2489;
            }
            _2609 = frontier_phi_60_61_ladder_5;
            _2611 = frontier_phi_60_61_ladder_4;
            _2613 = frontier_phi_60_61_ladder_3;
            _2615 = frontier_phi_60_61_ladder;
            _2617 = frontier_phi_60_61_ladder_2;
            _2619 = frontier_phi_60_61_ladder_1;
        }
        float _2624 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2401 = (_2624 * _2615) + _1835;
        _2403 = (_2624 * _2617) + _1837;
        _2405 = (_2624 * _2619) + _1839;
        _2407 = ((_2609 * _590) * _2624) + _2183;
        _2409 = ((_2611 * _592) * _2624) + _2185;
        _2411 = ((_2613 * _593) * _2624) + _2187;
    }
    else
    {
        _2401 = _1835;
        _2403 = _1837;
        _2405 = _1839;
        _2407 = _2183;
        _2409 = _2185;
        _2411 = _2187;
    }
    float _4354 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4365 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4376 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2428 = ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2401 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _605))) + ((_2407 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1447)) * cbPerFrame._m0[3u].x);
    float _2429 = ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2403 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _605))) + ((_2409 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1447)) * cbPerFrame._m0[3u].x);
    float _2430 = ((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2405 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _605))) + ((_2411 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1447)) * cbPerFrame._m0[3u].x);
    uint _2431 = _565 + 6u;
    float _2439 = _527 / cbSceneParam._m0[86u].x;
    float _2440 = _528 / cbSceneParam._m0[86u].y;
    vec4 _2454 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, (log2((isnan(cbSceneParam._m0[77u].w) ? _448 : (isnan(_448) ? cbSceneParam._m0[77u].w : min(_448, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2456 = _2454.x;
    float _2457 = _2454.y;
    float _2458 = _2454.z;
    float _2459 = _2454.w;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_448 > cbSceneParam._m0[78u].w)
    {
        float _2514 = isnan(_448) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _448 : min(cbSceneParam._m0[80u].w, _448));
        float _2515 = _2514 / _448;
        float _2526 = _2515 * _499;
        float _2527 = _500 * _2515;
        float _2528 = (-0.0) - _2527;
        float _2529 = _2515 * _501;
        float _2531 = (cbSceneParam._m0[77u].w * _2528) / _2514;
        float _2532 = _2531 + cbSceneParam._m0[79u].w;
        float _2533 = cbSceneParam._m0[79u].w - _2527;
        float _2539 = sqrt(((_2526 * _2526) + (_2527 * _2527)) + (_2529 * _2529));
        float _2542 = (1.0 - (cbSceneParam._m0[77u].w / _2514)) * _2539;
        float _2547 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2549 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2726;
        if (abs((_2528 - _2531) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2726 = ((((_2532 > 0.0) ? exp2(_2547 * _2532) : (2.0 - exp2(_2549 * _2532))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2542;
        }
        else
        {
            float _2670 = 1.0 / cbSceneParam._m0[80u].x;
            float _2671 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : max(_2532, _2533));
            float _2672 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : min(_2532, _2533));
            float _2681 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : min(_2671, 0.0));
            float _2682 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : min(_2672, 0.0));
            _2726 = ((abs(_2539 / _2528) * cbSceneParam._m0[80u].y) * ((((_2681 - _2682) * 2.0) - ((exp2(_2547 * (isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0)))) - exp2(_2547 * (isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0))))) * _2670)) - ((exp2(_2549 * _2681) - exp2(_2549 * _2682)) * _2670))) + (_2542 * cbSceneParam._m0[80u].z);
        }
        vec4 _2728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, 1.0), 0.0);
        float _2737 = exp2((_2726 * (-1.44269502162933349609375)) * (1.0 - _2728.w));
        float _2738 = log2(_2737);
        float _2754 = log2(_2459);
        _2551 = (exp2(_2754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].x)) * _2728.x) / cbSceneParam._m0[78u].x)) + _2456;
        _2553 = (exp2(_2754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].y)) * _2728.y) / cbSceneParam._m0[78u].y)) + _2457;
        _2555 = (exp2(_2754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].z)) * _2728.z) / cbSceneParam._m0[78u].z)) + _2458;
        _2557 = _2737 * _2459;
    }
    else
    {
        _2551 = _2456;
        _2553 = _2457;
        _2555 = _2458;
        _2557 = _2459;
    }
    bool _2764;
    vec4 _2567;
    vec4 _2589;
    float _2591;
    float _2595;
    float _2596;
    float _2597;
    float _2598;
    bool _2608;
    for (;;)
    {
        _2567 = cbMatDynParam._m0[0u];
        float _2569 = roundEven(_2567.y);
        bool _2570 = _2569 == 3.0;
        float _2571 = log2(_2557);
        float _2578 = exp2(_2571 * cbSceneParam._m0[78u].x) * _2428;
        float _2579 = exp2(_2571 * cbSceneParam._m0[78u].y) * _2429;
        float _2580 = exp2(_2571 * cbSceneParam._m0[78u].z) * _2430;
        float _2587 = _515 + (-0.5);
        _2589 = cbMtdParam._m0[1u];
        _2591 = _2589.y * _2587;
        float _2594 = (_2569 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2595 = _2594 * (_2570 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2551)));
        _2596 = _2594 * (_2570 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2553)));
        _2597 = _2594 * (_2570 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2555)));
        _2598 = _2587 * 0.999000012874603271484375;
        _2608 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2608)
        {
            if ((cbInstanceData._m0[_565 + 7u].x + _2598) < 0.5)
            {
                _2764 = true;
                break;
            }
        }
        uint _2705 = _566 + uint(_2567.w);
        if ((cbInstanceData._m0[_2705].w < 1.0) && ((cbInstanceData._m0[_2705].w + _2598) < 0.5))
        {
            _2764 = true;
            break;
        }
        if ((_2591 + 1.0) < _2589.x)
        {
            _2764 = true;
            break;
        }
        _2764 = false;
        break;
    }
    float _2969;
    if (_2764)
    {
        discard_state = true;
        _2969 = 0.0;
    }
    else
    {
        _2969 = cbInstanceData._m0[_2431].w;
    }
    SV_Target.x = _2595;
    SV_Target.y = _2596;
    SV_Target.z = _2597;
    SV_Target.w = _2969;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2431].w;
    discard_exit();
}


