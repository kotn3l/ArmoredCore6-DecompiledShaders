#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _974;
float _3626;
float _3627;
float _3628;
float _3629;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3638 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))));
    float _259 = fma(_256, _222, fma(_249, _215, _247 * _201));
    float _262 = fma(_256, _223, fma(_249, _216, _247 * _202));
    float _265 = fma(_256, _224, fma(_249, _217, _247 * _203));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _304 = (cbMtdParam._m0[11u].z + dot(vec4(_269 * _259, _269 * _262, _269 * _265, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3649 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    vec4 _322 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _327 = _322.x * cbMtdParam._m0[9u].x;
    float _328 = _322.y * cbMtdParam._m0[9u].y;
    float _329 = _322.z * cbMtdParam._m0[9u].z;
    vec4 _342 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _353 = ((_342.x - _327) * _305) + _327;
    float _354 = ((_342.y - _328) * _305) + _328;
    float _355 = ((_342.z - _329) * _305) + _329;
    vec4 _368 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = (_368.x * 2.0) + (-1.0);
    float _376 = (_368.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3660 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _385 = ((_368.z - _243) * _305) + _243;
    float _392 = ((_375 - _247) * _305) + _247;
    float _393 = ((_376 - _249) * _305) + _249;
    float _394 = ((sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) - _256) * _305) + _256;
    float _397 = fma(_394, _222, fma(_393, _215, _392 * _201));
    float _400 = fma(_394, _223, fma(_393, _216, _392 * _202));
    float _403 = fma(_394, _224, fma(_393, _217, _392 * _203));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3671 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _411 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3693 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3704 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _471 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _481 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _471);
    float _482 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _471);
    float _483 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _471);
    float _487 = inversesqrt(dot(vec3(_481, _482, _483), vec3(_481, _482, _483)));
    float _488 = _481 * _487;
    float _489 = _482 * _487;
    float _490 = _483 * _487;
    vec4 _495 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _497 = _495.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _653 = sqrt(((_481 * _481) + (_482 * _482)) + (_483 * _483));
        float _659 = (cbMatDynParam._m0[5u].x * _653) + cbMatDynParam._m0[5u].y;
        float _3715 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _664 = (cbMatDynParam._m0[5u].z * _653) + cbMatDynParam._m0[5u].w;
        float _3726 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) - _660)) + _660) < ((_497 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _509 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _510 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _529 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _532 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _535 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _548 = uint(roundEven(NORMAL.w)) * 13u;
    uint _549 = _548 + 9u;
    uint _550 = _549 + uint(cbMatDynParam._m0[0u].w);
    float _556 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_550].x;
    float _557 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_550].y;
    float _558 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_550].z;
    float _3737 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    vec4 _570 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _509, cbSceneParam._m0[86u].y * _510));
    float _573 = _570.x * TEXCOORD_9.w;
    float _574 = dot(vec3(_408, _409, _410), vec3(_488, _489, _490));
    float _577 = _574 * 2.0;
    float _581 = (_577 * _408) - _488;
    float _582 = (_577 * _409) - _489;
    float _583 = (_577 * _410) - _490;
    float _587 = abs(dot(vec3(_488, _489, _490), vec3(_408, _409, _410)));
    float _3770 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _589 = sqrt(_411);
    float _602 = exp2((_589 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _973;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _698 = fma(_642, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634));
        float _702 = fma(_642, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634));
        float _706 = fma(_642, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634));
        float _731 = _634 + _408;
        float _732 = _638 + _409;
        float _733 = _642 + _410;
        float _743 = fma(_733, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731)) - _698;
        float _744 = fma(_733, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731)) - _702;
        float _745 = fma(_733, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731)) - _706;
        float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
        float _762 = ((_749 * _743) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_698 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_749 * _744) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_702 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_749 * _745) / cbModelParam._m0[34u].z) + ((((((_706 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        float _801 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_767.x + (-0.5));
        float _803 = _801 * (_767.y + (-0.5));
        float _804 = _801 * (_767.z + (-0.5));
        float _811 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_774.x + (-0.5));
        float _813 = _811 * (_774.y + (-0.5));
        float _814 = _811 * (_774.z + (-0.5));
        float _821 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_781.x + (-0.5));
        float _823 = _821 * (_781.y + (-0.5));
        float _824 = _821 * (_781.z + (-0.5));
        float _831 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_788.x + (-0.5));
        float _833 = _831 * (_788.y + (-0.5));
        float _834 = _831 * (_788.z + (-0.5));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = _802 * 0.5;
        float _839 = _812 * 0.5;
        float _840 = _822 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _855 = (dot(vec3(_408, _409, _410), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _865 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3818 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_867 + 1.0))) + _872) * _835;
        float _882 = _803 * 0.5;
        float _883 = _813 * 0.5;
        float _884 = _823 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_408, _409, _410), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3851 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_909 + 1.0))) + _914) * _836;
        float _924 = _804 * 0.5;
        float _925 = _814 * 0.5;
        float _926 = _824 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_408, _409, _410), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3884 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_951 + 1.0))) + _956) * _837;
        _973 = _804;
        _975 = _803;
        _976 = _802;
        _977 = _814;
        _978 = _813;
        _979 = _812;
        _980 = _824;
        _981 = _823;
        _982 = _822;
        _983 = _837;
        _984 = _836;
        _985 = _835;
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
    }
    else
    {
        _973 = _974;
        _975 = _974;
        _976 = _974;
        _977 = _974;
        _978 = _974;
        _979 = _974;
        _980 = _974;
        _981 = _974;
        _982 = _974;
        _983 = _974;
        _984 = _974;
        _985 = _974;
        _986 = 0.0;
        _987 = 0.0;
        _988 = 0.0;
    }
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1017 = fma(_642, cbModelParam._m0[30u].z, fma(_638, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _634));
        float _1021 = fma(_642, cbModelParam._m0[31u].z, fma(_638, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _634));
        float _1025 = fma(_642, cbModelParam._m0[32u].z, fma(_638, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _634));
        float _1048 = _634 + _408;
        float _1049 = _638 + _409;
        float _1050 = _642 + _410;
        float _1060 = fma(_1050, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048)) - _1017;
        float _1061 = fma(_1050, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048)) - _1021;
        float _1062 = fma(_1050, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048)) - _1025;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1017 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1021 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[35u].z) + ((((((_1025 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1116 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1083.x + (-0.5));
        float _1118 = _1116 * (_1083.y + (-0.5));
        float _1119 = _1116 * (_1083.z + (-0.5));
        float _1126 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1090.x + (-0.5));
        float _1128 = _1126 * (_1090.y + (-0.5));
        float _1129 = _1126 * (_1090.z + (-0.5));
        float _1136 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1097.x + (-0.5));
        float _1138 = _1136 * (_1097.y + (-0.5));
        float _1139 = _1136 * (_1097.z + (-0.5));
        float _1146 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1104.x + (-0.5));
        float _1148 = _1146 * (_1104.y + (-0.5));
        float _1149 = _1146 * (_1104.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_408, _409, _410), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3947 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1180 + 1.0))) + _1185) * _1150;
        float _1195 = _1118 * 0.5;
        float _1196 = _1128 * 0.5;
        float _1197 = _1138 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_408, _409, _410), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3980 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1222 + 1.0))) + _1227) * _1151;
        float _1237 = _1119 * 0.5;
        float _1238 = _1129 * 0.5;
        float _1239 = _1139 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_408, _409, _410), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4013 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1264 + 1.0))) + _1269) * _1152;
        _1286 = _1119;
        _1287 = _1118;
        _1288 = _1117;
        _1289 = _1129;
        _1290 = _1128;
        _1291 = _1127;
        _1292 = _1139;
        _1293 = _1138;
        _1294 = _1137;
        _1295 = _1152;
        _1296 = _1151;
        _1297 = _1150;
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _974;
        _1287 = _974;
        _1288 = _974;
        _1289 = _974;
        _1290 = _974;
        _1291 = _974;
        _1292 = _974;
        _1293 = _974;
        _1294 = _974;
        _1295 = _974;
        _1296 = _974;
        _1297 = _974;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _986)) + _986;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _987)) + _987;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _988)) + _988;
    float _1333 = fma(_1312, cbSceneParam._m0[89u].z, fma(_1311, cbSceneParam._m0[89u].y, _1310 * cbSceneParam._m0[89u].x));
    float _1336 = fma(_1312, cbSceneParam._m0[90u].z, fma(_1311, cbSceneParam._m0[90u].y, _1310 * cbSceneParam._m0[90u].x));
    float _1339 = fma(_1312, cbSceneParam._m0[91u].z, fma(_1311, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1310));
    float _1354 = _581 * 0.5;
    float _1355 = _582 * 0.5;
    float _1356 = _583 * 0.5;
    float _1357 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1360 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1363 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1397;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1370 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_973, _977, _980, _983));
        float _1374 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_975, _978, _981, _984));
        float _1378 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_976, _979, _982, _985));
        float _1385 = dot(vec4(cbModelParam._m0[39u]), vec4(_1354, _1355, _1356, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1385) ? 0.0 : (isnan(0.0) ? _1385 : max(0.0, _1385))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1408;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1399 = dot(vec4(cbModelParam._m0[40u]), vec4(_1354, _1355, _1356, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1399) ? 0.0 : (isnan(0.0) ? _1399 : max(0.0, _1399))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1412 = (_1408 * cbModelParam._m0[1u].x) + (_1397 * (1.0 - cbModelParam._m0[1u].x));
    float _1422 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1422 : min(cbModelParam._m0[25u].z, _1422));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1472 = fma(_642, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634)) + cbModelParam._m0[13u].w;
        float _1476 = fma(_642, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634)) + cbModelParam._m0[14u].w;
        float _1480 = fma(_642, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634)) + cbModelParam._m0[15u].w;
        float _1483 = fma(_583, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581));
        float _1486 = fma(_583, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581));
        float _1489 = fma(_583, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581));
        float _1517;
        if (_1483 > 0.0)
        {
            _1517 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1517 = frontier_phi_19_17_ladder;
        }
        float _1690;
        if (_1486 > 0.0)
        {
            _1690 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1690 = frontier_phi_28_24_ladder;
        }
        float _1986;
        if (_1489 > 0.0)
        {
            _1986 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1986 = frontier_phi_40_35_ladder;
        }
        float _1988 = isnan(_1690) ? _1517 : (isnan(_1517) ? _1690 : min(_1517, _1690));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1483) + _1472;
        float _1994 = (_1989 * _1486) + _1476;
        float _1995 = (_1989 * _1489) + _1480;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1998 = (-1.0) - _1996;
        float _2000 = _1996 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1995 > _2000) || ((_1995 < _1998) || ((_1994 > _2000) || ((_1994 < _1998) || ((_1993 < _1998) || (_1993 > _2000))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1995, cbModelParam._m0[9u].z, fma(_1994, cbModelParam._m0[9u].y, _1993 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1995, cbModelParam._m0[10u].z, fma(_1994, cbModelParam._m0[10u].y, _1993 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1995, cbModelParam._m0[11u].z, fma(_1994, cbModelParam._m0[11u].y, _1993 * cbModelParam._m0[11u].x))), _1423);
            frontier_phi_18_40_ladder = _2140.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2140.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2140.x * cbModelParam._m0[1u].y;
        }
        _1505 = frontier_phi_18_40_ladder_2;
        _1507 = frontier_phi_18_40_ladder_1;
        _1509 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_581, _582, _583), _1423);
        _1505 = _1493.x * cbModelParam._m0[1u].y;
        _1507 = _1493.y * cbModelParam._m0[1u].y;
        _1509 = _1493.z * cbModelParam._m0[1u].y;
    }
    float _1513 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1513 : min(cbModelParam._m0[25u].w, _1513));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1571 = fma(_642, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634)) + cbModelParam._m0[21u].w;
        float _1575 = fma(_642, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634)) + cbModelParam._m0[22u].w;
        float _1579 = fma(_642, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634)) + cbModelParam._m0[23u].w;
        float _1582 = fma(_583, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581));
        float _1585 = fma(_583, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581));
        float _1588 = fma(_583, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581));
        float _1695;
        if (_1582 > 0.0)
        {
            _1695 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1695 = frontier_phi_30_26_ladder;
        }
        float _2013;
        if (_1585 > 0.0)
        {
            _2013 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2013 = frontier_phi_42_37_ladder;
        }
        float _2340;
        if (_1588 > 0.0)
        {
            _2340 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2340 = frontier_phi_52_49_ladder;
        }
        float _2342 = isnan(_2013) ? _1695 : (isnan(_1695) ? _2013 : min(_1695, _2013));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1582) + _1571;
        float _2348 = (_2343 * _1585) + _1575;
        float _2349 = (_2343 * _1588) + _1579;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1514);
            frontier_phi_27_52_ladder = _2467.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2467.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2467.x * cbModelParam._m0[1u].z;
        }
        _1607 = frontier_phi_27_52_ladder_2;
        _1609 = frontier_phi_27_52_ladder_1;
        _1611 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_581, _582, _583), _1514);
        _1607 = _1591.x * cbModelParam._m0[1u].z;
        _1609 = _1591.y * cbModelParam._m0[1u].z;
        _1611 = _1591.z * cbModelParam._m0[1u].z;
    }
    float _1623 = ((((1.0 - _602) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_602 * _589)) * _573;
    float _1624 = _1623 * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1625 = _1623 * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1626 = _1623 * ((cbModelParam._m0[1u].w * (_1611 - _1509)) + _1509);
    float _1629 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1624 * cbSceneParam._m0[91u].x));
    float _1669 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1673 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1681 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1682 = _1669 / _1681;
    float _1683 = _1673 / _1681;
    float _1684 = _1677 / _1681;
    float _1831;
    float _1832;
    float _1833;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1711 = ((uint(_1684 > cbSceneParam._m0[59u].y) + uint(_1684 > cbSceneParam._m0[59u].x)) + uint(_1684 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1712 = _1711 + 43u;
        uint _1720 = _1711 + 44u;
        uint _1728 = _1711 + 45u;
        uint _1736 = _1711 + 46u;
        float _1747 = fma(_1681, cbSceneParam._m0[_1712].w, fma(_1677, cbSceneParam._m0[_1712].z, fma(_1673, cbSceneParam._m0[_1712].y, _1669 * cbSceneParam._m0[_1712].x)));
        float _1751 = fma(_1681, cbSceneParam._m0[_1720].w, fma(_1677, cbSceneParam._m0[_1720].z, fma(_1673, cbSceneParam._m0[_1720].y, _1669 * cbSceneParam._m0[_1720].x)));
        float _1759 = fma(_1681, cbSceneParam._m0[_1736].w, fma(_1677, cbSceneParam._m0[_1736].z, fma(_1673, cbSceneParam._m0[_1736].y, _1669 * cbSceneParam._m0[_1736].x)));
        float _1764 = cbSceneParam._m0[33u].z * _1759;
        float _1766 = cbSceneParam._m0[33u].w * _1759;
        float _1769 = fma(_1681, cbSceneParam._m0[_1728].w, fma(_1677, cbSceneParam._m0[_1728].z, fma(_1673, cbSceneParam._m0[_1728].y, _1669 * cbSceneParam._m0[_1728].x))) / _1759;
        float _1817 = (cbSceneParam._m0[33u].x - sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684))) * cbSceneParam._m0[33u].y;
        float _4139 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1824 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1764 + _1747) / _1759, (_1766 + _1751) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 + _1747) / _1759, (_1751 - _1764) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 - _1764) / _1759, (_1751 - _1766) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 - _1766) / _1759, (_1764 + _1751) / _1759), _1769), 0.0)).x), vec4(0.25)));
        _1831 = 1.0 - (_1824 * cbSceneParam._m0[34u].x);
        _1832 = 1.0 - (_1824 * cbSceneParam._m0[34u].y);
        _1833 = 1.0 - (_1824 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1831 = 1.0;
        _1832 = 1.0;
        _1833 = 1.0;
    }
    float _1897;
    float _1899;
    float _1901;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1885 = fma(_1681, cbSceneParam._m0[63u].w, fma(_1677, cbSceneParam._m0[63u].z, fma(_1673, cbSceneParam._m0[63u].y, _1669 * cbSceneParam._m0[63u].x)));
        float _1886 = fma(_1681, cbSceneParam._m0[60u].w, fma(_1677, cbSceneParam._m0[60u].z, fma(_1673, cbSceneParam._m0[60u].y, _1669 * cbSceneParam._m0[60u].x))) / _1885;
        float _1887 = fma(_1681, cbSceneParam._m0[61u].w, fma(_1677, cbSceneParam._m0[61u].z, fma(_1673, cbSceneParam._m0[61u].y, _1669 * cbSceneParam._m0[61u].x))) / _1885;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1886 >= cbSceneParam._m0[64u].x) && (_1887 >= cbSceneParam._m0[64u].y)) && (_1886 <= cbSceneParam._m0[64u].z)) && (_1887 <= cbSceneParam._m0[64u].w))
        {
            float _2026 = fma(_1681, cbSceneParam._m0[62u].w, fma(_1677, cbSceneParam._m0[62u].z, fma(_1673, cbSceneParam._m0[62u].y, _1669 * cbSceneParam._m0[62u].x))) / _1885;
            float _2030 = isnan(cbSceneParam._m0[41u].w) ? _2026 : (isnan(_2026) ? cbSceneParam._m0[41u].w : max(_2026, cbSceneParam._m0[41u].w));
            float _2073 = (cbSceneParam._m0[33u].x - sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684))) * cbSceneParam._m0[33u].y;
            float _4155 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
            float _2080 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1886, cbSceneParam._m0[33u].w + _1887), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1886, _1887 - cbSceneParam._m0[33u].z), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1886 - cbSceneParam._m0[33u].z, _1887 - cbSceneParam._m0[33u].w), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1886 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1887), _2030), 0.0)).x), vec4(0.25)));
            float _2084 = 1.0 - (_2080 * cbSceneParam._m0[34u].x);
            float _2085 = 1.0 - (_2080 * cbSceneParam._m0[34u].y);
            float _2086 = 1.0 - (_2080 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2085) ? _1832 : (isnan(_1832) ? _2085 : min(_1832, _2085));
            frontier_phi_39_38_ladder_1 = isnan(_2084) ? _1831 : (isnan(_1831) ? _2084 : min(_1831, _2084));
            frontier_phi_39_38_ladder_2 = isnan(_2086) ? _1833 : (isnan(_1833) ? _2086 : min(_1833, _2086));
        }
        else
        {
            frontier_phi_39_38_ladder = _1832;
            frontier_phi_39_38_ladder_1 = _1831;
            frontier_phi_39_38_ladder_2 = _1833;
        }
        _1897 = frontier_phi_39_38_ladder_1;
        _1899 = frontier_phi_39_38_ladder;
        _1901 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1897 = _1831;
        _1899 = _1832;
        _1901 = _1833;
    }
    uvec4 _1906 = floatBitsToUint(cbInstanceData._m0[_548 + 5u]);
    uint _1908 = _1906.x * 14u;
    uint _1909 = _1908 + 13u;
    float _1916 = _573 + (-1.0);
    float _1921 = (cbLight._m0[_1909].x * _1916) + 1.0;
    float _1922 = (cbLight._m0[_1909].y * _1916) + 1.0;
    float _1923 = (cbLight._m0[_1909].z * _1916) + 1.0;
    float _1924 = (cbLight._m0[_1909].w * _1916) + 1.0;
    uint _1925 = _1908 + 5u;
    float _1931 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1935 = _1908 + 4u;
    float _1945 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1949 = _1908 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_408, _409, _410));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_408, _409, _410));
    float _4191 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _4202 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1925].x * _1931) * _1970) + (((cbLight._m0[_1935].x * _1897) * _1945) * _1968);
    float _1978 = ((_1931 * cbLight._m0[_1925].y) * _1970) + (((cbLight._m0[_1935].y * _1899) * _1945) * _1968);
    float _1979 = ((_1931 * cbLight._m0[_1925].z) * _1970) + (((cbLight._m0[_1935].z * _1901) * _1945) * _1968);
    uvec4 _1983 = floatBitsToUint(cbLight._m0[_1908 + 12u]);
    bool _1985 = _1983.x == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_1985)
    {
        _2087 = _1977;
        _2089 = _1978;
        _2091 = _1979;
    }
    else
    {
        uint _2095 = _1908 + 6u;
        float _2111 = (dot(vec3(cbLight._m0[_1908 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4213 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2114 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2087 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1977;
        _2089 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1978;
        _2091 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1979;
    }
    bool _2094 = _1983.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2094)
    {
        _2149 = _2087;
        _2151 = _2089;
        _2153 = _2091;
    }
    else
    {
        uint _2311 = _1908 + 7u;
        float _2327 = (dot(vec3(cbLight._m0[_1908 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4229 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2330 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2149 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2087;
        _2151 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2089;
        _2153 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2091;
    }
    uint _2156 = _1908 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _411) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_1908].x + _488;
    float _2172 = cbLight._m0[_1908].y + _489;
    float _2173 = cbLight._m0[_1908].z + _490;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1908].xyz));
    float _4245 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2185 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2186 = dot(vec3(_408, _409, _410), vec3(_2178, _2179, _2180));
    float _4267 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2178, _2179, _2180));
    float _4278 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2170;
    float _2221 = (0.5 / (((_2185 * ((_2184 * _2210) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2210) + _2170) * _2184))) * _2184;
    float _4289 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2237 = _1908 + 9u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _411) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_1949].x + _488;
    float _2251 = cbLight._m0[_1949].y + _489;
    float _2252 = cbLight._m0[_1949].z + _490;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1949].xyz));
    float _4300 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2264 = dot(vec3(_408, _409, _410), vec3(_2257, _2258, _2259));
    float _4311 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2257, _2258, _2259));
    float _4322 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2249 * _2249;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2286 = 1.0 - _2249;
    float _2296 = (0.5 / (((_2185 * ((_2263 * _2286) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2286) + _2249) * _2263))) * _2263;
    float _4333 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    float _2308 = (((_2285 * cbLight._m0[_2237].x) * _2298) * _1931) + ((((cbLight._m0[_2156].x * _1897) * _2209) * _2223) * _1945);
    float _2309 = (((_2285 * cbLight._m0[_2237].y) * _2298) * _1931) + ((((cbLight._m0[_2156].y * _1899) * _2209) * _2223) * _1945);
    float _2310 = (((_2285 * cbLight._m0[_2237].z) * _2298) * _1931) + ((((cbLight._m0[_2156].z * _1901) * _2209) * _2223) * _1945);
    float _2366;
    float _2368;
    float _2370;
    if (_1985)
    {
        _2366 = _2308;
        _2368 = _2309;
        _2370 = _2310;
    }
    else
    {
        uint _2372 = _1908 + 2u;
        uint _2376 = _1908 + 10u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _411) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _488;
        float _2393 = cbLight._m0[_2372].y + _489;
        float _2394 = cbLight._m0[_2372].z + _490;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2372].xyz));
        float _4344 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2406 = dot(vec3(_408, _409, _410), vec3(_2399, _2400, _2401));
        float _4355 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4366 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2428 = 1.0 - _2391;
        float _2438 = (0.5 / (((_2185 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2428) + _2391) * _2405))) * _2405;
        float _4377 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2366 = (((_2427 * cbLight._m0[_2376].x) * _2440) * _2441) + _2308;
        _2368 = (((_2427 * cbLight._m0[_2376].y) * _2440) * _2441) + _2309;
        _2370 = (((_2427 * cbLight._m0[_2376].z) * _2440) * _2441) + _2310;
    }
    float _2472;
    float _2474;
    float _2476;
    if (_2094)
    {
        _2472 = _2366;
        _2474 = _2368;
        _2476 = _2370;
    }
    else
    {
        uint _2483 = _1908 + 3u;
        uint _2487 = _1908 + 11u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _411) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _488;
        float _2504 = cbLight._m0[_2483].y + _489;
        float _2505 = cbLight._m0[_2483].z + _490;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2483].xyz));
        float _4393 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2517 = dot(vec3(_408, _409, _410), vec3(_2510, _2511, _2512));
        float _4404 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4415 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2538 = (exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2539 = 1.0 - _2502;
        float _2549 = (0.5 / (((_2185 * ((_2516 * _2539) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2539) + _2502) * _2516))) * _2516;
        float _4426 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2472 = (((_2538 * cbLight._m0[_2487].x) * _2551) * _2552) + _2366;
        _2474 = (((_2538 * cbLight._m0[_2487].y) * _2551) * _2552) + _2368;
        _2476 = (((_2538 * cbLight._m0[_2487].z) * _2551) * _2552) + _2370;
    }
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_1906.y == 0u)
    {
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.x;
        uint _2585 = uint((float(_2573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _510) / _2574))) + floor(float(uint(cbSceneParam._m0[85u].x * _509) / _2574)));
        float _2595 = (log2(_1684 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2596 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        uint _2599 = uint(isnan(14.0) ? _2596 : (isnan(_2596) ? 14.0 : min(_2596, 14.0)));
        uvec4 _2604 = texelFetch(g_lightClusterGridBuffer, int(((_2599 << 2u) + (_2585 << 6u)) >> 2u));
        uint _2605 = _2604.x;
        uint _2606 = _2573.z;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((((1u << ((_2606 >> 4u) & 15u)) + 4294967295u) & _2605) == 0u) || ((_2606 & 240u) == 0u))
        {
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
        }
        else
        {
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2852)
                {
                    frontier_phi_73_pred = _2841;
                    frontier_phi_73_pred_1 = _2840;
                    frontier_phi_73_pred_2 = _2839;
                    frontier_phi_73_pred_3 = _2838;
                    frontier_phi_73_pred_4 = _2837;
                    frontier_phi_73_pred_5 = _2836;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2851;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2842 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _1682;
                        float _3048 = _3007.y - _1683;
                        float _3049 = _3007.z - _1684;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_529, _532, _535), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4452 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _1682;
                        float _3083 = (-0.0) - _1683;
                        float _3084 = (-0.0) - _1684;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3098 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3099 = 1.0 - _589;
                        float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                        float _3107 = _3106 * _3106;
                        float _3108 = _3107 * _3107;
                        float _3109 = _3089 + _3054;
                        float _3110 = _3090 + _3055;
                        float _3111 = _3091 + _3056;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3119 = dot(vec3(_529, _532, _535), vec3(_3089, _3090, _3091));
                        float _4468 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3123 = dot(vec3(_529, _532, _535), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                        float _4479 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                        float _3131 = _3067 * _3107;
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3057) + _3132;
                        float _4490 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3137 = 1.0 - _3107;
                        float _3147 = (0.5 / (((_3136 * ((_3122 * _3137) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3107) * _3122))) * _3136;
                        float _4501 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3158 = (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) / ((_3130 * _3130) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2911 = (_3078 * _3026.x) + _2984;
                        _2912 = (_3078 * _3026.y) + _2985;
                        _2913 = (_3078 * _3026.z) + _2986;
                        _2908 = (_3158 * _3043.x) + _2981;
                        _2909 = (_3158 * _3043.y) + _2982;
                        _2910 = (_3158 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_73_pred = _2913;
                    frontier_phi_73_pred_1 = _2912;
                    frontier_phi_73_pred_2 = _2911;
                    frontier_phi_73_pred_3 = _2910;
                    frontier_phi_73_pred_4 = _2909;
                    frontier_phi_73_pred_5 = _2908;
                }
                _2695 = frontier_phi_73_pred;
                _2693 = frontier_phi_73_pred_1;
                _2691 = frontier_phi_73_pred_2;
                _2689 = frontier_phi_73_pred_3;
                _2687 = frontier_phi_73_pred_4;
                _2685 = frontier_phi_73_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2685;
                    _2837 = _2687;
                    _2838 = _2689;
                    _2839 = _2691;
                    _2840 = _2693;
                    _2841 = _2695;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
        }
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.z;
        uint _2701 = (_2699 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2701) & _2605) == 0u)
        {
            _2804 = _2684;
            _2806 = _2686;
            _2808 = _2688;
            _2810 = _2690;
            _2812 = _2692;
            _2814 = _2694;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
            float _2830 = _2829 * _1682;
            float _2831 = _2829 * _1683;
            float _2832 = _2829 * _1684;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2701 < ((_2699 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2964 = _2684;
                float _2965 = _2686;
                float _2966 = _2688;
                float _2967 = _2690;
                float _2968 = _2692;
                float _2969 = _2694;
                uint _2970 = _2701;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2980)
                    {
                        frontier_phi_84_pred = _2968;
                        frontier_phi_84_pred_1 = _2967;
                        frontier_phi_84_pred_2 = _2966;
                        frontier_phi_84_pred_3 = _2965;
                        frontier_phi_84_pred_4 = _2964;
                        frontier_phi_84_pred_5 = _2969;
                    }
                    else
                    {
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3185 = _2964;
                        float _3186 = _2965;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        uint _3191 = _2979;
                        uint _3192;
                        vec4 _3217;
                        float _3218;
                        vec4 _3233;
                        vec3 _3245;
                        vec4 _3261;
                        vec4 _3277;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3202 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3191));
                            _3192 = (_3191 + 4294967295u) & _3191;
                            uint _3204 = _3202 * 40u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3218 = _3217.w;
                            uint _3220 = (_3202 * 40u) + 4u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3202 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3248 = (_3202 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3202 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3280 = (_3202 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3202 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_1684, _3312.z, fma(_1683, _3312.y, _3312.x * _1682)) + _3312.w;
                            _3325 = !((fma(_1684, _3293.z, fma(_1683, _3293.y, _3293.x * _1682)) + _3293.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3217.x - _1682;
                                float _3353 = _3217.y - _1683;
                                float _3354 = _3217.z - _1684;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3218 * _3218));
                                float _4512 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3370 = sqrt(_3355) * _3233.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_529, _532, _535))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_1684, _3261.z, fma(_1683, _3261.y, _3261.x * _1682)) + _3261.w) / _3324;
                                float _3384 = (fma(_1684, _3277.z, fma(_1683, _3277.y, _3277.x * _1682)) + _3277.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4528 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _589;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2830;
                                float _3414 = _3360 - _2831;
                                float _3415 = _3361 - _2832;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_529, _532, _535), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4539 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3427 = dot(vec3(_529, _532, _535), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4550 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_529, _532, _535), vec3(_3359, _3360, _3361))) + _3436;
                                float _4561 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4572 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3390 * _3233.y;
                                frontier_phi_90_pred_1 = _3390 * _3233.x;
                                frontier_phi_90_pred_2 = _3464 * _3245.z;
                                frontier_phi_90_pred_3 = _3464 * _3245.y;
                                frontier_phi_90_pred_4 = _3464 * _3245.x;
                                frontier_phi_90_pred_5 = _3390 * _3233.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_90_pred;
                            _3471 = frontier_phi_90_pred_1;
                            _3470 = frontier_phi_90_pred_2;
                            _3469 = frontier_phi_90_pred_3;
                            _3468 = frontier_phi_90_pred_4;
                            _3473 = frontier_phi_90_pred_5;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            _3177 = _3473 + _3190;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            if (_3192 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3192;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3176;
                        frontier_phi_84_pred_1 = _3175;
                        frontier_phi_84_pred_2 = _3174;
                        frontier_phi_84_pred_3 = _3173;
                        frontier_phi_84_pred_4 = _3172;
                        frontier_phi_84_pred_5 = _3177;
                    }
                    _2813 = frontier_phi_84_pred;
                    _2811 = frontier_phi_84_pred_1;
                    _2809 = frontier_phi_84_pred_2;
                    _2807 = frontier_phi_84_pred_3;
                    _2805 = frontier_phi_84_pred_4;
                    _2815 = frontier_phi_84_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2805;
                        _2965 = _2807;
                        _2966 = _2809;
                        _2967 = _2811;
                        _2968 = _2813;
                        _2969 = _2815;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2815;
                frontier_phi_65_66_ladder_1 = _2811;
                frontier_phi_65_66_ladder_2 = _2813;
                frontier_phi_65_66_ladder_3 = _2807;
                frontier_phi_65_66_ladder_4 = _2805;
                frontier_phi_65_66_ladder_5 = _2809;
            }
            else
            {
                frontier_phi_65_66_ladder = _2694;
                frontier_phi_65_66_ladder_1 = _2690;
                frontier_phi_65_66_ladder_2 = _2692;
                frontier_phi_65_66_ladder_3 = _2686;
                frontier_phi_65_66_ladder_4 = _2684;
                frontier_phi_65_66_ladder_5 = _2688;
            }
            _2804 = frontier_phi_65_66_ladder_4;
            _2806 = frontier_phi_65_66_ladder_3;
            _2808 = frontier_phi_65_66_ladder_5;
            _2810 = frontier_phi_65_66_ladder_1;
            _2812 = frontier_phi_65_66_ladder_2;
            _2814 = frontier_phi_65_66_ladder;
        }
        float _2819 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
        _2617 = (_2819 * _2810) + _2149;
        _2619 = (_2819 * _2812) + _2151;
        _2621 = (_2819 * _2814) + _2153;
        _2623 = ((_2804 * 0.039999999105930328369140625) * _2819) + _2472;
        _2625 = ((_2806 * 0.039999999105930328369140625) * _2819) + _2474;
        _2627 = ((_2808 * 0.039999999105930328369140625) * _2819) + _2476;
    }
    else
    {
        _2617 = _2149;
        _2619 = _2151;
        _2621 = _2153;
        _2623 = _2472;
        _2625 = _2474;
        _2627 = _2476;
    }
    float _4588 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4599 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4610 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _2644 = ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2617 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _573))) + ((_2623 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1412)) * cbPerFrame._m0[3u].x);
    float _2645 = ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2619 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _573))) + ((_2625 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1412)) * cbPerFrame._m0[3u].x);
    float _2646 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2621 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _573))) + ((_2627 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1412)) * cbPerFrame._m0[3u].x);
    uint _2647 = _548 + 6u;
    float _2655 = _509 / cbSceneParam._m0[86u].x;
    float _2656 = _510 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _2709 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _2710 = _2709 / _430;
        float _2721 = _2710 * _481;
        float _2722 = _482 * _2710;
        float _2723 = (-0.0) - _2722;
        float _2724 = _2710 * _483;
        float _2726 = (cbSceneParam._m0[77u].w * _2723) / _2709;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2722;
        float _2734 = sqrt(((_2721 * _2721) + (_2722 * _2722)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2709)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2723 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2867 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2921 = ((abs(_2734 / _2723) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2744 * _2876) - exp2(_2744 * _2877)) * _2865))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2675);
        _2746 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2748 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2750 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2752 = _2932 * _2675;
    }
    else
    {
        _2746 = _2672;
        _2748 = _2673;
        _2750 = _2674;
        _2752 = _2675;
    }
    bool _2959;
    vec4 _2762;
    vec4 _2784;
    float _2786;
    float _2790;
    float _2791;
    float _2792;
    float _2793;
    bool _2803;
    for (;;)
    {
        _2762 = cbMatDynParam._m0[0u];
        float _2764 = roundEven(_2762.y);
        bool _2765 = _2764 == 3.0;
        float _2766 = log2(_2752);
        float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * _2644;
        float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * _2645;
        float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * _2646;
        float _2782 = _497 + (-0.5);
        _2784 = cbMtdParam._m0[1u];
        _2786 = _2784.y * _2782;
        float _2789 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2790 = _2789 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
        _2791 = _2789 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
        _2792 = _2789 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
        _2793 = _2782 * 0.999000012874603271484375;
        _2803 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2803)
        {
            if ((cbInstanceData._m0[_548 + 7u].x + _2793) < 0.5)
            {
                _2959 = true;
                break;
            }
        }
        uint _2900 = _549 + uint(_2762.w);
        if ((cbInstanceData._m0[_2900].w < 1.0) && ((cbInstanceData._m0[_2900].w + _2793) < 0.5))
        {
            _2959 = true;
            break;
        }
        if ((_2786 + 1.0) < _2784.x)
        {
            _2959 = true;
            break;
        }
        _2959 = false;
        break;
    }
    float _3163;
    if (_2959)
    {
        discard_state = true;
        _3163 = 0.0;
    }
    else
    {
        _3163 = cbInstanceData._m0[_2647].w;
    }
    SV_Target.x = _2790;
    SV_Target.y = _2791;
    SV_Target.z = _2792;
    SV_Target.w = _3163;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2647].w;
    discard_exit();
}


