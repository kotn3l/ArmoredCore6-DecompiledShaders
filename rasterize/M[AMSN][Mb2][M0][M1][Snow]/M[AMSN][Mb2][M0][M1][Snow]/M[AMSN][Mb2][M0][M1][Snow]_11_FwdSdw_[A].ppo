#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _992;
float _3665;
float _3666;
float _3667;
float _3668;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3677 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))));
    float _259 = fma(_256, _222, fma(_249, _215, _247 * _201));
    float _262 = fma(_256, _223, fma(_249, _216, _247 * _202));
    float _265 = fma(_256, _224, fma(_249, _217, _247 * _203));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _286 = cbMtdParam._m0[11u].z + dot(vec4(_269 * _259, _269 * _262, _269 * _265, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3688 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _287 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    vec4 _305 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _310 = _305.x * cbMtdParam._m0[9u].x;
    float _311 = _305.y * cbMtdParam._m0[9u].y;
    float _312 = _305.z * cbMtdParam._m0[9u].z;
    vec4 _325 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _336 = ((_325.x - _310) * _287) + _310;
    float _337 = ((_325.y - _311) * _287) + _311;
    float _338 = ((_325.z - _312) * _287) + _312;
    vec4 _351 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _353 = _351.x;
    float _355 = _353 - (_353 * _287);
    vec4 _368 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = (_368.x * 2.0) + (-1.0);
    float _376 = (_368.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3699 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _385 = ((_368.z - _243) * _287) + _243;
    float _392 = ((_375 - _247) * _287) + _247;
    float _393 = ((_376 - _249) * _287) + _249;
    float _394 = ((sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) - _256) * _287) + _256;
    float _397 = fma(_394, _222, fma(_393, _215, _392 * _201));
    float _400 = fma(_394, _223, fma(_393, _216, _392 * _202));
    float _403 = fma(_394, _224, fma(_393, _217, _392 * _203));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3710 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _411 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3732 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3743 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3754 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _415 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _482 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _472);
    float _483 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _472);
    float _484 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _472);
    float _488 = inversesqrt(dot(vec3(_482, _483, _484), vec3(_482, _483, _484)));
    float _489 = _482 * _488;
    float _490 = _483 * _488;
    float _491 = _484 * _488;
    vec4 _496 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _498 = _496.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _671 = sqrt(((_482 * _482) + (_483 * _483)) + (_484 * _484));
        float _677 = (cbMatDynParam._m0[5u].x * _671) + cbMatDynParam._m0[5u].y;
        float _3765 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _682 = (cbMatDynParam._m0[5u].z * _671) + cbMatDynParam._m0[5u].w;
        float _3776 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) - _678)) + _678) < ((_498 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _510 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _511 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _529 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _532 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _535 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _548 = uint(roundEven(NORMAL.w)) * 13u;
    uint _549 = _548 + 9u;
    uint _550 = _549 + uint(cbMatDynParam._m0[0u].w);
    float _556 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_550].x;
    float _557 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_550].y;
    float _558 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_550].z;
    float _3787 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _562 = 1.0 - _415;
    float _563 = _559 * _562;
    float _564 = _560 * _562;
    float _565 = _561 * _562;
    float _570 = (_559 + (-0.039999999105930328369140625)) * _415;
    float _571 = (_560 + (-0.039999999105930328369140625)) * _415;
    float _572 = (_561 + (-0.039999999105930328369140625)) * _415;
    float _573 = _570 + 0.039999999105930328369140625;
    float _575 = _571 + 0.039999999105930328369140625;
    float _576 = _572 + 0.039999999105930328369140625;
    vec4 _585 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _510, cbSceneParam._m0[86u].y * _511));
    float _588 = _585.x * TEXCOORD_9.w;
    float _589 = dot(vec3(_408, _409, _410), vec3(_489, _490, _491));
    float _592 = _589 * 2.0;
    float _596 = (_592 * _408) - _489;
    float _597 = (_592 * _409) - _490;
    float _598 = (_592 * _410) - _491;
    float _602 = abs(dot(vec3(_489, _490, _491), vec3(_408, _409, _410)));
    float _3820 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _604 = sqrt(_411);
    float _617 = exp2((_604 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_604 * 3.0));
    float _623 = (1.0 - _617) * ((_604 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _624 = _617 * _604;
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _991;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = fma(_660, cbModelParam._m0[26u].z, fma(_656, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652));
        float _720 = fma(_660, cbModelParam._m0[27u].z, fma(_656, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652));
        float _724 = fma(_660, cbModelParam._m0[28u].z, fma(_656, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652));
        float _749 = _652 + _408;
        float _750 = _656 + _409;
        float _751 = _660 + _410;
        float _761 = fma(_751, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749)) - _716;
        float _762 = fma(_751, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749)) - _720;
        float _763 = fma(_751, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749)) - _724;
        float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
        float _780 = ((_767 * _761) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_716 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_767 * _762) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_720 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_767 * _763) / cbModelParam._m0[34u].z) + ((((((_724 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        float _819 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_785.x + (-0.5));
        float _821 = _819 * (_785.y + (-0.5));
        float _822 = _819 * (_785.z + (-0.5));
        float _829 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_792.x + (-0.5));
        float _831 = _829 * (_792.y + (-0.5));
        float _832 = _829 * (_792.z + (-0.5));
        float _839 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_799.x + (-0.5));
        float _841 = _839 * (_799.y + (-0.5));
        float _842 = _839 * (_799.z + (-0.5));
        float _849 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_806.x + (-0.5));
        float _851 = _849 * (_806.y + (-0.5));
        float _852 = _849 * (_806.z + (-0.5));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = _820 * 0.5;
        float _857 = _830 * 0.5;
        float _858 = _840 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _873 = (dot(vec3(_408, _409, _410), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _883 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3868 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_885 + 1.0))) + _890) * _853;
        float _900 = _821 * 0.5;
        float _901 = _831 * 0.5;
        float _902 = _841 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_408, _409, _410), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3901 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_927 + 1.0))) + _932) * _854;
        float _942 = _822 * 0.5;
        float _943 = _832 * 0.5;
        float _944 = _842 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_408, _409, _410), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3934 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_969 + 1.0))) + _974) * _855;
        _991 = _822;
        _993 = _821;
        _994 = _820;
        _995 = _832;
        _996 = _831;
        _997 = _830;
        _998 = _842;
        _999 = _841;
        _1000 = _840;
        _1001 = _855;
        _1002 = _854;
        _1003 = _853;
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
    }
    else
    {
        _991 = _992;
        _993 = _992;
        _994 = _992;
        _995 = _992;
        _996 = _992;
        _997 = _992;
        _998 = _992;
        _999 = _992;
        _1000 = _992;
        _1001 = _992;
        _1002 = _992;
        _1003 = _992;
        _1004 = 0.0;
        _1005 = 0.0;
        _1006 = 0.0;
    }
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1035 = fma(_660, cbModelParam._m0[30u].z, fma(_656, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _652));
        float _1039 = fma(_660, cbModelParam._m0[31u].z, fma(_656, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _652));
        float _1043 = fma(_660, cbModelParam._m0[32u].z, fma(_656, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _652));
        float _1066 = _652 + _408;
        float _1067 = _656 + _409;
        float _1068 = _660 + _410;
        float _1078 = fma(_1068, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066)) - _1035;
        float _1079 = fma(_1068, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066)) - _1039;
        float _1080 = fma(_1068, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066)) - _1043;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1035 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1039 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[35u].z) + ((((((_1043 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1134 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1101.x + (-0.5));
        float _1136 = _1134 * (_1101.y + (-0.5));
        float _1137 = _1134 * (_1101.z + (-0.5));
        float _1144 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1108.x + (-0.5));
        float _1146 = _1144 * (_1108.y + (-0.5));
        float _1147 = _1144 * (_1108.z + (-0.5));
        float _1154 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1115.x + (-0.5));
        float _1156 = _1154 * (_1115.y + (-0.5));
        float _1157 = _1154 * (_1115.z + (-0.5));
        float _1164 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1122.x + (-0.5));
        float _1166 = _1164 * (_1122.y + (-0.5));
        float _1167 = _1164 * (_1122.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_408, _409, _410), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3997 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1198 + 1.0))) + _1203) * _1168;
        float _1213 = _1136 * 0.5;
        float _1214 = _1146 * 0.5;
        float _1215 = _1156 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_408, _409, _410), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4030 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1240 + 1.0))) + _1245) * _1169;
        float _1255 = _1137 * 0.5;
        float _1256 = _1147 * 0.5;
        float _1257 = _1157 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_408, _409, _410), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4063 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1282 + 1.0))) + _1287) * _1170;
        _1304 = _1137;
        _1305 = _1136;
        _1306 = _1135;
        _1307 = _1147;
        _1308 = _1146;
        _1309 = _1145;
        _1310 = _1157;
        _1311 = _1156;
        _1312 = _1155;
        _1313 = _1170;
        _1314 = _1169;
        _1315 = _1168;
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _992;
        _1305 = _992;
        _1306 = _992;
        _1307 = _992;
        _1308 = _992;
        _1309 = _992;
        _1310 = _992;
        _1311 = _992;
        _1312 = _992;
        _1313 = _992;
        _1314 = _992;
        _1315 = _992;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1004)) + _1004;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1351 = fma(_1330, cbSceneParam._m0[89u].z, fma(_1329, cbSceneParam._m0[89u].y, _1328 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1330, cbSceneParam._m0[90u].z, fma(_1329, cbSceneParam._m0[90u].y, _1328 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1330, cbSceneParam._m0[91u].z, fma(_1329, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1328));
    float _1372 = _596 * 0.5;
    float _1373 = _597 * 0.5;
    float _1374 = _598 * 0.5;
    float _1375 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1378 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1381 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1415;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1388 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_991, _995, _998, _1001));
        float _1392 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_993, _996, _999, _1002));
        float _1396 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_994, _997, _1000, _1003));
        float _1403 = dot(vec4(cbModelParam._m0[39u]), vec4(_1372, _1373, _1374, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1426;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1417 = dot(vec4(cbModelParam._m0[40u]), vec4(_1372, _1373, _1374, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1430 = (_1426 * cbModelParam._m0[1u].x) + (_1415 * (1.0 - cbModelParam._m0[1u].x));
    float _1440 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1440 : min(cbModelParam._m0[25u].z, _1440));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1490 = fma(_660, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652)) + cbModelParam._m0[13u].w;
        float _1494 = fma(_660, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652)) + cbModelParam._m0[14u].w;
        float _1498 = fma(_660, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652)) + cbModelParam._m0[15u].w;
        float _1501 = fma(_598, cbModelParam._m0[13u].z, fma(_597, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596));
        float _1504 = fma(_598, cbModelParam._m0[14u].z, fma(_597, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596));
        float _1507 = fma(_598, cbModelParam._m0[15u].z, fma(_597, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596));
        float _1535;
        if (_1501 > 0.0)
        {
            _1535 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1535 = frontier_phi_19_17_ladder;
        }
        float _1710;
        if (_1504 > 0.0)
        {
            _1710 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1710 = frontier_phi_28_24_ladder;
        }
        float _2006;
        if (_1507 > 0.0)
        {
            _2006 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2006 = frontier_phi_40_35_ladder;
        }
        float _2008 = isnan(_1710) ? _1535 : (isnan(_1535) ? _1710 : min(_1535, _1710));
        float _2009 = isnan(_2006) ? _2008 : (isnan(_2008) ? _2006 : min(_2008, _2006));
        float _2013 = (_2009 * _1501) + _1490;
        float _2014 = (_2009 * _1504) + _1494;
        float _2015 = (_2009 * _1507) + _1498;
        float _2016 = _2009 * 9.9999997473787516355514526367188e-05;
        float _2018 = (-1.0) - _2016;
        float _2020 = _2016 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2015 > _2020) || ((_2015 < _2018) || ((_2014 > _2020) || ((_2014 < _2018) || ((_2013 < _2018) || (_2013 > _2020))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2015, cbModelParam._m0[9u].z, fma(_2014, cbModelParam._m0[9u].y, _2013 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2015, cbModelParam._m0[10u].z, fma(_2014, cbModelParam._m0[10u].y, _2013 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2015, cbModelParam._m0[11u].z, fma(_2014, cbModelParam._m0[11u].y, _2013 * cbModelParam._m0[11u].x))), _1441);
            frontier_phi_18_40_ladder = _2160.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2160.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2160.x * cbModelParam._m0[1u].y;
        }
        _1523 = frontier_phi_18_40_ladder_2;
        _1525 = frontier_phi_18_40_ladder_1;
        _1527 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_596, _597, _598), _1441);
        _1523 = _1511.x * cbModelParam._m0[1u].y;
        _1525 = _1511.y * cbModelParam._m0[1u].y;
        _1527 = _1511.z * cbModelParam._m0[1u].y;
    }
    float _1531 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1532 = isnan(_1531) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1531 : min(cbModelParam._m0[25u].w, _1531));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1589 = fma(_660, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652)) + cbModelParam._m0[21u].w;
        float _1593 = fma(_660, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652)) + cbModelParam._m0[22u].w;
        float _1597 = fma(_660, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652)) + cbModelParam._m0[23u].w;
        float _1600 = fma(_598, cbModelParam._m0[21u].z, fma(_597, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596));
        float _1603 = fma(_598, cbModelParam._m0[22u].z, fma(_597, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596));
        float _1606 = fma(_598, cbModelParam._m0[23u].z, fma(_597, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596));
        float _1715;
        if (_1600 > 0.0)
        {
            _1715 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1715 = frontier_phi_30_26_ladder;
        }
        float _2033;
        if (_1603 > 0.0)
        {
            _2033 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2033 = frontier_phi_42_37_ladder;
        }
        float _2371;
        if (_1606 > 0.0)
        {
            _2371 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2371 = frontier_phi_52_49_ladder;
        }
        float _2373 = isnan(_2033) ? _1715 : (isnan(_1715) ? _2033 : min(_1715, _2033));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1600) + _1589;
        float _2379 = (_2374 * _1603) + _1593;
        float _2380 = (_2374 * _1606) + _1597;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1532);
            frontier_phi_27_52_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1625 = frontier_phi_27_52_ladder_2;
        _1627 = frontier_phi_27_52_ladder_1;
        _1629 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_596, _597, _598), _1532);
        _1625 = _1609.x * cbModelParam._m0[1u].z;
        _1627 = _1609.y * cbModelParam._m0[1u].z;
        _1629 = _1609.z * cbModelParam._m0[1u].z;
    }
    float _1642 = (((_623 * _573) + _624) * _588) * ((cbModelParam._m0[1u].w * (_1625 - _1523)) + _1523);
    float _1644 = (((_623 * _575) + _624) * _588) * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1646 = (((_623 * _576) + _624) * _588) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1642 * cbSceneParam._m0[91u].x));
    float _1689 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1693 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1702 = _1689 / _1701;
    float _1703 = _1693 / _1701;
    float _1704 = _1697 / _1701;
    float _1851;
    float _1852;
    float _1853;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1731 = ((uint(_1704 > cbSceneParam._m0[59u].y) + uint(_1704 > cbSceneParam._m0[59u].x)) + uint(_1704 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1732 = _1731 + 43u;
        uint _1740 = _1731 + 44u;
        uint _1748 = _1731 + 45u;
        uint _1756 = _1731 + 46u;
        float _1767 = fma(_1701, cbSceneParam._m0[_1732].w, fma(_1697, cbSceneParam._m0[_1732].z, fma(_1693, cbSceneParam._m0[_1732].y, _1689 * cbSceneParam._m0[_1732].x)));
        float _1771 = fma(_1701, cbSceneParam._m0[_1740].w, fma(_1697, cbSceneParam._m0[_1740].z, fma(_1693, cbSceneParam._m0[_1740].y, _1689 * cbSceneParam._m0[_1740].x)));
        float _1779 = fma(_1701, cbSceneParam._m0[_1756].w, fma(_1697, cbSceneParam._m0[_1756].z, fma(_1693, cbSceneParam._m0[_1756].y, _1689 * cbSceneParam._m0[_1756].x)));
        float _1784 = cbSceneParam._m0[33u].z * _1779;
        float _1786 = cbSceneParam._m0[33u].w * _1779;
        float _1789 = fma(_1701, cbSceneParam._m0[_1748].w, fma(_1697, cbSceneParam._m0[_1748].z, fma(_1693, cbSceneParam._m0[_1748].y, _1689 * cbSceneParam._m0[_1748].x))) / _1779;
        float _1837 = (cbSceneParam._m0[33u].x - sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704))) * cbSceneParam._m0[33u].y;
        float _4189 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1844 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1784 + _1767) / _1779, (_1786 + _1771) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1786 + _1767) / _1779, (_1771 - _1784) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 - _1784) / _1779, (_1771 - _1786) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 - _1786) / _1779, (_1784 + _1771) / _1779), _1789), 0.0)).x), vec4(0.25)));
        _1851 = 1.0 - (_1844 * cbSceneParam._m0[34u].x);
        _1852 = 1.0 - (_1844 * cbSceneParam._m0[34u].y);
        _1853 = 1.0 - (_1844 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1851 = 1.0;
        _1852 = 1.0;
        _1853 = 1.0;
    }
    float _1917;
    float _1919;
    float _1921;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1905 = fma(_1701, cbSceneParam._m0[63u].w, fma(_1697, cbSceneParam._m0[63u].z, fma(_1693, cbSceneParam._m0[63u].y, _1689 * cbSceneParam._m0[63u].x)));
        float _1906 = fma(_1701, cbSceneParam._m0[60u].w, fma(_1697, cbSceneParam._m0[60u].z, fma(_1693, cbSceneParam._m0[60u].y, _1689 * cbSceneParam._m0[60u].x))) / _1905;
        float _1907 = fma(_1701, cbSceneParam._m0[61u].w, fma(_1697, cbSceneParam._m0[61u].z, fma(_1693, cbSceneParam._m0[61u].y, _1689 * cbSceneParam._m0[61u].x))) / _1905;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1906 >= cbSceneParam._m0[64u].x) && (_1907 >= cbSceneParam._m0[64u].y)) && (_1906 <= cbSceneParam._m0[64u].z)) && (_1907 <= cbSceneParam._m0[64u].w))
        {
            float _2046 = fma(_1701, cbSceneParam._m0[62u].w, fma(_1697, cbSceneParam._m0[62u].z, fma(_1693, cbSceneParam._m0[62u].y, _1689 * cbSceneParam._m0[62u].x))) / _1905;
            float _2050 = isnan(cbSceneParam._m0[41u].w) ? _2046 : (isnan(_2046) ? cbSceneParam._m0[41u].w : max(_2046, cbSceneParam._m0[41u].w));
            float _2093 = (cbSceneParam._m0[33u].x - sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704))) * cbSceneParam._m0[33u].y;
            float _4205 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
            float _2100 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1906, cbSceneParam._m0[33u].w + _1907), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1906, _1907 - cbSceneParam._m0[33u].z), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1906 - cbSceneParam._m0[33u].z, _1907 - cbSceneParam._m0[33u].w), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1906 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1907), _2050), 0.0)).x), vec4(0.25)));
            float _2104 = 1.0 - (_2100 * cbSceneParam._m0[34u].x);
            float _2105 = 1.0 - (_2100 * cbSceneParam._m0[34u].y);
            float _2106 = 1.0 - (_2100 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2105) ? _1852 : (isnan(_1852) ? _2105 : min(_1852, _2105));
            frontier_phi_39_38_ladder_1 = isnan(_2104) ? _1851 : (isnan(_1851) ? _2104 : min(_1851, _2104));
            frontier_phi_39_38_ladder_2 = isnan(_2106) ? _1853 : (isnan(_1853) ? _2106 : min(_1853, _2106));
        }
        else
        {
            frontier_phi_39_38_ladder = _1852;
            frontier_phi_39_38_ladder_1 = _1851;
            frontier_phi_39_38_ladder_2 = _1853;
        }
        _1917 = frontier_phi_39_38_ladder_1;
        _1919 = frontier_phi_39_38_ladder;
        _1921 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1917 = _1851;
        _1919 = _1852;
        _1921 = _1853;
    }
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_548 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1936 = _588 + (-1.0);
    float _1941 = (cbLight._m0[_1929].x * _1936) + 1.0;
    float _1942 = (cbLight._m0[_1929].y * _1936) + 1.0;
    float _1943 = (cbLight._m0[_1929].z * _1936) + 1.0;
    float _1944 = (cbLight._m0[_1929].w * _1936) + 1.0;
    uint _1945 = _1928 + 5u;
    float _1951 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1955 = _1928 + 4u;
    float _1965 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1969 = _1928 | 1u;
    float _1980 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_408, _409, _410));
    float _1983 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_408, _409, _410));
    float _4241 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _4252 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1988 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _1990 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _1997 = ((cbLight._m0[_1945].x * _1951) * _1990) + (((cbLight._m0[_1955].x * _1917) * _1965) * _1988);
    float _1998 = ((_1951 * cbLight._m0[_1945].y) * _1990) + (((cbLight._m0[_1955].y * _1919) * _1965) * _1988);
    float _1999 = ((_1951 * cbLight._m0[_1945].z) * _1990) + (((cbLight._m0[_1955].z * _1921) * _1965) * _1988);
    uvec4 _2003 = floatBitsToUint(cbLight._m0[_1928 + 12u]);
    bool _2005 = _2003.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2005)
    {
        _2107 = _1997;
        _2109 = _1998;
        _2111 = _1999;
    }
    else
    {
        uint _2115 = _1928 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_1928 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4263 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2134 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1997;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1998;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1999;
    }
    bool _2114 = _2003.y == 0u;
    float _2169;
    float _2171;
    float _2173;
    if (_2114)
    {
        _2169 = _2107;
        _2171 = _2109;
        _2173 = _2111;
    }
    else
    {
        uint _2342 = _1928 + 7u;
        float _2358 = (dot(vec3(cbLight._m0[_1928 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _2359 = _2358 * _2358;
        float _4279 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2360 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2361 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2169 = (((cbLight._m0[_2342].x * 0.3183098733425140380859375) * _2360) * _2361) + _2107;
        _2171 = (((cbLight._m0[_2342].y * 0.3183098733425140380859375) * _2360) * _2361) + _2109;
        _2173 = (((cbLight._m0[_2342].z * 0.3183098733425140380859375) * _2360) * _2361) + _2111;
    }
    uint _2176 = _1928 + 8u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _411) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_1928].x + _489;
    float _2192 = cbLight._m0[_1928].y + _490;
    float _2193 = cbLight._m0[_1928].z + _491;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1928].xyz));
    float _4295 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _2205 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2206 = dot(vec3(_408, _409, _410), vec3(_2198, _2199, _2200));
    float _4317 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2198, _2199, _2200));
    float _4328 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2190 * _2190;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2227 = 0.959999978542327880859375 - _570;
    float _2229 = 0.959999978542327880859375 - _571;
    float _2230 = 0.959999978542327880859375 - _572;
    float _2237 = 1.0 - _2190;
    float _2248 = (0.5 / (((_2205 * ((_2204 * _2237) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2237) + _2190) * _2204))) * _2204;
    float _4339 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    uint _2264 = _1928 + 9u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _411) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_1969].x + _489;
    float _2278 = cbLight._m0[_1969].y + _490;
    float _2279 = cbLight._m0[_1969].z + _491;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1969].xyz));
    float _4350 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2291 = dot(vec3(_408, _409, _410), vec3(_2284, _2285, _2286));
    float _4361 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2284, _2285, _2286));
    float _4372 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2276 * _2276;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2317 = 1.0 - _2276;
    float _2327 = (0.5 / (((_2205 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2317) + _2276) * _2290))) * _2290;
    float _4383 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    float _2339 = (((((_2310 * _2227) + _573) * cbLight._m0[_2264].x) * _2329) * _1951) + ((((cbLight._m0[_2176].x * _1917) * ((_2226 * _2227) + _573)) * _2250) * _1965);
    float _2340 = (((((_2310 * _2229) + _575) * cbLight._m0[_2264].y) * _2329) * _1951) + ((((cbLight._m0[_2176].y * _1919) * ((_2226 * _2229) + _575)) * _2250) * _1965);
    float _2341 = (((((_2310 * _2230) + _576) * cbLight._m0[_2264].z) * _2329) * _1951) + ((((cbLight._m0[_2176].z * _1921) * ((_2226 * _2230) + _576)) * _2250) * _1965);
    float _2397;
    float _2399;
    float _2401;
    if (_2005)
    {
        _2397 = _2339;
        _2399 = _2340;
        _2401 = _2341;
    }
    else
    {
        uint _2403 = _1928 + 2u;
        uint _2407 = _1928 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _411) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _489;
        float _2424 = cbLight._m0[_2403].y + _490;
        float _2425 = cbLight._m0[_2403].z + _491;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2403].xyz));
        float _4394 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2437 = dot(vec3(_408, _409, _410), vec3(_2430, _2431, _2432));
        float _4405 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4416 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2205 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2463) + _2422) * _2436))) * _2436;
        float _4427 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2397 = (((((_2456 * _2227) + _573) * cbLight._m0[_2407].x) * _2475) * _2476) + _2339;
        _2399 = (((((_2456 * _2229) + _575) * cbLight._m0[_2407].y) * _2475) * _2476) + _2340;
        _2401 = (((((_2456 * _2230) + _576) * cbLight._m0[_2407].z) * _2475) * _2476) + _2341;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2114)
    {
        _2507 = _2397;
        _2509 = _2399;
        _2511 = _2401;
    }
    else
    {
        uint _2518 = _1928 + 3u;
        uint _2522 = _1928 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _411) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _489;
        float _2539 = cbLight._m0[_2518].y + _490;
        float _2540 = cbLight._m0[_2518].z + _491;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2518].xyz));
        float _4443 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2552 = dot(vec3(_408, _409, _410), vec3(_2545, _2546, _2547));
        float _4454 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4465 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2205 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2578) + _2537) * _2551))) * _2551;
        float _4476 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2507 = (((((_2571 * _2227) + _573) * cbLight._m0[_2522].x) * _2590) * _2591) + _2397;
        _2509 = (((((_2571 * _2229) + _575) * cbLight._m0[_2522].y) * _2590) * _2591) + _2399;
        _2511 = (((((_2571 * _2230) + _576) * cbLight._m0[_2522].z) * _2590) * _2591) + _2401;
    }
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_1926.y == 0u)
    {
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.x;
        uint _2624 = uint((float(_2612.y) * floor(float(uint(cbSceneParam._m0[85u].y * _511) / _2613))) + floor(float(uint(cbSceneParam._m0[85u].x * _510) / _2613)));
        float _2634 = (log2(_1704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2635 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        uint _2638 = uint(isnan(14.0) ? _2635 : (isnan(_2635) ? 14.0 : min(_2635, 14.0)));
        uvec4 _2643 = texelFetch(g_lightClusterGridBuffer, int(((_2638 << 2u) + (_2624 << 6u)) >> 2u));
        uint _2644 = _2643.x;
        uint _2645 = _2612.z;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((((1u << ((_2645 >> 4u) & 15u)) + 4294967295u) & _2644) == 0u) || ((_2645 & 240u) == 0u))
        {
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
        }
        else
        {
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            uint _2881 = 0u;
            uint _2890;
            bool _2891;
            for (;;)
            {
                _2890 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                _2891 = _2890 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2891)
                {
                    frontier_phi_73_pred = _2880;
                    frontier_phi_73_pred_1 = _2879;
                    frontier_phi_73_pred_2 = _2878;
                    frontier_phi_73_pred_3 = _2877;
                    frontier_phi_73_pred_4 = _2876;
                    frontier_phi_73_pred_5 = _2875;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    uint _3026;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2890;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    for (;;)
                    {
                        uint _3030 = uint(findLSB(_3026)) + (_2881 << 5u);
                        uint _3027 = (_3026 + 4294967295u) & _3026;
                        uint _3032 = _3030 * 48u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3052 = (_3030 * 48u) + 4u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3071 = (_3030 * 48u) + 8u;
                        vec3 _3082 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x));
                        float _3086 = _3046.x - _1702;
                        float _3087 = _3046.y - _1703;
                        float _3088 = _3046.z - _1704;
                        float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                        float _3092 = inversesqrt(_3089);
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3096 = dot(vec3(_529, _532, _535), vec3(_3093, _3094, _3095));
                        float _3101 = 1.0 - (_3089 * _3046.w);
                        float _4502 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3103 = sqrt(_3089) * _3065.w;
                        float _3106 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3096) + _3107;
                        float _3113 = _3103 * _3103;
                        float _3117 = ((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3102) / ((_3113 * 0.699999988079071044921875) + 1.0);
                        float _3121 = (-0.0) - _1702;
                        float _3122 = (-0.0) - _1703;
                        float _3123 = (-0.0) - _1704;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3137 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                        float _3138 = 1.0 - _604;
                        float _3145 = sqrt(1.0 - ((1.0 - (_3138 * _3138)) * (1.0 - (_3137 * _3137))));
                        float _3146 = _3145 * _3145;
                        float _3147 = _3146 * _3146;
                        float _3148 = _3128 + _3093;
                        float _3149 = _3129 + _3094;
                        float _3150 = _3130 + _3095;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3158 = dot(vec3(_529, _532, _535), vec3(_3128, _3129, _3130));
                        float _4518 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3162 = dot(vec3(_529, _532, _535), vec3(_3154 * _3148, _3154 * _3149, _3154 * _3150));
                        float _4529 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3169 = ((_3165 * _3165) * (_3147 + (-1.0))) + 1.0;
                        float _3170 = _3106 * _3146;
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3096) + _3171;
                        float _4540 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3176 = 1.0 - _3146;
                        float _3186 = (0.5 / (((_3175 * ((_3161 * _3176) + _3146)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3146) * _3161))) * _3175;
                        float _4551 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3197 = (((_3147 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3169 * _3169) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125))) * _3102;
                        _2950 = (_3117 * _3065.x) + _3023;
                        _2951 = (_3117 * _3065.y) + _3024;
                        _2952 = (_3117 * _3065.z) + _3025;
                        _2947 = (_3197 * _3082.x) + _3020;
                        _2948 = (_3197 * _3082.y) + _3021;
                        _2949 = (_3197 * _3082.z) + _3022;
                        if (_3027 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _3027;
                        }
                    }
                    frontier_phi_73_pred = _2952;
                    frontier_phi_73_pred_1 = _2951;
                    frontier_phi_73_pred_2 = _2950;
                    frontier_phi_73_pred_3 = _2949;
                    frontier_phi_73_pred_4 = _2948;
                    frontier_phi_73_pred_5 = _2947;
                }
                _2734 = frontier_phi_73_pred;
                _2732 = frontier_phi_73_pred_1;
                _2730 = frontier_phi_73_pred_2;
                _2728 = frontier_phi_73_pred_3;
                _2726 = frontier_phi_73_pred_4;
                _2724 = frontier_phi_73_pred_5;
                uint _2882 = _2881 + 1u;
                if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2875 = _2724;
                    _2876 = _2726;
                    _2877 = _2728;
                    _2878 = _2730;
                    _2879 = _2732;
                    _2880 = _2734;
                    _2881 = _2882;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
        }
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.z;
        uint _2740 = (_2738 >> 8u) & 15u;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((4294967295u << _2740) & _2644) == 0u)
        {
            _2843 = _2723;
            _2845 = _2725;
            _2847 = _2727;
            _2849 = _2729;
            _2851 = _2731;
            _2853 = _2733;
        }
        else
        {
            float _2868 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
            float _2869 = _2868 * _1702;
            float _2870 = _2868 * _1703;
            float _2871 = _2868 * _1704;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2740 < ((_2738 >> 12u) & 15u))
            {
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _3003 = _2723;
                float _3004 = _2725;
                float _3005 = _2727;
                float _3006 = _2729;
                float _3007 = _2731;
                float _3008 = _2733;
                uint _3009 = _2740;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3019)
                    {
                        frontier_phi_84_pred = _3007;
                        frontier_phi_84_pred_1 = _3006;
                        frontier_phi_84_pred_2 = _3005;
                        frontier_phi_84_pred_3 = _3004;
                        frontier_phi_84_pred_4 = _3003;
                        frontier_phi_84_pred_5 = _3008;
                    }
                    else
                    {
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3224 = _3003;
                        float _3225 = _3004;
                        float _3226 = _3005;
                        float _3227 = _3006;
                        float _3228 = _3007;
                        float _3229 = _3008;
                        uint _3230 = _3018;
                        uint _3231;
                        vec4 _3256;
                        float _3257;
                        vec4 _3272;
                        vec3 _3284;
                        vec4 _3300;
                        vec4 _3316;
                        float _3363;
                        bool _3364;
                        for (;;)
                        {
                            uint _3241 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3230));
                            _3231 = (_3230 + 4294967295u) & _3230;
                            uint _3243 = _3241 * 40u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3257 = _3256.w;
                            uint _3259 = (_3241 * 40u) + 4u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3241 * 40u) + 8u;
                            _3284 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x));
                            uint _3287 = (_3241 * 40u) + 16u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3303 = (_3241 * 40u) + 20u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3319 = (_3241 * 40u) + 24u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3338 = (_3241 * 40u) + 28u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3363 = fma(_1704, _3351.z, fma(_1703, _3351.y, _3351.x * _1702)) + _3351.w;
                            _3364 = !((fma(_1704, _3332.z, fma(_1703, _3332.y, _3332.x * _1702)) + _3332.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3364)
                            {
                                float _3391 = _3256.x - _1702;
                                float _3392 = _3256.y - _1703;
                                float _3393 = _3256.z - _1704;
                                float _3394 = dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393));
                                float _3397 = inversesqrt(_3394);
                                float _3398 = _3397 * _3391;
                                float _3399 = _3397 * _3392;
                                float _3400 = _3397 * _3393;
                                float _3404 = 1.0 - (_3394 / (_3257 * _3257));
                                float _4562 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3409 = sqrt(_3394) * _3272.w;
                                float _3411 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                                float _3412 = _3411 * _3411;
                                float _3415 = ((1.0 - _3412) * dot(vec3(_3398, _3399, _3400), vec3(_529, _532, _535))) + _3412;
                                float _3418 = _3409 * _3409;
                                float _3422 = (fma(_1704, _3300.z, fma(_1703, _3300.y, _3300.x * _1702)) + _3300.w) / _3363;
                                float _3423 = (fma(_1704, _3316.z, fma(_1703, _3316.y, _3316.x * _1702)) + _3316.w) / _3363;
                                float _3427 = 1.0 - dot(vec2(_3422, _3423), vec2(_3422, _3423));
                                float _4578 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3429 = _3428 * (((isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0))) * _3405) / ((_3418 * 0.699999988079071044921875) + 1.0));
                                float _3441 = exp2(log2(1.0 / ((_3418 * 3.5) + 5.0)) * 0.25);
                                float _3442 = 1.0 - _604;
                                float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                                float _3450 = _3449 * _3449;
                                float _3451 = _3450 * _3450;
                                float _3452 = _3398 - _2869;
                                float _3453 = _3399 - _2870;
                                float _3454 = _3400 - _2871;
                                float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                                float _3462 = dot(vec3(_529, _532, _535), vec3((-0.0) - _2869, (-0.0) - _2870, (-0.0) - _2871));
                                float _4589 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3466 = dot(vec3(_529, _532, _535), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                                float _4600 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                                float _3474 = _3411 * _3450;
                                float _3475 = _3474 * _3474;
                                float _3481 = ((1.0 - _3475) * dot(vec3(_529, _532, _535), vec3(_3398, _3399, _3400))) + _3475;
                                float _4611 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3483 = 1.0 - _3450;
                                float _3493 = (0.5 / (((_3482 * ((_3465 * _3483) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3450) * _3465))) * _3482;
                                float _4622 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3503 = (_3428 * _3405) * (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) / ((_3473 * _3473) * ((_3418 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3429 * _3272.y;
                                frontier_phi_90_pred_1 = _3429 * _3272.x;
                                frontier_phi_90_pred_2 = _3503 * _3284.z;
                                frontier_phi_90_pred_3 = _3503 * _3284.y;
                                frontier_phi_90_pred_4 = _3503 * _3284.x;
                                frontier_phi_90_pred_5 = _3429 * _3272.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3511 = frontier_phi_90_pred;
                            _3510 = frontier_phi_90_pred_1;
                            _3509 = frontier_phi_90_pred_2;
                            _3508 = frontier_phi_90_pred_3;
                            _3507 = frontier_phi_90_pred_4;
                            _3512 = frontier_phi_90_pred_5;
                            _3214 = _3510 + _3227;
                            _3215 = _3511 + _3228;
                            _3216 = _3512 + _3229;
                            _3211 = _3507 + _3224;
                            _3212 = _3508 + _3225;
                            _3213 = _3509 + _3226;
                            if (_3231 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3231;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3215;
                        frontier_phi_84_pred_1 = _3214;
                        frontier_phi_84_pred_2 = _3213;
                        frontier_phi_84_pred_3 = _3212;
                        frontier_phi_84_pred_4 = _3211;
                        frontier_phi_84_pred_5 = _3216;
                    }
                    _2852 = frontier_phi_84_pred;
                    _2850 = frontier_phi_84_pred_1;
                    _2848 = frontier_phi_84_pred_2;
                    _2846 = frontier_phi_84_pred_3;
                    _2844 = frontier_phi_84_pred_4;
                    _2854 = frontier_phi_84_pred_5;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3003 = _2844;
                        _3004 = _2846;
                        _3005 = _2848;
                        _3006 = _2850;
                        _3007 = _2852;
                        _3008 = _2854;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2854;
                frontier_phi_65_66_ladder_1 = _2850;
                frontier_phi_65_66_ladder_2 = _2852;
                frontier_phi_65_66_ladder_3 = _2846;
                frontier_phi_65_66_ladder_4 = _2844;
                frontier_phi_65_66_ladder_5 = _2848;
            }
            else
            {
                frontier_phi_65_66_ladder = _2733;
                frontier_phi_65_66_ladder_1 = _2729;
                frontier_phi_65_66_ladder_2 = _2731;
                frontier_phi_65_66_ladder_3 = _2725;
                frontier_phi_65_66_ladder_4 = _2723;
                frontier_phi_65_66_ladder_5 = _2727;
            }
            _2843 = frontier_phi_65_66_ladder_4;
            _2845 = frontier_phi_65_66_ladder_3;
            _2847 = frontier_phi_65_66_ladder_5;
            _2849 = frontier_phi_65_66_ladder_1;
            _2851 = frontier_phi_65_66_ladder_2;
            _2853 = frontier_phi_65_66_ladder;
        }
        float _2858 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
        _2656 = (_2858 * _2849) + _2169;
        _2658 = (_2858 * _2851) + _2171;
        _2660 = (_2858 * _2853) + _2173;
        _2662 = ((_2843 * _573) * _2858) + _2507;
        _2664 = ((_2845 * _575) * _2858) + _2509;
        _2666 = ((_2847 * _576) * _2858) + _2511;
    }
    else
    {
        _2656 = _2169;
        _2658 = _2171;
        _2660 = _2173;
        _2662 = _2507;
        _2664 = _2509;
        _2666 = _2511;
    }
    float _4638 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4649 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4660 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _2683 = ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2656 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _588))) + ((_2662 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    float _2684 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2658 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _588))) + ((_2664 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    float _2685 = ((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2660 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _588))) + ((_2666 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    uint _2686 = _548 + 6u;
    float _2694 = _510 / cbSceneParam._m0[86u].x;
    float _2695 = _511 / cbSceneParam._m0[86u].y;
    vec4 _2709 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2711 = _2709.x;
    float _2712 = _2709.y;
    float _2713 = _2709.z;
    float _2714 = _2709.w;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _2748 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _2749 = _2748 / _431;
        float _2760 = _2749 * _482;
        float _2761 = _483 * _2749;
        float _2762 = (-0.0) - _2761;
        float _2763 = _2749 * _484;
        float _2765 = (cbSceneParam._m0[77u].w * _2762) / _2748;
        float _2766 = _2765 + cbSceneParam._m0[79u].w;
        float _2767 = cbSceneParam._m0[79u].w - _2761;
        float _2773 = sqrt(((_2760 * _2760) + (_2761 * _2761)) + (_2763 * _2763));
        float _2776 = (1.0 - (cbSceneParam._m0[77u].w / _2748)) * _2773;
        float _2781 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2783 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2960;
        if (abs((_2762 - _2765) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2960 = ((((_2766 > 0.0) ? exp2(_2781 * _2766) : (2.0 - exp2(_2783 * _2766))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2776;
        }
        else
        {
            float _2904 = 1.0 / cbSceneParam._m0[80u].x;
            float _2905 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : max(_2766, _2767));
            float _2906 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : min(_2766, _2767));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            _2960 = ((abs(_2773 / _2762) * cbSceneParam._m0[80u].y) * ((((_2915 - _2916) * 2.0) - ((exp2(_2781 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0)))) - exp2(_2781 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))))) * _2904)) - ((exp2(_2783 * _2915) - exp2(_2783 * _2916)) * _2904))) + (_2776 * cbSceneParam._m0[80u].z);
        }
        vec4 _2962 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, 1.0), 0.0);
        float _2971 = exp2((_2960 * (-1.44269502162933349609375)) * (1.0 - _2962.w));
        float _2972 = log2(_2971);
        float _2988 = log2(_2714);
        _2785 = (exp2(_2988 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].x)) * _2962.x) / cbSceneParam._m0[78u].x)) + _2711;
        _2787 = (exp2(_2988 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].y)) * _2962.y) / cbSceneParam._m0[78u].y)) + _2712;
        _2789 = (exp2(_2988 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].z)) * _2962.z) / cbSceneParam._m0[78u].z)) + _2713;
        _2791 = _2971 * _2714;
    }
    else
    {
        _2785 = _2711;
        _2787 = _2712;
        _2789 = _2713;
        _2791 = _2714;
    }
    bool _2998;
    vec4 _2801;
    vec4 _2823;
    float _2825;
    float _2829;
    float _2830;
    float _2831;
    float _2832;
    bool _2842;
    for (;;)
    {
        _2801 = cbMatDynParam._m0[0u];
        float _2803 = roundEven(_2801.y);
        bool _2804 = _2803 == 3.0;
        float _2805 = log2(_2791);
        float _2812 = exp2(_2805 * cbSceneParam._m0[78u].x) * _2683;
        float _2813 = exp2(_2805 * cbSceneParam._m0[78u].y) * _2684;
        float _2814 = exp2(_2805 * cbSceneParam._m0[78u].z) * _2685;
        float _2821 = _498 + (-0.5);
        _2823 = cbMtdParam._m0[1u];
        _2825 = _2823.y * _2821;
        float _2828 = (_2803 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2829 = _2828 * (_2804 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2785)));
        _2830 = _2828 * (_2804 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2787)));
        _2831 = _2828 * (_2804 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2789)));
        _2832 = _2821 * 0.999000012874603271484375;
        _2842 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2842)
        {
            if ((cbInstanceData._m0[_548 + 7u].x + _2832) < 0.5)
            {
                _2998 = true;
                break;
            }
        }
        uint _2939 = _549 + uint(_2801.w);
        if ((cbInstanceData._m0[_2939].w < 1.0) && ((cbInstanceData._m0[_2939].w + _2832) < 0.5))
        {
            _2998 = true;
            break;
        }
        if ((_2825 + 1.0) < _2823.x)
        {
            _2998 = true;
            break;
        }
        _2998 = false;
        break;
    }
    float _3202;
    if (_2998)
    {
        discard_state = true;
        _3202 = 0.0;
    }
    else
    {
        _3202 = cbInstanceData._m0[_2686].w;
    }
    SV_Target.x = _2829;
    SV_Target.y = _2830;
    SV_Target.z = _2831;
    SV_Target.w = _3202;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2686].w;
    discard_exit();
}


