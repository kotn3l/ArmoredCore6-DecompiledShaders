#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1128;
float _3800;
float _3801;
float _3802;
float _3803;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _256 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _256.x;
    float _260 = _256.y;
    float _261 = _256.z;
    vec4 _293 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _306 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3812 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _316 = ((_293.z - _261) * _307) + _261;
    float _320 = ((((_293.x - _259) * _307) + _259) * 2.0) + (-1.0);
    float _322 = ((((_293.y - _260) * _307) + _260) * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3823 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    float _331 = fma(_328, _240, fma(_322, _233, _320 * _219));
    float _334 = fma(_328, _241, fma(_322, _234, _320 * _220));
    float _337 = fma(_328, _242, fma(_322, _235, _320 * _221));
    float _341 = inversesqrt(dot(vec3(_331, _334, _337), vec3(_331, _334, _337)));
    vec4 _369 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _373 = (cbMtdParam._m0[11u].z + dot(vec4(_341 * _331, _341 * _334, _341 * _337, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_369.x * cbMtdParam._m0[11u].w);
    float _3834 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _391 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _396 = _391.x * cbMtdParam._m0[9u].x;
    float _397 = _391.y * cbMtdParam._m0[9u].y;
    float _398 = _391.z * cbMtdParam._m0[9u].z;
    vec4 _417 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _431 = (((_417.x * cbMtdParam._m0[10u].x) - _396) * _307) + _396;
    float _432 = (((_417.y * cbMtdParam._m0[10u].y) - _397) * _307) + _397;
    float _433 = (((_417.z * cbMtdParam._m0[10u].z) - _398) * _307) + _398;
    vec4 _446 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _457 = ((_446.x - _431) * _374) + _431;
    float _458 = ((_446.y - _432) * _374) + _432;
    float _459 = ((_446.z - _433) * _374) + _433;
    vec4 _472 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _474 = _472.x;
    float _492 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _474) * _307) + _474;
    float _494 = _492 - (_492 * _374);
    vec4 _507 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _514 = (_507.x * 2.0) + (-1.0);
    float _515 = (_507.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3845 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _524 = ((_507.z - _316) * _374) + _316;
    float _531 = ((_514 - _320) * _374) + _320;
    float _532 = ((_515 - _322) * _374) + _322;
    float _533 = ((sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _328) * _374) + _328;
    float _536 = fma(_533, _240, fma(_532, _233, _531 * _219));
    float _539 = fma(_533, _241, fma(_532, _234, _531 * _220));
    float _542 = fma(_533, _242, fma(_532, _235, _531 * _221));
    float _546 = inversesqrt(dot(vec3(_536, _539, _542), vec3(_536, _539, _542)));
    float _547 = _546 * _536;
    float _548 = _546 * _539;
    float _549 = _546 * _542;
    float _3856 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _550 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3878 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3889 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3900 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _554 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _570 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _620 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _610);
    float _621 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _610);
    float _622 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _610);
    float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
    float _627 = _620 * _626;
    float _628 = _621 * _626;
    float _629 = _622 * _626;
    vec4 _634 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _636 = _634.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _808 = sqrt(((_620 * _620) + (_621 * _621)) + (_622 * _622));
        float _814 = (cbMatDynParam._m0[5u].x * _808) + cbMatDynParam._m0[5u].y;
        float _3911 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _819 = (cbMatDynParam._m0[5u].z * _808) + cbMatDynParam._m0[5u].w;
        float _3922 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) - _815)) + _815) < ((_636 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _647 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _648 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _666 = fma(_549, cbSceneParam._m0[5u].z, fma(_548, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _547));
    float _669 = fma(_549, cbSceneParam._m0[6u].z, fma(_548, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _547));
    float _672 = fma(_549, cbSceneParam._m0[7u].z, fma(_548, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _547));
    uint _685 = uint(roundEven(NORMAL.w)) * 13u;
    uint _686 = _685 + 9u;
    uint _687 = _686 + uint(cbMatDynParam._m0[0u].w);
    float _693 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_687].x;
    float _694 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_687].y;
    float _695 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_687].z;
    float _3933 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _699 = 1.0 - _554;
    float _700 = _696 * _699;
    float _701 = _697 * _699;
    float _702 = _698 * _699;
    float _707 = (_696 + (-0.039999999105930328369140625)) * _554;
    float _708 = (_697 + (-0.039999999105930328369140625)) * _554;
    float _709 = (_698 + (-0.039999999105930328369140625)) * _554;
    float _710 = _707 + 0.039999999105930328369140625;
    float _712 = _708 + 0.039999999105930328369140625;
    float _713 = _709 + 0.039999999105930328369140625;
    vec4 _722 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _647, cbSceneParam._m0[86u].y * _648));
    float _725 = _722.x * TEXCOORD_9.w;
    float _726 = dot(vec3(_547, _548, _549), vec3(_627, _628, _629));
    float _729 = _726 * 2.0;
    float _733 = (_729 * _547) - _627;
    float _734 = (_729 * _548) - _628;
    float _735 = (_729 * _549) - _629;
    float _739 = abs(dot(vec3(_627, _628, _629), vec3(_547, _548, _549)));
    float _3966 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _741 = sqrt(_550);
    float _754 = exp2((_741 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_741 * 3.0));
    float _760 = (1.0 - _754) * ((_741 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _761 = _754 * _741;
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_797, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789));
        float _856 = fma(_797, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789));
        float _860 = fma(_797, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789));
        float _885 = _789 + _547;
        float _886 = _793 + _548;
        float _887 = _797 + _549;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _852;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _856;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _860;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_547, _548, _549), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _4014 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_547, _548, _549), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _4047 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_547, _548, _549), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _4080 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_797, cbModelParam._m0[30u].z, fma(_793, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789));
        float _1175 = fma(_797, cbModelParam._m0[31u].z, fma(_793, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789));
        float _1179 = fma(_797, cbModelParam._m0[32u].z, fma(_793, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789));
        float _1202 = _789 + _547;
        float _1203 = _793 + _548;
        float _1204 = _797 + _549;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_547, _548, _549), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4143 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_547, _548, _549), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4176 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_547, _548, _549), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4209 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = _1128;
        _1449 = _1128;
        _1450 = _1128;
        _1451 = _1128;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1140)) + _1140;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1141)) + _1141;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1142)) + _1142;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _733 * 0.5;
    float _1509 = _734 * 0.5;
    float _1510 = _735 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1576 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _550);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1576 : min(cbModelParam._m0[25u].z, _1576));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1626 = fma(_797, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789)) + cbModelParam._m0[13u].w;
        float _1630 = fma(_797, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789)) + cbModelParam._m0[14u].w;
        float _1634 = fma(_797, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789)) + cbModelParam._m0[15u].w;
        float _1637 = fma(_735, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733));
        float _1640 = fma(_735, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733));
        float _1643 = fma(_735, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733));
        float _1671;
        if (_1637 > 0.0)
        {
            _1671 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1671 = frontier_phi_19_17_ladder;
        }
        float _1846;
        if (_1640 > 0.0)
        {
            _1846 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1846 = frontier_phi_28_24_ladder;
        }
        float _2141;
        if (_1643 > 0.0)
        {
            _2141 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2141 = frontier_phi_40_35_ladder;
        }
        float _2143 = isnan(_1846) ? _1671 : (isnan(_1671) ? _1846 : min(_1671, _1846));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1637) + _1626;
        float _2149 = (_2144 * _1640) + _1630;
        float _2150 = (_2144 * _1643) + _1634;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2151;
        float _2155 = _2151 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 > _2155) || ((_2149 < _2153) || ((_2148 < _2153) || (_2148 > _2155))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2150, cbModelParam._m0[9u].z, fma(_2149, cbModelParam._m0[9u].y, _2148 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2150, cbModelParam._m0[10u].z, fma(_2149, cbModelParam._m0[10u].y, _2148 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2150, cbModelParam._m0[11u].z, fma(_2149, cbModelParam._m0[11u].y, _2148 * cbModelParam._m0[11u].x))), _1577);
            frontier_phi_18_40_ladder = _2295.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2295.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2295.x * cbModelParam._m0[1u].y;
        }
        _1659 = frontier_phi_18_40_ladder_2;
        _1661 = frontier_phi_18_40_ladder_1;
        _1663 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_733, _734, _735), _1577);
        _1659 = _1647.x * cbModelParam._m0[1u].y;
        _1661 = _1647.y * cbModelParam._m0[1u].y;
        _1663 = _1647.z * cbModelParam._m0[1u].y;
    }
    float _1667 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _550);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1667 : min(cbModelParam._m0[25u].w, _1667));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_797, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_797, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_797, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_735, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733));
        float _1739 = fma(_735, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733));
        float _1742 = fma(_735, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733));
        float _1851;
        if (_1736 > 0.0)
        {
            _1851 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1851 = frontier_phi_30_26_ladder;
        }
        float _2168;
        if (_1739 > 0.0)
        {
            _2168 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2168 = frontier_phi_42_37_ladder;
        }
        float _2506;
        if (_1742 > 0.0)
        {
            _2506 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2506 = frontier_phi_52_49_ladder;
        }
        float _2508 = isnan(_2168) ? _1851 : (isnan(_1851) ? _2168 : min(_1851, _2168));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _1736) + _1725;
        float _2514 = (_2509 * _1739) + _1729;
        float _2515 = (_2509 * _1742) + _1733;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2516;
        float _2519 = _2516 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2515 > _2519) || ((_2515 < _2517) || ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 < _2517) || (_2513 > _2519))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2515, cbModelParam._m0[17u].z, fma(_2514, cbModelParam._m0[17u].y, _2513 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2515, cbModelParam._m0[18u].z, fma(_2514, cbModelParam._m0[18u].y, _2513 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2515, cbModelParam._m0[19u].z, fma(_2514, cbModelParam._m0[19u].y, _2513 * cbModelParam._m0[19u].x))), _1668);
            frontier_phi_27_52_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_27_52_ladder_2;
        _1763 = frontier_phi_27_52_ladder_1;
        _1765 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_733, _734, _735), _1668);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1778 = (((_760 * _710) + _761) * _725) * ((cbModelParam._m0[1u].w * (_1761 - _1659)) + _1659);
    float _1780 = (((_760 * _712) + _761) * _725) * ((cbModelParam._m0[1u].w * (_1763 - _1661)) + _1661);
    float _1782 = (((_760 * _713) + _761) * _725) * ((cbModelParam._m0[1u].w * (_1765 - _1663)) + _1663);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    float _1825 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1829 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1833 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1837 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1838 = _1825 / _1837;
    float _1839 = _1829 / _1837;
    float _1840 = _1833 / _1837;
    float _1987;
    float _1988;
    float _1989;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1867 = ((uint(_1840 > cbSceneParam._m0[59u].y) + uint(_1840 > cbSceneParam._m0[59u].x)) + uint(_1840 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1868 = _1867 + 43u;
        uint _1876 = _1867 + 44u;
        uint _1884 = _1867 + 45u;
        uint _1892 = _1867 + 46u;
        float _1903 = fma(_1837, cbSceneParam._m0[_1868].w, fma(_1833, cbSceneParam._m0[_1868].z, fma(_1829, cbSceneParam._m0[_1868].y, _1825 * cbSceneParam._m0[_1868].x)));
        float _1907 = fma(_1837, cbSceneParam._m0[_1876].w, fma(_1833, cbSceneParam._m0[_1876].z, fma(_1829, cbSceneParam._m0[_1876].y, _1825 * cbSceneParam._m0[_1876].x)));
        float _1915 = fma(_1837, cbSceneParam._m0[_1892].w, fma(_1833, cbSceneParam._m0[_1892].z, fma(_1829, cbSceneParam._m0[_1892].y, _1825 * cbSceneParam._m0[_1892].x)));
        float _1920 = cbSceneParam._m0[33u].z * _1915;
        float _1922 = cbSceneParam._m0[33u].w * _1915;
        float _1925 = fma(_1837, cbSceneParam._m0[_1884].w, fma(_1833, cbSceneParam._m0[_1884].z, fma(_1829, cbSceneParam._m0[_1884].y, _1825 * cbSceneParam._m0[_1884].x))) / _1915;
        float _1973 = (cbSceneParam._m0[33u].x - sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840))) * cbSceneParam._m0[33u].y;
        float _4335 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1980 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1920 + _1903) / _1915, (_1922 + _1907) / _1915), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 + _1903) / _1915, (_1907 - _1920) / _1915), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 - _1920) / _1915, (_1907 - _1922) / _1915), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 - _1922) / _1915, (_1920 + _1907) / _1915), _1925), 0.0)).x), vec4(0.25)));
        _1987 = 1.0 - (_1980 * cbSceneParam._m0[34u].x);
        _1988 = 1.0 - (_1980 * cbSceneParam._m0[34u].y);
        _1989 = 1.0 - (_1980 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1987 = 1.0;
        _1988 = 1.0;
        _1989 = 1.0;
    }
    float _2053;
    float _2055;
    float _2057;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2041 = fma(_1837, cbSceneParam._m0[63u].w, fma(_1833, cbSceneParam._m0[63u].z, fma(_1829, cbSceneParam._m0[63u].y, _1825 * cbSceneParam._m0[63u].x)));
        float _2042 = fma(_1837, cbSceneParam._m0[60u].w, fma(_1833, cbSceneParam._m0[60u].z, fma(_1829, cbSceneParam._m0[60u].y, _1825 * cbSceneParam._m0[60u].x))) / _2041;
        float _2043 = fma(_1837, cbSceneParam._m0[61u].w, fma(_1833, cbSceneParam._m0[61u].z, fma(_1829, cbSceneParam._m0[61u].y, _1825 * cbSceneParam._m0[61u].x))) / _2041;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2042 >= cbSceneParam._m0[64u].x) && (_2043 >= cbSceneParam._m0[64u].y)) && (_2042 <= cbSceneParam._m0[64u].z)) && (_2043 <= cbSceneParam._m0[64u].w))
        {
            float _2181 = fma(_1837, cbSceneParam._m0[62u].w, fma(_1833, cbSceneParam._m0[62u].z, fma(_1829, cbSceneParam._m0[62u].y, _1825 * cbSceneParam._m0[62u].x))) / _2041;
            float _2185 = isnan(cbSceneParam._m0[41u].w) ? _2181 : (isnan(_2181) ? cbSceneParam._m0[41u].w : max(_2181, cbSceneParam._m0[41u].w));
            float _2228 = (cbSceneParam._m0[33u].x - sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840))) * cbSceneParam._m0[33u].y;
            float _4351 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
            float _2235 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2042, cbSceneParam._m0[33u].w + _2043), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2042, _2043 - cbSceneParam._m0[33u].z), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2042 - cbSceneParam._m0[33u].z, _2043 - cbSceneParam._m0[33u].w), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2042 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2043), _2185), 0.0)).x), vec4(0.25)));
            float _2239 = 1.0 - (_2235 * cbSceneParam._m0[34u].x);
            float _2240 = 1.0 - (_2235 * cbSceneParam._m0[34u].y);
            float _2241 = 1.0 - (_2235 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2240) ? _1988 : (isnan(_1988) ? _2240 : min(_1988, _2240));
            frontier_phi_39_38_ladder_1 = isnan(_2239) ? _1987 : (isnan(_1987) ? _2239 : min(_1987, _2239));
            frontier_phi_39_38_ladder_2 = isnan(_2241) ? _1989 : (isnan(_1989) ? _2241 : min(_1989, _2241));
        }
        else
        {
            frontier_phi_39_38_ladder = _1988;
            frontier_phi_39_38_ladder_1 = _1987;
            frontier_phi_39_38_ladder_2 = _1989;
        }
        _2053 = frontier_phi_39_38_ladder_1;
        _2055 = frontier_phi_39_38_ladder;
        _2057 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2053 = _1987;
        _2055 = _1988;
        _2057 = _1989;
    }
    uvec4 _2062 = floatBitsToUint(cbInstanceData._m0[_685 + 5u]);
    uint _2064 = _2062.x * 14u;
    uint _2065 = _2064 + 13u;
    float _2072 = _725 + (-1.0);
    float _2077 = (cbLight._m0[_2065].x * _2072) + 1.0;
    float _2078 = (cbLight._m0[_2065].y * _2072) + 1.0;
    float _2079 = (cbLight._m0[_2065].z * _2072) + 1.0;
    float _2080 = (cbLight._m0[_2065].w * _2072) + 1.0;
    uint _2081 = _2064 + 5u;
    float _2087 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2091 = _2064 + 4u;
    float _2100 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2104 = _2064 | 1u;
    float _2115 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_547, _548, _549));
    float _2118 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_547, _548, _549));
    float _4387 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _4398 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2123 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.3183098733425140380859375;
    float _2125 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2132 = ((cbLight._m0[_2081].x * _2087) * _2125) + (((cbLight._m0[_2091].x * _2053) * _2100) * _2123);
    float _2133 = ((_2087 * cbLight._m0[_2081].y) * _2125) + (((cbLight._m0[_2091].y * _2055) * _2100) * _2123);
    float _2134 = ((_2087 * cbLight._m0[_2081].z) * _2125) + (((cbLight._m0[_2091].z * _2057) * _2100) * _2123);
    uvec4 _2138 = floatBitsToUint(cbLight._m0[_2064 + 12u]);
    bool _2140 = _2138.x == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2140)
    {
        _2242 = _2132;
        _2244 = _2133;
        _2246 = _2134;
    }
    else
    {
        uint _2250 = _2064 + 6u;
        float _2266 = (dot(vec3(cbLight._m0[_2064 + 2u].xyz), vec3(_547, _548, _549)) * 0.5) + 0.5;
        float _2267 = _2266 * _2266;
        float _4409 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2268 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2269 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2242 = (((cbLight._m0[_2250].x * 0.3183098733425140380859375) * _2268) * _2269) + _2132;
        _2244 = (((cbLight._m0[_2250].y * 0.3183098733425140380859375) * _2268) * _2269) + _2133;
        _2246 = (((cbLight._m0[_2250].z * 0.3183098733425140380859375) * _2268) * _2269) + _2134;
    }
    bool _2249 = _2138.y == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2249)
    {
        _2304 = _2242;
        _2306 = _2244;
        _2308 = _2246;
    }
    else
    {
        uint _2477 = _2064 + 7u;
        float _2493 = (dot(vec3(cbLight._m0[_2064 + 3u].xyz), vec3(_547, _548, _549)) * 0.5) + 0.5;
        float _2494 = _2493 * _2493;
        float _4425 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2495 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2496 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2304 = (((cbLight._m0[_2477].x * 0.3183098733425140380859375) * _2495) * _2496) + _2242;
        _2306 = (((cbLight._m0[_2477].y * 0.3183098733425140380859375) * _2495) * _2496) + _2244;
        _2308 = (((cbLight._m0[_2477].z * 0.3183098733425140380859375) * _2495) * _2496) + _2246;
    }
    uint _2311 = _2064 + 8u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _550) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2064].x + _627;
    float _2327 = cbLight._m0[_2064].y + _628;
    float _2328 = cbLight._m0[_2064].z + _629;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_2064].xyz));
    float _4441 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _4452 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2340 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2341 = dot(vec3(_547, _548, _549), vec3(_2333, _2334, _2335));
    float _4463 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2333, _2334, _2335));
    float _4474 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2325 * _2325;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0);
    float _2362 = 0.959999978542327880859375 - _707;
    float _2364 = 0.959999978542327880859375 - _708;
    float _2365 = 0.959999978542327880859375 - _709;
    float _2372 = 1.0 - _2325;
    float _2383 = (0.5 / (((_2340 * ((_2339 * _2372) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2372) + _2325) * _2339))) * _2339;
    float _4485 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    uint _2399 = _2064 + 9u;
    float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _550) * 0.949999988079071044921875);
    float _2411 = _2410 * _2410;
    float _2412 = cbLight._m0[_2104].x + _627;
    float _2413 = cbLight._m0[_2104].y + _628;
    float _2414 = cbLight._m0[_2104].z + _629;
    float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
    float _2419 = _2418 * _2412;
    float _2420 = _2418 * _2413;
    float _2421 = _2418 * _2414;
    float _2422 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_2104].xyz));
    float _4496 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2426 = dot(vec3(_547, _548, _549), vec3(_2419, _2420, _2421));
    float _4507 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2419, _2420, _2421));
    float _4518 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2411 * _2411;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
    float _2452 = 1.0 - _2411;
    float _2462 = (0.5 / (((_2340 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2452) + _2411) * _2425))) * _2425;
    float _4529 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2464 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    float _2474 = (((((_2445 * _2362) + _710) * cbLight._m0[_2399].x) * _2464) * _2087) + ((((cbLight._m0[_2311].x * _2053) * ((_2361 * _2362) + _710)) * _2385) * _2100);
    float _2475 = (((((_2445 * _2364) + _712) * cbLight._m0[_2399].y) * _2464) * _2087) + ((((cbLight._m0[_2311].y * _2055) * ((_2361 * _2364) + _712)) * _2385) * _2100);
    float _2476 = (((((_2445 * _2365) + _713) * cbLight._m0[_2399].z) * _2464) * _2087) + ((((cbLight._m0[_2311].z * _2057) * ((_2361 * _2365) + _713)) * _2385) * _2100);
    float _2532;
    float _2534;
    float _2536;
    if (_2140)
    {
        _2532 = _2474;
        _2534 = _2475;
        _2536 = _2476;
    }
    else
    {
        uint _2538 = _2064 + 2u;
        uint _2542 = _2064 + 10u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _550) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _627;
        float _2559 = cbLight._m0[_2538].y + _628;
        float _2560 = cbLight._m0[_2538].z + _629;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_2538].xyz));
        float _4540 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2572 = dot(vec3(_547, _548, _549), vec3(_2565, _2566, _2567));
        float _4551 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4562 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
        float _2598 = 1.0 - _2557;
        float _2608 = (0.5 / (((_2340 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2598) + _2557) * _2571))) * _2571;
        float _4573 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2532 = (((((_2591 * _2362) + _710) * cbLight._m0[_2542].x) * _2610) * _2611) + _2474;
        _2534 = (((((_2591 * _2364) + _712) * cbLight._m0[_2542].y) * _2610) * _2611) + _2475;
        _2536 = (((((_2591 * _2365) + _713) * cbLight._m0[_2542].z) * _2610) * _2611) + _2476;
    }
    float _2642;
    float _2644;
    float _2646;
    if (_2249)
    {
        _2642 = _2532;
        _2644 = _2534;
        _2646 = _2536;
    }
    else
    {
        uint _2653 = _2064 + 3u;
        uint _2657 = _2064 + 11u;
        float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2653].w)) * _550) * 0.949999988079071044921875);
        float _2672 = _2671 * _2671;
        float _2673 = cbLight._m0[_2653].x + _627;
        float _2674 = cbLight._m0[_2653].y + _628;
        float _2675 = cbLight._m0[_2653].z + _629;
        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
        float _2680 = _2679 * _2673;
        float _2681 = _2679 * _2674;
        float _2682 = _2679 * _2675;
        float _2683 = dot(vec3(_547, _548, _549), vec3(cbLight._m0[_2653].xyz));
        float _4589 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2687 = dot(vec3(_547, _548, _549), vec3(_2680, _2681, _2682));
        float _4600 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2691 = dot(vec3(cbLight._m0[_2653].xyz), vec3(_2680, _2681, _2682));
        float _4611 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2695 = _2672 * _2672;
        float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
        float _2706 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
        float _2713 = 1.0 - _2672;
        float _2723 = (0.5 / (((_2340 * ((_2686 * _2713) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2713) + _2672) * _2686))) * _2686;
        float _4622 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2725 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
        float _2726 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2642 = (((((_2706 * _2362) + _710) * cbLight._m0[_2657].x) * _2725) * _2726) + _2532;
        _2644 = (((((_2706 * _2364) + _712) * cbLight._m0[_2657].y) * _2725) * _2726) + _2534;
        _2646 = (((((_2706 * _2365) + _713) * cbLight._m0[_2657].z) * _2725) * _2726) + _2536;
    }
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_2062.y == 0u)
    {
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _648) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _647) / _2748)));
        float _2769 = (log2(_1840 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            uint _3016 = 0u;
            uint _3025;
            bool _3026;
            for (;;)
            {
                _3025 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                _3026 = _3025 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3026)
                {
                    frontier_phi_73_pred = _3015;
                    frontier_phi_73_pred_1 = _3014;
                    frontier_phi_73_pred_2 = _3013;
                    frontier_phi_73_pred_3 = _3012;
                    frontier_phi_73_pred_4 = _3011;
                    frontier_phi_73_pred_5 = _3010;
                }
                else
                {
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    uint _3161;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3025;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    for (;;)
                    {
                        uint _3165 = uint(findLSB(_3161)) + (_3016 << 5u);
                        uint _3162 = (_3161 + 4294967295u) & _3161;
                        uint _3167 = _3165 * 48u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3187 = (_3165 * 48u) + 4u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3206 = (_3165 * 48u) + 8u;
                        vec3 _3217 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x));
                        float _3221 = _3181.x - _1838;
                        float _3222 = _3181.y - _1839;
                        float _3223 = _3181.z - _1840;
                        float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                        float _3227 = inversesqrt(_3224);
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3231 = dot(vec3(_666, _669, _672), vec3(_3228, _3229, _3230));
                        float _3236 = 1.0 - (_3224 * _3181.w);
                        float _4648 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3238 = sqrt(_3224) * _3200.w;
                        float _3241 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3231) + _3242;
                        float _3248 = _3238 * _3238;
                        float _3252 = ((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3237) / ((_3248 * 0.699999988079071044921875) + 1.0);
                        float _3256 = (-0.0) - _1838;
                        float _3257 = (-0.0) - _1839;
                        float _3258 = (-0.0) - _1840;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3272 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                        float _3273 = 1.0 - _741;
                        float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                        float _3281 = _3280 * _3280;
                        float _3282 = _3281 * _3281;
                        float _3283 = _3263 + _3228;
                        float _3284 = _3264 + _3229;
                        float _3285 = _3265 + _3230;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3293 = dot(vec3(_666, _669, _672), vec3(_3263, _3264, _3265));
                        float _4664 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3297 = dot(vec3(_666, _669, _672), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                        float _4675 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                        float _3305 = _3241 * _3281;
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3231) + _3306;
                        float _4686 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3311 = 1.0 - _3281;
                        float _3321 = (0.5 / (((_3310 * ((_3296 * _3311) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3281) * _3296))) * _3310;
                        float _4697 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3332 = (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) / ((_3304 * _3304) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125))) * _3237;
                        _3085 = (_3252 * _3200.x) + _3158;
                        _3086 = (_3252 * _3200.y) + _3159;
                        _3087 = (_3252 * _3200.z) + _3160;
                        _3082 = (_3332 * _3217.x) + _3155;
                        _3083 = (_3332 * _3217.y) + _3156;
                        _3084 = (_3332 * _3217.z) + _3157;
                        if (_3162 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3162;
                        }
                    }
                    frontier_phi_73_pred = _3087;
                    frontier_phi_73_pred_1 = _3086;
                    frontier_phi_73_pred_2 = _3085;
                    frontier_phi_73_pred_3 = _3084;
                    frontier_phi_73_pred_4 = _3083;
                    frontier_phi_73_pred_5 = _3082;
                }
                _2869 = frontier_phi_73_pred;
                _2867 = frontier_phi_73_pred_1;
                _2865 = frontier_phi_73_pred_2;
                _2863 = frontier_phi_73_pred_3;
                _2861 = frontier_phi_73_pred_4;
                _2859 = frontier_phi_73_pred_5;
                uint _3017 = _3016 + 1u;
                if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3010 = _2859;
                    _3011 = _2861;
                    _3012 = _2863;
                    _3013 = _2865;
                    _3014 = _2867;
                    _3015 = _2869;
                    _3016 = _3017;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((4294967295u << _2875) & _2779) == 0u)
        {
            _2978 = _2858;
            _2980 = _2860;
            _2982 = _2862;
            _2984 = _2864;
            _2986 = _2866;
            _2988 = _2868;
        }
        else
        {
            float _3003 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
            float _3004 = _3003 * _1838;
            float _3005 = _3003 * _1839;
            float _3006 = _3003 * _1840;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _3138 = _2858;
                float _3139 = _2860;
                float _3140 = _2862;
                float _3141 = _2864;
                float _3142 = _2866;
                float _3143 = _2868;
                uint _3144 = _2875;
                uint _3153;
                bool _3154;
                for (;;)
                {
                    _3153 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                    _3154 = _3153 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3154)
                    {
                        frontier_phi_84_pred = _3142;
                        frontier_phi_84_pred_1 = _3141;
                        frontier_phi_84_pred_2 = _3140;
                        frontier_phi_84_pred_3 = _3139;
                        frontier_phi_84_pred_4 = _3138;
                        frontier_phi_84_pred_5 = _3143;
                    }
                    else
                    {
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3359 = _3138;
                        float _3360 = _3139;
                        float _3361 = _3140;
                        float _3362 = _3141;
                        float _3363 = _3142;
                        float _3364 = _3143;
                        uint _3365 = _3153;
                        uint _3366;
                        vec4 _3391;
                        float _3392;
                        vec4 _3407;
                        vec3 _3419;
                        vec4 _3435;
                        vec4 _3451;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3376 = ((_3144 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3365));
                            _3366 = (_3365 + 4294967295u) & _3365;
                            uint _3378 = _3376 * 40u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3392 = _3391.w;
                            uint _3394 = (_3376 * 40u) + 4u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3376 * 40u) + 8u;
                            _3419 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x));
                            uint _3422 = (_3376 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3438 = (_3376 * 40u) + 20u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3454 = (_3376 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3376 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_1840, _3486.z, fma(_1839, _3486.y, _3486.x * _1838)) + _3486.w;
                            _3499 = !((fma(_1840, _3467.z, fma(_1839, _3467.y, _3467.x * _1838)) + _3467.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3391.x - _1838;
                                float _3527 = _3391.y - _1839;
                                float _3528 = _3391.z - _1840;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3392 * _3392));
                                float _4708 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3544 = sqrt(_3529) * _3407.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_666, _669, _672))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_1840, _3435.z, fma(_1839, _3435.y, _3435.x * _1838)) + _3435.w) / _3498;
                                float _3558 = (fma(_1840, _3451.z, fma(_1839, _3451.y, _3451.x * _1838)) + _3451.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4724 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _741;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3004;
                                float _3588 = _3534 - _3005;
                                float _3589 = _3535 - _3006;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_666, _669, _672), vec3((-0.0) - _3004, (-0.0) - _3005, (-0.0) - _3006));
                                float _4735 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3601 = dot(vec3(_666, _669, _672), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4746 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_666, _669, _672), vec3(_3533, _3534, _3535))) + _3610;
                                float _4757 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4768 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3564 * _3407.y;
                                frontier_phi_90_pred_1 = _3564 * _3407.x;
                                frontier_phi_90_pred_2 = _3638 * _3419.z;
                                frontier_phi_90_pred_3 = _3638 * _3419.y;
                                frontier_phi_90_pred_4 = _3638 * _3419.x;
                                frontier_phi_90_pred_5 = _3564 * _3407.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3646 = frontier_phi_90_pred;
                            _3645 = frontier_phi_90_pred_1;
                            _3644 = frontier_phi_90_pred_2;
                            _3643 = frontier_phi_90_pred_3;
                            _3642 = frontier_phi_90_pred_4;
                            _3647 = frontier_phi_90_pred_5;
                            _3349 = _3645 + _3362;
                            _3350 = _3646 + _3363;
                            _3351 = _3647 + _3364;
                            _3346 = _3642 + _3359;
                            _3347 = _3643 + _3360;
                            _3348 = _3644 + _3361;
                            if (_3366 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3366;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3350;
                        frontier_phi_84_pred_1 = _3349;
                        frontier_phi_84_pred_2 = _3348;
                        frontier_phi_84_pred_3 = _3347;
                        frontier_phi_84_pred_4 = _3346;
                        frontier_phi_84_pred_5 = _3351;
                    }
                    _2987 = frontier_phi_84_pred;
                    _2985 = frontier_phi_84_pred_1;
                    _2983 = frontier_phi_84_pred_2;
                    _2981 = frontier_phi_84_pred_3;
                    _2979 = frontier_phi_84_pred_4;
                    _2989 = frontier_phi_84_pred_5;
                    uint _3145 = _3144 + 1u;
                    if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3138 = _2979;
                        _3139 = _2981;
                        _3140 = _2983;
                        _3141 = _2985;
                        _3142 = _2987;
                        _3143 = _2989;
                        _3144 = _3145;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2989;
                frontier_phi_65_66_ladder_1 = _2985;
                frontier_phi_65_66_ladder_2 = _2987;
                frontier_phi_65_66_ladder_3 = _2981;
                frontier_phi_65_66_ladder_4 = _2979;
                frontier_phi_65_66_ladder_5 = _2983;
            }
            else
            {
                frontier_phi_65_66_ladder = _2868;
                frontier_phi_65_66_ladder_1 = _2864;
                frontier_phi_65_66_ladder_2 = _2866;
                frontier_phi_65_66_ladder_3 = _2860;
                frontier_phi_65_66_ladder_4 = _2858;
                frontier_phi_65_66_ladder_5 = _2862;
            }
            _2978 = frontier_phi_65_66_ladder_4;
            _2980 = frontier_phi_65_66_ladder_3;
            _2982 = frontier_phi_65_66_ladder_5;
            _2984 = frontier_phi_65_66_ladder_1;
            _2986 = frontier_phi_65_66_ladder_2;
            _2988 = frontier_phi_65_66_ladder;
        }
        float _2993 = isnan(1.0) ? _725 : (isnan(_725) ? 1.0 : min(_725, 1.0));
        _2791 = (_2993 * _2984) + _2304;
        _2793 = (_2993 * _2986) + _2306;
        _2795 = (_2993 * _2988) + _2308;
        _2797 = ((_2978 * _710) * _2993) + _2642;
        _2799 = ((_2980 * _712) * _2993) + _2644;
        _2801 = ((_2982 * _713) * _2993) + _2646;
    }
    else
    {
        _2791 = _2304;
        _2793 = _2306;
        _2795 = _2308;
        _2797 = _2642;
        _2799 = _2644;
        _2801 = _2646;
    }
    float _4784 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4795 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4806 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _2818 = ((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2791 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _725))) + ((_2797 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    float _2819 = ((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2793 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _725))) + ((_2799 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    float _2820 = ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2795 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _725))) + ((_2801 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    uint _2821 = _685 + 6u;
    float _2829 = _647 / cbSceneParam._m0[86u].x;
    float _2830 = _648 / cbSceneParam._m0[86u].y;
    vec4 _2844 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, (log2((isnan(cbSceneParam._m0[77u].w) ? _570 : (isnan(_570) ? cbSceneParam._m0[77u].w : min(_570, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2846 = _2844.x;
    float _2847 = _2844.y;
    float _2848 = _2844.z;
    float _2849 = _2844.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_570 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_570) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _570 : min(cbSceneParam._m0[80u].w, _570));
        float _2884 = _2883 / _570;
        float _2895 = _2884 * _620;
        float _2896 = _621 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2898 = _2884 * _622;
        float _2900 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2896;
        float _2908 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3095;
        if (abs((_2897 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3095 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3039 = 1.0 / cbSceneParam._m0[80u].x;
            float _3040 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3041 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            _3095 = ((abs(_2908 / _2897) * cbSceneParam._m0[80u].y) * ((((_3050 - _3051) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))))) * _3039)) - ((exp2(_2918 * _3050) - exp2(_2918 * _3051)) * _3039))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3097 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, 1.0), 0.0);
        float _3106 = exp2((_3095 * (-1.44269502162933349609375)) * (1.0 - _3097.w));
        float _3107 = log2(_3106);
        float _3123 = log2(_2849);
        _2920 = (exp2(_3123 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].x)) * _3097.x) / cbSceneParam._m0[78u].x)) + _2846;
        _2922 = (exp2(_3123 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].y)) * _3097.y) / cbSceneParam._m0[78u].y)) + _2847;
        _2924 = (exp2(_3123 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].z)) * _3097.z) / cbSceneParam._m0[78u].z)) + _2848;
        _2926 = _3106 * _2849;
    }
    else
    {
        _2920 = _2846;
        _2922 = _2847;
        _2924 = _2848;
        _2926 = _2849;
    }
    bool _3133;
    vec4 _2936;
    vec4 _2958;
    float _2960;
    float _2964;
    float _2965;
    float _2966;
    float _2967;
    bool _2977;
    for (;;)
    {
        _2936 = cbMatDynParam._m0[0u];
        float _2938 = roundEven(_2936.y);
        bool _2939 = _2938 == 3.0;
        float _2940 = log2(_2926);
        float _2947 = exp2(_2940 * cbSceneParam._m0[78u].x) * _2818;
        float _2948 = exp2(_2940 * cbSceneParam._m0[78u].y) * _2819;
        float _2949 = exp2(_2940 * cbSceneParam._m0[78u].z) * _2820;
        float _2956 = _636 + (-0.5);
        _2958 = cbMtdParam._m0[1u];
        _2960 = _2958.y * _2956;
        float _2963 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2964 = _2963 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
        _2965 = _2963 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
        _2966 = _2963 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
        _2967 = _2956 * 0.999000012874603271484375;
        _2977 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2977)
        {
            if ((cbInstanceData._m0[_685 + 7u].x + _2967) < 0.5)
            {
                _3133 = true;
                break;
            }
        }
        uint _3074 = _686 + uint(_2936.w);
        if ((cbInstanceData._m0[_3074].w < 1.0) && ((cbInstanceData._m0[_3074].w + _2967) < 0.5))
        {
            _3133 = true;
            break;
        }
        if ((_2960 + 1.0) < _2958.x)
        {
            _3133 = true;
            break;
        }
        _3133 = false;
        break;
    }
    float _3337;
    if (_3133)
    {
        discard_state = true;
        _3337 = 0.0;
    }
    else
    {
        _3337 = cbInstanceData._m0[_2821].w;
    }
    SV_Target.x = _2964;
    SV_Target.y = _2965;
    SV_Target.z = _2966;
    SV_Target.w = _3337;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2821].w;
    discard_exit();
}


