#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1007;
float _3397;
float _3398;
float _3399;
float _3400;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3409 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    float _257 = fma(_254, _220, fma(_247, _213, _245 * _199));
    float _260 = fma(_254, _221, fma(_247, _214, _245 * _200));
    float _263 = fma(_254, _222, fma(_247, _215, _245 * _201));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _302 = (cbMtdParam._m0[11u].z + dot(vec4(_267 * _257, _267 * _260, _267 * _263, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3420 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    vec4 _320 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _325 = _320.x * cbMtdParam._m0[9u].x;
    float _326 = _320.y * cbMtdParam._m0[9u].y;
    float _327 = _320.z * cbMtdParam._m0[9u].z;
    vec4 _340 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _351 = ((_340.x - _325) * _303) + _325;
    float _352 = ((_340.y - _326) * _303) + _326;
    float _353 = ((_340.z - _327) * _303) + _327;
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _368 = _366.x;
    float _370 = _368 - (_368 * _303);
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = (_383.x * 2.0) + (-1.0);
    float _391 = (_383.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3431 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _400 = ((_383.z - _241) * _303) + _241;
    float _407 = ((_390 - _245) * _303) + _245;
    float _408 = ((_391 - _247) * _303) + _247;
    float _409 = ((sqrt(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) - _254) * _303) + _254;
    float _412 = fma(_409, _220, fma(_408, _213, _407 * _199));
    float _415 = fma(_409, _221, fma(_408, _214, _407 * _200));
    float _418 = fma(_409, _222, fma(_408, _215, _407 * _201));
    float _422 = inversesqrt(dot(vec3(_412, _415, _418), vec3(_412, _415, _418)));
    float _423 = _422 * _412;
    float _424 = _422 * _415;
    float _425 = _422 * _418;
    float _3442 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _426 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3464 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3475 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3486 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _430 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _446 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _497 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _487);
    float _498 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _487);
    float _499 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _487);
    float _503 = inversesqrt(dot(vec3(_497, _498, _499), vec3(_497, _498, _499)));
    float _504 = _497 * _503;
    float _505 = _498 * _503;
    float _506 = _499 * _503;
    vec4 _511 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _513 = _511.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _686 = sqrt(((_497 * _497) + (_498 * _498)) + (_499 * _499));
        float _692 = (cbMatDynParam._m0[5u].x * _686) + cbMatDynParam._m0[5u].y;
        float _3497 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _697 = (cbMatDynParam._m0[5u].z * _686) + cbMatDynParam._m0[5u].w;
        float _3508 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) - _693)) + _693) < ((_513 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _525 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _526 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _544 = fma(_425, cbSceneParam._m0[5u].z, fma(_424, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _423));
    float _547 = fma(_425, cbSceneParam._m0[6u].z, fma(_424, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _423));
    float _550 = fma(_425, cbSceneParam._m0[7u].z, fma(_424, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _423));
    uint _563 = uint(roundEven(NORMAL.w)) * 13u;
    uint _564 = _563 + 9u;
    uint _565 = _564 + uint(cbMatDynParam._m0[0u].w);
    float _571 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_565].x;
    float _572 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_565].y;
    float _573 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_565].z;
    float _3519 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _577 = 1.0 - _430;
    float _578 = _574 * _577;
    float _579 = _575 * _577;
    float _580 = _576 * _577;
    float _585 = (_574 + (-0.039999999105930328369140625)) * _430;
    float _586 = (_575 + (-0.039999999105930328369140625)) * _430;
    float _587 = (_576 + (-0.039999999105930328369140625)) * _430;
    float _588 = _585 + 0.039999999105930328369140625;
    float _590 = _586 + 0.039999999105930328369140625;
    float _591 = _587 + 0.039999999105930328369140625;
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _525, cbSceneParam._m0[86u].y * _526));
    float _603 = _600.x * TEXCOORD_9.w;
    float _604 = dot(vec3(_423, _424, _425), vec3(_504, _505, _506));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _423) - _504;
    float _612 = (_607 * _424) - _505;
    float _613 = (_607 * _425) - _506;
    float _617 = abs(dot(vec3(_504, _505, _506), vec3(_423, _424, _425)));
    float _3552 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _619 = sqrt(_426);
    float _632 = exp2((_619 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _638 = (1.0 - _632) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _639 = _632 * _619;
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1006;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _731 = fma(_675, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667));
        float _735 = fma(_675, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667));
        float _739 = fma(_675, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667));
        float _764 = _667 + _423;
        float _765 = _671 + _424;
        float _766 = _675 + _425;
        float _776 = fma(_766, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764)) - _731;
        float _777 = fma(_766, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764)) - _735;
        float _778 = fma(_766, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764)) - _739;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_731 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_735 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[34u].z) + ((((((_739 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _834 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_800.x + (-0.5));
        float _836 = _834 * (_800.y + (-0.5));
        float _837 = _834 * (_800.z + (-0.5));
        float _844 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_807.x + (-0.5));
        float _846 = _844 * (_807.y + (-0.5));
        float _847 = _844 * (_807.z + (-0.5));
        float _854 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_814.x + (-0.5));
        float _856 = _854 * (_814.y + (-0.5));
        float _857 = _854 * (_814.z + (-0.5));
        float _864 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_821.x + (-0.5));
        float _866 = _864 * (_821.y + (-0.5));
        float _867 = _864 * (_821.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _888 = (dot(vec3(_423, _424, _425), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _898 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3600 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_900 + 1.0))) + _905) * _868;
        float _915 = _836 * 0.5;
        float _916 = _846 * 0.5;
        float _917 = _856 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_423, _424, _425), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3633 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_942 + 1.0))) + _947) * _869;
        float _957 = _837 * 0.5;
        float _958 = _847 * 0.5;
        float _959 = _857 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_423, _424, _425), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3666 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_984 + 1.0))) + _989) * _870;
        _1006 = _837;
        _1008 = _836;
        _1009 = _835;
        _1010 = _847;
        _1011 = _846;
        _1012 = _845;
        _1013 = _857;
        _1014 = _856;
        _1015 = _855;
        _1016 = _870;
        _1017 = _869;
        _1018 = _868;
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _1007;
        _1008 = _1007;
        _1009 = _1007;
        _1010 = _1007;
        _1011 = _1007;
        _1012 = _1007;
        _1013 = _1007;
        _1014 = _1007;
        _1015 = _1007;
        _1016 = _1007;
        _1017 = _1007;
        _1018 = _1007;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1050 = fma(_675, cbModelParam._m0[30u].z, fma(_671, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _667));
        float _1054 = fma(_675, cbModelParam._m0[31u].z, fma(_671, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _667));
        float _1058 = fma(_675, cbModelParam._m0[32u].z, fma(_671, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _667));
        float _1081 = _667 + _423;
        float _1082 = _671 + _424;
        float _1083 = _675 + _425;
        float _1093 = fma(_1083, cbModelParam._m0[30u].z, fma(_1082, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081)) - _1050;
        float _1094 = fma(_1083, cbModelParam._m0[31u].z, fma(_1082, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081)) - _1054;
        float _1095 = fma(_1083, cbModelParam._m0[32u].z, fma(_1082, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081)) - _1058;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1050 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1054 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[35u].z) + ((((((_1058 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1149 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1116.x + (-0.5));
        float _1151 = _1149 * (_1116.y + (-0.5));
        float _1152 = _1149 * (_1116.z + (-0.5));
        float _1159 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1123.x + (-0.5));
        float _1161 = _1159 * (_1123.y + (-0.5));
        float _1162 = _1159 * (_1123.z + (-0.5));
        float _1169 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1130.x + (-0.5));
        float _1171 = _1169 * (_1130.y + (-0.5));
        float _1172 = _1169 * (_1130.z + (-0.5));
        float _1179 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1137.x + (-0.5));
        float _1181 = _1179 * (_1137.y + (-0.5));
        float _1182 = _1179 * (_1137.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_423, _424, _425), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3729 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1213 + 1.0))) + _1218) * _1183;
        float _1228 = _1151 * 0.5;
        float _1229 = _1161 * 0.5;
        float _1230 = _1171 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_423, _424, _425), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3762 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1255 + 1.0))) + _1260) * _1184;
        float _1270 = _1152 * 0.5;
        float _1271 = _1162 * 0.5;
        float _1272 = _1172 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_423, _424, _425), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3795 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1297 + 1.0))) + _1302) * _1185;
        _1319 = _1152;
        _1320 = _1151;
        _1321 = _1150;
        _1322 = _1162;
        _1323 = _1161;
        _1324 = _1160;
        _1325 = _1172;
        _1326 = _1171;
        _1327 = _1170;
        _1328 = _1185;
        _1329 = _1184;
        _1330 = _1183;
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1007;
        _1320 = _1007;
        _1321 = _1007;
        _1322 = _1007;
        _1323 = _1007;
        _1324 = _1007;
        _1325 = _1007;
        _1326 = _1007;
        _1327 = _1007;
        _1328 = _1007;
        _1329 = _1007;
        _1330 = _1007;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1019)) + _1019;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1020)) + _1020;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1021)) + _1021;
    float _1366 = fma(_1345, cbSceneParam._m0[89u].z, fma(_1344, cbSceneParam._m0[89u].y, _1343 * cbSceneParam._m0[89u].x));
    float _1369 = fma(_1345, cbSceneParam._m0[90u].z, fma(_1344, cbSceneParam._m0[90u].y, _1343 * cbSceneParam._m0[90u].x));
    float _1372 = fma(_1345, cbSceneParam._m0[91u].z, fma(_1344, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1343));
    float _1387 = _611 * 0.5;
    float _1388 = _612 * 0.5;
    float _1389 = _613 * 0.5;
    float _1390 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1393 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1396 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1430;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1403 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1006, _1010, _1013, _1016));
        float _1407 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1411 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1418 = dot(vec4(cbModelParam._m0[39u]), vec4(_1387, _1388, _1389, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1441;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1432 = dot(vec4(cbModelParam._m0[40u]), vec4(_1387, _1388, _1389, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1445 = (_1441 * cbModelParam._m0[1u].x) + (_1430 * (1.0 - cbModelParam._m0[1u].x));
    float _1455 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _426);
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1455 : min(cbModelParam._m0[25u].z, _1455));
    float _1538;
    float _1540;
    float _1542;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1505 = fma(_675, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667)) + cbModelParam._m0[13u].w;
        float _1509 = fma(_675, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667)) + cbModelParam._m0[14u].w;
        float _1513 = fma(_675, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667)) + cbModelParam._m0[15u].w;
        float _1516 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1519 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1522 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1550;
        if (_1516 > 0.0)
        {
            _1550 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1550 = frontier_phi_19_17_ladder;
        }
        float _1757;
        if (_1519 > 0.0)
        {
            _1757 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1757 = frontier_phi_28_24_ladder;
        }
        float _2011;
        if (_1522 > 0.0)
        {
            _2011 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2011 = frontier_phi_40_35_ladder;
        }
        float _2013 = isnan(_1757) ? _1550 : (isnan(_1550) ? _1757 : min(_1550, _1757));
        float _2014 = isnan(_2011) ? _2013 : (isnan(_2013) ? _2011 : min(_2013, _2011));
        float _2018 = (_2014 * _1516) + _1505;
        float _2019 = (_2014 * _1519) + _1509;
        float _2020 = (_2014 * _1522) + _1513;
        float _2021 = _2014 * 9.9999997473787516355514526367188e-05;
        float _2023 = (-1.0) - _2021;
        float _2025 = _2021 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2020 > _2025) || ((_2020 < _2023) || ((_2019 > _2025) || ((_2019 < _2023) || ((_2018 < _2023) || (_2018 > _2025))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2148 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2020, cbModelParam._m0[9u].z, fma(_2019, cbModelParam._m0[9u].y, _2018 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2020, cbModelParam._m0[10u].z, fma(_2019, cbModelParam._m0[10u].y, _2018 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2020, cbModelParam._m0[11u].z, fma(_2019, cbModelParam._m0[11u].y, _2018 * cbModelParam._m0[11u].x))), _1456);
            frontier_phi_18_40_ladder = _2148.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2148.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2148.x * cbModelParam._m0[1u].y;
        }
        _1538 = frontier_phi_18_40_ladder_2;
        _1540 = frontier_phi_18_40_ladder_1;
        _1542 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1456);
        _1538 = _1526.x * cbModelParam._m0[1u].y;
        _1540 = _1526.y * cbModelParam._m0[1u].y;
        _1542 = _1526.z * cbModelParam._m0[1u].y;
    }
    float _1546 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _426);
    float _1547 = isnan(_1546) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1546 : min(cbModelParam._m0[25u].w, _1546));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1604 = fma(_675, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667)) + cbModelParam._m0[21u].w;
        float _1608 = fma(_675, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667)) + cbModelParam._m0[22u].w;
        float _1612 = fma(_675, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667)) + cbModelParam._m0[23u].w;
        float _1615 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1618 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1621 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1762;
        if (_1615 > 0.0)
        {
            _1762 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1762 = frontier_phi_30_26_ladder;
        }
        float _2038;
        if (_1618 > 0.0)
        {
            _2038 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2038 = frontier_phi_42_37_ladder;
        }
        float _2251;
        if (_1621 > 0.0)
        {
            _2251 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2251 = frontier_phi_51_48_ladder;
        }
        float _2253 = isnan(_2038) ? _1762 : (isnan(_1762) ? _2038 : min(_1762, _2038));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1615) + _1604;
        float _2259 = (_2254 * _1618) + _1608;
        float _2260 = (_2254 * _1621) + _1612;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2261;
        float _2264 = _2261 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2260 > _2264) || ((_2260 < _2262) || ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 < _2262) || (_2258 > _2264))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2260, cbModelParam._m0[17u].z, fma(_2259, cbModelParam._m0[17u].y, _2258 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2260, cbModelParam._m0[18u].z, fma(_2259, cbModelParam._m0[18u].y, _2258 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2260, cbModelParam._m0[19u].z, fma(_2259, cbModelParam._m0[19u].y, _2258 * cbModelParam._m0[19u].x))), _1547);
            frontier_phi_27_51_ladder = _2458.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2458.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2458.x * cbModelParam._m0[1u].z;
        }
        _1640 = frontier_phi_27_51_ladder_2;
        _1642 = frontier_phi_27_51_ladder_1;
        _1644 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1547);
        _1640 = _1624.x * cbModelParam._m0[1u].z;
        _1642 = _1624.y * cbModelParam._m0[1u].z;
        _1644 = _1624.z * cbModelParam._m0[1u].z;
    }
    float _1657 = (((_638 * _588) + _639) * _603) * ((cbModelParam._m0[1u].w * (_1640 - _1538)) + _1538);
    float _1659 = (((_638 * _590) + _639) * _603) * ((cbModelParam._m0[1u].w * (_1642 - _1540)) + _1540);
    float _1661 = (((_638 * _591) + _639) * _603) * ((cbModelParam._m0[1u].w * (_1644 - _1542)) + _1542);
    float _1664 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, _1657 * cbSceneParam._m0[91u].x));
    uvec4 _1680 = floatBitsToUint(cbInstanceData._m0[_563 + 5u]);
    uint _1682 = _1680.x * 14u;
    uint _1683 = _1682 + 13u;
    float _1690 = _603 + (-1.0);
    float _1695 = (cbLight._m0[_1683].x * _1690) + 1.0;
    float _1696 = (cbLight._m0[_1683].y * _1690) + 1.0;
    float _1697 = (cbLight._m0[_1683].z * _1690) + 1.0;
    float _1698 = (cbLight._m0[_1683].w * _1690) + 1.0;
    uint _1699 = _1682 + 5u;
    float _1705 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1709 = _1682 + 4u;
    float _1716 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
    uint _1720 = _1682 | 1u;
    float _1731 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_423, _424, _425));
    float _1734 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_423, _424, _425));
    float _3931 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _3942 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1739 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1741 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1748 = ((cbLight._m0[_1699].x * _1705) * _1741) + ((cbLight._m0[_1709].x * _1716) * _1739);
    float _1749 = ((_1705 * cbLight._m0[_1699].y) * _1741) + ((_1716 * cbLight._m0[_1709].y) * _1739);
    float _1750 = ((_1705 * cbLight._m0[_1699].z) * _1741) + ((_1716 * cbLight._m0[_1709].z) * _1739);
    uvec4 _1754 = floatBitsToUint(cbLight._m0[_1682 + 12u]);
    bool _1756 = _1754.x == 0u;
    float _1767;
    float _1769;
    float _1771;
    if (_1756)
    {
        _1767 = _1748;
        _1769 = _1749;
        _1771 = _1750;
    }
    else
    {
        uint _1775 = _1682 + 6u;
        float _1791 = (dot(vec3(cbLight._m0[_1682 + 2u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1792 = _1791 * _1791;
        float _3953 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1794 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _1767 = (((cbLight._m0[_1775].x * 0.3183098733425140380859375) * _1793) * _1794) + _1748;
        _1769 = (((cbLight._m0[_1775].y * 0.3183098733425140380859375) * _1793) * _1794) + _1749;
        _1771 = (((cbLight._m0[_1775].z * 0.3183098733425140380859375) * _1793) * _1794) + _1750;
    }
    bool _1774 = _1754.y == 0u;
    float _1812;
    float _1814;
    float _1816;
    if (_1774)
    {
        _1812 = _1767;
        _1814 = _1769;
        _1816 = _1771;
    }
    else
    {
        uint _1982 = _1682 + 7u;
        float _1998 = (dot(vec3(cbLight._m0[_1682 + 3u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _3969 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2001 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1812 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1767;
        _1814 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1769;
        _1816 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1771;
    }
    uint _1819 = _1682 + 8u;
    float _1832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1682].w)) * _426) * 0.949999988079071044921875);
    float _1833 = _1832 * _1832;
    float _1834 = cbLight._m0[_1682].x + _504;
    float _1835 = cbLight._m0[_1682].y + _505;
    float _1836 = cbLight._m0[_1682].z + _506;
    float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
    float _1841 = _1840 * _1834;
    float _1842 = _1840 * _1835;
    float _1843 = _1840 * _1836;
    float _1844 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1682].xyz));
    float _3985 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _1848 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1849 = dot(vec3(_423, _424, _425), vec3(_1841, _1842, _1843));
    float _4007 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1853 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1841, _1842, _1843));
    float _4018 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1857 = _1833 * _1833;
    float _1861 = ((_1852 * _1852) * (_1857 + (-1.0))) + 1.0;
    float _1869 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
    float _1870 = 0.959999978542327880859375 - _585;
    float _1872 = 0.959999978542327880859375 - _586;
    float _1873 = 0.959999978542327880859375 - _587;
    float _1880 = 1.0 - _1833;
    float _1891 = (0.5 / (((_1848 * ((_1847 * _1880) + _1833)) + 9.9999999392252902907785028219223e-09) + (((_1848 * _1880) + _1833) * _1847))) * _1847;
    float _4029 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1857 / ((_1861 * _1861) * 3.141590118408203125));
    uint _1904 = _1682 + 9u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _426) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1720].x + _504;
    float _1918 = cbLight._m0[_1720].y + _505;
    float _1919 = cbLight._m0[_1720].z + _506;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1720].xyz));
    float _4040 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1931 = dot(vec3(_423, _424, _425), vec3(_1924, _1925, _1926));
    float _4051 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1935 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1924, _1925, _1926));
    float _4062 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1939 = _1916 * _1916;
    float _1943 = ((_1934 * _1934) * (_1939 + (-1.0))) + 1.0;
    float _1950 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
    float _1957 = 1.0 - _1916;
    float _1967 = (0.5 / (((_1848 * ((_1930 * _1957) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1848 * _1957) + _1916) * _1930))) * _1930;
    float _4073 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1939 / ((_1943 * _1943) * 3.141590118408203125));
    float _1979 = (((((_1950 * _1870) + _588) * cbLight._m0[_1904].x) * _1969) * _1705) + (((((_1869 * _1870) + _588) * cbLight._m0[_1819].x) * _1893) * _1716);
    float _1980 = (((((_1950 * _1872) + _590) * cbLight._m0[_1904].y) * _1969) * _1705) + (((((_1869 * _1872) + _590) * cbLight._m0[_1819].y) * _1893) * _1716);
    float _1981 = (((((_1950 * _1873) + _591) * cbLight._m0[_1904].z) * _1969) * _1705) + (((((_1869 * _1873) + _591) * cbLight._m0[_1819].z) * _1893) * _1716);
    float _2043;
    float _2045;
    float _2047;
    if (_1756)
    {
        _2043 = _1979;
        _2045 = _1980;
        _2047 = _1981;
    }
    else
    {
        uint _2049 = _1682 + 2u;
        uint _2053 = _1682 + 10u;
        float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _426) * 0.949999988079071044921875);
        float _2068 = _2067 * _2067;
        float _2069 = cbLight._m0[_2049].x + _504;
        float _2070 = cbLight._m0[_2049].y + _505;
        float _2071 = cbLight._m0[_2049].z + _506;
        float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
        float _2076 = _2075 * _2069;
        float _2077 = _2075 * _2070;
        float _2078 = _2075 * _2071;
        float _2079 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2049].xyz));
        float _4084 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2083 = dot(vec3(_423, _424, _425), vec3(_2076, _2077, _2078));
        float _4095 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2087 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2076, _2077, _2078));
        float _4106 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2091 = _2068 * _2068;
        float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
        float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0);
        float _2109 = 1.0 - _2068;
        float _2119 = (0.5 / (((_1848 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1848 * _2109) + _2068) * _2082))) * _2082;
        float _4117 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2121 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
        float _2122 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _2043 = (((((_2102 * _1870) + _588) * cbLight._m0[_2053].x) * _2121) * _2122) + _1979;
        _2045 = (((((_2102 * _1872) + _590) * cbLight._m0[_2053].y) * _2121) * _2122) + _1980;
        _2047 = (((((_2102 * _1873) + _591) * cbLight._m0[_2053].z) * _2121) * _2122) + _1981;
    }
    float _2157;
    float _2159;
    float _2161;
    if (_1774)
    {
        _2157 = _2043;
        _2159 = _2045;
        _2161 = _2047;
    }
    else
    {
        uint _2168 = _1682 + 3u;
        uint _2172 = _1682 + 11u;
        float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _426) * 0.949999988079071044921875);
        float _2187 = _2186 * _2186;
        float _2188 = cbLight._m0[_2168].x + _504;
        float _2189 = cbLight._m0[_2168].y + _505;
        float _2190 = cbLight._m0[_2168].z + _506;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2195 = _2194 * _2188;
        float _2196 = _2194 * _2189;
        float _2197 = _2194 * _2190;
        float _2198 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2168].xyz));
        float _4133 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2202 = dot(vec3(_423, _424, _425), vec3(_2195, _2196, _2197));
        float _4144 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2195, _2196, _2197));
        float _4155 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2210 = _2187 * _2187;
        float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
        float _2221 = exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0);
        float _2228 = 1.0 - _2187;
        float _2238 = (0.5 / (((_1848 * ((_2201 * _2228) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_1848 * _2228) + _2187) * _2201))) * _2201;
        float _4166 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2157 = (((((_2221 * _1870) + _588) * cbLight._m0[_2172].x) * _2240) * _2241) + _2043;
        _2159 = (((((_2221 * _1872) + _590) * cbLight._m0[_2172].y) * _2240) * _2241) + _2045;
        _2161 = (((((_2221 * _1873) + _591) * cbLight._m0[_2172].z) * _2240) * _2241) + _2047;
    }
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_1680.y == 0u)
    {
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2316;
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2316;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2316;
        uvec4 _2331 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2332 = _2331.x;
        uint _2343 = uint((float(_2331.y) * floor(float(uint(cbSceneParam._m0[85u].y * _526) / _2332))) + floor(float(uint(cbSceneParam._m0[85u].x * _525) / _2332)));
        float _2353 = (log2(_2319 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2354 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        uint _2357 = uint(isnan(14.0) ? _2354 : (isnan(_2354) ? 14.0 : min(_2354, 14.0)));
        uvec4 _2362 = texelFetch(g_lightClusterGridBuffer, int(((_2357 << 2u) + (_2343 << 6u)) >> 2u));
        uint _2363 = _2362.x;
        uint _2364 = _2331.z;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((((1u << ((_2364 >> 4u) & 15u)) + 4294967295u) & _2363) == 0u) || ((_2364 & 240u) == 0u))
        {
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
        }
        else
        {
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            uint _2621 = 0u;
            uint _2630;
            bool _2631;
            for (;;)
            {
                _2630 = texelFetch(g_lightClassification, int((((_2357 << 5u) + (_2343 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                _2631 = _2630 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2631)
                {
                    frontier_phi_68_pred = _2617;
                    frontier_phi_68_pred_1 = _2620;
                    frontier_phi_68_pred_2 = _2619;
                    frontier_phi_68_pred_3 = _2618;
                    frontier_phi_68_pred_4 = _2616;
                    frontier_phi_68_pred_5 = _2615;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2630;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2621 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _2317;
                        float _2827 = _2786.y - _2318;
                        float _2828 = _2786.z - _2319;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_544, _547, _550), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _4192 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2836) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _2317;
                        float _2862 = (-0.0) - _2318;
                        float _2863 = (-0.0) - _2319;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2878 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2879 = 1.0 - _619;
                        float _2886 = sqrt(1.0 - ((1.0 - (_2879 * _2879)) * (1.0 - (_2878 * _2878))));
                        float _2887 = _2886 * _2886;
                        float _2888 = _2887 * _2887;
                        float _2889 = _2868 + _2833;
                        float _2890 = _2869 + _2834;
                        float _2891 = _2870 + _2835;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2899 = dot(vec3(_544, _547, _550), vec3(_2868, _2869, _2870));
                        float _4208 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2903 = dot(vec3(_544, _547, _550), vec3(_2895 * _2889, _2895 * _2890, _2895 * _2891));
                        float _4219 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2910 = ((_2906 * _2906) * (_2888 + (-1.0))) + 1.0;
                        float _2911 = _2846 * _2887;
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2836) + _2912;
                        float _4230 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2917 = 1.0 - _2887;
                        float _2927 = (0.5 / (((_2916 * ((_2902 * _2917) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2887) * _2902))) * _2916;
                        float _4241 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2938 = (((_2888 * 3.1415927410125732421875) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) / ((_2910 * _2910) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2690 = (_2857 * _2805.x) + _2763;
                        _2691 = (_2857 * _2805.y) + _2764;
                        _2692 = (_2857 * _2805.z) + _2765;
                        _2687 = (_2938 * _2822.x) + _2760;
                        _2688 = (_2938 * _2822.y) + _2761;
                        _2689 = (_2938 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_68_pred = _2689;
                    frontier_phi_68_pred_1 = _2692;
                    frontier_phi_68_pred_2 = _2691;
                    frontier_phi_68_pred_3 = _2690;
                    frontier_phi_68_pred_4 = _2688;
                    frontier_phi_68_pred_5 = _2687;
                }
                _2468 = frontier_phi_68_pred;
                _2474 = frontier_phi_68_pred_1;
                _2472 = frontier_phi_68_pred_2;
                _2470 = frontier_phi_68_pred_3;
                _2466 = frontier_phi_68_pred_4;
                _2464 = frontier_phi_68_pred_5;
                uint _2622 = _2621 + 1u;
                if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2615 = _2464;
                    _2616 = _2466;
                    _2617 = _2468;
                    _2618 = _2470;
                    _2619 = _2472;
                    _2620 = _2474;
                    _2621 = _2622;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
        }
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.z;
        uint _2480 = (_2478 >> 8u) & 15u;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((4294967295u << _2480) & _2363) == 0u)
        {
            _2583 = _2463;
            _2585 = _2465;
            _2587 = _2467;
            _2589 = _2469;
            _2591 = _2471;
            _2593 = _2473;
        }
        else
        {
            float _2608 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
            float _2609 = _2608 * _2317;
            float _2610 = _2608 * _2318;
            float _2611 = _2608 * _2319;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2480 < ((_2478 >> 12u) & 15u))
            {
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2743 = _2463;
                float _2744 = _2465;
                float _2745 = _2467;
                float _2746 = _2469;
                float _2747 = _2471;
                float _2748 = _2473;
                uint _2749 = _2480;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2357 << 5u) + (_2343 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2759)
                    {
                        frontier_phi_79_pred = _2748;
                        frontier_phi_79_pred_1 = _2747;
                        frontier_phi_79_pred_2 = _2746;
                        frontier_phi_79_pred_3 = _2745;
                        frontier_phi_79_pred_4 = _2744;
                        frontier_phi_79_pred_5 = _2743;
                    }
                    else
                    {
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _2965 = _2743;
                        float _2966 = _2744;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        float _2970 = _2748;
                        uint _2971 = _2758;
                        uint _2972;
                        vec4 _2997;
                        float _2998;
                        vec4 _3013;
                        vec3 _3025;
                        vec4 _3041;
                        vec4 _3057;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2982 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2971));
                            _2972 = (_2971 + 4294967295u) & _2971;
                            uint _2984 = _2982 * 40u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _2998 = _2997.w;
                            uint _3000 = (_2982 * 40u) + 4u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3015 = (_2982 * 40u) + 8u;
                            _3025 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x));
                            uint _3028 = (_2982 * 40u) + 16u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3044 = (_2982 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3060 = (_2982 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2982 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_2319, _3092.z, fma(_2318, _3092.y, _3092.x * _2317)) + _3092.w;
                            _3105 = !((fma(_2319, _3073.z, fma(_2318, _3073.y, _3073.x * _2317)) + _3073.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2997.x - _2317;
                                float _3133 = _2997.y - _2318;
                                float _3134 = _2997.z - _2319;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_2998 * _2998));
                                float _4252 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3150 = sqrt(_3135) * _3013.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3156 = ((1.0 - _3153) * dot(vec3(_3139, _3140, _3141), vec3(_544, _547, _550))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_2319, _3041.z, fma(_2318, _3041.y, _3041.x * _2317)) + _3041.w) / _3104;
                                float _3164 = (fma(_2319, _3057.z, fma(_2318, _3057.y, _3057.x * _2317)) + _3057.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4268 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3182 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3183 = 1.0 - _619;
                                float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                                float _3191 = _3190 * _3190;
                                float _3192 = _3191 * _3191;
                                float _3193 = _3139 - _2609;
                                float _3194 = _3140 - _2610;
                                float _3195 = _3141 - _2611;
                                float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                                float _3203 = dot(vec3(_544, _547, _550), vec3((-0.0) - _2609, (-0.0) - _2610, (-0.0) - _2611));
                                float _4279 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3206 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3207 = dot(vec3(_544, _547, _550), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                                float _4290 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                                float _3215 = _3152 * _3191;
                                float _3216 = _3215 * _3215;
                                float _3222 = ((1.0 - _3216) * dot(vec3(_544, _547, _550), vec3(_3139, _3140, _3141))) + _3216;
                                float _4301 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3224 = 1.0 - _3191;
                                float _3234 = (0.5 / (((_3223 * ((_3206 * _3224) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3191) * _3206))) * _3223;
                                float _4312 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3244 = (_3169 * _3146) * (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) / ((_3214 * _3214) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3170 * _3013.z;
                                frontier_phi_85_pred_1 = _3170 * _3013.y;
                                frontier_phi_85_pred_2 = _3170 * _3013.x;
                                frontier_phi_85_pred_3 = _3244 * _3025.z;
                                frontier_phi_85_pred_4 = _3244 * _3025.y;
                                frontier_phi_85_pred_5 = _3244 * _3025.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3253 = frontier_phi_85_pred;
                            _3252 = frontier_phi_85_pred_1;
                            _3251 = frontier_phi_85_pred_2;
                            _3250 = frontier_phi_85_pred_3;
                            _3249 = frontier_phi_85_pred_4;
                            _3248 = frontier_phi_85_pred_5;
                            _2955 = _3251 + _2968;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            _2952 = _3248 + _2965;
                            _2953 = _3249 + _2966;
                            _2954 = _3250 + _2967;
                            if (_2972 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2972;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2957;
                        frontier_phi_79_pred_1 = _2956;
                        frontier_phi_79_pred_2 = _2955;
                        frontier_phi_79_pred_3 = _2954;
                        frontier_phi_79_pred_4 = _2953;
                        frontier_phi_79_pred_5 = _2952;
                    }
                    _2594 = frontier_phi_79_pred;
                    _2592 = frontier_phi_79_pred_1;
                    _2590 = frontier_phi_79_pred_2;
                    _2588 = frontier_phi_79_pred_3;
                    _2586 = frontier_phi_79_pred_4;
                    _2584 = frontier_phi_79_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2584;
                        _2744 = _2586;
                        _2745 = _2588;
                        _2746 = _2590;
                        _2747 = _2592;
                        _2748 = _2594;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2590;
                frontier_phi_60_61_ladder_1 = _2594;
                frontier_phi_60_61_ladder_2 = _2592;
                frontier_phi_60_61_ladder_3 = _2588;
                frontier_phi_60_61_ladder_4 = _2586;
                frontier_phi_60_61_ladder_5 = _2584;
            }
            else
            {
                frontier_phi_60_61_ladder = _2469;
                frontier_phi_60_61_ladder_1 = _2473;
                frontier_phi_60_61_ladder_2 = _2471;
                frontier_phi_60_61_ladder_3 = _2467;
                frontier_phi_60_61_ladder_4 = _2465;
                frontier_phi_60_61_ladder_5 = _2463;
            }
            _2583 = frontier_phi_60_61_ladder_5;
            _2585 = frontier_phi_60_61_ladder_4;
            _2587 = frontier_phi_60_61_ladder_3;
            _2589 = frontier_phi_60_61_ladder;
            _2591 = frontier_phi_60_61_ladder_2;
            _2593 = frontier_phi_60_61_ladder_1;
        }
        float _2598 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2375 = (_2598 * _2589) + _1812;
        _2377 = (_2598 * _2591) + _1814;
        _2379 = (_2598 * _2593) + _1816;
        _2381 = ((_2583 * _588) * _2598) + _2157;
        _2383 = ((_2585 * _590) * _2598) + _2159;
        _2385 = ((_2587 * _591) * _2598) + _2161;
    }
    else
    {
        _2375 = _1812;
        _2377 = _1814;
        _2379 = _1816;
        _2381 = _2157;
        _2383 = _2159;
        _2385 = _2161;
    }
    float _4328 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4339 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4350 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _2402 = ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2375 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _603))) + ((_2381 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1445)) * cbPerFrame._m0[3u].x);
    float _2403 = ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2377 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _603))) + ((_2383 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1445)) * cbPerFrame._m0[3u].x);
    float _2404 = ((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2379 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _603))) + ((_2385 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1445)) * cbPerFrame._m0[3u].x);
    uint _2405 = _563 + 6u;
    float _2413 = _525 / cbSceneParam._m0[86u].x;
    float _2414 = _526 / cbSceneParam._m0[86u].y;
    vec4 _2428 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, (log2((isnan(cbSceneParam._m0[77u].w) ? _446 : (isnan(_446) ? cbSceneParam._m0[77u].w : min(_446, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2430 = _2428.x;
    float _2431 = _2428.y;
    float _2432 = _2428.z;
    float _2433 = _2428.w;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_446 > cbSceneParam._m0[78u].w)
    {
        float _2488 = isnan(_446) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _446 : min(cbSceneParam._m0[80u].w, _446));
        float _2489 = _2488 / _446;
        float _2500 = _2489 * _497;
        float _2501 = _498 * _2489;
        float _2502 = (-0.0) - _2501;
        float _2503 = _2489 * _499;
        float _2505 = (cbSceneParam._m0[77u].w * _2502) / _2488;
        float _2506 = _2505 + cbSceneParam._m0[79u].w;
        float _2507 = cbSceneParam._m0[79u].w - _2501;
        float _2513 = sqrt(((_2500 * _2500) + (_2501 * _2501)) + (_2503 * _2503));
        float _2516 = (1.0 - (cbSceneParam._m0[77u].w / _2488)) * _2513;
        float _2521 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2523 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2502 - _2505) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2506 > 0.0) ? exp2(_2521 * _2506) : (2.0 - exp2(_2523 * _2506))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2516;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : max(_2506, _2507));
            float _2646 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : min(_2506, _2507));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2700 = ((abs(_2513 / _2502) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2521 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2521 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2523 * _2655) - exp2(_2523 * _2656)) * _2644))) + (_2516 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2433);
        _2525 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2430;
        _2527 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2431;
        _2529 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2432;
        _2531 = _2711 * _2433;
    }
    else
    {
        _2525 = _2430;
        _2527 = _2431;
        _2529 = _2432;
        _2531 = _2433;
    }
    bool _2738;
    vec4 _2541;
    vec4 _2563;
    float _2565;
    float _2569;
    float _2570;
    float _2571;
    float _2572;
    bool _2582;
    for (;;)
    {
        _2541 = cbMatDynParam._m0[0u];
        float _2543 = roundEven(_2541.y);
        bool _2544 = _2543 == 3.0;
        float _2545 = log2(_2531);
        float _2552 = exp2(_2545 * cbSceneParam._m0[78u].x) * _2402;
        float _2553 = exp2(_2545 * cbSceneParam._m0[78u].y) * _2403;
        float _2554 = exp2(_2545 * cbSceneParam._m0[78u].z) * _2404;
        float _2561 = _513 + (-0.5);
        _2563 = cbMtdParam._m0[1u];
        _2565 = _2563.y * _2561;
        float _2568 = (_2543 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2569 = _2568 * (_2544 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2525)));
        _2570 = _2568 * (_2544 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2527)));
        _2571 = _2568 * (_2544 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2529)));
        _2572 = _2561 * 0.999000012874603271484375;
        _2582 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2582)
        {
            if ((cbInstanceData._m0[_563 + 7u].x + _2572) < 0.5)
            {
                _2738 = true;
                break;
            }
        }
        uint _2679 = _564 + uint(_2541.w);
        if ((cbInstanceData._m0[_2679].w < 1.0) && ((cbInstanceData._m0[_2679].w + _2572) < 0.5))
        {
            _2738 = true;
            break;
        }
        if ((_2565 + 1.0) < _2563.x)
        {
            _2738 = true;
            break;
        }
        _2738 = false;
        break;
    }
    float _2943;
    if (_2738)
    {
        discard_state = true;
        _2943 = 0.0;
    }
    else
    {
        _2943 = cbInstanceData._m0[_2405].w;
    }
    SV_Target.x = _2569;
    SV_Target.y = _2570;
    SV_Target.z = _2571;
    SV_Target.w = _2943;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2405].w;
    discard_exit();
}


