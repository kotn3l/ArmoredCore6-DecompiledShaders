#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1062;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3397 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3408 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))));
    float _321 = fma(_318, _230, fma(_312, _223, _310 * _209));
    float _324 = fma(_318, _231, fma(_312, _224, _310 * _210));
    float _327 = fma(_318, _232, fma(_312, _225, _310 * _211));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    vec4 _359 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _363 = (cbMtdParam._m0[11u].z + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_359.x * cbMtdParam._m0[11u].w);
    float _3419 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _386 = _381.x * cbMtdParam._m0[9u].x;
    float _387 = _381.y * cbMtdParam._m0[9u].y;
    float _388 = _381.z * cbMtdParam._m0[9u].z;
    vec4 _407 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _421 = (((_407.x * cbMtdParam._m0[10u].x) - _386) * _297) + _386;
    float _422 = (((_407.y * cbMtdParam._m0[10u].y) - _387) * _297) + _387;
    float _423 = (((_407.z * cbMtdParam._m0[10u].z) - _388) * _297) + _388;
    vec4 _436 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _447 = ((_436.x - _421) * _364) + _421;
    float _448 = ((_436.y - _422) * _364) + _422;
    float _449 = ((_436.z - _423) * _364) + _423;
    float _465 = _297 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _467 = _465 - (_465 * _364);
    vec4 _480 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _487 = (_480.x * 2.0) + (-1.0);
    float _488 = (_480.y * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _3430 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _497 = ((_480.z - _306) * _364) + _306;
    float _504 = ((_487 - _310) * _364) + _310;
    float _505 = ((_488 - _312) * _364) + _312;
    float _506 = ((sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) - _318) * _364) + _318;
    float _509 = fma(_506, _230, fma(_505, _223, _504 * _209));
    float _512 = fma(_506, _231, fma(_505, _224, _504 * _210));
    float _515 = fma(_506, _232, fma(_505, _225, _504 * _211));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3441 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _523 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3463 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3474 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3485 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _527 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _593 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _583);
    float _594 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _583);
    float _595 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _583);
    float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
    float _600 = _593 * _599;
    float _601 = _594 * _599;
    float _602 = _595 * _599;
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _628 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _631 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _634 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _647 = uint(roundEven(NORMAL.w)) * 13u;
    uint _649 = (_647 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _655 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_649].x;
    float _656 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_649].y;
    float _657 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_649].z;
    float _3496 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _661 = 1.0 - _527;
    float _662 = _658 * _661;
    float _663 = _659 * _661;
    float _664 = _660 * _661;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _527;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _527;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _527;
    float _672 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _687 = _684.x * TEXCOORD_9.w;
    float _688 = dot(vec3(_520, _521, _522), vec3(_600, _601, _602));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _520) - _600;
    float _696 = (_691 * _521) - _601;
    float _697 = (_691 * _522) - _602;
    float _701 = abs(dot(vec3(_600, _601, _602), vec3(_520, _521, _522)));
    float _3529 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _703 = sqrt(_523);
    float _716 = exp2((_703 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_703 * 3.0));
    float _722 = (1.0 - _716) * ((_703 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _723 = _716 * _703;
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _790 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _794 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _819 = _751 + _520;
        float _820 = _755 + _521;
        float _821 = _759 + _522;
        float _831 = fma(_821, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819)) - _786;
        float _832 = fma(_821, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819)) - _790;
        float _833 = fma(_821, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819)) - _794;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(_520, _521, _522), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3577 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_520, _521, _522), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3610 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_520, _521, _522), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3643 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1063 = _891;
        _1064 = _890;
        _1065 = _902;
        _1066 = _901;
        _1067 = _900;
        _1068 = _912;
        _1069 = _911;
        _1070 = _910;
        _1071 = _925;
        _1072 = _924;
        _1073 = _923;
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _1062;
        _1063 = _1062;
        _1064 = _1062;
        _1065 = _1062;
        _1066 = _1062;
        _1067 = _1062;
        _1068 = _1062;
        _1069 = _1062;
        _1070 = _1062;
        _1071 = _1062;
        _1072 = _1062;
        _1073 = _1062;
        _1074 = 0.0;
        _1075 = 0.0;
        _1076 = 0.0;
    }
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1102 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1106 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1110 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1133 = _751 + _520;
        float _1134 = _755 + _521;
        float _1135 = _759 + _522;
        float _1145 = fma(_1135, cbModelParam._m0[30u].z, fma(_1134, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133)) - _1102;
        float _1146 = fma(_1135, cbModelParam._m0[31u].z, fma(_1134, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133)) - _1106;
        float _1147 = fma(_1135, cbModelParam._m0[32u].z, fma(_1134, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133)) - _1110;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1102 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1106 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[35u].z) + ((((((_1110 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1201 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1168.x + (-0.5));
        float _1203 = _1201 * (_1168.y + (-0.5));
        float _1204 = _1201 * (_1168.z + (-0.5));
        float _1211 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1175.x + (-0.5));
        float _1213 = _1211 * (_1175.y + (-0.5));
        float _1214 = _1211 * (_1175.z + (-0.5));
        float _1221 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1182.x + (-0.5));
        float _1223 = _1221 * (_1182.y + (-0.5));
        float _1224 = _1221 * (_1182.z + (-0.5));
        float _1231 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1189.x + (-0.5));
        float _1233 = _1231 * (_1189.y + (-0.5));
        float _1234 = _1231 * (_1189.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_520, _521, _522), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3706 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1265 + 1.0))) + _1270) * _1235;
        float _1280 = _1203 * 0.5;
        float _1281 = _1213 * 0.5;
        float _1282 = _1223 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_520, _521, _522), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3739 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1307 + 1.0))) + _1312) * _1236;
        float _1322 = _1204 * 0.5;
        float _1323 = _1214 * 0.5;
        float _1324 = _1224 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_520, _521, _522), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3772 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1349 + 1.0))) + _1354) * _1237;
        _1371 = _1204;
        _1372 = _1203;
        _1373 = _1202;
        _1374 = _1214;
        _1375 = _1213;
        _1376 = _1212;
        _1377 = _1224;
        _1378 = _1223;
        _1379 = _1222;
        _1380 = _1237;
        _1381 = _1236;
        _1382 = _1235;
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1062;
        _1372 = _1062;
        _1373 = _1062;
        _1374 = _1062;
        _1375 = _1062;
        _1376 = _1062;
        _1377 = _1062;
        _1378 = _1062;
        _1379 = _1062;
        _1380 = _1062;
        _1381 = _1062;
        _1382 = _1062;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1074)) + _1074;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1418 = fma(_1397, cbSceneParam._m0[89u].z, fma(_1396, cbSceneParam._m0[89u].y, _1395 * cbSceneParam._m0[89u].x));
    float _1421 = fma(_1397, cbSceneParam._m0[90u].z, fma(_1396, cbSceneParam._m0[90u].y, _1395 * cbSceneParam._m0[90u].x));
    float _1424 = fma(_1397, cbSceneParam._m0[91u].z, fma(_1396, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1395));
    float _1439 = _695 * 0.5;
    float _1440 = _696 * 0.5;
    float _1441 = _697 * 0.5;
    float _1442 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1445 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1448 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1482;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1455 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1061, _1065, _1068, _1071));
        float _1459 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1463 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1470 = dot(vec4(cbModelParam._m0[39u]), vec4(_1439, _1440, _1441, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1493;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1484 = dot(vec4(cbModelParam._m0[40u]), vec4(_1439, _1440, _1441, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1497 = (_1493 * cbModelParam._m0[1u].x) + (_1482 * (1.0 - cbModelParam._m0[1u].x));
    float _1507 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _523);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1507 : min(cbModelParam._m0[25u].z, _1507));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1557 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1561 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1565 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1568 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1571 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1574 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1602;
        if (_1568 > 0.0)
        {
            _1602 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1602 = frontier_phi_16_14_ladder;
        }
        float _1808;
        if (_1571 > 0.0)
        {
            _1808 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1808 = frontier_phi_25_21_ladder;
        }
        float _2062;
        if (_1574 > 0.0)
        {
            _2062 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2062 = frontier_phi_37_32_ladder;
        }
        float _2064 = isnan(_1808) ? _1602 : (isnan(_1602) ? _1808 : min(_1602, _1808));
        float _2065 = isnan(_2062) ? _2064 : (isnan(_2064) ? _2062 : min(_2064, _2062));
        float _2069 = (_2065 * _1568) + _1557;
        float _2070 = (_2065 * _1571) + _1561;
        float _2071 = (_2065 * _1574) + _1565;
        float _2072 = _2065 * 9.9999997473787516355514526367188e-05;
        float _2074 = (-1.0) - _2072;
        float _2076 = _2072 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2071 > _2076) || ((_2071 < _2074) || ((_2070 > _2076) || ((_2070 < _2074) || ((_2069 < _2074) || (_2069 > _2076))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2199 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2071, cbModelParam._m0[9u].z, fma(_2070, cbModelParam._m0[9u].y, _2069 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2071, cbModelParam._m0[10u].z, fma(_2070, cbModelParam._m0[10u].y, _2069 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2071, cbModelParam._m0[11u].z, fma(_2070, cbModelParam._m0[11u].y, _2069 * cbModelParam._m0[11u].x))), _1508);
            frontier_phi_15_37_ladder = _2199.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2199.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2199.x * cbModelParam._m0[1u].y;
        }
        _1590 = frontier_phi_15_37_ladder_2;
        _1592 = frontier_phi_15_37_ladder_1;
        _1594 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1508);
        _1590 = _1578.x * cbModelParam._m0[1u].y;
        _1592 = _1578.y * cbModelParam._m0[1u].y;
        _1594 = _1578.z * cbModelParam._m0[1u].y;
    }
    float _1598 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _523);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1598 : min(cbModelParam._m0[25u].w, _1598));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1670 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1673 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1813;
        if (_1667 > 0.0)
        {
            _1813 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1813 = frontier_phi_27_23_ladder;
        }
        float _2089;
        if (_1670 > 0.0)
        {
            _2089 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2089 = frontier_phi_39_34_ladder;
        }
        float _2302;
        if (_1673 > 0.0)
        {
            _2302 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2302 = frontier_phi_48_45_ladder;
        }
        float _2304 = isnan(_2089) ? _1813 : (isnan(_1813) ? _2089 : min(_1813, _2089));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1667) + _1656;
        float _2310 = (_2305 * _1670) + _1660;
        float _2311 = (_2305 * _1673) + _1664;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2311, cbModelParam._m0[17u].z, fma(_2310, cbModelParam._m0[17u].y, _2309 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2311, cbModelParam._m0[18u].z, fma(_2310, cbModelParam._m0[18u].y, _2309 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2311, cbModelParam._m0[19u].z, fma(_2310, cbModelParam._m0[19u].y, _2309 * cbModelParam._m0[19u].x))), _1599);
            frontier_phi_24_48_ladder = _2509.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2509.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2509.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_24_48_ladder_2;
        _1694 = frontier_phi_24_48_ladder_1;
        _1696 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1599);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1709 = (((_722 * _672) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1692 - _1590)) + _1590);
    float _1711 = (((_722 * _674) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1713 = (((_722 * _675) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    uvec4 _1732 = floatBitsToUint(cbInstanceData._m0[_647 + 5u]);
    uint _1734 = _1732.x * 14u;
    uint _1735 = _1734 + 13u;
    float _1742 = _687 + (-1.0);
    float _1747 = (cbLight._m0[_1735].x * _1742) + 1.0;
    float _1748 = (cbLight._m0[_1735].y * _1742) + 1.0;
    float _1749 = (cbLight._m0[_1735].z * _1742) + 1.0;
    float _1750 = (cbLight._m0[_1735].w * _1742) + 1.0;
    uint _1751 = _1734 + 5u;
    float _1757 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1761 = _1734 + 4u;
    float _1767 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1771 = _1734 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_520, _521, _522));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_520, _521, _522));
    float _3908 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3919 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1751].x * _1757) * _1792) + ((cbLight._m0[_1761].x * _1767) * _1790);
    float _1800 = ((_1757 * cbLight._m0[_1751].y) * _1792) + ((_1767 * cbLight._m0[_1761].y) * _1790);
    float _1801 = ((_1757 * cbLight._m0[_1751].z) * _1792) + ((_1767 * cbLight._m0[_1761].z) * _1790);
    uvec4 _1805 = floatBitsToUint(cbLight._m0[_1734 + 12u]);
    bool _1807 = _1805.x == 0u;
    float _1818;
    float _1820;
    float _1822;
    if (_1807)
    {
        _1818 = _1799;
        _1820 = _1800;
        _1822 = _1801;
    }
    else
    {
        uint _1826 = _1734 + 6u;
        float _1842 = (dot(vec3(cbLight._m0[_1734 + 2u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _1843 = _1842 * _1842;
        float _3930 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1845 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1818 = (((cbLight._m0[_1826].x * 0.3183098733425140380859375) * _1844) * _1845) + _1799;
        _1820 = (((cbLight._m0[_1826].y * 0.3183098733425140380859375) * _1844) * _1845) + _1800;
        _1822 = (((cbLight._m0[_1826].z * 0.3183098733425140380859375) * _1844) * _1845) + _1801;
    }
    bool _1825 = _1805.y == 0u;
    float _1863;
    float _1865;
    float _1867;
    if (_1825)
    {
        _1863 = _1818;
        _1865 = _1820;
        _1867 = _1822;
    }
    else
    {
        uint _2033 = _1734 + 7u;
        float _2049 = (dot(vec3(cbLight._m0[_1734 + 3u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _3946 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2052 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _1863 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _1818;
        _1865 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _1820;
        _1867 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _1822;
    }
    uint _1870 = _1734 + 8u;
    float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _523) * 0.949999988079071044921875);
    float _1884 = _1883 * _1883;
    float _1885 = cbLight._m0[_1734].x + _600;
    float _1886 = cbLight._m0[_1734].y + _601;
    float _1887 = cbLight._m0[_1734].z + _602;
    float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
    float _1892 = _1891 * _1885;
    float _1893 = _1891 * _1886;
    float _1894 = _1891 * _1887;
    float _1895 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1734].xyz));
    float _3962 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _1899 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1900 = dot(vec3(_520, _521, _522), vec3(_1892, _1893, _1894));
    float _3984 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1904 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1892, _1893, _1894));
    float _3995 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1908 = _1884 * _1884;
    float _1912 = ((_1903 * _1903) * (_1908 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
    float _1921 = 0.959999978542327880859375 - _669;
    float _1923 = 0.959999978542327880859375 - _670;
    float _1924 = 0.959999978542327880859375 - _671;
    float _1931 = 1.0 - _1884;
    float _1942 = (0.5 / (((_1899 * ((_1898 * _1931) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _1931) + _1884) * _1898))) * _1898;
    float _4006 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1908 / ((_1912 * _1912) * 3.141590118408203125));
    uint _1955 = _1734 + 9u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _523) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1771].x + _600;
    float _1969 = cbLight._m0[_1771].y + _601;
    float _1970 = cbLight._m0[_1771].z + _602;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1771].xyz));
    float _4017 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1982 = dot(vec3(_520, _521, _522), vec3(_1975, _1976, _1977));
    float _4028 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1975, _1976, _1977));
    float _4039 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1967 * _1967;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _2008 = 1.0 - _1967;
    float _2018 = (0.5 / (((_1899 * ((_1981 * _2008) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2008) + _1967) * _1981))) * _1981;
    float _4050 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    float _2030 = (((((_2001 * _1921) + _672) * cbLight._m0[_1955].x) * _2020) * _1757) + (((((_1920 * _1921) + _672) * cbLight._m0[_1870].x) * _1944) * _1767);
    float _2031 = (((((_2001 * _1923) + _674) * cbLight._m0[_1955].y) * _2020) * _1757) + (((((_1920 * _1923) + _674) * cbLight._m0[_1870].y) * _1944) * _1767);
    float _2032 = (((((_2001 * _1924) + _675) * cbLight._m0[_1955].z) * _2020) * _1757) + (((((_1920 * _1924) + _675) * cbLight._m0[_1870].z) * _1944) * _1767);
    float _2094;
    float _2096;
    float _2098;
    if (_1807)
    {
        _2094 = _2030;
        _2096 = _2031;
        _2098 = _2032;
    }
    else
    {
        uint _2100 = _1734 + 2u;
        uint _2104 = _1734 + 10u;
        float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _523) * 0.949999988079071044921875);
        float _2119 = _2118 * _2118;
        float _2120 = cbLight._m0[_2100].x + _600;
        float _2121 = cbLight._m0[_2100].y + _601;
        float _2122 = cbLight._m0[_2100].z + _602;
        float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
        float _2127 = _2126 * _2120;
        float _2128 = _2126 * _2121;
        float _2129 = _2126 * _2122;
        float _2130 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2100].xyz));
        float _4061 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2134 = dot(vec3(_520, _521, _522), vec3(_2127, _2128, _2129));
        float _4072 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2138 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2127, _2128, _2129));
        float _4083 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2142 = _2119 * _2119;
        float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
        float _2153 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
        float _2160 = 1.0 - _2119;
        float _2170 = (0.5 / (((_1899 * ((_2133 * _2160) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2160) + _2119) * _2133))) * _2133;
        float _4094 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2172 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
        float _2173 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2094 = (((((_2153 * _1921) + _672) * cbLight._m0[_2104].x) * _2172) * _2173) + _2030;
        _2096 = (((((_2153 * _1923) + _674) * cbLight._m0[_2104].y) * _2172) * _2173) + _2031;
        _2098 = (((((_2153 * _1924) + _675) * cbLight._m0[_2104].z) * _2172) * _2173) + _2032;
    }
    float _2208;
    float _2210;
    float _2212;
    if (_1825)
    {
        _2208 = _2094;
        _2210 = _2096;
        _2212 = _2098;
    }
    else
    {
        uint _2219 = _1734 + 3u;
        uint _2223 = _1734 + 11u;
        float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _523) * 0.949999988079071044921875);
        float _2238 = _2237 * _2237;
        float _2239 = cbLight._m0[_2219].x + _600;
        float _2240 = cbLight._m0[_2219].y + _601;
        float _2241 = cbLight._m0[_2219].z + _602;
        float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
        float _2246 = _2245 * _2239;
        float _2247 = _2245 * _2240;
        float _2248 = _2245 * _2241;
        float _2249 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2219].xyz));
        float _4110 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2253 = dot(vec3(_520, _521, _522), vec3(_2246, _2247, _2248));
        float _4121 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2257 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2246, _2247, _2248));
        float _4132 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2261 = _2238 * _2238;
        float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
        float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
        float _2279 = 1.0 - _2238;
        float _2289 = (0.5 / (((_1899 * ((_2252 * _2279) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2279) + _2238) * _2252))) * _2252;
        float _4143 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2291 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
        float _2292 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _2208 = (((((_2272 * _1921) + _672) * cbLight._m0[_2223].x) * _2291) * _2292) + _2094;
        _2210 = (((((_2272 * _1923) + _674) * cbLight._m0[_2223].y) * _2291) * _2292) + _2096;
        _2212 = (((((_2272 * _1924) + _675) * cbLight._m0[_2223].z) * _2291) * _2292) + _2098;
    }
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_1732.y == 0u)
    {
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2367;
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2367;
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2367;
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.x;
        uint _2394 = uint((float(_2382.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2383))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2383)));
        float _2404 = (log2(_2370 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2405 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        uint _2408 = uint(isnan(14.0) ? _2405 : (isnan(_2405) ? 14.0 : min(_2405, 14.0)));
        uvec4 _2413 = texelFetch(g_lightClusterGridBuffer, int(((_2408 << 2u) + (_2394 << 6u)) >> 2u));
        uint _2414 = _2413.x;
        uint _2415 = _2382.z;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((((1u << ((_2415 >> 4u) & 15u)) + 4294967295u) & _2414) == 0u) || ((_2415 & 240u) == 0u))
        {
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
        }
        else
        {
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            uint _2664 = 0u;
            uint _2673;
            bool _2674;
            for (;;)
            {
                _2673 = texelFetch(g_lightClassification, int((((_2408 << 5u) + (_2394 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                _2674 = _2673 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2674)
                {
                    frontier_phi_63_pred = _2663;
                    frontier_phi_63_pred_1 = _2662;
                    frontier_phi_63_pred_2 = _2661;
                    frontier_phi_63_pred_3 = _2660;
                    frontier_phi_63_pred_4 = _2659;
                    frontier_phi_63_pred_5 = _2658;
                }
                else
                {
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    uint _2788;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2673;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    for (;;)
                    {
                        uint _2792 = uint(findLSB(_2788)) + (_2664 << 5u);
                        uint _2789 = (_2788 + 4294967295u) & _2788;
                        uint _2794 = _2792 * 48u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2814 = (_2792 * 48u) + 4u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2833 = (_2792 * 48u) + 8u;
                        vec3 _2844 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x));
                        float _2848 = _2808.x - _2368;
                        float _2849 = _2808.y - _2369;
                        float _2850 = _2808.z - _2370;
                        float _2851 = dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850));
                        float _2854 = inversesqrt(_2851);
                        float _2855 = _2854 * _2848;
                        float _2856 = _2854 * _2849;
                        float _2857 = _2854 * _2850;
                        float _2858 = dot(vec3(_628, _631, _634), vec3(_2855, _2856, _2857));
                        float _2863 = 1.0 - (_2851 * _2808.w);
                        float _4169 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2864 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2865 = sqrt(_2851) * _2827.w;
                        float _2868 = 1.39999997615814208984375 / (_2865 + 1.39999997615814208984375);
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2858) + _2869;
                        float _2875 = _2865 * _2865;
                        float _2879 = ((isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))) * _2864) / ((_2875 * 0.699999988079071044921875) + 1.0);
                        float _2883 = (-0.0) - _2368;
                        float _2884 = (-0.0) - _2369;
                        float _2885 = (-0.0) - _2370;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2900 = exp2(log2(1.0 / ((_2875 * 3.5) + 5.0)) * 0.25);
                        float _2901 = 1.0 - _703;
                        float _2908 = sqrt(1.0 - ((1.0 - (_2901 * _2901)) * (1.0 - (_2900 * _2900))));
                        float _2909 = _2908 * _2908;
                        float _2910 = _2909 * _2909;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2913 = _2892 + _2857;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2921 = dot(vec3(_628, _631, _634), vec3(_2890, _2891, _2892));
                        float _4185 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2925 = dot(vec3(_628, _631, _634), vec3(_2917 * _2911, _2917 * _2912, _2917 * _2913));
                        float _4196 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2932 = ((_2928 * _2928) * (_2910 + (-1.0))) + 1.0;
                        float _2933 = _2868 * _2909;
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2858) + _2934;
                        float _4207 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2939 = 1.0 - _2909;
                        float _2949 = (0.5 / (((_2938 * ((_2924 * _2939) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2909) * _2924))) * _2938;
                        float _4218 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2960 = (((_2910 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2932 * _2932) * ((_2875 * 2.1991131305694580078125) + 3.141590118408203125))) * _2864;
                        _2717 = (_2879 * _2827.x) + _2785;
                        _2718 = (_2879 * _2827.y) + _2786;
                        _2719 = (_2879 * _2827.z) + _2787;
                        _2714 = (_2960 * _2844.x) + _2782;
                        _2715 = (_2960 * _2844.y) + _2783;
                        _2716 = (_2960 * _2844.z) + _2784;
                        if (_2789 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2789;
                        }
                    }
                    frontier_phi_63_pred = _2719;
                    frontier_phi_63_pred_1 = _2718;
                    frontier_phi_63_pred_2 = _2717;
                    frontier_phi_63_pred_3 = _2716;
                    frontier_phi_63_pred_4 = _2715;
                    frontier_phi_63_pred_5 = _2714;
                }
                _2525 = frontier_phi_63_pred;
                _2523 = frontier_phi_63_pred_1;
                _2521 = frontier_phi_63_pred_2;
                _2519 = frontier_phi_63_pred_3;
                _2517 = frontier_phi_63_pred_4;
                _2515 = frontier_phi_63_pred_5;
                uint _2665 = _2664 + 1u;
                if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2658 = _2515;
                    _2659 = _2517;
                    _2660 = _2519;
                    _2661 = _2521;
                    _2662 = _2523;
                    _2663 = _2525;
                    _2664 = _2665;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
        }
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.z;
        uint _2531 = (_2529 >> 8u) & 15u;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((4294967295u << _2531) & _2414) == 0u)
        {
            _2626 = _2514;
            _2628 = _2516;
            _2630 = _2518;
            _2632 = _2520;
            _2634 = _2522;
            _2636 = _2524;
        }
        else
        {
            float _2651 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
            float _2652 = _2651 * _2368;
            float _2653 = _2651 * _2369;
            float _2654 = _2651 * _2370;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2531 < ((_2529 >> 12u) & 15u))
            {
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2765 = _2514;
                float _2766 = _2516;
                float _2767 = _2518;
                float _2768 = _2520;
                float _2769 = _2522;
                float _2770 = _2524;
                uint _2771 = _2531;
                uint _2780;
                bool _2781;
                for (;;)
                {
                    _2780 = texelFetch(g_lightClassification, int((((_2408 << 5u) + (_2394 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                    _2781 = _2780 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2781)
                    {
                        frontier_phi_69_pred = _2770;
                        frontier_phi_69_pred_1 = _2769;
                        frontier_phi_69_pred_2 = _2768;
                        frontier_phi_69_pred_3 = _2767;
                        frontier_phi_69_pred_4 = _2766;
                        frontier_phi_69_pred_5 = _2765;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        float _2983 = _2770;
                        uint _2984 = _2780;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        vec3 _3038;
                        vec4 _3054;
                        vec4 _3070;
                        float _3117;
                        bool _3118;
                        for (;;)
                        {
                            uint _2995 = ((_2771 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3028 = (_2995 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3041 = (_2995 * 40u) + 16u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3057 = (_2995 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_2995 * 40u) + 24u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3092 = (_2995 * 40u) + 28u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3117 = fma(_2370, _3105.z, fma(_2369, _3105.y, _3105.x * _2368)) + _3105.w;
                            _3118 = !((fma(_2370, _3086.z, fma(_2369, _3086.y, _3086.x * _2368)) + _3086.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3118)
                            {
                                float _3145 = _3010.x - _2368;
                                float _3146 = _3010.y - _2369;
                                float _3147 = _3010.z - _2370;
                                float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                                float _3151 = inversesqrt(_3148);
                                float _3152 = _3151 * _3145;
                                float _3153 = _3151 * _3146;
                                float _3154 = _3151 * _3147;
                                float _3158 = 1.0 - (_3148 / (_3011 * _3011));
                                float _4229 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3163 = sqrt(_3148) * _3026.w;
                                float _3165 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                                float _3166 = _3165 * _3165;
                                float _3169 = ((1.0 - _3166) * dot(vec3(_3152, _3153, _3154), vec3(_628, _631, _634))) + _3166;
                                float _3172 = _3163 * _3163;
                                float _3176 = (fma(_2370, _3054.z, fma(_2369, _3054.y, _3054.x * _2368)) + _3054.w) / _3117;
                                float _3177 = (fma(_2370, _3070.z, fma(_2369, _3070.y, _3070.x * _2368)) + _3070.w) / _3117;
                                float _3181 = 1.0 - dot(vec2(_3176, _3177), vec2(_3176, _3177));
                                float _4245 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3183 = _3182 * (((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3159) / ((_3172 * 0.699999988079071044921875) + 1.0));
                                float _3195 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                                float _3196 = 1.0 - _703;
                                float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                                float _3204 = _3203 * _3203;
                                float _3205 = _3204 * _3204;
                                float _3206 = _3152 - _2652;
                                float _3207 = _3153 - _2653;
                                float _3208 = _3154 - _2654;
                                float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                                float _3216 = dot(vec3(_628, _631, _634), vec3((-0.0) - _2652, (-0.0) - _2653, (-0.0) - _2654));
                                float _4256 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3220 = dot(vec3(_628, _631, _634), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                                float _4267 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                                float _3228 = _3165 * _3204;
                                float _3229 = _3228 * _3228;
                                float _3235 = ((1.0 - _3229) * dot(vec3(_628, _631, _634), vec3(_3152, _3153, _3154))) + _3229;
                                float _4278 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3237 = 1.0 - _3204;
                                float _3247 = (0.5 / (((_3236 * ((_3219 * _3237) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3204) * _3219))) * _3236;
                                float _4289 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3257 = (_3182 * _3159) * (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3227 * _3227) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3183 * _3026.z;
                                frontier_phi_75_pred_1 = _3183 * _3026.y;
                                frontier_phi_75_pred_2 = _3183 * _3026.x;
                                frontier_phi_75_pred_3 = _3257 * _3038.z;
                                frontier_phi_75_pred_4 = _3257 * _3038.y;
                                frontier_phi_75_pred_5 = _3257 * _3038.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3266 = frontier_phi_75_pred;
                            _3265 = frontier_phi_75_pred_1;
                            _3264 = frontier_phi_75_pred_2;
                            _3263 = frontier_phi_75_pred_3;
                            _3262 = frontier_phi_75_pred_4;
                            _3261 = frontier_phi_75_pred_5;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2970;
                        frontier_phi_69_pred_1 = _2969;
                        frontier_phi_69_pred_2 = _2968;
                        frontier_phi_69_pred_3 = _2967;
                        frontier_phi_69_pred_4 = _2966;
                        frontier_phi_69_pred_5 = _2965;
                    }
                    _2637 = frontier_phi_69_pred;
                    _2635 = frontier_phi_69_pred_1;
                    _2633 = frontier_phi_69_pred_2;
                    _2631 = frontier_phi_69_pred_3;
                    _2629 = frontier_phi_69_pred_4;
                    _2627 = frontier_phi_69_pred_5;
                    uint _2772 = _2771 + 1u;
                    if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2765 = _2627;
                        _2766 = _2629;
                        _2767 = _2631;
                        _2768 = _2633;
                        _2769 = _2635;
                        _2770 = _2637;
                        _2771 = _2772;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2637;
                frontier_phi_57_58_ladder_1 = _2635;
                frontier_phi_57_58_ladder_2 = _2633;
                frontier_phi_57_58_ladder_3 = _2631;
                frontier_phi_57_58_ladder_4 = _2629;
                frontier_phi_57_58_ladder_5 = _2627;
            }
            else
            {
                frontier_phi_57_58_ladder = _2524;
                frontier_phi_57_58_ladder_1 = _2522;
                frontier_phi_57_58_ladder_2 = _2520;
                frontier_phi_57_58_ladder_3 = _2518;
                frontier_phi_57_58_ladder_4 = _2516;
                frontier_phi_57_58_ladder_5 = _2514;
            }
            _2626 = frontier_phi_57_58_ladder_5;
            _2628 = frontier_phi_57_58_ladder_4;
            _2630 = frontier_phi_57_58_ladder_3;
            _2632 = frontier_phi_57_58_ladder_2;
            _2634 = frontier_phi_57_58_ladder_1;
            _2636 = frontier_phi_57_58_ladder;
        }
        float _2641 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2426 = (_2641 * _2632) + _1863;
        _2428 = (_2641 * _2634) + _1865;
        _2430 = (_2641 * _2636) + _1867;
        _2432 = ((_2626 * _672) * _2641) + _2208;
        _2434 = ((_2628 * _674) * _2641) + _2210;
        _2436 = ((_2630 * _675) * _2641) + _2212;
    }
    else
    {
        _2426 = _1863;
        _2428 = _1865;
        _2430 = _1867;
        _2432 = _2208;
        _2434 = _2210;
        _2436 = _2212;
    }
    float _4305 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4316 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4327 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    uint _2456 = _647 + 6u;
    float _2464 = _608 / cbSceneParam._m0[86u].x;
    float _2465 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2479 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2481 = _2479.x;
    float _2482 = _2479.y;
    float _2483 = _2479.z;
    float _2484 = _2479.w;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2539 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2540 = _2539 / _543;
        float _2551 = _2540 * _593;
        float _2552 = _594 * _2540;
        float _2553 = (-0.0) - _2552;
        float _2554 = _2540 * _595;
        float _2556 = (cbSceneParam._m0[77u].w * _2553) / _2539;
        float _2557 = _2556 + cbSceneParam._m0[79u].w;
        float _2558 = cbSceneParam._m0[79u].w - _2552;
        float _2564 = sqrt(((_2551 * _2551) + (_2552 * _2552)) + (_2554 * _2554));
        float _2567 = (1.0 - (cbSceneParam._m0[77u].w / _2539)) * _2564;
        float _2572 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2574 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2727;
        if (abs((_2553 - _2556) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2727 = ((((_2557 > 0.0) ? exp2(_2572 * _2557) : (2.0 - exp2(_2574 * _2557))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2567;
        }
        else
        {
            float _2687 = 1.0 / cbSceneParam._m0[80u].x;
            float _2688 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : max(_2557, _2558));
            float _2689 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : min(_2557, _2558));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            _2727 = ((abs(_2564 / _2553) * cbSceneParam._m0[80u].y) * ((((_2698 - _2699) * 2.0) - ((exp2(_2572 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)))) - exp2(_2572 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))))) * _2687)) - ((exp2(_2574 * _2698) - exp2(_2574 * _2699)) * _2687))) + (_2567 * cbSceneParam._m0[80u].z);
        }
        vec4 _2729 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, 1.0), 0.0);
        float _2738 = exp2((_2727 * (-1.44269502162933349609375)) * (1.0 - _2729.w));
        float _2739 = log2(_2738);
        float _2755 = log2(_2484);
        _2576 = (exp2(_2755 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].x)) * _2729.x) / cbSceneParam._m0[78u].x)) + _2481;
        _2578 = (exp2(_2755 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].y)) * _2729.y) / cbSceneParam._m0[78u].y)) + _2482;
        _2580 = (exp2(_2755 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].z)) * _2729.z) / cbSceneParam._m0[78u].z)) + _2483;
        _2582 = _2738 * _2484;
    }
    else
    {
        _2576 = _2481;
        _2578 = _2482;
        _2580 = _2483;
        _2582 = _2484;
    }
    float _2594 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2595 = _2594 == 3.0;
    float _2596 = log2(_2582);
    float _2603 = exp2(_2596 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2426 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _687))) + ((_2432 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1497)) * cbPerFrame._m0[3u].x));
    float _2604 = exp2(_2596 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2428 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _687))) + ((_2434 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1497)) * cbPerFrame._m0[3u].x));
    float _2605 = exp2(_2596 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2430 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _687))) + ((_2436 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1497)) * cbPerFrame._m0[3u].x));
    float _2614 = (_2594 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2614 * (_2595 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.y = _2614 * (_2595 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.z = _2614 * (_2595 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2580)));
    SV_Target.w = cbInstanceData._m0[_2456].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2456].w;
}


