#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _968;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3587 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3598 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))));
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _341 = _336.x * cbMtdParam._m0[9u].x;
    float _342 = _336.y * cbMtdParam._m0[9u].y;
    float _343 = _336.z * cbMtdParam._m0[9u].z;
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _376 = (((_362.x * cbMtdParam._m0[10u].x) - _341) * _297) + _341;
    float _377 = (((_362.y * cbMtdParam._m0[10u].y) - _342) * _297) + _342;
    float _378 = (((_362.z * cbMtdParam._m0[10u].z) - _343) * _297) + _343;
    vec4 _391 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _393 = _391.x;
    float _411 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _393) * _297) + _393;
    float _414 = fma(_318, _230, fma(_312, _222 * TANGENT.x, (_208 * _200) * _310));
    float _417 = fma(_318, _231, fma(_312, _222 * TANGENT.y, (_208 * _201) * _310));
    float _420 = fma(_318, _232, fma(_312, _222 * TANGENT.z, (_208 * _202) * _310));
    float _424 = inversesqrt(dot(vec3(_414, _417, _420), vec3(_414, _417, _420)));
    float _425 = _424 * _414;
    float _426 = _424 * _417;
    float _427 = _424 * _420;
    float _3609 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _428 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3631 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3642 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3653 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _432 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _448 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _499 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _489);
    float _500 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _489);
    float _501 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _489);
    float _505 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
    float _506 = _499 * _505;
    float _507 = _500 * _505;
    float _508 = _501 * _505;
    float _514 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _515 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _534 = fma(_427, cbSceneParam._m0[5u].z, fma(_426, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _425));
    float _537 = fma(_427, cbSceneParam._m0[6u].z, fma(_426, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _425));
    float _540 = fma(_427, cbSceneParam._m0[7u].z, fma(_426, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _425));
    uint _553 = uint(roundEven(NORMAL.w)) * 13u;
    uint _555 = (_553 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3664 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _567 = 1.0 - _432;
    float _568 = _564 * _567;
    float _569 = _565 * _567;
    float _570 = _566 * _567;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _432;
    float _576 = (_565 + (-0.039999999105930328369140625)) * _432;
    float _577 = (_566 + (-0.039999999105930328369140625)) * _432;
    float _578 = _575 + 0.039999999105930328369140625;
    float _580 = _576 + 0.039999999105930328369140625;
    float _581 = _577 + 0.039999999105930328369140625;
    vec4 _590 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _514, cbSceneParam._m0[86u].y * _515));
    float _593 = _590.x * TEXCOORD_9.w;
    float _594 = dot(vec3(_425, _426, _427), vec3(_506, _507, _508));
    float _597 = _594 * 2.0;
    float _601 = (_597 * _425) - _506;
    float _602 = (_597 * _426) - _507;
    float _603 = (_597 * _427) - _508;
    float _607 = abs(dot(vec3(_506, _507, _508), vec3(_425, _426, _427)));
    float _3697 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _609 = sqrt(_428);
    float _622 = exp2((_609 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_609 * 3.0));
    float _628 = (1.0 - _622) * ((_609 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _629 = _622 * _609;
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _967;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _692 = fma(_665, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657));
        float _696 = fma(_665, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657));
        float _700 = fma(_665, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657));
        float _725 = _657 + _425;
        float _726 = _661 + _426;
        float _727 = _665 + _427;
        float _737 = fma(_727, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725)) - _692;
        float _738 = fma(_727, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725)) - _696;
        float _739 = fma(_727, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725)) - _700;
        float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
        float _756 = ((_743 * _737) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_692 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_743 * _738) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_696 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_743 * _739) / cbModelParam._m0[34u].z) + ((((((_700 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        float _795 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_761.x + (-0.5));
        float _797 = _795 * (_761.y + (-0.5));
        float _798 = _795 * (_761.z + (-0.5));
        float _805 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_768.x + (-0.5));
        float _807 = _805 * (_768.y + (-0.5));
        float _808 = _805 * (_768.z + (-0.5));
        float _815 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_775.x + (-0.5));
        float _817 = _815 * (_775.y + (-0.5));
        float _818 = _815 * (_775.z + (-0.5));
        float _825 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_782.x + (-0.5));
        float _827 = _825 * (_782.y + (-0.5));
        float _828 = _825 * (_782.z + (-0.5));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = _796 * 0.5;
        float _833 = _806 * 0.5;
        float _834 = _816 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _849 = (dot(vec3(_425, _426, _427), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _859 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3745 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_861 + 1.0))) + _866) * _829;
        float _876 = _797 * 0.5;
        float _877 = _807 * 0.5;
        float _878 = _817 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_425, _426, _427), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3778 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_903 + 1.0))) + _908) * _830;
        float _918 = _798 * 0.5;
        float _919 = _808 * 0.5;
        float _920 = _818 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_425, _426, _427), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3811 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_945 + 1.0))) + _950) * _831;
        _967 = _798;
        _969 = _797;
        _970 = _796;
        _971 = _808;
        _972 = _807;
        _973 = _806;
        _974 = _818;
        _975 = _817;
        _976 = _816;
        _977 = _831;
        _978 = _830;
        _979 = _829;
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
    }
    else
    {
        _967 = _968;
        _969 = _968;
        _970 = _968;
        _971 = _968;
        _972 = _968;
        _973 = _968;
        _974 = _968;
        _975 = _968;
        _976 = _968;
        _977 = _968;
        _978 = _968;
        _979 = _968;
        _980 = 0.0;
        _981 = 0.0;
        _982 = 0.0;
    }
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1008 = fma(_665, cbModelParam._m0[30u].z, fma(_661, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _657));
        float _1012 = fma(_665, cbModelParam._m0[31u].z, fma(_661, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _657));
        float _1016 = fma(_665, cbModelParam._m0[32u].z, fma(_661, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _657));
        float _1039 = _657 + _425;
        float _1040 = _661 + _426;
        float _1041 = _665 + _427;
        float _1051 = fma(_1041, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039)) - _1008;
        float _1052 = fma(_1041, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039)) - _1012;
        float _1053 = fma(_1041, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039)) - _1016;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1008 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1012 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[35u].z) + ((((((_1016 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1107 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1074.x + (-0.5));
        float _1109 = _1107 * (_1074.y + (-0.5));
        float _1110 = _1107 * (_1074.z + (-0.5));
        float _1117 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1081.x + (-0.5));
        float _1119 = _1117 * (_1081.y + (-0.5));
        float _1120 = _1117 * (_1081.z + (-0.5));
        float _1127 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1088.x + (-0.5));
        float _1129 = _1127 * (_1088.y + (-0.5));
        float _1130 = _1127 * (_1088.z + (-0.5));
        float _1137 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1095.x + (-0.5));
        float _1139 = _1137 * (_1095.y + (-0.5));
        float _1140 = _1137 * (_1095.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_425, _426, _427), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3874 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1171 + 1.0))) + _1176) * _1141;
        float _1186 = _1109 * 0.5;
        float _1187 = _1119 * 0.5;
        float _1188 = _1129 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_425, _426, _427), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3907 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1213 + 1.0))) + _1218) * _1142;
        float _1228 = _1110 * 0.5;
        float _1229 = _1120 * 0.5;
        float _1230 = _1130 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_425, _426, _427), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3940 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1255 + 1.0))) + _1260) * _1143;
        _1277 = _1110;
        _1278 = _1109;
        _1279 = _1108;
        _1280 = _1120;
        _1281 = _1119;
        _1282 = _1118;
        _1283 = _1130;
        _1284 = _1129;
        _1285 = _1128;
        _1286 = _1143;
        _1287 = _1142;
        _1288 = _1141;
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _968;
        _1278 = _968;
        _1279 = _968;
        _1280 = _968;
        _1281 = _968;
        _1282 = _968;
        _1283 = _968;
        _1284 = _968;
        _1285 = _968;
        _1286 = _968;
        _1287 = _968;
        _1288 = _968;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _980)) + _980;
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _981)) + _981;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _982)) + _982;
    float _1324 = fma(_1303, cbSceneParam._m0[89u].z, fma(_1302, cbSceneParam._m0[89u].y, _1301 * cbSceneParam._m0[89u].x));
    float _1327 = fma(_1303, cbSceneParam._m0[90u].z, fma(_1302, cbSceneParam._m0[90u].y, _1301 * cbSceneParam._m0[90u].x));
    float _1330 = fma(_1303, cbSceneParam._m0[91u].z, fma(_1302, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1301));
    float _1345 = _601 * 0.5;
    float _1346 = _602 * 0.5;
    float _1347 = _603 * 0.5;
    float _1348 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1351 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1354 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1388;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1361 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_967, _971, _974, _977));
        float _1365 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_969, _972, _975, _978));
        float _1369 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_970, _973, _976, _979));
        float _1376 = dot(vec4(cbModelParam._m0[39u]), vec4(_1345, _1346, _1347, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1399;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1390 = dot(vec4(cbModelParam._m0[40u]), vec4(_1345, _1346, _1347, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1403 = (_1399 * cbModelParam._m0[1u].x) + (_1388 * (1.0 - cbModelParam._m0[1u].x));
    float _1413 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _428);
    float _1414 = isnan(_1413) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1413 : min(cbModelParam._m0[25u].z, _1413));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1463 = fma(_665, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657)) + cbModelParam._m0[13u].w;
        float _1467 = fma(_665, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657)) + cbModelParam._m0[14u].w;
        float _1471 = fma(_665, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657)) + cbModelParam._m0[15u].w;
        float _1474 = fma(_603, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601));
        float _1477 = fma(_603, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601));
        float _1480 = fma(_603, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601));
        float _1508;
        if (_1474 > 0.0)
        {
            _1508 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1508 = frontier_phi_16_14_ladder;
        }
        float _1684;
        if (_1477 > 0.0)
        {
            _1684 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1684 = frontier_phi_25_21_ladder;
        }
        float _1979;
        if (_1480 > 0.0)
        {
            _1979 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1979 = frontier_phi_37_32_ladder;
        }
        float _1981 = isnan(_1684) ? _1508 : (isnan(_1508) ? _1684 : min(_1508, _1684));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1474) + _1463;
        float _1987 = (_1982 * _1477) + _1467;
        float _1988 = (_1982 * _1480) + _1471;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1991 = (-1.0) - _1989;
        float _1993 = _1989 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1988 > _1993) || ((_1988 < _1991) || ((_1987 > _1993) || ((_1987 < _1991) || ((_1986 < _1991) || (_1986 > _1993))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2133 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1988, cbModelParam._m0[9u].z, fma(_1987, cbModelParam._m0[9u].y, _1986 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1988, cbModelParam._m0[10u].z, fma(_1987, cbModelParam._m0[10u].y, _1986 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1988, cbModelParam._m0[11u].z, fma(_1987, cbModelParam._m0[11u].y, _1986 * cbModelParam._m0[11u].x))), _1414);
            frontier_phi_15_37_ladder = _2133.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2133.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2133.z * cbModelParam._m0[1u].y;
        }
        _1496 = frontier_phi_15_37_ladder_1;
        _1498 = frontier_phi_15_37_ladder;
        _1500 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_601, _602, _603), _1414);
        _1496 = _1484.x * cbModelParam._m0[1u].y;
        _1498 = _1484.y * cbModelParam._m0[1u].y;
        _1500 = _1484.z * cbModelParam._m0[1u].y;
    }
    float _1504 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _428);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1504 : min(cbModelParam._m0[25u].w, _1504));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1562 = fma(_665, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657)) + cbModelParam._m0[21u].w;
        float _1566 = fma(_665, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657)) + cbModelParam._m0[22u].w;
        float _1570 = fma(_665, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657)) + cbModelParam._m0[23u].w;
        float _1573 = fma(_603, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601));
        float _1576 = fma(_603, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601));
        float _1579 = fma(_603, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601));
        float _1689;
        if (_1573 > 0.0)
        {
            _1689 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1689 = frontier_phi_27_23_ladder;
        }
        float _2006;
        if (_1576 > 0.0)
        {
            _2006 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2006 = frontier_phi_39_34_ladder;
        }
        float _2344;
        if (_1579 > 0.0)
        {
            _2344 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2344 = frontier_phi_49_46_ladder;
        }
        float _2346 = isnan(_2006) ? _1689 : (isnan(_1689) ? _2006 : min(_1689, _2006));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1573) + _1562;
        float _2352 = (_2347 * _1576) + _1566;
        float _2353 = (_2347 * _1579) + _1570;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2354;
        float _2357 = _2354 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2353 > _2357) || ((_2353 < _2355) || ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 < _2355) || (_2351 > _2357))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2353, cbModelParam._m0[17u].z, fma(_2352, cbModelParam._m0[17u].y, _2351 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2353, cbModelParam._m0[18u].z, fma(_2352, cbModelParam._m0[18u].y, _2351 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2353, cbModelParam._m0[19u].z, fma(_2352, cbModelParam._m0[19u].y, _2351 * cbModelParam._m0[19u].x))), _1505);
            frontier_phi_24_49_ladder = _2475.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2475.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2475.x * cbModelParam._m0[1u].z;
        }
        _1598 = frontier_phi_24_49_ladder_2;
        _1600 = frontier_phi_24_49_ladder_1;
        _1602 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_601, _602, _603), _1505);
        _1598 = _1582.x * cbModelParam._m0[1u].z;
        _1600 = _1582.y * cbModelParam._m0[1u].z;
        _1602 = _1582.z * cbModelParam._m0[1u].z;
    }
    float _1615 = (((_628 * _578) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1617 = (((_628 * _580) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1619 = (((_628 * _581) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, _1615 * cbSceneParam._m0[91u].x));
    float _1663 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1667 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1671 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1676 = _1663 / _1675;
    float _1677 = _1667 / _1675;
    float _1678 = _1671 / _1675;
    float _1825;
    float _1826;
    float _1827;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1705 = ((uint(_1678 > cbSceneParam._m0[59u].y) + uint(_1678 > cbSceneParam._m0[59u].x)) + uint(_1678 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1706 = _1705 + 43u;
        uint _1714 = _1705 + 44u;
        uint _1722 = _1705 + 45u;
        uint _1730 = _1705 + 46u;
        float _1741 = fma(_1675, cbSceneParam._m0[_1706].w, fma(_1671, cbSceneParam._m0[_1706].z, fma(_1667, cbSceneParam._m0[_1706].y, _1663 * cbSceneParam._m0[_1706].x)));
        float _1745 = fma(_1675, cbSceneParam._m0[_1714].w, fma(_1671, cbSceneParam._m0[_1714].z, fma(_1667, cbSceneParam._m0[_1714].y, _1663 * cbSceneParam._m0[_1714].x)));
        float _1753 = fma(_1675, cbSceneParam._m0[_1730].w, fma(_1671, cbSceneParam._m0[_1730].z, fma(_1667, cbSceneParam._m0[_1730].y, _1663 * cbSceneParam._m0[_1730].x)));
        float _1758 = cbSceneParam._m0[33u].z * _1753;
        float _1760 = cbSceneParam._m0[33u].w * _1753;
        float _1763 = fma(_1675, cbSceneParam._m0[_1722].w, fma(_1671, cbSceneParam._m0[_1722].z, fma(_1667, cbSceneParam._m0[_1722].y, _1663 * cbSceneParam._m0[_1722].x))) / _1753;
        float _1811 = (cbSceneParam._m0[33u].x - sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678))) * cbSceneParam._m0[33u].y;
        float _4066 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1818 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 + _1741) / _1753, (_1760 + _1745) / _1753), _1763), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1760 + _1741) / _1753, (_1745 - _1758) / _1753), _1763), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1741 - _1758) / _1753, (_1745 - _1760) / _1753), _1763), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1741 - _1760) / _1753, (_1758 + _1745) / _1753), _1763), 0.0)).x), vec4(0.25)));
        _1825 = 1.0 - (_1818 * cbSceneParam._m0[34u].x);
        _1826 = 1.0 - (_1818 * cbSceneParam._m0[34u].y);
        _1827 = 1.0 - (_1818 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1825 = 1.0;
        _1826 = 1.0;
        _1827 = 1.0;
    }
    float _1891;
    float _1893;
    float _1895;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1879 = fma(_1675, cbSceneParam._m0[63u].w, fma(_1671, cbSceneParam._m0[63u].z, fma(_1667, cbSceneParam._m0[63u].y, _1663 * cbSceneParam._m0[63u].x)));
        float _1880 = fma(_1675, cbSceneParam._m0[60u].w, fma(_1671, cbSceneParam._m0[60u].z, fma(_1667, cbSceneParam._m0[60u].y, _1663 * cbSceneParam._m0[60u].x))) / _1879;
        float _1881 = fma(_1675, cbSceneParam._m0[61u].w, fma(_1671, cbSceneParam._m0[61u].z, fma(_1667, cbSceneParam._m0[61u].y, _1663 * cbSceneParam._m0[61u].x))) / _1879;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1880 >= cbSceneParam._m0[64u].x) && (_1881 >= cbSceneParam._m0[64u].y)) && (_1880 <= cbSceneParam._m0[64u].z)) && (_1881 <= cbSceneParam._m0[64u].w))
        {
            float _2019 = fma(_1675, cbSceneParam._m0[62u].w, fma(_1671, cbSceneParam._m0[62u].z, fma(_1667, cbSceneParam._m0[62u].y, _1663 * cbSceneParam._m0[62u].x))) / _1879;
            float _2023 = isnan(cbSceneParam._m0[41u].w) ? _2019 : (isnan(_2019) ? cbSceneParam._m0[41u].w : max(_2019, cbSceneParam._m0[41u].w));
            float _2066 = (cbSceneParam._m0[33u].x - sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678))) * cbSceneParam._m0[33u].y;
            float _4082 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
            float _2073 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1880, cbSceneParam._m0[33u].w + _1881), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1880, _1881 - cbSceneParam._m0[33u].z), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1880 - cbSceneParam._m0[33u].z, _1881 - cbSceneParam._m0[33u].w), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1880 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1881), _2023), 0.0)).x), vec4(0.25)));
            float _2077 = 1.0 - (_2073 * cbSceneParam._m0[34u].x);
            float _2078 = 1.0 - (_2073 * cbSceneParam._m0[34u].y);
            float _2079 = 1.0 - (_2073 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2078) ? _1826 : (isnan(_1826) ? _2078 : min(_1826, _2078));
            frontier_phi_36_35_ladder_1 = isnan(_2079) ? _1827 : (isnan(_1827) ? _2079 : min(_1827, _2079));
            frontier_phi_36_35_ladder_2 = isnan(_2077) ? _1825 : (isnan(_1825) ? _2077 : min(_1825, _2077));
        }
        else
        {
            frontier_phi_36_35_ladder = _1826;
            frontier_phi_36_35_ladder_1 = _1827;
            frontier_phi_36_35_ladder_2 = _1825;
        }
        _1891 = frontier_phi_36_35_ladder_2;
        _1893 = frontier_phi_36_35_ladder;
        _1895 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1891 = _1825;
        _1893 = _1826;
        _1895 = _1827;
    }
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_553 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1910 = _593 + (-1.0);
    float _1915 = (cbLight._m0[_1903].x * _1910) + 1.0;
    float _1916 = (cbLight._m0[_1903].y * _1910) + 1.0;
    float _1917 = (cbLight._m0[_1903].z * _1910) + 1.0;
    float _1918 = (cbLight._m0[_1903].w * _1910) + 1.0;
    uint _1919 = _1902 + 5u;
    float _1925 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1929 = _1902 + 4u;
    float _1938 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1942 = _1902 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_425, _426, _427));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_425, _426, _427));
    float _4118 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4129 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1919].x * _1925) * _1963) + (((cbLight._m0[_1929].x * _1891) * _1938) * _1961);
    float _1971 = ((_1925 * cbLight._m0[_1919].y) * _1963) + (((cbLight._m0[_1929].y * _1893) * _1938) * _1961);
    float _1972 = ((_1925 * cbLight._m0[_1919].z) * _1963) + (((cbLight._m0[_1929].z * _1895) * _1938) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1902 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_1978)
    {
        _2080 = _1970;
        _2082 = _1971;
        _2084 = _1972;
    }
    else
    {
        uint _2088 = _1902 + 6u;
        float _2104 = (dot(vec3(cbLight._m0[_1902 + 2u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4140 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2107 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2080 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1970;
        _2082 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1971;
        _2084 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1972;
    }
    bool _2087 = _1976.y == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2087)
    {
        _2142 = _2080;
        _2144 = _2082;
        _2146 = _2084;
    }
    else
    {
        uint _2315 = _1902 + 7u;
        float _2331 = (dot(vec3(cbLight._m0[_1902 + 3u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _2332 = _2331 * _2331;
        float _4156 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2333 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2334 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2142 = (((cbLight._m0[_2315].x * 0.3183098733425140380859375) * _2333) * _2334) + _2080;
        _2144 = (((cbLight._m0[_2315].y * 0.3183098733425140380859375) * _2333) * _2334) + _2082;
        _2146 = (((cbLight._m0[_2315].z * 0.3183098733425140380859375) * _2333) * _2334) + _2084;
    }
    uint _2149 = _1902 + 8u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _428) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1902].x + _506;
    float _2165 = cbLight._m0[_1902].y + _507;
    float _2166 = cbLight._m0[_1902].z + _508;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1902].xyz));
    float _4172 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _2178 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2179 = dot(vec3(_425, _426, _427), vec3(_2171, _2172, _2173));
    float _4194 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2171, _2172, _2173));
    float _4205 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2163 * _2163;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0);
    float _2200 = 0.959999978542327880859375 - _575;
    float _2202 = 0.959999978542327880859375 - _576;
    float _2203 = 0.959999978542327880859375 - _577;
    float _2210 = 1.0 - _2163;
    float _2221 = (0.5 / (((_2178 * ((_2177 * _2210) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2210) + _2163) * _2177))) * _2177;
    float _4216 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    uint _2237 = _1902 + 9u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _428) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_1942].x + _506;
    float _2251 = cbLight._m0[_1942].y + _507;
    float _2252 = cbLight._m0[_1942].z + _508;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1942].xyz));
    float _4227 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2264 = dot(vec3(_425, _426, _427), vec3(_2257, _2258, _2259));
    float _4238 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2257, _2258, _2259));
    float _4249 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2249 * _2249;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2283 = exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0);
    float _2290 = 1.0 - _2249;
    float _2300 = (0.5 / (((_2178 * ((_2263 * _2290) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2290) + _2249) * _2263))) * _2263;
    float _4260 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2302 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    float _2312 = (((((_2283 * _2200) + _578) * cbLight._m0[_2237].x) * _2302) * _1925) + ((((cbLight._m0[_2149].x * _1891) * ((_2199 * _2200) + _578)) * _2223) * _1938);
    float _2313 = (((((_2283 * _2202) + _580) * cbLight._m0[_2237].y) * _2302) * _1925) + ((((cbLight._m0[_2149].y * _1893) * ((_2199 * _2202) + _580)) * _2223) * _1938);
    float _2314 = (((((_2283 * _2203) + _581) * cbLight._m0[_2237].z) * _2302) * _1925) + ((((cbLight._m0[_2149].z * _1895) * ((_2199 * _2203) + _581)) * _2223) * _1938);
    float _2370;
    float _2372;
    float _2374;
    if (_1978)
    {
        _2370 = _2312;
        _2372 = _2313;
        _2374 = _2314;
    }
    else
    {
        uint _2376 = _1902 + 2u;
        uint _2380 = _1902 + 10u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _428) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _506;
        float _2397 = cbLight._m0[_2376].y + _507;
        float _2398 = cbLight._m0[_2376].z + _508;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2376].xyz));
        float _4271 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2410 = dot(vec3(_425, _426, _427), vec3(_2403, _2404, _2405));
        float _4282 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4293 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
        float _2436 = 1.0 - _2395;
        float _2446 = (0.5 / (((_2178 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2436) + _2395) * _2409))) * _2409;
        float _4304 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2370 = (((((_2429 * _2200) + _578) * cbLight._m0[_2380].x) * _2448) * _2449) + _2312;
        _2372 = (((((_2429 * _2202) + _580) * cbLight._m0[_2380].y) * _2448) * _2449) + _2313;
        _2374 = (((((_2429 * _2203) + _581) * cbLight._m0[_2380].z) * _2448) * _2449) + _2314;
    }
    float _2480;
    float _2482;
    float _2484;
    if (_2087)
    {
        _2480 = _2370;
        _2482 = _2372;
        _2484 = _2374;
    }
    else
    {
        uint _2491 = _1902 + 3u;
        uint _2495 = _1902 + 11u;
        float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2491].w)) * _428) * 0.949999988079071044921875);
        float _2510 = _2509 * _2509;
        float _2511 = cbLight._m0[_2491].x + _506;
        float _2512 = cbLight._m0[_2491].y + _507;
        float _2513 = cbLight._m0[_2491].z + _508;
        float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
        float _2518 = _2517 * _2511;
        float _2519 = _2517 * _2512;
        float _2520 = _2517 * _2513;
        float _2521 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2491].xyz));
        float _4320 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2525 = dot(vec3(_425, _426, _427), vec3(_2518, _2519, _2520));
        float _4331 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2529 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_2518, _2519, _2520));
        float _4342 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2533 = _2510 * _2510;
        float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
        float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
        float _2551 = 1.0 - _2510;
        float _2561 = (0.5 / (((_2178 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2551) + _2510) * _2524))) * _2524;
        float _4353 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2563 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
        float _2564 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2480 = (((((_2544 * _2200) + _578) * cbLight._m0[_2495].x) * _2563) * _2564) + _2370;
        _2482 = (((((_2544 * _2202) + _580) * cbLight._m0[_2495].y) * _2563) * _2564) + _2372;
        _2484 = (((((_2544 * _2203) + _581) * cbLight._m0[_2495].z) * _2563) * _2564) + _2374;
    }
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_1900.y == 0u)
    {
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.x;
        uint _2597 = uint((float(_2585.y) * floor(float(uint(cbSceneParam._m0[85u].y * _515) / _2586))) + floor(float(uint(cbSceneParam._m0[85u].x * _514) / _2586)));
        float _2607 = (log2(_1678 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2608 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        uint _2611 = uint(isnan(14.0) ? _2608 : (isnan(_2608) ? 14.0 : min(_2608, 14.0)));
        uvec4 _2616 = texelFetch(g_lightClusterGridBuffer, int(((_2611 << 2u) + (_2597 << 6u)) >> 2u));
        uint _2617 = _2616.x;
        uint _2618 = _2585.z;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((((1u << ((_2618 >> 4u) & 15u)) + 4294967295u) & _2617) == 0u) || ((_2618 & 240u) == 0u))
        {
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
        }
        else
        {
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            uint _2846 = 0u;
            uint _2855;
            bool _2856;
            for (;;)
            {
                _2855 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                _2856 = _2855 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2856)
                {
                    frontier_phi_68_pred = _2845;
                    frontier_phi_68_pred_1 = _2844;
                    frontier_phi_68_pred_2 = _2843;
                    frontier_phi_68_pred_3 = _2841;
                    frontier_phi_68_pred_4 = _2840;
                    frontier_phi_68_pred_5 = _2842;
                }
                else
                {
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    uint _2970;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2844;
                    _2969 = _2845;
                    _2970 = _2855;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    for (;;)
                    {
                        uint _2974 = uint(findLSB(_2970)) + (_2846 << 5u);
                        uint _2971 = (_2970 + 4294967295u) & _2970;
                        uint _2976 = _2974 * 48u;
                        vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2996 = (_2974 * 48u) + 4u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3015 = (_2974 * 48u) + 8u;
                        vec3 _3026 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x));
                        float _3030 = _2990.x - _1676;
                        float _3031 = _2990.y - _1677;
                        float _3032 = _2990.z - _1678;
                        float _3033 = dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032));
                        float _3036 = inversesqrt(_3033);
                        float _3037 = _3036 * _3030;
                        float _3038 = _3036 * _3031;
                        float _3039 = _3036 * _3032;
                        float _3040 = dot(vec3(_534, _537, _540), vec3(_3037, _3038, _3039));
                        float _3045 = 1.0 - (_3033 * _2990.w);
                        float _4379 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3047 = sqrt(_3033) * _3009.w;
                        float _3050 = 1.39999997615814208984375 / (_3047 + 1.39999997615814208984375);
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _3040) + _3051;
                        float _3057 = _3047 * _3047;
                        float _3061 = ((isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))) * _3046) / ((_3057 * 0.699999988079071044921875) + 1.0);
                        float _3065 = (-0.0) - _1676;
                        float _3066 = (-0.0) - _1677;
                        float _3067 = (-0.0) - _1678;
                        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                        float _3072 = _3071 * _3065;
                        float _3073 = _3071 * _3066;
                        float _3074 = _3071 * _3067;
                        float _3081 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                        float _3082 = 1.0 - _609;
                        float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                        float _3090 = _3089 * _3089;
                        float _3091 = _3090 * _3090;
                        float _3092 = _3072 + _3037;
                        float _3093 = _3073 + _3038;
                        float _3094 = _3074 + _3039;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3102 = dot(vec3(_534, _537, _540), vec3(_3072, _3073, _3074));
                        float _4395 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3106 = dot(vec3(_534, _537, _540), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                        float _4406 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                        float _3114 = _3050 * _3090;
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3040) + _3115;
                        float _4417 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3119 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3120 = 1.0 - _3090;
                        float _3130 = (0.5 / (((_3119 * ((_3105 * _3120) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3090) * _3105))) * _3119;
                        float _4428 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3141 = (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3113 * _3113) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125))) * _3046;
                        _2899 = (_3061 * _3009.x) + _2967;
                        _2900 = (_3061 * _3009.y) + _2968;
                        _2901 = (_3061 * _3009.z) + _2969;
                        _2896 = (_3141 * _3026.x) + _2964;
                        _2897 = (_3141 * _3026.y) + _2965;
                        _2898 = (_3141 * _3026.z) + _2966;
                        if (_2971 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2900;
                            _2969 = _2901;
                            _2970 = _2971;
                        }
                    }
                    frontier_phi_68_pred = _2901;
                    frontier_phi_68_pred_1 = _2900;
                    frontier_phi_68_pred_2 = _2899;
                    frontier_phi_68_pred_3 = _2897;
                    frontier_phi_68_pred_4 = _2896;
                    frontier_phi_68_pred_5 = _2898;
                }
                _2707 = frontier_phi_68_pred;
                _2705 = frontier_phi_68_pred_1;
                _2703 = frontier_phi_68_pred_2;
                _2699 = frontier_phi_68_pred_3;
                _2697 = frontier_phi_68_pred_4;
                _2701 = frontier_phi_68_pred_5;
                uint _2847 = _2846 + 1u;
                if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2840 = _2697;
                    _2841 = _2699;
                    _2842 = _2701;
                    _2843 = _2703;
                    _2844 = _2705;
                    _2845 = _2707;
                    _2846 = _2847;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
        }
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.z;
        uint _2713 = (_2711 >> 8u) & 15u;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        if (((4294967295u << _2713) & _2617) == 0u)
        {
            _2808 = _2696;
            _2810 = _2698;
            _2812 = _2700;
            _2814 = _2702;
            _2816 = _2704;
            _2818 = _2706;
        }
        else
        {
            float _2833 = inversesqrt(dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678)));
            float _2834 = _2833 * _1676;
            float _2835 = _2833 * _1677;
            float _2836 = _2833 * _1678;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2713 < ((_2711 >> 12u) & 15u))
            {
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2947 = _2696;
                float _2948 = _2698;
                float _2949 = _2700;
                float _2950 = _2702;
                float _2951 = _2704;
                float _2952 = _2706;
                uint _2953 = _2713;
                uint _2962;
                bool _2963;
                for (;;)
                {
                    _2962 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                    _2963 = _2962 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2963)
                    {
                        frontier_phi_74_pred = _2949;
                        frontier_phi_74_pred_1 = _2948;
                        frontier_phi_74_pred_2 = _2947;
                        frontier_phi_74_pred_3 = _2952;
                        frontier_phi_74_pred_4 = _2951;
                        frontier_phi_74_pred_5 = _2950;
                    }
                    else
                    {
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3159 = _2947;
                        float _3160 = _2948;
                        float _3161 = _2949;
                        float _3162 = _2950;
                        float _3163 = _2951;
                        float _3164 = _2952;
                        uint _3165 = _2962;
                        uint _3166;
                        vec4 _3191;
                        float _3192;
                        vec4 _3207;
                        vec3 _3219;
                        vec4 _3235;
                        vec4 _3251;
                        float _3298;
                        bool _3299;
                        for (;;)
                        {
                            uint _3176 = ((_2953 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3165));
                            _3166 = (_3165 + 4294967295u) & _3165;
                            uint _3178 = _3176 * 40u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3192 = _3191.w;
                            uint _3194 = (_3176 * 40u) + 4u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3176 * 40u) + 8u;
                            _3219 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x));
                            uint _3222 = (_3176 * 40u) + 16u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3238 = (_3176 * 40u) + 20u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3254 = (_3176 * 40u) + 24u;
                            vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3273 = (_3176 * 40u) + 28u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3298 = fma(_1678, _3286.z, fma(_1677, _3286.y, _3286.x * _1676)) + _3286.w;
                            _3299 = !((fma(_1678, _3267.z, fma(_1677, _3267.y, _3267.x * _1676)) + _3267.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3299)
                            {
                                float _3326 = _3191.x - _1676;
                                float _3327 = _3191.y - _1677;
                                float _3328 = _3191.z - _1678;
                                float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                                float _3332 = inversesqrt(_3329);
                                float _3333 = _3332 * _3326;
                                float _3334 = _3332 * _3327;
                                float _3335 = _3332 * _3328;
                                float _3339 = 1.0 - (_3329 / (_3192 * _3192));
                                float _4439 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3344 = sqrt(_3329) * _3207.w;
                                float _3346 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                                float _3347 = _3346 * _3346;
                                float _3350 = ((1.0 - _3347) * dot(vec3(_3333, _3334, _3335), vec3(_534, _537, _540))) + _3347;
                                float _3353 = _3344 * _3344;
                                float _3357 = (fma(_1678, _3235.z, fma(_1677, _3235.y, _3235.x * _1676)) + _3235.w) / _3298;
                                float _3358 = (fma(_1678, _3251.z, fma(_1677, _3251.y, _3251.x * _1676)) + _3251.w) / _3298;
                                float _3362 = 1.0 - dot(vec2(_3357, _3358), vec2(_3357, _3358));
                                float _4455 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3364 = _3363 * (((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3340) / ((_3353 * 0.699999988079071044921875) + 1.0));
                                float _3376 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                                float _3377 = 1.0 - _609;
                                float _3384 = sqrt(1.0 - ((1.0 - (_3377 * _3377)) * (1.0 - (_3376 * _3376))));
                                float _3385 = _3384 * _3384;
                                float _3386 = _3385 * _3385;
                                float _3387 = _3333 - _2834;
                                float _3388 = _3334 - _2835;
                                float _3389 = _3335 - _2836;
                                float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                                float _3397 = dot(vec3(_534, _537, _540), vec3((-0.0) - _2834, (-0.0) - _2835, (-0.0) - _2836));
                                float _4466 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3400 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3401 = dot(vec3(_534, _537, _540), vec3(_3393 * _3387, _3393 * _3388, _3393 * _3389));
                                float _4477 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3408 = ((_3404 * _3404) * (_3386 + (-1.0))) + 1.0;
                                float _3409 = _3346 * _3385;
                                float _3410 = _3409 * _3409;
                                float _3416 = ((1.0 - _3410) * dot(vec3(_534, _537, _540), vec3(_3333, _3334, _3335))) + _3410;
                                float _4488 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3418 = 1.0 - _3385;
                                float _3428 = (0.5 / (((_3417 * ((_3400 * _3418) + _3385)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3385) * _3400))) * _3417;
                                float _4499 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3438 = (_3363 * _3340) * (((_3386 * 3.1415927410125732421875) * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) / ((_3408 * _3408) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3438 * _3219.z;
                                frontier_phi_80_pred_1 = _3438 * _3219.y;
                                frontier_phi_80_pred_2 = _3438 * _3219.x;
                                frontier_phi_80_pred_3 = _3364 * _3207.z;
                                frontier_phi_80_pred_4 = _3364 * _3207.y;
                                frontier_phi_80_pred_5 = _3364 * _3207.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3444 = frontier_phi_80_pred;
                            _3443 = frontier_phi_80_pred_1;
                            _3442 = frontier_phi_80_pred_2;
                            _3447 = frontier_phi_80_pred_3;
                            _3446 = frontier_phi_80_pred_4;
                            _3445 = frontier_phi_80_pred_5;
                            _3149 = _3445 + _3162;
                            _3150 = _3446 + _3163;
                            _3151 = _3447 + _3164;
                            _3146 = _3442 + _3159;
                            _3147 = _3443 + _3160;
                            _3148 = _3444 + _3161;
                            if (_3166 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3166;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3148;
                        frontier_phi_74_pred_1 = _3147;
                        frontier_phi_74_pred_2 = _3146;
                        frontier_phi_74_pred_3 = _3151;
                        frontier_phi_74_pred_4 = _3150;
                        frontier_phi_74_pred_5 = _3149;
                    }
                    _2813 = frontier_phi_74_pred;
                    _2811 = frontier_phi_74_pred_1;
                    _2809 = frontier_phi_74_pred_2;
                    _2819 = frontier_phi_74_pred_3;
                    _2817 = frontier_phi_74_pred_4;
                    _2815 = frontier_phi_74_pred_5;
                    uint _2954 = _2953 + 1u;
                    if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2947 = _2809;
                        _2948 = _2811;
                        _2949 = _2813;
                        _2950 = _2815;
                        _2951 = _2817;
                        _2952 = _2819;
                        _2953 = _2954;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2817;
                frontier_phi_62_63_ladder_1 = _2815;
                frontier_phi_62_63_ladder_2 = _2813;
                frontier_phi_62_63_ladder_3 = _2819;
                frontier_phi_62_63_ladder_4 = _2811;
                frontier_phi_62_63_ladder_5 = _2809;
            }
            else
            {
                frontier_phi_62_63_ladder = _2704;
                frontier_phi_62_63_ladder_1 = _2702;
                frontier_phi_62_63_ladder_2 = _2700;
                frontier_phi_62_63_ladder_3 = _2706;
                frontier_phi_62_63_ladder_4 = _2698;
                frontier_phi_62_63_ladder_5 = _2696;
            }
            _2808 = frontier_phi_62_63_ladder_5;
            _2810 = frontier_phi_62_63_ladder_4;
            _2812 = frontier_phi_62_63_ladder_2;
            _2814 = frontier_phi_62_63_ladder_1;
            _2816 = frontier_phi_62_63_ladder;
            _2818 = frontier_phi_62_63_ladder_3;
        }
        float _2823 = isnan(1.0) ? _593 : (isnan(_593) ? 1.0 : min(_593, 1.0));
        _2629 = (_2823 * _2814) + _2142;
        _2631 = (_2823 * _2816) + _2144;
        _2633 = (_2823 * _2818) + _2146;
        _2635 = ((_2808 * _578) * _2823) + _2480;
        _2637 = ((_2810 * _580) * _2823) + _2482;
        _2639 = ((_2812 * _581) * _2823) + _2484;
    }
    else
    {
        _2629 = _2142;
        _2631 = _2144;
        _2633 = _2146;
        _2635 = _2480;
        _2637 = _2482;
        _2639 = _2484;
    }
    float _4515 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4526 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4537 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    uint _2659 = _553 + 6u;
    float _2667 = _514 / cbSceneParam._m0[86u].x;
    float _2668 = _515 / cbSceneParam._m0[86u].y;
    vec4 _2682 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, (log2((isnan(cbSceneParam._m0[77u].w) ? _448 : (isnan(_448) ? cbSceneParam._m0[77u].w : min(_448, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2684 = _2682.x;
    float _2685 = _2682.y;
    float _2686 = _2682.z;
    float _2687 = _2682.w;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    if (_448 > cbSceneParam._m0[78u].w)
    {
        float _2721 = isnan(_448) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _448 : min(cbSceneParam._m0[80u].w, _448));
        float _2722 = _2721 / _448;
        float _2733 = _2722 * _499;
        float _2734 = _500 * _2722;
        float _2735 = (-0.0) - _2734;
        float _2736 = _2722 * _501;
        float _2738 = (cbSceneParam._m0[77u].w * _2735) / _2721;
        float _2739 = _2738 + cbSceneParam._m0[79u].w;
        float _2740 = cbSceneParam._m0[79u].w - _2734;
        float _2746 = sqrt(((_2733 * _2733) + (_2734 * _2734)) + (_2736 * _2736));
        float _2749 = (1.0 - (cbSceneParam._m0[77u].w / _2721)) * _2746;
        float _2754 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2756 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2909;
        if (abs((_2735 - _2738) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2909 = ((((_2739 > 0.0) ? exp2(_2754 * _2739) : (2.0 - exp2(_2756 * _2739))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2749;
        }
        else
        {
            float _2869 = 1.0 / cbSceneParam._m0[80u].x;
            float _2870 = isnan(_2740) ? _2739 : (isnan(_2739) ? _2740 : max(_2739, _2740));
            float _2871 = isnan(_2740) ? _2739 : (isnan(_2739) ? _2740 : min(_2739, _2740));
            float _2880 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : min(_2870, 0.0));
            float _2881 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : min(_2871, 0.0));
            _2909 = ((abs(_2746 / _2735) * cbSceneParam._m0[80u].y) * ((((_2880 - _2881) * 2.0) - ((exp2(_2754 * (isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0)))) - exp2(_2754 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))))) * _2869)) - ((exp2(_2756 * _2880) - exp2(_2756 * _2881)) * _2869))) + (_2749 * cbSceneParam._m0[80u].z);
        }
        vec4 _2911 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, 1.0), 0.0);
        float _2920 = exp2((_2909 * (-1.44269502162933349609375)) * (1.0 - _2911.w));
        float _2921 = log2(_2920);
        float _2937 = log2(_2687);
        _2758 = (exp2(_2937 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].x)) * _2911.x) / cbSceneParam._m0[78u].x)) + _2684;
        _2760 = (exp2(_2937 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].y)) * _2911.y) / cbSceneParam._m0[78u].y)) + _2685;
        _2762 = (exp2(_2937 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].z)) * _2911.z) / cbSceneParam._m0[78u].z)) + _2686;
        _2764 = _2920 * _2687;
    }
    else
    {
        _2758 = _2684;
        _2760 = _2685;
        _2762 = _2686;
        _2764 = _2687;
    }
    float _2776 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2777 = _2776 == 3.0;
    float _2778 = log2(_2764);
    float _2785 = exp2(_2778 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2629 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _593))) + ((_2635 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1403)) * cbPerFrame._m0[3u].x));
    float _2786 = exp2(_2778 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2631 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _593))) + ((_2637 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1403)) * cbPerFrame._m0[3u].x));
    float _2787 = exp2(_2778 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2633 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _593))) + ((_2639 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1403)) * cbPerFrame._m0[3u].x));
    float _2796 = (_2776 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2796 * (_2777 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2758)));
    SV_Target.y = _2796 * (_2777 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2760)));
    SV_Target.z = _2796 * (_2777 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2762)));
    SV_Target.w = cbInstanceData._m0[_2659].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2659].w;
}


