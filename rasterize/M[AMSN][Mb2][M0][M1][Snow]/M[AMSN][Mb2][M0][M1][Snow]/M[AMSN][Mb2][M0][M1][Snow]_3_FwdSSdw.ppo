#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1063;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3422 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3433 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _323 = fma(_320, _232, fma(_314, _225, _312 * _211));
    float _326 = fma(_320, _233, fma(_314, _226, _312 * _212));
    float _329 = fma(_320, _234, fma(_314, _227, _312 * _213));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    float _347 = cbMtdParam._m0[11u].z + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3444 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _371 = _366.x * cbMtdParam._m0[9u].x;
    float _372 = _366.y * cbMtdParam._m0[9u].y;
    float _373 = _366.z * cbMtdParam._m0[9u].z;
    vec4 _392 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _406 = (((_392.x * cbMtdParam._m0[10u].x) - _371) * _299) + _371;
    float _407 = (((_392.y * cbMtdParam._m0[10u].y) - _372) * _299) + _372;
    float _408 = (((_392.z * cbMtdParam._m0[10u].z) - _373) * _299) + _373;
    vec4 _421 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _432 = ((_421.x - _406) * _348) + _406;
    float _433 = ((_421.y - _407) * _348) + _407;
    float _434 = ((_421.z - _408) * _348) + _408;
    vec4 _447 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _449 = _447.x;
    float _467 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _449) * _299) + _449;
    float _469 = _467 - (_467 * _348);
    vec4 _482 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _489 = (_482.x * 2.0) + (-1.0);
    float _490 = (_482.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3455 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _499 = ((_482.z - _308) * _348) + _308;
    float _506 = ((_489 - _312) * _348) + _312;
    float _507 = ((_490 - _314) * _348) + _314;
    float _508 = ((sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) - _320) * _348) + _320;
    float _511 = fma(_508, _232, fma(_507, _225, _506 * _211));
    float _514 = fma(_508, _233, fma(_507, _226, _506 * _212));
    float _517 = fma(_508, _234, fma(_507, _227, _506 * _213));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _522 = _521 * _511;
    float _523 = _521 * _514;
    float _524 = _521 * _517;
    float _3466 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _525 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3488 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3499 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3510 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _529 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _595 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _585);
    float _596 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _585);
    float _597 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _585);
    float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
    float _602 = _595 * _601;
    float _603 = _596 * _601;
    float _604 = _597 * _601;
    float _610 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _611 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _629 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _632 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _635 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    uint _648 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = (_648 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _656 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_650].x;
    float _657 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * cbInstanceData._m0[_650].y;
    float _658 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_650].z;
    float _3521 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _662 = 1.0 - _529;
    float _663 = _659 * _662;
    float _664 = _660 * _662;
    float _665 = _661 * _662;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _529;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _529;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _529;
    float _673 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _610, cbSceneParam._m0[86u].y * _611));
    float _688 = _685.x * TEXCOORD_9.w;
    float _689 = dot(vec3(_522, _523, _524), vec3(_602, _603, _604));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _522) - _602;
    float _697 = (_692 * _523) - _603;
    float _698 = (_692 * _524) - _604;
    float _702 = abs(dot(vec3(_602, _603, _604), vec3(_522, _523, _524)));
    float _3554 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _704 = sqrt(_525);
    float _717 = exp2((_704 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_704 * 3.0));
    float _723 = (1.0 - _717) * ((_704 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _724 = _717 * _704;
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1062;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _787 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _791 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _795 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _820 = _752 + _522;
        float _821 = _756 + _523;
        float _822 = _760 + _524;
        float _832 = fma(_822, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820)) - _787;
        float _833 = fma(_822, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820)) - _791;
        float _834 = fma(_822, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820)) - _795;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_787 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_791 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[34u].z) + ((((((_795 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _890 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_856.x + (-0.5));
        float _892 = _890 * (_856.y + (-0.5));
        float _893 = _890 * (_856.z + (-0.5));
        float _900 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_863.x + (-0.5));
        float _902 = _900 * (_863.y + (-0.5));
        float _903 = _900 * (_863.z + (-0.5));
        float _910 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_870.x + (-0.5));
        float _912 = _910 * (_870.y + (-0.5));
        float _913 = _910 * (_870.z + (-0.5));
        float _920 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_877.x + (-0.5));
        float _922 = _920 * (_877.y + (-0.5));
        float _923 = _920 * (_877.z + (-0.5));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = _891 * 0.5;
        float _928 = _901 * 0.5;
        float _929 = _911 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _944 = (dot(vec3(_522, _523, _524), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _954 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3602 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_956 + 1.0))) + _961) * _924;
        float _971 = _892 * 0.5;
        float _972 = _902 * 0.5;
        float _973 = _912 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_522, _523, _524), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3635 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_998 + 1.0))) + _1003) * _925;
        float _1013 = _893 * 0.5;
        float _1014 = _903 * 0.5;
        float _1015 = _913 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_522, _523, _524), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3668 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1040 + 1.0))) + _1045) * _926;
        _1062 = _893;
        _1064 = _892;
        _1065 = _891;
        _1066 = _903;
        _1067 = _902;
        _1068 = _901;
        _1069 = _913;
        _1070 = _912;
        _1071 = _911;
        _1072 = _926;
        _1073 = _925;
        _1074 = _924;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
    }
    else
    {
        _1062 = _1063;
        _1064 = _1063;
        _1065 = _1063;
        _1066 = _1063;
        _1067 = _1063;
        _1068 = _1063;
        _1069 = _1063;
        _1070 = _1063;
        _1071 = _1063;
        _1072 = _1063;
        _1073 = _1063;
        _1074 = _1063;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1107 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1111 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1134 = _752 + _522;
        float _1135 = _756 + _523;
        float _1136 = _760 + _524;
        float _1146 = fma(_1136, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134)) - _1103;
        float _1147 = fma(_1136, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134)) - _1107;
        float _1148 = fma(_1136, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134)) - _1111;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1103 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1107 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[35u].z) + ((((((_1111 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_522, _523, _524), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3731 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_522, _523, _524), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3764 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_522, _523, _524), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3797 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1063;
        _1373 = _1063;
        _1374 = _1063;
        _1375 = _1063;
        _1376 = _1063;
        _1377 = _1063;
        _1378 = _1063;
        _1379 = _1063;
        _1380 = _1063;
        _1381 = _1063;
        _1382 = _1063;
        _1383 = _1063;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _696 * 0.5;
    float _1441 = _697 * 0.5;
    float _1442 = _698 * 0.5;
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1062, _1066, _1069, _1072));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _525);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1508 : min(cbModelParam._m0[25u].z, _1508));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1572 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1575 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1603;
        if (_1569 > 0.0)
        {
            _1603 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1603 = frontier_phi_16_14_ladder;
        }
        float _1830;
        if (_1572 > 0.0)
        {
            _1830 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1830 = frontier_phi_25_21_ladder;
        }
        float _2087;
        if (_1575 > 0.0)
        {
            _2087 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2087 = frontier_phi_37_32_ladder;
        }
        float _2089 = isnan(_1830) ? _1603 : (isnan(_1603) ? _1830 : min(_1603, _1830));
        float _2090 = isnan(_2087) ? _2089 : (isnan(_2089) ? _2087 : min(_2089, _2087));
        float _2094 = (_2090 * _1569) + _1558;
        float _2095 = (_2090 * _1572) + _1562;
        float _2096 = (_2090 * _1575) + _1566;
        float _2097 = _2090 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2097;
        float _2101 = _2097 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 > _2101) || ((_2095 < _2099) || ((_2094 < _2099) || (_2094 > _2101))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2096, cbModelParam._m0[9u].z, fma(_2095, cbModelParam._m0[9u].y, _2094 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2096, cbModelParam._m0[10u].z, fma(_2095, cbModelParam._m0[10u].y, _2094 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2096, cbModelParam._m0[11u].z, fma(_2095, cbModelParam._m0[11u].y, _2094 * cbModelParam._m0[11u].x))), _1509);
            frontier_phi_15_37_ladder = _2224.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2224.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2224.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_15_37_ladder_2;
        _1593 = frontier_phi_15_37_ladder_1;
        _1595 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1509);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1599 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _525);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1599 : min(cbModelParam._m0[25u].w, _1599));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1657 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1661 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1665 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1668 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1671 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1674 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1835;
        if (_1668 > 0.0)
        {
            _1835 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1835 = frontier_phi_27_23_ladder;
        }
        float _2114;
        if (_1671 > 0.0)
        {
            _2114 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2114 = frontier_phi_39_34_ladder;
        }
        float _2327;
        if (_1674 > 0.0)
        {
            _2327 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2327 = frontier_phi_48_45_ladder;
        }
        float _2329 = isnan(_2114) ? _1835 : (isnan(_1835) ? _2114 : min(_1835, _2114));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1668) + _1657;
        float _2335 = (_2330 * _1671) + _1661;
        float _2336 = (_2330 * _1674) + _1665;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2337;
        float _2340 = _2337 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2336 > _2340) || ((_2336 < _2338) || ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 < _2338) || (_2334 > _2340))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2336, cbModelParam._m0[17u].z, fma(_2335, cbModelParam._m0[17u].y, _2334 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2336, cbModelParam._m0[18u].z, fma(_2335, cbModelParam._m0[18u].y, _2334 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2336, cbModelParam._m0[19u].z, fma(_2335, cbModelParam._m0[19u].y, _2334 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_24_48_ladder = _2534.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2534.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2534.x * cbModelParam._m0[1u].z;
        }
        _1693 = frontier_phi_24_48_ladder_2;
        _1695 = frontier_phi_24_48_ladder_1;
        _1697 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1600);
        _1693 = _1677.x * cbModelParam._m0[1u].z;
        _1695 = _1677.y * cbModelParam._m0[1u].z;
        _1697 = _1677.z * cbModelParam._m0[1u].z;
    }
    float _1710 = (((_723 * _673) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1693 - _1591)) + _1591);
    float _1712 = (((_723 * _675) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1695 - _1593)) + _1593);
    float _1714 = (((_723 * _676) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1697 - _1595)) + _1595);
    float _1717 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, _1710 * cbSceneParam._m0[91u].x));
    vec4 _1731 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_610, _611));
    float _1733 = _1731.w;
    float _1745 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1733);
    float _1746 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1733);
    float _1747 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1733);
    uvec4 _1751 = floatBitsToUint(cbInstanceData._m0[_648 + 5u]);
    uint _1753 = _1751.x * 14u;
    uint _1754 = _1753 + 13u;
    float _1761 = _688 + (-1.0);
    float _1766 = (cbLight._m0[_1754].x * _1761) + 1.0;
    float _1767 = (cbLight._m0[_1754].y * _1761) + 1.0;
    float _1768 = (cbLight._m0[_1754].z * _1761) + 1.0;
    float _1769 = (cbLight._m0[_1754].w * _1761) + 1.0;
    uint _1770 = _1753 + 5u;
    float _1776 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1780 = _1753 + 4u;
    float _1789 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1793 = _1753 | 1u;
    float _1804 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_522, _523, _524));
    float _1807 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_522, _523, _524));
    float _3933 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _3944 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1812 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.3183098733425140380859375;
    float _1814 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.3183098733425140380859375;
    float _1821 = ((cbLight._m0[_1770].x * _1776) * _1814) + (((cbLight._m0[_1780].x * _1745) * _1789) * _1812);
    float _1822 = ((_1776 * cbLight._m0[_1770].y) * _1814) + (((cbLight._m0[_1780].y * _1746) * _1789) * _1812);
    float _1823 = ((_1776 * cbLight._m0[_1770].z) * _1814) + (((cbLight._m0[_1780].z * _1747) * _1789) * _1812);
    uvec4 _1827 = floatBitsToUint(cbLight._m0[_1753 + 12u]);
    bool _1829 = _1827.x == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1829)
    {
        _1840 = _1821;
        _1842 = _1822;
        _1844 = _1823;
    }
    else
    {
        uint _1848 = _1753 + 6u;
        float _1864 = (dot(vec3(cbLight._m0[_1753 + 2u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _1865 = _1864 * _1864;
        float _3955 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1867 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1840 = (((cbLight._m0[_1848].x * 0.3183098733425140380859375) * _1866) * _1867) + _1821;
        _1842 = (((cbLight._m0[_1848].y * 0.3183098733425140380859375) * _1866) * _1867) + _1822;
        _1844 = (((cbLight._m0[_1848].z * 0.3183098733425140380859375) * _1866) * _1867) + _1823;
    }
    bool _1847 = _1827.y == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1847)
    {
        _1885 = _1840;
        _1887 = _1842;
        _1889 = _1844;
    }
    else
    {
        uint _2058 = _1753 + 7u;
        float _2074 = (dot(vec3(cbLight._m0[_1753 + 3u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _3971 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _2077 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1885 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _1840;
        _1887 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _1842;
        _1889 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _1844;
    }
    uint _1892 = _1753 + 8u;
    float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _525) * 0.949999988079071044921875);
    float _1906 = _1905 * _1905;
    float _1907 = cbLight._m0[_1753].x + _602;
    float _1908 = cbLight._m0[_1753].y + _603;
    float _1909 = cbLight._m0[_1753].z + _604;
    float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
    float _1914 = _1913 * _1907;
    float _1915 = _1913 * _1908;
    float _1916 = _1913 * _1909;
    float _1917 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1753].xyz));
    float _3987 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _1921 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1922 = dot(vec3(_522, _523, _524), vec3(_1914, _1915, _1916));
    float _4009 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1914, _1915, _1916));
    float _4020 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1906 * _1906;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1942 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
    float _1943 = 0.959999978542327880859375 - _670;
    float _1945 = 0.959999978542327880859375 - _671;
    float _1946 = 0.959999978542327880859375 - _672;
    float _1953 = 1.0 - _1906;
    float _1964 = (0.5 / (((_1921 * ((_1920 * _1953) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _1953) + _1906) * _1920))) * _1920;
    float _4031 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    uint _1980 = _1753 + 9u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _525) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1793].x + _602;
    float _1994 = cbLight._m0[_1793].y + _603;
    float _1995 = cbLight._m0[_1793].z + _604;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1793].xyz));
    float _4042 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _2007 = dot(vec3(_522, _523, _524), vec3(_2000, _2001, _2002));
    float _4053 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_2000, _2001, _2002));
    float _4064 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1992 * _1992;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
    float _2033 = 1.0 - _1992;
    float _2043 = (0.5 / (((_1921 * ((_2006 * _2033) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2033) + _1992) * _2006))) * _2006;
    float _4075 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    float _2055 = (((((_2026 * _1943) + _673) * cbLight._m0[_1980].x) * _2045) * _1776) + ((((cbLight._m0[_1892].x * _1745) * ((_1942 * _1943) + _673)) * _1966) * _1789);
    float _2056 = (((((_2026 * _1945) + _675) * cbLight._m0[_1980].y) * _2045) * _1776) + ((((cbLight._m0[_1892].y * _1746) * ((_1942 * _1945) + _675)) * _1966) * _1789);
    float _2057 = (((((_2026 * _1946) + _676) * cbLight._m0[_1980].z) * _2045) * _1776) + ((((cbLight._m0[_1892].z * _1747) * ((_1942 * _1946) + _676)) * _1966) * _1789);
    float _2119;
    float _2121;
    float _2123;
    if (_1829)
    {
        _2119 = _2055;
        _2121 = _2056;
        _2123 = _2057;
    }
    else
    {
        uint _2125 = _1753 + 2u;
        uint _2129 = _1753 + 10u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _525) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _602;
        float _2146 = cbLight._m0[_2125].y + _603;
        float _2147 = cbLight._m0[_2125].z + _604;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2125].xyz));
        float _4086 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2159 = dot(vec3(_522, _523, _524), vec3(_2152, _2153, _2154));
        float _4097 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4108 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
        float _2185 = 1.0 - _2144;
        float _2195 = (0.5 / (((_1921 * ((_2158 * _2185) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2185) + _2144) * _2158))) * _2158;
        float _4119 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2119 = (((((_2178 * _1943) + _673) * cbLight._m0[_2129].x) * _2197) * _2198) + _2055;
        _2121 = (((((_2178 * _1945) + _675) * cbLight._m0[_2129].y) * _2197) * _2198) + _2056;
        _2123 = (((((_2178 * _1946) + _676) * cbLight._m0[_2129].z) * _2197) * _2198) + _2057;
    }
    float _2233;
    float _2235;
    float _2237;
    if (_1847)
    {
        _2233 = _2119;
        _2235 = _2121;
        _2237 = _2123;
    }
    else
    {
        uint _2244 = _1753 + 3u;
        uint _2248 = _1753 + 11u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _525) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _602;
        float _2265 = cbLight._m0[_2244].y + _603;
        float _2266 = cbLight._m0[_2244].z + _604;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2244].xyz));
        float _4135 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2278 = dot(vec3(_522, _523, _524), vec3(_2271, _2272, _2273));
        float _4146 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4157 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
        float _2304 = 1.0 - _2263;
        float _2314 = (0.5 / (((_1921 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2304) + _2263) * _2277))) * _2277;
        float _4168 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2316 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2317 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2233 = (((((_2297 * _1943) + _673) * cbLight._m0[_2248].x) * _2316) * _2317) + _2119;
        _2235 = (((((_2297 * _1945) + _675) * cbLight._m0[_2248].y) * _2316) * _2317) + _2121;
        _2237 = (((((_2297 * _1946) + _676) * cbLight._m0[_2248].z) * _2316) * _2317) + _2123;
    }
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_1751.y == 0u)
    {
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2392;
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2392;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2392;
        uvec4 _2407 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2408 = _2407.x;
        uint _2419 = uint((float(_2407.y) * floor(float(uint(cbSceneParam._m0[85u].y * _611) / _2408))) + floor(float(uint(cbSceneParam._m0[85u].x * _610) / _2408)));
        float _2429 = (log2(_2395 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2430 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        uint _2433 = uint(isnan(14.0) ? _2430 : (isnan(_2430) ? 14.0 : min(_2430, 14.0)));
        uvec4 _2438 = texelFetch(g_lightClusterGridBuffer, int(((_2433 << 2u) + (_2419 << 6u)) >> 2u));
        uint _2439 = _2438.x;
        uint _2440 = _2407.z;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((((1u << ((_2440 >> 4u) & 15u)) + 4294967295u) & _2439) == 0u) || ((_2440 & 240u) == 0u))
        {
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
        }
        else
        {
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            uint _2689 = 0u;
            uint _2698;
            bool _2699;
            for (;;)
            {
                _2698 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2689 << 2u)) >> 2u)).x;
                _2699 = _2698 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2699)
                {
                    frontier_phi_63_pred = _2688;
                    frontier_phi_63_pred_1 = _2687;
                    frontier_phi_63_pred_2 = _2686;
                    frontier_phi_63_pred_3 = _2685;
                    frontier_phi_63_pred_4 = _2684;
                    frontier_phi_63_pred_5 = _2683;
                }
                else
                {
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    uint _2813;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2698;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    for (;;)
                    {
                        uint _2817 = uint(findLSB(_2813)) + (_2689 << 5u);
                        uint _2814 = (_2813 + 4294967295u) & _2813;
                        uint _2819 = _2817 * 48u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2839 = (_2817 * 48u) + 4u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 3u)).x));
                        uint _2858 = (_2817 * 48u) + 8u;
                        vec3 _2869 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x));
                        float _2873 = _2833.x - _2393;
                        float _2874 = _2833.y - _2394;
                        float _2875 = _2833.z - _2395;
                        float _2876 = dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875));
                        float _2879 = inversesqrt(_2876);
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2883 = dot(vec3(_629, _632, _635), vec3(_2880, _2881, _2882));
                        float _2888 = 1.0 - (_2876 * _2833.w);
                        float _4194 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2890 = sqrt(_2876) * _2852.w;
                        float _2893 = 1.39999997615814208984375 / (_2890 + 1.39999997615814208984375);
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2883) + _2894;
                        float _2900 = _2890 * _2890;
                        float _2904 = ((isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))) * _2889) / ((_2900 * 0.699999988079071044921875) + 1.0);
                        float _2908 = (-0.0) - _2393;
                        float _2909 = (-0.0) - _2394;
                        float _2910 = (-0.0) - _2395;
                        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                        float _2915 = _2914 * _2908;
                        float _2916 = _2914 * _2909;
                        float _2917 = _2914 * _2910;
                        float _2925 = exp2(log2(1.0 / ((_2900 * 3.5) + 5.0)) * 0.25);
                        float _2926 = 1.0 - _704;
                        float _2933 = sqrt(1.0 - ((1.0 - (_2926 * _2926)) * (1.0 - (_2925 * _2925))));
                        float _2934 = _2933 * _2933;
                        float _2935 = _2934 * _2934;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2946 = dot(vec3(_629, _632, _635), vec3(_2915, _2916, _2917));
                        float _4210 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2950 = dot(vec3(_629, _632, _635), vec3(_2942 * _2936, _2942 * _2937, _2942 * _2938));
                        float _4221 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2957 = ((_2953 * _2953) * (_2935 + (-1.0))) + 1.0;
                        float _2958 = _2893 * _2934;
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2883) + _2959;
                        float _4232 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2964 = 1.0 - _2934;
                        float _2974 = (0.5 / (((_2963 * ((_2949 * _2964) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2934) * _2949))) * _2963;
                        float _4243 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2985 = (((_2935 * 3.1415927410125732421875) * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) / ((_2957 * _2957) * ((_2900 * 2.1991131305694580078125) + 3.141590118408203125))) * _2889;
                        _2742 = (_2904 * _2852.x) + _2810;
                        _2743 = (_2904 * _2852.y) + _2811;
                        _2744 = (_2904 * _2852.z) + _2812;
                        _2739 = (_2985 * _2869.x) + _2807;
                        _2740 = (_2985 * _2869.y) + _2808;
                        _2741 = (_2985 * _2869.z) + _2809;
                        if (_2814 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2814;
                        }
                    }
                    frontier_phi_63_pred = _2744;
                    frontier_phi_63_pred_1 = _2743;
                    frontier_phi_63_pred_2 = _2742;
                    frontier_phi_63_pred_3 = _2741;
                    frontier_phi_63_pred_4 = _2740;
                    frontier_phi_63_pred_5 = _2739;
                }
                _2550 = frontier_phi_63_pred;
                _2548 = frontier_phi_63_pred_1;
                _2546 = frontier_phi_63_pred_2;
                _2544 = frontier_phi_63_pred_3;
                _2542 = frontier_phi_63_pred_4;
                _2540 = frontier_phi_63_pred_5;
                uint _2690 = _2689 + 1u;
                if (_2690 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2683 = _2540;
                    _2684 = _2542;
                    _2685 = _2544;
                    _2686 = _2546;
                    _2687 = _2548;
                    _2688 = _2550;
                    _2689 = _2690;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
        }
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.z;
        uint _2556 = (_2554 >> 8u) & 15u;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((4294967295u << _2556) & _2439) == 0u)
        {
            _2651 = _2539;
            _2653 = _2541;
            _2655 = _2543;
            _2657 = _2545;
            _2659 = _2547;
            _2661 = _2549;
        }
        else
        {
            float _2676 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
            float _2677 = _2676 * _2393;
            float _2678 = _2676 * _2394;
            float _2679 = _2676 * _2395;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2556 < ((_2554 >> 12u) & 15u))
            {
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2790 = _2539;
                float _2791 = _2541;
                float _2792 = _2543;
                float _2793 = _2545;
                float _2794 = _2547;
                float _2795 = _2549;
                uint _2796 = _2556;
                uint _2805;
                bool _2806;
                for (;;)
                {
                    _2805 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                    _2806 = _2805 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2806)
                    {
                        frontier_phi_69_pred = _2795;
                        frontier_phi_69_pred_1 = _2794;
                        frontier_phi_69_pred_2 = _2793;
                        frontier_phi_69_pred_3 = _2792;
                        frontier_phi_69_pred_4 = _2791;
                        frontier_phi_69_pred_5 = _2790;
                    }
                    else
                    {
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        uint _3009 = _2805;
                        uint _3010;
                        vec4 _3035;
                        float _3036;
                        vec4 _3051;
                        vec3 _3063;
                        vec4 _3079;
                        vec4 _3095;
                        float _3142;
                        bool _3143;
                        for (;;)
                        {
                            uint _3020 = ((_2796 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3009));
                            _3010 = (_3009 + 4294967295u) & _3009;
                            uint _3022 = _3020 * 40u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3036 = _3035.w;
                            uint _3038 = (_3020 * 40u) + 4u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_3020 * 40u) + 8u;
                            _3063 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x));
                            uint _3066 = (_3020 * 40u) + 16u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3082 = (_3020 * 40u) + 20u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3098 = (_3020 * 40u) + 24u;
                            vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3117 = (_3020 * 40u) + 28u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3142 = fma(_2395, _3130.z, fma(_2394, _3130.y, _3130.x * _2393)) + _3130.w;
                            _3143 = !((fma(_2395, _3111.z, fma(_2394, _3111.y, _3111.x * _2393)) + _3111.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3143)
                            {
                                float _3170 = _3035.x - _2393;
                                float _3171 = _3035.y - _2394;
                                float _3172 = _3035.z - _2395;
                                float _3173 = dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172));
                                float _3176 = inversesqrt(_3173);
                                float _3177 = _3176 * _3170;
                                float _3178 = _3176 * _3171;
                                float _3179 = _3176 * _3172;
                                float _3183 = 1.0 - (_3173 / (_3036 * _3036));
                                float _4254 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3188 = sqrt(_3173) * _3051.w;
                                float _3190 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                                float _3191 = _3190 * _3190;
                                float _3194 = ((1.0 - _3191) * dot(vec3(_3177, _3178, _3179), vec3(_629, _632, _635))) + _3191;
                                float _3197 = _3188 * _3188;
                                float _3201 = (fma(_2395, _3079.z, fma(_2394, _3079.y, _3079.x * _2393)) + _3079.w) / _3142;
                                float _3202 = (fma(_2395, _3095.z, fma(_2394, _3095.y, _3095.x * _2393)) + _3095.w) / _3142;
                                float _3206 = 1.0 - dot(vec2(_3201, _3202), vec2(_3201, _3202));
                                float _4270 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3207 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3208 = _3207 * (((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3184) / ((_3197 * 0.699999988079071044921875) + 1.0));
                                float _3220 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                                float _3221 = 1.0 - _704;
                                float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                                float _3229 = _3228 * _3228;
                                float _3230 = _3229 * _3229;
                                float _3231 = _3177 - _2677;
                                float _3232 = _3178 - _2678;
                                float _3233 = _3179 - _2679;
                                float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                                float _3241 = dot(vec3(_629, _632, _635), vec3((-0.0) - _2677, (-0.0) - _2678, (-0.0) - _2679));
                                float _4281 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3245 = dot(vec3(_629, _632, _635), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                                float _4292 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                                float _3253 = _3190 * _3229;
                                float _3254 = _3253 * _3253;
                                float _3260 = ((1.0 - _3254) * dot(vec3(_629, _632, _635), vec3(_3177, _3178, _3179))) + _3254;
                                float _4303 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3262 = 1.0 - _3229;
                                float _3272 = (0.5 / (((_3261 * ((_3244 * _3262) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3229) * _3244))) * _3261;
                                float _4314 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3282 = (_3207 * _3184) * (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) / ((_3252 * _3252) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3208 * _3051.z;
                                frontier_phi_75_pred_1 = _3208 * _3051.y;
                                frontier_phi_75_pred_2 = _3208 * _3051.x;
                                frontier_phi_75_pred_3 = _3282 * _3063.z;
                                frontier_phi_75_pred_4 = _3282 * _3063.y;
                                frontier_phi_75_pred_5 = _3282 * _3063.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3291 = frontier_phi_75_pred;
                            _3290 = frontier_phi_75_pred_1;
                            _3289 = frontier_phi_75_pred_2;
                            _3288 = frontier_phi_75_pred_3;
                            _3287 = frontier_phi_75_pred_4;
                            _3286 = frontier_phi_75_pred_5;
                            _2993 = _3289 + _3006;
                            _2994 = _3290 + _3007;
                            _2995 = _3291 + _3008;
                            _2990 = _3286 + _3003;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            if (_3010 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _3010;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2995;
                        frontier_phi_69_pred_1 = _2994;
                        frontier_phi_69_pred_2 = _2993;
                        frontier_phi_69_pred_3 = _2992;
                        frontier_phi_69_pred_4 = _2991;
                        frontier_phi_69_pred_5 = _2990;
                    }
                    _2662 = frontier_phi_69_pred;
                    _2660 = frontier_phi_69_pred_1;
                    _2658 = frontier_phi_69_pred_2;
                    _2656 = frontier_phi_69_pred_3;
                    _2654 = frontier_phi_69_pred_4;
                    _2652 = frontier_phi_69_pred_5;
                    uint _2797 = _2796 + 1u;
                    if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2790 = _2652;
                        _2791 = _2654;
                        _2792 = _2656;
                        _2793 = _2658;
                        _2794 = _2660;
                        _2795 = _2662;
                        _2796 = _2797;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2662;
                frontier_phi_57_58_ladder_1 = _2660;
                frontier_phi_57_58_ladder_2 = _2658;
                frontier_phi_57_58_ladder_3 = _2656;
                frontier_phi_57_58_ladder_4 = _2654;
                frontier_phi_57_58_ladder_5 = _2652;
            }
            else
            {
                frontier_phi_57_58_ladder = _2549;
                frontier_phi_57_58_ladder_1 = _2547;
                frontier_phi_57_58_ladder_2 = _2545;
                frontier_phi_57_58_ladder_3 = _2543;
                frontier_phi_57_58_ladder_4 = _2541;
                frontier_phi_57_58_ladder_5 = _2539;
            }
            _2651 = frontier_phi_57_58_ladder_5;
            _2653 = frontier_phi_57_58_ladder_4;
            _2655 = frontier_phi_57_58_ladder_3;
            _2657 = frontier_phi_57_58_ladder_2;
            _2659 = frontier_phi_57_58_ladder_1;
            _2661 = frontier_phi_57_58_ladder;
        }
        float _2666 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2451 = (_2666 * _2657) + _1885;
        _2453 = (_2666 * _2659) + _1887;
        _2455 = (_2666 * _2661) + _1889;
        _2457 = ((_2651 * _673) * _2666) + _2233;
        _2459 = ((_2653 * _675) * _2666) + _2235;
        _2461 = ((_2655 * _676) * _2666) + _2237;
    }
    else
    {
        _2451 = _1885;
        _2453 = _1887;
        _2455 = _1889;
        _2457 = _2233;
        _2459 = _2235;
        _2461 = _2237;
    }
    float _4330 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4341 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4352 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    uint _2481 = _648 + 6u;
    float _2489 = _610 / cbSceneParam._m0[86u].x;
    float _2490 = _611 / cbSceneParam._m0[86u].y;
    vec4 _2504 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2506 = _2504.x;
    float _2507 = _2504.y;
    float _2508 = _2504.z;
    float _2509 = _2504.w;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2564 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2565 = _2564 / _545;
        float _2576 = _2565 * _595;
        float _2577 = _596 * _2565;
        float _2578 = (-0.0) - _2577;
        float _2579 = _2565 * _597;
        float _2581 = (cbSceneParam._m0[77u].w * _2578) / _2564;
        float _2582 = _2581 + cbSceneParam._m0[79u].w;
        float _2583 = cbSceneParam._m0[79u].w - _2577;
        float _2589 = sqrt(((_2576 * _2576) + (_2577 * _2577)) + (_2579 * _2579));
        float _2592 = (1.0 - (cbSceneParam._m0[77u].w / _2564)) * _2589;
        float _2597 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2599 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2752;
        if (abs((_2578 - _2581) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2752 = ((((_2582 > 0.0) ? exp2(_2597 * _2582) : (2.0 - exp2(_2599 * _2582))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2592;
        }
        else
        {
            float _2712 = 1.0 / cbSceneParam._m0[80u].x;
            float _2713 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : max(_2582, _2583));
            float _2714 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : min(_2582, _2583));
            float _2723 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : min(_2713, 0.0));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            _2752 = ((abs(_2589 / _2578) * cbSceneParam._m0[80u].y) * ((((_2723 - _2724) * 2.0) - ((exp2(_2597 * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0)))) - exp2(_2597 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0))))) * _2712)) - ((exp2(_2599 * _2723) - exp2(_2599 * _2724)) * _2712))) + (_2592 * cbSceneParam._m0[80u].z);
        }
        vec4 _2754 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, 1.0), 0.0);
        float _2763 = exp2((_2752 * (-1.44269502162933349609375)) * (1.0 - _2754.w));
        float _2764 = log2(_2763);
        float _2780 = log2(_2509);
        _2601 = (exp2(_2780 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].x)) * _2754.x) / cbSceneParam._m0[78u].x)) + _2506;
        _2603 = (exp2(_2780 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].y)) * _2754.y) / cbSceneParam._m0[78u].y)) + _2507;
        _2605 = (exp2(_2780 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].z)) * _2754.z) / cbSceneParam._m0[78u].z)) + _2508;
        _2607 = _2763 * _2509;
    }
    else
    {
        _2601 = _2506;
        _2603 = _2507;
        _2605 = _2508;
        _2607 = _2509;
    }
    float _2619 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2620 = _2619 == 3.0;
    float _2621 = log2(_2607);
    float _2628 = exp2(_2621 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2451 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _688))) + ((_2457 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2629 = exp2(_2621 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2453 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _688))) + ((_2459 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2630 = exp2(_2621 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2455 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _688))) + ((_2461 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2639 = (_2619 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2639 * (_2620 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.y = _2639 * (_2620 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2603)));
    SV_Target.z = _2639 * (_2620 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.w = cbInstanceData._m0[_2481].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2481].w;
}


