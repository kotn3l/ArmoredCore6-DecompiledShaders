#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1108;
float _3521;
float _3522;
float _3523;
float _3524;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _252.x;
    float _256 = _252.y;
    float _257 = _252.z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _302 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3533 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _312 = ((_289.z - _257) * _303) + _257;
    float _316 = ((((_289.x - _255) * _303) + _255) * 2.0) + (-1.0);
    float _318 = ((((_289.y - _256) * _303) + _256) * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3544 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))));
    float _327 = fma(_324, _236, fma(_318, _229, _316 * _215));
    float _330 = fma(_324, _237, fma(_318, _230, _316 * _216));
    float _333 = fma(_324, _238, fma(_318, _231, _316 * _217));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    vec4 _365 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _369 = (cbMtdParam._m0[11u].z + dot(vec4(_337 * _327, _337 * _330, _337 * _333, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_365.x * cbMtdParam._m0[11u].w);
    float _3555 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _392 = _387.x * cbMtdParam._m0[9u].x;
    float _393 = _387.y * cbMtdParam._m0[9u].y;
    float _394 = _387.z * cbMtdParam._m0[9u].z;
    vec4 _413 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _427 = (((_413.x * cbMtdParam._m0[10u].x) - _392) * _303) + _392;
    float _428 = (((_413.y * cbMtdParam._m0[10u].y) - _393) * _303) + _393;
    float _429 = (((_413.z * cbMtdParam._m0[10u].z) - _394) * _303) + _394;
    vec4 _442 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _453 = ((_442.x - _427) * _370) + _427;
    float _454 = ((_442.y - _428) * _370) + _428;
    float _455 = ((_442.z - _429) * _370) + _429;
    float _471 = _303 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _473 = _471 - (_471 * _370);
    vec4 _486 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _493 = (_486.x * 2.0) + (-1.0);
    float _494 = (_486.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_493, _494), vec2(_493, _494));
    float _3566 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _503 = ((_486.z - _312) * _370) + _312;
    float _510 = ((_493 - _316) * _370) + _316;
    float _511 = ((_494 - _318) * _370) + _318;
    float _512 = ((sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) - _324) * _370) + _324;
    float _515 = fma(_512, _236, fma(_511, _229, _510 * _215));
    float _518 = fma(_512, _237, fma(_511, _230, _510 * _216));
    float _521 = fma(_512, _238, fma(_511, _231, _510 * _217));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    float _526 = _525 * _515;
    float _527 = _525 * _518;
    float _528 = _525 * _521;
    float _3577 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _529 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3599 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3610 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3621 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _533 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _599 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _589);
    float _600 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _589);
    float _601 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _589);
    float _605 = inversesqrt(dot(vec3(_599, _600, _601), vec3(_599, _600, _601)));
    float _606 = _599 * _605;
    float _607 = _600 * _605;
    float _608 = _601 * _605;
    vec4 _613 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _615 = _613.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _788 = sqrt(((_599 * _599) + (_600 * _600)) + (_601 * _601));
        float _794 = (cbMatDynParam._m0[5u].x * _788) + cbMatDynParam._m0[5u].y;
        float _3632 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _799 = (cbMatDynParam._m0[5u].z * _788) + cbMatDynParam._m0[5u].w;
        float _3643 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) - _795)) + _795) < ((_615 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _626 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _627 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _646 = fma(_528, cbSceneParam._m0[5u].z, fma(_527, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _526));
    float _649 = fma(_528, cbSceneParam._m0[6u].z, fma(_527, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _526));
    float _652 = fma(_528, cbSceneParam._m0[7u].z, fma(_527, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _526));
    uint _665 = uint(roundEven(NORMAL.w)) * 13u;
    uint _666 = _665 + 9u;
    uint _667 = _666 + uint(cbMatDynParam._m0[0u].w);
    float _673 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_667].x;
    float _674 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_667].y;
    float _675 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_667].z;
    float _3654 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _679 = 1.0 - _533;
    float _680 = _676 * _679;
    float _681 = _677 * _679;
    float _682 = _678 * _679;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _533;
    float _688 = (_677 + (-0.039999999105930328369140625)) * _533;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _533;
    float _690 = _687 + 0.039999999105930328369140625;
    float _692 = _688 + 0.039999999105930328369140625;
    float _693 = _689 + 0.039999999105930328369140625;
    vec4 _702 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _626, cbSceneParam._m0[86u].y * _627));
    float _705 = _702.x * TEXCOORD_9.w;
    float _706 = dot(vec3(_526, _527, _528), vec3(_606, _607, _608));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _526) - _606;
    float _714 = (_709 * _527) - _607;
    float _715 = (_709 * _528) - _608;
    float _719 = abs(dot(vec3(_606, _607, _608), vec3(_526, _527, _528)));
    float _3687 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_529);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _740 = (1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _741 = _734 * _721;
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1107;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _832 = fma(_777, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769));
        float _836 = fma(_777, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769));
        float _840 = fma(_777, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769));
        float _865 = _769 + _526;
        float _866 = _773 + _527;
        float _867 = _777 + _528;
        float _877 = fma(_867, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865)) - _832;
        float _878 = fma(_867, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865)) - _836;
        float _879 = fma(_867, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865)) - _840;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_832 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_836 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[34u].z) + ((((((_840 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _935 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_901.x + (-0.5));
        float _937 = _935 * (_901.y + (-0.5));
        float _938 = _935 * (_901.z + (-0.5));
        float _945 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_908.x + (-0.5));
        float _947 = _945 * (_908.y + (-0.5));
        float _948 = _945 * (_908.z + (-0.5));
        float _955 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_915.x + (-0.5));
        float _957 = _955 * (_915.y + (-0.5));
        float _958 = _955 * (_915.z + (-0.5));
        float _965 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_922.x + (-0.5));
        float _967 = _965 * (_922.y + (-0.5));
        float _968 = _965 * (_922.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _989 = (dot(vec3(_526, _527, _528), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _999 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3735 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1001 + 1.0))) + _1006) * _969;
        float _1016 = _937 * 0.5;
        float _1017 = _947 * 0.5;
        float _1018 = _957 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_526, _527, _528), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3768 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1043 + 1.0))) + _1048) * _970;
        float _1058 = _938 * 0.5;
        float _1059 = _948 * 0.5;
        float _1060 = _958 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_526, _527, _528), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3801 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1085 + 1.0))) + _1090) * _971;
        _1107 = _938;
        _1109 = _937;
        _1110 = _936;
        _1111 = _948;
        _1112 = _947;
        _1113 = _946;
        _1114 = _958;
        _1115 = _957;
        _1116 = _956;
        _1117 = _971;
        _1118 = _970;
        _1119 = _969;
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _1108;
        _1109 = _1108;
        _1110 = _1108;
        _1111 = _1108;
        _1112 = _1108;
        _1113 = _1108;
        _1114 = _1108;
        _1115 = _1108;
        _1116 = _1108;
        _1117 = _1108;
        _1118 = _1108;
        _1119 = _1108;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1151 = fma(_777, cbModelParam._m0[30u].z, fma(_773, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _769));
        float _1155 = fma(_777, cbModelParam._m0[31u].z, fma(_773, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _769));
        float _1159 = fma(_777, cbModelParam._m0[32u].z, fma(_773, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _769));
        float _1182 = _769 + _526;
        float _1183 = _773 + _527;
        float _1184 = _777 + _528;
        float _1194 = fma(_1184, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182)) - _1151;
        float _1195 = fma(_1184, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182)) - _1155;
        float _1196 = fma(_1184, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182)) - _1159;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1151 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1155 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[35u].z) + ((((((_1159 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1250 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1217.x + (-0.5));
        float _1252 = _1250 * (_1217.y + (-0.5));
        float _1253 = _1250 * (_1217.z + (-0.5));
        float _1260 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1224.x + (-0.5));
        float _1262 = _1260 * (_1224.y + (-0.5));
        float _1263 = _1260 * (_1224.z + (-0.5));
        float _1270 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1231.x + (-0.5));
        float _1272 = _1270 * (_1231.y + (-0.5));
        float _1273 = _1270 * (_1231.z + (-0.5));
        float _1280 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1238.x + (-0.5));
        float _1282 = _1280 * (_1238.y + (-0.5));
        float _1283 = _1280 * (_1238.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_526, _527, _528), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3864 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1314 + 1.0))) + _1319) * _1284;
        float _1329 = _1252 * 0.5;
        float _1330 = _1262 * 0.5;
        float _1331 = _1272 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_526, _527, _528), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3897 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1356 + 1.0))) + _1361) * _1285;
        float _1371 = _1253 * 0.5;
        float _1372 = _1263 * 0.5;
        float _1373 = _1273 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_526, _527, _528), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3930 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1398 + 1.0))) + _1403) * _1286;
        _1420 = _1253;
        _1421 = _1252;
        _1422 = _1251;
        _1423 = _1263;
        _1424 = _1262;
        _1425 = _1261;
        _1426 = _1273;
        _1427 = _1272;
        _1428 = _1271;
        _1429 = _1286;
        _1430 = _1285;
        _1431 = _1284;
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1108;
        _1421 = _1108;
        _1422 = _1108;
        _1423 = _1108;
        _1424 = _1108;
        _1425 = _1108;
        _1426 = _1108;
        _1427 = _1108;
        _1428 = _1108;
        _1429 = _1108;
        _1430 = _1108;
        _1431 = _1108;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1121)) + _1121;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1467 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1444));
    float _1488 = _713 * 0.5;
    float _1489 = _714 * 0.5;
    float _1490 = _715 * 0.5;
    float _1491 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1494 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1497 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1531;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1504 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1107, _1111, _1114, _1117));
        float _1508 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1109, _1112, _1115, _1118));
        float _1512 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1519 = dot(vec4(cbModelParam._m0[39u]), vec4(_1488, _1489, _1490, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1542;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1533 = dot(vec4(cbModelParam._m0[40u]), vec4(_1488, _1489, _1490, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1546 = (_1542 * cbModelParam._m0[1u].x) + (_1531 * (1.0 - cbModelParam._m0[1u].x));
    float _1556 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _529);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1556 : min(cbModelParam._m0[25u].z, _1556));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_777, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_777, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_777, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1620 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1623 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1651 = frontier_phi_19_17_ladder;
        }
        float _1878;
        if (_1620 > 0.0)
        {
            _1878 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1878 = frontier_phi_28_24_ladder;
        }
        float _2135;
        if (_1623 > 0.0)
        {
            _2135 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2135 = frontier_phi_40_35_ladder;
        }
        float _2137 = isnan(_1878) ? _1651 : (isnan(_1651) ? _1878 : min(_1651, _1878));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1617) + _1606;
        float _2143 = (_2138 * _1620) + _1610;
        float _2144 = (_2138 * _1623) + _1614;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1557);
            frontier_phi_18_40_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_18_40_ladder_2;
        _1641 = frontier_phi_18_40_ladder_1;
        _1643 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1557);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _529);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_777, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_777, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_777, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1719 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1722 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1883;
        if (_1716 > 0.0)
        {
            _1883 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1883 = frontier_phi_30_26_ladder;
        }
        float _2162;
        if (_1719 > 0.0)
        {
            _2162 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2162 = frontier_phi_42_37_ladder;
        }
        float _2375;
        if (_1722 > 0.0)
        {
            _2375 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2375 = frontier_phi_51_48_ladder;
        }
        float _2377 = isnan(_2162) ? _1883 : (isnan(_1883) ? _2162 : min(_1883, _2162));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1716) + _1705;
        float _2383 = (_2378 * _1719) + _1709;
        float _2384 = (_2378 * _1722) + _1713;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2385;
        float _2388 = _2385 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2384 > _2388) || ((_2384 < _2386) || ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 < _2386) || (_2382 > _2388))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2384, cbModelParam._m0[17u].z, fma(_2383, cbModelParam._m0[17u].y, _2382 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2384, cbModelParam._m0[18u].z, fma(_2383, cbModelParam._m0[18u].y, _2382 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2384, cbModelParam._m0[19u].z, fma(_2383, cbModelParam._m0[19u].y, _2382 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_27_51_ladder = _2582.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2582.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2582.x * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_27_51_ladder_2;
        _1743 = frontier_phi_27_51_ladder_1;
        _1745 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1648);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1758 = (((_740 * _690) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1741 - _1639)) + _1639);
    float _1760 = (((_740 * _692) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1743 - _1641)) + _1641);
    float _1762 = (((_740 * _693) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1745 - _1643)) + _1643);
    float _1765 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    vec4 _1779 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_626, _627));
    float _1781 = _1779.w;
    float _1793 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1781);
    float _1794 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1781);
    float _1795 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1781);
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_665 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _705 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1837 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1841 = _1801 | 1u;
    float _1852 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_526, _527, _528));
    float _1855 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_526, _527, _528));
    float _4066 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _4077 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1860 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1862 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1869 = ((cbLight._m0[_1818].x * _1824) * _1862) + (((cbLight._m0[_1828].x * _1793) * _1837) * _1860);
    float _1870 = ((_1824 * cbLight._m0[_1818].y) * _1862) + (((cbLight._m0[_1828].y * _1794) * _1837) * _1860);
    float _1871 = ((_1824 * cbLight._m0[_1818].z) * _1862) + (((cbLight._m0[_1828].z * _1795) * _1837) * _1860);
    uvec4 _1875 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1877 = _1875.x == 0u;
    float _1888;
    float _1890;
    float _1892;
    if (_1877)
    {
        _1888 = _1869;
        _1890 = _1870;
        _1892 = _1871;
    }
    else
    {
        uint _1896 = _1801 + 6u;
        float _1912 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _1913 = _1912 * _1912;
        float _4088 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1915 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1888 = (((cbLight._m0[_1896].x * 0.3183098733425140380859375) * _1914) * _1915) + _1869;
        _1890 = (((cbLight._m0[_1896].y * 0.3183098733425140380859375) * _1914) * _1915) + _1870;
        _1892 = (((cbLight._m0[_1896].z * 0.3183098733425140380859375) * _1914) * _1915) + _1871;
    }
    bool _1895 = _1875.y == 0u;
    float _1933;
    float _1935;
    float _1937;
    if (_1895)
    {
        _1933 = _1888;
        _1935 = _1890;
        _1937 = _1892;
    }
    else
    {
        uint _2106 = _1801 + 7u;
        float _2122 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4104 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2125 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1933 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _1888;
        _1935 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _1890;
        _1937 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _1892;
    }
    uint _1940 = _1801 + 8u;
    float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _529) * 0.949999988079071044921875);
    float _1954 = _1953 * _1953;
    float _1955 = cbLight._m0[_1801].x + _606;
    float _1956 = cbLight._m0[_1801].y + _607;
    float _1957 = cbLight._m0[_1801].z + _608;
    float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
    float _1962 = _1961 * _1955;
    float _1963 = _1961 * _1956;
    float _1964 = _1961 * _1957;
    float _1965 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1801].xyz));
    float _4120 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1969 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _1970 = dot(vec3(_526, _527, _528), vec3(_1962, _1963, _1964));
    float _4142 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1962, _1963, _1964));
    float _4153 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1978 = _1954 * _1954;
    float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
    float _1990 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
    float _1991 = 0.959999978542327880859375 - _687;
    float _1993 = 0.959999978542327880859375 - _688;
    float _1994 = 0.959999978542327880859375 - _689;
    float _2001 = 1.0 - _1954;
    float _2012 = (0.5 / (((_1969 * ((_1968 * _2001) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2001) + _1954) * _1968))) * _1968;
    float _4164 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
    uint _2028 = _1801 + 9u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _529) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1841].x + _606;
    float _2042 = cbLight._m0[_1841].y + _607;
    float _2043 = cbLight._m0[_1841].z + _608;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1841].xyz));
    float _4175 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2055 = dot(vec3(_526, _527, _528), vec3(_2048, _2049, _2050));
    float _4186 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_2048, _2049, _2050));
    float _4197 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2040 * _2040;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
    float _2081 = 1.0 - _2040;
    float _2091 = (0.5 / (((_1969 * ((_2054 * _2081) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2081) + _2040) * _2054))) * _2054;
    float _4208 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    float _2103 = (((((_2074 * _1991) + _690) * cbLight._m0[_2028].x) * _2093) * _1824) + ((((cbLight._m0[_1940].x * _1793) * ((_1990 * _1991) + _690)) * _2014) * _1837);
    float _2104 = (((((_2074 * _1993) + _692) * cbLight._m0[_2028].y) * _2093) * _1824) + ((((cbLight._m0[_1940].y * _1794) * ((_1990 * _1993) + _692)) * _2014) * _1837);
    float _2105 = (((((_2074 * _1994) + _693) * cbLight._m0[_2028].z) * _2093) * _1824) + ((((cbLight._m0[_1940].z * _1795) * ((_1990 * _1994) + _693)) * _2014) * _1837);
    float _2167;
    float _2169;
    float _2171;
    if (_1877)
    {
        _2167 = _2103;
        _2169 = _2104;
        _2171 = _2105;
    }
    else
    {
        uint _2173 = _1801 + 2u;
        uint _2177 = _1801 + 10u;
        float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _529) * 0.949999988079071044921875);
        float _2192 = _2191 * _2191;
        float _2193 = cbLight._m0[_2173].x + _606;
        float _2194 = cbLight._m0[_2173].y + _607;
        float _2195 = cbLight._m0[_2173].z + _608;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2200 = _2199 * _2193;
        float _2201 = _2199 * _2194;
        float _2202 = _2199 * _2195;
        float _2203 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2173].xyz));
        float _4219 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2207 = dot(vec3(_526, _527, _528), vec3(_2200, _2201, _2202));
        float _4230 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2211 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2200, _2201, _2202));
        float _4241 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2215 = _2192 * _2192;
        float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
        float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2233 = 1.0 - _2192;
        float _2243 = (0.5 / (((_1969 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2233) + _2192) * _2206))) * _2206;
        float _4252 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2167 = (((((_2226 * _1991) + _690) * cbLight._m0[_2177].x) * _2245) * _2246) + _2103;
        _2169 = (((((_2226 * _1993) + _692) * cbLight._m0[_2177].y) * _2245) * _2246) + _2104;
        _2171 = (((((_2226 * _1994) + _693) * cbLight._m0[_2177].z) * _2245) * _2246) + _2105;
    }
    float _2281;
    float _2283;
    float _2285;
    if (_1895)
    {
        _2281 = _2167;
        _2283 = _2169;
        _2285 = _2171;
    }
    else
    {
        uint _2292 = _1801 + 3u;
        uint _2296 = _1801 + 11u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _529) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _606;
        float _2313 = cbLight._m0[_2292].y + _607;
        float _2314 = cbLight._m0[_2292].z + _608;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2292].xyz));
        float _4268 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2326 = dot(vec3(_526, _527, _528), vec3(_2319, _2320, _2321));
        float _4279 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4290 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
        float _2352 = 1.0 - _2311;
        float _2362 = (0.5 / (((_1969 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2352) + _2311) * _2325))) * _2325;
        float _4301 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2281 = (((((_2345 * _1991) + _690) * cbLight._m0[_2296].x) * _2364) * _2365) + _2167;
        _2283 = (((((_2345 * _1993) + _692) * cbLight._m0[_2296].y) * _2364) * _2365) + _2169;
        _2285 = (((((_2345 * _1994) + _693) * cbLight._m0[_2296].z) * _2364) * _2365) + _2171;
    }
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_1799.y == 0u)
    {
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2440;
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2440;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2440;
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.x;
        uint _2467 = uint((float(_2455.y) * floor(float(uint(cbSceneParam._m0[85u].y * _627) / _2456))) + floor(float(uint(cbSceneParam._m0[85u].x * _626) / _2456)));
        float _2477 = (log2(_2443 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2478 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        uint _2481 = uint(isnan(14.0) ? _2478 : (isnan(_2478) ? 14.0 : min(_2478, 14.0)));
        uvec4 _2486 = texelFetch(g_lightClusterGridBuffer, int(((_2481 << 2u) + (_2467 << 6u)) >> 2u));
        uint _2487 = _2486.x;
        uint _2488 = _2455.z;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        if (((((1u << ((_2488 >> 4u) & 15u)) + 4294967295u) & _2487) == 0u) || ((_2488 & 240u) == 0u))
        {
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
        }
        else
        {
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            uint _2745 = 0u;
            uint _2754;
            bool _2755;
            for (;;)
            {
                _2754 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                _2755 = _2754 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2755)
                {
                    frontier_phi_68_pred = _2741;
                    frontier_phi_68_pred_1 = _2744;
                    frontier_phi_68_pred_2 = _2743;
                    frontier_phi_68_pred_3 = _2742;
                    frontier_phi_68_pred_4 = _2740;
                    frontier_phi_68_pred_5 = _2739;
                }
                else
                {
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    uint _2890;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2754;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    for (;;)
                    {
                        uint _2894 = uint(findLSB(_2890)) + (_2745 << 5u);
                        uint _2891 = (_2890 + 4294967295u) & _2890;
                        uint _2896 = _2894 * 48u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2916 = (_2894 * 48u) + 4u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2935 = (_2894 * 48u) + 8u;
                        vec3 _2946 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x));
                        float _2950 = _2910.x - _2441;
                        float _2951 = _2910.y - _2442;
                        float _2952 = _2910.z - _2443;
                        float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                        float _2956 = inversesqrt(_2953);
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2960 = dot(vec3(_646, _649, _652), vec3(_2957, _2958, _2959));
                        float _2965 = 1.0 - (_2953 * _2910.w);
                        float _4327 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _2967 = sqrt(_2953) * _2929.w;
                        float _2970 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2960) + _2971;
                        float _2977 = _2967 * _2967;
                        float _2981 = ((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2966) / ((_2977 * 0.699999988079071044921875) + 1.0);
                        float _2985 = (-0.0) - _2441;
                        float _2986 = (-0.0) - _2442;
                        float _2987 = (-0.0) - _2443;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _3002 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _721;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_646, _649, _652), vec3(_2992, _2993, _2994));
                        float _4343 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3027 = dot(vec3(_646, _649, _652), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4354 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2970 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2960) + _3036;
                        float _4365 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4376 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3062 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3034 * _3034) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125))) * _2966;
                        _2814 = (_2981 * _2929.x) + _2887;
                        _2815 = (_2981 * _2929.y) + _2888;
                        _2816 = (_2981 * _2929.z) + _2889;
                        _2811 = (_3062 * _2946.x) + _2884;
                        _2812 = (_3062 * _2946.y) + _2885;
                        _2813 = (_3062 * _2946.z) + _2886;
                        if (_2891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2891;
                        }
                    }
                    frontier_phi_68_pred = _2813;
                    frontier_phi_68_pred_1 = _2816;
                    frontier_phi_68_pred_2 = _2815;
                    frontier_phi_68_pred_3 = _2814;
                    frontier_phi_68_pred_4 = _2812;
                    frontier_phi_68_pred_5 = _2811;
                }
                _2592 = frontier_phi_68_pred;
                _2598 = frontier_phi_68_pred_1;
                _2596 = frontier_phi_68_pred_2;
                _2594 = frontier_phi_68_pred_3;
                _2590 = frontier_phi_68_pred_4;
                _2588 = frontier_phi_68_pred_5;
                uint _2746 = _2745 + 1u;
                if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2739 = _2588;
                    _2740 = _2590;
                    _2741 = _2592;
                    _2742 = _2594;
                    _2743 = _2596;
                    _2744 = _2598;
                    _2745 = _2746;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
        }
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.z;
        uint _2604 = (_2602 >> 8u) & 15u;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((4294967295u << _2604) & _2487) == 0u)
        {
            _2707 = _2587;
            _2709 = _2589;
            _2711 = _2591;
            _2713 = _2593;
            _2715 = _2595;
            _2717 = _2597;
        }
        else
        {
            float _2732 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
            float _2733 = _2732 * _2441;
            float _2734 = _2732 * _2442;
            float _2735 = _2732 * _2443;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2604 < ((_2602 >> 12u) & 15u))
            {
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2867 = _2587;
                float _2868 = _2589;
                float _2869 = _2591;
                float _2870 = _2593;
                float _2871 = _2595;
                float _2872 = _2597;
                uint _2873 = _2604;
                uint _2882;
                bool _2883;
                for (;;)
                {
                    _2882 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                    _2883 = _2882 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2883)
                    {
                        frontier_phi_79_pred = _2872;
                        frontier_phi_79_pred_1 = _2871;
                        frontier_phi_79_pred_2 = _2870;
                        frontier_phi_79_pred_3 = _2869;
                        frontier_phi_79_pred_4 = _2868;
                        frontier_phi_79_pred_5 = _2867;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        uint _3095 = _2882;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3106 = ((_2873 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3106 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3106 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_2443, _3216.z, fma(_2442, _3216.y, _3216.x * _2441)) + _3216.w;
                            _3229 = !((fma(_2443, _3197.z, fma(_2442, _3197.y, _3197.x * _2441)) + _3197.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3121.x - _2441;
                                float _3257 = _3121.y - _2442;
                                float _3258 = _3121.z - _2443;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3122 * _3122));
                                float _4387 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3274 = sqrt(_3259) * _3137.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_646, _649, _652))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_2443, _3165.z, fma(_2442, _3165.y, _3165.x * _2441)) + _3165.w) / _3228;
                                float _3288 = (fma(_2443, _3181.z, fma(_2442, _3181.y, _3181.x * _2441)) + _3181.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4403 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _721;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2733;
                                float _3318 = _3264 - _2734;
                                float _3319 = _3265 - _2735;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_646, _649, _652), vec3((-0.0) - _2733, (-0.0) - _2734, (-0.0) - _2735));
                                float _4414 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3331 = dot(vec3(_646, _649, _652), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4425 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_646, _649, _652), vec3(_3263, _3264, _3265))) + _3340;
                                float _4436 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4447 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3294 * _3137.z;
                                frontier_phi_85_pred_1 = _3294 * _3137.y;
                                frontier_phi_85_pred_2 = _3294 * _3137.x;
                                frontier_phi_85_pred_3 = _3368 * _3149.z;
                                frontier_phi_85_pred_4 = _3368 * _3149.y;
                                frontier_phi_85_pred_5 = _3368 * _3149.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3377 = frontier_phi_85_pred;
                            _3376 = frontier_phi_85_pred_1;
                            _3375 = frontier_phi_85_pred_2;
                            _3374 = frontier_phi_85_pred_3;
                            _3373 = frontier_phi_85_pred_4;
                            _3372 = frontier_phi_85_pred_5;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3081;
                        frontier_phi_79_pred_1 = _3080;
                        frontier_phi_79_pred_2 = _3079;
                        frontier_phi_79_pred_3 = _3078;
                        frontier_phi_79_pred_4 = _3077;
                        frontier_phi_79_pred_5 = _3076;
                    }
                    _2718 = frontier_phi_79_pred;
                    _2716 = frontier_phi_79_pred_1;
                    _2714 = frontier_phi_79_pred_2;
                    _2712 = frontier_phi_79_pred_3;
                    _2710 = frontier_phi_79_pred_4;
                    _2708 = frontier_phi_79_pred_5;
                    uint _2874 = _2873 + 1u;
                    if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2867 = _2708;
                        _2868 = _2710;
                        _2869 = _2712;
                        _2870 = _2714;
                        _2871 = _2716;
                        _2872 = _2718;
                        _2873 = _2874;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2714;
                frontier_phi_60_61_ladder_1 = _2718;
                frontier_phi_60_61_ladder_2 = _2716;
                frontier_phi_60_61_ladder_3 = _2712;
                frontier_phi_60_61_ladder_4 = _2710;
                frontier_phi_60_61_ladder_5 = _2708;
            }
            else
            {
                frontier_phi_60_61_ladder = _2593;
                frontier_phi_60_61_ladder_1 = _2597;
                frontier_phi_60_61_ladder_2 = _2595;
                frontier_phi_60_61_ladder_3 = _2591;
                frontier_phi_60_61_ladder_4 = _2589;
                frontier_phi_60_61_ladder_5 = _2587;
            }
            _2707 = frontier_phi_60_61_ladder_5;
            _2709 = frontier_phi_60_61_ladder_4;
            _2711 = frontier_phi_60_61_ladder_3;
            _2713 = frontier_phi_60_61_ladder;
            _2715 = frontier_phi_60_61_ladder_2;
            _2717 = frontier_phi_60_61_ladder_1;
        }
        float _2722 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2499 = (_2722 * _2713) + _1933;
        _2501 = (_2722 * _2715) + _1935;
        _2503 = (_2722 * _2717) + _1937;
        _2505 = ((_2707 * _690) * _2722) + _2281;
        _2507 = ((_2709 * _692) * _2722) + _2283;
        _2509 = ((_2711 * _693) * _2722) + _2285;
    }
    else
    {
        _2499 = _1933;
        _2501 = _1935;
        _2503 = _1937;
        _2505 = _2281;
        _2507 = _2283;
        _2509 = _2285;
    }
    float _4463 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4474 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4485 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2526 = ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2499 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _705))) + ((_2505 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    float _2527 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2501 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _705))) + ((_2507 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    float _2528 = ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2503 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _705))) + ((_2509 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    uint _2529 = _665 + 6u;
    float _2537 = _626 / cbSceneParam._m0[86u].x;
    float _2538 = _627 / cbSceneParam._m0[86u].y;
    vec4 _2552 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2554 = _2552.x;
    float _2555 = _2552.y;
    float _2556 = _2552.z;
    float _2557 = _2552.w;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2612 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2613 = _2612 / _549;
        float _2624 = _2613 * _599;
        float _2625 = _600 * _2613;
        float _2626 = (-0.0) - _2625;
        float _2627 = _2613 * _601;
        float _2629 = (cbSceneParam._m0[77u].w * _2626) / _2612;
        float _2630 = _2629 + cbSceneParam._m0[79u].w;
        float _2631 = cbSceneParam._m0[79u].w - _2625;
        float _2637 = sqrt(((_2624 * _2624) + (_2625 * _2625)) + (_2627 * _2627));
        float _2640 = (1.0 - (cbSceneParam._m0[77u].w / _2612)) * _2637;
        float _2645 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2647 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2824;
        if (abs((_2626 - _2629) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2824 = ((((_2630 > 0.0) ? exp2(_2645 * _2630) : (2.0 - exp2(_2647 * _2630))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2640;
        }
        else
        {
            float _2768 = 1.0 / cbSceneParam._m0[80u].x;
            float _2769 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : max(_2630, _2631));
            float _2770 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : min(_2630, _2631));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            _2824 = ((abs(_2637 / _2626) * cbSceneParam._m0[80u].y) * ((((_2779 - _2780) * 2.0) - ((exp2(_2645 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0)))) - exp2(_2645 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))))) * _2768)) - ((exp2(_2647 * _2779) - exp2(_2647 * _2780)) * _2768))) + (_2640 * cbSceneParam._m0[80u].z);
        }
        vec4 _2826 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, 1.0), 0.0);
        float _2835 = exp2((_2824 * (-1.44269502162933349609375)) * (1.0 - _2826.w));
        float _2836 = log2(_2835);
        float _2852 = log2(_2557);
        _2649 = (exp2(_2852 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].x)) * _2826.x) / cbSceneParam._m0[78u].x)) + _2554;
        _2651 = (exp2(_2852 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].y)) * _2826.y) / cbSceneParam._m0[78u].y)) + _2555;
        _2653 = (exp2(_2852 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].z)) * _2826.z) / cbSceneParam._m0[78u].z)) + _2556;
        _2655 = _2835 * _2557;
    }
    else
    {
        _2649 = _2554;
        _2651 = _2555;
        _2653 = _2556;
        _2655 = _2557;
    }
    bool _2862;
    vec4 _2665;
    vec4 _2687;
    float _2689;
    float _2693;
    float _2694;
    float _2695;
    float _2696;
    bool _2706;
    for (;;)
    {
        _2665 = cbMatDynParam._m0[0u];
        float _2667 = roundEven(_2665.y);
        bool _2668 = _2667 == 3.0;
        float _2669 = log2(_2655);
        float _2676 = exp2(_2669 * cbSceneParam._m0[78u].x) * _2526;
        float _2677 = exp2(_2669 * cbSceneParam._m0[78u].y) * _2527;
        float _2678 = exp2(_2669 * cbSceneParam._m0[78u].z) * _2528;
        float _2685 = _615 + (-0.5);
        _2687 = cbMtdParam._m0[1u];
        _2689 = _2687.y * _2685;
        float _2692 = (_2667 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2693 = _2692 * (_2668 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2649)));
        _2694 = _2692 * (_2668 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2651)));
        _2695 = _2692 * (_2668 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2653)));
        _2696 = _2685 * 0.999000012874603271484375;
        _2706 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2706)
        {
            if ((cbInstanceData._m0[_665 + 7u].x + _2696) < 0.5)
            {
                _2862 = true;
                break;
            }
        }
        uint _2803 = _666 + uint(_2665.w);
        if ((cbInstanceData._m0[_2803].w < 1.0) && ((cbInstanceData._m0[_2803].w + _2696) < 0.5))
        {
            _2862 = true;
            break;
        }
        if ((_2689 + 1.0) < _2687.x)
        {
            _2862 = true;
            break;
        }
        _2862 = false;
        break;
    }
    float _3067;
    if (_2862)
    {
        discard_state = true;
        _3067 = 0.0;
    }
    else
    {
        _3067 = cbInstanceData._m0[_2529].w;
    }
    SV_Target.x = _2693;
    SV_Target.y = _2694;
    SV_Target.z = _2695;
    SV_Target.w = _3067;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2529].w;
    discard_exit();
}


