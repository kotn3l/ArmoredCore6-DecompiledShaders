#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1068;
float _3436;
float _3437;
float _3438;
float _3439;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3448 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3459 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))));
    float _323 = fma(_320, _232, fma(_314, _225, _312 * _211));
    float _326 = fma(_320, _233, fma(_314, _226, _312 * _212));
    float _329 = fma(_320, _234, fma(_314, _227, _312 * _213));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _361 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _365 = (cbMtdParam._m0[11u].z + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_361.x * cbMtdParam._m0[11u].w);
    float _3470 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _388 = _383.x * cbMtdParam._m0[9u].x;
    float _389 = _383.y * cbMtdParam._m0[9u].y;
    float _390 = _383.z * cbMtdParam._m0[9u].z;
    vec4 _409 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _423 = (((_409.x * cbMtdParam._m0[10u].x) - _388) * _299) + _388;
    float _424 = (((_409.y * cbMtdParam._m0[10u].y) - _389) * _299) + _389;
    float _425 = (((_409.z * cbMtdParam._m0[10u].z) - _390) * _299) + _390;
    vec4 _438 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _449 = ((_438.x - _423) * _366) + _423;
    float _450 = ((_438.y - _424) * _366) + _424;
    float _451 = ((_438.z - _425) * _366) + _425;
    vec4 _464 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _471 = (_464.x * 2.0) + (-1.0);
    float _472 = (_464.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3481 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _481 = ((_464.z - _308) * _366) + _308;
    float _488 = ((_471 - _312) * _366) + _312;
    float _489 = ((_472 - _314) * _366) + _314;
    float _490 = ((sqrt(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) - _320) * _366) + _320;
    float _493 = fma(_490, _232, fma(_489, _225, _488 * _211));
    float _496 = fma(_490, _233, fma(_489, _226, _488 * _212));
    float _499 = fma(_490, _234, fma(_489, _227, _488 * _213));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3492 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _507 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3514 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3525 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _526 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _576 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _566);
    float _577 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _566);
    float _578 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _566);
    float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
    float _583 = _576 * _582;
    float _584 = _577 * _582;
    float _585 = _578 * _582;
    vec4 _590 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _592 = _590.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _748 = sqrt(((_576 * _576) + (_577 * _577)) + (_578 * _578));
        float _754 = (cbMatDynParam._m0[5u].x * _748) + cbMatDynParam._m0[5u].y;
        float _3536 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _759 = (cbMatDynParam._m0[5u].z * _748) + cbMatDynParam._m0[5u].w;
        float _3547 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) - _755)) + _755) < ((_592 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _604 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _605 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _624 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _627 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _630 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    uint _643 = uint(roundEven(NORMAL.w)) * 13u;
    uint _644 = _643 + 9u;
    uint _645 = _644 + uint(cbMatDynParam._m0[0u].w);
    float _651 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_645].x;
    float _652 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_645].y;
    float _653 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_645].z;
    float _3558 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _604, cbSceneParam._m0[86u].y * _605));
    float _668 = _665.x * TEXCOORD_9.w;
    float _669 = dot(vec3(_504, _505, _506), vec3(_583, _584, _585));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _504) - _583;
    float _677 = (_672 * _505) - _584;
    float _678 = (_672 * _506) - _585;
    float _682 = abs(dot(vec3(_583, _584, _585), vec3(_504, _505, _506)));
    float _3591 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _684 = sqrt(_507);
    float _697 = exp2((_684 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_684 * 3.0));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1067;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _792 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _796 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _800 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _825 = _729 + _504;
        float _826 = _733 + _505;
        float _827 = _737 + _506;
        float _837 = fma(_827, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825)) - _792;
        float _838 = fma(_827, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825)) - _796;
        float _839 = fma(_827, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825)) - _800;
        float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
        float _856 = ((_843 * _837) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_792 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_843 * _838) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_796 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_843 * _839) / cbModelParam._m0[34u].z) + ((((((_800 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _895 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_861.x + (-0.5));
        float _897 = _895 * (_861.y + (-0.5));
        float _898 = _895 * (_861.z + (-0.5));
        float _905 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_868.x + (-0.5));
        float _907 = _905 * (_868.y + (-0.5));
        float _908 = _905 * (_868.z + (-0.5));
        float _915 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_875.x + (-0.5));
        float _917 = _915 * (_875.y + (-0.5));
        float _918 = _915 * (_875.z + (-0.5));
        float _925 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_882.x + (-0.5));
        float _927 = _925 * (_882.y + (-0.5));
        float _928 = _925 * (_882.z + (-0.5));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = _896 * 0.5;
        float _933 = _906 * 0.5;
        float _934 = _916 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _949 = (dot(vec3(_504, _505, _506), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _959 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3639 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_961 + 1.0))) + _966) * _929;
        float _976 = _897 * 0.5;
        float _977 = _907 * 0.5;
        float _978 = _917 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_504, _505, _506), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3672 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1003 + 1.0))) + _1008) * _930;
        float _1018 = _898 * 0.5;
        float _1019 = _908 * 0.5;
        float _1020 = _918 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_504, _505, _506), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3705 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1045 + 1.0))) + _1050) * _931;
        _1067 = _898;
        _1069 = _897;
        _1070 = _896;
        _1071 = _908;
        _1072 = _907;
        _1073 = _906;
        _1074 = _918;
        _1075 = _917;
        _1076 = _916;
        _1077 = _931;
        _1078 = _930;
        _1079 = _929;
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
    }
    else
    {
        _1067 = _1068;
        _1069 = _1068;
        _1070 = _1068;
        _1071 = _1068;
        _1072 = _1068;
        _1073 = _1068;
        _1074 = _1068;
        _1075 = _1068;
        _1076 = _1068;
        _1077 = _1068;
        _1078 = _1068;
        _1079 = _1068;
        _1080 = 0.0;
        _1081 = 0.0;
        _1082 = 0.0;
    }
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1111 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1115 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1119 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1142 = _729 + _504;
        float _1143 = _733 + _505;
        float _1144 = _737 + _506;
        float _1154 = fma(_1144, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142)) - _1111;
        float _1155 = fma(_1144, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142)) - _1115;
        float _1156 = fma(_1144, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142)) - _1119;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1111 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1115 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[35u].z) + ((((((_1119 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1210 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1177.x + (-0.5));
        float _1212 = _1210 * (_1177.y + (-0.5));
        float _1213 = _1210 * (_1177.z + (-0.5));
        float _1220 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1184.x + (-0.5));
        float _1222 = _1220 * (_1184.y + (-0.5));
        float _1223 = _1220 * (_1184.z + (-0.5));
        float _1230 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1191.x + (-0.5));
        float _1232 = _1230 * (_1191.y + (-0.5));
        float _1233 = _1230 * (_1191.z + (-0.5));
        float _1240 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1198.x + (-0.5));
        float _1242 = _1240 * (_1198.y + (-0.5));
        float _1243 = _1240 * (_1198.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_504, _505, _506), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3768 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1274 + 1.0))) + _1279) * _1244;
        float _1289 = _1212 * 0.5;
        float _1290 = _1222 * 0.5;
        float _1291 = _1232 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_504, _505, _506), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3801 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1316 + 1.0))) + _1321) * _1245;
        float _1331 = _1213 * 0.5;
        float _1332 = _1223 * 0.5;
        float _1333 = _1233 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_504, _505, _506), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3834 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1358 + 1.0))) + _1363) * _1246;
        _1380 = _1213;
        _1381 = _1212;
        _1382 = _1211;
        _1383 = _1223;
        _1384 = _1222;
        _1385 = _1221;
        _1386 = _1233;
        _1387 = _1232;
        _1388 = _1231;
        _1389 = _1246;
        _1390 = _1245;
        _1391 = _1244;
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1068;
        _1381 = _1068;
        _1382 = _1068;
        _1383 = _1068;
        _1384 = _1068;
        _1385 = _1068;
        _1386 = _1068;
        _1387 = _1068;
        _1388 = _1068;
        _1389 = _1068;
        _1390 = _1068;
        _1391 = _1068;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1080)) + _1080;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1082)) + _1082;
    float _1427 = fma(_1406, cbSceneParam._m0[89u].z, fma(_1405, cbSceneParam._m0[89u].y, _1404 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1406, cbSceneParam._m0[90u].z, fma(_1405, cbSceneParam._m0[90u].y, _1404 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1406, cbSceneParam._m0[91u].z, fma(_1405, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1404));
    float _1448 = _676 * 0.5;
    float _1449 = _677 * 0.5;
    float _1450 = _678 * 0.5;
    float _1451 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1454 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1457 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1491;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1464 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1067, _1071, _1074, _1077));
        float _1468 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1472 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1479 = dot(vec4(cbModelParam._m0[39u]), vec4(_1448, _1449, _1450, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1502;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1493 = dot(vec4(cbModelParam._m0[40u]), vec4(_1448, _1449, _1450, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1506 = (_1502 * cbModelParam._m0[1u].x) + (_1491 * (1.0 - cbModelParam._m0[1u].x));
    float _1516 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1516 : min(cbModelParam._m0[25u].z, _1516));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1566 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1570 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1574 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1577 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1580 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1583 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1611;
        if (_1577 > 0.0)
        {
            _1611 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1611 = frontier_phi_19_17_ladder;
        }
        float _1815;
        if (_1580 > 0.0)
        {
            _1815 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1815 = frontier_phi_28_24_ladder;
        }
        float _2058;
        if (_1583 > 0.0)
        {
            _2058 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2058 = frontier_phi_40_35_ladder;
        }
        float _2060 = isnan(_1815) ? _1611 : (isnan(_1611) ? _1815 : min(_1611, _1815));
        float _2061 = isnan(_2058) ? _2060 : (isnan(_2060) ? _2058 : min(_2060, _2058));
        float _2065 = (_2061 * _1577) + _1566;
        float _2066 = (_2061 * _1580) + _1570;
        float _2067 = (_2061 * _1583) + _1574;
        float _2068 = _2061 * 9.9999997473787516355514526367188e-05;
        float _2070 = (-1.0) - _2068;
        float _2072 = _2068 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2067 > _2072) || ((_2067 < _2070) || ((_2066 > _2072) || ((_2066 < _2070) || ((_2065 < _2070) || (_2065 > _2072))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2191 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2067, cbModelParam._m0[9u].z, fma(_2066, cbModelParam._m0[9u].y, _2065 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2067, cbModelParam._m0[10u].z, fma(_2066, cbModelParam._m0[10u].y, _2065 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2067, cbModelParam._m0[11u].z, fma(_2066, cbModelParam._m0[11u].y, _2065 * cbModelParam._m0[11u].x))), _1517);
            frontier_phi_18_40_ladder = _2191.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2191.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2191.x * cbModelParam._m0[1u].y;
        }
        _1599 = frontier_phi_18_40_ladder_2;
        _1601 = frontier_phi_18_40_ladder_1;
        _1603 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1517);
        _1599 = _1587.x * cbModelParam._m0[1u].y;
        _1601 = _1587.y * cbModelParam._m0[1u].y;
        _1603 = _1587.z * cbModelParam._m0[1u].y;
    }
    float _1607 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1607 : min(cbModelParam._m0[25u].w, _1607));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1679 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1682 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1820;
        if (_1676 > 0.0)
        {
            _1820 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1820 = frontier_phi_30_26_ladder;
        }
        float _2085;
        if (_1679 > 0.0)
        {
            _2085 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2085 = frontier_phi_42_37_ladder;
        }
        float _2290;
        if (_1682 > 0.0)
        {
            _2290 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2290 = frontier_phi_51_48_ladder;
        }
        float _2292 = isnan(_2085) ? _1820 : (isnan(_1820) ? _2085 : min(_1820, _2085));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1676) + _1665;
        float _2298 = (_2293 * _1679) + _1669;
        float _2299 = (_2293 * _1682) + _1673;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2300;
        float _2303 = _2300 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2299 > _2303) || ((_2299 < _2301) || ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 < _2301) || (_2297 > _2303))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2299, cbModelParam._m0[17u].z, fma(_2298, cbModelParam._m0[17u].y, _2297 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2299, cbModelParam._m0[18u].z, fma(_2298, cbModelParam._m0[18u].y, _2297 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2299, cbModelParam._m0[19u].z, fma(_2298, cbModelParam._m0[19u].y, _2297 * cbModelParam._m0[19u].x))), _1608);
            frontier_phi_27_51_ladder = _2497.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2497.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2497.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_27_51_ladder_2;
        _1703 = frontier_phi_27_51_ladder_1;
        _1705 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1608);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1717 = ((((1.0 - _697) * ((_684 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_697 * _684)) * _668;
    float _1718 = _1717 * ((cbModelParam._m0[1u].w * (_1701 - _1599)) + _1599);
    float _1719 = _1717 * ((cbModelParam._m0[1u].w * (_1703 - _1601)) + _1601);
    float _1720 = _1717 * ((cbModelParam._m0[1u].w * (_1705 - _1603)) + _1603);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    uvec4 _1739 = floatBitsToUint(cbInstanceData._m0[_643 + 5u]);
    uint _1741 = _1739.x * 14u;
    uint _1742 = _1741 + 13u;
    float _1749 = _668 + (-1.0);
    float _1754 = (cbLight._m0[_1742].x * _1749) + 1.0;
    float _1755 = (cbLight._m0[_1742].y * _1749) + 1.0;
    float _1756 = (cbLight._m0[_1742].z * _1749) + 1.0;
    float _1757 = (cbLight._m0[_1742].w * _1749) + 1.0;
    uint _1758 = _1741 + 5u;
    float _1764 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
    uint _1768 = _1741 + 4u;
    float _1774 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1778 = _1741 | 1u;
    float _1789 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_504, _505, _506));
    float _1792 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_504, _505, _506));
    float _3970 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _3981 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1797 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.3183098733425140380859375;
    float _1799 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.3183098733425140380859375;
    float _1806 = ((cbLight._m0[_1758].x * _1764) * _1799) + ((cbLight._m0[_1768].x * _1774) * _1797);
    float _1807 = ((_1764 * cbLight._m0[_1758].y) * _1799) + ((_1774 * cbLight._m0[_1768].y) * _1797);
    float _1808 = ((_1764 * cbLight._m0[_1758].z) * _1799) + ((_1774 * cbLight._m0[_1768].z) * _1797);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1741 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1825;
    float _1827;
    float _1829;
    if (_1814)
    {
        _1825 = _1806;
        _1827 = _1807;
        _1829 = _1808;
    }
    else
    {
        uint _1833 = _1741 + 6u;
        float _1849 = (dot(vec3(cbLight._m0[_1741 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3992 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1852 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1825 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1806;
        _1827 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1807;
        _1829 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1808;
    }
    bool _1832 = _1812.y == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1832)
    {
        _1870 = _1825;
        _1872 = _1827;
        _1874 = _1829;
    }
    else
    {
        uint _2029 = _1741 + 7u;
        float _2045 = (dot(vec3(cbLight._m0[_1741 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2046 = _2045 * _2045;
        float _4008 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2048 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _1870 = (((cbLight._m0[_2029].x * 0.3183098733425140380859375) * _2047) * _2048) + _1825;
        _1872 = (((cbLight._m0[_2029].y * 0.3183098733425140380859375) * _2047) * _2048) + _1827;
        _1874 = (((cbLight._m0[_2029].z * 0.3183098733425140380859375) * _2047) * _2048) + _1829;
    }
    uint _1877 = _1741 + 8u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _507) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1741].x + _583;
    float _1893 = cbLight._m0[_1741].y + _584;
    float _1894 = cbLight._m0[_1741].z + _585;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1741].xyz));
    float _4024 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1906 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1907 = dot(vec3(_504, _505, _506), vec3(_1899, _1900, _1901));
    float _4046 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1911 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1899, _1900, _1901));
    float _4057 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1915 = _1891 * _1891;
    float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
    float _1930 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1931 = 1.0 - _1891;
    float _1942 = (0.5 / (((_1906 * ((_1905 * _1931) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _1931) + _1891) * _1905))) * _1905;
    float _4068 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
    uint _1955 = _1741 + 9u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _507) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1778].x + _583;
    float _1969 = cbLight._m0[_1778].y + _584;
    float _1970 = cbLight._m0[_1778].z + _585;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1778].xyz));
    float _4079 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1982 = dot(vec3(_504, _505, _506), vec3(_1975, _1976, _1977));
    float _4090 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_1975, _1976, _1977));
    float _4101 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1967 * _1967;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1967;
    float _2014 = (0.5 / (((_1906 * ((_1981 * _2004) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2004) + _1967) * _1981))) * _1981;
    float _4112 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    float _2026 = (((_2003 * cbLight._m0[_1955].x) * _2016) * _1764) + (((_1930 * cbLight._m0[_1877].x) * _1944) * _1774);
    float _2027 = (((_2003 * cbLight._m0[_1955].y) * _2016) * _1764) + (((_1930 * cbLight._m0[_1877].y) * _1944) * _1774);
    float _2028 = (((_2003 * cbLight._m0[_1955].z) * _2016) * _1764) + (((_1930 * cbLight._m0[_1877].z) * _1944) * _1774);
    float _2090;
    float _2092;
    float _2094;
    if (_1814)
    {
        _2090 = _2026;
        _2092 = _2027;
        _2094 = _2028;
    }
    else
    {
        uint _2096 = _1741 + 2u;
        uint _2100 = _1741 + 10u;
        float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _507) * 0.949999988079071044921875);
        float _2115 = _2114 * _2114;
        float _2116 = cbLight._m0[_2096].x + _583;
        float _2117 = cbLight._m0[_2096].y + _584;
        float _2118 = cbLight._m0[_2096].z + _585;
        float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
        float _2123 = _2122 * _2116;
        float _2124 = _2122 * _2117;
        float _2125 = _2122 * _2118;
        float _2126 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2096].xyz));
        float _4123 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2130 = dot(vec3(_504, _505, _506), vec3(_2123, _2124, _2125));
        float _4134 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2134 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2123, _2124, _2125));
        float _4145 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2138 = _2115 * _2115;
        float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
        float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2152 = 1.0 - _2115;
        float _2162 = (0.5 / (((_1906 * ((_2129 * _2152) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2152) + _2115) * _2129))) * _2129;
        float _4156 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
        float _2165 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2090 = (((_2151 * cbLight._m0[_2100].x) * _2164) * _2165) + _2026;
        _2092 = (((_2151 * cbLight._m0[_2100].y) * _2164) * _2165) + _2027;
        _2094 = (((_2151 * cbLight._m0[_2100].z) * _2164) * _2165) + _2028;
    }
    float _2200;
    float _2202;
    float _2204;
    if (_1832)
    {
        _2200 = _2090;
        _2202 = _2092;
        _2204 = _2094;
    }
    else
    {
        uint _2211 = _1741 + 3u;
        uint _2215 = _1741 + 11u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _507) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _583;
        float _2232 = cbLight._m0[_2211].y + _584;
        float _2233 = cbLight._m0[_2211].z + _585;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2211].xyz));
        float _4172 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2245 = dot(vec3(_504, _505, _506), vec3(_2238, _2239, _2240));
        float _4183 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4194 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2267 = 1.0 - _2230;
        float _2277 = (0.5 / (((_1906 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2267) + _2230) * _2244))) * _2244;
        float _4205 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _2200 = (((_2266 * cbLight._m0[_2215].x) * _2279) * _2280) + _2090;
        _2202 = (((_2266 * cbLight._m0[_2215].y) * _2279) * _2280) + _2092;
        _2204 = (((_2266 * cbLight._m0[_2215].z) * _2279) * _2280) + _2094;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1739.y == 0u)
    {
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2355;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2355;
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2355;
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.x;
        uint _2382 = uint((float(_2370.y) * floor(float(uint(cbSceneParam._m0[85u].y * _605) / _2371))) + floor(float(uint(cbSceneParam._m0[85u].x * _604) / _2371)));
        float _2392 = (log2(_2358 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2393 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        uint _2396 = uint(isnan(14.0) ? _2393 : (isnan(_2393) ? 14.0 : min(_2393, 14.0)));
        uvec4 _2401 = texelFetch(g_lightClusterGridBuffer, int(((_2396 << 2u) + (_2382 << 6u)) >> 2u));
        uint _2402 = _2401.x;
        uint _2403 = _2370.z;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((((1u << ((_2403 >> 4u) & 15u)) + 4294967295u) & _2402) == 0u) || ((_2403 & 240u) == 0u))
        {
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
        }
        else
        {
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            uint _2660 = 0u;
            uint _2669;
            bool _2670;
            for (;;)
            {
                _2669 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                _2670 = _2669 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2670)
                {
                    frontier_phi_68_pred = _2656;
                    frontier_phi_68_pred_1 = _2659;
                    frontier_phi_68_pred_2 = _2658;
                    frontier_phi_68_pred_3 = _2657;
                    frontier_phi_68_pred_4 = _2655;
                    frontier_phi_68_pred_5 = _2654;
                }
                else
                {
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    uint _2805;
                    _2799 = _2654;
                    _2800 = _2655;
                    _2801 = _2656;
                    _2802 = _2657;
                    _2803 = _2658;
                    _2804 = _2659;
                    _2805 = _2669;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    for (;;)
                    {
                        uint _2809 = uint(findLSB(_2805)) + (_2660 << 5u);
                        uint _2806 = (_2805 + 4294967295u) & _2805;
                        uint _2811 = _2809 * 48u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2831 = (_2809 * 48u) + 4u;
                        vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2850 = (_2809 * 48u) + 8u;
                        vec3 _2861 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x));
                        float _2865 = _2825.x - _2356;
                        float _2866 = _2825.y - _2357;
                        float _2867 = _2825.z - _2358;
                        float _2868 = dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867));
                        float _2871 = inversesqrt(_2868);
                        float _2872 = _2871 * _2865;
                        float _2873 = _2871 * _2866;
                        float _2874 = _2871 * _2867;
                        float _2875 = dot(vec3(_624, _627, _630), vec3(_2872, _2873, _2874));
                        float _2880 = 1.0 - (_2868 * _2825.w);
                        float _4231 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2881 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2882 = sqrt(_2868) * _2844.w;
                        float _2885 = 1.39999997615814208984375 / (_2882 + 1.39999997615814208984375);
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2875) + _2886;
                        float _2892 = _2882 * _2882;
                        float _2896 = ((isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))) * _2881) / ((_2892 * 0.699999988079071044921875) + 1.0);
                        float _2900 = (-0.0) - _2356;
                        float _2901 = (-0.0) - _2357;
                        float _2902 = (-0.0) - _2358;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2917 = exp2(log2(1.0 / ((_2892 * 3.5) + 5.0)) * 0.25);
                        float _2918 = 1.0 - _684;
                        float _2925 = sqrt(1.0 - ((1.0 - (_2918 * _2918)) * (1.0 - (_2917 * _2917))));
                        float _2926 = _2925 * _2925;
                        float _2927 = _2926 * _2926;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                        float _2938 = dot(vec3(_624, _627, _630), vec3(_2907, _2908, _2909));
                        float _4247 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2942 = dot(vec3(_624, _627, _630), vec3(_2934 * _2928, _2934 * _2929, _2934 * _2930));
                        float _4258 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _2949 = ((_2945 * _2945) * (_2927 + (-1.0))) + 1.0;
                        float _2950 = _2885 * _2926;
                        float _2951 = _2950 * _2950;
                        float _2954 = ((1.0 - _2951) * _2875) + _2951;
                        float _4269 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2956 = 1.0 - _2926;
                        float _2966 = (0.5 / (((_2955 * ((_2941 * _2956) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _2956) + _2926) * _2941))) * _2955;
                        float _4280 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2977 = (((_2927 * 3.1415927410125732421875) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) / ((_2949 * _2949) * ((_2892 * 2.1991131305694580078125) + 3.141590118408203125))) * _2881;
                        _2729 = (_2896 * _2844.x) + _2802;
                        _2730 = (_2896 * _2844.y) + _2803;
                        _2731 = (_2896 * _2844.z) + _2804;
                        _2726 = (_2977 * _2861.x) + _2799;
                        _2727 = (_2977 * _2861.y) + _2800;
                        _2728 = (_2977 * _2861.z) + _2801;
                        if (_2806 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2729;
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2806;
                        }
                    }
                    frontier_phi_68_pred = _2728;
                    frontier_phi_68_pred_1 = _2731;
                    frontier_phi_68_pred_2 = _2730;
                    frontier_phi_68_pred_3 = _2729;
                    frontier_phi_68_pred_4 = _2727;
                    frontier_phi_68_pred_5 = _2726;
                }
                _2507 = frontier_phi_68_pred;
                _2513 = frontier_phi_68_pred_1;
                _2511 = frontier_phi_68_pred_2;
                _2509 = frontier_phi_68_pred_3;
                _2505 = frontier_phi_68_pred_4;
                _2503 = frontier_phi_68_pred_5;
                uint _2661 = _2660 + 1u;
                if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2654 = _2503;
                    _2655 = _2505;
                    _2656 = _2507;
                    _2657 = _2509;
                    _2658 = _2511;
                    _2659 = _2513;
                    _2660 = _2661;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
        }
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.z;
        uint _2519 = (_2517 >> 8u) & 15u;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((4294967295u << _2519) & _2402) == 0u)
        {
            _2622 = _2502;
            _2624 = _2504;
            _2626 = _2506;
            _2628 = _2508;
            _2630 = _2510;
            _2632 = _2512;
        }
        else
        {
            float _2647 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
            float _2648 = _2647 * _2356;
            float _2649 = _2647 * _2357;
            float _2650 = _2647 * _2358;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2519 < ((_2517 >> 12u) & 15u))
            {
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2782 = _2502;
                float _2783 = _2504;
                float _2784 = _2506;
                float _2785 = _2508;
                float _2786 = _2510;
                float _2787 = _2512;
                uint _2788 = _2519;
                uint _2797;
                bool _2798;
                for (;;)
                {
                    _2797 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                    _2798 = _2797 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2798)
                    {
                        frontier_phi_79_pred = _2787;
                        frontier_phi_79_pred_1 = _2786;
                        frontier_phi_79_pred_2 = _2785;
                        frontier_phi_79_pred_3 = _2784;
                        frontier_phi_79_pred_4 = _2783;
                        frontier_phi_79_pred_5 = _2782;
                    }
                    else
                    {
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3004 = _2782;
                        float _3005 = _2783;
                        float _3006 = _2784;
                        float _3007 = _2785;
                        float _3008 = _2786;
                        float _3009 = _2787;
                        uint _3010 = _2797;
                        uint _3011;
                        vec4 _3036;
                        float _3037;
                        vec4 _3052;
                        vec3 _3064;
                        vec4 _3080;
                        vec4 _3096;
                        float _3143;
                        bool _3144;
                        for (;;)
                        {
                            uint _3021 = ((_2788 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3010));
                            _3011 = (_3010 + 4294967295u) & _3010;
                            uint _3023 = _3021 * 40u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3037 = _3036.w;
                            uint _3039 = (_3021 * 40u) + 4u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3054 = (_3021 * 40u) + 8u;
                            _3064 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x));
                            uint _3067 = (_3021 * 40u) + 16u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3083 = (_3021 * 40u) + 20u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3021 * 40u) + 24u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3118 = (_3021 * 40u) + 28u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3143 = fma(_2358, _3131.z, fma(_2357, _3131.y, _3131.x * _2356)) + _3131.w;
                            _3144 = !((fma(_2358, _3112.z, fma(_2357, _3112.y, _3112.x * _2356)) + _3112.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3144)
                            {
                                float _3171 = _3036.x - _2356;
                                float _3172 = _3036.y - _2357;
                                float _3173 = _3036.z - _2358;
                                float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                                float _3177 = inversesqrt(_3174);
                                float _3178 = _3177 * _3171;
                                float _3179 = _3177 * _3172;
                                float _3180 = _3177 * _3173;
                                float _3184 = 1.0 - (_3174 / (_3037 * _3037));
                                float _4291 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3189 = sqrt(_3174) * _3052.w;
                                float _3191 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                                float _3192 = _3191 * _3191;
                                float _3195 = ((1.0 - _3192) * dot(vec3(_3178, _3179, _3180), vec3(_624, _627, _630))) + _3192;
                                float _3198 = _3189 * _3189;
                                float _3202 = (fma(_2358, _3080.z, fma(_2357, _3080.y, _3080.x * _2356)) + _3080.w) / _3143;
                                float _3203 = (fma(_2358, _3096.z, fma(_2357, _3096.y, _3096.x * _2356)) + _3096.w) / _3143;
                                float _3207 = 1.0 - dot(vec2(_3202, _3203), vec2(_3202, _3203));
                                float _4307 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3209 = _3208 * (((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3185) / ((_3198 * 0.699999988079071044921875) + 1.0));
                                float _3221 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                                float _3222 = 1.0 - _684;
                                float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                                float _3230 = _3229 * _3229;
                                float _3231 = _3230 * _3230;
                                float _3232 = _3178 - _2648;
                                float _3233 = _3179 - _2649;
                                float _3234 = _3180 - _2650;
                                float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                                float _3242 = dot(vec3(_624, _627, _630), vec3((-0.0) - _2648, (-0.0) - _2649, (-0.0) - _2650));
                                float _4318 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3246 = dot(vec3(_624, _627, _630), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                                float _4329 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                                float _3254 = _3191 * _3230;
                                float _3255 = _3254 * _3254;
                                float _3261 = ((1.0 - _3255) * dot(vec3(_624, _627, _630), vec3(_3178, _3179, _3180))) + _3255;
                                float _4340 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3263 = 1.0 - _3230;
                                float _3273 = (0.5 / (((_3262 * ((_3245 * _3263) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3230) * _3245))) * _3262;
                                float _4351 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3283 = (_3208 * _3185) * (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3253 * _3253) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3209 * _3052.z;
                                frontier_phi_85_pred_1 = _3209 * _3052.y;
                                frontier_phi_85_pred_2 = _3209 * _3052.x;
                                frontier_phi_85_pred_3 = _3283 * _3064.z;
                                frontier_phi_85_pred_4 = _3283 * _3064.y;
                                frontier_phi_85_pred_5 = _3283 * _3064.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_85_pred;
                            _3291 = frontier_phi_85_pred_1;
                            _3290 = frontier_phi_85_pred_2;
                            _3289 = frontier_phi_85_pred_3;
                            _3288 = frontier_phi_85_pred_4;
                            _3287 = frontier_phi_85_pred_5;
                            _2994 = _3290 + _3007;
                            _2995 = _3291 + _3008;
                            _2996 = _3292 + _3009;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            _2993 = _3289 + _3006;
                            if (_3011 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _3011;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2996;
                        frontier_phi_79_pred_1 = _2995;
                        frontier_phi_79_pred_2 = _2994;
                        frontier_phi_79_pred_3 = _2993;
                        frontier_phi_79_pred_4 = _2992;
                        frontier_phi_79_pred_5 = _2991;
                    }
                    _2633 = frontier_phi_79_pred;
                    _2631 = frontier_phi_79_pred_1;
                    _2629 = frontier_phi_79_pred_2;
                    _2627 = frontier_phi_79_pred_3;
                    _2625 = frontier_phi_79_pred_4;
                    _2623 = frontier_phi_79_pred_5;
                    uint _2789 = _2788 + 1u;
                    if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2782 = _2623;
                        _2783 = _2625;
                        _2784 = _2627;
                        _2785 = _2629;
                        _2786 = _2631;
                        _2787 = _2633;
                        _2788 = _2789;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2629;
                frontier_phi_60_61_ladder_1 = _2633;
                frontier_phi_60_61_ladder_2 = _2631;
                frontier_phi_60_61_ladder_3 = _2627;
                frontier_phi_60_61_ladder_4 = _2625;
                frontier_phi_60_61_ladder_5 = _2623;
            }
            else
            {
                frontier_phi_60_61_ladder = _2508;
                frontier_phi_60_61_ladder_1 = _2512;
                frontier_phi_60_61_ladder_2 = _2510;
                frontier_phi_60_61_ladder_3 = _2506;
                frontier_phi_60_61_ladder_4 = _2504;
                frontier_phi_60_61_ladder_5 = _2502;
            }
            _2622 = frontier_phi_60_61_ladder_5;
            _2624 = frontier_phi_60_61_ladder_4;
            _2626 = frontier_phi_60_61_ladder_3;
            _2628 = frontier_phi_60_61_ladder;
            _2630 = frontier_phi_60_61_ladder_2;
            _2632 = frontier_phi_60_61_ladder_1;
        }
        float _2637 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2414 = (_2637 * _2628) + _1870;
        _2416 = (_2637 * _2630) + _1872;
        _2418 = (_2637 * _2632) + _1874;
        _2420 = ((_2622 * 0.039999999105930328369140625) * _2637) + _2200;
        _2422 = ((_2624 * 0.039999999105930328369140625) * _2637) + _2202;
        _2424 = ((_2626 * 0.039999999105930328369140625) * _2637) + _2204;
    }
    else
    {
        _2414 = _1870;
        _2416 = _1872;
        _2418 = _1874;
        _2420 = _2200;
        _2422 = _2202;
        _2424 = _2204;
    }
    float _4367 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4378 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4389 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _2441 = ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2414 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _668))) + ((_2420 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    float _2442 = ((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2416 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _668))) + ((_2422 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    float _2443 = ((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2418 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _668))) + ((_2424 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    uint _2444 = _643 + 6u;
    float _2452 = _604 / cbSceneParam._m0[86u].x;
    float _2453 = _605 / cbSceneParam._m0[86u].y;
    vec4 _2467 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, (log2((isnan(cbSceneParam._m0[77u].w) ? _526 : (isnan(_526) ? cbSceneParam._m0[77u].w : min(_526, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2469 = _2467.x;
    float _2470 = _2467.y;
    float _2471 = _2467.z;
    float _2472 = _2467.w;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_526 > cbSceneParam._m0[78u].w)
    {
        float _2527 = isnan(_526) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _526 : min(cbSceneParam._m0[80u].w, _526));
        float _2528 = _2527 / _526;
        float _2539 = _2528 * _576;
        float _2540 = _577 * _2528;
        float _2541 = (-0.0) - _2540;
        float _2542 = _2528 * _578;
        float _2544 = (cbSceneParam._m0[77u].w * _2541) / _2527;
        float _2545 = _2544 + cbSceneParam._m0[79u].w;
        float _2546 = cbSceneParam._m0[79u].w - _2540;
        float _2552 = sqrt(((_2539 * _2539) + (_2540 * _2540)) + (_2542 * _2542));
        float _2555 = (1.0 - (cbSceneParam._m0[77u].w / _2527)) * _2552;
        float _2560 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2562 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2739;
        if (abs((_2541 - _2544) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2739 = ((((_2545 > 0.0) ? exp2(_2560 * _2545) : (2.0 - exp2(_2562 * _2545))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2555;
        }
        else
        {
            float _2683 = 1.0 / cbSceneParam._m0[80u].x;
            float _2684 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : max(_2545, _2546));
            float _2685 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : min(_2545, _2546));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            _2739 = ((abs(_2552 / _2541) * cbSceneParam._m0[80u].y) * ((((_2694 - _2695) * 2.0) - ((exp2(_2560 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)))) - exp2(_2560 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))))) * _2683)) - ((exp2(_2562 * _2694) - exp2(_2562 * _2695)) * _2683))) + (_2555 * cbSceneParam._m0[80u].z);
        }
        vec4 _2741 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, 1.0), 0.0);
        float _2750 = exp2((_2739 * (-1.44269502162933349609375)) * (1.0 - _2741.w));
        float _2751 = log2(_2750);
        float _2767 = log2(_2472);
        _2564 = (exp2(_2767 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].x)) * _2741.x) / cbSceneParam._m0[78u].x)) + _2469;
        _2566 = (exp2(_2767 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].y)) * _2741.y) / cbSceneParam._m0[78u].y)) + _2470;
        _2568 = (exp2(_2767 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].z)) * _2741.z) / cbSceneParam._m0[78u].z)) + _2471;
        _2570 = _2750 * _2472;
    }
    else
    {
        _2564 = _2469;
        _2566 = _2470;
        _2568 = _2471;
        _2570 = _2472;
    }
    bool _2777;
    vec4 _2580;
    vec4 _2602;
    float _2604;
    float _2608;
    float _2609;
    float _2610;
    float _2611;
    bool _2621;
    for (;;)
    {
        _2580 = cbMatDynParam._m0[0u];
        float _2582 = roundEven(_2580.y);
        bool _2583 = _2582 == 3.0;
        float _2584 = log2(_2570);
        float _2591 = exp2(_2584 * cbSceneParam._m0[78u].x) * _2441;
        float _2592 = exp2(_2584 * cbSceneParam._m0[78u].y) * _2442;
        float _2593 = exp2(_2584 * cbSceneParam._m0[78u].z) * _2443;
        float _2600 = _592 + (-0.5);
        _2602 = cbMtdParam._m0[1u];
        _2604 = _2602.y * _2600;
        float _2607 = (_2582 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2608 = _2607 * (_2583 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2564)));
        _2609 = _2607 * (_2583 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2566)));
        _2610 = _2607 * (_2583 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2568)));
        _2611 = _2600 * 0.999000012874603271484375;
        _2621 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2621)
        {
            if ((cbInstanceData._m0[_643 + 7u].x + _2611) < 0.5)
            {
                _2777 = true;
                break;
            }
        }
        uint _2718 = _644 + uint(_2580.w);
        if ((cbInstanceData._m0[_2718].w < 1.0) && ((cbInstanceData._m0[_2718].w + _2611) < 0.5))
        {
            _2777 = true;
            break;
        }
        if ((_2604 + 1.0) < _2602.x)
        {
            _2777 = true;
            break;
        }
        _2777 = false;
        break;
    }
    float _2982;
    if (_2777)
    {
        discard_state = true;
        _2982 = 0.0;
    }
    else
    {
        _2982 = cbInstanceData._m0[_2444].w;
    }
    SV_Target.x = _2608;
    SV_Target.y = _2609;
    SV_Target.z = _2610;
    SV_Target.w = _2982;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2444].w;
    discard_exit();
}


