#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _929;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _239 = _234.z;
    float _243 = (_234.x * 2.0) + (-1.0);
    float _245 = (_234.y * 2.0) + (-1.0);
    float _246 = dot(vec2(_243, _245), vec2(_243, _245));
    float _3527 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _252 = sqrt(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))));
    float _255 = fma(_252, _218, fma(_245, _211, _243 * _197));
    float _258 = fma(_252, _219, fma(_245, _212, _243 * _198));
    float _261 = fma(_252, _220, fma(_245, _213, _243 * _199));
    float _265 = inversesqrt(dot(vec3(_255, _258, _261), vec3(_255, _258, _261)));
    float _300 = (cbMtdParam._m0[11u].z + dot(vec4(_265 * _255, _265 * _258, _265 * _261, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3538 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    vec4 _318 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _323 = _318.x * cbMtdParam._m0[9u].x;
    float _324 = _318.y * cbMtdParam._m0[9u].y;
    float _325 = _318.z * cbMtdParam._m0[9u].z;
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _349 = ((_338.x - _323) * _301) + _323;
    float _350 = ((_338.y - _324) * _301) + _324;
    float _351 = ((_338.z - _325) * _301) + _325;
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = (_364.x * 2.0) + (-1.0);
    float _372 = (_364.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_371, _372), vec2(_371, _372));
    float _3549 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _381 = ((_364.z - _239) * _301) + _239;
    float _388 = ((_371 - _243) * _301) + _243;
    float _389 = ((_372 - _245) * _301) + _245;
    float _390 = ((sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) - _252) * _301) + _252;
    float _393 = fma(_390, _218, fma(_389, _211, _388 * _197));
    float _396 = fma(_390, _219, fma(_389, _212, _388 * _198));
    float _399 = fma(_390, _220, fma(_389, _213, _388 * _199));
    float _403 = inversesqrt(dot(vec3(_393, _396, _399), vec3(_393, _396, _399)));
    float _404 = _403 * _393;
    float _405 = _403 * _396;
    float _406 = _403 * _399;
    float _3560 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _407 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3582 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3593 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _426 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _467 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _477 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _467);
    float _478 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _467);
    float _479 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _467);
    float _483 = inversesqrt(dot(vec3(_477, _478, _479), vec3(_477, _478, _479)));
    float _484 = _477 * _483;
    float _485 = _478 * _483;
    float _486 = _479 * _483;
    float _492 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _493 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _513 = fma(_406, cbSceneParam._m0[5u].z, fma(_405, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _404));
    float _516 = fma(_406, cbSceneParam._m0[6u].z, fma(_405, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _404));
    float _519 = fma(_406, cbSceneParam._m0[7u].z, fma(_405, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _404));
    uint _532 = uint(roundEven(NORMAL.w)) * 13u;
    uint _534 = (_532 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _540 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_534].x;
    float _541 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_534].y;
    float _542 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_534].z;
    float _3604 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _492, cbSceneParam._m0[86u].y * _493));
    float _557 = _554.x * TEXCOORD_9.w;
    float _558 = dot(vec3(_404, _405, _406), vec3(_484, _485, _486));
    float _561 = _558 * 2.0;
    float _565 = (_561 * _404) - _484;
    float _566 = (_561 * _405) - _485;
    float _567 = (_561 * _406) - _486;
    float _571 = abs(dot(vec3(_484, _485, _486), vec3(_404, _405, _406)));
    float _3637 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = sqrt(_407);
    float _586 = exp2((_573 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _928;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _653 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _657 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _661 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _686 = _618 + _404;
        float _687 = _622 + _405;
        float _688 = _626 + _406;
        float _698 = fma(_688, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686)) - _653;
        float _699 = fma(_688, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686)) - _657;
        float _700 = fma(_688, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686)) - _661;
        float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
        float _717 = ((_704 * _698) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_653 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_704 * _699) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_657 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_704 * _700) / cbModelParam._m0[34u].z) + ((((((_661 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        float _756 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_722.x + (-0.5));
        float _758 = _756 * (_722.y + (-0.5));
        float _759 = _756 * (_722.z + (-0.5));
        float _766 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_729.x + (-0.5));
        float _768 = _766 * (_729.y + (-0.5));
        float _769 = _766 * (_729.z + (-0.5));
        float _776 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_736.x + (-0.5));
        float _778 = _776 * (_736.y + (-0.5));
        float _779 = _776 * (_736.z + (-0.5));
        float _786 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_743.x + (-0.5));
        float _788 = _786 * (_743.y + (-0.5));
        float _789 = _786 * (_743.z + (-0.5));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = _757 * 0.5;
        float _794 = _767 * 0.5;
        float _795 = _777 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _810 = (dot(vec3(_404, _405, _406), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _820 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3685 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_822 + 1.0))) + _827) * _790;
        float _837 = _758 * 0.5;
        float _838 = _768 * 0.5;
        float _839 = _778 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_404, _405, _406), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3718 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_864 + 1.0))) + _869) * _791;
        float _879 = _759 * 0.5;
        float _880 = _769 * 0.5;
        float _881 = _779 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_404, _405, _406), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3751 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_906 + 1.0))) + _911) * _792;
        _928 = _759;
        _930 = _758;
        _931 = _757;
        _932 = _769;
        _933 = _768;
        _934 = _767;
        _935 = _779;
        _936 = _778;
        _937 = _777;
        _938 = _792;
        _939 = _791;
        _940 = _790;
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
    }
    else
    {
        _928 = _929;
        _930 = _929;
        _931 = _929;
        _932 = _929;
        _933 = _929;
        _934 = _929;
        _935 = _929;
        _936 = _929;
        _937 = _929;
        _938 = _929;
        _939 = _929;
        _940 = _929;
        _941 = 0.0;
        _942 = 0.0;
        _943 = 0.0;
    }
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _969 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _973 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _977 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _1000 = _618 + _404;
        float _1001 = _622 + _405;
        float _1002 = _626 + _406;
        float _1012 = fma(_1002, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000)) - _969;
        float _1013 = fma(_1002, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000)) - _973;
        float _1014 = fma(_1002, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000)) - _977;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_969 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_973 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[35u].z) + ((((((_977 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1068 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1035.x + (-0.5));
        float _1070 = _1068 * (_1035.y + (-0.5));
        float _1071 = _1068 * (_1035.z + (-0.5));
        float _1078 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1042.x + (-0.5));
        float _1080 = _1078 * (_1042.y + (-0.5));
        float _1081 = _1078 * (_1042.z + (-0.5));
        float _1088 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1049.x + (-0.5));
        float _1090 = _1088 * (_1049.y + (-0.5));
        float _1091 = _1088 * (_1049.z + (-0.5));
        float _1098 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1056.x + (-0.5));
        float _1100 = _1098 * (_1056.y + (-0.5));
        float _1101 = _1098 * (_1056.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_404, _405, _406), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3814 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1132 + 1.0))) + _1137) * _1102;
        float _1147 = _1070 * 0.5;
        float _1148 = _1080 * 0.5;
        float _1149 = _1090 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_404, _405, _406), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3847 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1174 + 1.0))) + _1179) * _1103;
        float _1189 = _1071 * 0.5;
        float _1190 = _1081 * 0.5;
        float _1191 = _1091 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_404, _405, _406), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3880 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1216 + 1.0))) + _1221) * _1104;
        _1238 = _1071;
        _1239 = _1070;
        _1240 = _1069;
        _1241 = _1081;
        _1242 = _1080;
        _1243 = _1079;
        _1244 = _1091;
        _1245 = _1090;
        _1246 = _1089;
        _1247 = _1104;
        _1248 = _1103;
        _1249 = _1102;
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _929;
        _1239 = _929;
        _1240 = _929;
        _1241 = _929;
        _1242 = _929;
        _1243 = _929;
        _1244 = _929;
        _1245 = _929;
        _1246 = _929;
        _1247 = _929;
        _1248 = _929;
        _1249 = _929;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _941)) + _941;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _942)) + _942;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _943)) + _943;
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1262));
    float _1306 = _565 * 0.5;
    float _1307 = _566 * 0.5;
    float _1308 = _567 * 0.5;
    float _1309 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1312 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1315 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1349;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1322 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_928, _932, _935, _938));
        float _1326 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_930, _933, _936, _939));
        float _1330 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_931, _934, _937, _940));
        float _1337 = dot(vec4(cbModelParam._m0[39u]), vec4(_1306, _1307, _1308, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1360;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1351 = dot(vec4(cbModelParam._m0[40u]), vec4(_1306, _1307, _1308, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1364 = (_1360 * cbModelParam._m0[1u].x) + (_1349 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _407);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1374 : min(cbModelParam._m0[25u].z, _1374));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1438 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1441 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1469;
        if (_1435 > 0.0)
        {
            _1469 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1469 = frontier_phi_16_14_ladder;
        }
        float _1642;
        if (_1438 > 0.0)
        {
            _1642 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1642 = frontier_phi_25_21_ladder;
        }
        float _1938;
        if (_1441 > 0.0)
        {
            _1938 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1938 = frontier_phi_37_32_ladder;
        }
        float _1940 = isnan(_1642) ? _1469 : (isnan(_1469) ? _1642 : min(_1469, _1642));
        float _1941 = isnan(_1938) ? _1940 : (isnan(_1940) ? _1938 : min(_1940, _1938));
        float _1945 = (_1941 * _1435) + _1424;
        float _1946 = (_1941 * _1438) + _1428;
        float _1947 = (_1941 * _1441) + _1432;
        float _1948 = _1941 * 9.9999997473787516355514526367188e-05;
        float _1950 = (-1.0) - _1948;
        float _1952 = _1948 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1947 > _1952) || ((_1947 < _1950) || ((_1946 > _1952) || ((_1946 < _1950) || ((_1945 < _1950) || (_1945 > _1952))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1947, cbModelParam._m0[9u].z, fma(_1946, cbModelParam._m0[9u].y, _1945 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1947, cbModelParam._m0[10u].z, fma(_1946, cbModelParam._m0[10u].y, _1945 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1947, cbModelParam._m0[11u].z, fma(_1946, cbModelParam._m0[11u].y, _1945 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_15_37_ladder = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2092.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2092.z * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_15_37_ladder_1;
        _1459 = frontier_phi_15_37_ladder;
        _1461 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _1375);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1465 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _407);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1465 : min(cbModelParam._m0[25u].w, _1465));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1523 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1527 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1531 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1534 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1537 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1540 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1647;
        if (_1534 > 0.0)
        {
            _1647 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1647 = frontier_phi_27_23_ladder;
        }
        float _1965;
        if (_1537 > 0.0)
        {
            _1965 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1965 = frontier_phi_39_34_ladder;
        }
        float _2292;
        if (_1540 > 0.0)
        {
            _2292 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2292 = frontier_phi_49_46_ladder;
        }
        float _2294 = isnan(_1965) ? _1647 : (isnan(_1647) ? _1965 : min(_1647, _1965));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1534) + _1523;
        float _2300 = (_2295 * _1537) + _1527;
        float _2301 = (_2295 * _1540) + _1531;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2302;
        float _2305 = _2302 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2301 > _2305) || ((_2301 < _2303) || ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 < _2303) || (_2299 > _2305))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2301, cbModelParam._m0[17u].z, fma(_2300, cbModelParam._m0[17u].y, _2299 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2301, cbModelParam._m0[18u].z, fma(_2300, cbModelParam._m0[18u].y, _2299 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2301, cbModelParam._m0[19u].z, fma(_2300, cbModelParam._m0[19u].y, _2299 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_24_49_ladder = _2419.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2419.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2419.x * cbModelParam._m0[1u].z;
        }
        _1559 = frontier_phi_24_49_ladder_2;
        _1561 = frontier_phi_24_49_ladder_1;
        _1563 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1466);
        _1559 = _1543.x * cbModelParam._m0[1u].z;
        _1561 = _1543.y * cbModelParam._m0[1u].z;
        _1563 = _1543.z * cbModelParam._m0[1u].z;
    }
    float _1575 = ((((1.0 - _586) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_586 * _573)) * _557;
    float _1576 = _1575 * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1577 = _1575 * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1578 = _1575 * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1581 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, _1576 * cbSceneParam._m0[91u].x));
    float _1621 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1625 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1629 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1633 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1634 = _1621 / _1633;
    float _1635 = _1625 / _1633;
    float _1636 = _1629 / _1633;
    float _1783;
    float _1784;
    float _1785;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1663 = ((uint(_1636 > cbSceneParam._m0[59u].y) + uint(_1636 > cbSceneParam._m0[59u].x)) + uint(_1636 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1664 = _1663 + 43u;
        uint _1672 = _1663 + 44u;
        uint _1680 = _1663 + 45u;
        uint _1688 = _1663 + 46u;
        float _1699 = fma(_1633, cbSceneParam._m0[_1664].w, fma(_1629, cbSceneParam._m0[_1664].z, fma(_1625, cbSceneParam._m0[_1664].y, _1621 * cbSceneParam._m0[_1664].x)));
        float _1703 = fma(_1633, cbSceneParam._m0[_1672].w, fma(_1629, cbSceneParam._m0[_1672].z, fma(_1625, cbSceneParam._m0[_1672].y, _1621 * cbSceneParam._m0[_1672].x)));
        float _1711 = fma(_1633, cbSceneParam._m0[_1688].w, fma(_1629, cbSceneParam._m0[_1688].z, fma(_1625, cbSceneParam._m0[_1688].y, _1621 * cbSceneParam._m0[_1688].x)));
        float _1716 = cbSceneParam._m0[33u].z * _1711;
        float _1718 = cbSceneParam._m0[33u].w * _1711;
        float _1721 = fma(_1633, cbSceneParam._m0[_1680].w, fma(_1629, cbSceneParam._m0[_1680].z, fma(_1625, cbSceneParam._m0[_1680].y, _1621 * cbSceneParam._m0[_1680].x))) / _1711;
        float _1769 = (cbSceneParam._m0[33u].x - sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636))) * cbSceneParam._m0[33u].y;
        float _4006 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1776 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1716 + _1699) / _1711, (_1718 + _1703) / _1711), _1721), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1718 + _1699) / _1711, (_1703 - _1716) / _1711), _1721), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1699 - _1716) / _1711, (_1703 - _1718) / _1711), _1721), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1699 - _1718) / _1711, (_1716 + _1703) / _1711), _1721), 0.0)).x), vec4(0.25)));
        _1783 = 1.0 - (_1776 * cbSceneParam._m0[34u].x);
        _1784 = 1.0 - (_1776 * cbSceneParam._m0[34u].y);
        _1785 = 1.0 - (_1776 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1783 = 1.0;
        _1784 = 1.0;
        _1785 = 1.0;
    }
    float _1849;
    float _1851;
    float _1853;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1837 = fma(_1633, cbSceneParam._m0[63u].w, fma(_1629, cbSceneParam._m0[63u].z, fma(_1625, cbSceneParam._m0[63u].y, _1621 * cbSceneParam._m0[63u].x)));
        float _1838 = fma(_1633, cbSceneParam._m0[60u].w, fma(_1629, cbSceneParam._m0[60u].z, fma(_1625, cbSceneParam._m0[60u].y, _1621 * cbSceneParam._m0[60u].x))) / _1837;
        float _1839 = fma(_1633, cbSceneParam._m0[61u].w, fma(_1629, cbSceneParam._m0[61u].z, fma(_1625, cbSceneParam._m0[61u].y, _1621 * cbSceneParam._m0[61u].x))) / _1837;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1838 >= cbSceneParam._m0[64u].x) && (_1839 >= cbSceneParam._m0[64u].y)) && (_1838 <= cbSceneParam._m0[64u].z)) && (_1839 <= cbSceneParam._m0[64u].w))
        {
            float _1978 = fma(_1633, cbSceneParam._m0[62u].w, fma(_1629, cbSceneParam._m0[62u].z, fma(_1625, cbSceneParam._m0[62u].y, _1621 * cbSceneParam._m0[62u].x))) / _1837;
            float _1982 = isnan(cbSceneParam._m0[41u].w) ? _1978 : (isnan(_1978) ? cbSceneParam._m0[41u].w : max(_1978, cbSceneParam._m0[41u].w));
            float _2025 = (cbSceneParam._m0[33u].x - sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636))) * cbSceneParam._m0[33u].y;
            float _4022 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
            float _2032 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1838, cbSceneParam._m0[33u].w + _1839), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1838, _1839 - cbSceneParam._m0[33u].z), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1838 - cbSceneParam._m0[33u].z, _1839 - cbSceneParam._m0[33u].w), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1838 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1839), _1982), 0.0)).x), vec4(0.25)));
            float _2036 = 1.0 - (_2032 * cbSceneParam._m0[34u].x);
            float _2037 = 1.0 - (_2032 * cbSceneParam._m0[34u].y);
            float _2038 = 1.0 - (_2032 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2037) ? _1784 : (isnan(_1784) ? _2037 : min(_1784, _2037));
            frontier_phi_36_35_ladder_1 = isnan(_2038) ? _1785 : (isnan(_1785) ? _2038 : min(_1785, _2038));
            frontier_phi_36_35_ladder_2 = isnan(_2036) ? _1783 : (isnan(_1783) ? _2036 : min(_1783, _2036));
        }
        else
        {
            frontier_phi_36_35_ladder = _1784;
            frontier_phi_36_35_ladder_1 = _1785;
            frontier_phi_36_35_ladder_2 = _1783;
        }
        _1849 = frontier_phi_36_35_ladder_2;
        _1851 = frontier_phi_36_35_ladder;
        _1853 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1849 = _1783;
        _1851 = _1784;
        _1853 = _1785;
    }
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_532 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1868 = _557 + (-1.0);
    float _1873 = (cbLight._m0[_1861].x * _1868) + 1.0;
    float _1874 = (cbLight._m0[_1861].y * _1868) + 1.0;
    float _1875 = (cbLight._m0[_1861].z * _1868) + 1.0;
    float _1876 = (cbLight._m0[_1861].w * _1868) + 1.0;
    uint _1877 = _1860 + 5u;
    float _1883 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1887 = _1860 + 4u;
    float _1897 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1901 = _1860 | 1u;
    float _1912 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_404, _405, _406));
    float _1915 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_404, _405, _406));
    float _4058 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _4069 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1920 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1922 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1929 = ((cbLight._m0[_1877].x * _1883) * _1922) + (((cbLight._m0[_1887].x * _1849) * _1897) * _1920);
    float _1930 = ((_1883 * cbLight._m0[_1877].y) * _1922) + (((cbLight._m0[_1887].y * _1851) * _1897) * _1920);
    float _1931 = ((_1883 * cbLight._m0[_1877].z) * _1922) + (((cbLight._m0[_1887].z * _1853) * _1897) * _1920);
    uvec4 _1935 = floatBitsToUint(cbLight._m0[_1860 + 12u]);
    bool _1937 = _1935.x == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_1937)
    {
        _2039 = _1929;
        _2041 = _1930;
        _2043 = _1931;
    }
    else
    {
        uint _2047 = _1860 + 6u;
        float _2063 = (dot(vec3(cbLight._m0[_1860 + 2u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _2064 = _2063 * _2063;
        float _4080 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2065 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2066 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2039 = (((cbLight._m0[_2047].x * 0.3183098733425140380859375) * _2065) * _2066) + _1929;
        _2041 = (((cbLight._m0[_2047].y * 0.3183098733425140380859375) * _2065) * _2066) + _1930;
        _2043 = (((cbLight._m0[_2047].z * 0.3183098733425140380859375) * _2065) * _2066) + _1931;
    }
    bool _2046 = _1935.y == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_2046)
    {
        _2101 = _2039;
        _2103 = _2041;
        _2105 = _2043;
    }
    else
    {
        uint _2263 = _1860 + 7u;
        float _2279 = (dot(vec3(cbLight._m0[_1860 + 3u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4096 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2282 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2101 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2039;
        _2103 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2041;
        _2105 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2043;
    }
    uint _2108 = _1860 + 8u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _407) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1860].x + _484;
    float _2124 = cbLight._m0[_1860].y + _485;
    float _2125 = cbLight._m0[_1860].z + _486;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1860].xyz));
    float _4112 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _2137 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2138 = dot(vec3(_404, _405, _406), vec3(_2130, _2131, _2132));
    float _4134 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2130, _2131, _2132));
    float _4145 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2122 * _2122;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2162 = 1.0 - _2122;
    float _2173 = (0.5 / (((_2137 * ((_2136 * _2162) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2162) + _2122) * _2136))) * _2136;
    float _4156 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    uint _2189 = _1860 + 9u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _407) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_1901].x + _484;
    float _2203 = cbLight._m0[_1901].y + _485;
    float _2204 = cbLight._m0[_1901].z + _486;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1901].xyz));
    float _4167 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2216 = dot(vec3(_404, _405, _406), vec3(_2209, _2210, _2211));
    float _4178 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2220 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2209, _2210, _2211));
    float _4189 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = _2201 * _2201;
    float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
    float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2238 = 1.0 - _2201;
    float _2248 = (0.5 / (((_2137 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2238) + _2201) * _2215))) * _2215;
    float _4200 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
    float _2260 = (((_2237 * cbLight._m0[_2189].x) * _2250) * _1883) + ((((cbLight._m0[_2108].x * _1849) * _2161) * _2175) * _1897);
    float _2261 = (((_2237 * cbLight._m0[_2189].y) * _2250) * _1883) + ((((cbLight._m0[_2108].y * _1851) * _2161) * _2175) * _1897);
    float _2262 = (((_2237 * cbLight._m0[_2189].z) * _2250) * _1883) + ((((cbLight._m0[_2108].z * _1853) * _2161) * _2175) * _1897);
    float _2318;
    float _2320;
    float _2322;
    if (_1937)
    {
        _2318 = _2260;
        _2320 = _2261;
        _2322 = _2262;
    }
    else
    {
        uint _2324 = _1860 + 2u;
        uint _2328 = _1860 + 10u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _407) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _484;
        float _2345 = cbLight._m0[_2324].y + _485;
        float _2346 = cbLight._m0[_2324].z + _486;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2324].xyz));
        float _4211 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2358 = dot(vec3(_404, _405, _406), vec3(_2351, _2352, _2353));
        float _4222 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4233 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2380 = 1.0 - _2343;
        float _2390 = (0.5 / (((_2137 * ((_2357 * _2380) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2380) + _2343) * _2357))) * _2357;
        float _4244 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2392 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2393 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2318 = (((_2379 * cbLight._m0[_2328].x) * _2392) * _2393) + _2260;
        _2320 = (((_2379 * cbLight._m0[_2328].y) * _2392) * _2393) + _2261;
        _2322 = (((_2379 * cbLight._m0[_2328].z) * _2392) * _2393) + _2262;
    }
    float _2424;
    float _2426;
    float _2428;
    if (_2046)
    {
        _2424 = _2318;
        _2426 = _2320;
        _2428 = _2322;
    }
    else
    {
        uint _2435 = _1860 + 3u;
        uint _2439 = _1860 + 11u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _407) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _484;
        float _2456 = cbLight._m0[_2435].y + _485;
        float _2457 = cbLight._m0[_2435].z + _486;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2435].xyz));
        float _4260 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2469 = dot(vec3(_404, _405, _406), vec3(_2462, _2463, _2464));
        float _4271 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4282 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2490 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2491 = 1.0 - _2454;
        float _2501 = (0.5 / (((_2137 * ((_2468 * _2491) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2491) + _2454) * _2468))) * _2468;
        float _4293 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2503 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2504 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2424 = (((_2490 * cbLight._m0[_2439].x) * _2503) * _2504) + _2318;
        _2426 = (((_2490 * cbLight._m0[_2439].y) * _2503) * _2504) + _2320;
        _2428 = (((_2490 * cbLight._m0[_2439].z) * _2503) * _2504) + _2322;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1858.y == 0u)
    {
        uvec4 _2525 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2526 = _2525.x;
        uint _2537 = uint((float(_2525.y) * floor(float(uint(cbSceneParam._m0[85u].y * _493) / _2526))) + floor(float(uint(cbSceneParam._m0[85u].x * _492) / _2526)));
        float _2547 = (log2(_1636 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2548 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        uint _2551 = uint(isnan(14.0) ? _2548 : (isnan(_2548) ? 14.0 : min(_2548, 14.0)));
        uvec4 _2556 = texelFetch(g_lightClusterGridBuffer, int(((_2551 << 2u) + (_2537 << 6u)) >> 2u));
        uint _2557 = _2556.x;
        uint _2558 = _2525.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2558 >> 4u) & 15u)) + 4294967295u) & _2557) == 0u) || ((_2558 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2796)
                {
                    frontier_phi_68_pred = _2785;
                    frontier_phi_68_pred_1 = _2784;
                    frontier_phi_68_pred_2 = _2783;
                    frontier_phi_68_pred_3 = _2781;
                    frontier_phi_68_pred_4 = _2780;
                    frontier_phi_68_pred_5 = _2782;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2795;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2786 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _1634;
                        float _2971 = _2930.y - _1635;
                        float _2972 = _2930.z - _1636;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_513, _516, _519), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4319 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _1634;
                        float _3006 = (-0.0) - _1635;
                        float _3007 = (-0.0) - _1636;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3021 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3022 = 1.0 - _573;
                        float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                        float _3030 = _3029 * _3029;
                        float _3031 = _3030 * _3030;
                        float _3032 = _3012 + _2977;
                        float _3033 = _3013 + _2978;
                        float _3034 = _3014 + _2979;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3042 = dot(vec3(_513, _516, _519), vec3(_3012, _3013, _3014));
                        float _4335 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3046 = dot(vec3(_513, _516, _519), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                        float _4346 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                        float _3054 = _2990 * _3030;
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _2980) + _3055;
                        float _4357 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3060 = 1.0 - _3030;
                        float _3070 = (0.5 / (((_3059 * ((_3045 * _3060) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3030) * _3045))) * _3059;
                        float _4368 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3081 = (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3053 * _3053) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2839 = (_3001 * _2949.x) + _2907;
                        _2840 = (_3001 * _2949.y) + _2908;
                        _2841 = (_3001 * _2949.z) + _2909;
                        _2836 = (_3081 * _2966.x) + _2904;
                        _2837 = (_3081 * _2966.y) + _2905;
                        _2838 = (_3081 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_68_pred = _2841;
                    frontier_phi_68_pred_1 = _2840;
                    frontier_phi_68_pred_2 = _2839;
                    frontier_phi_68_pred_3 = _2837;
                    frontier_phi_68_pred_4 = _2836;
                    frontier_phi_68_pred_5 = _2838;
                }
                _2647 = frontier_phi_68_pred;
                _2645 = frontier_phi_68_pred_1;
                _2643 = frontier_phi_68_pred_2;
                _2639 = frontier_phi_68_pred_3;
                _2637 = frontier_phi_68_pred_4;
                _2641 = frontier_phi_68_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2637;
                    _2781 = _2639;
                    _2782 = _2641;
                    _2783 = _2643;
                    _2784 = _2645;
                    _2785 = _2647;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2653) & _2557) == 0u)
        {
            _2748 = _2636;
            _2750 = _2638;
            _2752 = _2640;
            _2754 = _2642;
            _2756 = _2644;
            _2758 = _2646;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636)));
            float _2774 = _2773 * _1634;
            float _2775 = _2773 * _1635;
            float _2776 = _2773 * _1636;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2887 = _2636;
                float _2888 = _2638;
                float _2889 = _2640;
                float _2890 = _2642;
                float _2891 = _2644;
                float _2892 = _2646;
                uint _2893 = _2653;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2903)
                    {
                        frontier_phi_74_pred = _2889;
                        frontier_phi_74_pred_1 = _2888;
                        frontier_phi_74_pred_2 = _2887;
                        frontier_phi_74_pred_3 = _2892;
                        frontier_phi_74_pred_4 = _2891;
                        frontier_phi_74_pred_5 = _2890;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3099 = _2887;
                        float _3100 = _2888;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        uint _3105 = _2902;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3175;
                        vec4 _3191;
                        float _3238;
                        bool _3239;
                        for (;;)
                        {
                            uint _3116 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3162 = (_3116 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3178 = (_3116 * 40u) + 20u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3194 = (_3116 * 40u) + 24u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3213 = (_3116 * 40u) + 28u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3238 = fma(_1636, _3226.z, fma(_1635, _3226.y, _3226.x * _1634)) + _3226.w;
                            _3239 = !((fma(_1636, _3207.z, fma(_1635, _3207.y, _3207.x * _1634)) + _3207.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3239)
                            {
                                float _3266 = _3131.x - _1634;
                                float _3267 = _3131.y - _1635;
                                float _3268 = _3131.z - _1636;
                                float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                                float _3272 = inversesqrt(_3269);
                                float _3273 = _3272 * _3266;
                                float _3274 = _3272 * _3267;
                                float _3275 = _3272 * _3268;
                                float _3279 = 1.0 - (_3269 / (_3132 * _3132));
                                float _4379 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3284 = sqrt(_3269) * _3147.w;
                                float _3286 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                                float _3287 = _3286 * _3286;
                                float _3290 = ((1.0 - _3287) * dot(vec3(_3273, _3274, _3275), vec3(_513, _516, _519))) + _3287;
                                float _3293 = _3284 * _3284;
                                float _3297 = (fma(_1636, _3175.z, fma(_1635, _3175.y, _3175.x * _1634)) + _3175.w) / _3238;
                                float _3298 = (fma(_1636, _3191.z, fma(_1635, _3191.y, _3191.x * _1634)) + _3191.w) / _3238;
                                float _3302 = 1.0 - dot(vec2(_3297, _3298), vec2(_3297, _3298));
                                float _4395 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3304 = _3303 * (((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3280) / ((_3293 * 0.699999988079071044921875) + 1.0));
                                float _3316 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                                float _3317 = 1.0 - _573;
                                float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                                float _3325 = _3324 * _3324;
                                float _3326 = _3325 * _3325;
                                float _3327 = _3273 - _2774;
                                float _3328 = _3274 - _2775;
                                float _3329 = _3275 - _2776;
                                float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                                float _3337 = dot(vec3(_513, _516, _519), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4406 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3341 = dot(vec3(_513, _516, _519), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                                float _4417 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                                float _3349 = _3286 * _3325;
                                float _3350 = _3349 * _3349;
                                float _3356 = ((1.0 - _3350) * dot(vec3(_513, _516, _519), vec3(_3273, _3274, _3275))) + _3350;
                                float _4428 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3358 = 1.0 - _3325;
                                float _3368 = (0.5 / (((_3357 * ((_3340 * _3358) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3325) * _3340))) * _3357;
                                float _4439 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3378 = (_3303 * _3280) * (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3348 * _3348) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3378 * _3159.z;
                                frontier_phi_80_pred_1 = _3378 * _3159.y;
                                frontier_phi_80_pred_2 = _3378 * _3159.x;
                                frontier_phi_80_pred_3 = _3304 * _3147.z;
                                frontier_phi_80_pred_4 = _3304 * _3147.y;
                                frontier_phi_80_pred_5 = _3304 * _3147.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3384 = frontier_phi_80_pred;
                            _3383 = frontier_phi_80_pred_1;
                            _3382 = frontier_phi_80_pred_2;
                            _3387 = frontier_phi_80_pred_3;
                            _3386 = frontier_phi_80_pred_4;
                            _3385 = frontier_phi_80_pred_5;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3086 = _3382 + _3099;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3088;
                        frontier_phi_74_pred_1 = _3087;
                        frontier_phi_74_pred_2 = _3086;
                        frontier_phi_74_pred_3 = _3091;
                        frontier_phi_74_pred_4 = _3090;
                        frontier_phi_74_pred_5 = _3089;
                    }
                    _2753 = frontier_phi_74_pred;
                    _2751 = frontier_phi_74_pred_1;
                    _2749 = frontier_phi_74_pred_2;
                    _2759 = frontier_phi_74_pred_3;
                    _2757 = frontier_phi_74_pred_4;
                    _2755 = frontier_phi_74_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2749;
                        _2888 = _2751;
                        _2889 = _2753;
                        _2890 = _2755;
                        _2891 = _2757;
                        _2892 = _2759;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2757;
                frontier_phi_62_63_ladder_1 = _2755;
                frontier_phi_62_63_ladder_2 = _2753;
                frontier_phi_62_63_ladder_3 = _2759;
                frontier_phi_62_63_ladder_4 = _2751;
                frontier_phi_62_63_ladder_5 = _2749;
            }
            else
            {
                frontier_phi_62_63_ladder = _2644;
                frontier_phi_62_63_ladder_1 = _2642;
                frontier_phi_62_63_ladder_2 = _2640;
                frontier_phi_62_63_ladder_3 = _2646;
                frontier_phi_62_63_ladder_4 = _2638;
                frontier_phi_62_63_ladder_5 = _2636;
            }
            _2748 = frontier_phi_62_63_ladder_5;
            _2750 = frontier_phi_62_63_ladder_4;
            _2752 = frontier_phi_62_63_ladder_2;
            _2754 = frontier_phi_62_63_ladder_1;
            _2756 = frontier_phi_62_63_ladder;
            _2758 = frontier_phi_62_63_ladder_3;
        }
        float _2763 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
        _2569 = (_2763 * _2754) + _2101;
        _2571 = (_2763 * _2756) + _2103;
        _2573 = (_2763 * _2758) + _2105;
        _2575 = ((_2748 * 0.039999999105930328369140625) * _2763) + _2424;
        _2577 = ((_2750 * 0.039999999105930328369140625) * _2763) + _2426;
        _2579 = ((_2752 * 0.039999999105930328369140625) * _2763) + _2428;
    }
    else
    {
        _2569 = _2101;
        _2571 = _2103;
        _2573 = _2105;
        _2575 = _2424;
        _2577 = _2426;
        _2579 = _2428;
    }
    float _4455 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4466 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4477 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    uint _2599 = _532 + 6u;
    float _2607 = _492 / cbSceneParam._m0[86u].x;
    float _2608 = _493 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _426 : (isnan(_426) ? cbSceneParam._m0[77u].w : min(_426, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_426 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_426) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _426 : min(cbSceneParam._m0[80u].w, _426));
        float _2662 = _2661 / _426;
        float _2673 = _2662 * _477;
        float _2674 = _478 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2676 = _2662 * _479;
        float _2678 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2674;
        float _2686 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2675 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2811 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2849 = ((abs(_2686 / _2675) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2696 * _2820) - exp2(_2696 * _2821)) * _2809))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2627);
        _2698 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2700 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2702 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2704 = _2860 * _2627;
    }
    else
    {
        _2698 = _2624;
        _2700 = _2625;
        _2702 = _2626;
        _2704 = _2627;
    }
    float _2716 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2717 = _2716 == 3.0;
    float _2718 = log2(_2704);
    float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2569 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _557))) + ((_2575 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1364)) * cbPerFrame._m0[3u].x));
    float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2571 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _557))) + ((_2577 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1364)) * cbPerFrame._m0[3u].x));
    float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2573 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _557))) + ((_2579 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1364)) * cbPerFrame._m0[3u].x));
    float _2736 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2736 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.y = _2736 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.z = _2736 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.w = cbInstanceData._m0[_2599].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
}


