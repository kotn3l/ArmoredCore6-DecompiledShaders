#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _950;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _244.x;
    float _248 = _244.y;
    float _249 = _244.z;
    vec4 _281 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _294 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3569 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _304 = ((_281.z - _249) * _295) + _249;
    float _308 = ((((_281.x - _247) * _295) + _247) * 2.0) + (-1.0);
    float _310 = ((((_281.y - _248) * _295) + _248) * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3580 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))));
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _339 = _334.x * cbMtdParam._m0[9u].x;
    float _340 = _334.y * cbMtdParam._m0[9u].y;
    float _341 = _334.z * cbMtdParam._m0[9u].z;
    vec4 _360 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _374 = (((_360.x * cbMtdParam._m0[10u].x) - _339) * _295) + _339;
    float _375 = (((_360.y * cbMtdParam._m0[10u].y) - _340) * _295) + _340;
    float _376 = (((_360.z * cbMtdParam._m0[10u].z) - _341) * _295) + _341;
    float _392 = _295 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _395 = fma(_316, _228, fma(_310, _220 * TANGENT.x, (_206 * _198) * _308));
    float _398 = fma(_316, _229, fma(_310, _220 * TANGENT.y, (_206 * _199) * _308));
    float _401 = fma(_316, _230, fma(_310, _220 * TANGENT.z, (_206 * _200) * _308));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3591 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _409 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3613 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3624 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3635 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _413 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _429 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _480 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _470);
    float _481 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _470);
    float _482 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _470);
    float _486 = inversesqrt(dot(vec3(_480, _481, _482), vec3(_480, _481, _482)));
    float _487 = _480 * _486;
    float _488 = _481 * _486;
    float _489 = _482 * _486;
    float _495 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _496 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _516 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _519 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _522 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _535 = uint(roundEven(NORMAL.w)) * 13u;
    uint _537 = (_535 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _543 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_537].x;
    float _544 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_537].y;
    float _545 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_537].z;
    float _3646 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _549 = 1.0 - _413;
    float _550 = _546 * _549;
    float _551 = _547 * _549;
    float _552 = _548 * _549;
    float _557 = (_546 + (-0.039999999105930328369140625)) * _413;
    float _558 = (_547 + (-0.039999999105930328369140625)) * _413;
    float _559 = (_548 + (-0.039999999105930328369140625)) * _413;
    float _560 = _557 + 0.039999999105930328369140625;
    float _562 = _558 + 0.039999999105930328369140625;
    float _563 = _559 + 0.039999999105930328369140625;
    vec4 _572 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _495, cbSceneParam._m0[86u].y * _496));
    float _575 = _572.x * TEXCOORD_9.w;
    float _576 = dot(vec3(_406, _407, _408), vec3(_487, _488, _489));
    float _579 = _576 * 2.0;
    float _583 = (_579 * _406) - _487;
    float _584 = (_579 * _407) - _488;
    float _585 = (_579 * _408) - _489;
    float _589 = abs(dot(vec3(_487, _488, _489), vec3(_406, _407, _408)));
    float _3679 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _591 = sqrt(_409);
    float _604 = exp2((_591 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_591 * 3.0));
    float _610 = (1.0 - _604) * ((_591 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _611 = _604 * _591;
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _949;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _674 = fma(_647, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639));
        float _678 = fma(_647, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639));
        float _682 = fma(_647, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639));
        float _707 = _639 + _406;
        float _708 = _643 + _407;
        float _709 = _647 + _408;
        float _719 = fma(_709, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707)) - _674;
        float _720 = fma(_709, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707)) - _678;
        float _721 = fma(_709, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707)) - _682;
        float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
        float _738 = ((_725 * _719) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_725 * _720) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_725 * _721) / cbModelParam._m0[34u].z) + ((((((_682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        float _777 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_743.x + (-0.5));
        float _779 = _777 * (_743.y + (-0.5));
        float _780 = _777 * (_743.z + (-0.5));
        float _787 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_750.x + (-0.5));
        float _789 = _787 * (_750.y + (-0.5));
        float _790 = _787 * (_750.z + (-0.5));
        float _797 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_757.x + (-0.5));
        float _799 = _797 * (_757.y + (-0.5));
        float _800 = _797 * (_757.z + (-0.5));
        float _807 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_764.x + (-0.5));
        float _809 = _807 * (_764.y + (-0.5));
        float _810 = _807 * (_764.z + (-0.5));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = _778 * 0.5;
        float _815 = _788 * 0.5;
        float _816 = _798 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _831 = (dot(vec3(_406, _407, _408), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _841 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3727 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_843 + 1.0))) + _848) * _811;
        float _858 = _779 * 0.5;
        float _859 = _789 * 0.5;
        float _860 = _799 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_406, _407, _408), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3760 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_885 + 1.0))) + _890) * _812;
        float _900 = _780 * 0.5;
        float _901 = _790 * 0.5;
        float _902 = _800 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_406, _407, _408), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3793 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_927 + 1.0))) + _932) * _813;
        _949 = _780;
        _951 = _779;
        _952 = _778;
        _953 = _790;
        _954 = _789;
        _955 = _788;
        _956 = _800;
        _957 = _799;
        _958 = _798;
        _959 = _813;
        _960 = _812;
        _961 = _811;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
    }
    else
    {
        _949 = _950;
        _951 = _950;
        _952 = _950;
        _953 = _950;
        _954 = _950;
        _955 = _950;
        _956 = _950;
        _957 = _950;
        _958 = _950;
        _959 = _950;
        _960 = _950;
        _961 = _950;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _990 = fma(_647, cbModelParam._m0[30u].z, fma(_643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _639));
        float _994 = fma(_647, cbModelParam._m0[31u].z, fma(_643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _639));
        float _998 = fma(_647, cbModelParam._m0[32u].z, fma(_643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _639));
        float _1021 = _639 + _406;
        float _1022 = _643 + _407;
        float _1023 = _647 + _408;
        float _1033 = fma(_1023, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021)) - _990;
        float _1034 = fma(_1023, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021)) - _994;
        float _1035 = fma(_1023, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021)) - _998;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_990 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_994 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[35u].z) + ((((((_998 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1089 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1056.x + (-0.5));
        float _1091 = _1089 * (_1056.y + (-0.5));
        float _1092 = _1089 * (_1056.z + (-0.5));
        float _1099 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1063.x + (-0.5));
        float _1101 = _1099 * (_1063.y + (-0.5));
        float _1102 = _1099 * (_1063.z + (-0.5));
        float _1109 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1070.x + (-0.5));
        float _1111 = _1109 * (_1070.y + (-0.5));
        float _1112 = _1109 * (_1070.z + (-0.5));
        float _1119 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1077.x + (-0.5));
        float _1121 = _1119 * (_1077.y + (-0.5));
        float _1122 = _1119 * (_1077.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_406, _407, _408), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3856 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1153 + 1.0))) + _1158) * _1123;
        float _1168 = _1091 * 0.5;
        float _1169 = _1101 * 0.5;
        float _1170 = _1111 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_406, _407, _408), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3889 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1195 + 1.0))) + _1200) * _1124;
        float _1210 = _1092 * 0.5;
        float _1211 = _1102 * 0.5;
        float _1212 = _1112 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_406, _407, _408), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3922 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1237 + 1.0))) + _1242) * _1125;
        _1259 = _1092;
        _1260 = _1091;
        _1261 = _1090;
        _1262 = _1102;
        _1263 = _1101;
        _1264 = _1100;
        _1265 = _1112;
        _1266 = _1111;
        _1267 = _1110;
        _1268 = _1125;
        _1269 = _1124;
        _1270 = _1123;
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _950;
        _1260 = _950;
        _1261 = _950;
        _1262 = _950;
        _1263 = _950;
        _1264 = _950;
        _1265 = _950;
        _1266 = _950;
        _1267 = _950;
        _1268 = _950;
        _1269 = _950;
        _1270 = _950;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _963)) + _963;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1306 = fma(_1285, cbSceneParam._m0[89u].z, fma(_1284, cbSceneParam._m0[89u].y, _1283 * cbSceneParam._m0[89u].x));
    float _1309 = fma(_1285, cbSceneParam._m0[90u].z, fma(_1284, cbSceneParam._m0[90u].y, _1283 * cbSceneParam._m0[90u].x));
    float _1312 = fma(_1285, cbSceneParam._m0[91u].z, fma(_1284, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1283));
    float _1327 = _583 * 0.5;
    float _1328 = _584 * 0.5;
    float _1329 = _585 * 0.5;
    float _1330 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1333 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1336 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1370;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1343 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_949, _953, _956, _959));
        float _1347 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_951, _954, _957, _960));
        float _1351 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_952, _955, _958, _961));
        float _1358 = dot(vec4(cbModelParam._m0[39u]), vec4(_1327, _1328, _1329, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1381;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1372 = dot(vec4(cbModelParam._m0[40u]), vec4(_1327, _1328, _1329, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1385 = (_1381 * cbModelParam._m0[1u].x) + (_1370 * (1.0 - cbModelParam._m0[1u].x));
    float _1395 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _409);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1395 : min(cbModelParam._m0[25u].z, _1395));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1445 = fma(_647, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639)) + cbModelParam._m0[13u].w;
        float _1449 = fma(_647, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639)) + cbModelParam._m0[14u].w;
        float _1453 = fma(_647, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639)) + cbModelParam._m0[15u].w;
        float _1456 = fma(_585, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _583));
        float _1459 = fma(_585, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _583));
        float _1462 = fma(_585, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _583));
        float _1490;
        if (_1456 > 0.0)
        {
            _1490 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1490 = frontier_phi_16_14_ladder;
        }
        float _1666;
        if (_1459 > 0.0)
        {
            _1666 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1666 = frontier_phi_25_21_ladder;
        }
        float _1961;
        if (_1462 > 0.0)
        {
            _1961 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1961 = frontier_phi_37_32_ladder;
        }
        float _1963 = isnan(_1666) ? _1490 : (isnan(_1490) ? _1666 : min(_1490, _1666));
        float _1964 = isnan(_1961) ? _1963 : (isnan(_1963) ? _1961 : min(_1963, _1961));
        float _1968 = (_1964 * _1456) + _1445;
        float _1969 = (_1964 * _1459) + _1449;
        float _1970 = (_1964 * _1462) + _1453;
        float _1971 = _1964 * 9.9999997473787516355514526367188e-05;
        float _1973 = (-1.0) - _1971;
        float _1975 = _1971 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1970 > _1975) || ((_1970 < _1973) || ((_1969 > _1975) || ((_1969 < _1973) || ((_1968 < _1973) || (_1968 > _1975))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1970, cbModelParam._m0[9u].z, fma(_1969, cbModelParam._m0[9u].y, _1968 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1970, cbModelParam._m0[10u].z, fma(_1969, cbModelParam._m0[10u].y, _1968 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1970, cbModelParam._m0[11u].z, fma(_1969, cbModelParam._m0[11u].y, _1968 * cbModelParam._m0[11u].x))), _1396);
            frontier_phi_15_37_ladder = _2115.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2115.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2115.z * cbModelParam._m0[1u].y;
        }
        _1478 = frontier_phi_15_37_ladder_1;
        _1480 = frontier_phi_15_37_ladder;
        _1482 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_583, _584, _585), _1396);
        _1478 = _1466.x * cbModelParam._m0[1u].y;
        _1480 = _1466.y * cbModelParam._m0[1u].y;
        _1482 = _1466.z * cbModelParam._m0[1u].y;
    }
    float _1486 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _409);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1486 : min(cbModelParam._m0[25u].w, _1486));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_647, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_647, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_647, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_585, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _583));
        float _1558 = fma(_585, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _583));
        float _1561 = fma(_585, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _583));
        float _1671;
        if (_1555 > 0.0)
        {
            _1671 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1671 = frontier_phi_27_23_ladder;
        }
        float _1988;
        if (_1558 > 0.0)
        {
            _1988 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1988 = frontier_phi_39_34_ladder;
        }
        float _2326;
        if (_1561 > 0.0)
        {
            _2326 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2326 = frontier_phi_49_46_ladder;
        }
        float _2328 = isnan(_1988) ? _1671 : (isnan(_1671) ? _1988 : min(_1671, _1988));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1555) + _1544;
        float _2334 = (_2329 * _1558) + _1548;
        float _2335 = (_2329 * _1561) + _1552;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2336;
        float _2339 = _2336 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2335 > _2339) || ((_2335 < _2337) || ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 < _2337) || (_2333 > _2339))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2335, cbModelParam._m0[17u].z, fma(_2334, cbModelParam._m0[17u].y, _2333 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2335, cbModelParam._m0[18u].z, fma(_2334, cbModelParam._m0[18u].y, _2333 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2335, cbModelParam._m0[19u].z, fma(_2334, cbModelParam._m0[19u].y, _2333 * cbModelParam._m0[19u].x))), _1487);
            frontier_phi_24_49_ladder = _2457.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2457.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2457.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_24_49_ladder_2;
        _1582 = frontier_phi_24_49_ladder_1;
        _1584 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_583, _584, _585), _1487);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1597 = (((_610 * _560) + _611) * _575) * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1599 = (((_610 * _562) + _611) * _575) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1601 = (((_610 * _563) + _611) * _575) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1604 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    float _1645 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1649 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1653 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1657 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1658 = _1645 / _1657;
    float _1659 = _1649 / _1657;
    float _1660 = _1653 / _1657;
    float _1807;
    float _1808;
    float _1809;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1687 = ((uint(_1660 > cbSceneParam._m0[59u].y) + uint(_1660 > cbSceneParam._m0[59u].x)) + uint(_1660 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1688 = _1687 + 43u;
        uint _1696 = _1687 + 44u;
        uint _1704 = _1687 + 45u;
        uint _1712 = _1687 + 46u;
        float _1723 = fma(_1657, cbSceneParam._m0[_1688].w, fma(_1653, cbSceneParam._m0[_1688].z, fma(_1649, cbSceneParam._m0[_1688].y, _1645 * cbSceneParam._m0[_1688].x)));
        float _1727 = fma(_1657, cbSceneParam._m0[_1696].w, fma(_1653, cbSceneParam._m0[_1696].z, fma(_1649, cbSceneParam._m0[_1696].y, _1645 * cbSceneParam._m0[_1696].x)));
        float _1735 = fma(_1657, cbSceneParam._m0[_1712].w, fma(_1653, cbSceneParam._m0[_1712].z, fma(_1649, cbSceneParam._m0[_1712].y, _1645 * cbSceneParam._m0[_1712].x)));
        float _1740 = cbSceneParam._m0[33u].z * _1735;
        float _1742 = cbSceneParam._m0[33u].w * _1735;
        float _1745 = fma(_1657, cbSceneParam._m0[_1704].w, fma(_1653, cbSceneParam._m0[_1704].z, fma(_1649, cbSceneParam._m0[_1704].y, _1645 * cbSceneParam._m0[_1704].x))) / _1735;
        float _1793 = (cbSceneParam._m0[33u].x - sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660))) * cbSceneParam._m0[33u].y;
        float _4048 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1800 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 + _1723) / _1735, (_1742 + _1727) / _1735), _1745), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1742 + _1723) / _1735, (_1727 - _1740) / _1735), _1745), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 - _1740) / _1735, (_1727 - _1742) / _1735), _1745), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 - _1742) / _1735, (_1740 + _1727) / _1735), _1745), 0.0)).x), vec4(0.25)));
        _1807 = 1.0 - (_1800 * cbSceneParam._m0[34u].x);
        _1808 = 1.0 - (_1800 * cbSceneParam._m0[34u].y);
        _1809 = 1.0 - (_1800 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1807 = 1.0;
        _1808 = 1.0;
        _1809 = 1.0;
    }
    float _1873;
    float _1875;
    float _1877;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1861 = fma(_1657, cbSceneParam._m0[63u].w, fma(_1653, cbSceneParam._m0[63u].z, fma(_1649, cbSceneParam._m0[63u].y, _1645 * cbSceneParam._m0[63u].x)));
        float _1862 = fma(_1657, cbSceneParam._m0[60u].w, fma(_1653, cbSceneParam._m0[60u].z, fma(_1649, cbSceneParam._m0[60u].y, _1645 * cbSceneParam._m0[60u].x))) / _1861;
        float _1863 = fma(_1657, cbSceneParam._m0[61u].w, fma(_1653, cbSceneParam._m0[61u].z, fma(_1649, cbSceneParam._m0[61u].y, _1645 * cbSceneParam._m0[61u].x))) / _1861;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1862 >= cbSceneParam._m0[64u].x) && (_1863 >= cbSceneParam._m0[64u].y)) && (_1862 <= cbSceneParam._m0[64u].z)) && (_1863 <= cbSceneParam._m0[64u].w))
        {
            float _2001 = fma(_1657, cbSceneParam._m0[62u].w, fma(_1653, cbSceneParam._m0[62u].z, fma(_1649, cbSceneParam._m0[62u].y, _1645 * cbSceneParam._m0[62u].x))) / _1861;
            float _2005 = isnan(cbSceneParam._m0[41u].w) ? _2001 : (isnan(_2001) ? cbSceneParam._m0[41u].w : max(_2001, cbSceneParam._m0[41u].w));
            float _2048 = (cbSceneParam._m0[33u].x - sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660))) * cbSceneParam._m0[33u].y;
            float _4064 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
            float _2055 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1862, cbSceneParam._m0[33u].w + _1863), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1862, _1863 - cbSceneParam._m0[33u].z), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1862 - cbSceneParam._m0[33u].z, _1863 - cbSceneParam._m0[33u].w), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1862 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1863), _2005), 0.0)).x), vec4(0.25)));
            float _2059 = 1.0 - (_2055 * cbSceneParam._m0[34u].x);
            float _2060 = 1.0 - (_2055 * cbSceneParam._m0[34u].y);
            float _2061 = 1.0 - (_2055 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2060) ? _1808 : (isnan(_1808) ? _2060 : min(_1808, _2060));
            frontier_phi_36_35_ladder_1 = isnan(_2061) ? _1809 : (isnan(_1809) ? _2061 : min(_1809, _2061));
            frontier_phi_36_35_ladder_2 = isnan(_2059) ? _1807 : (isnan(_1807) ? _2059 : min(_1807, _2059));
        }
        else
        {
            frontier_phi_36_35_ladder = _1808;
            frontier_phi_36_35_ladder_1 = _1809;
            frontier_phi_36_35_ladder_2 = _1807;
        }
        _1873 = frontier_phi_36_35_ladder_2;
        _1875 = frontier_phi_36_35_ladder;
        _1877 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1873 = _1807;
        _1875 = _1808;
        _1877 = _1809;
    }
    uvec4 _1882 = floatBitsToUint(cbInstanceData._m0[_535 + 5u]);
    uint _1884 = _1882.x * 14u;
    uint _1885 = _1884 + 13u;
    float _1892 = _575 + (-1.0);
    float _1897 = (cbLight._m0[_1885].x * _1892) + 1.0;
    float _1898 = (cbLight._m0[_1885].y * _1892) + 1.0;
    float _1899 = (cbLight._m0[_1885].z * _1892) + 1.0;
    float _1900 = (cbLight._m0[_1885].w * _1892) + 1.0;
    uint _1901 = _1884 + 5u;
    float _1907 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
    uint _1911 = _1884 + 4u;
    float _1920 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1924 = _1884 | 1u;
    float _1935 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_406, _407, _408));
    float _1938 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_406, _407, _408));
    float _4100 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _4111 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1943 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.3183098733425140380859375;
    float _1945 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1952 = ((cbLight._m0[_1901].x * _1907) * _1945) + (((cbLight._m0[_1911].x * _1873) * _1920) * _1943);
    float _1953 = ((_1907 * cbLight._m0[_1901].y) * _1945) + (((cbLight._m0[_1911].y * _1875) * _1920) * _1943);
    float _1954 = ((_1907 * cbLight._m0[_1901].z) * _1945) + (((cbLight._m0[_1911].z * _1877) * _1920) * _1943);
    uvec4 _1958 = floatBitsToUint(cbLight._m0[_1884 + 12u]);
    bool _1960 = _1958.x == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_1960)
    {
        _2062 = _1952;
        _2064 = _1953;
        _2066 = _1954;
    }
    else
    {
        uint _2070 = _1884 + 6u;
        float _2086 = (dot(vec3(cbLight._m0[_1884 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _4122 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2089 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2062 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _1952;
        _2064 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _1953;
        _2066 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _1954;
    }
    bool _2069 = _1958.y == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2069)
    {
        _2124 = _2062;
        _2126 = _2064;
        _2128 = _2066;
    }
    else
    {
        uint _2297 = _1884 + 7u;
        float _2313 = (dot(vec3(cbLight._m0[_1884 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4138 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2316 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2124 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2062;
        _2126 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2064;
        _2128 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2066;
    }
    uint _2131 = _1884 + 8u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _409) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1884].x + _487;
    float _2147 = cbLight._m0[_1884].y + _488;
    float _2148 = cbLight._m0[_1884].z + _489;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1884].xyz));
    float _4154 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _2160 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2161 = dot(vec3(_406, _407, _408), vec3(_2153, _2154, _2155));
    float _4176 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_2153, _2154, _2155));
    float _4187 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2145 * _2145;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0);
    float _2182 = 0.959999978542327880859375 - _557;
    float _2184 = 0.959999978542327880859375 - _558;
    float _2185 = 0.959999978542327880859375 - _559;
    float _2192 = 1.0 - _2145;
    float _2203 = (0.5 / (((_2160 * ((_2159 * _2192) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2192) + _2145) * _2159))) * _2159;
    float _4198 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    uint _2219 = _1884 + 9u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _409) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_1924].x + _487;
    float _2233 = cbLight._m0[_1924].y + _488;
    float _2234 = cbLight._m0[_1924].z + _489;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1924].xyz));
    float _4209 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2246 = dot(vec3(_406, _407, _408), vec3(_2239, _2240, _2241));
    float _4220 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2250 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2239, _2240, _2241));
    float _4231 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = _2231 * _2231;
    float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
    float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0);
    float _2272 = 1.0 - _2231;
    float _2282 = (0.5 / (((_2160 * ((_2245 * _2272) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2272) + _2231) * _2245))) * _2245;
    float _4242 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
    float _2294 = (((((_2265 * _2182) + _560) * cbLight._m0[_2219].x) * _2284) * _1907) + ((((cbLight._m0[_2131].x * _1873) * ((_2181 * _2182) + _560)) * _2205) * _1920);
    float _2295 = (((((_2265 * _2184) + _562) * cbLight._m0[_2219].y) * _2284) * _1907) + ((((cbLight._m0[_2131].y * _1875) * ((_2181 * _2184) + _562)) * _2205) * _1920);
    float _2296 = (((((_2265 * _2185) + _563) * cbLight._m0[_2219].z) * _2284) * _1907) + ((((cbLight._m0[_2131].z * _1877) * ((_2181 * _2185) + _563)) * _2205) * _1920);
    float _2352;
    float _2354;
    float _2356;
    if (_1960)
    {
        _2352 = _2294;
        _2354 = _2295;
        _2356 = _2296;
    }
    else
    {
        uint _2358 = _1884 + 2u;
        uint _2362 = _1884 + 10u;
        float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _409) * 0.949999988079071044921875);
        float _2377 = _2376 * _2376;
        float _2378 = cbLight._m0[_2358].x + _487;
        float _2379 = cbLight._m0[_2358].y + _488;
        float _2380 = cbLight._m0[_2358].z + _489;
        float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
        float _2385 = _2384 * _2378;
        float _2386 = _2384 * _2379;
        float _2387 = _2384 * _2380;
        float _2388 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2358].xyz));
        float _4253 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2392 = dot(vec3(_406, _407, _408), vec3(_2385, _2386, _2387));
        float _4264 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2396 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2385, _2386, _2387));
        float _4275 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2400 = _2377 * _2377;
        float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
        float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
        float _2418 = 1.0 - _2377;
        float _2428 = (0.5 / (((_2160 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2418) + _2377) * _2391))) * _2391;
        float _4286 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2352 = (((((_2411 * _2182) + _560) * cbLight._m0[_2362].x) * _2430) * _2431) + _2294;
        _2354 = (((((_2411 * _2184) + _562) * cbLight._m0[_2362].y) * _2430) * _2431) + _2295;
        _2356 = (((((_2411 * _2185) + _563) * cbLight._m0[_2362].z) * _2430) * _2431) + _2296;
    }
    float _2462;
    float _2464;
    float _2466;
    if (_2069)
    {
        _2462 = _2352;
        _2464 = _2354;
        _2466 = _2356;
    }
    else
    {
        uint _2473 = _1884 + 3u;
        uint _2477 = _1884 + 11u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _409) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _487;
        float _2494 = cbLight._m0[_2473].y + _488;
        float _2495 = cbLight._m0[_2473].z + _489;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2473].xyz));
        float _4302 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2507 = dot(vec3(_406, _407, _408), vec3(_2500, _2501, _2502));
        float _4313 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4324 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2160 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2533) + _2492) * _2506))) * _2506;
        float _4335 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2462 = (((((_2526 * _2182) + _560) * cbLight._m0[_2477].x) * _2545) * _2546) + _2352;
        _2464 = (((((_2526 * _2184) + _562) * cbLight._m0[_2477].y) * _2545) * _2546) + _2354;
        _2466 = (((((_2526 * _2185) + _563) * cbLight._m0[_2477].z) * _2545) * _2546) + _2356;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1882.y == 0u)
    {
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.x;
        uint _2579 = uint((float(_2567.y) * floor(float(uint(cbSceneParam._m0[85u].y * _496) / _2568))) + floor(float(uint(cbSceneParam._m0[85u].x * _495) / _2568)));
        float _2589 = (log2(_1660 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2590 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        uint _2593 = uint(isnan(14.0) ? _2590 : (isnan(_2590) ? 14.0 : min(_2590, 14.0)));
        uvec4 _2598 = texelFetch(g_lightClusterGridBuffer, int(((_2593 << 2u) + (_2579 << 6u)) >> 2u));
        uint _2599 = _2598.x;
        uint _2600 = _2567.z;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((((1u << ((_2600 >> 4u) & 15u)) + 4294967295u) & _2599) == 0u) || ((_2600 & 240u) == 0u))
        {
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
        }
        else
        {
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            uint _2828 = 0u;
            uint _2837;
            bool _2838;
            for (;;)
            {
                _2837 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                _2838 = _2837 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2838)
                {
                    frontier_phi_68_pred = _2827;
                    frontier_phi_68_pred_1 = _2826;
                    frontier_phi_68_pred_2 = _2825;
                    frontier_phi_68_pred_3 = _2823;
                    frontier_phi_68_pred_4 = _2822;
                    frontier_phi_68_pred_5 = _2824;
                }
                else
                {
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    uint _2952;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2837;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    for (;;)
                    {
                        uint _2956 = uint(findLSB(_2952)) + (_2828 << 5u);
                        uint _2953 = (_2952 + 4294967295u) & _2952;
                        uint _2958 = _2956 * 48u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2978 = (_2956 * 48u) + 4u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2997 = (_2956 * 48u) + 8u;
                        vec3 _3008 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x));
                        float _3012 = _2972.x - _1658;
                        float _3013 = _2972.y - _1659;
                        float _3014 = _2972.z - _1660;
                        float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                        float _3018 = inversesqrt(_3015);
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3022 = dot(vec3(_516, _519, _522), vec3(_3019, _3020, _3021));
                        float _3027 = 1.0 - (_3015 * _2972.w);
                        float _4361 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3029 = sqrt(_3015) * _2991.w;
                        float _3032 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _3022) + _3033;
                        float _3039 = _3029 * _3029;
                        float _3043 = ((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3028) / ((_3039 * 0.699999988079071044921875) + 1.0);
                        float _3047 = (-0.0) - _1658;
                        float _3048 = (-0.0) - _1659;
                        float _3049 = (-0.0) - _1660;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3063 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                        float _3064 = 1.0 - _591;
                        float _3071 = sqrt(1.0 - ((1.0 - (_3064 * _3064)) * (1.0 - (_3063 * _3063))));
                        float _3072 = _3071 * _3071;
                        float _3073 = _3072 * _3072;
                        float _3074 = _3054 + _3019;
                        float _3075 = _3055 + _3020;
                        float _3076 = _3056 + _3021;
                        float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                        float _3084 = dot(vec3(_516, _519, _522), vec3(_3054, _3055, _3056));
                        float _4377 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3087 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3088 = dot(vec3(_516, _519, _522), vec3(_3080 * _3074, _3080 * _3075, _3080 * _3076));
                        float _4388 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3095 = ((_3091 * _3091) * (_3073 + (-1.0))) + 1.0;
                        float _3096 = _3032 * _3072;
                        float _3097 = _3096 * _3096;
                        float _3100 = ((1.0 - _3097) * _3022) + _3097;
                        float _4399 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3101 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3102 = 1.0 - _3072;
                        float _3112 = (0.5 / (((_3101 * ((_3087 * _3102) + _3072)) + 9.9999999392252902907785028219223e-09) + (((_3101 * _3102) + _3072) * _3087))) * _3101;
                        float _4410 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3123 = (((_3073 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3095 * _3095) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125))) * _3028;
                        _2881 = (_3043 * _2991.x) + _2949;
                        _2882 = (_3043 * _2991.y) + _2950;
                        _2883 = (_3043 * _2991.z) + _2951;
                        _2878 = (_3123 * _3008.x) + _2946;
                        _2879 = (_3123 * _3008.y) + _2947;
                        _2880 = (_3123 * _3008.z) + _2948;
                        if (_2953 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2953;
                        }
                    }
                    frontier_phi_68_pred = _2883;
                    frontier_phi_68_pred_1 = _2882;
                    frontier_phi_68_pred_2 = _2881;
                    frontier_phi_68_pred_3 = _2879;
                    frontier_phi_68_pred_4 = _2878;
                    frontier_phi_68_pred_5 = _2880;
                }
                _2689 = frontier_phi_68_pred;
                _2687 = frontier_phi_68_pred_1;
                _2685 = frontier_phi_68_pred_2;
                _2681 = frontier_phi_68_pred_3;
                _2679 = frontier_phi_68_pred_4;
                _2683 = frontier_phi_68_pred_5;
                uint _2829 = _2828 + 1u;
                if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2822 = _2679;
                    _2823 = _2681;
                    _2824 = _2683;
                    _2825 = _2685;
                    _2826 = _2687;
                    _2827 = _2689;
                    _2828 = _2829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
        }
        uvec4 _2692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2693 = _2692.z;
        uint _2695 = (_2693 >> 8u) & 15u;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((4294967295u << _2695) & _2599) == 0u)
        {
            _2790 = _2678;
            _2792 = _2680;
            _2794 = _2682;
            _2796 = _2684;
            _2798 = _2686;
            _2800 = _2688;
        }
        else
        {
            float _2815 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
            float _2816 = _2815 * _1658;
            float _2817 = _2815 * _1659;
            float _2818 = _2815 * _1660;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2695 < ((_2693 >> 12u) & 15u))
            {
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2929 = _2678;
                float _2930 = _2680;
                float _2931 = _2682;
                float _2932 = _2684;
                float _2933 = _2686;
                float _2934 = _2688;
                uint _2935 = _2695;
                uint _2944;
                bool _2945;
                for (;;)
                {
                    _2944 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                    _2945 = _2944 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2945)
                    {
                        frontier_phi_74_pred = _2931;
                        frontier_phi_74_pred_1 = _2930;
                        frontier_phi_74_pred_2 = _2929;
                        frontier_phi_74_pred_3 = _2934;
                        frontier_phi_74_pred_4 = _2933;
                        frontier_phi_74_pred_5 = _2932;
                    }
                    else
                    {
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3141 = _2929;
                        float _3142 = _2930;
                        float _3143 = _2931;
                        float _3144 = _2932;
                        float _3145 = _2933;
                        float _3146 = _2934;
                        uint _3147 = _2944;
                        uint _3148;
                        vec4 _3173;
                        float _3174;
                        vec4 _3189;
                        vec3 _3201;
                        vec4 _3217;
                        vec4 _3233;
                        float _3280;
                        bool _3281;
                        for (;;)
                        {
                            uint _3158 = ((_2935 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3147));
                            _3148 = (_3147 + 4294967295u) & _3147;
                            uint _3160 = _3158 * 40u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3174 = _3173.w;
                            uint _3176 = (_3158 * 40u) + 4u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3158 * 40u) + 8u;
                            _3201 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x));
                            uint _3204 = (_3158 * 40u) + 16u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3220 = (_3158 * 40u) + 20u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3236 = (_3158 * 40u) + 24u;
                            vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3255 = (_3158 * 40u) + 28u;
                            vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            _3280 = fma(_1660, _3268.z, fma(_1659, _3268.y, _3268.x * _1658)) + _3268.w;
                            _3281 = !((fma(_1660, _3249.z, fma(_1659, _3249.y, _3249.x * _1658)) + _3249.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3281)
                            {
                                float _3308 = _3173.x - _1658;
                                float _3309 = _3173.y - _1659;
                                float _3310 = _3173.z - _1660;
                                float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                                float _3314 = inversesqrt(_3311);
                                float _3315 = _3314 * _3308;
                                float _3316 = _3314 * _3309;
                                float _3317 = _3314 * _3310;
                                float _3321 = 1.0 - (_3311 / (_3174 * _3174));
                                float _4421 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3326 = sqrt(_3311) * _3189.w;
                                float _3328 = 1.39999997615814208984375 / (_3326 + 1.39999997615814208984375);
                                float _3329 = _3328 * _3328;
                                float _3332 = ((1.0 - _3329) * dot(vec3(_3315, _3316, _3317), vec3(_516, _519, _522))) + _3329;
                                float _3335 = _3326 * _3326;
                                float _3339 = (fma(_1660, _3217.z, fma(_1659, _3217.y, _3217.x * _1658)) + _3217.w) / _3280;
                                float _3340 = (fma(_1660, _3233.z, fma(_1659, _3233.y, _3233.x * _1658)) + _3233.w) / _3280;
                                float _3344 = 1.0 - dot(vec2(_3339, _3340), vec2(_3339, _3340));
                                float _4437 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3346 = _3345 * (((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3322) / ((_3335 * 0.699999988079071044921875) + 1.0));
                                float _3358 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                                float _3359 = 1.0 - _591;
                                float _3366 = sqrt(1.0 - ((1.0 - (_3359 * _3359)) * (1.0 - (_3358 * _3358))));
                                float _3367 = _3366 * _3366;
                                float _3368 = _3367 * _3367;
                                float _3369 = _3315 - _2816;
                                float _3370 = _3316 - _2817;
                                float _3371 = _3317 - _2818;
                                float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                                float _3379 = dot(vec3(_516, _519, _522), vec3((-0.0) - _2816, (-0.0) - _2817, (-0.0) - _2818));
                                float _4448 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3383 = dot(vec3(_516, _519, _522), vec3(_3375 * _3369, _3375 * _3370, _3375 * _3371));
                                float _4459 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3386 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3390 = ((_3386 * _3386) * (_3368 + (-1.0))) + 1.0;
                                float _3391 = _3328 * _3367;
                                float _3392 = _3391 * _3391;
                                float _3398 = ((1.0 - _3392) * dot(vec3(_516, _519, _522), vec3(_3315, _3316, _3317))) + _3392;
                                float _4470 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3400 = 1.0 - _3367;
                                float _3410 = (0.5 / (((_3399 * ((_3382 * _3400) + _3367)) + 9.9999999392252902907785028219223e-09) + (((_3399 * _3400) + _3367) * _3382))) * _3399;
                                float _4481 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3420 = (_3345 * _3322) * (((_3368 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3390 * _3390) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3420 * _3201.z;
                                frontier_phi_80_pred_1 = _3420 * _3201.y;
                                frontier_phi_80_pred_2 = _3420 * _3201.x;
                                frontier_phi_80_pred_3 = _3346 * _3189.z;
                                frontier_phi_80_pred_4 = _3346 * _3189.y;
                                frontier_phi_80_pred_5 = _3346 * _3189.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3426 = frontier_phi_80_pred;
                            _3425 = frontier_phi_80_pred_1;
                            _3424 = frontier_phi_80_pred_2;
                            _3429 = frontier_phi_80_pred_3;
                            _3428 = frontier_phi_80_pred_4;
                            _3427 = frontier_phi_80_pred_5;
                            _3131 = _3427 + _3144;
                            _3132 = _3428 + _3145;
                            _3133 = _3429 + _3146;
                            _3128 = _3424 + _3141;
                            _3129 = _3425 + _3142;
                            _3130 = _3426 + _3143;
                            if (_3148 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3148;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3130;
                        frontier_phi_74_pred_1 = _3129;
                        frontier_phi_74_pred_2 = _3128;
                        frontier_phi_74_pred_3 = _3133;
                        frontier_phi_74_pred_4 = _3132;
                        frontier_phi_74_pred_5 = _3131;
                    }
                    _2795 = frontier_phi_74_pred;
                    _2793 = frontier_phi_74_pred_1;
                    _2791 = frontier_phi_74_pred_2;
                    _2801 = frontier_phi_74_pred_3;
                    _2799 = frontier_phi_74_pred_4;
                    _2797 = frontier_phi_74_pred_5;
                    uint _2936 = _2935 + 1u;
                    if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2929 = _2791;
                        _2930 = _2793;
                        _2931 = _2795;
                        _2932 = _2797;
                        _2933 = _2799;
                        _2934 = _2801;
                        _2935 = _2936;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2799;
                frontier_phi_62_63_ladder_1 = _2797;
                frontier_phi_62_63_ladder_2 = _2795;
                frontier_phi_62_63_ladder_3 = _2801;
                frontier_phi_62_63_ladder_4 = _2793;
                frontier_phi_62_63_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_62_63_ladder = _2686;
                frontier_phi_62_63_ladder_1 = _2684;
                frontier_phi_62_63_ladder_2 = _2682;
                frontier_phi_62_63_ladder_3 = _2688;
                frontier_phi_62_63_ladder_4 = _2680;
                frontier_phi_62_63_ladder_5 = _2678;
            }
            _2790 = frontier_phi_62_63_ladder_5;
            _2792 = frontier_phi_62_63_ladder_4;
            _2794 = frontier_phi_62_63_ladder_2;
            _2796 = frontier_phi_62_63_ladder_1;
            _2798 = frontier_phi_62_63_ladder;
            _2800 = frontier_phi_62_63_ladder_3;
        }
        float _2805 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
        _2611 = (_2805 * _2796) + _2124;
        _2613 = (_2805 * _2798) + _2126;
        _2615 = (_2805 * _2800) + _2128;
        _2617 = ((_2790 * _560) * _2805) + _2462;
        _2619 = ((_2792 * _562) * _2805) + _2464;
        _2621 = ((_2794 * _563) * _2805) + _2466;
    }
    else
    {
        _2611 = _2124;
        _2613 = _2126;
        _2615 = _2128;
        _2617 = _2462;
        _2619 = _2464;
        _2621 = _2466;
    }
    float _4497 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4508 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4519 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    uint _2641 = _535 + 6u;
    float _2649 = _495 / cbSceneParam._m0[86u].x;
    float _2650 = _496 / cbSceneParam._m0[86u].y;
    vec4 _2664 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, (log2((isnan(cbSceneParam._m0[77u].w) ? _429 : (isnan(_429) ? cbSceneParam._m0[77u].w : min(_429, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2666 = _2664.x;
    float _2667 = _2664.y;
    float _2668 = _2664.z;
    float _2669 = _2664.w;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_429 > cbSceneParam._m0[78u].w)
    {
        float _2703 = isnan(_429) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _429 : min(cbSceneParam._m0[80u].w, _429));
        float _2704 = _2703 / _429;
        float _2715 = _2704 * _480;
        float _2716 = _481 * _2704;
        float _2717 = (-0.0) - _2716;
        float _2718 = _2704 * _482;
        float _2720 = (cbSceneParam._m0[77u].w * _2717) / _2703;
        float _2721 = _2720 + cbSceneParam._m0[79u].w;
        float _2722 = cbSceneParam._m0[79u].w - _2716;
        float _2728 = sqrt(((_2715 * _2715) + (_2716 * _2716)) + (_2718 * _2718));
        float _2731 = (1.0 - (cbSceneParam._m0[77u].w / _2703)) * _2728;
        float _2736 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2738 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2891;
        if (abs((_2717 - _2720) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2891 = ((((_2721 > 0.0) ? exp2(_2736 * _2721) : (2.0 - exp2(_2738 * _2721))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2731;
        }
        else
        {
            float _2851 = 1.0 / cbSceneParam._m0[80u].x;
            float _2852 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : max(_2721, _2722));
            float _2853 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : min(_2721, _2722));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            _2891 = ((abs(_2728 / _2717) * cbSceneParam._m0[80u].y) * ((((_2862 - _2863) * 2.0) - ((exp2(_2736 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)))) - exp2(_2736 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))))) * _2851)) - ((exp2(_2738 * _2862) - exp2(_2738 * _2863)) * _2851))) + (_2731 * cbSceneParam._m0[80u].z);
        }
        vec4 _2893 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, 1.0), 0.0);
        float _2902 = exp2((_2891 * (-1.44269502162933349609375)) * (1.0 - _2893.w));
        float _2903 = log2(_2902);
        float _2919 = log2(_2669);
        _2740 = (exp2(_2919 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2903 * cbSceneParam._m0[78u].x)) * _2893.x) / cbSceneParam._m0[78u].x)) + _2666;
        _2742 = (exp2(_2919 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2903 * cbSceneParam._m0[78u].y)) * _2893.y) / cbSceneParam._m0[78u].y)) + _2667;
        _2744 = (exp2(_2919 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2903 * cbSceneParam._m0[78u].z)) * _2893.z) / cbSceneParam._m0[78u].z)) + _2668;
        _2746 = _2902 * _2669;
    }
    else
    {
        _2740 = _2666;
        _2742 = _2667;
        _2744 = _2668;
        _2746 = _2669;
    }
    float _2758 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2759 = _2758 == 3.0;
    float _2760 = log2(_2746);
    float _2767 = exp2(_2760 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2611 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _575))) + ((_2617 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2768 = exp2(_2760 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2613 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _575))) + ((_2619 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2769 = exp2(_2760 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2615 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _575))) + ((_2621 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2778 = (_2758 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2778 * (_2759 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2740)));
    SV_Target.y = _2778 * (_2759 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2742)));
    SV_Target.z = _2778 * (_2759 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.w = cbInstanceData._m0[_2641].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2641].w;
}


