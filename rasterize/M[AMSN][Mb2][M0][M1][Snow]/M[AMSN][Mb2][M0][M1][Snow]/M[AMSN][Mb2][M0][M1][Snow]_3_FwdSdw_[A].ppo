#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1109;
float _3781;
float _3782;
float _3783;
float _3784;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _254.x;
    float _258 = _254.y;
    float _259 = _254.z;
    vec4 _291 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _304 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3793 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _314 = ((_291.z - _259) * _305) + _259;
    float _318 = ((((_291.x - _257) * _305) + _257) * 2.0) + (-1.0);
    float _320 = ((((_291.y - _258) * _305) + _258) * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3804 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))));
    float _329 = fma(_326, _238, fma(_320, _231, _318 * _217));
    float _332 = fma(_326, _239, fma(_320, _232, _318 * _218));
    float _335 = fma(_326, _240, fma(_320, _233, _318 * _219));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    float _353 = cbMtdParam._m0[11u].z + dot(vec4(_339 * _329, _339 * _332, _339 * _335, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3815 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    vec4 _372 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _377 = _372.x * cbMtdParam._m0[9u].x;
    float _378 = _372.y * cbMtdParam._m0[9u].y;
    float _379 = _372.z * cbMtdParam._m0[9u].z;
    vec4 _398 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _412 = (((_398.x * cbMtdParam._m0[10u].x) - _377) * _305) + _377;
    float _413 = (((_398.y * cbMtdParam._m0[10u].y) - _378) * _305) + _378;
    float _414 = (((_398.z * cbMtdParam._m0[10u].z) - _379) * _305) + _379;
    vec4 _427 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _438 = ((_427.x - _412) * _354) + _412;
    float _439 = ((_427.y - _413) * _354) + _413;
    float _440 = ((_427.z - _414) * _354) + _414;
    vec4 _453 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _455 = _453.x;
    float _473 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _455) * _305) + _455;
    float _475 = _473 - (_473 * _354);
    vec4 _488 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _495 = (_488.x * 2.0) + (-1.0);
    float _496 = (_488.y * 2.0) + (-1.0);
    float _497 = dot(vec2(_495, _496), vec2(_495, _496));
    float _3826 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _505 = ((_488.z - _314) * _354) + _314;
    float _512 = ((_495 - _318) * _354) + _318;
    float _513 = ((_496 - _320) * _354) + _320;
    float _514 = ((sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) - _326) * _354) + _326;
    float _517 = fma(_514, _238, fma(_513, _231, _512 * _217));
    float _520 = fma(_514, _239, fma(_513, _232, _512 * _218));
    float _523 = fma(_514, _240, fma(_513, _233, _512 * _219));
    float _527 = inversesqrt(dot(vec3(_517, _520, _523), vec3(_517, _520, _523)));
    float _528 = _527 * _517;
    float _529 = _527 * _520;
    float _530 = _527 * _523;
    float _3837 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _531 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3859 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3870 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3881 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _535 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _601 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _591);
    float _602 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _591);
    float _603 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _591);
    float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
    float _608 = _601 * _607;
    float _609 = _602 * _607;
    float _610 = _603 * _607;
    vec4 _615 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _617 = _615.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _789 = sqrt(((_601 * _601) + (_602 * _602)) + (_603 * _603));
        float _795 = (cbMatDynParam._m0[5u].x * _789) + cbMatDynParam._m0[5u].y;
        float _3892 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _800 = (cbMatDynParam._m0[5u].z * _789) + cbMatDynParam._m0[5u].w;
        float _3903 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) - _796)) + _796) < ((_617 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _628 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _629 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _647 = fma(_530, cbSceneParam._m0[5u].z, fma(_529, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _528));
    float _650 = fma(_530, cbSceneParam._m0[6u].z, fma(_529, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _528));
    float _653 = fma(_530, cbSceneParam._m0[7u].z, fma(_529, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _528));
    uint _666 = uint(roundEven(NORMAL.w)) * 13u;
    uint _667 = _666 + 9u;
    uint _668 = _667 + uint(cbMatDynParam._m0[0u].w);
    float _674 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_668].x;
    float _675 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_668].y;
    float _676 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_668].z;
    float _3914 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _680 = 1.0 - _535;
    float _681 = _677 * _680;
    float _682 = _678 * _680;
    float _683 = _679 * _680;
    float _688 = (_677 + (-0.039999999105930328369140625)) * _535;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _535;
    float _690 = (_679 + (-0.039999999105930328369140625)) * _535;
    float _691 = _688 + 0.039999999105930328369140625;
    float _693 = _689 + 0.039999999105930328369140625;
    float _694 = _690 + 0.039999999105930328369140625;
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _628, cbSceneParam._m0[86u].y * _629));
    float _706 = _703.x * TEXCOORD_9.w;
    float _707 = dot(vec3(_528, _529, _530), vec3(_608, _609, _610));
    float _710 = _707 * 2.0;
    float _714 = (_710 * _528) - _608;
    float _715 = (_710 * _529) - _609;
    float _716 = (_710 * _530) - _610;
    float _720 = abs(dot(vec3(_608, _609, _610), vec3(_528, _529, _530)));
    float _3947 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _722 = sqrt(_531);
    float _735 = exp2((_722 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_722 * 3.0));
    float _741 = (1.0 - _735) * ((_722 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _742 = _735 * _722;
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1108;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = fma(_778, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770));
        float _837 = fma(_778, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770));
        float _841 = fma(_778, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770));
        float _866 = _770 + _528;
        float _867 = _774 + _529;
        float _868 = _778 + _530;
        float _878 = fma(_868, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866)) - _833;
        float _879 = fma(_868, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866)) - _837;
        float _880 = fma(_868, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866)) - _841;
        float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
        float _897 = ((_884 * _878) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_833 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_884 * _879) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_837 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_884 * _880) / cbModelParam._m0[34u].z) + ((((((_841 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        float _936 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_902.x + (-0.5));
        float _938 = _936 * (_902.y + (-0.5));
        float _939 = _936 * (_902.z + (-0.5));
        float _946 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_909.x + (-0.5));
        float _948 = _946 * (_909.y + (-0.5));
        float _949 = _946 * (_909.z + (-0.5));
        float _956 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_916.x + (-0.5));
        float _958 = _956 * (_916.y + (-0.5));
        float _959 = _956 * (_916.z + (-0.5));
        float _966 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_923.x + (-0.5));
        float _968 = _966 * (_923.y + (-0.5));
        float _969 = _966 * (_923.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _990 = (dot(vec3(_528, _529, _530), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _1000 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3995 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1002 + 1.0))) + _1007) * _970;
        float _1017 = _938 * 0.5;
        float _1018 = _948 * 0.5;
        float _1019 = _958 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_528, _529, _530), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _4028 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1044 + 1.0))) + _1049) * _971;
        float _1059 = _939 * 0.5;
        float _1060 = _949 * 0.5;
        float _1061 = _959 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_528, _529, _530), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _4061 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1086 + 1.0))) + _1091) * _972;
        _1108 = _939;
        _1110 = _938;
        _1111 = _937;
        _1112 = _949;
        _1113 = _948;
        _1114 = _947;
        _1115 = _959;
        _1116 = _958;
        _1117 = _957;
        _1118 = _972;
        _1119 = _971;
        _1120 = _970;
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _1109;
        _1110 = _1109;
        _1111 = _1109;
        _1112 = _1109;
        _1113 = _1109;
        _1114 = _1109;
        _1115 = _1109;
        _1116 = _1109;
        _1117 = _1109;
        _1118 = _1109;
        _1119 = _1109;
        _1120 = _1109;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_778, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770));
        float _1156 = fma(_778, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770));
        float _1160 = fma(_778, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770));
        float _1183 = _770 + _528;
        float _1184 = _774 + _529;
        float _1185 = _778 + _530;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_528, _529, _530), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4124 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_528, _529, _530), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4157 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_528, _529, _530), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4190 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1109;
        _1422 = _1109;
        _1423 = _1109;
        _1424 = _1109;
        _1425 = _1109;
        _1426 = _1109;
        _1427 = _1109;
        _1428 = _1109;
        _1429 = _1109;
        _1430 = _1109;
        _1431 = _1109;
        _1432 = _1109;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1121)) + _1121;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1123)) + _1123;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _714 * 0.5;
    float _1490 = _715 * 0.5;
    float _1491 = _716 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1108, _1112, _1115, _1118));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _531);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1607 = fma(_778, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770)) + cbModelParam._m0[13u].w;
        float _1611 = fma(_778, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770)) + cbModelParam._m0[14u].w;
        float _1615 = fma(_778, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770)) + cbModelParam._m0[15u].w;
        float _1618 = fma(_716, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _714));
        float _1621 = fma(_716, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _714));
        float _1624 = fma(_716, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _714));
        float _1652;
        if (_1618 > 0.0)
        {
            _1652 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1652 = frontier_phi_19_17_ladder;
        }
        float _1827;
        if (_1621 > 0.0)
        {
            _1827 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1827 = frontier_phi_28_24_ladder;
        }
        float _2122;
        if (_1624 > 0.0)
        {
            _2122 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2122 = frontier_phi_40_35_ladder;
        }
        float _2124 = isnan(_1827) ? _1652 : (isnan(_1652) ? _1827 : min(_1652, _1827));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1618) + _1607;
        float _2130 = (_2125 * _1621) + _1611;
        float _2131 = (_2125 * _1624) + _1615;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2132;
        float _2136 = _2132 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 > _2136) || ((_2130 < _2134) || ((_2129 < _2134) || (_2129 > _2136))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2131, cbModelParam._m0[9u].z, fma(_2130, cbModelParam._m0[9u].y, _2129 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2131, cbModelParam._m0[10u].z, fma(_2130, cbModelParam._m0[10u].y, _2129 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2131, cbModelParam._m0[11u].z, fma(_2130, cbModelParam._m0[11u].y, _2129 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_18_40_ladder = _2276.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2276.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2276.x * cbModelParam._m0[1u].y;
        }
        _1640 = frontier_phi_18_40_ladder_2;
        _1642 = frontier_phi_18_40_ladder_1;
        _1644 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_714, _715, _716), _1558);
        _1640 = _1628.x * cbModelParam._m0[1u].y;
        _1642 = _1628.y * cbModelParam._m0[1u].y;
        _1644 = _1628.z * cbModelParam._m0[1u].y;
    }
    float _1648 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _531);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1648 : min(cbModelParam._m0[25u].w, _1648));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1706 = fma(_778, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770)) + cbModelParam._m0[21u].w;
        float _1710 = fma(_778, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770)) + cbModelParam._m0[22u].w;
        float _1714 = fma(_778, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770)) + cbModelParam._m0[23u].w;
        float _1717 = fma(_716, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _714));
        float _1720 = fma(_716, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _714));
        float _1723 = fma(_716, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _714));
        float _1832;
        if (_1717 > 0.0)
        {
            _1832 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1832 = frontier_phi_30_26_ladder;
        }
        float _2149;
        if (_1720 > 0.0)
        {
            _2149 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2149 = frontier_phi_42_37_ladder;
        }
        float _2487;
        if (_1723 > 0.0)
        {
            _2487 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2487 = frontier_phi_52_49_ladder;
        }
        float _2489 = isnan(_2149) ? _1832 : (isnan(_1832) ? _2149 : min(_1832, _2149));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1717) + _1706;
        float _2495 = (_2490 * _1720) + _1710;
        float _2496 = (_2490 * _1723) + _1714;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2497;
        float _2500 = _2497 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2496 > _2500) || ((_2496 < _2498) || ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 < _2498) || (_2494 > _2500))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2496, cbModelParam._m0[17u].z, fma(_2495, cbModelParam._m0[17u].y, _2494 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2496, cbModelParam._m0[18u].z, fma(_2495, cbModelParam._m0[18u].y, _2494 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2496, cbModelParam._m0[19u].z, fma(_2495, cbModelParam._m0[19u].y, _2494 * cbModelParam._m0[19u].x))), _1649);
            frontier_phi_27_52_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1742 = frontier_phi_27_52_ladder_2;
        _1744 = frontier_phi_27_52_ladder_1;
        _1746 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_714, _715, _716), _1649);
        _1742 = _1726.x * cbModelParam._m0[1u].z;
        _1744 = _1726.y * cbModelParam._m0[1u].z;
        _1746 = _1726.z * cbModelParam._m0[1u].z;
    }
    float _1759 = (((_741 * _691) + _742) * _706) * ((cbModelParam._m0[1u].w * (_1742 - _1640)) + _1640);
    float _1761 = (((_741 * _693) + _742) * _706) * ((cbModelParam._m0[1u].w * (_1744 - _1642)) + _1642);
    float _1763 = (((_741 * _694) + _742) * _706) * ((cbModelParam._m0[1u].w * (_1746 - _1644)) + _1644);
    float _1766 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, _1759 * cbSceneParam._m0[91u].x));
    float _1806 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1810 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1819 = _1806 / _1818;
    float _1820 = _1810 / _1818;
    float _1821 = _1814 / _1818;
    float _1968;
    float _1969;
    float _1970;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1848 = ((uint(_1821 > cbSceneParam._m0[59u].y) + uint(_1821 > cbSceneParam._m0[59u].x)) + uint(_1821 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1849 = _1848 + 43u;
        uint _1857 = _1848 + 44u;
        uint _1865 = _1848 + 45u;
        uint _1873 = _1848 + 46u;
        float _1884 = fma(_1818, cbSceneParam._m0[_1849].w, fma(_1814, cbSceneParam._m0[_1849].z, fma(_1810, cbSceneParam._m0[_1849].y, _1806 * cbSceneParam._m0[_1849].x)));
        float _1888 = fma(_1818, cbSceneParam._m0[_1857].w, fma(_1814, cbSceneParam._m0[_1857].z, fma(_1810, cbSceneParam._m0[_1857].y, _1806 * cbSceneParam._m0[_1857].x)));
        float _1896 = fma(_1818, cbSceneParam._m0[_1873].w, fma(_1814, cbSceneParam._m0[_1873].z, fma(_1810, cbSceneParam._m0[_1873].y, _1806 * cbSceneParam._m0[_1873].x)));
        float _1901 = cbSceneParam._m0[33u].z * _1896;
        float _1903 = cbSceneParam._m0[33u].w * _1896;
        float _1906 = fma(_1818, cbSceneParam._m0[_1865].w, fma(_1814, cbSceneParam._m0[_1865].z, fma(_1810, cbSceneParam._m0[_1865].y, _1806 * cbSceneParam._m0[_1865].x))) / _1896;
        float _1954 = (cbSceneParam._m0[33u].x - sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821))) * cbSceneParam._m0[33u].y;
        float _4316 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1961 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 + _1884) / _1896, (_1903 + _1888) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 + _1884) / _1896, (_1888 - _1901) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 - _1901) / _1896, (_1888 - _1903) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 - _1903) / _1896, (_1901 + _1888) / _1896), _1906), 0.0)).x), vec4(0.25)));
        _1968 = 1.0 - (_1961 * cbSceneParam._m0[34u].x);
        _1969 = 1.0 - (_1961 * cbSceneParam._m0[34u].y);
        _1970 = 1.0 - (_1961 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1968 = 1.0;
        _1969 = 1.0;
        _1970 = 1.0;
    }
    float _2034;
    float _2036;
    float _2038;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2022 = fma(_1818, cbSceneParam._m0[63u].w, fma(_1814, cbSceneParam._m0[63u].z, fma(_1810, cbSceneParam._m0[63u].y, _1806 * cbSceneParam._m0[63u].x)));
        float _2023 = fma(_1818, cbSceneParam._m0[60u].w, fma(_1814, cbSceneParam._m0[60u].z, fma(_1810, cbSceneParam._m0[60u].y, _1806 * cbSceneParam._m0[60u].x))) / _2022;
        float _2024 = fma(_1818, cbSceneParam._m0[61u].w, fma(_1814, cbSceneParam._m0[61u].z, fma(_1810, cbSceneParam._m0[61u].y, _1806 * cbSceneParam._m0[61u].x))) / _2022;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2023 >= cbSceneParam._m0[64u].x) && (_2024 >= cbSceneParam._m0[64u].y)) && (_2023 <= cbSceneParam._m0[64u].z)) && (_2024 <= cbSceneParam._m0[64u].w))
        {
            float _2162 = fma(_1818, cbSceneParam._m0[62u].w, fma(_1814, cbSceneParam._m0[62u].z, fma(_1810, cbSceneParam._m0[62u].y, _1806 * cbSceneParam._m0[62u].x))) / _2022;
            float _2166 = isnan(cbSceneParam._m0[41u].w) ? _2162 : (isnan(_2162) ? cbSceneParam._m0[41u].w : max(_2162, cbSceneParam._m0[41u].w));
            float _2209 = (cbSceneParam._m0[33u].x - sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821))) * cbSceneParam._m0[33u].y;
            float _4332 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
            float _2216 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2023, cbSceneParam._m0[33u].w + _2024), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2023, _2024 - cbSceneParam._m0[33u].z), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2023 - cbSceneParam._m0[33u].z, _2024 - cbSceneParam._m0[33u].w), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2023 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2024), _2166), 0.0)).x), vec4(0.25)));
            float _2220 = 1.0 - (_2216 * cbSceneParam._m0[34u].x);
            float _2221 = 1.0 - (_2216 * cbSceneParam._m0[34u].y);
            float _2222 = 1.0 - (_2216 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2221) ? _1969 : (isnan(_1969) ? _2221 : min(_1969, _2221));
            frontier_phi_39_38_ladder_1 = isnan(_2220) ? _1968 : (isnan(_1968) ? _2220 : min(_1968, _2220));
            frontier_phi_39_38_ladder_2 = isnan(_2222) ? _1970 : (isnan(_1970) ? _2222 : min(_1970, _2222));
        }
        else
        {
            frontier_phi_39_38_ladder = _1969;
            frontier_phi_39_38_ladder_1 = _1968;
            frontier_phi_39_38_ladder_2 = _1970;
        }
        _2034 = frontier_phi_39_38_ladder_1;
        _2036 = frontier_phi_39_38_ladder;
        _2038 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2034 = _1968;
        _2036 = _1969;
        _2038 = _1970;
    }
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_666 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2053 = _706 + (-1.0);
    float _2058 = (cbLight._m0[_2046].x * _2053) + 1.0;
    float _2059 = (cbLight._m0[_2046].y * _2053) + 1.0;
    float _2060 = (cbLight._m0[_2046].z * _2053) + 1.0;
    float _2061 = (cbLight._m0[_2046].w * _2053) + 1.0;
    uint _2062 = _2045 + 5u;
    float _2068 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2072 = _2045 + 4u;
    float _2081 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2085 = _2045 | 1u;
    float _2096 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_528, _529, _530));
    float _2099 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_528, _529, _530));
    float _4368 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _4379 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2106 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2113 = ((cbLight._m0[_2062].x * _2068) * _2106) + (((cbLight._m0[_2072].x * _2034) * _2081) * _2104);
    float _2114 = ((_2068 * cbLight._m0[_2062].y) * _2106) + (((cbLight._m0[_2072].y * _2036) * _2081) * _2104);
    float _2115 = ((_2068 * cbLight._m0[_2062].z) * _2106) + (((cbLight._m0[_2072].z * _2038) * _2081) * _2104);
    uvec4 _2119 = floatBitsToUint(cbLight._m0[_2045 + 12u]);
    bool _2121 = _2119.x == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2121)
    {
        _2223 = _2113;
        _2225 = _2114;
        _2227 = _2115;
    }
    else
    {
        uint _2231 = _2045 + 6u;
        float _2247 = (dot(vec3(cbLight._m0[_2045 + 2u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4390 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2250 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2223 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _2113;
        _2225 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _2114;
        _2227 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2115;
    }
    bool _2230 = _2119.y == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2230)
    {
        _2285 = _2223;
        _2287 = _2225;
        _2289 = _2227;
    }
    else
    {
        uint _2458 = _2045 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2045 + 3u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4406 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2477 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2285 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2223;
        _2287 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2225;
        _2289 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2227;
    }
    uint _2292 = _2045 + 8u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _531) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2045].x + _608;
    float _2308 = cbLight._m0[_2045].y + _609;
    float _2309 = cbLight._m0[_2045].z + _610;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2045].xyz));
    float _4422 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _2321 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2322 = dot(vec3(_528, _529, _530), vec3(_2314, _2315, _2316));
    float _4444 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2314, _2315, _2316));
    float _4455 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2306 * _2306;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2343 = 0.959999978542327880859375 - _688;
    float _2345 = 0.959999978542327880859375 - _689;
    float _2346 = 0.959999978542327880859375 - _690;
    float _2353 = 1.0 - _2306;
    float _2364 = (0.5 / (((_2321 * ((_2320 * _2353) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2353) + _2306) * _2320))) * _2320;
    float _4466 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    uint _2380 = _2045 + 9u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _531) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2085].x + _608;
    float _2394 = cbLight._m0[_2085].y + _609;
    float _2395 = cbLight._m0[_2085].z + _610;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2085].xyz));
    float _4477 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2407 = dot(vec3(_528, _529, _530), vec3(_2400, _2401, _2402));
    float _4488 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2411 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2400, _2401, _2402));
    float _4499 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2415 = _2392 * _2392;
    float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
    float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2433 = 1.0 - _2392;
    float _2443 = (0.5 / (((_2321 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2433) + _2392) * _2406))) * _2406;
    float _4510 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
    float _2455 = (((((_2426 * _2343) + _691) * cbLight._m0[_2380].x) * _2445) * _2068) + ((((cbLight._m0[_2292].x * _2034) * ((_2342 * _2343) + _691)) * _2366) * _2081);
    float _2456 = (((((_2426 * _2345) + _693) * cbLight._m0[_2380].y) * _2445) * _2068) + ((((cbLight._m0[_2292].y * _2036) * ((_2342 * _2345) + _693)) * _2366) * _2081);
    float _2457 = (((((_2426 * _2346) + _694) * cbLight._m0[_2380].z) * _2445) * _2068) + ((((cbLight._m0[_2292].z * _2038) * ((_2342 * _2346) + _694)) * _2366) * _2081);
    float _2513;
    float _2515;
    float _2517;
    if (_2121)
    {
        _2513 = _2455;
        _2515 = _2456;
        _2517 = _2457;
    }
    else
    {
        uint _2519 = _2045 + 2u;
        uint _2523 = _2045 + 10u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _531) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _608;
        float _2540 = cbLight._m0[_2519].y + _609;
        float _2541 = cbLight._m0[_2519].z + _610;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2519].xyz));
        float _4521 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2553 = dot(vec3(_528, _529, _530), vec3(_2546, _2547, _2548));
        float _4532 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4543 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2579 = 1.0 - _2538;
        float _2589 = (0.5 / (((_2321 * ((_2552 * _2579) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2579) + _2538) * _2552))) * _2552;
        float _4554 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2513 = (((((_2572 * _2343) + _691) * cbLight._m0[_2523].x) * _2591) * _2592) + _2455;
        _2515 = (((((_2572 * _2345) + _693) * cbLight._m0[_2523].y) * _2591) * _2592) + _2456;
        _2517 = (((((_2572 * _2346) + _694) * cbLight._m0[_2523].z) * _2591) * _2592) + _2457;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2230)
    {
        _2623 = _2513;
        _2625 = _2515;
        _2627 = _2517;
    }
    else
    {
        uint _2634 = _2045 + 3u;
        uint _2638 = _2045 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _531) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _608;
        float _2655 = cbLight._m0[_2634].y + _609;
        float _2656 = cbLight._m0[_2634].z + _610;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2634].xyz));
        float _4570 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2668 = dot(vec3(_528, _529, _530), vec3(_2661, _2662, _2663));
        float _4581 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4592 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2694 = 1.0 - _2653;
        float _2704 = (0.5 / (((_2321 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2694) + _2653) * _2667))) * _2667;
        float _4603 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2623 = (((((_2687 * _2343) + _691) * cbLight._m0[_2638].x) * _2706) * _2707) + _2513;
        _2625 = (((((_2687 * _2345) + _693) * cbLight._m0[_2638].y) * _2706) * _2707) + _2515;
        _2627 = (((((_2687 * _2346) + _694) * cbLight._m0[_2638].z) * _2706) * _2707) + _2517;
    }
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_2043.y == 0u)
    {
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.x;
        uint _2740 = uint((float(_2728.y) * floor(float(uint(cbSceneParam._m0[85u].y * _629) / _2729))) + floor(float(uint(cbSceneParam._m0[85u].x * _628) / _2729)));
        float _2750 = (log2(_1821 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2751 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        uint _2754 = uint(isnan(14.0) ? _2751 : (isnan(_2751) ? 14.0 : min(_2751, 14.0)));
        uvec4 _2759 = texelFetch(g_lightClusterGridBuffer, int(((_2754 << 2u) + (_2740 << 6u)) >> 2u));
        uint _2760 = _2759.x;
        uint _2761 = _2728.z;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((((1u << ((_2761 >> 4u) & 15u)) + 4294967295u) & _2760) == 0u) || ((_2761 & 240u) == 0u))
        {
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
        }
        else
        {
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            uint _2997 = 0u;
            uint _3006;
            bool _3007;
            for (;;)
            {
                _3006 = texelFetch(g_lightClassification, int((((_2754 << 5u) + (_2740 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                _3007 = _3006 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3007)
                {
                    frontier_phi_73_pred = _2996;
                    frontier_phi_73_pred_1 = _2995;
                    frontier_phi_73_pred_2 = _2994;
                    frontier_phi_73_pred_3 = _2993;
                    frontier_phi_73_pred_4 = _2992;
                    frontier_phi_73_pred_5 = _2991;
                }
                else
                {
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    uint _3142;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _3006;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    for (;;)
                    {
                        uint _3146 = uint(findLSB(_3142)) + (_2997 << 5u);
                        uint _3143 = (_3142 + 4294967295u) & _3142;
                        uint _3148 = _3146 * 48u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3168 = (_3146 * 48u) + 4u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3187 = (_3146 * 48u) + 8u;
                        vec3 _3198 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x));
                        float _3202 = _3162.x - _1819;
                        float _3203 = _3162.y - _1820;
                        float _3204 = _3162.z - _1821;
                        float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                        float _3208 = inversesqrt(_3205);
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3212 = dot(vec3(_647, _650, _653), vec3(_3209, _3210, _3211));
                        float _3217 = 1.0 - (_3205 * _3162.w);
                        float _4629 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3219 = sqrt(_3205) * _3181.w;
                        float _3222 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3212) + _3223;
                        float _3229 = _3219 * _3219;
                        float _3233 = ((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3218) / ((_3229 * 0.699999988079071044921875) + 1.0);
                        float _3237 = (-0.0) - _1819;
                        float _3238 = (-0.0) - _1820;
                        float _3239 = (-0.0) - _1821;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3253 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                        float _3254 = 1.0 - _722;
                        float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                        float _3262 = _3261 * _3261;
                        float _3263 = _3262 * _3262;
                        float _3264 = _3244 + _3209;
                        float _3265 = _3245 + _3210;
                        float _3266 = _3246 + _3211;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3274 = dot(vec3(_647, _650, _653), vec3(_3244, _3245, _3246));
                        float _4645 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3278 = dot(vec3(_647, _650, _653), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                        float _4656 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                        float _3286 = _3222 * _3262;
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3212) + _3287;
                        float _4667 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3292 = 1.0 - _3262;
                        float _3302 = (0.5 / (((_3291 * ((_3277 * _3292) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3262) * _3277))) * _3291;
                        float _4678 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3313 = (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3285 * _3285) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125))) * _3218;
                        _3066 = (_3233 * _3181.x) + _3139;
                        _3067 = (_3233 * _3181.y) + _3140;
                        _3068 = (_3233 * _3181.z) + _3141;
                        _3063 = (_3313 * _3198.x) + _3136;
                        _3064 = (_3313 * _3198.y) + _3137;
                        _3065 = (_3313 * _3198.z) + _3138;
                        if (_3143 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3143;
                        }
                    }
                    frontier_phi_73_pred = _3068;
                    frontier_phi_73_pred_1 = _3067;
                    frontier_phi_73_pred_2 = _3066;
                    frontier_phi_73_pred_3 = _3065;
                    frontier_phi_73_pred_4 = _3064;
                    frontier_phi_73_pred_5 = _3063;
                }
                _2850 = frontier_phi_73_pred;
                _2848 = frontier_phi_73_pred_1;
                _2846 = frontier_phi_73_pred_2;
                _2844 = frontier_phi_73_pred_3;
                _2842 = frontier_phi_73_pred_4;
                _2840 = frontier_phi_73_pred_5;
                uint _2998 = _2997 + 1u;
                if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2991 = _2840;
                    _2992 = _2842;
                    _2993 = _2844;
                    _2994 = _2846;
                    _2995 = _2848;
                    _2996 = _2850;
                    _2997 = _2998;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
        }
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.z;
        uint _2856 = (_2854 >> 8u) & 15u;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((4294967295u << _2856) & _2760) == 0u)
        {
            _2959 = _2839;
            _2961 = _2841;
            _2963 = _2843;
            _2965 = _2845;
            _2967 = _2847;
            _2969 = _2849;
        }
        else
        {
            float _2984 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
            float _2985 = _2984 * _1819;
            float _2986 = _2984 * _1820;
            float _2987 = _2984 * _1821;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2856 < ((_2854 >> 12u) & 15u))
            {
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _3119 = _2839;
                float _3120 = _2841;
                float _3121 = _2843;
                float _3122 = _2845;
                float _3123 = _2847;
                float _3124 = _2849;
                uint _3125 = _2856;
                uint _3134;
                bool _3135;
                for (;;)
                {
                    _3134 = texelFetch(g_lightClassification, int((((_2754 << 5u) + (_2740 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                    _3135 = _3134 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3135)
                    {
                        frontier_phi_84_pred = _3123;
                        frontier_phi_84_pred_1 = _3122;
                        frontier_phi_84_pred_2 = _3121;
                        frontier_phi_84_pred_3 = _3120;
                        frontier_phi_84_pred_4 = _3119;
                        frontier_phi_84_pred_5 = _3124;
                    }
                    else
                    {
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3340 = _3119;
                        float _3341 = _3120;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        uint _3346 = _3134;
                        uint _3347;
                        vec4 _3372;
                        float _3373;
                        vec4 _3388;
                        vec3 _3400;
                        vec4 _3416;
                        vec4 _3432;
                        float _3479;
                        bool _3480;
                        for (;;)
                        {
                            uint _3357 = ((_3125 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3346));
                            _3347 = (_3346 + 4294967295u) & _3346;
                            uint _3359 = _3357 * 40u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3373 = _3372.w;
                            uint _3375 = (_3357 * 40u) + 4u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3357 * 40u) + 8u;
                            _3400 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x));
                            uint _3403 = (_3357 * 40u) + 16u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3419 = (_3357 * 40u) + 20u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3435 = (_3357 * 40u) + 24u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3454 = (_3357 * 40u) + 28u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3479 = fma(_1821, _3467.z, fma(_1820, _3467.y, _3467.x * _1819)) + _3467.w;
                            _3480 = !((fma(_1821, _3448.z, fma(_1820, _3448.y, _3448.x * _1819)) + _3448.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3480)
                            {
                                float _3507 = _3372.x - _1819;
                                float _3508 = _3372.y - _1820;
                                float _3509 = _3372.z - _1821;
                                float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                                float _3513 = inversesqrt(_3510);
                                float _3514 = _3513 * _3507;
                                float _3515 = _3513 * _3508;
                                float _3516 = _3513 * _3509;
                                float _3520 = 1.0 - (_3510 / (_3373 * _3373));
                                float _4689 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3525 = sqrt(_3510) * _3388.w;
                                float _3527 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                                float _3528 = _3527 * _3527;
                                float _3531 = ((1.0 - _3528) * dot(vec3(_3514, _3515, _3516), vec3(_647, _650, _653))) + _3528;
                                float _3534 = _3525 * _3525;
                                float _3538 = (fma(_1821, _3416.z, fma(_1820, _3416.y, _3416.x * _1819)) + _3416.w) / _3479;
                                float _3539 = (fma(_1821, _3432.z, fma(_1820, _3432.y, _3432.x * _1819)) + _3432.w) / _3479;
                                float _3543 = 1.0 - dot(vec2(_3538, _3539), vec2(_3538, _3539));
                                float _4705 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3545 = _3544 * (((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3521) / ((_3534 * 0.699999988079071044921875) + 1.0));
                                float _3557 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                                float _3558 = 1.0 - _722;
                                float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                                float _3566 = _3565 * _3565;
                                float _3567 = _3566 * _3566;
                                float _3568 = _3514 - _2985;
                                float _3569 = _3515 - _2986;
                                float _3570 = _3516 - _2987;
                                float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                                float _3578 = dot(vec3(_647, _650, _653), vec3((-0.0) - _2985, (-0.0) - _2986, (-0.0) - _2987));
                                float _4716 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3582 = dot(vec3(_647, _650, _653), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                                float _4727 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                                float _3590 = _3527 * _3566;
                                float _3591 = _3590 * _3590;
                                float _3597 = ((1.0 - _3591) * dot(vec3(_647, _650, _653), vec3(_3514, _3515, _3516))) + _3591;
                                float _4738 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3599 = 1.0 - _3566;
                                float _3609 = (0.5 / (((_3598 * ((_3581 * _3599) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3566) * _3581))) * _3598;
                                float _4749 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3619 = (_3544 * _3521) * (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3589 * _3589) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3545 * _3388.y;
                                frontier_phi_90_pred_1 = _3545 * _3388.x;
                                frontier_phi_90_pred_2 = _3619 * _3400.z;
                                frontier_phi_90_pred_3 = _3619 * _3400.y;
                                frontier_phi_90_pred_4 = _3619 * _3400.x;
                                frontier_phi_90_pred_5 = _3545 * _3388.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3627 = frontier_phi_90_pred;
                            _3626 = frontier_phi_90_pred_1;
                            _3625 = frontier_phi_90_pred_2;
                            _3624 = frontier_phi_90_pred_3;
                            _3623 = frontier_phi_90_pred_4;
                            _3628 = frontier_phi_90_pred_5;
                            _3330 = _3626 + _3343;
                            _3331 = _3627 + _3344;
                            _3332 = _3628 + _3345;
                            _3327 = _3623 + _3340;
                            _3328 = _3624 + _3341;
                            _3329 = _3625 + _3342;
                            if (_3347 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3347;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3331;
                        frontier_phi_84_pred_1 = _3330;
                        frontier_phi_84_pred_2 = _3329;
                        frontier_phi_84_pred_3 = _3328;
                        frontier_phi_84_pred_4 = _3327;
                        frontier_phi_84_pred_5 = _3332;
                    }
                    _2968 = frontier_phi_84_pred;
                    _2966 = frontier_phi_84_pred_1;
                    _2964 = frontier_phi_84_pred_2;
                    _2962 = frontier_phi_84_pred_3;
                    _2960 = frontier_phi_84_pred_4;
                    _2970 = frontier_phi_84_pred_5;
                    uint _3126 = _3125 + 1u;
                    if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3119 = _2960;
                        _3120 = _2962;
                        _3121 = _2964;
                        _3122 = _2966;
                        _3123 = _2968;
                        _3124 = _2970;
                        _3125 = _3126;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2970;
                frontier_phi_65_66_ladder_1 = _2966;
                frontier_phi_65_66_ladder_2 = _2968;
                frontier_phi_65_66_ladder_3 = _2962;
                frontier_phi_65_66_ladder_4 = _2960;
                frontier_phi_65_66_ladder_5 = _2964;
            }
            else
            {
                frontier_phi_65_66_ladder = _2849;
                frontier_phi_65_66_ladder_1 = _2845;
                frontier_phi_65_66_ladder_2 = _2847;
                frontier_phi_65_66_ladder_3 = _2841;
                frontier_phi_65_66_ladder_4 = _2839;
                frontier_phi_65_66_ladder_5 = _2843;
            }
            _2959 = frontier_phi_65_66_ladder_4;
            _2961 = frontier_phi_65_66_ladder_3;
            _2963 = frontier_phi_65_66_ladder_5;
            _2965 = frontier_phi_65_66_ladder_1;
            _2967 = frontier_phi_65_66_ladder_2;
            _2969 = frontier_phi_65_66_ladder;
        }
        float _2974 = isnan(1.0) ? _706 : (isnan(_706) ? 1.0 : min(_706, 1.0));
        _2772 = (_2974 * _2965) + _2285;
        _2774 = (_2974 * _2967) + _2287;
        _2776 = (_2974 * _2969) + _2289;
        _2778 = ((_2959 * _691) * _2974) + _2623;
        _2780 = ((_2961 * _693) * _2974) + _2625;
        _2782 = ((_2963 * _694) * _2974) + _2627;
    }
    else
    {
        _2772 = _2285;
        _2774 = _2287;
        _2776 = _2289;
        _2778 = _2623;
        _2780 = _2625;
        _2782 = _2627;
    }
    float _4765 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4776 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4787 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _2799 = ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2772 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _706))) + ((_2778 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1547)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2774 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _706))) + ((_2780 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1547)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2776 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _706))) + ((_2782 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1547)) * cbPerFrame._m0[3u].x);
    uint _2802 = _666 + 6u;
    float _2810 = _628 / cbSceneParam._m0[86u].x;
    float _2811 = _629 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2864 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2865 = _2864 / _551;
        float _2876 = _2865 * _601;
        float _2877 = _602 * _2865;
        float _2878 = (-0.0) - _2877;
        float _2879 = _2865 * _603;
        float _2881 = (cbSceneParam._m0[77u].w * _2878) / _2864;
        float _2882 = _2881 + cbSceneParam._m0[79u].w;
        float _2883 = cbSceneParam._m0[79u].w - _2877;
        float _2889 = sqrt(((_2876 * _2876) + (_2877 * _2877)) + (_2879 * _2879));
        float _2892 = (1.0 - (cbSceneParam._m0[77u].w / _2864)) * _2889;
        float _2897 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2899 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3076;
        if (abs((_2878 - _2881) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3076 = ((((_2882 > 0.0) ? exp2(_2897 * _2882) : (2.0 - exp2(_2899 * _2882))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2892;
        }
        else
        {
            float _3020 = 1.0 / cbSceneParam._m0[80u].x;
            float _3021 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : max(_2882, _2883));
            float _3022 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : min(_2882, _2883));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            _3076 = ((abs(_2889 / _2878) * cbSceneParam._m0[80u].y) * ((((_3031 - _3032) * 2.0) - ((exp2(_2897 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0)))) - exp2(_2897 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))))) * _3020)) - ((exp2(_2899 * _3031) - exp2(_2899 * _3032)) * _3020))) + (_2892 * cbSceneParam._m0[80u].z);
        }
        vec4 _3078 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3087 = exp2((_3076 * (-1.44269502162933349609375)) * (1.0 - _3078.w));
        float _3088 = log2(_3087);
        float _3104 = log2(_2830);
        _2901 = (exp2(_3104 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].x)) * _3078.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2903 = (exp2(_3104 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].y)) * _3078.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2905 = (exp2(_3104 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].z)) * _3078.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2907 = _3087 * _2830;
    }
    else
    {
        _2901 = _2827;
        _2903 = _2828;
        _2905 = _2829;
        _2907 = _2830;
    }
    bool _3114;
    vec4 _2917;
    vec4 _2939;
    float _2941;
    float _2945;
    float _2946;
    float _2947;
    float _2948;
    bool _2958;
    for (;;)
    {
        _2917 = cbMatDynParam._m0[0u];
        float _2919 = roundEven(_2917.y);
        bool _2920 = _2919 == 3.0;
        float _2921 = log2(_2907);
        float _2928 = exp2(_2921 * cbSceneParam._m0[78u].x) * _2799;
        float _2929 = exp2(_2921 * cbSceneParam._m0[78u].y) * _2800;
        float _2930 = exp2(_2921 * cbSceneParam._m0[78u].z) * _2801;
        float _2937 = _617 + (-0.5);
        _2939 = cbMtdParam._m0[1u];
        _2941 = _2939.y * _2937;
        float _2944 = (_2919 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2945 = _2944 * (_2920 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2901)));
        _2946 = _2944 * (_2920 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2903)));
        _2947 = _2944 * (_2920 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2905)));
        _2948 = _2937 * 0.999000012874603271484375;
        _2958 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2958)
        {
            if ((cbInstanceData._m0[_666 + 7u].x + _2948) < 0.5)
            {
                _3114 = true;
                break;
            }
        }
        uint _3055 = _667 + uint(_2917.w);
        if ((cbInstanceData._m0[_3055].w < 1.0) && ((cbInstanceData._m0[_3055].w + _2948) < 0.5))
        {
            _3114 = true;
            break;
        }
        if ((_2941 + 1.0) < _2939.x)
        {
            _3114 = true;
            break;
        }
        _3114 = false;
        break;
    }
    float _3318;
    if (_3114)
    {
        discard_state = true;
        _3318 = 0.0;
    }
    else
    {
        _3318 = cbInstanceData._m0[_2802].w;
    }
    SV_Target.x = _2945;
    SV_Target.y = _2946;
    SV_Target.z = _2947;
    SV_Target.w = _3318;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2802].w;
    discard_exit();
}


