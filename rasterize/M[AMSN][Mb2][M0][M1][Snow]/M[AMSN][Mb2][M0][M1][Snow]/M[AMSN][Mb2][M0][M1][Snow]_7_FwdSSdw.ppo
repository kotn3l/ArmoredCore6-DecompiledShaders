#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _948;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _242.x;
    float _246 = _242.y;
    float _247 = _242.z;
    vec4 _279 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _292 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3308 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _302 = ((_279.z - _247) * _293) + _247;
    float _306 = ((((_279.x - _245) * _293) + _245) * 2.0) + (-1.0);
    float _308 = ((((_279.y - _246) * _293) + _246) * 2.0) + (-1.0);
    float _309 = dot(vec2(_306, _308), vec2(_306, _308));
    float _3319 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _314 = sqrt(1.0 - (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))));
    vec4 _332 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _337 = _332.x * cbMtdParam._m0[9u].x;
    float _338 = _332.y * cbMtdParam._m0[9u].y;
    float _339 = _332.z * cbMtdParam._m0[9u].z;
    vec4 _358 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _372 = (((_358.x * cbMtdParam._m0[10u].x) - _337) * _293) + _337;
    float _373 = (((_358.y * cbMtdParam._m0[10u].y) - _338) * _293) + _338;
    float _374 = (((_358.z * cbMtdParam._m0[10u].z) - _339) * _293) + _339;
    float _390 = _293 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _393 = fma(_314, _226, fma(_308, _218 * TANGENT.x, (_204 * _196) * _306));
    float _396 = fma(_314, _227, fma(_308, _218 * TANGENT.y, (_204 * _197) * _306));
    float _399 = fma(_314, _228, fma(_308, _218 * TANGENT.z, (_204 * _198) * _306));
    float _403 = inversesqrt(dot(vec3(_393, _396, _399), vec3(_393, _396, _399)));
    float _404 = _403 * _393;
    float _405 = _403 * _396;
    float _406 = _403 * _399;
    float _3330 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _407 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3352 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3363 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3374 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _411 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _427 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _478 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _468);
    float _479 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _468);
    float _480 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _468);
    float _484 = inversesqrt(dot(vec3(_478, _479, _480), vec3(_478, _479, _480)));
    float _485 = _478 * _484;
    float _486 = _479 * _484;
    float _487 = _480 * _484;
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _514 = fma(_406, cbSceneParam._m0[5u].z, fma(_405, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _404));
    float _517 = fma(_406, cbSceneParam._m0[6u].z, fma(_405, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _404));
    float _520 = fma(_406, cbSceneParam._m0[7u].z, fma(_405, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _404));
    uint _533 = uint(roundEven(NORMAL.w)) * 13u;
    uint _535 = (_533 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _541 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_535].x;
    float _542 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) * cbInstanceData._m0[_535].y;
    float _543 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_535].z;
    float _3385 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _547 = 1.0 - _411;
    float _548 = _544 * _547;
    float _549 = _545 * _547;
    float _550 = _546 * _547;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _411;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _411;
    float _557 = (_546 + (-0.039999999105930328369140625)) * _411;
    float _558 = _555 + 0.039999999105930328369140625;
    float _560 = _556 + 0.039999999105930328369140625;
    float _561 = _557 + 0.039999999105930328369140625;
    vec4 _570 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _573 = _570.x * TEXCOORD_9.w;
    float _574 = dot(vec3(_404, _405, _406), vec3(_485, _486, _487));
    float _577 = _574 * 2.0;
    float _581 = (_577 * _404) - _485;
    float _582 = (_577 * _405) - _486;
    float _583 = (_577 * _406) - _487;
    float _587 = abs(dot(vec3(_485, _486, _487), vec3(_404, _405, _406)));
    float _3418 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _589 = sqrt(_407);
    float _602 = exp2((_589 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _608 = (1.0 - _602) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _609 = _602 * _589;
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _947;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_645, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637));
        float _676 = fma(_645, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637));
        float _680 = fma(_645, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637));
        float _705 = _637 + _404;
        float _706 = _641 + _405;
        float _707 = _645 + _406;
        float _717 = fma(_707, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705)) - _672;
        float _718 = fma(_707, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705)) - _676;
        float _719 = fma(_707, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705)) - _680;
        float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
        float _736 = ((_723 * _717) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_723 * _718) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_723 * _719) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _775 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_741.x + (-0.5));
        float _777 = _775 * (_741.y + (-0.5));
        float _778 = _775 * (_741.z + (-0.5));
        float _785 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_748.x + (-0.5));
        float _787 = _785 * (_748.y + (-0.5));
        float _788 = _785 * (_748.z + (-0.5));
        float _795 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_755.x + (-0.5));
        float _797 = _795 * (_755.y + (-0.5));
        float _798 = _795 * (_755.z + (-0.5));
        float _805 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_762.x + (-0.5));
        float _807 = _805 * (_762.y + (-0.5));
        float _808 = _805 * (_762.z + (-0.5));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = _776 * 0.5;
        float _813 = _786 * 0.5;
        float _814 = _796 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _829 = (dot(vec3(_404, _405, _406), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _839 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3466 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_841 + 1.0))) + _846) * _809;
        float _856 = _777 * 0.5;
        float _857 = _787 * 0.5;
        float _858 = _797 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_404, _405, _406), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3499 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_883 + 1.0))) + _888) * _810;
        float _898 = _778 * 0.5;
        float _899 = _788 * 0.5;
        float _900 = _798 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_404, _405, _406), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3532 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_925 + 1.0))) + _930) * _811;
        _947 = _778;
        _949 = _777;
        _950 = _776;
        _951 = _788;
        _952 = _787;
        _953 = _786;
        _954 = _798;
        _955 = _797;
        _956 = _796;
        _957 = _811;
        _958 = _810;
        _959 = _809;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
    }
    else
    {
        _947 = _948;
        _949 = _948;
        _950 = _948;
        _951 = _948;
        _952 = _948;
        _953 = _948;
        _954 = _948;
        _955 = _948;
        _956 = _948;
        _957 = _948;
        _958 = _948;
        _959 = _948;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _988 = fma(_645, cbModelParam._m0[30u].z, fma(_641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _637));
        float _992 = fma(_645, cbModelParam._m0[31u].z, fma(_641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _637));
        float _996 = fma(_645, cbModelParam._m0[32u].z, fma(_641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _637));
        float _1019 = _637 + _404;
        float _1020 = _641 + _405;
        float _1021 = _645 + _406;
        float _1031 = fma(_1021, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019)) - _988;
        float _1032 = fma(_1021, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019)) - _992;
        float _1033 = fma(_1021, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019)) - _996;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_988 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_992 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[35u].z) + ((((((_996 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1087 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1054.x + (-0.5));
        float _1089 = _1087 * (_1054.y + (-0.5));
        float _1090 = _1087 * (_1054.z + (-0.5));
        float _1097 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1061.x + (-0.5));
        float _1099 = _1097 * (_1061.y + (-0.5));
        float _1100 = _1097 * (_1061.z + (-0.5));
        float _1107 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1068.x + (-0.5));
        float _1109 = _1107 * (_1068.y + (-0.5));
        float _1110 = _1107 * (_1068.z + (-0.5));
        float _1117 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1075.x + (-0.5));
        float _1119 = _1117 * (_1075.y + (-0.5));
        float _1120 = _1117 * (_1075.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_404, _405, _406), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3595 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1151 + 1.0))) + _1156) * _1121;
        float _1166 = _1089 * 0.5;
        float _1167 = _1099 * 0.5;
        float _1168 = _1109 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_404, _405, _406), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3628 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1193 + 1.0))) + _1198) * _1122;
        float _1208 = _1090 * 0.5;
        float _1209 = _1100 * 0.5;
        float _1210 = _1110 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_404, _405, _406), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3661 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1235 + 1.0))) + _1240) * _1123;
        _1257 = _1090;
        _1258 = _1089;
        _1259 = _1088;
        _1260 = _1100;
        _1261 = _1099;
        _1262 = _1098;
        _1263 = _1110;
        _1264 = _1109;
        _1265 = _1108;
        _1266 = _1123;
        _1267 = _1122;
        _1268 = _1121;
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _948;
        _1258 = _948;
        _1259 = _948;
        _1260 = _948;
        _1261 = _948;
        _1262 = _948;
        _1263 = _948;
        _1264 = _948;
        _1265 = _948;
        _1266 = _948;
        _1267 = _948;
        _1268 = _948;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _961)) + _961;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1304 = fma(_1283, cbSceneParam._m0[89u].z, fma(_1282, cbSceneParam._m0[89u].y, _1281 * cbSceneParam._m0[89u].x));
    float _1307 = fma(_1283, cbSceneParam._m0[90u].z, fma(_1282, cbSceneParam._m0[90u].y, _1281 * cbSceneParam._m0[90u].x));
    float _1310 = fma(_1283, cbSceneParam._m0[91u].z, fma(_1282, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1281));
    float _1325 = _581 * 0.5;
    float _1326 = _582 * 0.5;
    float _1327 = _583 * 0.5;
    float _1328 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1331 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1334 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1368;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1341 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_947, _951, _954, _957));
        float _1345 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_949, _952, _955, _958));
        float _1349 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_950, _953, _956, _959));
        float _1356 = dot(vec4(cbModelParam._m0[39u]), vec4(_1325, _1326, _1327, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1379;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1370 = dot(vec4(cbModelParam._m0[40u]), vec4(_1325, _1326, _1327, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1370) ? 0.0 : (isnan(0.0) ? _1370 : max(0.0, _1370))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1383 = (_1379 * cbModelParam._m0[1u].x) + (_1368 * (1.0 - cbModelParam._m0[1u].x));
    float _1393 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _407);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1393 : min(cbModelParam._m0[25u].z, _1393));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1443 = fma(_645, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637)) + cbModelParam._m0[13u].w;
        float _1447 = fma(_645, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637)) + cbModelParam._m0[14u].w;
        float _1451 = fma(_645, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637)) + cbModelParam._m0[15u].w;
        float _1454 = fma(_583, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581));
        float _1457 = fma(_583, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581));
        float _1460 = fma(_583, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581));
        float _1488;
        if (_1454 > 0.0)
        {
            _1488 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1488 = frontier_phi_16_14_ladder;
        }
        float _1716;
        if (_1457 > 0.0)
        {
            _1716 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1716 = frontier_phi_25_21_ladder;
        }
        float _1973;
        if (_1460 > 0.0)
        {
            _1973 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1973 = frontier_phi_37_32_ladder;
        }
        float _1975 = isnan(_1716) ? _1488 : (isnan(_1488) ? _1716 : min(_1488, _1716));
        float _1976 = isnan(_1973) ? _1975 : (isnan(_1975) ? _1973 : min(_1975, _1973));
        float _1980 = (_1976 * _1454) + _1443;
        float _1981 = (_1976 * _1457) + _1447;
        float _1982 = (_1976 * _1460) + _1451;
        float _1983 = _1976 * 9.9999997473787516355514526367188e-05;
        float _1985 = (-1.0) - _1983;
        float _1987 = _1983 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1982 > _1987) || ((_1982 < _1985) || ((_1981 > _1987) || ((_1981 < _1985) || ((_1980 < _1985) || (_1980 > _1987))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2110 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1982, cbModelParam._m0[9u].z, fma(_1981, cbModelParam._m0[9u].y, _1980 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1982, cbModelParam._m0[10u].z, fma(_1981, cbModelParam._m0[10u].y, _1980 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1982, cbModelParam._m0[11u].z, fma(_1981, cbModelParam._m0[11u].y, _1980 * cbModelParam._m0[11u].x))), _1394);
            frontier_phi_15_37_ladder = _2110.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2110.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2110.x * cbModelParam._m0[1u].y;
        }
        _1476 = frontier_phi_15_37_ladder_2;
        _1478 = frontier_phi_15_37_ladder_1;
        _1480 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_581, _582, _583), _1394);
        _1476 = _1464.x * cbModelParam._m0[1u].y;
        _1478 = _1464.y * cbModelParam._m0[1u].y;
        _1480 = _1464.z * cbModelParam._m0[1u].y;
    }
    float _1484 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _407);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1484 : min(cbModelParam._m0[25u].w, _1484));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1542 = fma(_645, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637)) + cbModelParam._m0[21u].w;
        float _1546 = fma(_645, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637)) + cbModelParam._m0[22u].w;
        float _1550 = fma(_645, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637)) + cbModelParam._m0[23u].w;
        float _1553 = fma(_583, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581));
        float _1556 = fma(_583, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581));
        float _1559 = fma(_583, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581));
        float _1721;
        if (_1553 > 0.0)
        {
            _1721 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1721 = frontier_phi_27_23_ladder;
        }
        float _2000;
        if (_1556 > 0.0)
        {
            _2000 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2000 = frontier_phi_39_34_ladder;
        }
        float _2213;
        if (_1559 > 0.0)
        {
            _2213 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2213 = frontier_phi_48_45_ladder;
        }
        float _2215 = isnan(_2000) ? _1721 : (isnan(_1721) ? _2000 : min(_1721, _2000));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1553) + _1542;
        float _2221 = (_2216 * _1556) + _1546;
        float _2222 = (_2216 * _1559) + _1550;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2223;
        float _2226 = _2223 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2222 > _2226) || ((_2222 < _2224) || ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 < _2224) || (_2220 > _2226))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2222, cbModelParam._m0[17u].z, fma(_2221, cbModelParam._m0[17u].y, _2220 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2222, cbModelParam._m0[18u].z, fma(_2221, cbModelParam._m0[18u].y, _2220 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2222, cbModelParam._m0[19u].z, fma(_2221, cbModelParam._m0[19u].y, _2220 * cbModelParam._m0[19u].x))), _1485);
            frontier_phi_24_48_ladder = _2420.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2420.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2420.x * cbModelParam._m0[1u].z;
        }
        _1578 = frontier_phi_24_48_ladder_2;
        _1580 = frontier_phi_24_48_ladder_1;
        _1582 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_581, _582, _583), _1485);
        _1578 = _1562.x * cbModelParam._m0[1u].z;
        _1580 = _1562.y * cbModelParam._m0[1u].z;
        _1582 = _1562.z * cbModelParam._m0[1u].z;
    }
    float _1595 = (((_608 * _558) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1597 = (((_608 * _560) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1599 = (((_608 * _561) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1602 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, _1595 * cbSceneParam._m0[91u].x));
    vec4 _1616 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_493, _494));
    float _1618 = _1616.w;
    float _1630 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1618);
    float _1631 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1618);
    float _1632 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1618);
    uvec4 _1636 = floatBitsToUint(cbInstanceData._m0[_533 + 5u]);
    uint _1638 = _1636.x * 14u;
    uint _1639 = _1638 + 13u;
    float _1646 = _573 + (-1.0);
    float _1651 = (cbLight._m0[_1639].x * _1646) + 1.0;
    float _1652 = (cbLight._m0[_1639].y * _1646) + 1.0;
    float _1653 = (cbLight._m0[_1639].z * _1646) + 1.0;
    float _1654 = (cbLight._m0[_1639].w * _1646) + 1.0;
    uint _1655 = _1638 + 5u;
    float _1661 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1665 = _1638 + 4u;
    float _1674 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1678 = _1638 | 1u;
    float _1689 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_404, _405, _406));
    float _1692 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_404, _405, _406));
    float _3797 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _3808 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1697 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.3183098733425140380859375;
    float _1699 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.3183098733425140380859375;
    float _1706 = ((cbLight._m0[_1655].x * _1661) * _1699) + (((cbLight._m0[_1665].x * _1630) * _1674) * _1697);
    float _1707 = ((_1661 * cbLight._m0[_1655].y) * _1699) + (((cbLight._m0[_1665].y * _1631) * _1674) * _1697);
    float _1708 = ((_1661 * cbLight._m0[_1655].z) * _1699) + (((cbLight._m0[_1665].z * _1632) * _1674) * _1697);
    uvec4 _1713 = floatBitsToUint(cbLight._m0[_1638 + 12u]);
    bool _1715 = _1713.x == 0u;
    float _1726;
    float _1728;
    float _1730;
    if (_1715)
    {
        _1726 = _1706;
        _1728 = _1707;
        _1730 = _1708;
    }
    else
    {
        uint _1734 = _1638 + 6u;
        float _1750 = (dot(vec3(cbLight._m0[_1638 + 2u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _1751 = _1750 * _1750;
        float _3819 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1753 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1726 = (((cbLight._m0[_1734].x * 0.3183098733425140380859375) * _1752) * _1753) + _1706;
        _1728 = (((cbLight._m0[_1734].y * 0.3183098733425140380859375) * _1752) * _1753) + _1707;
        _1730 = (((cbLight._m0[_1734].z * 0.3183098733425140380859375) * _1752) * _1753) + _1708;
    }
    bool _1733 = _1713.y == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1733)
    {
        _1771 = _1726;
        _1773 = _1728;
        _1775 = _1730;
    }
    else
    {
        uint _1944 = _1638 + 7u;
        float _1960 = (dot(vec3(cbLight._m0[_1638 + 3u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _1961 = _1960 * _1960;
        float _3835 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1963 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1771 = (((cbLight._m0[_1944].x * 0.3183098733425140380859375) * _1962) * _1963) + _1726;
        _1773 = (((cbLight._m0[_1944].y * 0.3183098733425140380859375) * _1962) * _1963) + _1728;
        _1775 = (((cbLight._m0[_1944].z * 0.3183098733425140380859375) * _1962) * _1963) + _1730;
    }
    uint _1778 = _1638 + 8u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _407) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1638].x + _485;
    float _1794 = cbLight._m0[_1638].y + _486;
    float _1795 = cbLight._m0[_1638].z + _487;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1638].xyz));
    float _3851 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _1807 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _1808 = dot(vec3(_404, _405, _406), vec3(_1800, _1801, _1802));
    float _3873 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1800, _1801, _1802));
    float _3884 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1792 * _1792;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1828 = exp2(log2(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * 5.0);
    float _1829 = 0.959999978542327880859375 - _555;
    float _1831 = 0.959999978542327880859375 - _556;
    float _1832 = 0.959999978542327880859375 - _557;
    float _1839 = 1.0 - _1792;
    float _1850 = (0.5 / (((_1807 * ((_1806 * _1839) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1839) + _1792) * _1806))) * _1806;
    float _3895 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1852 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    uint _1866 = _1638 + 9u;
    float _1877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1678].w)) * _407) * 0.949999988079071044921875);
    float _1878 = _1877 * _1877;
    float _1879 = cbLight._m0[_1678].x + _485;
    float _1880 = cbLight._m0[_1678].y + _486;
    float _1881 = cbLight._m0[_1678].z + _487;
    float _1885 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
    float _1886 = _1885 * _1879;
    float _1887 = _1885 * _1880;
    float _1888 = _1885 * _1881;
    float _1889 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1678].xyz));
    float _3906 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1893 = dot(vec3(_404, _405, _406), vec3(_1886, _1887, _1888));
    float _3917 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1897 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1886, _1887, _1888));
    float _3928 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1901 = _1878 * _1878;
    float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
    float _1912 = exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0);
    float _1919 = 1.0 - _1878;
    float _1929 = (0.5 / (((_1807 * ((_1892 * _1919) + _1878)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1919) + _1878) * _1892))) * _1892;
    float _3939 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1931 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
    float _1941 = (((((_1912 * _1829) + _558) * cbLight._m0[_1866].x) * _1931) * _1661) + ((((cbLight._m0[_1778].x * _1630) * ((_1828 * _1829) + _558)) * _1852) * _1674);
    float _1942 = (((((_1912 * _1831) + _560) * cbLight._m0[_1866].y) * _1931) * _1661) + ((((cbLight._m0[_1778].y * _1631) * ((_1828 * _1831) + _560)) * _1852) * _1674);
    float _1943 = (((((_1912 * _1832) + _561) * cbLight._m0[_1866].z) * _1931) * _1661) + ((((cbLight._m0[_1778].z * _1632) * ((_1828 * _1832) + _561)) * _1852) * _1674);
    float _2005;
    float _2007;
    float _2009;
    if (_1715)
    {
        _2005 = _1941;
        _2007 = _1942;
        _2009 = _1943;
    }
    else
    {
        uint _2011 = _1638 + 2u;
        uint _2015 = _1638 + 10u;
        float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _407) * 0.949999988079071044921875);
        float _2030 = _2029 * _2029;
        float _2031 = cbLight._m0[_2011].x + _485;
        float _2032 = cbLight._m0[_2011].y + _486;
        float _2033 = cbLight._m0[_2011].z + _487;
        float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
        float _2038 = _2037 * _2031;
        float _2039 = _2037 * _2032;
        float _2040 = _2037 * _2033;
        float _2041 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2011].xyz));
        float _3950 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _2045 = dot(vec3(_404, _405, _406), vec3(_2038, _2039, _2040));
        float _3961 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2049 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2038, _2039, _2040));
        float _3972 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2053 = _2030 * _2030;
        float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
        float _2064 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
        float _2071 = 1.0 - _2030;
        float _2081 = (0.5 / (((_1807 * ((_2044 * _2071) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2071) + _2030) * _2044))) * _2044;
        float _3983 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2083 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
        float _2084 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _2005 = (((((_2064 * _1829) + _558) * cbLight._m0[_2015].x) * _2083) * _2084) + _1941;
        _2007 = (((((_2064 * _1831) + _560) * cbLight._m0[_2015].y) * _2083) * _2084) + _1942;
        _2009 = (((((_2064 * _1832) + _561) * cbLight._m0[_2015].z) * _2083) * _2084) + _1943;
    }
    float _2119;
    float _2121;
    float _2123;
    if (_1733)
    {
        _2119 = _2005;
        _2121 = _2007;
        _2123 = _2009;
    }
    else
    {
        uint _2130 = _1638 + 3u;
        uint _2134 = _1638 + 11u;
        float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _407) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2130].x + _485;
        float _2151 = cbLight._m0[_2130].y + _486;
        float _2152 = cbLight._m0[_2130].z + _487;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2130].xyz));
        float _3999 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2164 = dot(vec3(_404, _405, _406), vec3(_2157, _2158, _2159));
        float _4010 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2157, _2158, _2159));
        float _4021 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
        float _2190 = 1.0 - _2149;
        float _2200 = (0.5 / (((_1807 * ((_2163 * _2190) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2190) + _2149) * _2163))) * _2163;
        float _4032 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2119 = (((((_2183 * _1829) + _558) * cbLight._m0[_2134].x) * _2202) * _2203) + _2005;
        _2121 = (((((_2183 * _1831) + _560) * cbLight._m0[_2134].y) * _2202) * _2203) + _2007;
        _2123 = (((((_2183 * _1832) + _561) * cbLight._m0[_2134].z) * _2202) * _2203) + _2009;
    }
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_1636.y == 0u)
    {
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2278;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2278;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2278;
        uvec4 _2293 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2294 = _2293.x;
        uint _2305 = uint((float(_2293.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2294))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2294)));
        float _2315 = (log2(_2281 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2316 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        uint _2319 = uint(isnan(14.0) ? _2316 : (isnan(_2316) ? 14.0 : min(_2316, 14.0)));
        uvec4 _2324 = texelFetch(g_lightClusterGridBuffer, int(((_2319 << 2u) + (_2305 << 6u)) >> 2u));
        uint _2325 = _2324.x;
        uint _2326 = _2293.z;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        if (((((1u << ((_2326 >> 4u) & 15u)) + 4294967295u) & _2325) == 0u) || ((_2326 & 240u) == 0u))
        {
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
        }
        else
        {
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            uint _2575 = 0u;
            uint _2584;
            bool _2585;
            for (;;)
            {
                _2584 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                _2585 = _2584 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2585)
                {
                    frontier_phi_63_pred = _2574;
                    frontier_phi_63_pred_1 = _2573;
                    frontier_phi_63_pred_2 = _2572;
                    frontier_phi_63_pred_3 = _2571;
                    frontier_phi_63_pred_4 = _2570;
                    frontier_phi_63_pred_5 = _2569;
                }
                else
                {
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    uint _2699;
                    _2693 = _2569;
                    _2694 = _2570;
                    _2695 = _2571;
                    _2696 = _2572;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2584;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    for (;;)
                    {
                        uint _2703 = uint(findLSB(_2699)) + (_2575 << 5u);
                        uint _2700 = (_2699 + 4294967295u) & _2699;
                        uint _2705 = _2703 * 48u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2725 = (_2703 * 48u) + 4u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2744 = (_2703 * 48u) + 8u;
                        vec3 _2755 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x));
                        float _2759 = _2719.x - _2279;
                        float _2760 = _2719.y - _2280;
                        float _2761 = _2719.z - _2281;
                        float _2762 = dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761));
                        float _2765 = inversesqrt(_2762);
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2769 = dot(vec3(_514, _517, _520), vec3(_2766, _2767, _2768));
                        float _2774 = 1.0 - (_2762 * _2719.w);
                        float _4058 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2776 = sqrt(_2762) * _2738.w;
                        float _2779 = 1.39999997615814208984375 / (_2776 + 1.39999997615814208984375);
                        float _2780 = _2779 * _2779;
                        float _2783 = ((1.0 - _2780) * _2769) + _2780;
                        float _2786 = _2776 * _2776;
                        float _2790 = ((isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))) * _2775) / ((_2786 * 0.699999988079071044921875) + 1.0);
                        float _2794 = (-0.0) - _2279;
                        float _2795 = (-0.0) - _2280;
                        float _2796 = (-0.0) - _2281;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2811 = exp2(log2(1.0 / ((_2786 * 3.5) + 5.0)) * 0.25);
                        float _2812 = 1.0 - _589;
                        float _2819 = sqrt(1.0 - ((1.0 - (_2812 * _2812)) * (1.0 - (_2811 * _2811))));
                        float _2820 = _2819 * _2819;
                        float _2821 = _2820 * _2820;
                        float _2822 = _2801 + _2766;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
                        float _2832 = dot(vec3(_514, _517, _520), vec3(_2801, _2802, _2803));
                        float _4074 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2835 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2836 = dot(vec3(_514, _517, _520), vec3(_2828 * _2822, _2828 * _2823, _2828 * _2824));
                        float _4085 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2843 = ((_2839 * _2839) * (_2821 + (-1.0))) + 1.0;
                        float _2844 = _2779 * _2820;
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2769) + _2845;
                        float _4096 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2850 = 1.0 - _2820;
                        float _2860 = (0.5 / (((_2849 * ((_2835 * _2850) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _2850) + _2820) * _2835))) * _2849;
                        float _4107 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2871 = (((_2821 * 3.1415927410125732421875) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) / ((_2843 * _2843) * ((_2786 * 2.1991131305694580078125) + 3.141590118408203125))) * _2775;
                        _2628 = (_2790 * _2738.x) + _2696;
                        _2629 = (_2790 * _2738.y) + _2697;
                        _2630 = (_2790 * _2738.z) + _2698;
                        _2625 = (_2871 * _2755.x) + _2693;
                        _2626 = (_2871 * _2755.y) + _2694;
                        _2627 = (_2871 * _2755.z) + _2695;
                        if (_2700 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2693 = _2625;
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2700;
                        }
                    }
                    frontier_phi_63_pred = _2630;
                    frontier_phi_63_pred_1 = _2629;
                    frontier_phi_63_pred_2 = _2628;
                    frontier_phi_63_pred_3 = _2627;
                    frontier_phi_63_pred_4 = _2626;
                    frontier_phi_63_pred_5 = _2625;
                }
                _2436 = frontier_phi_63_pred;
                _2434 = frontier_phi_63_pred_1;
                _2432 = frontier_phi_63_pred_2;
                _2430 = frontier_phi_63_pred_3;
                _2428 = frontier_phi_63_pred_4;
                _2426 = frontier_phi_63_pred_5;
                uint _2576 = _2575 + 1u;
                if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2569 = _2426;
                    _2570 = _2428;
                    _2571 = _2430;
                    _2572 = _2432;
                    _2573 = _2434;
                    _2574 = _2436;
                    _2575 = _2576;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
        }
        uvec4 _2439 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2440 = _2439.z;
        uint _2442 = (_2440 >> 8u) & 15u;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((4294967295u << _2442) & _2325) == 0u)
        {
            _2537 = _2425;
            _2539 = _2427;
            _2541 = _2429;
            _2543 = _2431;
            _2545 = _2433;
            _2547 = _2435;
        }
        else
        {
            float _2562 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
            float _2563 = _2562 * _2279;
            float _2564 = _2562 * _2280;
            float _2565 = _2562 * _2281;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2442 < ((_2440 >> 12u) & 15u))
            {
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2676 = _2425;
                float _2677 = _2427;
                float _2678 = _2429;
                float _2679 = _2431;
                float _2680 = _2433;
                float _2681 = _2435;
                uint _2682 = _2442;
                uint _2691;
                bool _2692;
                for (;;)
                {
                    _2691 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                    _2692 = _2691 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2692)
                    {
                        frontier_phi_69_pred = _2681;
                        frontier_phi_69_pred_1 = _2680;
                        frontier_phi_69_pred_2 = _2679;
                        frontier_phi_69_pred_3 = _2678;
                        frontier_phi_69_pred_4 = _2677;
                        frontier_phi_69_pred_5 = _2676;
                    }
                    else
                    {
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _2889 = _2676;
                        float _2890 = _2677;
                        float _2891 = _2678;
                        float _2892 = _2679;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        uint _2895 = _2691;
                        uint _2896;
                        vec4 _2921;
                        float _2922;
                        vec4 _2937;
                        vec3 _2949;
                        vec4 _2965;
                        vec4 _2981;
                        float _3028;
                        bool _3029;
                        for (;;)
                        {
                            uint _2906 = ((_2682 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2895));
                            _2896 = (_2895 + 4294967295u) & _2895;
                            uint _2908 = _2906 * 40u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2922 = _2921.w;
                            uint _2924 = (_2906 * 40u) + 4u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2906 * 40u) + 8u;
                            _2949 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x));
                            uint _2952 = (_2906 * 40u) + 16u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2906 * 40u) + 20u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2906 * 40u) + 24u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3003 = (_2906 * 40u) + 28u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3028 = fma(_2281, _3016.z, fma(_2280, _3016.y, _3016.x * _2279)) + _3016.w;
                            _3029 = !((fma(_2281, _2997.z, fma(_2280, _2997.y, _2997.x * _2279)) + _2997.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3029)
                            {
                                float _3056 = _2921.x - _2279;
                                float _3057 = _2921.y - _2280;
                                float _3058 = _2921.z - _2281;
                                float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                                float _3062 = inversesqrt(_3059);
                                float _3063 = _3062 * _3056;
                                float _3064 = _3062 * _3057;
                                float _3065 = _3062 * _3058;
                                float _3069 = 1.0 - (_3059 / (_2922 * _2922));
                                float _4118 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3074 = sqrt(_3059) * _2937.w;
                                float _3076 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                                float _3077 = _3076 * _3076;
                                float _3080 = ((1.0 - _3077) * dot(vec3(_3063, _3064, _3065), vec3(_514, _517, _520))) + _3077;
                                float _3083 = _3074 * _3074;
                                float _3087 = (fma(_2281, _2965.z, fma(_2280, _2965.y, _2965.x * _2279)) + _2965.w) / _3028;
                                float _3088 = (fma(_2281, _2981.z, fma(_2280, _2981.y, _2981.x * _2279)) + _2981.w) / _3028;
                                float _3092 = 1.0 - dot(vec2(_3087, _3088), vec2(_3087, _3088));
                                float _4134 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3094 = _3093 * (((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3070) / ((_3083 * 0.699999988079071044921875) + 1.0));
                                float _3106 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                                float _3107 = 1.0 - _589;
                                float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                                float _3115 = _3114 * _3114;
                                float _3116 = _3115 * _3115;
                                float _3117 = _3063 - _2563;
                                float _3118 = _3064 - _2564;
                                float _3119 = _3065 - _2565;
                                float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                                float _3127 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2563, (-0.0) - _2564, (-0.0) - _2565));
                                float _4145 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3130 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3131 = dot(vec3(_514, _517, _520), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                                float _4156 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                                float _3139 = _3076 * _3115;
                                float _3140 = _3139 * _3139;
                                float _3146 = ((1.0 - _3140) * dot(vec3(_514, _517, _520), vec3(_3063, _3064, _3065))) + _3140;
                                float _4167 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3148 = 1.0 - _3115;
                                float _3158 = (0.5 / (((_3147 * ((_3130 * _3148) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3115) * _3130))) * _3147;
                                float _4178 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3168 = (_3093 * _3070) * (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_3138 * _3138) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3094 * _2937.z;
                                frontier_phi_75_pred_1 = _3094 * _2937.y;
                                frontier_phi_75_pred_2 = _3094 * _2937.x;
                                frontier_phi_75_pred_3 = _3168 * _2949.z;
                                frontier_phi_75_pred_4 = _3168 * _2949.y;
                                frontier_phi_75_pred_5 = _3168 * _2949.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3177 = frontier_phi_75_pred;
                            _3176 = frontier_phi_75_pred_1;
                            _3175 = frontier_phi_75_pred_2;
                            _3174 = frontier_phi_75_pred_3;
                            _3173 = frontier_phi_75_pred_4;
                            _3172 = frontier_phi_75_pred_5;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            if (_2896 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2896;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2881;
                        frontier_phi_69_pred_1 = _2880;
                        frontier_phi_69_pred_2 = _2879;
                        frontier_phi_69_pred_3 = _2878;
                        frontier_phi_69_pred_4 = _2877;
                        frontier_phi_69_pred_5 = _2876;
                    }
                    _2548 = frontier_phi_69_pred;
                    _2546 = frontier_phi_69_pred_1;
                    _2544 = frontier_phi_69_pred_2;
                    _2542 = frontier_phi_69_pred_3;
                    _2540 = frontier_phi_69_pred_4;
                    _2538 = frontier_phi_69_pred_5;
                    uint _2683 = _2682 + 1u;
                    if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2676 = _2538;
                        _2677 = _2540;
                        _2678 = _2542;
                        _2679 = _2544;
                        _2680 = _2546;
                        _2681 = _2548;
                        _2682 = _2683;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2548;
                frontier_phi_57_58_ladder_1 = _2546;
                frontier_phi_57_58_ladder_2 = _2544;
                frontier_phi_57_58_ladder_3 = _2542;
                frontier_phi_57_58_ladder_4 = _2540;
                frontier_phi_57_58_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_57_58_ladder = _2435;
                frontier_phi_57_58_ladder_1 = _2433;
                frontier_phi_57_58_ladder_2 = _2431;
                frontier_phi_57_58_ladder_3 = _2429;
                frontier_phi_57_58_ladder_4 = _2427;
                frontier_phi_57_58_ladder_5 = _2425;
            }
            _2537 = frontier_phi_57_58_ladder_5;
            _2539 = frontier_phi_57_58_ladder_4;
            _2541 = frontier_phi_57_58_ladder_3;
            _2543 = frontier_phi_57_58_ladder_2;
            _2545 = frontier_phi_57_58_ladder_1;
            _2547 = frontier_phi_57_58_ladder;
        }
        float _2552 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
        _2337 = (_2552 * _2543) + _1771;
        _2339 = (_2552 * _2545) + _1773;
        _2341 = (_2552 * _2547) + _1775;
        _2343 = ((_2537 * _558) * _2552) + _2119;
        _2345 = ((_2539 * _560) * _2552) + _2121;
        _2347 = ((_2541 * _561) * _2552) + _2123;
    }
    else
    {
        _2337 = _1771;
        _2339 = _1773;
        _2341 = _1775;
        _2343 = _2119;
        _2345 = _2121;
        _2347 = _2123;
    }
    float _4194 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4205 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4216 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    uint _2367 = _533 + 6u;
    float _2375 = _493 / cbSceneParam._m0[86u].x;
    float _2376 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2390 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, (log2((isnan(cbSceneParam._m0[77u].w) ? _427 : (isnan(_427) ? cbSceneParam._m0[77u].w : min(_427, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2392 = _2390.x;
    float _2393 = _2390.y;
    float _2394 = _2390.z;
    float _2395 = _2390.w;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_427 > cbSceneParam._m0[78u].w)
    {
        float _2450 = isnan(_427) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _427 : min(cbSceneParam._m0[80u].w, _427));
        float _2451 = _2450 / _427;
        float _2462 = _2451 * _478;
        float _2463 = _479 * _2451;
        float _2464 = (-0.0) - _2463;
        float _2465 = _2451 * _480;
        float _2467 = (cbSceneParam._m0[77u].w * _2464) / _2450;
        float _2468 = _2467 + cbSceneParam._m0[79u].w;
        float _2469 = cbSceneParam._m0[79u].w - _2463;
        float _2475 = sqrt(((_2462 * _2462) + (_2463 * _2463)) + (_2465 * _2465));
        float _2478 = (1.0 - (cbSceneParam._m0[77u].w / _2450)) * _2475;
        float _2483 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2485 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2638;
        if (abs((_2464 - _2467) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2638 = ((((_2468 > 0.0) ? exp2(_2483 * _2468) : (2.0 - exp2(_2485 * _2468))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2478;
        }
        else
        {
            float _2598 = 1.0 / cbSceneParam._m0[80u].x;
            float _2599 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : max(_2468, _2469));
            float _2600 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : min(_2468, _2469));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            _2638 = ((abs(_2475 / _2464) * cbSceneParam._m0[80u].y) * ((((_2609 - _2610) * 2.0) - ((exp2(_2483 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)))) - exp2(_2483 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))))) * _2598)) - ((exp2(_2485 * _2609) - exp2(_2485 * _2610)) * _2598))) + (_2478 * cbSceneParam._m0[80u].z);
        }
        vec4 _2640 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, 1.0), 0.0);
        float _2649 = exp2((_2638 * (-1.44269502162933349609375)) * (1.0 - _2640.w));
        float _2650 = log2(_2649);
        float _2666 = log2(_2395);
        _2487 = (exp2(_2666 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].x)) * _2640.x) / cbSceneParam._m0[78u].x)) + _2392;
        _2489 = (exp2(_2666 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].y)) * _2640.y) / cbSceneParam._m0[78u].y)) + _2393;
        _2491 = (exp2(_2666 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].z)) * _2640.z) / cbSceneParam._m0[78u].z)) + _2394;
        _2493 = _2649 * _2395;
    }
    else
    {
        _2487 = _2392;
        _2489 = _2393;
        _2491 = _2394;
        _2493 = _2395;
    }
    float _2505 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2506 = _2505 == 3.0;
    float _2507 = log2(_2493);
    float _2514 = exp2(_2507 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2337 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _573))) + ((_2343 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2515 = exp2(_2507 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2339 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _573))) + ((_2345 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2516 = exp2(_2507 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2341 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _573))) + ((_2347 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2525 = (_2505 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2525 * (_2506 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2487)));
    SV_Target.y = _2525 * (_2506 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2489)));
    SV_Target.z = _2525 * (_2506 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.w = cbInstanceData._m0[_2367].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2367].w;
}


