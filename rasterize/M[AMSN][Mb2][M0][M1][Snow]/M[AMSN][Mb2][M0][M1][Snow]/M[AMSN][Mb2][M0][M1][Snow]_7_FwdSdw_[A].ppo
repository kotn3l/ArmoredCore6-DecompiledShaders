#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _994;
float _3667;
float _3668;
float _3669;
float _3670;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3679 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3690 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    vec4 _338 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _343 = _338.x * cbMtdParam._m0[9u].x;
    float _344 = _338.y * cbMtdParam._m0[9u].y;
    float _345 = _338.z * cbMtdParam._m0[9u].z;
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _378 = (((_364.x * cbMtdParam._m0[10u].x) - _343) * _299) + _343;
    float _379 = (((_364.y * cbMtdParam._m0[10u].y) - _344) * _299) + _344;
    float _380 = (((_364.z * cbMtdParam._m0[10u].z) - _345) * _299) + _345;
    float _396 = _299 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _399 = fma(_320, _232, fma(_314, _224 * TANGENT.x, (_210 * _202) * _312));
    float _402 = fma(_320, _233, fma(_314, _224 * TANGENT.y, (_210 * _203) * _312));
    float _405 = fma(_320, _234, fma(_314, _224 * TANGENT.z, (_210 * _204) * _312));
    float _409 = inversesqrt(dot(vec3(_399, _402, _405), vec3(_399, _402, _405)));
    float _410 = _409 * _399;
    float _411 = _409 * _402;
    float _412 = _409 * _405;
    float _3701 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _413 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3723 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3734 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3745 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _417 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _474 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _484 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _474);
    float _485 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _474);
    float _486 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _474);
    float _490 = inversesqrt(dot(vec3(_484, _485, _486), vec3(_484, _485, _486)));
    float _491 = _484 * _490;
    float _492 = _485 * _490;
    float _493 = _486 * _490;
    vec4 _498 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _500 = _498.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _674 = sqrt(((_484 * _484) + (_485 * _485)) + (_486 * _486));
        float _680 = (cbMatDynParam._m0[5u].x * _674) + cbMatDynParam._m0[5u].y;
        float _3756 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _685 = (cbMatDynParam._m0[5u].z * _674) + cbMatDynParam._m0[5u].w;
        float _3767 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) - _681)) + _681) < ((_500 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _511 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _512 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _532 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _535 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _538 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _551 = uint(roundEven(NORMAL.w)) * 13u;
    uint _552 = _551 + 9u;
    uint _553 = _552 + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3778 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _565 = 1.0 - _417;
    float _566 = _562 * _565;
    float _567 = _563 * _565;
    float _568 = _564 * _565;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _417;
    float _574 = (_563 + (-0.039999999105930328369140625)) * _417;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _417;
    float _576 = _573 + 0.039999999105930328369140625;
    float _578 = _574 + 0.039999999105930328369140625;
    float _579 = _575 + 0.039999999105930328369140625;
    vec4 _588 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _511, cbSceneParam._m0[86u].y * _512));
    float _591 = _588.x * TEXCOORD_9.w;
    float _592 = dot(vec3(_410, _411, _412), vec3(_491, _492, _493));
    float _595 = _592 * 2.0;
    float _599 = (_595 * _410) - _491;
    float _600 = (_595 * _411) - _492;
    float _601 = (_595 * _412) - _493;
    float _605 = abs(dot(vec3(_491, _492, _493), vec3(_410, _411, _412)));
    float _3811 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _607 = sqrt(_413);
    float _620 = exp2((_607 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_607 * 3.0));
    float _626 = (1.0 - _620) * ((_607 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _627 = _620 * _607;
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _993;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _722 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _726 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _751 = _655 + _410;
        float _752 = _659 + _411;
        float _753 = _663 + _412;
        float _763 = fma(_753, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751)) - _718;
        float _764 = fma(_753, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751)) - _722;
        float _765 = fma(_753, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751)) - _726;
        float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
        float _782 = ((_769 * _763) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_718 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_769 * _764) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_722 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_769 * _765) / cbModelParam._m0[34u].z) + ((((((_726 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        float _821 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_787.x + (-0.5));
        float _823 = _821 * (_787.y + (-0.5));
        float _824 = _821 * (_787.z + (-0.5));
        float _831 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_794.x + (-0.5));
        float _833 = _831 * (_794.y + (-0.5));
        float _834 = _831 * (_794.z + (-0.5));
        float _841 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_801.x + (-0.5));
        float _843 = _841 * (_801.y + (-0.5));
        float _844 = _841 * (_801.z + (-0.5));
        float _851 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_808.x + (-0.5));
        float _853 = _851 * (_808.y + (-0.5));
        float _854 = _851 * (_808.z + (-0.5));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = _822 * 0.5;
        float _859 = _832 * 0.5;
        float _860 = _842 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _875 = (dot(vec3(_410, _411, _412), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _885 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3859 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_887 + 1.0))) + _892) * _855;
        float _902 = _823 * 0.5;
        float _903 = _833 * 0.5;
        float _904 = _843 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_410, _411, _412), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3892 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_929 + 1.0))) + _934) * _856;
        float _944 = _824 * 0.5;
        float _945 = _834 * 0.5;
        float _946 = _844 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_410, _411, _412), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3925 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_971 + 1.0))) + _976) * _857;
        _993 = _824;
        _995 = _823;
        _996 = _822;
        _997 = _834;
        _998 = _833;
        _999 = _832;
        _1000 = _844;
        _1001 = _843;
        _1002 = _842;
        _1003 = _857;
        _1004 = _856;
        _1005 = _855;
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
    }
    else
    {
        _993 = _994;
        _995 = _994;
        _996 = _994;
        _997 = _994;
        _998 = _994;
        _999 = _994;
        _1000 = _994;
        _1001 = _994;
        _1002 = _994;
        _1003 = _994;
        _1004 = _994;
        _1005 = _994;
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1037 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1041 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1045 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1068 = _655 + _410;
        float _1069 = _659 + _411;
        float _1070 = _663 + _412;
        float _1080 = fma(_1070, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1037 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1041 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[35u].z) + ((((((_1045 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1136 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1103.x + (-0.5));
        float _1138 = _1136 * (_1103.y + (-0.5));
        float _1139 = _1136 * (_1103.z + (-0.5));
        float _1146 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1110.x + (-0.5));
        float _1148 = _1146 * (_1110.y + (-0.5));
        float _1149 = _1146 * (_1110.z + (-0.5));
        float _1156 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1117.x + (-0.5));
        float _1158 = _1156 * (_1117.y + (-0.5));
        float _1159 = _1156 * (_1117.z + (-0.5));
        float _1166 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1124.x + (-0.5));
        float _1168 = _1166 * (_1124.y + (-0.5));
        float _1169 = _1166 * (_1124.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_410, _411, _412), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3988 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1200 + 1.0))) + _1205) * _1170;
        float _1215 = _1138 * 0.5;
        float _1216 = _1148 * 0.5;
        float _1217 = _1158 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_410, _411, _412), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4021 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1242 + 1.0))) + _1247) * _1171;
        float _1257 = _1139 * 0.5;
        float _1258 = _1149 * 0.5;
        float _1259 = _1159 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_410, _411, _412), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4054 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1284 + 1.0))) + _1289) * _1172;
        _1306 = _1139;
        _1307 = _1138;
        _1308 = _1137;
        _1309 = _1149;
        _1310 = _1148;
        _1311 = _1147;
        _1312 = _1159;
        _1313 = _1158;
        _1314 = _1157;
        _1315 = _1172;
        _1316 = _1171;
        _1317 = _1170;
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _994;
        _1307 = _994;
        _1308 = _994;
        _1309 = _994;
        _1310 = _994;
        _1311 = _994;
        _1312 = _994;
        _1313 = _994;
        _1314 = _994;
        _1315 = _994;
        _1316 = _994;
        _1317 = _994;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1353 = fma(_1332, cbSceneParam._m0[89u].z, fma(_1331, cbSceneParam._m0[89u].y, _1330 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1332, cbSceneParam._m0[90u].z, fma(_1331, cbSceneParam._m0[90u].y, _1330 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1332, cbSceneParam._m0[91u].z, fma(_1331, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1330));
    float _1374 = _599 * 0.5;
    float _1375 = _600 * 0.5;
    float _1376 = _601 * 0.5;
    float _1377 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1380 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1383 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1417;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1390 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_993, _997, _1000, _1003));
        float _1394 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_995, _998, _1001, _1004));
        float _1398 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_996, _999, _1002, _1005));
        float _1405 = dot(vec4(cbModelParam._m0[39u]), vec4(_1374, _1375, _1376, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1428;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1419 = dot(vec4(cbModelParam._m0[40u]), vec4(_1374, _1375, _1376, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1432 = (_1428 * cbModelParam._m0[1u].x) + (_1417 * (1.0 - cbModelParam._m0[1u].x));
    float _1442 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _413);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1442 : min(cbModelParam._m0[25u].z, _1442));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1506 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1509 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1537 = frontier_phi_19_17_ladder;
        }
        float _1713;
        if (_1506 > 0.0)
        {
            _1713 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1713 = frontier_phi_28_24_ladder;
        }
        float _2008;
        if (_1509 > 0.0)
        {
            _2008 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2008 = frontier_phi_40_35_ladder;
        }
        float _2010 = isnan(_1713) ? _1537 : (isnan(_1537) ? _1713 : min(_1537, _1713));
        float _2011 = isnan(_2008) ? _2010 : (isnan(_2010) ? _2008 : min(_2010, _2008));
        float _2015 = (_2011 * _1503) + _1492;
        float _2016 = (_2011 * _1506) + _1496;
        float _2017 = (_2011 * _1509) + _1500;
        float _2018 = _2011 * 9.9999997473787516355514526367188e-05;
        float _2020 = (-1.0) - _2018;
        float _2022 = _2018 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2017 > _2022) || ((_2017 < _2020) || ((_2016 > _2022) || ((_2016 < _2020) || ((_2015 < _2020) || (_2015 > _2022))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2017, cbModelParam._m0[9u].z, fma(_2016, cbModelParam._m0[9u].y, _2015 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2017, cbModelParam._m0[10u].z, fma(_2016, cbModelParam._m0[10u].y, _2015 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2017, cbModelParam._m0[11u].z, fma(_2016, cbModelParam._m0[11u].y, _2015 * cbModelParam._m0[11u].x))), _1443);
            frontier_phi_18_40_ladder = _2162.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2162.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2162.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_18_40_ladder_2;
        _1527 = frontier_phi_18_40_ladder_1;
        _1529 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1443);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _413);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1605 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1608 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1718;
        if (_1602 > 0.0)
        {
            _1718 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1718 = frontier_phi_30_26_ladder;
        }
        float _2035;
        if (_1605 > 0.0)
        {
            _2035 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2035 = frontier_phi_42_37_ladder;
        }
        float _2373;
        if (_1608 > 0.0)
        {
            _2373 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2373 = frontier_phi_52_49_ladder;
        }
        float _2375 = isnan(_2035) ? _1718 : (isnan(_1718) ? _2035 : min(_1718, _2035));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1602) + _1591;
        float _2381 = (_2376 * _1605) + _1595;
        float _2382 = (_2376 * _1608) + _1599;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2383;
        float _2386 = _2383 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2382 > _2386) || ((_2382 < _2384) || ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 < _2384) || (_2380 > _2386))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2382, cbModelParam._m0[17u].z, fma(_2381, cbModelParam._m0[17u].y, _2380 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2382, cbModelParam._m0[18u].z, fma(_2381, cbModelParam._m0[18u].y, _2380 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2382, cbModelParam._m0[19u].z, fma(_2381, cbModelParam._m0[19u].y, _2380 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_27_52_ladder = _2504.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2504.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2504.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_27_52_ladder_2;
        _1629 = frontier_phi_27_52_ladder_1;
        _1631 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1534);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1644 = (((_626 * _576) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1646 = (((_626 * _578) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1648 = (((_626 * _579) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1631 - _1529)) + _1529);
    float _1651 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1704 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1705 = _1692 / _1704;
    float _1706 = _1696 / _1704;
    float _1707 = _1700 / _1704;
    float _1854;
    float _1855;
    float _1856;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1734 = ((uint(_1707 > cbSceneParam._m0[59u].y) + uint(_1707 > cbSceneParam._m0[59u].x)) + uint(_1707 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1735 = _1734 + 43u;
        uint _1743 = _1734 + 44u;
        uint _1751 = _1734 + 45u;
        uint _1759 = _1734 + 46u;
        float _1770 = fma(_1704, cbSceneParam._m0[_1735].w, fma(_1700, cbSceneParam._m0[_1735].z, fma(_1696, cbSceneParam._m0[_1735].y, _1692 * cbSceneParam._m0[_1735].x)));
        float _1774 = fma(_1704, cbSceneParam._m0[_1743].w, fma(_1700, cbSceneParam._m0[_1743].z, fma(_1696, cbSceneParam._m0[_1743].y, _1692 * cbSceneParam._m0[_1743].x)));
        float _1782 = fma(_1704, cbSceneParam._m0[_1759].w, fma(_1700, cbSceneParam._m0[_1759].z, fma(_1696, cbSceneParam._m0[_1759].y, _1692 * cbSceneParam._m0[_1759].x)));
        float _1787 = cbSceneParam._m0[33u].z * _1782;
        float _1789 = cbSceneParam._m0[33u].w * _1782;
        float _1792 = fma(_1704, cbSceneParam._m0[_1751].w, fma(_1700, cbSceneParam._m0[_1751].z, fma(_1696, cbSceneParam._m0[_1751].y, _1692 * cbSceneParam._m0[_1751].x))) / _1782;
        float _1840 = (cbSceneParam._m0[33u].x - sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707))) * cbSceneParam._m0[33u].y;
        float _4180 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1847 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 + _1770) / _1782, (_1789 + _1774) / _1782), _1792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1789 + _1770) / _1782, (_1774 - _1787) / _1782), _1792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 - _1787) / _1782, (_1774 - _1789) / _1782), _1792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 - _1789) / _1782, (_1787 + _1774) / _1782), _1792), 0.0)).x), vec4(0.25)));
        _1854 = 1.0 - (_1847 * cbSceneParam._m0[34u].x);
        _1855 = 1.0 - (_1847 * cbSceneParam._m0[34u].y);
        _1856 = 1.0 - (_1847 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1854 = 1.0;
        _1855 = 1.0;
        _1856 = 1.0;
    }
    float _1920;
    float _1922;
    float _1924;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1908 = fma(_1704, cbSceneParam._m0[63u].w, fma(_1700, cbSceneParam._m0[63u].z, fma(_1696, cbSceneParam._m0[63u].y, _1692 * cbSceneParam._m0[63u].x)));
        float _1909 = fma(_1704, cbSceneParam._m0[60u].w, fma(_1700, cbSceneParam._m0[60u].z, fma(_1696, cbSceneParam._m0[60u].y, _1692 * cbSceneParam._m0[60u].x))) / _1908;
        float _1910 = fma(_1704, cbSceneParam._m0[61u].w, fma(_1700, cbSceneParam._m0[61u].z, fma(_1696, cbSceneParam._m0[61u].y, _1692 * cbSceneParam._m0[61u].x))) / _1908;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1909 >= cbSceneParam._m0[64u].x) && (_1910 >= cbSceneParam._m0[64u].y)) && (_1909 <= cbSceneParam._m0[64u].z)) && (_1910 <= cbSceneParam._m0[64u].w))
        {
            float _2048 = fma(_1704, cbSceneParam._m0[62u].w, fma(_1700, cbSceneParam._m0[62u].z, fma(_1696, cbSceneParam._m0[62u].y, _1692 * cbSceneParam._m0[62u].x))) / _1908;
            float _2052 = isnan(cbSceneParam._m0[41u].w) ? _2048 : (isnan(_2048) ? cbSceneParam._m0[41u].w : max(_2048, cbSceneParam._m0[41u].w));
            float _2095 = (cbSceneParam._m0[33u].x - sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707))) * cbSceneParam._m0[33u].y;
            float _4196 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
            float _2102 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1909, cbSceneParam._m0[33u].w + _1910), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1909, _1910 - cbSceneParam._m0[33u].z), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1909 - cbSceneParam._m0[33u].z, _1910 - cbSceneParam._m0[33u].w), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1909 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1910), _2052), 0.0)).x), vec4(0.25)));
            float _2106 = 1.0 - (_2102 * cbSceneParam._m0[34u].x);
            float _2107 = 1.0 - (_2102 * cbSceneParam._m0[34u].y);
            float _2108 = 1.0 - (_2102 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2107) ? _1855 : (isnan(_1855) ? _2107 : min(_1855, _2107));
            frontier_phi_39_38_ladder_1 = isnan(_2106) ? _1854 : (isnan(_1854) ? _2106 : min(_1854, _2106));
            frontier_phi_39_38_ladder_2 = isnan(_2108) ? _1856 : (isnan(_1856) ? _2108 : min(_1856, _2108));
        }
        else
        {
            frontier_phi_39_38_ladder = _1855;
            frontier_phi_39_38_ladder_1 = _1854;
            frontier_phi_39_38_ladder_2 = _1856;
        }
        _1920 = frontier_phi_39_38_ladder_1;
        _1922 = frontier_phi_39_38_ladder;
        _1924 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1920 = _1854;
        _1922 = _1855;
        _1924 = _1856;
    }
    uvec4 _1929 = floatBitsToUint(cbInstanceData._m0[_551 + 5u]);
    uint _1931 = _1929.x * 14u;
    uint _1932 = _1931 + 13u;
    float _1939 = _591 + (-1.0);
    float _1944 = (cbLight._m0[_1932].x * _1939) + 1.0;
    float _1945 = (cbLight._m0[_1932].y * _1939) + 1.0;
    float _1946 = (cbLight._m0[_1932].z * _1939) + 1.0;
    float _1947 = (cbLight._m0[_1932].w * _1939) + 1.0;
    uint _1948 = _1931 + 5u;
    float _1954 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1958 = _1931 + 4u;
    float _1967 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1971 = _1931 | 1u;
    float _1982 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_410, _411, _412));
    float _1985 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_410, _411, _412));
    float _4232 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _4243 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1990 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _1992 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _1999 = ((cbLight._m0[_1948].x * _1954) * _1992) + (((cbLight._m0[_1958].x * _1920) * _1967) * _1990);
    float _2000 = ((_1954 * cbLight._m0[_1948].y) * _1992) + (((cbLight._m0[_1958].y * _1922) * _1967) * _1990);
    float _2001 = ((_1954 * cbLight._m0[_1948].z) * _1992) + (((cbLight._m0[_1958].z * _1924) * _1967) * _1990);
    uvec4 _2005 = floatBitsToUint(cbLight._m0[_1931 + 12u]);
    bool _2007 = _2005.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2007)
    {
        _2109 = _1999;
        _2111 = _2000;
        _2113 = _2001;
    }
    else
    {
        uint _2117 = _1931 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_1931 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4254 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2136 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _1999;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2000;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2001;
    }
    bool _2116 = _2005.y == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2116)
    {
        _2171 = _2109;
        _2173 = _2111;
        _2175 = _2113;
    }
    else
    {
        uint _2344 = _1931 + 7u;
        float _2360 = (dot(vec3(cbLight._m0[_1931 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4270 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2363 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2171 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2109;
        _2173 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2111;
        _2175 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2113;
    }
    uint _2178 = _1931 + 8u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _413) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1931].x + _491;
    float _2194 = cbLight._m0[_1931].y + _492;
    float _2195 = cbLight._m0[_1931].z + _493;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1931].xyz));
    float _4286 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2207 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2208 = dot(vec3(_410, _411, _412), vec3(_2200, _2201, _2202));
    float _4308 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2200, _2201, _2202));
    float _4319 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2192 * _2192;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
    float _2229 = 0.959999978542327880859375 - _573;
    float _2231 = 0.959999978542327880859375 - _574;
    float _2232 = 0.959999978542327880859375 - _575;
    float _2239 = 1.0 - _2192;
    float _2250 = (0.5 / (((_2207 * ((_2206 * _2239) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2239) + _2192) * _2206))) * _2206;
    float _4330 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    uint _2266 = _1931 + 9u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _413) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_1971].x + _491;
    float _2280 = cbLight._m0[_1971].y + _492;
    float _2281 = cbLight._m0[_1971].z + _493;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1971].xyz));
    float _4341 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2293 = dot(vec3(_410, _411, _412), vec3(_2286, _2287, _2288));
    float _4352 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2286, _2287, _2288));
    float _4363 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2278 * _2278;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
    float _2319 = 1.0 - _2278;
    float _2329 = (0.5 / (((_2207 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2319) + _2278) * _2292))) * _2292;
    float _4374 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2331 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    float _2341 = (((((_2312 * _2229) + _576) * cbLight._m0[_2266].x) * _2331) * _1954) + ((((cbLight._m0[_2178].x * _1920) * ((_2228 * _2229) + _576)) * _2252) * _1967);
    float _2342 = (((((_2312 * _2231) + _578) * cbLight._m0[_2266].y) * _2331) * _1954) + ((((cbLight._m0[_2178].y * _1922) * ((_2228 * _2231) + _578)) * _2252) * _1967);
    float _2343 = (((((_2312 * _2232) + _579) * cbLight._m0[_2266].z) * _2331) * _1954) + ((((cbLight._m0[_2178].z * _1924) * ((_2228 * _2232) + _579)) * _2252) * _1967);
    float _2399;
    float _2401;
    float _2403;
    if (_2007)
    {
        _2399 = _2341;
        _2401 = _2342;
        _2403 = _2343;
    }
    else
    {
        uint _2405 = _1931 + 2u;
        uint _2409 = _1931 + 10u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _413) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _491;
        float _2426 = cbLight._m0[_2405].y + _492;
        float _2427 = cbLight._m0[_2405].z + _493;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2405].xyz));
        float _4385 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2439 = dot(vec3(_410, _411, _412), vec3(_2432, _2433, _2434));
        float _4396 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4407 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0);
        float _2465 = 1.0 - _2424;
        float _2475 = (0.5 / (((_2207 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2465) + _2424) * _2438))) * _2438;
        float _4418 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2399 = (((((_2458 * _2229) + _576) * cbLight._m0[_2409].x) * _2477) * _2478) + _2341;
        _2401 = (((((_2458 * _2231) + _578) * cbLight._m0[_2409].y) * _2477) * _2478) + _2342;
        _2403 = (((((_2458 * _2232) + _579) * cbLight._m0[_2409].z) * _2477) * _2478) + _2343;
    }
    float _2509;
    float _2511;
    float _2513;
    if (_2116)
    {
        _2509 = _2399;
        _2511 = _2401;
        _2513 = _2403;
    }
    else
    {
        uint _2520 = _1931 + 3u;
        uint _2524 = _1931 + 11u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _413) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _491;
        float _2541 = cbLight._m0[_2520].y + _492;
        float _2542 = cbLight._m0[_2520].z + _493;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2520].xyz));
        float _4434 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2554 = dot(vec3(_410, _411, _412), vec3(_2547, _2548, _2549));
        float _4445 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4456 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
        float _2580 = 1.0 - _2539;
        float _2590 = (0.5 / (((_2207 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2580) + _2539) * _2553))) * _2553;
        float _4467 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2509 = (((((_2573 * _2229) + _576) * cbLight._m0[_2524].x) * _2592) * _2593) + _2399;
        _2511 = (((((_2573 * _2231) + _578) * cbLight._m0[_2524].y) * _2592) * _2593) + _2401;
        _2513 = (((((_2573 * _2232) + _579) * cbLight._m0[_2524].z) * _2592) * _2593) + _2403;
    }
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_1929.y == 0u)
    {
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _512) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _511) / _2615)));
        float _2636 = (log2(_1707 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
        }
        else
        {
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            uint _2883 = 0u;
            uint _2892;
            bool _2893;
            for (;;)
            {
                _2892 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                _2893 = _2892 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2893)
                {
                    frontier_phi_73_pred = _2882;
                    frontier_phi_73_pred_1 = _2881;
                    frontier_phi_73_pred_2 = _2880;
                    frontier_phi_73_pred_3 = _2879;
                    frontier_phi_73_pred_4 = _2878;
                    frontier_phi_73_pred_5 = _2877;
                }
                else
                {
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    uint _3028;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2892;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    for (;;)
                    {
                        uint _3032 = uint(findLSB(_3028)) + (_2883 << 5u);
                        uint _3029 = (_3028 + 4294967295u) & _3028;
                        uint _3034 = _3032 * 48u;
                        vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3054 = (_3032 * 48u) + 4u;
                        vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 3u)).x));
                        uint _3073 = (_3032 * 48u) + 8u;
                        vec3 _3084 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x));
                        float _3088 = _3048.x - _1705;
                        float _3089 = _3048.y - _1706;
                        float _3090 = _3048.z - _1707;
                        float _3091 = dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090));
                        float _3094 = inversesqrt(_3091);
                        float _3095 = _3094 * _3088;
                        float _3096 = _3094 * _3089;
                        float _3097 = _3094 * _3090;
                        float _3098 = dot(vec3(_532, _535, _538), vec3(_3095, _3096, _3097));
                        float _3103 = 1.0 - (_3091 * _3048.w);
                        float _4493 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3104 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3105 = sqrt(_3091) * _3067.w;
                        float _3108 = 1.39999997615814208984375 / (_3105 + 1.39999997615814208984375);
                        float _3109 = _3108 * _3108;
                        float _3112 = ((1.0 - _3109) * _3098) + _3109;
                        float _3115 = _3105 * _3105;
                        float _3119 = ((isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))) * _3104) / ((_3115 * 0.699999988079071044921875) + 1.0);
                        float _3123 = (-0.0) - _1705;
                        float _3124 = (-0.0) - _1706;
                        float _3125 = (-0.0) - _1707;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3139 = exp2(log2(1.0 / ((_3115 * 3.5) + 5.0)) * 0.25);
                        float _3140 = 1.0 - _607;
                        float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                        float _3148 = _3147 * _3147;
                        float _3149 = _3148 * _3148;
                        float _3150 = _3130 + _3095;
                        float _3151 = _3131 + _3096;
                        float _3152 = _3132 + _3097;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3160 = dot(vec3(_532, _535, _538), vec3(_3130, _3131, _3132));
                        float _4509 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3164 = dot(vec3(_532, _535, _538), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                        float _4520 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                        float _3172 = _3108 * _3148;
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3098) + _3173;
                        float _4531 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3178 = 1.0 - _3148;
                        float _3188 = (0.5 / (((_3177 * ((_3163 * _3178) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3148) * _3163))) * _3177;
                        float _4542 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3199 = (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3171 * _3171) * ((_3115 * 2.1991131305694580078125) + 3.141590118408203125))) * _3104;
                        _2952 = (_3119 * _3067.x) + _3025;
                        _2953 = (_3119 * _3067.y) + _3026;
                        _2954 = (_3119 * _3067.z) + _3027;
                        _2949 = (_3199 * _3084.x) + _3022;
                        _2950 = (_3199 * _3084.y) + _3023;
                        _2951 = (_3199 * _3084.z) + _3024;
                        if (_3029 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _3029;
                        }
                    }
                    frontier_phi_73_pred = _2954;
                    frontier_phi_73_pred_1 = _2953;
                    frontier_phi_73_pred_2 = _2952;
                    frontier_phi_73_pred_3 = _2951;
                    frontier_phi_73_pred_4 = _2950;
                    frontier_phi_73_pred_5 = _2949;
                }
                _2736 = frontier_phi_73_pred;
                _2734 = frontier_phi_73_pred_1;
                _2732 = frontier_phi_73_pred_2;
                _2730 = frontier_phi_73_pred_3;
                _2728 = frontier_phi_73_pred_4;
                _2726 = frontier_phi_73_pred_5;
                uint _2884 = _2883 + 1u;
                if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2877 = _2726;
                    _2878 = _2728;
                    _2879 = _2730;
                    _2880 = _2732;
                    _2881 = _2734;
                    _2882 = _2736;
                    _2883 = _2884;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
        }
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.z;
        uint _2742 = (_2740 >> 8u) & 15u;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((4294967295u << _2742) & _2646) == 0u)
        {
            _2845 = _2725;
            _2847 = _2727;
            _2849 = _2729;
            _2851 = _2731;
            _2853 = _2733;
            _2855 = _2735;
        }
        else
        {
            float _2870 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
            float _2871 = _2870 * _1705;
            float _2872 = _2870 * _1706;
            float _2873 = _2870 * _1707;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2742 < ((_2740 >> 12u) & 15u))
            {
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _3005 = _2725;
                float _3006 = _2727;
                float _3007 = _2729;
                float _3008 = _2731;
                float _3009 = _2733;
                float _3010 = _2735;
                uint _3011 = _2742;
                uint _3020;
                bool _3021;
                for (;;)
                {
                    _3020 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                    _3021 = _3020 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3021)
                    {
                        frontier_phi_84_pred = _3009;
                        frontier_phi_84_pred_1 = _3008;
                        frontier_phi_84_pred_2 = _3007;
                        frontier_phi_84_pred_3 = _3006;
                        frontier_phi_84_pred_4 = _3005;
                        frontier_phi_84_pred_5 = _3010;
                    }
                    else
                    {
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3226 = _3005;
                        float _3227 = _3006;
                        float _3228 = _3007;
                        float _3229 = _3008;
                        float _3230 = _3009;
                        float _3231 = _3010;
                        uint _3232 = _3020;
                        uint _3233;
                        vec4 _3258;
                        float _3259;
                        vec4 _3274;
                        vec3 _3286;
                        vec4 _3302;
                        vec4 _3318;
                        float _3365;
                        bool _3366;
                        for (;;)
                        {
                            uint _3243 = ((_3011 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3232));
                            _3233 = (_3232 + 4294967295u) & _3232;
                            uint _3245 = _3243 * 40u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3259 = _3258.w;
                            uint _3261 = (_3243 * 40u) + 4u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3243 * 40u) + 8u;
                            _3286 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x));
                            uint _3289 = (_3243 * 40u) + 16u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3305 = (_3243 * 40u) + 20u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3321 = (_3243 * 40u) + 24u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3340 = (_3243 * 40u) + 28u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3365 = fma(_1707, _3353.z, fma(_1706, _3353.y, _3353.x * _1705)) + _3353.w;
                            _3366 = !((fma(_1707, _3334.z, fma(_1706, _3334.y, _3334.x * _1705)) + _3334.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3366)
                            {
                                float _3393 = _3258.x - _1705;
                                float _3394 = _3258.y - _1706;
                                float _3395 = _3258.z - _1707;
                                float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                                float _3399 = inversesqrt(_3396);
                                float _3400 = _3399 * _3393;
                                float _3401 = _3399 * _3394;
                                float _3402 = _3399 * _3395;
                                float _3406 = 1.0 - (_3396 / (_3259 * _3259));
                                float _4553 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3411 = sqrt(_3396) * _3274.w;
                                float _3413 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                                float _3414 = _3413 * _3413;
                                float _3417 = ((1.0 - _3414) * dot(vec3(_3400, _3401, _3402), vec3(_532, _535, _538))) + _3414;
                                float _3420 = _3411 * _3411;
                                float _3424 = (fma(_1707, _3302.z, fma(_1706, _3302.y, _3302.x * _1705)) + _3302.w) / _3365;
                                float _3425 = (fma(_1707, _3318.z, fma(_1706, _3318.y, _3318.x * _1705)) + _3318.w) / _3365;
                                float _3429 = 1.0 - dot(vec2(_3424, _3425), vec2(_3424, _3425));
                                float _4569 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3431 = _3430 * (((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3407) / ((_3420 * 0.699999988079071044921875) + 1.0));
                                float _3443 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                                float _3444 = 1.0 - _607;
                                float _3451 = sqrt(1.0 - ((1.0 - (_3444 * _3444)) * (1.0 - (_3443 * _3443))));
                                float _3452 = _3451 * _3451;
                                float _3453 = _3452 * _3452;
                                float _3454 = _3400 - _2871;
                                float _3455 = _3401 - _2872;
                                float _3456 = _3402 - _2873;
                                float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                                float _3464 = dot(vec3(_532, _535, _538), vec3((-0.0) - _2871, (-0.0) - _2872, (-0.0) - _2873));
                                float _4580 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3468 = dot(vec3(_532, _535, _538), vec3(_3460 * _3454, _3460 * _3455, _3460 * _3456));
                                float _4591 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3471 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3475 = ((_3471 * _3471) * (_3453 + (-1.0))) + 1.0;
                                float _3476 = _3413 * _3452;
                                float _3477 = _3476 * _3476;
                                float _3483 = ((1.0 - _3477) * dot(vec3(_532, _535, _538), vec3(_3400, _3401, _3402))) + _3477;
                                float _4602 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3485 = 1.0 - _3452;
                                float _3495 = (0.5 / (((_3484 * ((_3467 * _3485) + _3452)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3452) * _3467))) * _3484;
                                float _4613 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3505 = (_3430 * _3407) * (((_3453 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3475 * _3475) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3431 * _3274.y;
                                frontier_phi_90_pred_1 = _3431 * _3274.x;
                                frontier_phi_90_pred_2 = _3505 * _3286.z;
                                frontier_phi_90_pred_3 = _3505 * _3286.y;
                                frontier_phi_90_pred_4 = _3505 * _3286.x;
                                frontier_phi_90_pred_5 = _3431 * _3274.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3513 = frontier_phi_90_pred;
                            _3512 = frontier_phi_90_pred_1;
                            _3511 = frontier_phi_90_pred_2;
                            _3510 = frontier_phi_90_pred_3;
                            _3509 = frontier_phi_90_pred_4;
                            _3514 = frontier_phi_90_pred_5;
                            _3216 = _3512 + _3229;
                            _3217 = _3513 + _3230;
                            _3218 = _3514 + _3231;
                            _3213 = _3509 + _3226;
                            _3214 = _3510 + _3227;
                            _3215 = _3511 + _3228;
                            if (_3233 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3233;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3217;
                        frontier_phi_84_pred_1 = _3216;
                        frontier_phi_84_pred_2 = _3215;
                        frontier_phi_84_pred_3 = _3214;
                        frontier_phi_84_pred_4 = _3213;
                        frontier_phi_84_pred_5 = _3218;
                    }
                    _2854 = frontier_phi_84_pred;
                    _2852 = frontier_phi_84_pred_1;
                    _2850 = frontier_phi_84_pred_2;
                    _2848 = frontier_phi_84_pred_3;
                    _2846 = frontier_phi_84_pred_4;
                    _2856 = frontier_phi_84_pred_5;
                    uint _3012 = _3011 + 1u;
                    if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3005 = _2846;
                        _3006 = _2848;
                        _3007 = _2850;
                        _3008 = _2852;
                        _3009 = _2854;
                        _3010 = _2856;
                        _3011 = _3012;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2856;
                frontier_phi_65_66_ladder_1 = _2852;
                frontier_phi_65_66_ladder_2 = _2854;
                frontier_phi_65_66_ladder_3 = _2848;
                frontier_phi_65_66_ladder_4 = _2846;
                frontier_phi_65_66_ladder_5 = _2850;
            }
            else
            {
                frontier_phi_65_66_ladder = _2735;
                frontier_phi_65_66_ladder_1 = _2731;
                frontier_phi_65_66_ladder_2 = _2733;
                frontier_phi_65_66_ladder_3 = _2727;
                frontier_phi_65_66_ladder_4 = _2725;
                frontier_phi_65_66_ladder_5 = _2729;
            }
            _2845 = frontier_phi_65_66_ladder_4;
            _2847 = frontier_phi_65_66_ladder_3;
            _2849 = frontier_phi_65_66_ladder_5;
            _2851 = frontier_phi_65_66_ladder_1;
            _2853 = frontier_phi_65_66_ladder_2;
            _2855 = frontier_phi_65_66_ladder;
        }
        float _2860 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
        _2658 = (_2860 * _2851) + _2171;
        _2660 = (_2860 * _2853) + _2173;
        _2662 = (_2860 * _2855) + _2175;
        _2664 = ((_2845 * _576) * _2860) + _2509;
        _2666 = ((_2847 * _578) * _2860) + _2511;
        _2668 = ((_2849 * _579) * _2860) + _2513;
    }
    else
    {
        _2658 = _2171;
        _2660 = _2173;
        _2662 = _2175;
        _2664 = _2509;
        _2666 = _2511;
        _2668 = _2513;
    }
    float _4629 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4640 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4651 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _2685 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2658 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _591))) + ((_2664 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    float _2686 = ((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2660 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _591))) + ((_2666 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    float _2687 = ((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2662 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _591))) + ((_2668 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    uint _2688 = _551 + 6u;
    float _2696 = _511 / cbSceneParam._m0[86u].x;
    float _2697 = _512 / cbSceneParam._m0[86u].y;
    vec4 _2711 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2713 = _2711.x;
    float _2714 = _2711.y;
    float _2715 = _2711.z;
    float _2716 = _2711.w;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2750 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2751 = _2750 / _433;
        float _2762 = _2751 * _484;
        float _2763 = _485 * _2751;
        float _2764 = (-0.0) - _2763;
        float _2765 = _2751 * _486;
        float _2767 = (cbSceneParam._m0[77u].w * _2764) / _2750;
        float _2768 = _2767 + cbSceneParam._m0[79u].w;
        float _2769 = cbSceneParam._m0[79u].w - _2763;
        float _2775 = sqrt(((_2762 * _2762) + (_2763 * _2763)) + (_2765 * _2765));
        float _2778 = (1.0 - (cbSceneParam._m0[77u].w / _2750)) * _2775;
        float _2783 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2785 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2962;
        if (abs((_2764 - _2767) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2962 = ((((_2768 > 0.0) ? exp2(_2783 * _2768) : (2.0 - exp2(_2785 * _2768))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2778;
        }
        else
        {
            float _2906 = 1.0 / cbSceneParam._m0[80u].x;
            float _2907 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : max(_2768, _2769));
            float _2908 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : min(_2768, _2769));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            _2962 = ((abs(_2775 / _2764) * cbSceneParam._m0[80u].y) * ((((_2917 - _2918) * 2.0) - ((exp2(_2783 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)))) - exp2(_2783 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))))) * _2906)) - ((exp2(_2785 * _2917) - exp2(_2785 * _2918)) * _2906))) + (_2778 * cbSceneParam._m0[80u].z);
        }
        vec4 _2964 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, 1.0), 0.0);
        float _2973 = exp2((_2962 * (-1.44269502162933349609375)) * (1.0 - _2964.w));
        float _2974 = log2(_2973);
        float _2990 = log2(_2716);
        _2787 = (exp2(_2990 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].x)) * _2964.x) / cbSceneParam._m0[78u].x)) + _2713;
        _2789 = (exp2(_2990 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].y)) * _2964.y) / cbSceneParam._m0[78u].y)) + _2714;
        _2791 = (exp2(_2990 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].z)) * _2964.z) / cbSceneParam._m0[78u].z)) + _2715;
        _2793 = _2973 * _2716;
    }
    else
    {
        _2787 = _2713;
        _2789 = _2714;
        _2791 = _2715;
        _2793 = _2716;
    }
    bool _3000;
    vec4 _2803;
    vec4 _2825;
    float _2827;
    float _2831;
    float _2832;
    float _2833;
    float _2834;
    bool _2844;
    for (;;)
    {
        _2803 = cbMatDynParam._m0[0u];
        float _2805 = roundEven(_2803.y);
        bool _2806 = _2805 == 3.0;
        float _2807 = log2(_2793);
        float _2814 = exp2(_2807 * cbSceneParam._m0[78u].x) * _2685;
        float _2815 = exp2(_2807 * cbSceneParam._m0[78u].y) * _2686;
        float _2816 = exp2(_2807 * cbSceneParam._m0[78u].z) * _2687;
        float _2823 = _500 + (-0.5);
        _2825 = cbMtdParam._m0[1u];
        _2827 = _2825.y * _2823;
        float _2830 = (_2805 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2831 = _2830 * (_2806 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2787)));
        _2832 = _2830 * (_2806 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2789)));
        _2833 = _2830 * (_2806 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2791)));
        _2834 = _2823 * 0.999000012874603271484375;
        _2844 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2844)
        {
            if ((cbInstanceData._m0[_551 + 7u].x + _2834) < 0.5)
            {
                _3000 = true;
                break;
            }
        }
        uint _2941 = _552 + uint(_2803.w);
        if ((cbInstanceData._m0[_2941].w < 1.0) && ((cbInstanceData._m0[_2941].w + _2834) < 0.5))
        {
            _3000 = true;
            break;
        }
        if ((_2827 + 1.0) < _2825.x)
        {
            _3000 = true;
            break;
        }
        _3000 = false;
        break;
    }
    float _3204;
    if (_3000)
    {
        discard_state = true;
        _3204 = 0.0;
    }
    else
    {
        _3204 = cbInstanceData._m0[_2688].w;
    }
    SV_Target.x = _2831;
    SV_Target.y = _2832;
    SV_Target.z = _2833;
    SV_Target.w = _3204;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2688].w;
    discard_exit();
}


