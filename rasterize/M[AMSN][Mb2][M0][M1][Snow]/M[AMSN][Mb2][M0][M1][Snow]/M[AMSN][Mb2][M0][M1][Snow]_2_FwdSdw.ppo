#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1028;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3625 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3636 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    float _323 = fma(_320, _232, fma(_314, _225, _312 * _211));
    float _326 = fma(_320, _233, fma(_314, _226, _312 * _212));
    float _329 = fma(_320, _234, fma(_314, _227, _312 * _213));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _361 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _365 = (cbMtdParam._m0[11u].z + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_361.x * cbMtdParam._m0[11u].w);
    float _3647 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _388 = _383.x * cbMtdParam._m0[9u].x;
    float _389 = _383.y * cbMtdParam._m0[9u].y;
    float _390 = _383.z * cbMtdParam._m0[9u].z;
    vec4 _409 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _423 = (((_409.x * cbMtdParam._m0[10u].x) - _388) * _299) + _388;
    float _424 = (((_409.y * cbMtdParam._m0[10u].y) - _389) * _299) + _389;
    float _425 = (((_409.z * cbMtdParam._m0[10u].z) - _390) * _299) + _390;
    vec4 _438 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _449 = ((_438.x - _423) * _366) + _423;
    float _450 = ((_438.y - _424) * _366) + _424;
    float _451 = ((_438.z - _425) * _366) + _425;
    vec4 _464 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _471 = (_464.x * 2.0) + (-1.0);
    float _472 = (_464.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3658 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _481 = ((_464.z - _308) * _366) + _308;
    float _488 = ((_471 - _312) * _366) + _312;
    float _489 = ((_472 - _314) * _366) + _314;
    float _490 = ((sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) - _320) * _366) + _320;
    float _493 = fma(_490, _232, fma(_489, _225, _488 * _211));
    float _496 = fma(_490, _233, fma(_489, _226, _488 * _212));
    float _499 = fma(_490, _234, fma(_489, _227, _488 * _213));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3669 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _507 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3691 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3702 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _526 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _576 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _566);
    float _577 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _566);
    float _578 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _566);
    float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
    float _583 = _576 * _582;
    float _584 = _577 * _582;
    float _585 = _578 * _582;
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _612 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _615 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _618 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    uint _631 = uint(roundEven(NORMAL.w)) * 13u;
    uint _633 = (_631 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _639 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_633].x;
    float _640 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_633].y;
    float _641 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_633].z;
    float _3713 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    vec4 _653 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _656 = _653.x * TEXCOORD_9.w;
    float _657 = dot(vec3(_504, _505, _506), vec3(_583, _584, _585));
    float _660 = _657 * 2.0;
    float _664 = (_660 * _504) - _583;
    float _665 = (_660 * _505) - _584;
    float _666 = (_660 * _506) - _585;
    float _670 = abs(dot(vec3(_583, _584, _585), vec3(_504, _505, _506)));
    float _3746 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _672 = sqrt(_507);
    float _685 = exp2((_672 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_672 * 3.0));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1027;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _752 = fma(_725, cbModelParam._m0[26u].z, fma(_721, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717));
        float _756 = fma(_725, cbModelParam._m0[27u].z, fma(_721, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717));
        float _760 = fma(_725, cbModelParam._m0[28u].z, fma(_721, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717));
        float _785 = _717 + _504;
        float _786 = _721 + _505;
        float _787 = _725 + _506;
        float _797 = fma(_787, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785)) - _752;
        float _798 = fma(_787, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785)) - _756;
        float _799 = fma(_787, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785)) - _760;
        float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
        float _816 = ((_803 * _797) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_752 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_803 * _798) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_756 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_803 * _799) / cbModelParam._m0[34u].z) + ((((((_760 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        float _855 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_821.x + (-0.5));
        float _857 = _855 * (_821.y + (-0.5));
        float _858 = _855 * (_821.z + (-0.5));
        float _865 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_828.x + (-0.5));
        float _867 = _865 * (_828.y + (-0.5));
        float _868 = _865 * (_828.z + (-0.5));
        float _875 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_835.x + (-0.5));
        float _877 = _875 * (_835.y + (-0.5));
        float _878 = _875 * (_835.z + (-0.5));
        float _885 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_842.x + (-0.5));
        float _887 = _885 * (_842.y + (-0.5));
        float _888 = _885 * (_842.z + (-0.5));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = _856 * 0.5;
        float _893 = _866 * 0.5;
        float _894 = _876 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _909 = (dot(vec3(_504, _505, _506), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _919 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3794 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_921 + 1.0))) + _926) * _889;
        float _936 = _857 * 0.5;
        float _937 = _867 * 0.5;
        float _938 = _877 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_504, _505, _506), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3827 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_963 + 1.0))) + _968) * _890;
        float _978 = _858 * 0.5;
        float _979 = _868 * 0.5;
        float _980 = _878 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_504, _505, _506), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3860 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1005 + 1.0))) + _1010) * _891;
        _1027 = _858;
        _1029 = _857;
        _1030 = _856;
        _1031 = _868;
        _1032 = _867;
        _1033 = _866;
        _1034 = _878;
        _1035 = _877;
        _1036 = _876;
        _1037 = _891;
        _1038 = _890;
        _1039 = _889;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = _1028;
        _1029 = _1028;
        _1030 = _1028;
        _1031 = _1028;
        _1032 = _1028;
        _1033 = _1028;
        _1034 = _1028;
        _1035 = _1028;
        _1036 = _1028;
        _1037 = _1028;
        _1038 = _1028;
        _1039 = _1028;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_725, cbModelParam._m0[30u].z, fma(_721, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _717));
        float _1072 = fma(_725, cbModelParam._m0[31u].z, fma(_721, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _717));
        float _1076 = fma(_725, cbModelParam._m0[32u].z, fma(_721, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _717));
        float _1099 = _717 + _504;
        float _1100 = _721 + _505;
        float _1101 = _725 + _506;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_504, _505, _506), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3923 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_504, _505, _506), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3956 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_504, _505, _506), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3989 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1028;
        _1338 = _1028;
        _1339 = _1028;
        _1340 = _1028;
        _1341 = _1028;
        _1342 = _1028;
        _1343 = _1028;
        _1344 = _1028;
        _1345 = _1028;
        _1346 = _1028;
        _1347 = _1028;
        _1348 = _1028;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1041)) + _1041;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1042)) + _1042;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _664 * 0.5;
    float _1406 = _665 * 0.5;
    float _1407 = _666 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1027, _1031, _1034, _1037));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_725, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_725, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_725, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_666, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664));
        float _1537 = fma(_666, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664));
        float _1540 = fma(_666, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1568 = frontier_phi_16_14_ladder;
        }
        float _1741;
        if (_1537 > 0.0)
        {
            _1741 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1741 = frontier_phi_25_21_ladder;
        }
        float _2036;
        if (_1540 > 0.0)
        {
            _2036 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2036 = frontier_phi_37_32_ladder;
        }
        float _2038 = isnan(_1741) ? _1568 : (isnan(_1568) ? _1741 : min(_1568, _1741));
        float _2039 = isnan(_2036) ? _2038 : (isnan(_2038) ? _2036 : min(_2038, _2036));
        float _2043 = (_2039 * _1534) + _1523;
        float _2044 = (_2039 * _1537) + _1527;
        float _2045 = (_2039 * _1540) + _1531;
        float _2046 = _2039 * 9.9999997473787516355514526367188e-05;
        float _2048 = (-1.0) - _2046;
        float _2050 = _2046 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2045 > _2050) || ((_2045 < _2048) || ((_2044 > _2050) || ((_2044 < _2048) || ((_2043 < _2048) || (_2043 > _2050))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2045, cbModelParam._m0[9u].z, fma(_2044, cbModelParam._m0[9u].y, _2043 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2045, cbModelParam._m0[10u].z, fma(_2044, cbModelParam._m0[10u].y, _2043 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2045, cbModelParam._m0[11u].z, fma(_2044, cbModelParam._m0[11u].y, _2043 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_15_37_ladder = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2190.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2190.z * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_15_37_ladder_1;
        _1558 = frontier_phi_15_37_ladder;
        _1560 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_664, _665, _666), _1474);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1622 = fma(_725, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717)) + cbModelParam._m0[21u].w;
        float _1626 = fma(_725, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717)) + cbModelParam._m0[22u].w;
        float _1630 = fma(_725, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717)) + cbModelParam._m0[23u].w;
        float _1633 = fma(_666, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664));
        float _1636 = fma(_666, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664));
        float _1639 = fma(_666, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664));
        float _1746;
        if (_1633 > 0.0)
        {
            _1746 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1746 = frontier_phi_27_23_ladder;
        }
        float _2063;
        if (_1636 > 0.0)
        {
            _2063 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2063 = frontier_phi_39_34_ladder;
        }
        float _2390;
        if (_1639 > 0.0)
        {
            _2390 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2390 = frontier_phi_49_46_ladder;
        }
        float _2392 = isnan(_2063) ? _1746 : (isnan(_1746) ? _2063 : min(_1746, _2063));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1633) + _1622;
        float _2398 = (_2393 * _1636) + _1626;
        float _2399 = (_2393 * _1639) + _1630;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_24_49_ladder = _2517.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2517.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2517.x * cbModelParam._m0[1u].z;
        }
        _1658 = frontier_phi_24_49_ladder_2;
        _1660 = frontier_phi_24_49_ladder_1;
        _1662 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_664, _665, _666), _1565);
        _1658 = _1642.x * cbModelParam._m0[1u].z;
        _1660 = _1642.y * cbModelParam._m0[1u].z;
        _1662 = _1642.z * cbModelParam._m0[1u].z;
    }
    float _1674 = ((((1.0 - _685) * ((_672 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_685 * _672)) * _656;
    float _1675 = _1674 * ((cbModelParam._m0[1u].w * (_1658 - _1556)) + _1556);
    float _1676 = _1674 * ((cbModelParam._m0[1u].w * (_1660 - _1558)) + _1558);
    float _1677 = _1674 * ((cbModelParam._m0[1u].w * (_1662 - _1560)) + _1560);
    float _1680 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1676, cbSceneParam._m0[89u].y, _1675 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1676, cbSceneParam._m0[90u].y, _1675 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1676, cbSceneParam._m0[91u].y, _1675 * cbSceneParam._m0[91u].x));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1733 = _1720 / _1732;
    float _1734 = _1724 / _1732;
    float _1735 = _1728 / _1732;
    float _1882;
    float _1883;
    float _1884;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1762 = ((uint(_1735 > cbSceneParam._m0[59u].y) + uint(_1735 > cbSceneParam._m0[59u].x)) + uint(_1735 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1763 = _1762 + 43u;
        uint _1771 = _1762 + 44u;
        uint _1779 = _1762 + 45u;
        uint _1787 = _1762 + 46u;
        float _1798 = fma(_1732, cbSceneParam._m0[_1763].w, fma(_1728, cbSceneParam._m0[_1763].z, fma(_1724, cbSceneParam._m0[_1763].y, _1720 * cbSceneParam._m0[_1763].x)));
        float _1802 = fma(_1732, cbSceneParam._m0[_1771].w, fma(_1728, cbSceneParam._m0[_1771].z, fma(_1724, cbSceneParam._m0[_1771].y, _1720 * cbSceneParam._m0[_1771].x)));
        float _1810 = fma(_1732, cbSceneParam._m0[_1787].w, fma(_1728, cbSceneParam._m0[_1787].z, fma(_1724, cbSceneParam._m0[_1787].y, _1720 * cbSceneParam._m0[_1787].x)));
        float _1815 = cbSceneParam._m0[33u].z * _1810;
        float _1817 = cbSceneParam._m0[33u].w * _1810;
        float _1820 = fma(_1732, cbSceneParam._m0[_1779].w, fma(_1728, cbSceneParam._m0[_1779].z, fma(_1724, cbSceneParam._m0[_1779].y, _1720 * cbSceneParam._m0[_1779].x))) / _1810;
        float _1868 = (cbSceneParam._m0[33u].x - sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735))) * cbSceneParam._m0[33u].y;
        float _4115 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1875 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 + _1798) / _1810, (_1817 + _1802) / _1810), _1820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1817 + _1798) / _1810, (_1802 - _1815) / _1810), _1820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1798 - _1815) / _1810, (_1802 - _1817) / _1810), _1820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1798 - _1817) / _1810, (_1815 + _1802) / _1810), _1820), 0.0)).x), vec4(0.25)));
        _1882 = 1.0 - (_1875 * cbSceneParam._m0[34u].x);
        _1883 = 1.0 - (_1875 * cbSceneParam._m0[34u].y);
        _1884 = 1.0 - (_1875 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1882 = 1.0;
        _1883 = 1.0;
        _1884 = 1.0;
    }
    float _1948;
    float _1950;
    float _1952;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1936 = fma(_1732, cbSceneParam._m0[63u].w, fma(_1728, cbSceneParam._m0[63u].z, fma(_1724, cbSceneParam._m0[63u].y, _1720 * cbSceneParam._m0[63u].x)));
        float _1937 = fma(_1732, cbSceneParam._m0[60u].w, fma(_1728, cbSceneParam._m0[60u].z, fma(_1724, cbSceneParam._m0[60u].y, _1720 * cbSceneParam._m0[60u].x))) / _1936;
        float _1938 = fma(_1732, cbSceneParam._m0[61u].w, fma(_1728, cbSceneParam._m0[61u].z, fma(_1724, cbSceneParam._m0[61u].y, _1720 * cbSceneParam._m0[61u].x))) / _1936;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1937 >= cbSceneParam._m0[64u].x) && (_1938 >= cbSceneParam._m0[64u].y)) && (_1937 <= cbSceneParam._m0[64u].z)) && (_1938 <= cbSceneParam._m0[64u].w))
        {
            float _2076 = fma(_1732, cbSceneParam._m0[62u].w, fma(_1728, cbSceneParam._m0[62u].z, fma(_1724, cbSceneParam._m0[62u].y, _1720 * cbSceneParam._m0[62u].x))) / _1936;
            float _2080 = isnan(cbSceneParam._m0[41u].w) ? _2076 : (isnan(_2076) ? cbSceneParam._m0[41u].w : max(_2076, cbSceneParam._m0[41u].w));
            float _2123 = (cbSceneParam._m0[33u].x - sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735))) * cbSceneParam._m0[33u].y;
            float _4131 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
            float _2130 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1937, cbSceneParam._m0[33u].w + _1938), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1937, _1938 - cbSceneParam._m0[33u].z), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1937 - cbSceneParam._m0[33u].z, _1938 - cbSceneParam._m0[33u].w), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1937 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1938), _2080), 0.0)).x), vec4(0.25)));
            float _2134 = 1.0 - (_2130 * cbSceneParam._m0[34u].x);
            float _2135 = 1.0 - (_2130 * cbSceneParam._m0[34u].y);
            float _2136 = 1.0 - (_2130 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2135) ? _1883 : (isnan(_1883) ? _2135 : min(_1883, _2135));
            frontier_phi_36_35_ladder_1 = isnan(_2136) ? _1884 : (isnan(_1884) ? _2136 : min(_1884, _2136));
            frontier_phi_36_35_ladder_2 = isnan(_2134) ? _1882 : (isnan(_1882) ? _2134 : min(_1882, _2134));
        }
        else
        {
            frontier_phi_36_35_ladder = _1883;
            frontier_phi_36_35_ladder_1 = _1884;
            frontier_phi_36_35_ladder_2 = _1882;
        }
        _1948 = frontier_phi_36_35_ladder_2;
        _1950 = frontier_phi_36_35_ladder;
        _1952 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1948 = _1882;
        _1950 = _1883;
        _1952 = _1884;
    }
    uvec4 _1957 = floatBitsToUint(cbInstanceData._m0[_631 + 5u]);
    uint _1959 = _1957.x * 14u;
    uint _1960 = _1959 + 13u;
    float _1967 = _656 + (-1.0);
    float _1972 = (cbLight._m0[_1960].x * _1967) + 1.0;
    float _1973 = (cbLight._m0[_1960].y * _1967) + 1.0;
    float _1974 = (cbLight._m0[_1960].z * _1967) + 1.0;
    float _1975 = (cbLight._m0[_1960].w * _1967) + 1.0;
    uint _1976 = _1959 + 5u;
    float _1982 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _1986 = _1959 + 4u;
    float _1995 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _1999 = _1959 | 1u;
    float _2010 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_504, _505, _506));
    float _2013 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_504, _505, _506));
    float _4167 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _4178 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2018 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _2020 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _2027 = ((cbLight._m0[_1976].x * _1982) * _2020) + (((cbLight._m0[_1986].x * _1948) * _1995) * _2018);
    float _2028 = ((_1982 * cbLight._m0[_1976].y) * _2020) + (((cbLight._m0[_1986].y * _1950) * _1995) * _2018);
    float _2029 = ((_1982 * cbLight._m0[_1976].z) * _2020) + (((cbLight._m0[_1986].z * _1952) * _1995) * _2018);
    uvec4 _2033 = floatBitsToUint(cbLight._m0[_1959 + 12u]);
    bool _2035 = _2033.x == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2035)
    {
        _2137 = _2027;
        _2139 = _2028;
        _2141 = _2029;
    }
    else
    {
        uint _2145 = _1959 + 6u;
        float _2161 = (dot(vec3(cbLight._m0[_1959 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2162 = _2161 * _2161;
        float _4189 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2163 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2164 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2137 = (((cbLight._m0[_2145].x * 0.3183098733425140380859375) * _2163) * _2164) + _2027;
        _2139 = (((cbLight._m0[_2145].y * 0.3183098733425140380859375) * _2163) * _2164) + _2028;
        _2141 = (((cbLight._m0[_2145].z * 0.3183098733425140380859375) * _2163) * _2164) + _2029;
    }
    bool _2144 = _2033.y == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2144)
    {
        _2199 = _2137;
        _2201 = _2139;
        _2203 = _2141;
    }
    else
    {
        uint _2361 = _1959 + 7u;
        float _2377 = (dot(vec3(cbLight._m0[_1959 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4205 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2380 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2199 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2137;
        _2201 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2139;
        _2203 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2141;
    }
    uint _2206 = _1959 + 8u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _507) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_1959].x + _583;
    float _2222 = cbLight._m0[_1959].y + _584;
    float _2223 = cbLight._m0[_1959].z + _585;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1959].xyz));
    float _4221 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2235 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2236 = dot(vec3(_504, _505, _506), vec3(_2228, _2229, _2230));
    float _4243 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2228, _2229, _2230));
    float _4254 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2220 * _2220;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2220;
    float _2271 = (0.5 / (((_2235 * ((_2234 * _2260) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2260) + _2220) * _2234))) * _2234;
    float _4265 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    uint _2287 = _1959 + 9u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _507) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_1999].x + _583;
    float _2301 = cbLight._m0[_1999].y + _584;
    float _2302 = cbLight._m0[_1999].z + _585;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1999].xyz));
    float _4276 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2314 = dot(vec3(_504, _505, _506), vec3(_2307, _2308, _2309));
    float _4287 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2307, _2308, _2309));
    float _4298 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2299 * _2299;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2336 = 1.0 - _2299;
    float _2346 = (0.5 / (((_2235 * ((_2313 * _2336) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2336) + _2299) * _2313))) * _2313;
    float _4309 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    float _2358 = (((_2335 * cbLight._m0[_2287].x) * _2348) * _1982) + ((((cbLight._m0[_2206].x * _1948) * _2259) * _2273) * _1995);
    float _2359 = (((_2335 * cbLight._m0[_2287].y) * _2348) * _1982) + ((((cbLight._m0[_2206].y * _1950) * _2259) * _2273) * _1995);
    float _2360 = (((_2335 * cbLight._m0[_2287].z) * _2348) * _1982) + ((((cbLight._m0[_2206].z * _1952) * _2259) * _2273) * _1995);
    float _2416;
    float _2418;
    float _2420;
    if (_2035)
    {
        _2416 = _2358;
        _2418 = _2359;
        _2420 = _2360;
    }
    else
    {
        uint _2422 = _1959 + 2u;
        uint _2426 = _1959 + 10u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _507) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _583;
        float _2443 = cbLight._m0[_2422].y + _584;
        float _2444 = cbLight._m0[_2422].z + _585;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2422].xyz));
        float _4320 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2456 = dot(vec3(_504, _505, _506), vec3(_2449, _2450, _2451));
        float _4331 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4342 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2478 = 1.0 - _2441;
        float _2488 = (0.5 / (((_2235 * ((_2455 * _2478) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2478) + _2441) * _2455))) * _2455;
        float _4353 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2416 = (((_2477 * cbLight._m0[_2426].x) * _2490) * _2491) + _2358;
        _2418 = (((_2477 * cbLight._m0[_2426].y) * _2490) * _2491) + _2359;
        _2420 = (((_2477 * cbLight._m0[_2426].z) * _2490) * _2491) + _2360;
    }
    float _2522;
    float _2524;
    float _2526;
    if (_2144)
    {
        _2522 = _2416;
        _2524 = _2418;
        _2526 = _2420;
    }
    else
    {
        uint _2533 = _1959 + 3u;
        uint _2537 = _1959 + 11u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _507) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _583;
        float _2554 = cbLight._m0[_2533].y + _584;
        float _2555 = cbLight._m0[_2533].z + _585;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2533].xyz));
        float _4369 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2567 = dot(vec3(_504, _505, _506), vec3(_2560, _2561, _2562));
        float _4380 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4391 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2589 = 1.0 - _2552;
        float _2599 = (0.5 / (((_2235 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2589) + _2552) * _2566))) * _2566;
        float _4402 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2522 = (((_2588 * cbLight._m0[_2537].x) * _2601) * _2602) + _2416;
        _2524 = (((_2588 * cbLight._m0[_2537].y) * _2601) * _2602) + _2418;
        _2526 = (((_2588 * cbLight._m0[_2537].z) * _2601) * _2602) + _2420;
    }
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_1957.y == 0u)
    {
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.x;
        uint _2635 = uint((float(_2623.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _2624))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _2624)));
        float _2645 = (log2(_1735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2646 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        uint _2649 = uint(isnan(14.0) ? _2646 : (isnan(_2646) ? 14.0 : min(_2646, 14.0)));
        uvec4 _2654 = texelFetch(g_lightClusterGridBuffer, int(((_2649 << 2u) + (_2635 << 6u)) >> 2u));
        uint _2655 = _2654.x;
        uint _2656 = _2623.z;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((((1u << ((_2656 >> 4u) & 15u)) + 4294967295u) & _2655) == 0u) || ((_2656 & 240u) == 0u))
        {
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
        }
        else
        {
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            uint _2884 = 0u;
            uint _2893;
            bool _2894;
            for (;;)
            {
                _2893 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_2884 << 2u)) >> 2u)).x;
                _2894 = _2893 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2894)
                {
                    frontier_phi_68_pred = _2883;
                    frontier_phi_68_pred_1 = _2882;
                    frontier_phi_68_pred_2 = _2881;
                    frontier_phi_68_pred_3 = _2879;
                    frontier_phi_68_pred_4 = _2878;
                    frontier_phi_68_pred_5 = _2880;
                }
                else
                {
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    uint _3008;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2883;
                    _3008 = _2893;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    for (;;)
                    {
                        uint _3012 = uint(findLSB(_3008)) + (_2884 << 5u);
                        uint _3009 = (_3008 + 4294967295u) & _3008;
                        uint _3014 = _3012 * 48u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3034 = (_3012 * 48u) + 4u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3053 = (_3012 * 48u) + 8u;
                        vec3 _3064 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x));
                        float _3068 = _3028.x - _1733;
                        float _3069 = _3028.y - _1734;
                        float _3070 = _3028.z - _1735;
                        float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                        float _3074 = inversesqrt(_3071);
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3078 = dot(vec3(_612, _615, _618), vec3(_3075, _3076, _3077));
                        float _3083 = 1.0 - (_3071 * _3028.w);
                        float _4428 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3085 = sqrt(_3071) * _3047.w;
                        float _3088 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3078) + _3089;
                        float _3095 = _3085 * _3085;
                        float _3099 = ((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3084) / ((_3095 * 0.699999988079071044921875) + 1.0);
                        float _3103 = (-0.0) - _1733;
                        float _3104 = (-0.0) - _1734;
                        float _3105 = (-0.0) - _1735;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3110 = _3109 * _3103;
                        float _3111 = _3109 * _3104;
                        float _3112 = _3109 * _3105;
                        float _3119 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                        float _3120 = 1.0 - _672;
                        float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                        float _3128 = _3127 * _3127;
                        float _3129 = _3128 * _3128;
                        float _3130 = _3110 + _3075;
                        float _3131 = _3111 + _3076;
                        float _3132 = _3112 + _3077;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3140 = dot(vec3(_612, _615, _618), vec3(_3110, _3111, _3112));
                        float _4444 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3144 = dot(vec3(_612, _615, _618), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                        float _4455 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                        float _3152 = _3088 * _3128;
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3078) + _3153;
                        float _4466 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3158 = 1.0 - _3128;
                        float _3168 = (0.5 / (((_3157 * ((_3143 * _3158) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3128) * _3143))) * _3157;
                        float _4477 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3179 = (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3151 * _3151) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125))) * _3084;
                        _2937 = (_3099 * _3047.x) + _3005;
                        _2938 = (_3099 * _3047.y) + _3006;
                        _2939 = (_3099 * _3047.z) + _3007;
                        _2934 = (_3179 * _3064.x) + _3002;
                        _2935 = (_3179 * _3064.y) + _3003;
                        _2936 = (_3179 * _3064.z) + _3004;
                        if (_3009 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _2939;
                            _3008 = _3009;
                        }
                    }
                    frontier_phi_68_pred = _2939;
                    frontier_phi_68_pred_1 = _2938;
                    frontier_phi_68_pred_2 = _2937;
                    frontier_phi_68_pred_3 = _2935;
                    frontier_phi_68_pred_4 = _2934;
                    frontier_phi_68_pred_5 = _2936;
                }
                _2745 = frontier_phi_68_pred;
                _2743 = frontier_phi_68_pred_1;
                _2741 = frontier_phi_68_pred_2;
                _2737 = frontier_phi_68_pred_3;
                _2735 = frontier_phi_68_pred_4;
                _2739 = frontier_phi_68_pred_5;
                uint _2885 = _2884 + 1u;
                if (_2885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2878 = _2735;
                    _2879 = _2737;
                    _2880 = _2739;
                    _2881 = _2741;
                    _2882 = _2743;
                    _2883 = _2745;
                    _2884 = _2885;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
        }
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.z;
        uint _2751 = (_2749 >> 8u) & 15u;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        if (((4294967295u << _2751) & _2655) == 0u)
        {
            _2846 = _2734;
            _2848 = _2736;
            _2850 = _2738;
            _2852 = _2740;
            _2854 = _2742;
            _2856 = _2744;
        }
        else
        {
            float _2871 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
            float _2872 = _2871 * _1733;
            float _2873 = _2871 * _1734;
            float _2874 = _2871 * _1735;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2751 < ((_2749 >> 12u) & 15u))
            {
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2985 = _2734;
                float _2986 = _2736;
                float _2987 = _2738;
                float _2988 = _2740;
                float _2989 = _2742;
                float _2990 = _2744;
                uint _2991 = _2751;
                uint _3000;
                bool _3001;
                for (;;)
                {
                    _3000 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                    _3001 = _3000 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3001)
                    {
                        frontier_phi_74_pred = _2987;
                        frontier_phi_74_pred_1 = _2986;
                        frontier_phi_74_pred_2 = _2985;
                        frontier_phi_74_pred_3 = _2990;
                        frontier_phi_74_pred_4 = _2989;
                        frontier_phi_74_pred_5 = _2988;
                    }
                    else
                    {
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3197 = _2985;
                        float _3198 = _2986;
                        float _3199 = _2987;
                        float _3200 = _2988;
                        float _3201 = _2989;
                        float _3202 = _2990;
                        uint _3203 = _3000;
                        uint _3204;
                        vec4 _3229;
                        float _3230;
                        vec4 _3245;
                        vec3 _3257;
                        vec4 _3273;
                        vec4 _3289;
                        float _3336;
                        bool _3337;
                        for (;;)
                        {
                            uint _3214 = ((_2991 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3203));
                            _3204 = (_3203 + 4294967295u) & _3203;
                            uint _3216 = _3214 * 40u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3230 = _3229.w;
                            uint _3232 = (_3214 * 40u) + 4u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3214 * 40u) + 8u;
                            _3257 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x));
                            uint _3260 = (_3214 * 40u) + 16u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3276 = (_3214 * 40u) + 20u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3292 = (_3214 * 40u) + 24u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3311 = (_3214 * 40u) + 28u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3336 = fma(_1735, _3324.z, fma(_1734, _3324.y, _3324.x * _1733)) + _3324.w;
                            _3337 = !((fma(_1735, _3305.z, fma(_1734, _3305.y, _3305.x * _1733)) + _3305.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3337)
                            {
                                float _3364 = _3229.x - _1733;
                                float _3365 = _3229.y - _1734;
                                float _3366 = _3229.z - _1735;
                                float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                                float _3370 = inversesqrt(_3367);
                                float _3371 = _3370 * _3364;
                                float _3372 = _3370 * _3365;
                                float _3373 = _3370 * _3366;
                                float _3377 = 1.0 - (_3367 / (_3230 * _3230));
                                float _4488 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3382 = sqrt(_3367) * _3245.w;
                                float _3384 = 1.39999997615814208984375 / (_3382 + 1.39999997615814208984375);
                                float _3385 = _3384 * _3384;
                                float _3388 = ((1.0 - _3385) * dot(vec3(_3371, _3372, _3373), vec3(_612, _615, _618))) + _3385;
                                float _3391 = _3382 * _3382;
                                float _3395 = (fma(_1735, _3273.z, fma(_1734, _3273.y, _3273.x * _1733)) + _3273.w) / _3336;
                                float _3396 = (fma(_1735, _3289.z, fma(_1734, _3289.y, _3289.x * _1733)) + _3289.w) / _3336;
                                float _3400 = 1.0 - dot(vec2(_3395, _3396), vec2(_3395, _3396));
                                float _4504 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3402 = _3401 * (((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3378) / ((_3391 * 0.699999988079071044921875) + 1.0));
                                float _3414 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                                float _3415 = 1.0 - _672;
                                float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                                float _3423 = _3422 * _3422;
                                float _3424 = _3423 * _3423;
                                float _3425 = _3371 - _2872;
                                float _3426 = _3372 - _2873;
                                float _3427 = _3373 - _2874;
                                float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                                float _3435 = dot(vec3(_612, _615, _618), vec3((-0.0) - _2872, (-0.0) - _2873, (-0.0) - _2874));
                                float _4515 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3439 = dot(vec3(_612, _615, _618), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                                float _4526 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3442 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                                float _3447 = _3384 * _3423;
                                float _3448 = _3447 * _3447;
                                float _3454 = ((1.0 - _3448) * dot(vec3(_612, _615, _618), vec3(_3371, _3372, _3373))) + _3448;
                                float _4537 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3456 = 1.0 - _3423;
                                float _3466 = (0.5 / (((_3455 * ((_3438 * _3456) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3423) * _3438))) * _3455;
                                float _4548 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3476 = (_3401 * _3378) * (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) / ((_3446 * _3446) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3476 * _3257.z;
                                frontier_phi_80_pred_1 = _3476 * _3257.y;
                                frontier_phi_80_pred_2 = _3476 * _3257.x;
                                frontier_phi_80_pred_3 = _3402 * _3245.z;
                                frontier_phi_80_pred_4 = _3402 * _3245.y;
                                frontier_phi_80_pred_5 = _3402 * _3245.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3482 = frontier_phi_80_pred;
                            _3481 = frontier_phi_80_pred_1;
                            _3480 = frontier_phi_80_pred_2;
                            _3485 = frontier_phi_80_pred_3;
                            _3484 = frontier_phi_80_pred_4;
                            _3483 = frontier_phi_80_pred_5;
                            _3187 = _3483 + _3200;
                            _3188 = _3484 + _3201;
                            _3189 = _3485 + _3202;
                            _3184 = _3480 + _3197;
                            _3185 = _3481 + _3198;
                            _3186 = _3482 + _3199;
                            if (_3204 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3204;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3186;
                        frontier_phi_74_pred_1 = _3185;
                        frontier_phi_74_pred_2 = _3184;
                        frontier_phi_74_pred_3 = _3189;
                        frontier_phi_74_pred_4 = _3188;
                        frontier_phi_74_pred_5 = _3187;
                    }
                    _2851 = frontier_phi_74_pred;
                    _2849 = frontier_phi_74_pred_1;
                    _2847 = frontier_phi_74_pred_2;
                    _2857 = frontier_phi_74_pred_3;
                    _2855 = frontier_phi_74_pred_4;
                    _2853 = frontier_phi_74_pred_5;
                    uint _2992 = _2991 + 1u;
                    if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2985 = _2847;
                        _2986 = _2849;
                        _2987 = _2851;
                        _2988 = _2853;
                        _2989 = _2855;
                        _2990 = _2857;
                        _2991 = _2992;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2855;
                frontier_phi_62_63_ladder_1 = _2853;
                frontier_phi_62_63_ladder_2 = _2851;
                frontier_phi_62_63_ladder_3 = _2857;
                frontier_phi_62_63_ladder_4 = _2849;
                frontier_phi_62_63_ladder_5 = _2847;
            }
            else
            {
                frontier_phi_62_63_ladder = _2742;
                frontier_phi_62_63_ladder_1 = _2740;
                frontier_phi_62_63_ladder_2 = _2738;
                frontier_phi_62_63_ladder_3 = _2744;
                frontier_phi_62_63_ladder_4 = _2736;
                frontier_phi_62_63_ladder_5 = _2734;
            }
            _2846 = frontier_phi_62_63_ladder_5;
            _2848 = frontier_phi_62_63_ladder_4;
            _2850 = frontier_phi_62_63_ladder_2;
            _2852 = frontier_phi_62_63_ladder_1;
            _2854 = frontier_phi_62_63_ladder;
            _2856 = frontier_phi_62_63_ladder_3;
        }
        float _2861 = isnan(1.0) ? _656 : (isnan(_656) ? 1.0 : min(_656, 1.0));
        _2667 = (_2861 * _2852) + _2199;
        _2669 = (_2861 * _2854) + _2201;
        _2671 = (_2861 * _2856) + _2203;
        _2673 = ((_2846 * 0.039999999105930328369140625) * _2861) + _2522;
        _2675 = ((_2848 * 0.039999999105930328369140625) * _2861) + _2524;
        _2677 = ((_2850 * 0.039999999105930328369140625) * _2861) + _2526;
    }
    else
    {
        _2667 = _2199;
        _2669 = _2201;
        _2671 = _2203;
        _2673 = _2522;
        _2675 = _2524;
        _2677 = _2526;
    }
    float _4564 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4575 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4586 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    uint _2697 = _631 + 6u;
    float _2705 = _591 / cbSceneParam._m0[86u].x;
    float _2706 = _592 / cbSceneParam._m0[86u].y;
    vec4 _2720 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, (log2((isnan(cbSceneParam._m0[77u].w) ? _526 : (isnan(_526) ? cbSceneParam._m0[77u].w : min(_526, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2722 = _2720.x;
    float _2723 = _2720.y;
    float _2724 = _2720.z;
    float _2725 = _2720.w;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_526 > cbSceneParam._m0[78u].w)
    {
        float _2759 = isnan(_526) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _526 : min(cbSceneParam._m0[80u].w, _526));
        float _2760 = _2759 / _526;
        float _2771 = _2760 * _576;
        float _2772 = _577 * _2760;
        float _2773 = (-0.0) - _2772;
        float _2774 = _2760 * _578;
        float _2776 = (cbSceneParam._m0[77u].w * _2773) / _2759;
        float _2777 = _2776 + cbSceneParam._m0[79u].w;
        float _2778 = cbSceneParam._m0[79u].w - _2772;
        float _2784 = sqrt(((_2771 * _2771) + (_2772 * _2772)) + (_2774 * _2774));
        float _2787 = (1.0 - (cbSceneParam._m0[77u].w / _2759)) * _2784;
        float _2792 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2794 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2947;
        if (abs((_2773 - _2776) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2947 = ((((_2777 > 0.0) ? exp2(_2792 * _2777) : (2.0 - exp2(_2794 * _2777))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2787;
        }
        else
        {
            float _2907 = 1.0 / cbSceneParam._m0[80u].x;
            float _2908 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : max(_2777, _2778));
            float _2909 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : min(_2777, _2778));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            _2947 = ((abs(_2784 / _2773) * cbSceneParam._m0[80u].y) * ((((_2918 - _2919) * 2.0) - ((exp2(_2792 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0)))) - exp2(_2792 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))))) * _2907)) - ((exp2(_2794 * _2918) - exp2(_2794 * _2919)) * _2907))) + (_2787 * cbSceneParam._m0[80u].z);
        }
        vec4 _2949 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, 1.0), 0.0);
        float _2958 = exp2((_2947 * (-1.44269502162933349609375)) * (1.0 - _2949.w));
        float _2959 = log2(_2958);
        float _2975 = log2(_2725);
        _2796 = (exp2(_2975 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2959 * cbSceneParam._m0[78u].x)) * _2949.x) / cbSceneParam._m0[78u].x)) + _2722;
        _2798 = (exp2(_2975 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2959 * cbSceneParam._m0[78u].y)) * _2949.y) / cbSceneParam._m0[78u].y)) + _2723;
        _2800 = (exp2(_2975 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2959 * cbSceneParam._m0[78u].z)) * _2949.z) / cbSceneParam._m0[78u].z)) + _2724;
        _2802 = _2958 * _2725;
    }
    else
    {
        _2796 = _2722;
        _2798 = _2723;
        _2800 = _2724;
        _2802 = _2725;
    }
    float _2814 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2815 = _2814 == 3.0;
    float _2816 = log2(_2802);
    float _2823 = exp2(_2816 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2667 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _656))) + ((_2673 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1463)) * cbPerFrame._m0[3u].x));
    float _2824 = exp2(_2816 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2669 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _656))) + ((_2675 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1463)) * cbPerFrame._m0[3u].x));
    float _2825 = exp2(_2816 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2671 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _656))) + ((_2677 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1463)) * cbPerFrame._m0[3u].x));
    float _2834 = (_2814 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2834 * (_2815 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2796)));
    SV_Target.y = _2834 * (_2815 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2798)));
    SV_Target.z = _2834 * (_2815 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2800)));
    SV_Target.w = cbInstanceData._m0[_2697].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2697].w;
}


