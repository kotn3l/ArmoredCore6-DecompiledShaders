#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _943;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _235 = _230.z;
    float _239 = (_230.x * 2.0) + (-1.0);
    float _241 = (_230.y * 2.0) + (-1.0);
    float _242 = dot(vec2(_239, _241), vec2(_239, _241));
    float _3279 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _248 = sqrt(1.0 - (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))));
    float _251 = fma(_248, _214, fma(_241, _207, _239 * _193));
    float _254 = fma(_248, _215, fma(_241, _208, _239 * _194));
    float _257 = fma(_248, _216, fma(_241, _209, _239 * _195));
    float _261 = inversesqrt(dot(vec3(_251, _254, _257), vec3(_251, _254, _257)));
    float _278 = cbMtdParam._m0[11u].z + dot(vec4(_261 * _251, _261 * _254, _261 * _257, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3290 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    vec4 _297 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _302 = _297.x * cbMtdParam._m0[9u].x;
    float _303 = _297.y * cbMtdParam._m0[9u].y;
    float _304 = _297.z * cbMtdParam._m0[9u].z;
    vec4 _317 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = ((_317.x - _302) * _279) + _302;
    float _329 = ((_317.y - _303) * _279) + _303;
    float _330 = ((_317.z - _304) * _279) + _304;
    vec4 _343 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _343.x;
    float _347 = _345 - (_345 * _279);
    vec4 _360 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = (_360.x * 2.0) + (-1.0);
    float _368 = (_360.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3301 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _377 = ((_360.z - _235) * _279) + _235;
    float _384 = ((_367 - _239) * _279) + _239;
    float _385 = ((_368 - _241) * _279) + _241;
    float _386 = ((sqrt(1.0 - (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) - _248) * _279) + _248;
    float _389 = fma(_386, _214, fma(_385, _207, _384 * _193));
    float _392 = fma(_386, _215, fma(_385, _208, _384 * _194));
    float _395 = fma(_386, _216, fma(_385, _209, _384 * _195));
    float _399 = inversesqrt(dot(vec3(_389, _392, _395), vec3(_389, _392, _395)));
    float _400 = _399 * _389;
    float _401 = _399 * _392;
    float _402 = _399 * _395;
    float _3312 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _403 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3334 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3345 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3356 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _407 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _423 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _464 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _474 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _464);
    float _475 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _464);
    float _476 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _464);
    float _480 = inversesqrt(dot(vec3(_474, _475, _476), vec3(_474, _475, _476)));
    float _481 = _474 * _480;
    float _482 = _475 * _480;
    float _483 = _476 * _480;
    float _489 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _490 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _509 = fma(_402, cbSceneParam._m0[5u].z, fma(_401, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _400));
    float _512 = fma(_402, cbSceneParam._m0[6u].z, fma(_401, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _400));
    float _515 = fma(_402, cbSceneParam._m0[7u].z, fma(_401, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _400));
    uint _528 = uint(roundEven(NORMAL.w)) * 13u;
    uint _530 = (_528 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _536 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_530].x;
    float _537 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_530].y;
    float _538 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_530].z;
    float _3367 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _542 = 1.0 - _407;
    float _543 = _539 * _542;
    float _544 = _540 * _542;
    float _545 = _541 * _542;
    float _550 = (_539 + (-0.039999999105930328369140625)) * _407;
    float _551 = (_540 + (-0.039999999105930328369140625)) * _407;
    float _552 = (_541 + (-0.039999999105930328369140625)) * _407;
    float _553 = _550 + 0.039999999105930328369140625;
    float _555 = _551 + 0.039999999105930328369140625;
    float _556 = _552 + 0.039999999105930328369140625;
    vec4 _565 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _489, cbSceneParam._m0[86u].y * _490));
    float _568 = _565.x * TEXCOORD_9.w;
    float _569 = dot(vec3(_400, _401, _402), vec3(_481, _482, _483));
    float _572 = _569 * 2.0;
    float _576 = (_572 * _400) - _481;
    float _577 = (_572 * _401) - _482;
    float _578 = (_572 * _402) - _483;
    float _582 = abs(dot(vec3(_481, _482, _483), vec3(_400, _401, _402)));
    float _3400 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _584 = sqrt(_403);
    float _597 = exp2((_584 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_584 * 3.0));
    float _603 = (1.0 - _597) * ((_584 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _604 = _597 * _584;
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _942;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _667 = fma(_640, cbModelParam._m0[26u].z, fma(_636, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _632));
        float _671 = fma(_640, cbModelParam._m0[27u].z, fma(_636, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _632));
        float _675 = fma(_640, cbModelParam._m0[28u].z, fma(_636, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _632));
        float _700 = _632 + _400;
        float _701 = _636 + _401;
        float _702 = _640 + _402;
        float _712 = fma(_702, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _700)) - _667;
        float _713 = fma(_702, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _700)) - _671;
        float _714 = fma(_702, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _700)) - _675;
        float _718 = inversesqrt(dot(vec3(_712, _713, _714), vec3(_712, _713, _714)));
        float _731 = ((_718 * _712) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_667 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _732 = ((_718 * _713) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_671 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _733 = ((_718 * _714) / cbModelParam._m0[34u].z) + ((((((_675 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        float _770 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_736.x + (-0.5));
        float _772 = _770 * (_736.y + (-0.5));
        float _773 = _770 * (_736.z + (-0.5));
        float _780 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_743.x + (-0.5));
        float _782 = _780 * (_743.y + (-0.5));
        float _783 = _780 * (_743.z + (-0.5));
        float _790 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_750.x + (-0.5));
        float _792 = _790 * (_750.y + (-0.5));
        float _793 = _790 * (_750.z + (-0.5));
        float _800 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_757.x + (-0.5));
        float _802 = _800 * (_757.y + (-0.5));
        float _803 = _800 * (_757.z + (-0.5));
        float _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _807 = _771 * 0.5;
        float _808 = _781 * 0.5;
        float _809 = _791 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _824 = (dot(vec3(_400, _401, _402), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _834 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_804 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3448 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_836 + 1.0))) + _841) * _804;
        float _851 = _772 * 0.5;
        float _852 = _782 * 0.5;
        float _853 = _792 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_400, _401, _402), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_805 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3481 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_878 + 1.0))) + _883) * _805;
        float _893 = _773 * 0.5;
        float _894 = _783 * 0.5;
        float _895 = _793 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(_400, _401, _402), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_806 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3514 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_920 + 1.0))) + _925) * _806;
        _942 = _773;
        _944 = _772;
        _945 = _771;
        _946 = _783;
        _947 = _782;
        _948 = _781;
        _949 = _793;
        _950 = _792;
        _951 = _791;
        _952 = _806;
        _953 = _805;
        _954 = _804;
        _955 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _956 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
        _957 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
    }
    else
    {
        _942 = _943;
        _944 = _943;
        _945 = _943;
        _946 = _943;
        _947 = _943;
        _948 = _943;
        _949 = _943;
        _950 = _943;
        _951 = _943;
        _952 = _943;
        _953 = _943;
        _954 = _943;
        _955 = 0.0;
        _956 = 0.0;
        _957 = 0.0;
    }
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _983 = fma(_640, cbModelParam._m0[30u].z, fma(_636, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _632));
        float _987 = fma(_640, cbModelParam._m0[31u].z, fma(_636, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _632));
        float _991 = fma(_640, cbModelParam._m0[32u].z, fma(_636, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _632));
        float _1014 = _632 + _400;
        float _1015 = _636 + _401;
        float _1016 = _640 + _402;
        float _1026 = fma(_1016, cbModelParam._m0[30u].z, fma(_1015, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1014)) - _983;
        float _1027 = fma(_1016, cbModelParam._m0[31u].z, fma(_1015, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1014)) - _987;
        float _1028 = fma(_1016, cbModelParam._m0[32u].z, fma(_1015, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1014)) - _991;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_983 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_987 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[35u].z) + ((((((_991 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1082 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1049.x + (-0.5));
        float _1084 = _1082 * (_1049.y + (-0.5));
        float _1085 = _1082 * (_1049.z + (-0.5));
        float _1092 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1056.x + (-0.5));
        float _1094 = _1092 * (_1056.y + (-0.5));
        float _1095 = _1092 * (_1056.z + (-0.5));
        float _1102 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1063.x + (-0.5));
        float _1104 = _1102 * (_1063.y + (-0.5));
        float _1105 = _1102 * (_1063.z + (-0.5));
        float _1112 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1070.x + (-0.5));
        float _1114 = _1112 * (_1070.y + (-0.5));
        float _1115 = _1112 * (_1070.z + (-0.5));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = _1083 * 0.5;
        float _1120 = _1093 * 0.5;
        float _1121 = _1103 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_400, _401, _402), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3577 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1146 + 1.0))) + _1151) * _1116;
        float _1161 = _1084 * 0.5;
        float _1162 = _1094 * 0.5;
        float _1163 = _1104 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_400, _401, _402), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3610 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1188 + 1.0))) + _1193) * _1117;
        float _1203 = _1085 * 0.5;
        float _1204 = _1095 * 0.5;
        float _1205 = _1105 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_400, _401, _402), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3643 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1230 + 1.0))) + _1235) * _1118;
        _1252 = _1085;
        _1253 = _1084;
        _1254 = _1083;
        _1255 = _1095;
        _1256 = _1094;
        _1257 = _1093;
        _1258 = _1105;
        _1259 = _1104;
        _1260 = _1103;
        _1261 = _1118;
        _1262 = _1117;
        _1263 = _1116;
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _943;
        _1253 = _943;
        _1254 = _943;
        _1255 = _943;
        _1256 = _943;
        _1257 = _943;
        _1258 = _943;
        _1259 = _943;
        _1260 = _943;
        _1261 = _943;
        _1262 = _943;
        _1263 = _943;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _955)) + _955;
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _956)) + _956;
    float _1278 = (cbModelParam._m0[1u].x * (_1266 - _957)) + _957;
    float _1299 = fma(_1278, cbSceneParam._m0[89u].z, fma(_1277, cbSceneParam._m0[89u].y, _1276 * cbSceneParam._m0[89u].x));
    float _1302 = fma(_1278, cbSceneParam._m0[90u].z, fma(_1277, cbSceneParam._m0[90u].y, _1276 * cbSceneParam._m0[90u].x));
    float _1305 = fma(_1278, cbSceneParam._m0[91u].z, fma(_1277, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1276));
    float _1320 = _576 * 0.5;
    float _1321 = _577 * 0.5;
    float _1322 = _578 * 0.5;
    float _1323 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_1254, _1257, _1260, _1263));
    float _1326 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1329 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1363;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1336 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_942, _946, _949, _952));
        float _1340 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_944, _947, _950, _953));
        float _1344 = dot(vec4(_1320, _1321, _1322, 1.0), vec4(_945, _948, _951, _954));
        float _1351 = dot(vec4(cbModelParam._m0[39u]), vec4(_1320, _1321, _1322, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1374;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1365 = dot(vec4(cbModelParam._m0[40u]), vec4(_1320, _1321, _1322, 1.0));
        _1374 = dot(vec3(isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1374 = 1.0;
    }
    float _1378 = (_1374 * cbModelParam._m0[1u].x) + (_1363 * (1.0 - cbModelParam._m0[1u].x));
    float _1388 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _403);
    float _1389 = isnan(_1388) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1388 : min(cbModelParam._m0[25u].z, _1388));
    float _1471;
    float _1473;
    float _1475;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1438 = fma(_640, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632)) + cbModelParam._m0[13u].w;
        float _1442 = fma(_640, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632)) + cbModelParam._m0[14u].w;
        float _1446 = fma(_640, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632)) + cbModelParam._m0[15u].w;
        float _1449 = fma(_578, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576));
        float _1452 = fma(_578, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576));
        float _1455 = fma(_578, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576));
        float _1483;
        if (_1449 > 0.0)
        {
            _1483 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1483 = frontier_phi_16_14_ladder;
        }
        float _1690;
        if (_1452 > 0.0)
        {
            _1690 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1690 = frontier_phi_25_21_ladder;
        }
        float _1944;
        if (_1455 > 0.0)
        {
            _1944 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1944 = frontier_phi_37_32_ladder;
        }
        float _1946 = isnan(_1690) ? _1483 : (isnan(_1483) ? _1690 : min(_1483, _1690));
        float _1947 = isnan(_1944) ? _1946 : (isnan(_1946) ? _1944 : min(_1946, _1944));
        float _1951 = (_1947 * _1449) + _1438;
        float _1952 = (_1947 * _1452) + _1442;
        float _1953 = (_1947 * _1455) + _1446;
        float _1954 = _1947 * 9.9999997473787516355514526367188e-05;
        float _1956 = (-1.0) - _1954;
        float _1958 = _1954 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1953 > _1958) || ((_1953 < _1956) || ((_1952 > _1958) || ((_1952 < _1956) || ((_1951 < _1956) || (_1951 > _1958))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2081 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1953, cbModelParam._m0[9u].z, fma(_1952, cbModelParam._m0[9u].y, _1951 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1953, cbModelParam._m0[10u].z, fma(_1952, cbModelParam._m0[10u].y, _1951 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1953, cbModelParam._m0[11u].z, fma(_1952, cbModelParam._m0[11u].y, _1951 * cbModelParam._m0[11u].x))), _1389);
            frontier_phi_15_37_ladder = _2081.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2081.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2081.x * cbModelParam._m0[1u].y;
        }
        _1471 = frontier_phi_15_37_ladder_2;
        _1473 = frontier_phi_15_37_ladder_1;
        _1475 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_576, _577, _578), _1389);
        _1471 = _1459.x * cbModelParam._m0[1u].y;
        _1473 = _1459.y * cbModelParam._m0[1u].y;
        _1475 = _1459.z * cbModelParam._m0[1u].y;
    }
    float _1479 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _403);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1479 : min(cbModelParam._m0[25u].w, _1479));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1537 = fma(_640, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632)) + cbModelParam._m0[21u].w;
        float _1541 = fma(_640, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632)) + cbModelParam._m0[22u].w;
        float _1545 = fma(_640, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632)) + cbModelParam._m0[23u].w;
        float _1548 = fma(_578, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576));
        float _1551 = fma(_578, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576));
        float _1554 = fma(_578, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576));
        float _1695;
        if (_1548 > 0.0)
        {
            _1695 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1695 = frontier_phi_27_23_ladder;
        }
        float _1971;
        if (_1551 > 0.0)
        {
            _1971 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1971 = frontier_phi_39_34_ladder;
        }
        float _2184;
        if (_1554 > 0.0)
        {
            _2184 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2184 = frontier_phi_48_45_ladder;
        }
        float _2186 = isnan(_1971) ? _1695 : (isnan(_1695) ? _1971 : min(_1695, _1971));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1548) + _1537;
        float _2192 = (_2187 * _1551) + _1541;
        float _2193 = (_2187 * _1554) + _1545;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2194;
        float _2197 = _2194 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2193 > _2197) || ((_2193 < _2195) || ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 < _2195) || (_2191 > _2197))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2193, cbModelParam._m0[17u].z, fma(_2192, cbModelParam._m0[17u].y, _2191 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2193, cbModelParam._m0[18u].z, fma(_2192, cbModelParam._m0[18u].y, _2191 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2193, cbModelParam._m0[19u].z, fma(_2192, cbModelParam._m0[19u].y, _2191 * cbModelParam._m0[19u].x))), _1480);
            frontier_phi_24_48_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1573 = frontier_phi_24_48_ladder_2;
        _1575 = frontier_phi_24_48_ladder_1;
        _1577 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_576, _577, _578), _1480);
        _1573 = _1557.x * cbModelParam._m0[1u].z;
        _1575 = _1557.y * cbModelParam._m0[1u].z;
        _1577 = _1557.z * cbModelParam._m0[1u].z;
    }
    float _1590 = (((_603 * _553) + _604) * _568) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1592 = (((_603 * _555) + _604) * _568) * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1594 = (((_603 * _556) + _604) * _568) * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1597 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, _1590 * cbSceneParam._m0[91u].x));
    uvec4 _1613 = floatBitsToUint(cbInstanceData._m0[_528 + 5u]);
    uint _1615 = _1613.x * 14u;
    uint _1616 = _1615 + 13u;
    float _1623 = _568 + (-1.0);
    float _1628 = (cbLight._m0[_1616].x * _1623) + 1.0;
    float _1629 = (cbLight._m0[_1616].y * _1623) + 1.0;
    float _1630 = (cbLight._m0[_1616].z * _1623) + 1.0;
    float _1631 = (cbLight._m0[_1616].w * _1623) + 1.0;
    uint _1632 = _1615 + 5u;
    float _1638 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    uint _1642 = _1615 + 4u;
    float _1649 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
    uint _1653 = _1615 | 1u;
    float _1664 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_400, _401, _402));
    float _1667 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_400, _401, _402));
    float _3779 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _3790 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1672 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1674 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1681 = ((cbLight._m0[_1632].x * _1638) * _1674) + ((cbLight._m0[_1642].x * _1649) * _1672);
    float _1682 = ((_1638 * cbLight._m0[_1632].y) * _1674) + ((_1649 * cbLight._m0[_1642].y) * _1672);
    float _1683 = ((_1638 * cbLight._m0[_1632].z) * _1674) + ((_1649 * cbLight._m0[_1642].z) * _1672);
    uvec4 _1687 = floatBitsToUint(cbLight._m0[_1615 + 12u]);
    bool _1689 = _1687.x == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1689)
    {
        _1700 = _1681;
        _1702 = _1682;
        _1704 = _1683;
    }
    else
    {
        uint _1708 = _1615 + 6u;
        float _1724 = (dot(vec3(cbLight._m0[_1615 + 2u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3801 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1727 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1700 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1681;
        _1702 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1682;
        _1704 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1683;
    }
    bool _1707 = _1687.y == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1707)
    {
        _1745 = _1700;
        _1747 = _1702;
        _1749 = _1704;
    }
    else
    {
        uint _1915 = _1615 + 7u;
        float _1931 = (dot(vec3(cbLight._m0[_1615 + 3u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _3817 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1934 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _1745 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1700;
        _1747 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1702;
        _1749 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1704;
    }
    uint _1752 = _1615 + 8u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _403) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1615].x + _481;
    float _1768 = cbLight._m0[_1615].y + _482;
    float _1769 = cbLight._m0[_1615].z + _483;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1615].xyz));
    float _3833 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _1781 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1782 = dot(vec3(_400, _401, _402), vec3(_1774, _1775, _1776));
    float _3855 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1774, _1775, _1776));
    float _3866 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1766 * _1766;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1802 = exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0);
    float _1803 = 0.959999978542327880859375 - _550;
    float _1805 = 0.959999978542327880859375 - _551;
    float _1806 = 0.959999978542327880859375 - _552;
    float _1813 = 1.0 - _1766;
    float _1824 = (0.5 / (((_1781 * ((_1780 * _1813) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1813) + _1766) * _1780))) * _1780;
    float _3877 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1826 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    uint _1837 = _1615 + 9u;
    float _1848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1653].w)) * _403) * 0.949999988079071044921875);
    float _1849 = _1848 * _1848;
    float _1850 = cbLight._m0[_1653].x + _481;
    float _1851 = cbLight._m0[_1653].y + _482;
    float _1852 = cbLight._m0[_1653].z + _483;
    float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
    float _1857 = _1856 * _1850;
    float _1858 = _1856 * _1851;
    float _1859 = _1856 * _1852;
    float _1860 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1653].xyz));
    float _3888 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1864 = dot(vec3(_400, _401, _402), vec3(_1857, _1858, _1859));
    float _3899 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1868 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_1857, _1858, _1859));
    float _3910 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1872 = _1849 * _1849;
    float _1876 = ((_1867 * _1867) * (_1872 + (-1.0))) + 1.0;
    float _1883 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
    float _1890 = 1.0 - _1849;
    float _1900 = (0.5 / (((_1781 * ((_1863 * _1890) + _1849)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1890) + _1849) * _1863))) * _1863;
    float _3921 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1902 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1872 / ((_1876 * _1876) * 3.141590118408203125));
    float _1912 = (((((_1883 * _1803) + _553) * cbLight._m0[_1837].x) * _1902) * _1638) + (((((_1802 * _1803) + _553) * cbLight._m0[_1752].x) * _1826) * _1649);
    float _1913 = (((((_1883 * _1805) + _555) * cbLight._m0[_1837].y) * _1902) * _1638) + (((((_1802 * _1805) + _555) * cbLight._m0[_1752].y) * _1826) * _1649);
    float _1914 = (((((_1883 * _1806) + _556) * cbLight._m0[_1837].z) * _1902) * _1638) + (((((_1802 * _1806) + _556) * cbLight._m0[_1752].z) * _1826) * _1649);
    float _1976;
    float _1978;
    float _1980;
    if (_1689)
    {
        _1976 = _1912;
        _1978 = _1913;
        _1980 = _1914;
    }
    else
    {
        uint _1982 = _1615 + 2u;
        uint _1986 = _1615 + 10u;
        float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _403) * 0.949999988079071044921875);
        float _2001 = _2000 * _2000;
        float _2002 = cbLight._m0[_1982].x + _481;
        float _2003 = cbLight._m0[_1982].y + _482;
        float _2004 = cbLight._m0[_1982].z + _483;
        float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
        float _2009 = _2008 * _2002;
        float _2010 = _2008 * _2003;
        float _2011 = _2008 * _2004;
        float _2012 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1982].xyz));
        float _3932 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2015 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2016 = dot(vec3(_400, _401, _402), vec3(_2009, _2010, _2011));
        float _3943 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2019 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2020 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2009, _2010, _2011));
        float _3954 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2024 = _2001 * _2001;
        float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
        float _2035 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
        float _2042 = 1.0 - _2001;
        float _2052 = (0.5 / (((_1781 * ((_2015 * _2042) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2042) + _2001) * _2015))) * _2015;
        float _3965 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2054 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
        float _2055 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1976 = (((((_2035 * _1803) + _553) * cbLight._m0[_1986].x) * _2054) * _2055) + _1912;
        _1978 = (((((_2035 * _1805) + _555) * cbLight._m0[_1986].y) * _2054) * _2055) + _1913;
        _1980 = (((((_2035 * _1806) + _556) * cbLight._m0[_1986].z) * _2054) * _2055) + _1914;
    }
    float _2090;
    float _2092;
    float _2094;
    if (_1707)
    {
        _2090 = _1976;
        _2092 = _1978;
        _2094 = _1980;
    }
    else
    {
        uint _2101 = _1615 + 3u;
        uint _2105 = _1615 + 11u;
        float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _403) * 0.949999988079071044921875);
        float _2120 = _2119 * _2119;
        float _2121 = cbLight._m0[_2101].x + _481;
        float _2122 = cbLight._m0[_2101].y + _482;
        float _2123 = cbLight._m0[_2101].z + _483;
        float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
        float _2128 = _2127 * _2121;
        float _2129 = _2127 * _2122;
        float _2130 = _2127 * _2123;
        float _2131 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2101].xyz));
        float _3981 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2135 = dot(vec3(_400, _401, _402), vec3(_2128, _2129, _2130));
        float _3992 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2139 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2128, _2129, _2130));
        float _4003 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2143 = _2120 * _2120;
        float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
        float _2154 = exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0);
        float _2161 = 1.0 - _2120;
        float _2171 = (0.5 / (((_1781 * ((_2134 * _2161) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2161) + _2120) * _2134))) * _2134;
        float _4014 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2173 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
        float _2174 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _2090 = (((((_2154 * _1803) + _553) * cbLight._m0[_2105].x) * _2173) * _2174) + _1976;
        _2092 = (((((_2154 * _1805) + _555) * cbLight._m0[_2105].y) * _2173) * _2174) + _1978;
        _2094 = (((((_2154 * _1806) + _556) * cbLight._m0[_2105].z) * _2173) * _2174) + _1980;
    }
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_1613.y == 0u)
    {
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2249;
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2249;
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2249;
        uvec4 _2264 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2265 = _2264.x;
        uint _2276 = uint((float(_2264.y) * floor(float(uint(cbSceneParam._m0[85u].y * _490) / _2265))) + floor(float(uint(cbSceneParam._m0[85u].x * _489) / _2265)));
        float _2286 = (log2(_2252 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2287 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        uint _2290 = uint(isnan(14.0) ? _2287 : (isnan(_2287) ? 14.0 : min(_2287, 14.0)));
        uvec4 _2295 = texelFetch(g_lightClusterGridBuffer, int(((_2290 << 2u) + (_2276 << 6u)) >> 2u));
        uint _2296 = _2295.x;
        uint _2297 = _2264.z;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        if (((((1u << ((_2297 >> 4u) & 15u)) + 4294967295u) & _2296) == 0u) || ((_2297 & 240u) == 0u))
        {
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
        }
        else
        {
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            uint _2546 = 0u;
            uint _2555;
            bool _2556;
            for (;;)
            {
                _2555 = texelFetch(g_lightClassification, int((((_2290 << 5u) + (_2276 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                _2556 = _2555 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2556)
                {
                    frontier_phi_63_pred = _2545;
                    frontier_phi_63_pred_1 = _2544;
                    frontier_phi_63_pred_2 = _2543;
                    frontier_phi_63_pred_3 = _2542;
                    frontier_phi_63_pred_4 = _2541;
                    frontier_phi_63_pred_5 = _2540;
                }
                else
                {
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    uint _2670;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2542;
                    _2667 = _2543;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2555;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    for (;;)
                    {
                        uint _2674 = uint(findLSB(_2670)) + (_2546 << 5u);
                        uint _2671 = (_2670 + 4294967295u) & _2670;
                        uint _2676 = _2674 * 48u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 3u)).x));
                        uint _2696 = (_2674 * 48u) + 4u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        uint _2715 = (_2674 * 48u) + 8u;
                        vec3 _2726 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x));
                        float _2730 = _2690.x - _2250;
                        float _2731 = _2690.y - _2251;
                        float _2732 = _2690.z - _2252;
                        float _2733 = dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732));
                        float _2736 = inversesqrt(_2733);
                        float _2737 = _2736 * _2730;
                        float _2738 = _2736 * _2731;
                        float _2739 = _2736 * _2732;
                        float _2740 = dot(vec3(_509, _512, _515), vec3(_2737, _2738, _2739));
                        float _2745 = 1.0 - (_2733 * _2690.w);
                        float _4040 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2746 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2747 = sqrt(_2733) * _2709.w;
                        float _2750 = 1.39999997615814208984375 / (_2747 + 1.39999997615814208984375);
                        float _2751 = _2750 * _2750;
                        float _2754 = ((1.0 - _2751) * _2740) + _2751;
                        float _2757 = _2747 * _2747;
                        float _2761 = ((isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))) * _2746) / ((_2757 * 0.699999988079071044921875) + 1.0);
                        float _2765 = (-0.0) - _2250;
                        float _2766 = (-0.0) - _2251;
                        float _2767 = (-0.0) - _2252;
                        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
                        float _2772 = _2771 * _2765;
                        float _2773 = _2771 * _2766;
                        float _2774 = _2771 * _2767;
                        float _2782 = exp2(log2(1.0 / ((_2757 * 3.5) + 5.0)) * 0.25);
                        float _2783 = 1.0 - _584;
                        float _2790 = sqrt(1.0 - ((1.0 - (_2783 * _2783)) * (1.0 - (_2782 * _2782))));
                        float _2791 = _2790 * _2790;
                        float _2792 = _2791 * _2791;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2795 = _2774 + _2739;
                        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
                        float _2803 = dot(vec3(_509, _512, _515), vec3(_2772, _2773, _2774));
                        float _4056 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2807 = dot(vec3(_509, _512, _515), vec3(_2799 * _2793, _2799 * _2794, _2799 * _2795));
                        float _4067 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2814 = ((_2810 * _2810) * (_2792 + (-1.0))) + 1.0;
                        float _2815 = _2750 * _2791;
                        float _2816 = _2815 * _2815;
                        float _2819 = ((1.0 - _2816) * _2740) + _2816;
                        float _4078 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2821 = 1.0 - _2791;
                        float _2831 = (0.5 / (((_2820 * ((_2806 * _2821) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2820 * _2821) + _2791) * _2806))) * _2820;
                        float _4089 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2842 = (((_2792 * 3.1415927410125732421875) * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) / ((_2814 * _2814) * ((_2757 * 2.1991131305694580078125) + 3.141590118408203125))) * _2746;
                        _2599 = (_2761 * _2709.x) + _2667;
                        _2600 = (_2761 * _2709.y) + _2668;
                        _2601 = (_2761 * _2709.z) + _2669;
                        _2596 = (_2842 * _2726.x) + _2664;
                        _2597 = (_2842 * _2726.y) + _2665;
                        _2598 = (_2842 * _2726.z) + _2666;
                        if (_2671 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2671;
                        }
                    }
                    frontier_phi_63_pred = _2601;
                    frontier_phi_63_pred_1 = _2600;
                    frontier_phi_63_pred_2 = _2599;
                    frontier_phi_63_pred_3 = _2598;
                    frontier_phi_63_pred_4 = _2597;
                    frontier_phi_63_pred_5 = _2596;
                }
                _2407 = frontier_phi_63_pred;
                _2405 = frontier_phi_63_pred_1;
                _2403 = frontier_phi_63_pred_2;
                _2401 = frontier_phi_63_pred_3;
                _2399 = frontier_phi_63_pred_4;
                _2397 = frontier_phi_63_pred_5;
                uint _2547 = _2546 + 1u;
                if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2540 = _2397;
                    _2541 = _2399;
                    _2542 = _2401;
                    _2543 = _2403;
                    _2544 = _2405;
                    _2545 = _2407;
                    _2546 = _2547;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
        }
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.z;
        uint _2413 = (_2411 >> 8u) & 15u;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        if (((4294967295u << _2413) & _2296) == 0u)
        {
            _2508 = _2396;
            _2510 = _2398;
            _2512 = _2400;
            _2514 = _2402;
            _2516 = _2404;
            _2518 = _2406;
        }
        else
        {
            float _2533 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
            float _2534 = _2533 * _2250;
            float _2535 = _2533 * _2251;
            float _2536 = _2533 * _2252;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2413 < ((_2411 >> 12u) & 15u))
            {
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2647 = _2396;
                float _2648 = _2398;
                float _2649 = _2400;
                float _2650 = _2402;
                float _2651 = _2404;
                float _2652 = _2406;
                uint _2653 = _2413;
                uint _2662;
                bool _2663;
                for (;;)
                {
                    _2662 = texelFetch(g_lightClassification, int((((_2290 << 5u) + (_2276 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                    _2663 = _2662 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2663)
                    {
                        frontier_phi_69_pred = _2652;
                        frontier_phi_69_pred_1 = _2651;
                        frontier_phi_69_pred_2 = _2650;
                        frontier_phi_69_pred_3 = _2649;
                        frontier_phi_69_pred_4 = _2648;
                        frontier_phi_69_pred_5 = _2647;
                    }
                    else
                    {
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _2860 = _2647;
                        float _2861 = _2648;
                        float _2862 = _2649;
                        float _2863 = _2650;
                        float _2864 = _2651;
                        float _2865 = _2652;
                        uint _2866 = _2662;
                        uint _2867;
                        vec4 _2892;
                        float _2893;
                        vec4 _2908;
                        vec3 _2920;
                        vec4 _2936;
                        vec4 _2952;
                        float _2999;
                        bool _3000;
                        for (;;)
                        {
                            uint _2877 = ((_2653 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2866));
                            _2867 = (_2866 + 4294967295u) & _2866;
                            uint _2879 = _2877 * 40u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2893 = _2892.w;
                            uint _2895 = (_2877 * 40u) + 4u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2910 = (_2877 * 40u) + 8u;
                            _2920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x));
                            uint _2923 = (_2877 * 40u) + 16u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2877 * 40u) + 20u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2877 * 40u) + 24u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2974 = (_2877 * 40u) + 28u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2999 = fma(_2252, _2987.z, fma(_2251, _2987.y, _2987.x * _2250)) + _2987.w;
                            _3000 = !((fma(_2252, _2968.z, fma(_2251, _2968.y, _2968.x * _2250)) + _2968.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3000)
                            {
                                float _3027 = _2892.x - _2250;
                                float _3028 = _2892.y - _2251;
                                float _3029 = _2892.z - _2252;
                                float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                                float _3033 = inversesqrt(_3030);
                                float _3034 = _3033 * _3027;
                                float _3035 = _3033 * _3028;
                                float _3036 = _3033 * _3029;
                                float _3040 = 1.0 - (_3030 / (_2893 * _2893));
                                float _4100 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3045 = sqrt(_3030) * _2908.w;
                                float _3047 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                                float _3048 = _3047 * _3047;
                                float _3051 = ((1.0 - _3048) * dot(vec3(_3034, _3035, _3036), vec3(_509, _512, _515))) + _3048;
                                float _3054 = _3045 * _3045;
                                float _3058 = (fma(_2252, _2936.z, fma(_2251, _2936.y, _2936.x * _2250)) + _2936.w) / _2999;
                                float _3059 = (fma(_2252, _2952.z, fma(_2251, _2952.y, _2952.x * _2250)) + _2952.w) / _2999;
                                float _3063 = 1.0 - dot(vec2(_3058, _3059), vec2(_3058, _3059));
                                float _4116 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3065 = _3064 * (((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3041) / ((_3054 * 0.699999988079071044921875) + 1.0));
                                float _3077 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                                float _3078 = 1.0 - _584;
                                float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                                float _3086 = _3085 * _3085;
                                float _3087 = _3086 * _3086;
                                float _3088 = _3034 - _2534;
                                float _3089 = _3035 - _2535;
                                float _3090 = _3036 - _2536;
                                float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                                float _3098 = dot(vec3(_509, _512, _515), vec3((-0.0) - _2534, (-0.0) - _2535, (-0.0) - _2536));
                                float _4127 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3101 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3102 = dot(vec3(_509, _512, _515), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                                float _4138 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3105 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                                float _3110 = _3047 * _3086;
                                float _3111 = _3110 * _3110;
                                float _3117 = ((1.0 - _3111) * dot(vec3(_509, _512, _515), vec3(_3034, _3035, _3036))) + _3111;
                                float _4149 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3119 = 1.0 - _3086;
                                float _3129 = (0.5 / (((_3118 * ((_3101 * _3119) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3086) * _3101))) * _3118;
                                float _4160 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3139 = (_3064 * _3041) * (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_3109 * _3109) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3065 * _2908.z;
                                frontier_phi_75_pred_1 = _3065 * _2908.y;
                                frontier_phi_75_pred_2 = _3065 * _2908.x;
                                frontier_phi_75_pred_3 = _3139 * _2920.z;
                                frontier_phi_75_pred_4 = _3139 * _2920.y;
                                frontier_phi_75_pred_5 = _3139 * _2920.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3148 = frontier_phi_75_pred;
                            _3147 = frontier_phi_75_pred_1;
                            _3146 = frontier_phi_75_pred_2;
                            _3145 = frontier_phi_75_pred_3;
                            _3144 = frontier_phi_75_pred_4;
                            _3143 = frontier_phi_75_pred_5;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            if (_2867 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2867;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2852;
                        frontier_phi_69_pred_1 = _2851;
                        frontier_phi_69_pred_2 = _2850;
                        frontier_phi_69_pred_3 = _2849;
                        frontier_phi_69_pred_4 = _2848;
                        frontier_phi_69_pred_5 = _2847;
                    }
                    _2519 = frontier_phi_69_pred;
                    _2517 = frontier_phi_69_pred_1;
                    _2515 = frontier_phi_69_pred_2;
                    _2513 = frontier_phi_69_pred_3;
                    _2511 = frontier_phi_69_pred_4;
                    _2509 = frontier_phi_69_pred_5;
                    uint _2654 = _2653 + 1u;
                    if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2647 = _2509;
                        _2648 = _2511;
                        _2649 = _2513;
                        _2650 = _2515;
                        _2651 = _2517;
                        _2652 = _2519;
                        _2653 = _2654;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2519;
                frontier_phi_57_58_ladder_1 = _2517;
                frontier_phi_57_58_ladder_2 = _2515;
                frontier_phi_57_58_ladder_3 = _2513;
                frontier_phi_57_58_ladder_4 = _2511;
                frontier_phi_57_58_ladder_5 = _2509;
            }
            else
            {
                frontier_phi_57_58_ladder = _2406;
                frontier_phi_57_58_ladder_1 = _2404;
                frontier_phi_57_58_ladder_2 = _2402;
                frontier_phi_57_58_ladder_3 = _2400;
                frontier_phi_57_58_ladder_4 = _2398;
                frontier_phi_57_58_ladder_5 = _2396;
            }
            _2508 = frontier_phi_57_58_ladder_5;
            _2510 = frontier_phi_57_58_ladder_4;
            _2512 = frontier_phi_57_58_ladder_3;
            _2514 = frontier_phi_57_58_ladder_2;
            _2516 = frontier_phi_57_58_ladder_1;
            _2518 = frontier_phi_57_58_ladder;
        }
        float _2523 = isnan(1.0) ? _568 : (isnan(_568) ? 1.0 : min(_568, 1.0));
        _2308 = (_2523 * _2514) + _1745;
        _2310 = (_2523 * _2516) + _1747;
        _2312 = (_2523 * _2518) + _1749;
        _2314 = ((_2508 * _553) * _2523) + _2090;
        _2316 = ((_2510 * _555) * _2523) + _2092;
        _2318 = ((_2512 * _556) * _2523) + _2094;
    }
    else
    {
        _2308 = _1745;
        _2310 = _1747;
        _2312 = _1749;
        _2314 = _2090;
        _2316 = _2092;
        _2318 = _2094;
    }
    float _4176 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4187 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4198 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    uint _2338 = _528 + 6u;
    float _2346 = _489 / cbSceneParam._m0[86u].x;
    float _2347 = _490 / cbSceneParam._m0[86u].y;
    vec4 _2361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, (log2((isnan(cbSceneParam._m0[77u].w) ? _423 : (isnan(_423) ? cbSceneParam._m0[77u].w : min(_423, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2363 = _2361.x;
    float _2364 = _2361.y;
    float _2365 = _2361.z;
    float _2366 = _2361.w;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    if (_423 > cbSceneParam._m0[78u].w)
    {
        float _2421 = isnan(_423) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _423 : min(cbSceneParam._m0[80u].w, _423));
        float _2422 = _2421 / _423;
        float _2433 = _2422 * _474;
        float _2434 = _475 * _2422;
        float _2435 = (-0.0) - _2434;
        float _2436 = _2422 * _476;
        float _2438 = (cbSceneParam._m0[77u].w * _2435) / _2421;
        float _2439 = _2438 + cbSceneParam._m0[79u].w;
        float _2440 = cbSceneParam._m0[79u].w - _2434;
        float _2446 = sqrt(((_2433 * _2433) + (_2434 * _2434)) + (_2436 * _2436));
        float _2449 = (1.0 - (cbSceneParam._m0[77u].w / _2421)) * _2446;
        float _2454 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2456 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2609;
        if (abs((_2435 - _2438) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2609 = ((((_2439 > 0.0) ? exp2(_2454 * _2439) : (2.0 - exp2(_2456 * _2439))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2449;
        }
        else
        {
            float _2569 = 1.0 / cbSceneParam._m0[80u].x;
            float _2570 = isnan(_2440) ? _2439 : (isnan(_2439) ? _2440 : max(_2439, _2440));
            float _2571 = isnan(_2440) ? _2439 : (isnan(_2439) ? _2440 : min(_2439, _2440));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            float _2581 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : min(_2571, 0.0));
            _2609 = ((abs(_2446 / _2435) * cbSceneParam._m0[80u].y) * ((((_2580 - _2581) * 2.0) - ((exp2(_2454 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0)))) - exp2(_2454 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))))) * _2569)) - ((exp2(_2456 * _2580) - exp2(_2456 * _2581)) * _2569))) + (_2449 * cbSceneParam._m0[80u].z);
        }
        vec4 _2611 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, 1.0), 0.0);
        float _2620 = exp2((_2609 * (-1.44269502162933349609375)) * (1.0 - _2611.w));
        float _2621 = log2(_2620);
        float _2637 = log2(_2366);
        _2458 = (exp2(_2637 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].x)) * _2611.x) / cbSceneParam._m0[78u].x)) + _2363;
        _2460 = (exp2(_2637 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].y)) * _2611.y) / cbSceneParam._m0[78u].y)) + _2364;
        _2462 = (exp2(_2637 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].z)) * _2611.z) / cbSceneParam._m0[78u].z)) + _2365;
        _2464 = _2620 * _2366;
    }
    else
    {
        _2458 = _2363;
        _2460 = _2364;
        _2462 = _2365;
        _2464 = _2366;
    }
    float _2476 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2477 = _2476 == 3.0;
    float _2478 = log2(_2464);
    float _2485 = exp2(_2478 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2308 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _568))) + ((_2314 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1378)) * cbPerFrame._m0[3u].x));
    float _2486 = exp2(_2478 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2310 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _568))) + ((_2316 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1378)) * cbPerFrame._m0[3u].x));
    float _2487 = exp2(_2478 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2312 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _568))) + ((_2318 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1378)) * cbPerFrame._m0[3u].x));
    float _2496 = (_2476 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2496 * (_2477 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2458)));
    SV_Target.y = _2496 * (_2477 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2460)));
    SV_Target.z = _2496 * (_2477 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2462)));
    SV_Target.w = cbInstanceData._m0[_2338].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2338].w;
}


