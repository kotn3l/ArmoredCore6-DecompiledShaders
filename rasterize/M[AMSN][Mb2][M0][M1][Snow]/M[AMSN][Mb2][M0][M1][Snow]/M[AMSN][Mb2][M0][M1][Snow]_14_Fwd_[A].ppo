#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _854;
float _3224;
float _3225;
float _3226;
float _3227;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _233 = _228.z;
    float _237 = (_228.x * 2.0) + (-1.0);
    float _239 = (_228.y * 2.0) + (-1.0);
    float _240 = dot(vec2(_237, _239), vec2(_237, _239));
    float _3236 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _246 = sqrt(1.0 - (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))));
    vec4 _264 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _264.x * cbMtdParam._m0[9u].x;
    float _270 = _264.y * cbMtdParam._m0[9u].y;
    float _271 = _264.z * cbMtdParam._m0[9u].z;
    float _274 = fma(_246, _212, fma(_239, _204 * TANGENT.x, (_190 * _182) * _237));
    float _277 = fma(_246, _213, fma(_239, _204 * TANGENT.y, (_190 * _183) * _237));
    float _280 = fma(_246, _214, fma(_239, _204 * TANGENT.z, (_190 * _184) * _237));
    float _284 = inversesqrt(dot(vec3(_274, _277, _280), vec3(_274, _277, _280)));
    float _285 = _284 * _274;
    float _286 = _284 * _277;
    float _287 = _284 * _280;
    float _3247 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _288 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _3258 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3269 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3280 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _307 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    vec4 _374 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _376 = _374.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _533 = sqrt(((_360 * _360) + (_361 * _361)) + (_362 * _362));
        float _539 = (cbMatDynParam._m0[5u].x * _533) + cbMatDynParam._m0[5u].y;
        float _3291 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
        float _540 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
        float _544 = (cbMatDynParam._m0[5u].z * _533) + cbMatDynParam._m0[5u].w;
        float _3302 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) - _540)) + _540) < ((_376 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_287, cbSceneParam._m0[5u].z, fma(_286, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _285));
    float _412 = fma(_287, cbSceneParam._m0[6u].z, fma(_286, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _285));
    float _415 = fma(_287, cbSceneParam._m0[7u].z, fma(_286, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _285));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = _428 + 9u;
    uint _430 = _429 + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_430].z;
    float _3313 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    vec4 _450 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _453 = _450.x * TEXCOORD_9.w;
    float _454 = dot(vec3(_285, _286, _287), vec3(_367, _368, _369));
    float _457 = _454 * 2.0;
    float _461 = (_457 * _285) - _367;
    float _462 = (_457 * _286) - _368;
    float _463 = (_457 * _287) - _369;
    float _467 = abs(dot(vec3(_367, _368, _369), vec3(_285, _286, _287)));
    float _3346 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _469 = sqrt(_288);
    float _482 = exp2((_469 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_469 * 3.0));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _578 = fma(_522, cbModelParam._m0[26u].z, fma(_518, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _514));
        float _582 = fma(_522, cbModelParam._m0[27u].z, fma(_518, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _514));
        float _586 = fma(_522, cbModelParam._m0[28u].z, fma(_518, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _514));
        float _611 = _514 + _285;
        float _612 = _518 + _286;
        float _613 = _522 + _287;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _578;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _582;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _586;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_578 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_582 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_586 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_647.x + (-0.5));
        float _683 = _681 * (_647.y + (-0.5));
        float _684 = _681 * (_647.z + (-0.5));
        float _691 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_654.x + (-0.5));
        float _693 = _691 * (_654.y + (-0.5));
        float _694 = _691 * (_654.z + (-0.5));
        float _701 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_661.x + (-0.5));
        float _703 = _701 * (_661.y + (-0.5));
        float _704 = _701 * (_661.z + (-0.5));
        float _711 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_668.x + (-0.5));
        float _713 = _711 * (_668.y + (-0.5));
        float _714 = _711 * (_668.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = _682 * 0.5;
        float _719 = _692 * 0.5;
        float _720 = _702 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _735 = (dot(vec3(_285, _286, _287), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _745 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3394 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_747 + 1.0))) + _752) * _715;
        float _762 = _683 * 0.5;
        float _763 = _693 * 0.5;
        float _764 = _703 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_285, _286, _287), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3427 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_789 + 1.0))) + _794) * _716;
        float _804 = _684 * 0.5;
        float _805 = _694 * 0.5;
        float _806 = _704 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_285, _286, _287), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3460 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_831 + 1.0))) + _836) * _717;
        _853 = _684;
        _855 = _683;
        _856 = _682;
        _857 = _694;
        _858 = _693;
        _859 = _692;
        _860 = _704;
        _861 = _703;
        _862 = _702;
        _863 = _717;
        _864 = _716;
        _865 = _715;
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = _854;
        _855 = _854;
        _856 = _854;
        _857 = _854;
        _858 = _854;
        _859 = _854;
        _860 = _854;
        _861 = _854;
        _862 = _854;
        _863 = _854;
        _864 = _854;
        _865 = _854;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_522, cbModelParam._m0[30u].z, fma(_518, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _514));
        float _901 = fma(_522, cbModelParam._m0[31u].z, fma(_518, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _514));
        float _905 = fma(_522, cbModelParam._m0[32u].z, fma(_518, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _514));
        float _928 = _514 + _285;
        float _929 = _518 + _286;
        float _930 = _522 + _287;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_285, _286, _287), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3523 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_285, _286, _287), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3556 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_285, _286, _287), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3589 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _854;
        _1167 = _854;
        _1168 = _854;
        _1169 = _854;
        _1170 = _854;
        _1171 = _854;
        _1172 = _854;
        _1173 = _854;
        _1174 = _854;
        _1175 = _854;
        _1176 = _854;
        _1177 = _854;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _461 * 0.5;
    float _1235 = _462 * 0.5;
    float _1236 = _463 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_853, _857, _860, _863));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_855, _858, _861, _864));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _859, _862, _865));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _288);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_522, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_522, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_522, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_463, cbModelParam._m0[13u].z, fma(_462, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _461));
        float _1366 = fma(_463, cbModelParam._m0[14u].z, fma(_462, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _461));
        float _1369 = fma(_463, cbModelParam._m0[15u].z, fma(_462, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _461));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1397 = frontier_phi_19_17_ladder;
        }
        float _1603;
        if (_1366 > 0.0)
        {
            _1603 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1603 = frontier_phi_28_24_ladder;
        }
        float _1846;
        if (_1369 > 0.0)
        {
            _1846 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1846 = frontier_phi_40_35_ladder;
        }
        float _1848 = isnan(_1603) ? _1397 : (isnan(_1397) ? _1603 : min(_1397, _1603));
        float _1849 = isnan(_1846) ? _1848 : (isnan(_1848) ? _1846 : min(_1848, _1846));
        float _1853 = (_1849 * _1363) + _1352;
        float _1854 = (_1849 * _1366) + _1356;
        float _1855 = (_1849 * _1369) + _1360;
        float _1856 = _1849 * 9.9999997473787516355514526367188e-05;
        float _1858 = (-1.0) - _1856;
        float _1860 = _1856 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1855 > _1860) || ((_1855 < _1858) || ((_1854 > _1860) || ((_1854 < _1858) || ((_1853 < _1858) || (_1853 > _1860))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1855, cbModelParam._m0[9u].z, fma(_1854, cbModelParam._m0[9u].y, _1853 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1855, cbModelParam._m0[10u].z, fma(_1854, cbModelParam._m0[10u].y, _1853 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1855, cbModelParam._m0[11u].z, fma(_1854, cbModelParam._m0[11u].y, _1853 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_18_40_ladder = _1979.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1979.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1979.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_18_40_ladder_2;
        _1387 = frontier_phi_18_40_ladder_1;
        _1389 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_461, _462, _463), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _288);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_522, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_522, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_522, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_463, cbModelParam._m0[21u].z, fma(_462, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _461));
        float _1465 = fma(_463, cbModelParam._m0[22u].z, fma(_462, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _461));
        float _1468 = fma(_463, cbModelParam._m0[23u].z, fma(_462, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _461));
        float _1608;
        if (_1462 > 0.0)
        {
            _1608 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1608 = frontier_phi_30_26_ladder;
        }
        float _1873;
        if (_1465 > 0.0)
        {
            _1873 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1873 = frontier_phi_42_37_ladder;
        }
        float _2078;
        if (_1468 > 0.0)
        {
            _2078 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2078 = frontier_phi_51_48_ladder;
        }
        float _2080 = isnan(_1873) ? _1608 : (isnan(_1608) ? _1873 : min(_1608, _1873));
        float _2081 = isnan(_2078) ? _2080 : (isnan(_2080) ? _2078 : min(_2080, _2078));
        float _2085 = (_2081 * _1462) + _1451;
        float _2086 = (_2081 * _1465) + _1455;
        float _2087 = (_2081 * _1468) + _1459;
        float _2088 = _2081 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2088;
        float _2091 = _2088 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2087 > _2091) || ((_2087 < _2089) || ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 < _2089) || (_2085 > _2091))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2087, cbModelParam._m0[17u].z, fma(_2086, cbModelParam._m0[17u].y, _2085 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2087, cbModelParam._m0[18u].z, fma(_2086, cbModelParam._m0[18u].y, _2085 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2087, cbModelParam._m0[19u].z, fma(_2086, cbModelParam._m0[19u].y, _2085 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_27_51_ladder = _2285.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2285.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2285.x * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_27_51_ladder_2;
        _1489 = frontier_phi_27_51_ladder_1;
        _1491 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_461, _462, _463), _1394);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1503 = ((((1.0 - _482) * ((_469 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_482 * _469)) * _453;
    float _1504 = _1503 * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1505 = _1503 * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1506 = _1503 * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    uvec4 _1525 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1527 = _1525.x * 14u;
    uint _1528 = _1527 + 13u;
    float _1535 = _453 + (-1.0);
    float _1540 = (cbLight._m0[_1528].x * _1535) + 1.0;
    float _1541 = (cbLight._m0[_1528].y * _1535) + 1.0;
    float _1542 = (cbLight._m0[_1528].z * _1535) + 1.0;
    float _1543 = (cbLight._m0[_1528].w * _1535) + 1.0;
    uint _1544 = _1527 + 5u;
    float _1550 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    uint _1554 = _1527 + 4u;
    float _1561 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1565 = _1527 | 1u;
    float _1576 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_285, _286, _287));
    float _1579 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_285, _286, _287));
    float _3725 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _3736 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1584 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1586 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.3183098733425140380859375;
    float _1593 = ((cbLight._m0[_1544].x * _1550) * _1586) + ((cbLight._m0[_1554].x * _1561) * _1584);
    float _1594 = ((_1550 * cbLight._m0[_1544].y) * _1586) + ((_1561 * cbLight._m0[_1554].y) * _1584);
    float _1595 = ((_1550 * cbLight._m0[_1544].z) * _1586) + ((_1561 * cbLight._m0[_1554].z) * _1584);
    uvec4 _1600 = floatBitsToUint(cbLight._m0[_1527 + 12u]);
    bool _1602 = _1600.x == 0u;
    float _1613;
    float _1615;
    float _1617;
    if (_1602)
    {
        _1613 = _1593;
        _1615 = _1594;
        _1617 = _1595;
    }
    else
    {
        uint _1621 = _1527 + 6u;
        float _1637 = (dot(vec3(cbLight._m0[_1527 + 2u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1638 = _1637 * _1637;
        float _3747 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1640 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1613 = (((cbLight._m0[_1621].x * 0.3183098733425140380859375) * _1639) * _1640) + _1593;
        _1615 = (((cbLight._m0[_1621].y * 0.3183098733425140380859375) * _1639) * _1640) + _1594;
        _1617 = (((cbLight._m0[_1621].z * 0.3183098733425140380859375) * _1639) * _1640) + _1595;
    }
    bool _1620 = _1600.y == 0u;
    float _1658;
    float _1660;
    float _1662;
    if (_1620)
    {
        _1658 = _1613;
        _1660 = _1615;
        _1662 = _1617;
    }
    else
    {
        uint _1817 = _1527 + 7u;
        float _1833 = (dot(vec3(cbLight._m0[_1527 + 3u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3763 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1836 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1658 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1613;
        _1660 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1615;
        _1662 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1617;
    }
    uint _1665 = _1527 + 8u;
    float _1678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1527].w)) * _288) * 0.949999988079071044921875);
    float _1679 = _1678 * _1678;
    float _1680 = cbLight._m0[_1527].x + _367;
    float _1681 = cbLight._m0[_1527].y + _368;
    float _1682 = cbLight._m0[_1527].z + _369;
    float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
    float _1687 = _1686 * _1680;
    float _1688 = _1686 * _1681;
    float _1689 = _1686 * _1682;
    float _1690 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1527].xyz));
    float _3779 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _1694 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1695 = dot(vec3(_285, _286, _287), vec3(_1687, _1688, _1689));
    float _3801 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1699 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1687, _1688, _1689));
    float _3812 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1703 = _1679 * _1679;
    float _1707 = ((_1698 * _1698) * (_1703 + (-1.0))) + 1.0;
    float _1718 = (exp2(log2(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1719 = 1.0 - _1679;
    float _1730 = (0.5 / (((_1694 * ((_1693 * _1719) + _1679)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1719) + _1679) * _1693))) * _1693;
    float _3823 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1732 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1703 / ((_1707 * _1707) * 3.141590118408203125));
    uint _1743 = _1527 + 9u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _288) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1565].x + _367;
    float _1757 = cbLight._m0[_1565].y + _368;
    float _1758 = cbLight._m0[_1565].z + _369;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1565].xyz));
    float _3834 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1770 = dot(vec3(_285, _286, _287), vec3(_1763, _1764, _1765));
    float _3845 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1763, _1764, _1765));
    float _3856 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1755 * _1755;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1791 = (exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1792 = 1.0 - _1755;
    float _1802 = (0.5 / (((_1694 * ((_1769 * _1792) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1792) + _1755) * _1769))) * _1769;
    float _3867 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1804 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    float _1814 = (((_1791 * cbLight._m0[_1743].x) * _1804) * _1550) + (((_1718 * cbLight._m0[_1665].x) * _1732) * _1561);
    float _1815 = (((_1791 * cbLight._m0[_1743].y) * _1804) * _1550) + (((_1718 * cbLight._m0[_1665].y) * _1732) * _1561);
    float _1816 = (((_1791 * cbLight._m0[_1743].z) * _1804) * _1550) + (((_1718 * cbLight._m0[_1665].z) * _1732) * _1561);
    float _1878;
    float _1880;
    float _1882;
    if (_1602)
    {
        _1878 = _1814;
        _1880 = _1815;
        _1882 = _1816;
    }
    else
    {
        uint _1884 = _1527 + 2u;
        uint _1888 = _1527 + 10u;
        float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _288) * 0.949999988079071044921875);
        float _1903 = _1902 * _1902;
        float _1904 = cbLight._m0[_1884].x + _367;
        float _1905 = cbLight._m0[_1884].y + _368;
        float _1906 = cbLight._m0[_1884].z + _369;
        float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
        float _1911 = _1910 * _1904;
        float _1912 = _1910 * _1905;
        float _1913 = _1910 * _1906;
        float _1914 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1884].xyz));
        float _3878 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1917 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1918 = dot(vec3(_285, _286, _287), vec3(_1911, _1912, _1913));
        float _3889 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1922 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_1911, _1912, _1913));
        float _3900 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = _1903 * _1903;
        float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
        float _1939 = (exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1940 = 1.0 - _1903;
        float _1950 = (0.5 / (((_1694 * ((_1917 * _1940) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1940) + _1903) * _1917))) * _1917;
        float _3911 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1952 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
        float _1953 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1878 = (((_1939 * cbLight._m0[_1888].x) * _1952) * _1953) + _1814;
        _1880 = (((_1939 * cbLight._m0[_1888].y) * _1952) * _1953) + _1815;
        _1882 = (((_1939 * cbLight._m0[_1888].z) * _1952) * _1953) + _1816;
    }
    float _1988;
    float _1990;
    float _1992;
    if (_1620)
    {
        _1988 = _1878;
        _1990 = _1880;
        _1992 = _1882;
    }
    else
    {
        uint _1999 = _1527 + 3u;
        uint _2003 = _1527 + 11u;
        float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _288) * 0.949999988079071044921875);
        float _2018 = _2017 * _2017;
        float _2019 = cbLight._m0[_1999].x + _367;
        float _2020 = cbLight._m0[_1999].y + _368;
        float _2021 = cbLight._m0[_1999].z + _369;
        float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
        float _2026 = _2025 * _2019;
        float _2027 = _2025 * _2020;
        float _2028 = _2025 * _2021;
        float _2029 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1999].xyz));
        float _3927 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2033 = dot(vec3(_285, _286, _287), vec3(_2026, _2027, _2028));
        float _3938 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _2037 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2026, _2027, _2028));
        float _3949 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2041 = _2018 * _2018;
        float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
        float _2054 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2055 = 1.0 - _2018;
        float _2065 = (0.5 / (((_1694 * ((_2032 * _2055) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _2055) + _2018) * _2032))) * _2032;
        float _3960 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2067 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
        float _2068 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1988 = (((_2054 * cbLight._m0[_2003].x) * _2067) * _2068) + _1878;
        _1990 = (((_2054 * cbLight._m0[_2003].y) * _2067) * _2068) + _1880;
        _1992 = (((_2054 * cbLight._m0[_2003].z) * _2067) * _2068) + _1882;
    }
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    float _2212;
    if (_1525.y == 0u)
    {
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2144 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2143;
        float _2145 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2143;
        float _2146 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2143;
        uvec4 _2158 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2159 = _2158.x;
        uint _2170 = uint((float(_2158.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2159))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2159)));
        float _2180 = (log2(_2146 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2181 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        uint _2184 = uint(isnan(14.0) ? _2181 : (isnan(_2181) ? 14.0 : min(_2181, 14.0)));
        uvec4 _2189 = texelFetch(g_lightClusterGridBuffer, int(((_2184 << 2u) + (_2170 << 6u)) >> 2u));
        uint _2190 = _2189.x;
        uint _2191 = _2158.z;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((((1u << ((_2191 >> 4u) & 15u)) + 4294967295u) & _2190) == 0u) || ((_2191 & 240u) == 0u))
        {
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
        }
        else
        {
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            uint _2448 = 0u;
            uint _2457;
            bool _2458;
            for (;;)
            {
                _2457 = texelFetch(g_lightClassification, int((((_2184 << 5u) + (_2170 << 9u)) + (_2448 << 2u)) >> 2u)).x;
                _2458 = _2457 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2458)
                {
                    frontier_phi_68_pred = _2444;
                    frontier_phi_68_pred_1 = _2447;
                    frontier_phi_68_pred_2 = _2446;
                    frontier_phi_68_pred_3 = _2445;
                    frontier_phi_68_pred_4 = _2443;
                    frontier_phi_68_pred_5 = _2442;
                }
                else
                {
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    uint _2593;
                    _2587 = _2442;
                    _2588 = _2443;
                    _2589 = _2444;
                    _2590 = _2445;
                    _2591 = _2446;
                    _2592 = _2447;
                    _2593 = _2457;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    for (;;)
                    {
                        uint _2597 = uint(findLSB(_2593)) + (_2448 << 5u);
                        uint _2594 = (_2593 + 4294967295u) & _2593;
                        uint _2599 = _2597 * 48u;
                        vec4 _2613 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2599)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 3u)).x));
                        uint _2619 = (_2597 * 48u) + 4u;
                        vec4 _2632 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2619)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 3u)).x));
                        uint _2638 = (_2597 * 48u) + 8u;
                        vec3 _2649 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2638)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 2u)).x));
                        float _2653 = _2613.x - _2144;
                        float _2654 = _2613.y - _2145;
                        float _2655 = _2613.z - _2146;
                        float _2656 = dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655));
                        float _2659 = inversesqrt(_2656);
                        float _2660 = _2659 * _2653;
                        float _2661 = _2659 * _2654;
                        float _2662 = _2659 * _2655;
                        float _2663 = dot(vec3(_409, _412, _415), vec3(_2660, _2661, _2662));
                        float _2668 = 1.0 - (_2656 * _2613.w);
                        float _3986 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2669 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2670 = sqrt(_2656) * _2632.w;
                        float _2673 = 1.39999997615814208984375 / (_2670 + 1.39999997615814208984375);
                        float _2674 = _2673 * _2673;
                        float _2677 = ((1.0 - _2674) * _2663) + _2674;
                        float _2680 = _2670 * _2670;
                        float _2684 = ((isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))) * _2669) / ((_2680 * 0.699999988079071044921875) + 1.0);
                        float _2688 = (-0.0) - _2144;
                        float _2689 = (-0.0) - _2145;
                        float _2690 = (-0.0) - _2146;
                        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
                        float _2695 = _2694 * _2688;
                        float _2696 = _2694 * _2689;
                        float _2697 = _2694 * _2690;
                        float _2705 = exp2(log2(1.0 / ((_2680 * 3.5) + 5.0)) * 0.25);
                        float _2706 = 1.0 - _469;
                        float _2713 = sqrt(1.0 - ((1.0 - (_2706 * _2706)) * (1.0 - (_2705 * _2705))));
                        float _2714 = _2713 * _2713;
                        float _2715 = _2714 * _2714;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2718 = _2697 + _2662;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2726 = dot(vec3(_409, _412, _415), vec3(_2695, _2696, _2697));
                        float _4002 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2730 = dot(vec3(_409, _412, _415), vec3(_2722 * _2716, _2722 * _2717, _2722 * _2718));
                        float _4013 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2737 = ((_2733 * _2733) * (_2715 + (-1.0))) + 1.0;
                        float _2738 = _2673 * _2714;
                        float _2739 = _2738 * _2738;
                        float _2742 = ((1.0 - _2739) * _2663) + _2739;
                        float _4024 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2744 = 1.0 - _2714;
                        float _2754 = (0.5 / (((_2743 * ((_2729 * _2744) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _2744) + _2714) * _2729))) * _2743;
                        float _4035 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2765 = (((_2715 * 3.1415927410125732421875) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) / ((_2737 * _2737) * ((_2680 * 2.1991131305694580078125) + 3.141590118408203125))) * _2669;
                        _2517 = (_2684 * _2632.x) + _2590;
                        _2518 = (_2684 * _2632.y) + _2591;
                        _2519 = (_2684 * _2632.z) + _2592;
                        _2514 = (_2765 * _2649.x) + _2587;
                        _2515 = (_2765 * _2649.y) + _2588;
                        _2516 = (_2765 * _2649.z) + _2589;
                        if (_2594 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2587 = _2514;
                            _2588 = _2515;
                            _2589 = _2516;
                            _2590 = _2517;
                            _2591 = _2518;
                            _2592 = _2519;
                            _2593 = _2594;
                        }
                    }
                    frontier_phi_68_pred = _2516;
                    frontier_phi_68_pred_1 = _2519;
                    frontier_phi_68_pred_2 = _2518;
                    frontier_phi_68_pred_3 = _2517;
                    frontier_phi_68_pred_4 = _2515;
                    frontier_phi_68_pred_5 = _2514;
                }
                _2295 = frontier_phi_68_pred;
                _2301 = frontier_phi_68_pred_1;
                _2299 = frontier_phi_68_pred_2;
                _2297 = frontier_phi_68_pred_3;
                _2293 = frontier_phi_68_pred_4;
                _2291 = frontier_phi_68_pred_5;
                uint _2449 = _2448 + 1u;
                if (_2449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2442 = _2291;
                    _2443 = _2293;
                    _2444 = _2295;
                    _2445 = _2297;
                    _2446 = _2299;
                    _2447 = _2301;
                    _2448 = _2449;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
        }
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.z;
        uint _2307 = (_2305 >> 8u) & 15u;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        if (((4294967295u << _2307) & _2190) == 0u)
        {
            _2410 = _2290;
            _2412 = _2292;
            _2414 = _2294;
            _2416 = _2296;
            _2418 = _2298;
            _2420 = _2300;
        }
        else
        {
            float _2435 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
            float _2436 = _2435 * _2144;
            float _2437 = _2435 * _2145;
            float _2438 = _2435 * _2146;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2307 < ((_2305 >> 12u) & 15u))
            {
                float _2411;
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2570 = _2290;
                float _2571 = _2292;
                float _2572 = _2294;
                float _2573 = _2296;
                float _2574 = _2298;
                float _2575 = _2300;
                uint _2576 = _2307;
                uint _2585;
                bool _2586;
                for (;;)
                {
                    _2585 = texelFetch(g_lightClassification, int((((_2184 << 5u) + (_2170 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                    _2586 = _2585 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2586)
                    {
                        frontier_phi_79_pred = _2575;
                        frontier_phi_79_pred_1 = _2574;
                        frontier_phi_79_pred_2 = _2573;
                        frontier_phi_79_pred_3 = _2572;
                        frontier_phi_79_pred_4 = _2571;
                        frontier_phi_79_pred_5 = _2570;
                    }
                    else
                    {
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _2792 = _2570;
                        float _2793 = _2571;
                        float _2794 = _2572;
                        float _2795 = _2573;
                        float _2796 = _2574;
                        float _2797 = _2575;
                        uint _2798 = _2585;
                        uint _2799;
                        vec4 _2824;
                        float _2825;
                        vec4 _2840;
                        vec3 _2852;
                        vec4 _2868;
                        vec4 _2884;
                        float _2931;
                        bool _2932;
                        for (;;)
                        {
                            uint _2809 = ((_2576 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2798));
                            _2799 = (_2798 + 4294967295u) & _2798;
                            uint _2811 = _2809 * 40u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2825 = _2824.w;
                            uint _2827 = (_2809 * 40u) + 4u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2809 * 40u) + 8u;
                            _2852 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x));
                            uint _2855 = (_2809 * 40u) + 16u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2871 = (_2809 * 40u) + 20u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2809 * 40u) + 24u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2906 = (_2809 * 40u) + 28u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2931 = fma(_2146, _2919.z, fma(_2145, _2919.y, _2919.x * _2144)) + _2919.w;
                            _2932 = !((fma(_2146, _2900.z, fma(_2145, _2900.y, _2900.x * _2144)) + _2900.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2932)
                            {
                                float _2959 = _2824.x - _2144;
                                float _2960 = _2824.y - _2145;
                                float _2961 = _2824.z - _2146;
                                float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                                float _2965 = inversesqrt(_2962);
                                float _2966 = _2965 * _2959;
                                float _2967 = _2965 * _2960;
                                float _2968 = _2965 * _2961;
                                float _2972 = 1.0 - (_2962 / (_2825 * _2825));
                                float _4046 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _2977 = sqrt(_2962) * _2840.w;
                                float _2979 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                                float _2980 = _2979 * _2979;
                                float _2983 = ((1.0 - _2980) * dot(vec3(_2966, _2967, _2968), vec3(_409, _412, _415))) + _2980;
                                float _2986 = _2977 * _2977;
                                float _2990 = (fma(_2146, _2868.z, fma(_2145, _2868.y, _2868.x * _2144)) + _2868.w) / _2931;
                                float _2991 = (fma(_2146, _2884.z, fma(_2145, _2884.y, _2884.x * _2144)) + _2884.w) / _2931;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _4062 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2973) / ((_2986 * 0.699999988079071044921875) + 1.0));
                                float _3009 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                                float _3010 = 1.0 - _469;
                                float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                                float _3018 = _3017 * _3017;
                                float _3019 = _3018 * _3018;
                                float _3020 = _2966 - _2436;
                                float _3021 = _2967 - _2437;
                                float _3022 = _2968 - _2438;
                                float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                                float _3030 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2436, (-0.0) - _2437, (-0.0) - _2438));
                                float _4073 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3034 = dot(vec3(_409, _412, _415), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                                float _4084 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                                float _3042 = _2979 * _3018;
                                float _3043 = _3042 * _3042;
                                float _3049 = ((1.0 - _3043) * dot(vec3(_409, _412, _415), vec3(_2966, _2967, _2968))) + _3043;
                                float _4095 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3051 = 1.0 - _3018;
                                float _3061 = (0.5 / (((_3050 * ((_3033 * _3051) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3018) * _3033))) * _3050;
                                float _4106 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3071 = (_2996 * _2973) * (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) / ((_3041 * _3041) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _2997 * _2840.z;
                                frontier_phi_85_pred_1 = _2997 * _2840.y;
                                frontier_phi_85_pred_2 = _2997 * _2840.x;
                                frontier_phi_85_pred_3 = _3071 * _2852.z;
                                frontier_phi_85_pred_4 = _3071 * _2852.y;
                                frontier_phi_85_pred_5 = _3071 * _2852.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3080 = frontier_phi_85_pred;
                            _3079 = frontier_phi_85_pred_1;
                            _3078 = frontier_phi_85_pred_2;
                            _3077 = frontier_phi_85_pred_3;
                            _3076 = frontier_phi_85_pred_4;
                            _3075 = frontier_phi_85_pred_5;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            if (_2799 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2799;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2784;
                        frontier_phi_79_pred_1 = _2783;
                        frontier_phi_79_pred_2 = _2782;
                        frontier_phi_79_pred_3 = _2781;
                        frontier_phi_79_pred_4 = _2780;
                        frontier_phi_79_pred_5 = _2779;
                    }
                    _2421 = frontier_phi_79_pred;
                    _2419 = frontier_phi_79_pred_1;
                    _2417 = frontier_phi_79_pred_2;
                    _2415 = frontier_phi_79_pred_3;
                    _2413 = frontier_phi_79_pred_4;
                    _2411 = frontier_phi_79_pred_5;
                    uint _2577 = _2576 + 1u;
                    if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2570 = _2411;
                        _2571 = _2413;
                        _2572 = _2415;
                        _2573 = _2417;
                        _2574 = _2419;
                        _2575 = _2421;
                        _2576 = _2577;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2417;
                frontier_phi_60_61_ladder_1 = _2421;
                frontier_phi_60_61_ladder_2 = _2419;
                frontier_phi_60_61_ladder_3 = _2415;
                frontier_phi_60_61_ladder_4 = _2413;
                frontier_phi_60_61_ladder_5 = _2411;
            }
            else
            {
                frontier_phi_60_61_ladder = _2296;
                frontier_phi_60_61_ladder_1 = _2300;
                frontier_phi_60_61_ladder_2 = _2298;
                frontier_phi_60_61_ladder_3 = _2294;
                frontier_phi_60_61_ladder_4 = _2292;
                frontier_phi_60_61_ladder_5 = _2290;
            }
            _2410 = frontier_phi_60_61_ladder_5;
            _2412 = frontier_phi_60_61_ladder_4;
            _2414 = frontier_phi_60_61_ladder_3;
            _2416 = frontier_phi_60_61_ladder;
            _2418 = frontier_phi_60_61_ladder_2;
            _2420 = frontier_phi_60_61_ladder_1;
        }
        float _2425 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
        _2202 = (_2425 * _2416) + _1658;
        _2204 = (_2425 * _2418) + _1660;
        _2206 = (_2425 * _2420) + _1662;
        _2208 = ((_2410 * 0.039999999105930328369140625) * _2425) + _1988;
        _2210 = ((_2412 * 0.039999999105930328369140625) * _2425) + _1990;
        _2212 = ((_2414 * 0.039999999105930328369140625) * _2425) + _1992;
    }
    else
    {
        _2202 = _1658;
        _2204 = _1660;
        _2206 = _1662;
        _2208 = _1988;
        _2210 = _1990;
        _2212 = _1992;
    }
    float _4122 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4133 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4144 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _2229 = ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2202 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _453))) + ((_2208 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _2230 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2204 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _453))) + ((_2210 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _2231 = ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2206 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _453))) + ((_2212 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    uint _2232 = _428 + 6u;
    float _2240 = _388 / cbSceneParam._m0[86u].x;
    float _2241 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2255 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, (log2((isnan(cbSceneParam._m0[77u].w) ? _307 : (isnan(_307) ? cbSceneParam._m0[77u].w : min(_307, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2257 = _2255.x;
    float _2258 = _2255.y;
    float _2259 = _2255.z;
    float _2260 = _2255.w;
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    if (_307 > cbSceneParam._m0[78u].w)
    {
        float _2315 = isnan(_307) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _307 : min(cbSceneParam._m0[80u].w, _307));
        float _2316 = _2315 / _307;
        float _2327 = _2316 * _360;
        float _2328 = _361 * _2316;
        float _2329 = (-0.0) - _2328;
        float _2330 = _2316 * _362;
        float _2332 = (cbSceneParam._m0[77u].w * _2329) / _2315;
        float _2333 = _2332 + cbSceneParam._m0[79u].w;
        float _2334 = cbSceneParam._m0[79u].w - _2328;
        float _2340 = sqrt(((_2327 * _2327) + (_2328 * _2328)) + (_2330 * _2330));
        float _2343 = (1.0 - (cbSceneParam._m0[77u].w / _2315)) * _2340;
        float _2348 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2350 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2527;
        if (abs((_2329 - _2332) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2527 = ((((_2333 > 0.0) ? exp2(_2348 * _2333) : (2.0 - exp2(_2350 * _2333))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2343;
        }
        else
        {
            float _2471 = 1.0 / cbSceneParam._m0[80u].x;
            float _2472 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : max(_2333, _2334));
            float _2473 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : min(_2333, _2334));
            float _2482 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : min(_2472, 0.0));
            float _2483 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : min(_2473, 0.0));
            _2527 = ((abs(_2340 / _2329) * cbSceneParam._m0[80u].y) * ((((_2482 - _2483) * 2.0) - ((exp2(_2348 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)))) - exp2(_2348 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0))))) * _2471)) - ((exp2(_2350 * _2482) - exp2(_2350 * _2483)) * _2471))) + (_2343 * cbSceneParam._m0[80u].z);
        }
        vec4 _2529 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2240, _2241, 1.0), 0.0);
        float _2538 = exp2((_2527 * (-1.44269502162933349609375)) * (1.0 - _2529.w));
        float _2539 = log2(_2538);
        float _2555 = log2(_2260);
        _2352 = (exp2(_2555 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2539 * cbSceneParam._m0[78u].x)) * _2529.x) / cbSceneParam._m0[78u].x)) + _2257;
        _2354 = (exp2(_2555 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2539 * cbSceneParam._m0[78u].y)) * _2529.y) / cbSceneParam._m0[78u].y)) + _2258;
        _2356 = (exp2(_2555 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2539 * cbSceneParam._m0[78u].z)) * _2529.z) / cbSceneParam._m0[78u].z)) + _2259;
        _2358 = _2538 * _2260;
    }
    else
    {
        _2352 = _2257;
        _2354 = _2258;
        _2356 = _2259;
        _2358 = _2260;
    }
    bool _2565;
    vec4 _2368;
    vec4 _2390;
    float _2392;
    float _2396;
    float _2397;
    float _2398;
    float _2399;
    bool _2409;
    for (;;)
    {
        _2368 = cbMatDynParam._m0[0u];
        float _2370 = roundEven(_2368.y);
        bool _2371 = _2370 == 3.0;
        float _2372 = log2(_2358);
        float _2379 = exp2(_2372 * cbSceneParam._m0[78u].x) * _2229;
        float _2380 = exp2(_2372 * cbSceneParam._m0[78u].y) * _2230;
        float _2381 = exp2(_2372 * cbSceneParam._m0[78u].z) * _2231;
        float _2388 = _376 + (-0.5);
        _2390 = cbMtdParam._m0[1u];
        _2392 = _2390.y * _2388;
        float _2395 = (_2370 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2396 = _2395 * (_2371 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2352)));
        _2397 = _2395 * (_2371 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2354)));
        _2398 = _2395 * (_2371 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2356)));
        _2399 = _2388 * 0.999000012874603271484375;
        _2409 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2409)
        {
            if ((cbInstanceData._m0[_428 + 7u].x + _2399) < 0.5)
            {
                _2565 = true;
                break;
            }
        }
        uint _2506 = _429 + uint(_2368.w);
        if ((cbInstanceData._m0[_2506].w < 1.0) && ((cbInstanceData._m0[_2506].w + _2399) < 0.5))
        {
            _2565 = true;
            break;
        }
        if ((_2392 + 1.0) < _2390.x)
        {
            _2565 = true;
            break;
        }
        _2565 = false;
        break;
    }
    float _2770;
    if (_2565)
    {
        discard_state = true;
        _2770 = 0.0;
    }
    else
    {
        _2770 = cbInstanceData._m0[_2232].w;
    }
    SV_Target.x = _2396;
    SV_Target.y = _2397;
    SV_Target.z = _2398;
    SV_Target.w = _2770;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2232].w;
    discard_exit();
}


