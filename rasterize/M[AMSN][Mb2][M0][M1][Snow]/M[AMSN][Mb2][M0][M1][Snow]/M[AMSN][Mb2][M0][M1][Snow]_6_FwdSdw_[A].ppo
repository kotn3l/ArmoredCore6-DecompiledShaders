#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1012;
float _3685;
float _3686;
float _3687;
float _3688;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _250.x;
    float _254 = _250.y;
    float _255 = _250.z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _300 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3697 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _310 = ((_287.z - _255) * _301) + _255;
    float _314 = ((((_287.x - _253) * _301) + _253) * 2.0) + (-1.0);
    float _316 = ((((_287.y - _254) * _301) + _254) * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3708 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))));
    vec4 _340 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _345 = _340.x * cbMtdParam._m0[9u].x;
    float _346 = _340.y * cbMtdParam._m0[9u].y;
    float _347 = _340.z * cbMtdParam._m0[9u].z;
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _380 = (((_366.x * cbMtdParam._m0[10u].x) - _345) * _301) + _345;
    float _381 = (((_366.y * cbMtdParam._m0[10u].y) - _346) * _301) + _346;
    float _382 = (((_366.z * cbMtdParam._m0[10u].z) - _347) * _301) + _347;
    vec4 _395 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _397 = _395.x;
    float _415 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _397) * _301) + _397;
    float _418 = fma(_322, _234, fma(_316, _226 * TANGENT.x, (_212 * _204) * _314));
    float _421 = fma(_322, _235, fma(_316, _226 * TANGENT.y, (_212 * _205) * _314));
    float _424 = fma(_322, _236, fma(_316, _226 * TANGENT.z, (_212 * _206) * _314));
    float _428 = inversesqrt(dot(vec3(_418, _421, _424), vec3(_418, _421, _424)));
    float _429 = _428 * _418;
    float _430 = _428 * _421;
    float _431 = _428 * _424;
    float _3719 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _432 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3741 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3752 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3763 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _436 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _452 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _503 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _493);
    float _504 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _493);
    float _505 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _493);
    float _509 = inversesqrt(dot(vec3(_503, _504, _505), vec3(_503, _504, _505)));
    float _510 = _503 * _509;
    float _511 = _504 * _509;
    float _512 = _505 * _509;
    vec4 _517 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _519 = _517.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _692 = sqrt(((_503 * _503) + (_504 * _504)) + (_505 * _505));
        float _698 = (cbMatDynParam._m0[5u].x * _692) + cbMatDynParam._m0[5u].y;
        float _3774 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _703 = (cbMatDynParam._m0[5u].z * _692) + cbMatDynParam._m0[5u].w;
        float _3785 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) - _699)) + _699) < ((_519 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _530 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _531 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _550 = fma(_431, cbSceneParam._m0[5u].z, fma(_430, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _429));
    float _553 = fma(_431, cbSceneParam._m0[6u].z, fma(_430, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _429));
    float _556 = fma(_431, cbSceneParam._m0[7u].z, fma(_430, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _429));
    uint _569 = uint(roundEven(NORMAL.w)) * 13u;
    uint _570 = _569 + 9u;
    uint _571 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _577 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_571].x;
    float _578 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_571].y;
    float _579 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_571].z;
    float _3796 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _583 = 1.0 - _436;
    float _584 = _580 * _583;
    float _585 = _581 * _583;
    float _586 = _582 * _583;
    float _591 = (_580 + (-0.039999999105930328369140625)) * _436;
    float _592 = (_581 + (-0.039999999105930328369140625)) * _436;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _436;
    float _594 = _591 + 0.039999999105930328369140625;
    float _596 = _592 + 0.039999999105930328369140625;
    float _597 = _593 + 0.039999999105930328369140625;
    vec4 _606 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _530, cbSceneParam._m0[86u].y * _531));
    float _609 = _606.x * TEXCOORD_9.w;
    float _610 = dot(vec3(_429, _430, _431), vec3(_510, _511, _512));
    float _613 = _610 * 2.0;
    float _617 = (_613 * _429) - _510;
    float _618 = (_613 * _430) - _511;
    float _619 = (_613 * _431) - _512;
    float _623 = abs(dot(vec3(_510, _511, _512), vec3(_429, _430, _431)));
    float _3829 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _625 = sqrt(_432);
    float _638 = exp2((_625 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_625 * 3.0));
    float _644 = (1.0 - _638) * ((_625 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _645 = _638 * _625;
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1011;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _736 = fma(_681, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673));
        float _740 = fma(_681, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673));
        float _744 = fma(_681, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673));
        float _769 = _673 + _429;
        float _770 = _677 + _430;
        float _771 = _681 + _431;
        float _781 = fma(_771, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769)) - _736;
        float _782 = fma(_771, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769)) - _740;
        float _783 = fma(_771, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769)) - _744;
        float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
        float _800 = ((_787 * _781) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_736 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_787 * _782) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_740 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _802 = ((_787 * _783) / cbModelParam._m0[34u].z) + ((((((_744 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        float _839 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_805.x + (-0.5));
        float _841 = _839 * (_805.y + (-0.5));
        float _842 = _839 * (_805.z + (-0.5));
        float _849 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_812.x + (-0.5));
        float _851 = _849 * (_812.y + (-0.5));
        float _852 = _849 * (_812.z + (-0.5));
        float _859 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_819.x + (-0.5));
        float _861 = _859 * (_819.y + (-0.5));
        float _862 = _859 * (_819.z + (-0.5));
        float _869 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_826.x + (-0.5));
        float _871 = _869 * (_826.y + (-0.5));
        float _872 = _869 * (_826.z + (-0.5));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = _840 * 0.5;
        float _877 = _850 * 0.5;
        float _878 = _860 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _893 = (dot(vec3(_429, _430, _431), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _903 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3877 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_905 + 1.0))) + _910) * _873;
        float _920 = _841 * 0.5;
        float _921 = _851 * 0.5;
        float _922 = _861 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_429, _430, _431), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3910 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_947 + 1.0))) + _952) * _874;
        float _962 = _842 * 0.5;
        float _963 = _852 * 0.5;
        float _964 = _862 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_429, _430, _431), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3943 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_989 + 1.0))) + _994) * _875;
        _1011 = _842;
        _1013 = _841;
        _1014 = _840;
        _1015 = _852;
        _1016 = _851;
        _1017 = _850;
        _1018 = _862;
        _1019 = _861;
        _1020 = _860;
        _1021 = _875;
        _1022 = _874;
        _1023 = _873;
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
    }
    else
    {
        _1011 = _1012;
        _1013 = _1012;
        _1014 = _1012;
        _1015 = _1012;
        _1016 = _1012;
        _1017 = _1012;
        _1018 = _1012;
        _1019 = _1012;
        _1020 = _1012;
        _1021 = _1012;
        _1022 = _1012;
        _1023 = _1012;
        _1024 = 0.0;
        _1025 = 0.0;
        _1026 = 0.0;
    }
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1055 = fma(_681, cbModelParam._m0[30u].z, fma(_677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _673));
        float _1059 = fma(_681, cbModelParam._m0[31u].z, fma(_677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _673));
        float _1063 = fma(_681, cbModelParam._m0[32u].z, fma(_677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _673));
        float _1086 = _673 + _429;
        float _1087 = _677 + _430;
        float _1088 = _681 + _431;
        float _1098 = fma(_1088, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086)) - _1055;
        float _1099 = fma(_1088, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086)) - _1059;
        float _1100 = fma(_1088, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086)) - _1063;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1055 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1059 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[35u].z) + ((((((_1063 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1154 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1121.x + (-0.5));
        float _1156 = _1154 * (_1121.y + (-0.5));
        float _1157 = _1154 * (_1121.z + (-0.5));
        float _1164 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1128.x + (-0.5));
        float _1166 = _1164 * (_1128.y + (-0.5));
        float _1167 = _1164 * (_1128.z + (-0.5));
        float _1174 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1135.x + (-0.5));
        float _1176 = _1174 * (_1135.y + (-0.5));
        float _1177 = _1174 * (_1135.z + (-0.5));
        float _1184 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1142.x + (-0.5));
        float _1186 = _1184 * (_1142.y + (-0.5));
        float _1187 = _1184 * (_1142.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_429, _430, _431), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4006 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1218 + 1.0))) + _1223) * _1188;
        float _1233 = _1156 * 0.5;
        float _1234 = _1166 * 0.5;
        float _1235 = _1176 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_429, _430, _431), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4039 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1260 + 1.0))) + _1265) * _1189;
        float _1275 = _1157 * 0.5;
        float _1276 = _1167 * 0.5;
        float _1277 = _1177 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_429, _430, _431), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4072 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1302 + 1.0))) + _1307) * _1190;
        _1324 = _1157;
        _1325 = _1156;
        _1326 = _1155;
        _1327 = _1167;
        _1328 = _1166;
        _1329 = _1165;
        _1330 = _1177;
        _1331 = _1176;
        _1332 = _1175;
        _1333 = _1190;
        _1334 = _1189;
        _1335 = _1188;
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1012;
        _1325 = _1012;
        _1326 = _1012;
        _1327 = _1012;
        _1328 = _1012;
        _1329 = _1012;
        _1330 = _1012;
        _1331 = _1012;
        _1332 = _1012;
        _1333 = _1012;
        _1334 = _1012;
        _1335 = _1012;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1024)) + _1024;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1025)) + _1025;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1026)) + _1026;
    float _1371 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1348));
    float _1392 = _617 * 0.5;
    float _1393 = _618 * 0.5;
    float _1394 = _619 * 0.5;
    float _1395 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1398 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1401 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1435;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1408 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1011, _1015, _1018, _1021));
        float _1412 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1416 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1014, _1017, _1020, _1023));
        float _1423 = dot(vec4(cbModelParam._m0[39u]), vec4(_1392, _1393, _1394, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1446;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1437 = dot(vec4(cbModelParam._m0[40u]), vec4(_1392, _1393, _1394, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1450 = (_1446 * cbModelParam._m0[1u].x) + (_1435 * (1.0 - cbModelParam._m0[1u].x));
    float _1460 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _432);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1460 : min(cbModelParam._m0[25u].z, _1460));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_681, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_681, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_681, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_619, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _617));
        float _1524 = fma(_619, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _617));
        float _1527 = fma(_619, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _617));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1555 = frontier_phi_19_17_ladder;
        }
        float _1731;
        if (_1524 > 0.0)
        {
            _1731 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1731 = frontier_phi_28_24_ladder;
        }
        float _2026;
        if (_1527 > 0.0)
        {
            _2026 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2026 = frontier_phi_40_35_ladder;
        }
        float _2028 = isnan(_1731) ? _1555 : (isnan(_1555) ? _1731 : min(_1555, _1731));
        float _2029 = isnan(_2026) ? _2028 : (isnan(_2028) ? _2026 : min(_2028, _2026));
        float _2033 = (_2029 * _1521) + _1510;
        float _2034 = (_2029 * _1524) + _1514;
        float _2035 = (_2029 * _1527) + _1518;
        float _2036 = _2029 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2036;
        float _2040 = _2036 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 > _2040) || ((_2034 < _2038) || ((_2033 < _2038) || (_2033 > _2040))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2035, cbModelParam._m0[9u].z, fma(_2034, cbModelParam._m0[9u].y, _2033 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2035, cbModelParam._m0[10u].z, fma(_2034, cbModelParam._m0[10u].y, _2033 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2035, cbModelParam._m0[11u].z, fma(_2034, cbModelParam._m0[11u].y, _2033 * cbModelParam._m0[11u].x))), _1461);
            frontier_phi_18_40_ladder = _2180.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2180.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2180.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_18_40_ladder_2;
        _1545 = frontier_phi_18_40_ladder_1;
        _1547 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_617, _618, _619), _1461);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _432);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_681, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_681, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_681, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_619, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _617));
        float _1623 = fma(_619, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _617));
        float _1626 = fma(_619, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _617));
        float _1736;
        if (_1620 > 0.0)
        {
            _1736 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1736 = frontier_phi_30_26_ladder;
        }
        float _2053;
        if (_1623 > 0.0)
        {
            _2053 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2053 = frontier_phi_42_37_ladder;
        }
        float _2391;
        if (_1626 > 0.0)
        {
            _2391 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2391 = frontier_phi_52_49_ladder;
        }
        float _2393 = isnan(_2053) ? _1736 : (isnan(_1736) ? _2053 : min(_1736, _2053));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1620) + _1609;
        float _2399 = (_2394 * _1623) + _1613;
        float _2400 = (_2394 * _1626) + _1617;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2400, cbModelParam._m0[17u].z, fma(_2399, cbModelParam._m0[17u].y, _2398 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2400, cbModelParam._m0[18u].z, fma(_2399, cbModelParam._m0[18u].y, _2398 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2400, cbModelParam._m0[19u].z, fma(_2399, cbModelParam._m0[19u].y, _2398 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_27_52_ladder = _2522.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2522.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2522.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_27_52_ladder_2;
        _1647 = frontier_phi_27_52_ladder_1;
        _1649 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_617, _618, _619), _1552);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1662 = (((_644 * _594) + _645) * _609) * ((cbModelParam._m0[1u].w * (_1645 - _1543)) + _1543);
    float _1664 = (((_644 * _596) + _645) * _609) * ((cbModelParam._m0[1u].w * (_1647 - _1545)) + _1545);
    float _1666 = (((_644 * _597) + _645) * _609) * ((cbModelParam._m0[1u].w * (_1649 - _1547)) + _1547);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1722 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1723 = _1710 / _1722;
    float _1724 = _1714 / _1722;
    float _1725 = _1718 / _1722;
    float _1872;
    float _1873;
    float _1874;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1752 = ((uint(_1725 > cbSceneParam._m0[59u].y) + uint(_1725 > cbSceneParam._m0[59u].x)) + uint(_1725 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1753 = _1752 + 43u;
        uint _1761 = _1752 + 44u;
        uint _1769 = _1752 + 45u;
        uint _1777 = _1752 + 46u;
        float _1788 = fma(_1722, cbSceneParam._m0[_1753].w, fma(_1718, cbSceneParam._m0[_1753].z, fma(_1714, cbSceneParam._m0[_1753].y, _1710 * cbSceneParam._m0[_1753].x)));
        float _1792 = fma(_1722, cbSceneParam._m0[_1761].w, fma(_1718, cbSceneParam._m0[_1761].z, fma(_1714, cbSceneParam._m0[_1761].y, _1710 * cbSceneParam._m0[_1761].x)));
        float _1800 = fma(_1722, cbSceneParam._m0[_1777].w, fma(_1718, cbSceneParam._m0[_1777].z, fma(_1714, cbSceneParam._m0[_1777].y, _1710 * cbSceneParam._m0[_1777].x)));
        float _1805 = cbSceneParam._m0[33u].z * _1800;
        float _1807 = cbSceneParam._m0[33u].w * _1800;
        float _1810 = fma(_1722, cbSceneParam._m0[_1769].w, fma(_1718, cbSceneParam._m0[_1769].z, fma(_1714, cbSceneParam._m0[_1769].y, _1710 * cbSceneParam._m0[_1769].x))) / _1800;
        float _1858 = (cbSceneParam._m0[33u].x - sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725))) * cbSceneParam._m0[33u].y;
        float _4198 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1865 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1805 + _1788) / _1800, (_1807 + _1792) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1807 + _1788) / _1800, (_1792 - _1805) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 - _1805) / _1800, (_1792 - _1807) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 - _1807) / _1800, (_1805 + _1792) / _1800), _1810), 0.0)).x), vec4(0.25)));
        _1872 = 1.0 - (_1865 * cbSceneParam._m0[34u].x);
        _1873 = 1.0 - (_1865 * cbSceneParam._m0[34u].y);
        _1874 = 1.0 - (_1865 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1872 = 1.0;
        _1873 = 1.0;
        _1874 = 1.0;
    }
    float _1938;
    float _1940;
    float _1942;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1926 = fma(_1722, cbSceneParam._m0[63u].w, fma(_1718, cbSceneParam._m0[63u].z, fma(_1714, cbSceneParam._m0[63u].y, _1710 * cbSceneParam._m0[63u].x)));
        float _1927 = fma(_1722, cbSceneParam._m0[60u].w, fma(_1718, cbSceneParam._m0[60u].z, fma(_1714, cbSceneParam._m0[60u].y, _1710 * cbSceneParam._m0[60u].x))) / _1926;
        float _1928 = fma(_1722, cbSceneParam._m0[61u].w, fma(_1718, cbSceneParam._m0[61u].z, fma(_1714, cbSceneParam._m0[61u].y, _1710 * cbSceneParam._m0[61u].x))) / _1926;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1927 >= cbSceneParam._m0[64u].x) && (_1928 >= cbSceneParam._m0[64u].y)) && (_1927 <= cbSceneParam._m0[64u].z)) && (_1928 <= cbSceneParam._m0[64u].w))
        {
            float _2066 = fma(_1722, cbSceneParam._m0[62u].w, fma(_1718, cbSceneParam._m0[62u].z, fma(_1714, cbSceneParam._m0[62u].y, _1710 * cbSceneParam._m0[62u].x))) / _1926;
            float _2070 = isnan(cbSceneParam._m0[41u].w) ? _2066 : (isnan(_2066) ? cbSceneParam._m0[41u].w : max(_2066, cbSceneParam._m0[41u].w));
            float _2113 = (cbSceneParam._m0[33u].x - sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725))) * cbSceneParam._m0[33u].y;
            float _4214 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
            float _2120 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1927, cbSceneParam._m0[33u].w + _1928), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1927, _1928 - cbSceneParam._m0[33u].z), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1927 - cbSceneParam._m0[33u].z, _1928 - cbSceneParam._m0[33u].w), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1927 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1928), _2070), 0.0)).x), vec4(0.25)));
            float _2124 = 1.0 - (_2120 * cbSceneParam._m0[34u].x);
            float _2125 = 1.0 - (_2120 * cbSceneParam._m0[34u].y);
            float _2126 = 1.0 - (_2120 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2125) ? _1873 : (isnan(_1873) ? _2125 : min(_1873, _2125));
            frontier_phi_39_38_ladder_1 = isnan(_2124) ? _1872 : (isnan(_1872) ? _2124 : min(_1872, _2124));
            frontier_phi_39_38_ladder_2 = isnan(_2126) ? _1874 : (isnan(_1874) ? _2126 : min(_1874, _2126));
        }
        else
        {
            frontier_phi_39_38_ladder = _1873;
            frontier_phi_39_38_ladder_1 = _1872;
            frontier_phi_39_38_ladder_2 = _1874;
        }
        _1938 = frontier_phi_39_38_ladder_1;
        _1940 = frontier_phi_39_38_ladder;
        _1942 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1938 = _1872;
        _1940 = _1873;
        _1942 = _1874;
    }
    uvec4 _1947 = floatBitsToUint(cbInstanceData._m0[_569 + 5u]);
    uint _1949 = _1947.x * 14u;
    uint _1950 = _1949 + 13u;
    float _1957 = _609 + (-1.0);
    float _1962 = (cbLight._m0[_1950].x * _1957) + 1.0;
    float _1963 = (cbLight._m0[_1950].y * _1957) + 1.0;
    float _1964 = (cbLight._m0[_1950].z * _1957) + 1.0;
    float _1965 = (cbLight._m0[_1950].w * _1957) + 1.0;
    uint _1966 = _1949 + 5u;
    float _1972 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1976 = _1949 + 4u;
    float _1985 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1989 = _1949 | 1u;
    float _2000 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_429, _430, _431));
    float _2003 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_429, _430, _431));
    float _4250 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _4261 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2008 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2010 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2017 = ((cbLight._m0[_1966].x * _1972) * _2010) + (((cbLight._m0[_1976].x * _1938) * _1985) * _2008);
    float _2018 = ((_1972 * cbLight._m0[_1966].y) * _2010) + (((cbLight._m0[_1976].y * _1940) * _1985) * _2008);
    float _2019 = ((_1972 * cbLight._m0[_1966].z) * _2010) + (((cbLight._m0[_1976].z * _1942) * _1985) * _2008);
    uvec4 _2023 = floatBitsToUint(cbLight._m0[_1949 + 12u]);
    bool _2025 = _2023.x == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2025)
    {
        _2127 = _2017;
        _2129 = _2018;
        _2131 = _2019;
    }
    else
    {
        uint _2135 = _1949 + 6u;
        float _2151 = (dot(vec3(cbLight._m0[_1949 + 2u].xyz), vec3(_429, _430, _431)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4272 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2154 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2127 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _2017;
        _2129 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _2018;
        _2131 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _2019;
    }
    bool _2134 = _2023.y == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2134)
    {
        _2189 = _2127;
        _2191 = _2129;
        _2193 = _2131;
    }
    else
    {
        uint _2362 = _1949 + 7u;
        float _2378 = (dot(vec3(cbLight._m0[_1949 + 3u].xyz), vec3(_429, _430, _431)) * 0.5) + 0.5;
        float _2379 = _2378 * _2378;
        float _4288 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2380 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2381 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2189 = (((cbLight._m0[_2362].x * 0.3183098733425140380859375) * _2380) * _2381) + _2127;
        _2191 = (((cbLight._m0[_2362].y * 0.3183098733425140380859375) * _2380) * _2381) + _2129;
        _2193 = (((cbLight._m0[_2362].z * 0.3183098733425140380859375) * _2380) * _2381) + _2131;
    }
    uint _2196 = _1949 + 8u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _432) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_1949].x + _510;
    float _2212 = cbLight._m0[_1949].y + _511;
    float _2213 = cbLight._m0[_1949].z + _512;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_1949].xyz));
    float _4304 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2225 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2226 = dot(vec3(_429, _430, _431), vec3(_2218, _2219, _2220));
    float _4326 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2218, _2219, _2220));
    float _4337 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2210 * _2210;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
    float _2247 = 0.959999978542327880859375 - _591;
    float _2249 = 0.959999978542327880859375 - _592;
    float _2250 = 0.959999978542327880859375 - _593;
    float _2257 = 1.0 - _2210;
    float _2268 = (0.5 / (((_2225 * ((_2224 * _2257) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2257) + _2210) * _2224))) * _2224;
    float _4348 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    uint _2284 = _1949 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _432) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_1989].x + _510;
    float _2298 = cbLight._m0[_1989].y + _511;
    float _2299 = cbLight._m0[_1989].z + _512;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_1989].xyz));
    float _4359 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2311 = dot(vec3(_429, _430, _431), vec3(_2304, _2305, _2306));
    float _4370 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2304, _2305, _2306));
    float _4381 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
    float _2337 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2225 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2337) + _2296) * _2310))) * _2310;
    float _4392 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2359 = (((((_2330 * _2247) + _594) * cbLight._m0[_2284].x) * _2349) * _1972) + ((((cbLight._m0[_2196].x * _1938) * ((_2246 * _2247) + _594)) * _2270) * _1985);
    float _2360 = (((((_2330 * _2249) + _596) * cbLight._m0[_2284].y) * _2349) * _1972) + ((((cbLight._m0[_2196].y * _1940) * ((_2246 * _2249) + _596)) * _2270) * _1985);
    float _2361 = (((((_2330 * _2250) + _597) * cbLight._m0[_2284].z) * _2349) * _1972) + ((((cbLight._m0[_2196].z * _1942) * ((_2246 * _2250) + _597)) * _2270) * _1985);
    float _2417;
    float _2419;
    float _2421;
    if (_2025)
    {
        _2417 = _2359;
        _2419 = _2360;
        _2421 = _2361;
    }
    else
    {
        uint _2423 = _1949 + 2u;
        uint _2427 = _1949 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _432) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _510;
        float _2444 = cbLight._m0[_2423].y + _511;
        float _2445 = cbLight._m0[_2423].z + _512;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_2423].xyz));
        float _4403 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2457 = dot(vec3(_429, _430, _431), vec3(_2450, _2451, _2452));
        float _4414 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4425 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2225 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2483) + _2442) * _2456))) * _2456;
        float _4436 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2417 = (((((_2476 * _2247) + _594) * cbLight._m0[_2427].x) * _2495) * _2496) + _2359;
        _2419 = (((((_2476 * _2249) + _596) * cbLight._m0[_2427].y) * _2495) * _2496) + _2360;
        _2421 = (((((_2476 * _2250) + _597) * cbLight._m0[_2427].z) * _2495) * _2496) + _2361;
    }
    float _2527;
    float _2529;
    float _2531;
    if (_2134)
    {
        _2527 = _2417;
        _2529 = _2419;
        _2531 = _2421;
    }
    else
    {
        uint _2538 = _1949 + 3u;
        uint _2542 = _1949 + 11u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _432) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _510;
        float _2559 = cbLight._m0[_2538].y + _511;
        float _2560 = cbLight._m0[_2538].z + _512;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_2538].xyz));
        float _4452 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2572 = dot(vec3(_429, _430, _431), vec3(_2565, _2566, _2567));
        float _4463 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4474 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0);
        float _2598 = 1.0 - _2557;
        float _2608 = (0.5 / (((_2225 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2598) + _2557) * _2571))) * _2571;
        float _4485 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2527 = (((((_2591 * _2247) + _594) * cbLight._m0[_2542].x) * _2610) * _2611) + _2417;
        _2529 = (((((_2591 * _2249) + _596) * cbLight._m0[_2542].y) * _2610) * _2611) + _2419;
        _2531 = (((((_2591 * _2250) + _597) * cbLight._m0[_2542].z) * _2610) * _2611) + _2421;
    }
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_1947.y == 0u)
    {
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.x;
        uint _2644 = uint((float(_2632.y) * floor(float(uint(cbSceneParam._m0[85u].y * _531) / _2633))) + floor(float(uint(cbSceneParam._m0[85u].x * _530) / _2633)));
        float _2654 = (log2(_1725 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2655 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        uint _2658 = uint(isnan(14.0) ? _2655 : (isnan(_2655) ? 14.0 : min(_2655, 14.0)));
        uvec4 _2663 = texelFetch(g_lightClusterGridBuffer, int(((_2658 << 2u) + (_2644 << 6u)) >> 2u));
        uint _2664 = _2663.x;
        uint _2665 = _2632.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2665 >> 4u) & 15u)) + 4294967295u) & _2664) == 0u) || ((_2665 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            uint _2901 = 0u;
            uint _2910;
            bool _2911;
            for (;;)
            {
                _2910 = texelFetch(g_lightClassification, int((((_2658 << 5u) + (_2644 << 9u)) + (_2901 << 2u)) >> 2u)).x;
                _2911 = _2910 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2911)
                {
                    frontier_phi_73_pred = _2900;
                    frontier_phi_73_pred_1 = _2899;
                    frontier_phi_73_pred_2 = _2898;
                    frontier_phi_73_pred_3 = _2897;
                    frontier_phi_73_pred_4 = _2896;
                    frontier_phi_73_pred_5 = _2895;
                }
                else
                {
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    uint _3046;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2910;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3050 = uint(findLSB(_3046)) + (_2901 << 5u);
                        uint _3047 = (_3046 + 4294967295u) & _3046;
                        uint _3052 = _3050 * 48u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3072 = (_3050 * 48u) + 4u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3091 = (_3050 * 48u) + 8u;
                        vec3 _3102 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x));
                        float _3106 = _3066.x - _1723;
                        float _3107 = _3066.y - _1724;
                        float _3108 = _3066.z - _1725;
                        float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                        float _3112 = inversesqrt(_3109);
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3116 = dot(vec3(_550, _553, _556), vec3(_3113, _3114, _3115));
                        float _3121 = 1.0 - (_3109 * _3066.w);
                        float _4511 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3123 = sqrt(_3109) * _3085.w;
                        float _3126 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3116) + _3127;
                        float _3133 = _3123 * _3123;
                        float _3137 = ((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3122) / ((_3133 * 0.699999988079071044921875) + 1.0);
                        float _3141 = (-0.0) - _1723;
                        float _3142 = (-0.0) - _1724;
                        float _3143 = (-0.0) - _1725;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3157 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                        float _3158 = 1.0 - _625;
                        float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                        float _3166 = _3165 * _3165;
                        float _3167 = _3166 * _3166;
                        float _3168 = _3148 + _3113;
                        float _3169 = _3149 + _3114;
                        float _3170 = _3150 + _3115;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3178 = dot(vec3(_550, _553, _556), vec3(_3148, _3149, _3150));
                        float _4527 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3182 = dot(vec3(_550, _553, _556), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                        float _4538 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                        float _3190 = _3126 * _3166;
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3116) + _3191;
                        float _4549 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3195 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3196 = 1.0 - _3166;
                        float _3206 = (0.5 / (((_3195 * ((_3181 * _3196) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3166) * _3181))) * _3195;
                        float _4560 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3217 = (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3189 * _3189) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125))) * _3122;
                        _2970 = (_3137 * _3085.x) + _3043;
                        _2971 = (_3137 * _3085.y) + _3044;
                        _2972 = (_3137 * _3085.z) + _3045;
                        _2967 = (_3217 * _3102.x) + _3040;
                        _2968 = (_3217 * _3102.y) + _3041;
                        _2969 = (_3217 * _3102.z) + _3042;
                        if (_3047 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _3047;
                        }
                    }
                    frontier_phi_73_pred = _2972;
                    frontier_phi_73_pred_1 = _2971;
                    frontier_phi_73_pred_2 = _2970;
                    frontier_phi_73_pred_3 = _2969;
                    frontier_phi_73_pred_4 = _2968;
                    frontier_phi_73_pred_5 = _2967;
                }
                _2754 = frontier_phi_73_pred;
                _2752 = frontier_phi_73_pred_1;
                _2750 = frontier_phi_73_pred_2;
                _2748 = frontier_phi_73_pred_3;
                _2746 = frontier_phi_73_pred_4;
                _2744 = frontier_phi_73_pred_5;
                uint _2902 = _2901 + 1u;
                if (_2902 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2895 = _2744;
                    _2896 = _2746;
                    _2897 = _2748;
                    _2898 = _2750;
                    _2899 = _2752;
                    _2900 = _2754;
                    _2901 = _2902;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((4294967295u << _2760) & _2664) == 0u)
        {
            _2863 = _2743;
            _2865 = _2745;
            _2867 = _2747;
            _2869 = _2749;
            _2871 = _2751;
            _2873 = _2753;
        }
        else
        {
            float _2888 = inversesqrt(dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725)));
            float _2889 = _2888 * _1723;
            float _2890 = _2888 * _1724;
            float _2891 = _2888 * _1725;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _3023 = _2743;
                float _3024 = _2745;
                float _3025 = _2747;
                float _3026 = _2749;
                float _3027 = _2751;
                float _3028 = _2753;
                uint _3029 = _2760;
                uint _3038;
                bool _3039;
                for (;;)
                {
                    _3038 = texelFetch(g_lightClassification, int((((_2658 << 5u) + (_2644 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                    _3039 = _3038 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3039)
                    {
                        frontier_phi_84_pred = _3027;
                        frontier_phi_84_pred_1 = _3026;
                        frontier_phi_84_pred_2 = _3025;
                        frontier_phi_84_pred_3 = _3024;
                        frontier_phi_84_pred_4 = _3023;
                        frontier_phi_84_pred_5 = _3028;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3244 = _3023;
                        float _3245 = _3024;
                        float _3246 = _3025;
                        float _3247 = _3026;
                        float _3248 = _3027;
                        float _3249 = _3028;
                        uint _3250 = _3038;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3320;
                        vec4 _3336;
                        float _3383;
                        bool _3384;
                        for (;;)
                        {
                            uint _3261 = ((_3029 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3307 = (_3261 * 40u) + 16u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3323 = (_3261 * 40u) + 20u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3339 = (_3261 * 40u) + 24u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3358 = (_3261 * 40u) + 28u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3383 = fma(_1725, _3371.z, fma(_1724, _3371.y, _3371.x * _1723)) + _3371.w;
                            _3384 = !((fma(_1725, _3352.z, fma(_1724, _3352.y, _3352.x * _1723)) + _3352.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3384)
                            {
                                float _3411 = _3276.x - _1723;
                                float _3412 = _3276.y - _1724;
                                float _3413 = _3276.z - _1725;
                                float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                                float _3417 = inversesqrt(_3414);
                                float _3418 = _3417 * _3411;
                                float _3419 = _3417 * _3412;
                                float _3420 = _3417 * _3413;
                                float _3424 = 1.0 - (_3414 / (_3277 * _3277));
                                float _4571 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3429 = sqrt(_3414) * _3292.w;
                                float _3431 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                                float _3432 = _3431 * _3431;
                                float _3435 = ((1.0 - _3432) * dot(vec3(_3418, _3419, _3420), vec3(_550, _553, _556))) + _3432;
                                float _3438 = _3429 * _3429;
                                float _3442 = (fma(_1725, _3320.z, fma(_1724, _3320.y, _3320.x * _1723)) + _3320.w) / _3383;
                                float _3443 = (fma(_1725, _3336.z, fma(_1724, _3336.y, _3336.x * _1723)) + _3336.w) / _3383;
                                float _3447 = 1.0 - dot(vec2(_3442, _3443), vec2(_3442, _3443));
                                float _4587 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3449 = _3448 * (((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3425) / ((_3438 * 0.699999988079071044921875) + 1.0));
                                float _3461 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                                float _3462 = 1.0 - _625;
                                float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                                float _3470 = _3469 * _3469;
                                float _3471 = _3470 * _3470;
                                float _3472 = _3418 - _2889;
                                float _3473 = _3419 - _2890;
                                float _3474 = _3420 - _2891;
                                float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                                float _3482 = dot(vec3(_550, _553, _556), vec3((-0.0) - _2889, (-0.0) - _2890, (-0.0) - _2891));
                                float _4598 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3486 = dot(vec3(_550, _553, _556), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                                float _4609 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                                float _3494 = _3431 * _3470;
                                float _3495 = _3494 * _3494;
                                float _3501 = ((1.0 - _3495) * dot(vec3(_550, _553, _556), vec3(_3418, _3419, _3420))) + _3495;
                                float _4620 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3503 = 1.0 - _3470;
                                float _3513 = (0.5 / (((_3502 * ((_3485 * _3503) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3470) * _3485))) * _3502;
                                float _4631 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3523 = (_3448 * _3425) * (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3493 * _3493) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3449 * _3292.y;
                                frontier_phi_90_pred_1 = _3449 * _3292.x;
                                frontier_phi_90_pred_2 = _3523 * _3304.z;
                                frontier_phi_90_pred_3 = _3523 * _3304.y;
                                frontier_phi_90_pred_4 = _3523 * _3304.x;
                                frontier_phi_90_pred_5 = _3449 * _3292.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_90_pred;
                            _3530 = frontier_phi_90_pred_1;
                            _3529 = frontier_phi_90_pred_2;
                            _3528 = frontier_phi_90_pred_3;
                            _3527 = frontier_phi_90_pred_4;
                            _3532 = frontier_phi_90_pred_5;
                            _3234 = _3530 + _3247;
                            _3235 = _3531 + _3248;
                            _3236 = _3532 + _3249;
                            _3231 = _3527 + _3244;
                            _3232 = _3528 + _3245;
                            _3233 = _3529 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3235;
                        frontier_phi_84_pred_1 = _3234;
                        frontier_phi_84_pred_2 = _3233;
                        frontier_phi_84_pred_3 = _3232;
                        frontier_phi_84_pred_4 = _3231;
                        frontier_phi_84_pred_5 = _3236;
                    }
                    _2872 = frontier_phi_84_pred;
                    _2870 = frontier_phi_84_pred_1;
                    _2868 = frontier_phi_84_pred_2;
                    _2866 = frontier_phi_84_pred_3;
                    _2864 = frontier_phi_84_pred_4;
                    _2874 = frontier_phi_84_pred_5;
                    uint _3030 = _3029 + 1u;
                    if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3023 = _2864;
                        _3024 = _2866;
                        _3025 = _2868;
                        _3026 = _2870;
                        _3027 = _2872;
                        _3028 = _2874;
                        _3029 = _3030;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2874;
                frontier_phi_65_66_ladder_1 = _2870;
                frontier_phi_65_66_ladder_2 = _2872;
                frontier_phi_65_66_ladder_3 = _2866;
                frontier_phi_65_66_ladder_4 = _2864;
                frontier_phi_65_66_ladder_5 = _2868;
            }
            else
            {
                frontier_phi_65_66_ladder = _2753;
                frontier_phi_65_66_ladder_1 = _2749;
                frontier_phi_65_66_ladder_2 = _2751;
                frontier_phi_65_66_ladder_3 = _2745;
                frontier_phi_65_66_ladder_4 = _2743;
                frontier_phi_65_66_ladder_5 = _2747;
            }
            _2863 = frontier_phi_65_66_ladder_4;
            _2865 = frontier_phi_65_66_ladder_3;
            _2867 = frontier_phi_65_66_ladder_5;
            _2869 = frontier_phi_65_66_ladder_1;
            _2871 = frontier_phi_65_66_ladder_2;
            _2873 = frontier_phi_65_66_ladder;
        }
        float _2878 = isnan(1.0) ? _609 : (isnan(_609) ? 1.0 : min(_609, 1.0));
        _2676 = (_2878 * _2869) + _2189;
        _2678 = (_2878 * _2871) + _2191;
        _2680 = (_2878 * _2873) + _2193;
        _2682 = ((_2863 * _594) * _2878) + _2527;
        _2684 = ((_2865 * _596) * _2878) + _2529;
        _2686 = ((_2867 * _597) * _2878) + _2531;
    }
    else
    {
        _2676 = _2189;
        _2678 = _2191;
        _2680 = _2193;
        _2682 = _2527;
        _2684 = _2529;
        _2686 = _2531;
    }
    float _4647 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4658 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4669 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2703 = ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2676 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _609))) + ((_2682 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1450)) * cbPerFrame._m0[3u].x);
    float _2704 = ((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2678 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _609))) + ((_2684 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1450)) * cbPerFrame._m0[3u].x);
    float _2705 = ((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2680 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _609))) + ((_2686 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1450)) * cbPerFrame._m0[3u].x);
    uint _2706 = _569 + 6u;
    float _2714 = _530 / cbSceneParam._m0[86u].x;
    float _2715 = _531 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _452 : (isnan(_452) ? cbSceneParam._m0[77u].w : min(_452, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_452 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_452) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _452 : min(cbSceneParam._m0[80u].w, _452));
        float _2769 = _2768 / _452;
        float _2780 = _2769 * _503;
        float _2781 = _504 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2783 = _2769 * _505;
        float _2785 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2781;
        float _2793 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2782 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2924 = 1.0 / cbSceneParam._m0[80u].x;
            float _2925 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2926 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            _2980 = ((abs(_2793 / _2782) * cbSceneParam._m0[80u].y) * ((((_2935 - _2936) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0))))) * _2924)) - ((exp2(_2803 * _2935) - exp2(_2803 * _2936)) * _2924))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2734);
        _2805 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2807 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2809 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2811 = _2991 * _2734;
    }
    else
    {
        _2805 = _2731;
        _2807 = _2732;
        _2809 = _2733;
        _2811 = _2734;
    }
    bool _3018;
    vec4 _2821;
    vec4 _2843;
    float _2845;
    float _2849;
    float _2850;
    float _2851;
    float _2852;
    bool _2862;
    for (;;)
    {
        _2821 = cbMatDynParam._m0[0u];
        float _2823 = roundEven(_2821.y);
        bool _2824 = _2823 == 3.0;
        float _2825 = log2(_2811);
        float _2832 = exp2(_2825 * cbSceneParam._m0[78u].x) * _2703;
        float _2833 = exp2(_2825 * cbSceneParam._m0[78u].y) * _2704;
        float _2834 = exp2(_2825 * cbSceneParam._m0[78u].z) * _2705;
        float _2841 = _519 + (-0.5);
        _2843 = cbMtdParam._m0[1u];
        _2845 = _2843.y * _2841;
        float _2848 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2849 = _2848 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
        _2850 = _2848 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
        _2851 = _2848 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
        _2852 = _2841 * 0.999000012874603271484375;
        _2862 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2862)
        {
            if ((cbInstanceData._m0[_569 + 7u].x + _2852) < 0.5)
            {
                _3018 = true;
                break;
            }
        }
        uint _2959 = _570 + uint(_2821.w);
        if ((cbInstanceData._m0[_2959].w < 1.0) && ((cbInstanceData._m0[_2959].w + _2852) < 0.5))
        {
            _3018 = true;
            break;
        }
        if ((_2845 + 1.0) < _2843.x)
        {
            _3018 = true;
            break;
        }
        _3018 = false;
        break;
    }
    float _3222;
    if (_3018)
    {
        discard_state = true;
        _3222 = 0.0;
    }
    else
    {
        _3222 = cbInstanceData._m0[_2706].w;
    }
    SV_Target.x = _2849;
    SV_Target.y = _2850;
    SV_Target.z = _2851;
    SV_Target.w = _3222;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2706].w;
    discard_exit();
}


