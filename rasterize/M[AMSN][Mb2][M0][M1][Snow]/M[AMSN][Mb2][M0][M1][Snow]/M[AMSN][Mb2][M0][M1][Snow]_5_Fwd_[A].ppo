#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1049;
float _3417;
float _3418;
float _3419;
float _3420;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3429 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3440 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))));
    float _321 = fma(_318, _230, fma(_312, _223, _310 * _209));
    float _324 = fma(_318, _231, fma(_312, _224, _310 * _210));
    float _327 = fma(_318, _232, fma(_312, _225, _310 * _211));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _345 = cbMtdParam._m0[11u].z + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3451 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _369 = _364.x * cbMtdParam._m0[9u].x;
    float _370 = _364.y * cbMtdParam._m0[9u].y;
    float _371 = _364.z * cbMtdParam._m0[9u].z;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _404 = (((_390.x * cbMtdParam._m0[10u].x) - _369) * _297) + _369;
    float _405 = (((_390.y * cbMtdParam._m0[10u].y) - _370) * _297) + _370;
    float _406 = (((_390.z * cbMtdParam._m0[10u].z) - _371) * _297) + _371;
    vec4 _419 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _430 = ((_419.x - _404) * _346) + _404;
    float _431 = ((_419.y - _405) * _346) + _405;
    float _432 = ((_419.z - _406) * _346) + _406;
    vec4 _445 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _452 = (_445.x * 2.0) + (-1.0);
    float _453 = (_445.y * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3462 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _462 = ((_445.z - _306) * _346) + _306;
    float _469 = ((_452 - _310) * _346) + _310;
    float _470 = ((_453 - _312) * _346) + _312;
    float _471 = ((sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) - _318) * _346) + _318;
    float _474 = fma(_471, _230, fma(_470, _223, _469 * _209));
    float _477 = fma(_471, _231, fma(_470, _224, _469 * _210));
    float _480 = fma(_471, _232, fma(_470, _225, _469 * _211));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    float _485 = _484 * _474;
    float _486 = _484 * _477;
    float _487 = _484 * _480;
    float _3473 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _488 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3495 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3506 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _507 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _557 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _547);
    float _558 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _547);
    float _559 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _547);
    float _563 = inversesqrt(dot(vec3(_557, _558, _559), vec3(_557, _558, _559)));
    float _564 = _557 * _563;
    float _565 = _558 * _563;
    float _566 = _559 * _563;
    vec4 _571 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _573 = _571.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _729 = sqrt(((_557 * _557) + (_558 * _558)) + (_559 * _559));
        float _735 = (cbMatDynParam._m0[5u].x * _729) + cbMatDynParam._m0[5u].y;
        float _3517 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _740 = (cbMatDynParam._m0[5u].z * _729) + cbMatDynParam._m0[5u].w;
        float _3528 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) - _736)) + _736) < ((_573 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _585 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _586 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _605 = fma(_487, cbSceneParam._m0[5u].z, fma(_486, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _485));
    float _608 = fma(_487, cbSceneParam._m0[6u].z, fma(_486, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _485));
    float _611 = fma(_487, cbSceneParam._m0[7u].z, fma(_486, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _485));
    uint _624 = uint(roundEven(NORMAL.w)) * 13u;
    uint _625 = _624 + 9u;
    uint _626 = _625 + uint(cbMatDynParam._m0[0u].w);
    float _632 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_626].x;
    float _633 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_626].y;
    float _634 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_626].z;
    float _3539 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    vec4 _646 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _585, cbSceneParam._m0[86u].y * _586));
    float _649 = _646.x * TEXCOORD_9.w;
    float _650 = dot(vec3(_485, _486, _487), vec3(_564, _565, _566));
    float _653 = _650 * 2.0;
    float _657 = (_653 * _485) - _564;
    float _658 = (_653 * _486) - _565;
    float _659 = (_653 * _487) - _566;
    float _663 = abs(dot(vec3(_564, _565, _566), vec3(_485, _486, _487)));
    float _3572 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _665 = sqrt(_488);
    float _678 = exp2((_665 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_665 * 3.0));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _777 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _781 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _806 = _710 + _485;
        float _807 = _714 + _486;
        float _808 = _718 + _487;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_485, _486, _487), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3620 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_485, _486, _487), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3653 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_485, _486, _487), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3686 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1096 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1100 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1123 = _710 + _485;
        float _1124 = _714 + _486;
        float _1125 = _718 + _487;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_485, _486, _487), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3749 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_485, _486, _487), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3782 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_485, _486, _487), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3815 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = _1049;
        _1371 = _1049;
        _1372 = _1049;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1061)) + _1061;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1062)) + _1062;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _657 * 0.5;
    float _1430 = _658 * 0.5;
    float _1431 = _659 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _488);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1547 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1551 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1555 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1558 = fma(_659, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657));
        float _1561 = fma(_659, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657));
        float _1564 = fma(_659, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657));
        float _1592;
        if (_1558 > 0.0)
        {
            _1592 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1592 = frontier_phi_19_17_ladder;
        }
        float _1796;
        if (_1561 > 0.0)
        {
            _1796 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1796 = frontier_phi_28_24_ladder;
        }
        float _2039;
        if (_1564 > 0.0)
        {
            _2039 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2039 = frontier_phi_40_35_ladder;
        }
        float _2041 = isnan(_1796) ? _1592 : (isnan(_1592) ? _1796 : min(_1592, _1796));
        float _2042 = isnan(_2039) ? _2041 : (isnan(_2041) ? _2039 : min(_2041, _2039));
        float _2046 = (_2042 * _1558) + _1547;
        float _2047 = (_2042 * _1561) + _1551;
        float _2048 = (_2042 * _1564) + _1555;
        float _2049 = _2042 * 9.9999997473787516355514526367188e-05;
        float _2051 = (-1.0) - _2049;
        float _2053 = _2049 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2048 > _2053) || ((_2048 < _2051) || ((_2047 > _2053) || ((_2047 < _2051) || ((_2046 < _2051) || (_2046 > _2053))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2172 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2048, cbModelParam._m0[9u].z, fma(_2047, cbModelParam._m0[9u].y, _2046 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2048, cbModelParam._m0[10u].z, fma(_2047, cbModelParam._m0[10u].y, _2046 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2048, cbModelParam._m0[11u].z, fma(_2047, cbModelParam._m0[11u].y, _2046 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_18_40_ladder = _2172.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2172.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2172.x * cbModelParam._m0[1u].y;
        }
        _1580 = frontier_phi_18_40_ladder_2;
        _1582 = frontier_phi_18_40_ladder_1;
        _1584 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_657, _658, _659), _1498);
        _1580 = _1568.x * cbModelParam._m0[1u].y;
        _1582 = _1568.y * cbModelParam._m0[1u].y;
        _1584 = _1568.z * cbModelParam._m0[1u].y;
    }
    float _1588 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _488);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1588 : min(cbModelParam._m0[25u].w, _1588));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_659, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657));
        float _1660 = fma(_659, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657));
        float _1663 = fma(_659, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657));
        float _1801;
        if (_1657 > 0.0)
        {
            _1801 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1801 = frontier_phi_30_26_ladder;
        }
        float _2066;
        if (_1660 > 0.0)
        {
            _2066 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2066 = frontier_phi_42_37_ladder;
        }
        float _2271;
        if (_1663 > 0.0)
        {
            _2271 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2271 = frontier_phi_51_48_ladder;
        }
        float _2273 = isnan(_2066) ? _1801 : (isnan(_1801) ? _2066 : min(_1801, _2066));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1657) + _1646;
        float _2279 = (_2274 * _1660) + _1650;
        float _2280 = (_2274 * _1663) + _1654;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2280, cbModelParam._m0[17u].z, fma(_2279, cbModelParam._m0[17u].y, _2278 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2280, cbModelParam._m0[18u].z, fma(_2279, cbModelParam._m0[18u].y, _2278 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2280, cbModelParam._m0[19u].z, fma(_2279, cbModelParam._m0[19u].y, _2278 * cbModelParam._m0[19u].x))), _1589);
            frontier_phi_27_51_ladder = _2478.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2478.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2478.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_27_51_ladder_2;
        _1684 = frontier_phi_27_51_ladder_1;
        _1686 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_657, _658, _659), _1589);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1698 = ((((1.0 - _678) * ((_665 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_678 * _665)) * _649;
    float _1699 = _1698 * ((cbModelParam._m0[1u].w * (_1682 - _1580)) + _1580);
    float _1700 = _1698 * ((cbModelParam._m0[1u].w * (_1684 - _1582)) + _1582);
    float _1701 = _1698 * ((cbModelParam._m0[1u].w * (_1686 - _1584)) + _1584);
    float _1704 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    uvec4 _1720 = floatBitsToUint(cbInstanceData._m0[_624 + 5u]);
    uint _1722 = _1720.x * 14u;
    uint _1723 = _1722 + 13u;
    float _1730 = _649 + (-1.0);
    float _1735 = (cbLight._m0[_1723].x * _1730) + 1.0;
    float _1736 = (cbLight._m0[_1723].y * _1730) + 1.0;
    float _1737 = (cbLight._m0[_1723].z * _1730) + 1.0;
    float _1738 = (cbLight._m0[_1723].w * _1730) + 1.0;
    uint _1739 = _1722 + 5u;
    float _1745 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1749 = _1722 + 4u;
    float _1755 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1759 = _1722 | 1u;
    float _1770 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_485, _486, _487));
    float _1773 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_485, _486, _487));
    float _3951 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _3962 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1778 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.3183098733425140380859375;
    float _1780 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1787 = ((cbLight._m0[_1739].x * _1745) * _1780) + ((cbLight._m0[_1749].x * _1755) * _1778);
    float _1788 = ((_1745 * cbLight._m0[_1739].y) * _1780) + ((_1755 * cbLight._m0[_1749].y) * _1778);
    float _1789 = ((_1745 * cbLight._m0[_1739].z) * _1780) + ((_1755 * cbLight._m0[_1749].z) * _1778);
    uvec4 _1793 = floatBitsToUint(cbLight._m0[_1722 + 12u]);
    bool _1795 = _1793.x == 0u;
    float _1806;
    float _1808;
    float _1810;
    if (_1795)
    {
        _1806 = _1787;
        _1808 = _1788;
        _1810 = _1789;
    }
    else
    {
        uint _1814 = _1722 + 6u;
        float _1830 = (dot(vec3(cbLight._m0[_1722 + 2u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _1831 = _1830 * _1830;
        float _3973 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1833 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1806 = (((cbLight._m0[_1814].x * 0.3183098733425140380859375) * _1832) * _1833) + _1787;
        _1808 = (((cbLight._m0[_1814].y * 0.3183098733425140380859375) * _1832) * _1833) + _1788;
        _1810 = (((cbLight._m0[_1814].z * 0.3183098733425140380859375) * _1832) * _1833) + _1789;
    }
    bool _1813 = _1793.y == 0u;
    float _1851;
    float _1853;
    float _1855;
    if (_1813)
    {
        _1851 = _1806;
        _1853 = _1808;
        _1855 = _1810;
    }
    else
    {
        uint _2010 = _1722 + 7u;
        float _2026 = (dot(vec3(cbLight._m0[_1722 + 3u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _3989 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2029 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1851 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1806;
        _1853 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1808;
        _1855 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1810;
    }
    uint _1858 = _1722 + 8u;
    float _1871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _488) * 0.949999988079071044921875);
    float _1872 = _1871 * _1871;
    float _1873 = cbLight._m0[_1722].x + _564;
    float _1874 = cbLight._m0[_1722].y + _565;
    float _1875 = cbLight._m0[_1722].z + _566;
    float _1879 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
    float _1880 = _1879 * _1873;
    float _1881 = _1879 * _1874;
    float _1882 = _1879 * _1875;
    float _1883 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1722].xyz));
    float _4005 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _1887 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1888 = dot(vec3(_485, _486, _487), vec3(_1880, _1881, _1882));
    float _4027 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1880, _1881, _1882));
    float _4038 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1872 * _1872;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1911 = (exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1912 = 1.0 - _1872;
    float _1923 = (0.5 / (((_1887 * ((_1886 * _1912) + _1872)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1912) + _1872) * _1886))) * _1886;
    float _4049 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    uint _1936 = _1722 + 9u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _488) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1759].x + _564;
    float _1950 = cbLight._m0[_1759].y + _565;
    float _1951 = cbLight._m0[_1759].z + _566;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1759].xyz));
    float _4060 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1963 = dot(vec3(_485, _486, _487), vec3(_1956, _1957, _1958));
    float _4071 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1956, _1957, _1958));
    float _4082 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1948 * _1948;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = 1.0 - _1948;
    float _1995 = (0.5 / (((_1887 * ((_1962 * _1985) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1985) + _1948) * _1962))) * _1962;
    float _4093 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    float _2007 = (((_1984 * cbLight._m0[_1936].x) * _1997) * _1745) + (((_1911 * cbLight._m0[_1858].x) * _1925) * _1755);
    float _2008 = (((_1984 * cbLight._m0[_1936].y) * _1997) * _1745) + (((_1911 * cbLight._m0[_1858].y) * _1925) * _1755);
    float _2009 = (((_1984 * cbLight._m0[_1936].z) * _1997) * _1745) + (((_1911 * cbLight._m0[_1858].z) * _1925) * _1755);
    float _2071;
    float _2073;
    float _2075;
    if (_1795)
    {
        _2071 = _2007;
        _2073 = _2008;
        _2075 = _2009;
    }
    else
    {
        uint _2077 = _1722 + 2u;
        uint _2081 = _1722 + 10u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _488) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _564;
        float _2098 = cbLight._m0[_2077].y + _565;
        float _2099 = cbLight._m0[_2077].z + _566;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2077].xyz));
        float _4104 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2111 = dot(vec3(_485, _486, _487), vec3(_2104, _2105, _2106));
        float _4115 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4126 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2133 = 1.0 - _2096;
        float _2143 = (0.5 / (((_1887 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _2133) + _2096) * _2110))) * _2110;
        float _4137 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2145 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2146 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _2071 = (((_2132 * cbLight._m0[_2081].x) * _2145) * _2146) + _2007;
        _2073 = (((_2132 * cbLight._m0[_2081].y) * _2145) * _2146) + _2008;
        _2075 = (((_2132 * cbLight._m0[_2081].z) * _2145) * _2146) + _2009;
    }
    float _2181;
    float _2183;
    float _2185;
    if (_1813)
    {
        _2181 = _2071;
        _2183 = _2073;
        _2185 = _2075;
    }
    else
    {
        uint _2192 = _1722 + 3u;
        uint _2196 = _1722 + 11u;
        float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _488) * 0.949999988079071044921875);
        float _2211 = _2210 * _2210;
        float _2212 = cbLight._m0[_2192].x + _564;
        float _2213 = cbLight._m0[_2192].y + _565;
        float _2214 = cbLight._m0[_2192].z + _566;
        float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
        float _2219 = _2218 * _2212;
        float _2220 = _2218 * _2213;
        float _2221 = _2218 * _2214;
        float _2222 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2192].xyz));
        float _4153 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2226 = dot(vec3(_485, _486, _487), vec3(_2219, _2220, _2221));
        float _4164 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2230 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2219, _2220, _2221));
        float _4175 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2234 = _2211 * _2211;
        float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
        float _2247 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2248 = 1.0 - _2211;
        float _2258 = (0.5 / (((_1887 * ((_2225 * _2248) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _2248) + _2211) * _2225))) * _2225;
        float _4186 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2181 = (((_2247 * cbLight._m0[_2196].x) * _2260) * _2261) + _2071;
        _2183 = (((_2247 * cbLight._m0[_2196].y) * _2260) * _2261) + _2073;
        _2185 = (((_2247 * cbLight._m0[_2196].z) * _2260) * _2261) + _2075;
    }
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_1720.y == 0u)
    {
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2336;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2336;
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2336;
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.x;
        uint _2363 = uint((float(_2351.y) * floor(float(uint(cbSceneParam._m0[85u].y * _586) / _2352))) + floor(float(uint(cbSceneParam._m0[85u].x * _585) / _2352)));
        float _2373 = (log2(_2339 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2374 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        uint _2377 = uint(isnan(14.0) ? _2374 : (isnan(_2374) ? 14.0 : min(_2374, 14.0)));
        uvec4 _2382 = texelFetch(g_lightClusterGridBuffer, int(((_2377 << 2u) + (_2363 << 6u)) >> 2u));
        uint _2383 = _2382.x;
        uint _2384 = _2351.z;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        if (((((1u << ((_2384 >> 4u) & 15u)) + 4294967295u) & _2383) == 0u) || ((_2384 & 240u) == 0u))
        {
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
        }
        else
        {
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            uint _2641 = 0u;
            uint _2650;
            bool _2651;
            for (;;)
            {
                _2650 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                _2651 = _2650 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2651)
                {
                    frontier_phi_68_pred = _2637;
                    frontier_phi_68_pred_1 = _2640;
                    frontier_phi_68_pred_2 = _2639;
                    frontier_phi_68_pred_3 = _2638;
                    frontier_phi_68_pred_4 = _2636;
                    frontier_phi_68_pred_5 = _2635;
                }
                else
                {
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    uint _2786;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2650;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2790 = uint(findLSB(_2786)) + (_2641 << 5u);
                        uint _2787 = (_2786 + 4294967295u) & _2786;
                        uint _2792 = _2790 * 48u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2812 = (_2790 * 48u) + 4u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2831 = (_2790 * 48u) + 8u;
                        vec3 _2842 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x));
                        float _2846 = _2806.x - _2337;
                        float _2847 = _2806.y - _2338;
                        float _2848 = _2806.z - _2339;
                        float _2849 = dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848));
                        float _2852 = inversesqrt(_2849);
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2856 = dot(vec3(_605, _608, _611), vec3(_2853, _2854, _2855));
                        float _2861 = 1.0 - (_2849 * _2806.w);
                        float _4212 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2862 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2863 = sqrt(_2849) * _2825.w;
                        float _2866 = 1.39999997615814208984375 / (_2863 + 1.39999997615814208984375);
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2856) + _2867;
                        float _2873 = _2863 * _2863;
                        float _2877 = ((isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))) * _2862) / ((_2873 * 0.699999988079071044921875) + 1.0);
                        float _2881 = (-0.0) - _2337;
                        float _2882 = (-0.0) - _2338;
                        float _2883 = (-0.0) - _2339;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2898 = exp2(log2(1.0 / ((_2873 * 3.5) + 5.0)) * 0.25);
                        float _2899 = 1.0 - _665;
                        float _2906 = sqrt(1.0 - ((1.0 - (_2899 * _2899)) * (1.0 - (_2898 * _2898))));
                        float _2907 = _2906 * _2906;
                        float _2908 = _2907 * _2907;
                        float _2909 = _2888 + _2853;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2919 = dot(vec3(_605, _608, _611), vec3(_2888, _2889, _2890));
                        float _4228 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2922 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2923 = dot(vec3(_605, _608, _611), vec3(_2915 * _2909, _2915 * _2910, _2915 * _2911));
                        float _4239 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2926 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2930 = ((_2926 * _2926) * (_2908 + (-1.0))) + 1.0;
                        float _2931 = _2866 * _2907;
                        float _2932 = _2931 * _2931;
                        float _2935 = ((1.0 - _2932) * _2856) + _2932;
                        float _4250 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2937 = 1.0 - _2907;
                        float _2947 = (0.5 / (((_2936 * ((_2922 * _2937) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2936 * _2937) + _2907) * _2922))) * _2936;
                        float _4261 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2958 = (((_2908 * 3.1415927410125732421875) * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) / ((_2930 * _2930) * ((_2873 * 2.1991131305694580078125) + 3.141590118408203125))) * _2862;
                        _2710 = (_2877 * _2825.x) + _2783;
                        _2711 = (_2877 * _2825.y) + _2784;
                        _2712 = (_2877 * _2825.z) + _2785;
                        _2707 = (_2958 * _2842.x) + _2780;
                        _2708 = (_2958 * _2842.y) + _2781;
                        _2709 = (_2958 * _2842.z) + _2782;
                        if (_2787 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2787;
                        }
                    }
                    frontier_phi_68_pred = _2709;
                    frontier_phi_68_pred_1 = _2712;
                    frontier_phi_68_pred_2 = _2711;
                    frontier_phi_68_pred_3 = _2710;
                    frontier_phi_68_pred_4 = _2708;
                    frontier_phi_68_pred_5 = _2707;
                }
                _2488 = frontier_phi_68_pred;
                _2494 = frontier_phi_68_pred_1;
                _2492 = frontier_phi_68_pred_2;
                _2490 = frontier_phi_68_pred_3;
                _2486 = frontier_phi_68_pred_4;
                _2484 = frontier_phi_68_pred_5;
                uint _2642 = _2641 + 1u;
                if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2635 = _2484;
                    _2636 = _2486;
                    _2637 = _2488;
                    _2638 = _2490;
                    _2639 = _2492;
                    _2640 = _2494;
                    _2641 = _2642;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
        }
        uvec4 _2497 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2498 = _2497.z;
        uint _2500 = (_2498 >> 8u) & 15u;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        if (((4294967295u << _2500) & _2383) == 0u)
        {
            _2603 = _2483;
            _2605 = _2485;
            _2607 = _2487;
            _2609 = _2489;
            _2611 = _2491;
            _2613 = _2493;
        }
        else
        {
            float _2628 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
            float _2629 = _2628 * _2337;
            float _2630 = _2628 * _2338;
            float _2631 = _2628 * _2339;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2500 < ((_2498 >> 12u) & 15u))
            {
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2763 = _2483;
                float _2764 = _2485;
                float _2765 = _2487;
                float _2766 = _2489;
                float _2767 = _2491;
                float _2768 = _2493;
                uint _2769 = _2500;
                uint _2778;
                bool _2779;
                for (;;)
                {
                    _2778 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                    _2779 = _2778 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2779)
                    {
                        frontier_phi_79_pred = _2768;
                        frontier_phi_79_pred_1 = _2767;
                        frontier_phi_79_pred_2 = _2766;
                        frontier_phi_79_pred_3 = _2765;
                        frontier_phi_79_pred_4 = _2764;
                        frontier_phi_79_pred_5 = _2763;
                    }
                    else
                    {
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        float _2988 = _2766;
                        float _2989 = _2767;
                        float _2990 = _2768;
                        uint _2991 = _2778;
                        uint _2992;
                        vec4 _3017;
                        float _3018;
                        vec4 _3033;
                        vec3 _3045;
                        vec4 _3061;
                        vec4 _3077;
                        float _3124;
                        bool _3125;
                        for (;;)
                        {
                            uint _3002 = ((_2769 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2991));
                            _2992 = (_2991 + 4294967295u) & _2991;
                            uint _3004 = _3002 * 40u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3018 = _3017.w;
                            uint _3020 = (_3002 * 40u) + 4u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3035 = (_3002 * 40u) + 8u;
                            _3045 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x));
                            uint _3048 = (_3002 * 40u) + 16u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3064 = (_3002 * 40u) + 20u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3080 = (_3002 * 40u) + 24u;
                            vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3099 = (_3002 * 40u) + 28u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3124 = fma(_2339, _3112.z, fma(_2338, _3112.y, _3112.x * _2337)) + _3112.w;
                            _3125 = !((fma(_2339, _3093.z, fma(_2338, _3093.y, _3093.x * _2337)) + _3093.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3125)
                            {
                                float _3152 = _3017.x - _2337;
                                float _3153 = _3017.y - _2338;
                                float _3154 = _3017.z - _2339;
                                float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                                float _3158 = inversesqrt(_3155);
                                float _3159 = _3158 * _3152;
                                float _3160 = _3158 * _3153;
                                float _3161 = _3158 * _3154;
                                float _3165 = 1.0 - (_3155 / (_3018 * _3018));
                                float _4272 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3170 = sqrt(_3155) * _3033.w;
                                float _3172 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                                float _3173 = _3172 * _3172;
                                float _3176 = ((1.0 - _3173) * dot(vec3(_3159, _3160, _3161), vec3(_605, _608, _611))) + _3173;
                                float _3179 = _3170 * _3170;
                                float _3183 = (fma(_2339, _3061.z, fma(_2338, _3061.y, _3061.x * _2337)) + _3061.w) / _3124;
                                float _3184 = (fma(_2339, _3077.z, fma(_2338, _3077.y, _3077.x * _2337)) + _3077.w) / _3124;
                                float _3188 = 1.0 - dot(vec2(_3183, _3184), vec2(_3183, _3184));
                                float _4288 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3190 = _3189 * (((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3166) / ((_3179 * 0.699999988079071044921875) + 1.0));
                                float _3202 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                                float _3203 = 1.0 - _665;
                                float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                                float _3211 = _3210 * _3210;
                                float _3212 = _3211 * _3211;
                                float _3213 = _3159 - _2629;
                                float _3214 = _3160 - _2630;
                                float _3215 = _3161 - _2631;
                                float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                                float _3223 = dot(vec3(_605, _608, _611), vec3((-0.0) - _2629, (-0.0) - _2630, (-0.0) - _2631));
                                float _4299 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3227 = dot(vec3(_605, _608, _611), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                                float _4310 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                                float _3235 = _3172 * _3211;
                                float _3236 = _3235 * _3235;
                                float _3242 = ((1.0 - _3236) * dot(vec3(_605, _608, _611), vec3(_3159, _3160, _3161))) + _3236;
                                float _4321 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3244 = 1.0 - _3211;
                                float _3254 = (0.5 / (((_3243 * ((_3226 * _3244) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3211) * _3226))) * _3243;
                                float _4332 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3264 = (_3189 * _3166) * (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3234 * _3234) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3190 * _3033.z;
                                frontier_phi_85_pred_1 = _3190 * _3033.y;
                                frontier_phi_85_pred_2 = _3190 * _3033.x;
                                frontier_phi_85_pred_3 = _3264 * _3045.z;
                                frontier_phi_85_pred_4 = _3264 * _3045.y;
                                frontier_phi_85_pred_5 = _3264 * _3045.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3273 = frontier_phi_85_pred;
                            _3272 = frontier_phi_85_pred_1;
                            _3271 = frontier_phi_85_pred_2;
                            _3270 = frontier_phi_85_pred_3;
                            _3269 = frontier_phi_85_pred_4;
                            _3268 = frontier_phi_85_pred_5;
                            _2975 = _3271 + _2988;
                            _2976 = _3272 + _2989;
                            _2977 = _3273 + _2990;
                            _2972 = _3268 + _2985;
                            _2973 = _3269 + _2986;
                            _2974 = _3270 + _2987;
                            if (_2992 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2992;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2977;
                        frontier_phi_79_pred_1 = _2976;
                        frontier_phi_79_pred_2 = _2975;
                        frontier_phi_79_pred_3 = _2974;
                        frontier_phi_79_pred_4 = _2973;
                        frontier_phi_79_pred_5 = _2972;
                    }
                    _2614 = frontier_phi_79_pred;
                    _2612 = frontier_phi_79_pred_1;
                    _2610 = frontier_phi_79_pred_2;
                    _2608 = frontier_phi_79_pred_3;
                    _2606 = frontier_phi_79_pred_4;
                    _2604 = frontier_phi_79_pred_5;
                    uint _2770 = _2769 + 1u;
                    if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2763 = _2604;
                        _2764 = _2606;
                        _2765 = _2608;
                        _2766 = _2610;
                        _2767 = _2612;
                        _2768 = _2614;
                        _2769 = _2770;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2610;
                frontier_phi_60_61_ladder_1 = _2614;
                frontier_phi_60_61_ladder_2 = _2612;
                frontier_phi_60_61_ladder_3 = _2608;
                frontier_phi_60_61_ladder_4 = _2606;
                frontier_phi_60_61_ladder_5 = _2604;
            }
            else
            {
                frontier_phi_60_61_ladder = _2489;
                frontier_phi_60_61_ladder_1 = _2493;
                frontier_phi_60_61_ladder_2 = _2491;
                frontier_phi_60_61_ladder_3 = _2487;
                frontier_phi_60_61_ladder_4 = _2485;
                frontier_phi_60_61_ladder_5 = _2483;
            }
            _2603 = frontier_phi_60_61_ladder_5;
            _2605 = frontier_phi_60_61_ladder_4;
            _2607 = frontier_phi_60_61_ladder_3;
            _2609 = frontier_phi_60_61_ladder;
            _2611 = frontier_phi_60_61_ladder_2;
            _2613 = frontier_phi_60_61_ladder_1;
        }
        float _2618 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
        _2395 = (_2618 * _2609) + _1851;
        _2397 = (_2618 * _2611) + _1853;
        _2399 = (_2618 * _2613) + _1855;
        _2401 = ((_2603 * 0.039999999105930328369140625) * _2618) + _2181;
        _2403 = ((_2605 * 0.039999999105930328369140625) * _2618) + _2183;
        _2405 = ((_2607 * 0.039999999105930328369140625) * _2618) + _2185;
    }
    else
    {
        _2395 = _1851;
        _2397 = _1853;
        _2399 = _1855;
        _2401 = _2181;
        _2403 = _2183;
        _2405 = _2185;
    }
    float _4348 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4359 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4370 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _2422 = ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2395 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _649))) + ((_2401 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2423 = ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2397 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _649))) + ((_2403 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2424 = ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2399 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _649))) + ((_2405 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    uint _2425 = _624 + 6u;
    float _2433 = _585 / cbSceneParam._m0[86u].x;
    float _2434 = _586 / cbSceneParam._m0[86u].y;
    vec4 _2448 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2433, _2434, (log2((isnan(cbSceneParam._m0[77u].w) ? _507 : (isnan(_507) ? cbSceneParam._m0[77u].w : min(_507, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2450 = _2448.x;
    float _2451 = _2448.y;
    float _2452 = _2448.z;
    float _2453 = _2448.w;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_507 > cbSceneParam._m0[78u].w)
    {
        float _2508 = isnan(_507) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _507 : min(cbSceneParam._m0[80u].w, _507));
        float _2509 = _2508 / _507;
        float _2520 = _2509 * _557;
        float _2521 = _558 * _2509;
        float _2522 = (-0.0) - _2521;
        float _2523 = _2509 * _559;
        float _2525 = (cbSceneParam._m0[77u].w * _2522) / _2508;
        float _2526 = _2525 + cbSceneParam._m0[79u].w;
        float _2527 = cbSceneParam._m0[79u].w - _2521;
        float _2533 = sqrt(((_2520 * _2520) + (_2521 * _2521)) + (_2523 * _2523));
        float _2536 = (1.0 - (cbSceneParam._m0[77u].w / _2508)) * _2533;
        float _2541 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2543 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2522 - _2525) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2526 > 0.0) ? exp2(_2541 * _2526) : (2.0 - exp2(_2543 * _2526))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2536;
        }
        else
        {
            float _2664 = 1.0 / cbSceneParam._m0[80u].x;
            float _2665 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : max(_2526, _2527));
            float _2666 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : min(_2526, _2527));
            float _2675 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : min(_2665, 0.0));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            _2720 = ((abs(_2533 / _2522) * cbSceneParam._m0[80u].y) * ((((_2675 - _2676) * 2.0) - ((exp2(_2541 * (isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0)))) - exp2(_2541 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))))) * _2664)) - ((exp2(_2543 * _2675) - exp2(_2543 * _2676)) * _2664))) + (_2536 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2433, _2434, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2453);
        _2545 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2450;
        _2547 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2451;
        _2549 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2452;
        _2551 = _2731 * _2453;
    }
    else
    {
        _2545 = _2450;
        _2547 = _2451;
        _2549 = _2452;
        _2551 = _2453;
    }
    bool _2758;
    vec4 _2561;
    vec4 _2583;
    float _2585;
    float _2589;
    float _2590;
    float _2591;
    float _2592;
    bool _2602;
    for (;;)
    {
        _2561 = cbMatDynParam._m0[0u];
        float _2563 = roundEven(_2561.y);
        bool _2564 = _2563 == 3.0;
        float _2565 = log2(_2551);
        float _2572 = exp2(_2565 * cbSceneParam._m0[78u].x) * _2422;
        float _2573 = exp2(_2565 * cbSceneParam._m0[78u].y) * _2423;
        float _2574 = exp2(_2565 * cbSceneParam._m0[78u].z) * _2424;
        float _2581 = _573 + (-0.5);
        _2583 = cbMtdParam._m0[1u];
        _2585 = _2583.y * _2581;
        float _2588 = (_2563 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2589 = _2588 * (_2564 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2545)));
        _2590 = _2588 * (_2564 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2547)));
        _2591 = _2588 * (_2564 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2549)));
        _2592 = _2581 * 0.999000012874603271484375;
        _2602 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2602)
        {
            if ((cbInstanceData._m0[_624 + 7u].x + _2592) < 0.5)
            {
                _2758 = true;
                break;
            }
        }
        uint _2699 = _625 + uint(_2561.w);
        if ((cbInstanceData._m0[_2699].w < 1.0) && ((cbInstanceData._m0[_2699].w + _2592) < 0.5))
        {
            _2758 = true;
            break;
        }
        if ((_2585 + 1.0) < _2583.x)
        {
            _2758 = true;
            break;
        }
        _2758 = false;
        break;
    }
    float _2963;
    if (_2758)
    {
        discard_state = true;
        _2963 = 0.0;
    }
    else
    {
        _2963 = cbInstanceData._m0[_2425].w;
    }
    SV_Target.x = _2589;
    SV_Target.y = _2590;
    SV_Target.z = _2591;
    SV_Target.w = _2963;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2425].w;
    discard_exit();
}


