#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _848;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _235 = _230.z;
    float _239 = (_230.x * 2.0) + (-1.0);
    float _241 = (_230.y * 2.0) + (-1.0);
    float _242 = dot(vec2(_239, _241), vec2(_239, _241));
    float _3468 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _248 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    vec4 _266 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _266.x * cbMtdParam._m0[9u].x;
    float _272 = _266.y * cbMtdParam._m0[9u].y;
    float _273 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _286 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _288 = _286.x;
    float _291 = fma(_248, _214, fma(_241, _206 * TANGENT.x, (_192 * _184) * _239));
    float _294 = fma(_248, _215, fma(_241, _206 * TANGENT.y, (_192 * _185) * _239));
    float _297 = fma(_248, _216, fma(_241, _206 * TANGENT.z, (_192 * _186) * _239));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3479 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _305 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3501 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3512 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3523 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _309 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    float _393 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _394 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _417 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _420 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = (_433 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3534 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _447 = 1.0 - _309;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _309;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _309;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _309;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _393, cbSceneParam._m0[86u].y * _394));
    float _473 = _470.x * TEXCOORD_9.w;
    float _474 = dot(vec3(_302, _303, _304), vec3(_385, _386, _387));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _302) - _385;
    float _482 = (_477 * _303) - _386;
    float _483 = (_477 * _304) - _387;
    float _487 = abs(dot(vec3(_385, _386, _387), vec3(_302, _303, _304)));
    float _3567 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_305);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _576 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _580 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _605 = _537 + _302;
        float _606 = _541 + _303;
        float _607 = _545 + _304;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_302, _303, _304), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3615 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_302, _303, _304), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3648 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_302, _303, _304), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3681 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _892 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _896 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _919 = _537 + _302;
        float _920 = _541 + _303;
        float _921 = _545 + _304;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_302, _303, _304), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3744 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_302, _303, _304), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3777 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_302, _303, _304), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3810 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _848;
        _1158 = _848;
        _1159 = _848;
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _851, _854, _857));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_849, _852, _855, _858));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1357 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1360 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1388 = frontier_phi_16_14_ladder;
        }
        float _1564;
        if (_1357 > 0.0)
        {
            _1564 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1564 = frontier_phi_25_21_ladder;
        }
        float _1860;
        if (_1360 > 0.0)
        {
            _1860 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1860 = frontier_phi_37_32_ladder;
        }
        float _1862 = isnan(_1564) ? _1388 : (isnan(_1388) ? _1564 : min(_1388, _1564));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1354) + _1343;
        float _1868 = (_1863 * _1357) + _1347;
        float _1869 = (_1863 * _1360) + _1351;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_15_37_ladder = _2014.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2014.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2014.z * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_15_37_ladder_1;
        _1378 = frontier_phi_15_37_ladder;
        _1380 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1456 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1459 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1569;
        if (_1453 > 0.0)
        {
            _1569 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1569 = frontier_phi_27_23_ladder;
        }
        float _1887;
        if (_1456 > 0.0)
        {
            _1887 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1887 = frontier_phi_39_34_ladder;
        }
        float _2225;
        if (_1459 > 0.0)
        {
            _2225 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2225 = frontier_phi_49_46_ladder;
        }
        float _2227 = isnan(_1887) ? _1569 : (isnan(_1569) ? _1887 : min(_1569, _1887));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1453) + _1442;
        float _2233 = (_2228 * _1456) + _1446;
        float _2234 = (_2228 * _1459) + _1450;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2235;
        float _2238 = _2235 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2234 > _2238) || ((_2234 < _2236) || ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 < _2236) || (_2232 > _2238))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2234, cbModelParam._m0[17u].z, fma(_2233, cbModelParam._m0[17u].y, _2232 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2234, cbModelParam._m0[18u].z, fma(_2233, cbModelParam._m0[18u].y, _2232 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2234, cbModelParam._m0[19u].z, fma(_2233, cbModelParam._m0[19u].y, _2232 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_24_49_ladder = _2356.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2356.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2356.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_24_49_ladder_2;
        _1480 = frontier_phi_24_49_ladder_1;
        _1482 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1385);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1495 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1556 = _1543 / _1555;
    float _1557 = _1547 / _1555;
    float _1558 = _1551 / _1555;
    float _1705;
    float _1706;
    float _1707;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1585 = ((uint(_1558 > cbSceneParam._m0[59u].y) + uint(_1558 > cbSceneParam._m0[59u].x)) + uint(_1558 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1586 = _1585 + 43u;
        uint _1594 = _1585 + 44u;
        uint _1602 = _1585 + 45u;
        uint _1610 = _1585 + 46u;
        float _1621 = fma(_1555, cbSceneParam._m0[_1586].w, fma(_1551, cbSceneParam._m0[_1586].z, fma(_1547, cbSceneParam._m0[_1586].y, _1543 * cbSceneParam._m0[_1586].x)));
        float _1625 = fma(_1555, cbSceneParam._m0[_1594].w, fma(_1551, cbSceneParam._m0[_1594].z, fma(_1547, cbSceneParam._m0[_1594].y, _1543 * cbSceneParam._m0[_1594].x)));
        float _1633 = fma(_1555, cbSceneParam._m0[_1610].w, fma(_1551, cbSceneParam._m0[_1610].z, fma(_1547, cbSceneParam._m0[_1610].y, _1543 * cbSceneParam._m0[_1610].x)));
        float _1638 = cbSceneParam._m0[33u].z * _1633;
        float _1640 = cbSceneParam._m0[33u].w * _1633;
        float _1643 = fma(_1555, cbSceneParam._m0[_1602].w, fma(_1551, cbSceneParam._m0[_1602].z, fma(_1547, cbSceneParam._m0[_1602].y, _1543 * cbSceneParam._m0[_1602].x))) / _1633;
        float _1691 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
        float _3936 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1698 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1638 + _1621) / _1633, (_1640 + _1625) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 + _1621) / _1633, (_1625 - _1638) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1638) / _1633, (_1625 - _1640) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1640) / _1633, (_1638 + _1625) / _1633), _1643), 0.0)).x), vec4(0.25)));
        _1705 = 1.0 - (_1698 * cbSceneParam._m0[34u].x);
        _1706 = 1.0 - (_1698 * cbSceneParam._m0[34u].y);
        _1707 = 1.0 - (_1698 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1705 = 1.0;
        _1706 = 1.0;
        _1707 = 1.0;
    }
    float _1771;
    float _1773;
    float _1775;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1759 = fma(_1555, cbSceneParam._m0[63u].w, fma(_1551, cbSceneParam._m0[63u].z, fma(_1547, cbSceneParam._m0[63u].y, _1543 * cbSceneParam._m0[63u].x)));
        float _1760 = fma(_1555, cbSceneParam._m0[60u].w, fma(_1551, cbSceneParam._m0[60u].z, fma(_1547, cbSceneParam._m0[60u].y, _1543 * cbSceneParam._m0[60u].x))) / _1759;
        float _1761 = fma(_1555, cbSceneParam._m0[61u].w, fma(_1551, cbSceneParam._m0[61u].z, fma(_1547, cbSceneParam._m0[61u].y, _1543 * cbSceneParam._m0[61u].x))) / _1759;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1760 >= cbSceneParam._m0[64u].x) && (_1761 >= cbSceneParam._m0[64u].y)) && (_1760 <= cbSceneParam._m0[64u].z)) && (_1761 <= cbSceneParam._m0[64u].w))
        {
            float _1900 = fma(_1555, cbSceneParam._m0[62u].w, fma(_1551, cbSceneParam._m0[62u].z, fma(_1547, cbSceneParam._m0[62u].y, _1543 * cbSceneParam._m0[62u].x))) / _1759;
            float _1904 = isnan(cbSceneParam._m0[41u].w) ? _1900 : (isnan(_1900) ? cbSceneParam._m0[41u].w : max(_1900, cbSceneParam._m0[41u].w));
            float _1947 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
            float _3952 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
            float _1954 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1760, cbSceneParam._m0[33u].w + _1761), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1760, _1761 - cbSceneParam._m0[33u].z), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].z, _1761 - cbSceneParam._m0[33u].w), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1761), _1904), 0.0)).x), vec4(0.25)));
            float _1958 = 1.0 - (_1954 * cbSceneParam._m0[34u].x);
            float _1959 = 1.0 - (_1954 * cbSceneParam._m0[34u].y);
            float _1960 = 1.0 - (_1954 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_36_35_ladder_1 = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
            frontier_phi_36_35_ladder_2 = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
        }
        else
        {
            frontier_phi_36_35_ladder = _1706;
            frontier_phi_36_35_ladder_1 = _1707;
            frontier_phi_36_35_ladder_2 = _1705;
        }
        _1771 = frontier_phi_36_35_ladder_2;
        _1773 = frontier_phi_36_35_ladder;
        _1775 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1771 = _1705;
        _1773 = _1706;
        _1775 = _1707;
    }
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _473 + (-1.0);
    float _1795 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1796 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1799 = _1782 + 5u;
    float _1805 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1809 = _1782 + 4u;
    float _1819 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1823 = _1782 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_302, _303, _304));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_302, _303, _304));
    float _3988 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3999 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1799].x * _1805) * _1844) + (((cbLight._m0[_1809].x * _1771) * _1819) * _1842);
    float _1852 = ((_1805 * cbLight._m0[_1799].y) * _1844) + (((cbLight._m0[_1809].y * _1773) * _1819) * _1842);
    float _1853 = ((_1805 * cbLight._m0[_1799].z) * _1844) + (((cbLight._m0[_1809].z * _1775) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1859)
    {
        _1961 = _1851;
        _1963 = _1852;
        _1965 = _1853;
    }
    else
    {
        uint _1969 = _1782 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4010 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1988 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1851;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1852;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1853;
    }
    bool _1968 = _1857.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1968)
    {
        _2023 = _1961;
        _2025 = _1963;
        _2027 = _1965;
    }
    else
    {
        uint _2196 = _1782 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4026 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2215 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2023 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1961;
        _2025 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1963;
        _2027 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1965;
    }
    uint _2030 = _1782 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _305) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1782].x + _385;
    float _2046 = cbLight._m0[_1782].y + _386;
    float _2047 = cbLight._m0[_1782].z + _387;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1782].xyz));
    float _4042 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2059 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _2060 = dot(vec3(_302, _303, _304), vec3(_2052, _2053, _2054));
    float _4064 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_2052, _2053, _2054));
    float _4075 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0);
    float _2081 = 0.959999978542327880859375 - _455;
    float _2083 = 0.959999978542327880859375 - _456;
    float _2084 = 0.959999978542327880859375 - _457;
    float _2091 = 1.0 - _2044;
    float _2102 = (0.5 / (((_2059 * ((_2058 * _2091) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2091) + _2044) * _2058))) * _2058;
    float _4086 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2104 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2118 = _1782 + 9u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _305) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1823].x + _385;
    float _2132 = cbLight._m0[_1823].y + _386;
    float _2133 = cbLight._m0[_1823].z + _387;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1823].xyz));
    float _4097 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2145 = dot(vec3(_302, _303, _304), vec3(_2138, _2139, _2140));
    float _4108 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2138, _2139, _2140));
    float _4119 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2130 * _2130;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
    float _2171 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2059 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2171) + _2130) * _2144))) * _2144;
    float _4130 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    float _2193 = (((((_2164 * _2081) + _458) * cbLight._m0[_2118].x) * _2183) * _1805) + ((((cbLight._m0[_2030].x * _1771) * ((_2080 * _2081) + _458)) * _2104) * _1819);
    float _2194 = (((((_2164 * _2083) + _460) * cbLight._m0[_2118].y) * _2183) * _1805) + ((((cbLight._m0[_2030].y * _1773) * ((_2080 * _2083) + _460)) * _2104) * _1819);
    float _2195 = (((((_2164 * _2084) + _461) * cbLight._m0[_2118].z) * _2183) * _1805) + ((((cbLight._m0[_2030].z * _1775) * ((_2080 * _2084) + _461)) * _2104) * _1819);
    float _2251;
    float _2253;
    float _2255;
    if (_1859)
    {
        _2251 = _2193;
        _2253 = _2194;
        _2255 = _2195;
    }
    else
    {
        uint _2257 = _1782 + 2u;
        uint _2261 = _1782 + 10u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _305) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _385;
        float _2278 = cbLight._m0[_2257].y + _386;
        float _2279 = cbLight._m0[_2257].z + _387;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2257].xyz));
        float _4141 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2291 = dot(vec3(_302, _303, _304), vec3(_2284, _2285, _2286));
        float _4152 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4163 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
        float _2317 = 1.0 - _2276;
        float _2327 = (0.5 / (((_2059 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2317) + _2276) * _2290))) * _2290;
        float _4174 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2251 = (((((_2310 * _2081) + _458) * cbLight._m0[_2261].x) * _2329) * _2330) + _2193;
        _2253 = (((((_2310 * _2083) + _460) * cbLight._m0[_2261].y) * _2329) * _2330) + _2194;
        _2255 = (((((_2310 * _2084) + _461) * cbLight._m0[_2261].z) * _2329) * _2330) + _2195;
    }
    float _2361;
    float _2363;
    float _2365;
    if (_1968)
    {
        _2361 = _2251;
        _2363 = _2253;
        _2365 = _2255;
    }
    else
    {
        uint _2372 = _1782 + 3u;
        uint _2376 = _1782 + 11u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _305) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _385;
        float _2393 = cbLight._m0[_2372].y + _386;
        float _2394 = cbLight._m0[_2372].z + _387;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2372].xyz));
        float _4190 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2406 = dot(vec3(_302, _303, _304), vec3(_2399, _2400, _2401));
        float _4201 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4212 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
        float _2432 = 1.0 - _2391;
        float _2442 = (0.5 / (((_2059 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2432) + _2391) * _2405))) * _2405;
        float _4223 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2361 = (((((_2425 * _2081) + _458) * cbLight._m0[_2376].x) * _2444) * _2445) + _2251;
        _2363 = (((((_2425 * _2083) + _460) * cbLight._m0[_2376].y) * _2444) * _2445) + _2253;
        _2365 = (((((_2425 * _2084) + _461) * cbLight._m0[_2376].z) * _2444) * _2445) + _2255;
    }
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_1780.y == 0u)
    {
        uvec4 _2466 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2467 = _2466.x;
        uint _2478 = uint((float(_2466.y) * floor(float(uint(cbSceneParam._m0[85u].y * _394) / _2467))) + floor(float(uint(cbSceneParam._m0[85u].x * _393) / _2467)));
        float _2488 = (log2(_1558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2489 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        uint _2492 = uint(isnan(14.0) ? _2489 : (isnan(_2489) ? 14.0 : min(_2489, 14.0)));
        uvec4 _2497 = texelFetch(g_lightClusterGridBuffer, int(((_2492 << 2u) + (_2478 << 6u)) >> 2u));
        uint _2498 = _2497.x;
        uint _2499 = _2466.z;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((((1u << ((_2499 >> 4u) & 15u)) + 4294967295u) & _2498) == 0u) || ((_2499 & 240u) == 0u))
        {
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
        }
        else
        {
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            uint _2727 = 0u;
            uint _2736;
            bool _2737;
            for (;;)
            {
                _2736 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                _2737 = _2736 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2737)
                {
                    frontier_phi_68_pred = _2726;
                    frontier_phi_68_pred_1 = _2725;
                    frontier_phi_68_pred_2 = _2724;
                    frontier_phi_68_pred_3 = _2722;
                    frontier_phi_68_pred_4 = _2721;
                    frontier_phi_68_pred_5 = _2723;
                }
                else
                {
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    uint _2851;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2736;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    for (;;)
                    {
                        uint _2855 = uint(findLSB(_2851)) + (_2727 << 5u);
                        uint _2852 = (_2851 + 4294967295u) & _2851;
                        uint _2857 = _2855 * 48u;
                        vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 3u)).x));
                        uint _2877 = (_2855 * 48u) + 4u;
                        vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2896 = (_2855 * 48u) + 8u;
                        vec3 _2907 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x));
                        float _2911 = _2871.x - _1556;
                        float _2912 = _2871.y - _1557;
                        float _2913 = _2871.z - _1558;
                        float _2914 = dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913));
                        float _2917 = inversesqrt(_2914);
                        float _2918 = _2917 * _2911;
                        float _2919 = _2917 * _2912;
                        float _2920 = _2917 * _2913;
                        float _2921 = dot(vec3(_414, _417, _420), vec3(_2918, _2919, _2920));
                        float _2926 = 1.0 - (_2914 * _2871.w);
                        float _4249 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2927 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2928 = sqrt(_2914) * _2890.w;
                        float _2931 = 1.39999997615814208984375 / (_2928 + 1.39999997615814208984375);
                        float _2932 = _2931 * _2931;
                        float _2935 = ((1.0 - _2932) * _2921) + _2932;
                        float _2938 = _2928 * _2928;
                        float _2942 = ((isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))) * _2927) / ((_2938 * 0.699999988079071044921875) + 1.0);
                        float _2946 = (-0.0) - _1556;
                        float _2947 = (-0.0) - _1557;
                        float _2948 = (-0.0) - _1558;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2953 = _2952 * _2946;
                        float _2954 = _2952 * _2947;
                        float _2955 = _2952 * _2948;
                        float _2962 = exp2(log2(1.0 / ((_2938 * 3.5) + 5.0)) * 0.25);
                        float _2963 = 1.0 - _489;
                        float _2970 = sqrt(1.0 - ((1.0 - (_2963 * _2963)) * (1.0 - (_2962 * _2962))));
                        float _2971 = _2970 * _2970;
                        float _2972 = _2971 * _2971;
                        float _2973 = _2953 + _2918;
                        float _2974 = _2954 + _2919;
                        float _2975 = _2955 + _2920;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2983 = dot(vec3(_414, _417, _420), vec3(_2953, _2954, _2955));
                        float _4265 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2987 = dot(vec3(_414, _417, _420), vec3(_2979 * _2973, _2979 * _2974, _2979 * _2975));
                        float _4276 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2994 = ((_2990 * _2990) * (_2972 + (-1.0))) + 1.0;
                        float _2995 = _2931 * _2971;
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2921) + _2996;
                        float _4287 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _3001 = 1.0 - _2971;
                        float _3011 = (0.5 / (((_3000 * ((_2986 * _3001) + _2971)) + 9.9999999392252902907785028219223e-09) + (((_3000 * _3001) + _2971) * _2986))) * _3000;
                        float _4298 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3022 = (((_2972 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_2994 * _2994) * ((_2938 * 2.1991131305694580078125) + 3.141590118408203125))) * _2927;
                        _2780 = (_2942 * _2890.x) + _2848;
                        _2781 = (_2942 * _2890.y) + _2849;
                        _2782 = (_2942 * _2890.z) + _2850;
                        _2777 = (_3022 * _2907.x) + _2845;
                        _2778 = (_3022 * _2907.y) + _2846;
                        _2779 = (_3022 * _2907.z) + _2847;
                        if (_2852 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2852;
                        }
                    }
                    frontier_phi_68_pred = _2782;
                    frontier_phi_68_pred_1 = _2781;
                    frontier_phi_68_pred_2 = _2780;
                    frontier_phi_68_pred_3 = _2778;
                    frontier_phi_68_pred_4 = _2777;
                    frontier_phi_68_pred_5 = _2779;
                }
                _2588 = frontier_phi_68_pred;
                _2586 = frontier_phi_68_pred_1;
                _2584 = frontier_phi_68_pred_2;
                _2580 = frontier_phi_68_pred_3;
                _2578 = frontier_phi_68_pred_4;
                _2582 = frontier_phi_68_pred_5;
                uint _2728 = _2727 + 1u;
                if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2721 = _2578;
                    _2722 = _2580;
                    _2723 = _2582;
                    _2724 = _2584;
                    _2725 = _2586;
                    _2726 = _2588;
                    _2727 = _2728;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
        }
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.z;
        uint _2594 = (_2592 >> 8u) & 15u;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((4294967295u << _2594) & _2498) == 0u)
        {
            _2689 = _2577;
            _2691 = _2579;
            _2693 = _2581;
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
        }
        else
        {
            float _2714 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
            float _2715 = _2714 * _1556;
            float _2716 = _2714 * _1557;
            float _2717 = _2714 * _1558;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2594 < ((_2592 >> 12u) & 15u))
            {
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2828 = _2577;
                float _2829 = _2579;
                float _2830 = _2581;
                float _2831 = _2583;
                float _2832 = _2585;
                float _2833 = _2587;
                uint _2834 = _2594;
                uint _2843;
                bool _2844;
                for (;;)
                {
                    _2843 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                    _2844 = _2843 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2844)
                    {
                        frontier_phi_74_pred = _2830;
                        frontier_phi_74_pred_1 = _2829;
                        frontier_phi_74_pred_2 = _2828;
                        frontier_phi_74_pred_3 = _2833;
                        frontier_phi_74_pred_4 = _2832;
                        frontier_phi_74_pred_5 = _2831;
                    }
                    else
                    {
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3040 = _2828;
                        float _3041 = _2829;
                        float _3042 = _2830;
                        float _3043 = _2831;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        uint _3046 = _2843;
                        uint _3047;
                        vec4 _3072;
                        float _3073;
                        vec4 _3088;
                        vec3 _3100;
                        vec4 _3116;
                        vec4 _3132;
                        float _3179;
                        bool _3180;
                        for (;;)
                        {
                            uint _3057 = ((_2834 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3046));
                            _3047 = (_3046 + 4294967295u) & _3046;
                            uint _3059 = _3057 * 40u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3073 = _3072.w;
                            uint _3075 = (_3057 * 40u) + 4u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3057 * 40u) + 8u;
                            _3100 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x));
                            uint _3103 = (_3057 * 40u) + 16u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3119 = (_3057 * 40u) + 20u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3135 = (_3057 * 40u) + 24u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3154 = (_3057 * 40u) + 28u;
                            vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3179 = fma(_1558, _3167.z, fma(_1557, _3167.y, _3167.x * _1556)) + _3167.w;
                            _3180 = !((fma(_1558, _3148.z, fma(_1557, _3148.y, _3148.x * _1556)) + _3148.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3180)
                            {
                                float _3207 = _3072.x - _1556;
                                float _3208 = _3072.y - _1557;
                                float _3209 = _3072.z - _1558;
                                float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                                float _3213 = inversesqrt(_3210);
                                float _3214 = _3213 * _3207;
                                float _3215 = _3213 * _3208;
                                float _3216 = _3213 * _3209;
                                float _3220 = 1.0 - (_3210 / (_3073 * _3073));
                                float _4309 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3225 = sqrt(_3210) * _3088.w;
                                float _3227 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                                float _3228 = _3227 * _3227;
                                float _3231 = ((1.0 - _3228) * dot(vec3(_3214, _3215, _3216), vec3(_414, _417, _420))) + _3228;
                                float _3234 = _3225 * _3225;
                                float _3238 = (fma(_1558, _3116.z, fma(_1557, _3116.y, _3116.x * _1556)) + _3116.w) / _3179;
                                float _3239 = (fma(_1558, _3132.z, fma(_1557, _3132.y, _3132.x * _1556)) + _3132.w) / _3179;
                                float _3243 = 1.0 - dot(vec2(_3238, _3239), vec2(_3238, _3239));
                                float _4325 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3245 = _3244 * (((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3221) / ((_3234 * 0.699999988079071044921875) + 1.0));
                                float _3257 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                                float _3258 = 1.0 - _489;
                                float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                                float _3266 = _3265 * _3265;
                                float _3267 = _3266 * _3266;
                                float _3268 = _3214 - _2715;
                                float _3269 = _3215 - _2716;
                                float _3270 = _3216 - _2717;
                                float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                                float _3278 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2715, (-0.0) - _2716, (-0.0) - _2717));
                                float _4336 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3282 = dot(vec3(_414, _417, _420), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                                float _4347 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                                float _3290 = _3227 * _3266;
                                float _3291 = _3290 * _3290;
                                float _3297 = ((1.0 - _3291) * dot(vec3(_414, _417, _420), vec3(_3214, _3215, _3216))) + _3291;
                                float _4358 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3299 = 1.0 - _3266;
                                float _3309 = (0.5 / (((_3298 * ((_3281 * _3299) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3266) * _3281))) * _3298;
                                float _4369 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3319 = (_3244 * _3221) * (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3289 * _3289) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3319 * _3100.z;
                                frontier_phi_80_pred_1 = _3319 * _3100.y;
                                frontier_phi_80_pred_2 = _3319 * _3100.x;
                                frontier_phi_80_pred_3 = _3245 * _3088.z;
                                frontier_phi_80_pred_4 = _3245 * _3088.y;
                                frontier_phi_80_pred_5 = _3245 * _3088.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3325 = frontier_phi_80_pred;
                            _3324 = frontier_phi_80_pred_1;
                            _3323 = frontier_phi_80_pred_2;
                            _3328 = frontier_phi_80_pred_3;
                            _3327 = frontier_phi_80_pred_4;
                            _3326 = frontier_phi_80_pred_5;
                            _3030 = _3326 + _3043;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3027 = _3323 + _3040;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            if (_3047 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3047;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3029;
                        frontier_phi_74_pred_1 = _3028;
                        frontier_phi_74_pred_2 = _3027;
                        frontier_phi_74_pred_3 = _3032;
                        frontier_phi_74_pred_4 = _3031;
                        frontier_phi_74_pred_5 = _3030;
                    }
                    _2694 = frontier_phi_74_pred;
                    _2692 = frontier_phi_74_pred_1;
                    _2690 = frontier_phi_74_pred_2;
                    _2700 = frontier_phi_74_pred_3;
                    _2698 = frontier_phi_74_pred_4;
                    _2696 = frontier_phi_74_pred_5;
                    uint _2835 = _2834 + 1u;
                    if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2828 = _2690;
                        _2829 = _2692;
                        _2830 = _2694;
                        _2831 = _2696;
                        _2832 = _2698;
                        _2833 = _2700;
                        _2834 = _2835;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2698;
                frontier_phi_62_63_ladder_1 = _2696;
                frontier_phi_62_63_ladder_2 = _2694;
                frontier_phi_62_63_ladder_3 = _2700;
                frontier_phi_62_63_ladder_4 = _2692;
                frontier_phi_62_63_ladder_5 = _2690;
            }
            else
            {
                frontier_phi_62_63_ladder = _2585;
                frontier_phi_62_63_ladder_1 = _2583;
                frontier_phi_62_63_ladder_2 = _2581;
                frontier_phi_62_63_ladder_3 = _2587;
                frontier_phi_62_63_ladder_4 = _2579;
                frontier_phi_62_63_ladder_5 = _2577;
            }
            _2689 = frontier_phi_62_63_ladder_5;
            _2691 = frontier_phi_62_63_ladder_4;
            _2693 = frontier_phi_62_63_ladder_2;
            _2695 = frontier_phi_62_63_ladder_1;
            _2697 = frontier_phi_62_63_ladder;
            _2699 = frontier_phi_62_63_ladder_3;
        }
        float _2704 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2510 = (_2704 * _2695) + _2023;
        _2512 = (_2704 * _2697) + _2025;
        _2514 = (_2704 * _2699) + _2027;
        _2516 = ((_2689 * _458) * _2704) + _2361;
        _2518 = ((_2691 * _460) * _2704) + _2363;
        _2520 = ((_2693 * _461) * _2704) + _2365;
    }
    else
    {
        _2510 = _2023;
        _2512 = _2025;
        _2514 = _2027;
        _2516 = _2361;
        _2518 = _2363;
        _2520 = _2365;
    }
    float _4385 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4396 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4407 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    uint _2540 = _433 + 6u;
    float _2548 = _393 / cbSceneParam._m0[86u].x;
    float _2549 = _394 / cbSceneParam._m0[86u].y;
    vec4 _2563 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2548, _2549, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2565 = _2563.x;
    float _2566 = _2563.y;
    float _2567 = _2563.z;
    float _2568 = _2563.w;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2602 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2603 = _2602 / _325;
        float _2614 = _2603 * _378;
        float _2615 = _379 * _2603;
        float _2616 = (-0.0) - _2615;
        float _2617 = _2603 * _380;
        float _2619 = (cbSceneParam._m0[77u].w * _2616) / _2602;
        float _2620 = _2619 + cbSceneParam._m0[79u].w;
        float _2621 = cbSceneParam._m0[79u].w - _2615;
        float _2627 = sqrt(((_2614 * _2614) + (_2615 * _2615)) + (_2617 * _2617));
        float _2630 = (1.0 - (cbSceneParam._m0[77u].w / _2602)) * _2627;
        float _2635 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2637 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2790;
        if (abs((_2616 - _2619) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2790 = ((((_2620 > 0.0) ? exp2(_2635 * _2620) : (2.0 - exp2(_2637 * _2620))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2630;
        }
        else
        {
            float _2750 = 1.0 / cbSceneParam._m0[80u].x;
            float _2751 = isnan(_2621) ? _2620 : (isnan(_2620) ? _2621 : max(_2620, _2621));
            float _2752 = isnan(_2621) ? _2620 : (isnan(_2620) ? _2621 : min(_2620, _2621));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            _2790 = ((abs(_2627 / _2616) * cbSceneParam._m0[80u].y) * ((((_2761 - _2762) * 2.0) - ((exp2(_2635 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)))) - exp2(_2635 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))))) * _2750)) - ((exp2(_2637 * _2761) - exp2(_2637 * _2762)) * _2750))) + (_2630 * cbSceneParam._m0[80u].z);
        }
        vec4 _2792 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2548, _2549, 1.0), 0.0);
        float _2801 = exp2((_2790 * (-1.44269502162933349609375)) * (1.0 - _2792.w));
        float _2802 = log2(_2801);
        float _2818 = log2(_2568);
        _2639 = (exp2(_2818 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].x)) * _2792.x) / cbSceneParam._m0[78u].x)) + _2565;
        _2641 = (exp2(_2818 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].y)) * _2792.y) / cbSceneParam._m0[78u].y)) + _2566;
        _2643 = (exp2(_2818 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].z)) * _2792.z) / cbSceneParam._m0[78u].z)) + _2567;
        _2645 = _2801 * _2568;
    }
    else
    {
        _2639 = _2565;
        _2641 = _2566;
        _2643 = _2567;
        _2645 = _2568;
    }
    float _2657 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2658 = _2657 == 3.0;
    float _2659 = log2(_2645);
    float _2666 = exp2(_2659 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2510 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _473))) + ((_2516 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2667 = exp2(_2659 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2512 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _473))) + ((_2518 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2668 = exp2(_2659 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2514 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _473))) + ((_2520 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2677 = (_2657 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2677 * (_2658 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2639)));
    SV_Target.y = _2677 * (_2658 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.z = _2677 * (_2658 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.w = cbInstanceData._m0[_2540].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2540].w;
}


