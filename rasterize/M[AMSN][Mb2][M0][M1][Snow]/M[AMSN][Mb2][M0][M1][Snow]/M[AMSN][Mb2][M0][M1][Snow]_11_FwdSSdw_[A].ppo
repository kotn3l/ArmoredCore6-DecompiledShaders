#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _990;
float _3404;
float _3405;
float _3406;
float _3407;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3416 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))));
    float _257 = fma(_254, _220, fma(_247, _213, _245 * _199));
    float _260 = fma(_254, _221, fma(_247, _214, _245 * _200));
    float _263 = fma(_254, _222, fma(_247, _215, _245 * _201));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _284 = cbMtdParam._m0[11u].z + dot(vec4(_267 * _257, _267 * _260, _267 * _263, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3427 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    vec4 _303 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _308 = _303.x * cbMtdParam._m0[9u].x;
    float _309 = _303.y * cbMtdParam._m0[9u].y;
    float _310 = _303.z * cbMtdParam._m0[9u].z;
    vec4 _323 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _334 = ((_323.x - _308) * _285) + _308;
    float _335 = ((_323.y - _309) * _285) + _309;
    float _336 = ((_323.z - _310) * _285) + _310;
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _351 = _349.x;
    float _353 = _351 - (_351 * _285);
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = (_366.x * 2.0) + (-1.0);
    float _374 = (_366.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_373, _374), vec2(_373, _374));
    float _3438 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _383 = ((_366.z - _241) * _285) + _241;
    float _390 = ((_373 - _245) * _285) + _245;
    float _391 = ((_374 - _247) * _285) + _247;
    float _392 = ((sqrt(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) - _254) * _285) + _254;
    float _395 = fma(_392, _220, fma(_391, _213, _390 * _199));
    float _398 = fma(_392, _221, fma(_391, _214, _390 * _200));
    float _401 = fma(_392, _222, fma(_391, _215, _390 * _201));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3449 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _409 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3471 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3482 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3493 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _413 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _429 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _480 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _470);
    float _481 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _470);
    float _482 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _470);
    float _486 = inversesqrt(dot(vec3(_480, _481, _482), vec3(_480, _481, _482)));
    float _487 = _480 * _486;
    float _488 = _481 * _486;
    float _489 = _482 * _486;
    vec4 _494 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _496 = _494.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _669 = sqrt(((_480 * _480) + (_481 * _481)) + (_482 * _482));
        float _675 = (cbMatDynParam._m0[5u].x * _669) + cbMatDynParam._m0[5u].y;
        float _3504 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _680 = (cbMatDynParam._m0[5u].z * _669) + cbMatDynParam._m0[5u].w;
        float _3515 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) - _676)) + _676) < ((_496 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _508 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _509 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _527 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _530 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _533 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _546 = uint(roundEven(NORMAL.w)) * 13u;
    uint _547 = _546 + 9u;
    uint _548 = _547 + uint(cbMatDynParam._m0[0u].w);
    float _554 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_548].x;
    float _555 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_548].y;
    float _556 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_548].z;
    float _3526 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _560 = 1.0 - _413;
    float _561 = _557 * _560;
    float _562 = _558 * _560;
    float _563 = _559 * _560;
    float _568 = (_557 + (-0.039999999105930328369140625)) * _413;
    float _569 = (_558 + (-0.039999999105930328369140625)) * _413;
    float _570 = (_559 + (-0.039999999105930328369140625)) * _413;
    float _571 = _568 + 0.039999999105930328369140625;
    float _573 = _569 + 0.039999999105930328369140625;
    float _574 = _570 + 0.039999999105930328369140625;
    vec4 _583 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _508, cbSceneParam._m0[86u].y * _509));
    float _586 = _583.x * TEXCOORD_9.w;
    float _587 = dot(vec3(_406, _407, _408), vec3(_487, _488, _489));
    float _590 = _587 * 2.0;
    float _594 = (_590 * _406) - _487;
    float _595 = (_590 * _407) - _488;
    float _596 = (_590 * _408) - _489;
    float _600 = abs(dot(vec3(_487, _488, _489), vec3(_406, _407, _408)));
    float _3559 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _602 = sqrt(_409);
    float _615 = exp2((_602 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_602 * 3.0));
    float _621 = (1.0 - _615) * ((_602 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _622 = _615 * _602;
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _989;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _714 = fma(_658, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650));
        float _718 = fma(_658, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650));
        float _722 = fma(_658, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650));
        float _747 = _650 + _406;
        float _748 = _654 + _407;
        float _749 = _658 + _408;
        float _759 = fma(_749, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747)) - _714;
        float _760 = fma(_749, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747)) - _718;
        float _761 = fma(_749, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747)) - _722;
        float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
        float _778 = ((_765 * _759) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_714 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_765 * _760) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_718 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_765 * _761) / cbModelParam._m0[34u].z) + ((((((_722 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        float _817 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_783.x + (-0.5));
        float _819 = _817 * (_783.y + (-0.5));
        float _820 = _817 * (_783.z + (-0.5));
        float _827 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_790.x + (-0.5));
        float _829 = _827 * (_790.y + (-0.5));
        float _830 = _827 * (_790.z + (-0.5));
        float _837 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_797.x + (-0.5));
        float _839 = _837 * (_797.y + (-0.5));
        float _840 = _837 * (_797.z + (-0.5));
        float _847 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_804.x + (-0.5));
        float _849 = _847 * (_804.y + (-0.5));
        float _850 = _847 * (_804.z + (-0.5));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = _818 * 0.5;
        float _855 = _828 * 0.5;
        float _856 = _838 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _871 = (dot(vec3(_406, _407, _408), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _881 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3607 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_883 + 1.0))) + _888) * _851;
        float _898 = _819 * 0.5;
        float _899 = _829 * 0.5;
        float _900 = _839 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_406, _407, _408), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3640 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_925 + 1.0))) + _930) * _852;
        float _940 = _820 * 0.5;
        float _941 = _830 * 0.5;
        float _942 = _840 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_406, _407, _408), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3673 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_967 + 1.0))) + _972) * _853;
        _989 = _820;
        _991 = _819;
        _992 = _818;
        _993 = _830;
        _994 = _829;
        _995 = _828;
        _996 = _840;
        _997 = _839;
        _998 = _838;
        _999 = _853;
        _1000 = _852;
        _1001 = _851;
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
    }
    else
    {
        _989 = _990;
        _991 = _990;
        _992 = _990;
        _993 = _990;
        _994 = _990;
        _995 = _990;
        _996 = _990;
        _997 = _990;
        _998 = _990;
        _999 = _990;
        _1000 = _990;
        _1001 = _990;
        _1002 = 0.0;
        _1003 = 0.0;
        _1004 = 0.0;
    }
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1033 = fma(_658, cbModelParam._m0[30u].z, fma(_654, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _650));
        float _1037 = fma(_658, cbModelParam._m0[31u].z, fma(_654, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _650));
        float _1041 = fma(_658, cbModelParam._m0[32u].z, fma(_654, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _650));
        float _1064 = _650 + _406;
        float _1065 = _654 + _407;
        float _1066 = _658 + _408;
        float _1076 = fma(_1066, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1064)) - _1033;
        float _1077 = fma(_1066, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1064)) - _1037;
        float _1078 = fma(_1066, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1064)) - _1041;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1033 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1037 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[35u].z) + ((((((_1041 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1132 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1099.x + (-0.5));
        float _1134 = _1132 * (_1099.y + (-0.5));
        float _1135 = _1132 * (_1099.z + (-0.5));
        float _1142 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1106.x + (-0.5));
        float _1144 = _1142 * (_1106.y + (-0.5));
        float _1145 = _1142 * (_1106.z + (-0.5));
        float _1152 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1113.x + (-0.5));
        float _1154 = _1152 * (_1113.y + (-0.5));
        float _1155 = _1152 * (_1113.z + (-0.5));
        float _1162 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1120.x + (-0.5));
        float _1164 = _1162 * (_1120.y + (-0.5));
        float _1165 = _1162 * (_1120.z + (-0.5));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = _1133 * 0.5;
        float _1170 = _1143 * 0.5;
        float _1171 = _1153 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_406, _407, _408), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3736 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1196 + 1.0))) + _1201) * _1166;
        float _1211 = _1134 * 0.5;
        float _1212 = _1144 * 0.5;
        float _1213 = _1154 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_406, _407, _408), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3769 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1238 + 1.0))) + _1243) * _1167;
        float _1253 = _1135 * 0.5;
        float _1254 = _1145 * 0.5;
        float _1255 = _1155 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_406, _407, _408), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3802 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1280 + 1.0))) + _1285) * _1168;
        _1302 = _1135;
        _1303 = _1134;
        _1304 = _1133;
        _1305 = _1145;
        _1306 = _1144;
        _1307 = _1143;
        _1308 = _1155;
        _1309 = _1154;
        _1310 = _1153;
        _1311 = _1168;
        _1312 = _1167;
        _1313 = _1166;
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _990;
        _1303 = _990;
        _1304 = _990;
        _1305 = _990;
        _1306 = _990;
        _1307 = _990;
        _1308 = _990;
        _1309 = _990;
        _1310 = _990;
        _1311 = _990;
        _1312 = _990;
        _1313 = _990;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1002)) + _1002;
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1003)) + _1003;
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1004)) + _1004;
    float _1349 = fma(_1328, cbSceneParam._m0[89u].z, fma(_1327, cbSceneParam._m0[89u].y, _1326 * cbSceneParam._m0[89u].x));
    float _1352 = fma(_1328, cbSceneParam._m0[90u].z, fma(_1327, cbSceneParam._m0[90u].y, _1326 * cbSceneParam._m0[90u].x));
    float _1355 = fma(_1328, cbSceneParam._m0[91u].z, fma(_1327, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1326));
    float _1370 = _594 * 0.5;
    float _1371 = _595 * 0.5;
    float _1372 = _596 * 0.5;
    float _1373 = dot(vec4(_1370, _1371, _1372, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1376 = dot(vec4(_1370, _1371, _1372, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1379 = dot(vec4(_1370, _1371, _1372, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1413;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1386 = dot(vec4(_1370, _1371, _1372, 1.0), vec4(_989, _993, _996, _999));
        float _1390 = dot(vec4(_1370, _1371, _1372, 1.0), vec4(_991, _994, _997, _1000));
        float _1394 = dot(vec4(_1370, _1371, _1372, 1.0), vec4(_992, _995, _998, _1001));
        float _1401 = dot(vec4(cbModelParam._m0[39u]), vec4(_1370, _1371, _1372, 1.0));
        _1413 = dot(vec3(isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1401) ? 0.0 : (isnan(0.0) ? _1401 : max(0.0, _1401))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1413 = 1.0;
    }
    float _1424;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1415 = dot(vec4(cbModelParam._m0[40u]), vec4(_1370, _1371, _1372, 1.0));
        _1424 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1424 = 1.0;
    }
    float _1428 = (_1424 * cbModelParam._m0[1u].x) + (_1413 * (1.0 - cbModelParam._m0[1u].x));
    float _1438 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _409);
    float _1439 = isnan(_1438) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1438 : min(cbModelParam._m0[25u].z, _1438));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1488 = fma(_658, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650)) + cbModelParam._m0[13u].w;
        float _1492 = fma(_658, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650)) + cbModelParam._m0[14u].w;
        float _1496 = fma(_658, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650)) + cbModelParam._m0[15u].w;
        float _1499 = fma(_596, cbModelParam._m0[13u].z, fma(_595, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594));
        float _1502 = fma(_596, cbModelParam._m0[14u].z, fma(_595, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594));
        float _1505 = fma(_596, cbModelParam._m0[15u].z, fma(_595, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594));
        float _1533;
        if (_1499 > 0.0)
        {
            _1533 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1533 = frontier_phi_19_17_ladder;
        }
        float _1761;
        if (_1502 > 0.0)
        {
            _1761 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1761 = frontier_phi_28_24_ladder;
        }
        float _2018;
        if (_1505 > 0.0)
        {
            _2018 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2018 = frontier_phi_40_35_ladder;
        }
        float _2020 = isnan(_1761) ? _1533 : (isnan(_1533) ? _1761 : min(_1533, _1761));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1499) + _1488;
        float _2026 = (_2021 * _1502) + _1492;
        float _2027 = (_2021 * _1505) + _1496;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2155 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1439);
            frontier_phi_18_40_ladder = _2155.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2155.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2155.x * cbModelParam._m0[1u].y;
        }
        _1521 = frontier_phi_18_40_ladder_2;
        _1523 = frontier_phi_18_40_ladder_1;
        _1525 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_594, _595, _596), _1439);
        _1521 = _1509.x * cbModelParam._m0[1u].y;
        _1523 = _1509.y * cbModelParam._m0[1u].y;
        _1525 = _1509.z * cbModelParam._m0[1u].y;
    }
    float _1529 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _409);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1529 : min(cbModelParam._m0[25u].w, _1529));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1587 = fma(_658, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650)) + cbModelParam._m0[21u].w;
        float _1591 = fma(_658, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650)) + cbModelParam._m0[22u].w;
        float _1595 = fma(_658, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650)) + cbModelParam._m0[23u].w;
        float _1598 = fma(_596, cbModelParam._m0[21u].z, fma(_595, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594));
        float _1601 = fma(_596, cbModelParam._m0[22u].z, fma(_595, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594));
        float _1604 = fma(_596, cbModelParam._m0[23u].z, fma(_595, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594));
        float _1766;
        if (_1598 > 0.0)
        {
            _1766 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1766 = frontier_phi_30_26_ladder;
        }
        float _2045;
        if (_1601 > 0.0)
        {
            _2045 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2045 = frontier_phi_42_37_ladder;
        }
        float _2258;
        if (_1604 > 0.0)
        {
            _2258 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2258 = frontier_phi_51_48_ladder;
        }
        float _2260 = isnan(_2045) ? _1766 : (isnan(_1766) ? _2045 : min(_1766, _2045));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1598) + _1587;
        float _2266 = (_2261 * _1601) + _1591;
        float _2267 = (_2261 * _1604) + _1595;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2268;
        float _2271 = _2268 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2267 > _2271) || ((_2267 < _2269) || ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 < _2269) || (_2265 > _2271))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2267, cbModelParam._m0[17u].z, fma(_2266, cbModelParam._m0[17u].y, _2265 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2267, cbModelParam._m0[18u].z, fma(_2266, cbModelParam._m0[18u].y, _2265 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2267, cbModelParam._m0[19u].z, fma(_2266, cbModelParam._m0[19u].y, _2265 * cbModelParam._m0[19u].x))), _1530);
            frontier_phi_27_51_ladder = _2465.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2465.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2465.x * cbModelParam._m0[1u].z;
        }
        _1623 = frontier_phi_27_51_ladder_2;
        _1625 = frontier_phi_27_51_ladder_1;
        _1627 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_594, _595, _596), _1530);
        _1623 = _1607.x * cbModelParam._m0[1u].z;
        _1625 = _1607.y * cbModelParam._m0[1u].z;
        _1627 = _1607.z * cbModelParam._m0[1u].z;
    }
    float _1640 = (((_621 * _571) + _622) * _586) * ((cbModelParam._m0[1u].w * (_1623 - _1521)) + _1521);
    float _1642 = (((_621 * _573) + _622) * _586) * ((cbModelParam._m0[1u].w * (_1625 - _1523)) + _1523);
    float _1644 = (((_621 * _574) + _622) * _586) * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1647 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1650 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1653 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1640 * cbSceneParam._m0[91u].x));
    vec4 _1661 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_508, _509));
    float _1663 = _1661.w;
    float _1675 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1663);
    float _1676 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1663);
    float _1677 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1663);
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_546 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _586 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1720 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1724 = _1683 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_406, _407, _408));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_406, _407, _408));
    float _3938 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3949 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1700].x * _1706) * _1745) + (((cbLight._m0[_1710].x * _1675) * _1720) * _1743);
    float _1753 = ((_1706 * cbLight._m0[_1700].y) * _1745) + (((cbLight._m0[_1710].y * _1676) * _1720) * _1743);
    float _1754 = ((_1706 * cbLight._m0[_1700].z) * _1745) + (((cbLight._m0[_1710].z * _1677) * _1720) * _1743);
    uvec4 _1758 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1760 = _1758.x == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1760)
    {
        _1771 = _1752;
        _1773 = _1753;
        _1775 = _1754;
    }
    else
    {
        uint _1779 = _1683 + 6u;
        float _1795 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1796 = _1795 * _1795;
        float _3960 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1798 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1771 = (((cbLight._m0[_1779].x * 0.3183098733425140380859375) * _1797) * _1798) + _1752;
        _1773 = (((cbLight._m0[_1779].y * 0.3183098733425140380859375) * _1797) * _1798) + _1753;
        _1775 = (((cbLight._m0[_1779].z * 0.3183098733425140380859375) * _1797) * _1798) + _1754;
    }
    bool _1778 = _1758.y == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1778)
    {
        _1816 = _1771;
        _1818 = _1773;
        _1820 = _1775;
    }
    else
    {
        uint _1989 = _1683 + 7u;
        float _2005 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _3976 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2008 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1816 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1771;
        _1818 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1773;
        _1820 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1775;
    }
    uint _1823 = _1683 + 8u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _409) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1683].x + _487;
    float _1839 = cbLight._m0[_1683].y + _488;
    float _1840 = cbLight._m0[_1683].z + _489;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1683].xyz));
    float _3992 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _1852 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1853 = dot(vec3(_406, _407, _408), vec3(_1845, _1846, _1847));
    float _4014 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1845, _1846, _1847));
    float _4025 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1837 * _1837;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0);
    float _1874 = 0.959999978542327880859375 - _568;
    float _1876 = 0.959999978542327880859375 - _569;
    float _1877 = 0.959999978542327880859375 - _570;
    float _1884 = 1.0 - _1837;
    float _1895 = (0.5 / (((_1852 * ((_1851 * _1884) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1884) + _1837) * _1851))) * _1851;
    float _4036 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    uint _1911 = _1683 + 9u;
    float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _409) * 0.949999988079071044921875);
    float _1923 = _1922 * _1922;
    float _1924 = cbLight._m0[_1724].x + _487;
    float _1925 = cbLight._m0[_1724].y + _488;
    float _1926 = cbLight._m0[_1724].z + _489;
    float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
    float _1931 = _1930 * _1924;
    float _1932 = _1930 * _1925;
    float _1933 = _1930 * _1926;
    float _1934 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1724].xyz));
    float _4047 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1938 = dot(vec3(_406, _407, _408), vec3(_1931, _1932, _1933));
    float _4058 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1931, _1932, _1933));
    float _4069 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1946 = _1923 * _1923;
    float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
    float _1957 = exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0);
    float _1964 = 1.0 - _1923;
    float _1974 = (0.5 / (((_1852 * ((_1937 * _1964) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1964) + _1923) * _1937))) * _1937;
    float _4080 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
    float _1986 = (((((_1957 * _1874) + _571) * cbLight._m0[_1911].x) * _1976) * _1706) + ((((cbLight._m0[_1823].x * _1675) * ((_1873 * _1874) + _571)) * _1897) * _1720);
    float _1987 = (((((_1957 * _1876) + _573) * cbLight._m0[_1911].y) * _1976) * _1706) + ((((cbLight._m0[_1823].y * _1676) * ((_1873 * _1876) + _573)) * _1897) * _1720);
    float _1988 = (((((_1957 * _1877) + _574) * cbLight._m0[_1911].z) * _1976) * _1706) + ((((cbLight._m0[_1823].z * _1677) * ((_1873 * _1877) + _574)) * _1897) * _1720);
    float _2050;
    float _2052;
    float _2054;
    if (_1760)
    {
        _2050 = _1986;
        _2052 = _1987;
        _2054 = _1988;
    }
    else
    {
        uint _2056 = _1683 + 2u;
        uint _2060 = _1683 + 10u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _409) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _487;
        float _2077 = cbLight._m0[_2056].y + _488;
        float _2078 = cbLight._m0[_2056].z + _489;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2056].xyz));
        float _4091 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2090 = dot(vec3(_406, _407, _408), vec3(_2083, _2084, _2085));
        float _4102 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _4113 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
        float _2116 = 1.0 - _2075;
        float _2126 = (0.5 / (((_1852 * ((_2089 * _2116) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2116) + _2075) * _2089))) * _2089;
        float _4124 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2128 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2129 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2050 = (((((_2109 * _1874) + _571) * cbLight._m0[_2060].x) * _2128) * _2129) + _1986;
        _2052 = (((((_2109 * _1876) + _573) * cbLight._m0[_2060].y) * _2128) * _2129) + _1987;
        _2054 = (((((_2109 * _1877) + _574) * cbLight._m0[_2060].z) * _2128) * _2129) + _1988;
    }
    float _2164;
    float _2166;
    float _2168;
    if (_1778)
    {
        _2164 = _2050;
        _2166 = _2052;
        _2168 = _2054;
    }
    else
    {
        uint _2175 = _1683 + 3u;
        uint _2179 = _1683 + 11u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _409) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _487;
        float _2196 = cbLight._m0[_2175].y + _488;
        float _2197 = cbLight._m0[_2175].z + _489;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2175].xyz));
        float _4140 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2209 = dot(vec3(_406, _407, _408), vec3(_2202, _2203, _2204));
        float _4151 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4162 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0);
        float _2235 = 1.0 - _2194;
        float _2245 = (0.5 / (((_1852 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2235) + _2194) * _2208))) * _2208;
        float _4173 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2164 = (((((_2228 * _1874) + _571) * cbLight._m0[_2179].x) * _2247) * _2248) + _2050;
        _2166 = (((((_2228 * _1876) + _573) * cbLight._m0[_2179].y) * _2247) * _2248) + _2052;
        _2168 = (((((_2228 * _1877) + _574) * cbLight._m0[_2179].z) * _2247) * _2248) + _2054;
    }
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    if (_1681.y == 0u)
    {
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2323;
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2323;
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2323;
        uvec4 _2338 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2339 = _2338.x;
        uint _2350 = uint((float(_2338.y) * floor(float(uint(cbSceneParam._m0[85u].y * _509) / _2339))) + floor(float(uint(cbSceneParam._m0[85u].x * _508) / _2339)));
        float _2360 = (log2(_2326 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2361 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        uint _2364 = uint(isnan(14.0) ? _2361 : (isnan(_2361) ? 14.0 : min(_2361, 14.0)));
        uvec4 _2369 = texelFetch(g_lightClusterGridBuffer, int(((_2364 << 2u) + (_2350 << 6u)) >> 2u));
        uint _2370 = _2369.x;
        uint _2371 = _2338.z;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        if (((((1u << ((_2371 >> 4u) & 15u)) + 4294967295u) & _2370) == 0u) || ((_2371 & 240u) == 0u))
        {
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
        }
        else
        {
            float _2471;
            float _2473;
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            uint _2628 = 0u;
            uint _2637;
            bool _2638;
            for (;;)
            {
                _2637 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                _2638 = _2637 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2638)
                {
                    frontier_phi_68_pred = _2624;
                    frontier_phi_68_pred_1 = _2627;
                    frontier_phi_68_pred_2 = _2626;
                    frontier_phi_68_pred_3 = _2625;
                    frontier_phi_68_pred_4 = _2623;
                    frontier_phi_68_pred_5 = _2622;
                }
                else
                {
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    uint _2773;
                    _2767 = _2622;
                    _2768 = _2623;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2637;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    for (;;)
                    {
                        uint _2777 = uint(findLSB(_2773)) + (_2628 << 5u);
                        uint _2774 = (_2773 + 4294967295u) & _2773;
                        uint _2779 = _2777 * 48u;
                        vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 3u)).x));
                        uint _2799 = (_2777 * 48u) + 4u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2818 = (_2777 * 48u) + 8u;
                        vec3 _2829 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x));
                        float _2833 = _2793.x - _2324;
                        float _2834 = _2793.y - _2325;
                        float _2835 = _2793.z - _2326;
                        float _2836 = dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835));
                        float _2839 = inversesqrt(_2836);
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2843 = dot(vec3(_527, _530, _533), vec3(_2840, _2841, _2842));
                        float _2848 = 1.0 - (_2836 * _2793.w);
                        float _4199 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2850 = sqrt(_2836) * _2812.w;
                        float _2853 = 1.39999997615814208984375 / (_2850 + 1.39999997615814208984375);
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2843) + _2854;
                        float _2860 = _2850 * _2850;
                        float _2864 = ((isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))) * _2849) / ((_2860 * 0.699999988079071044921875) + 1.0);
                        float _2868 = (-0.0) - _2324;
                        float _2869 = (-0.0) - _2325;
                        float _2870 = (-0.0) - _2326;
                        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
                        float _2875 = _2874 * _2868;
                        float _2876 = _2874 * _2869;
                        float _2877 = _2874 * _2870;
                        float _2885 = exp2(log2(1.0 / ((_2860 * 3.5) + 5.0)) * 0.25);
                        float _2886 = 1.0 - _602;
                        float _2893 = sqrt(1.0 - ((1.0 - (_2886 * _2886)) * (1.0 - (_2885 * _2885))));
                        float _2894 = _2893 * _2893;
                        float _2895 = _2894 * _2894;
                        float _2896 = _2875 + _2840;
                        float _2897 = _2876 + _2841;
                        float _2898 = _2877 + _2842;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2906 = dot(vec3(_527, _530, _533), vec3(_2875, _2876, _2877));
                        float _4215 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2910 = dot(vec3(_527, _530, _533), vec3(_2902 * _2896, _2902 * _2897, _2902 * _2898));
                        float _4226 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2917 = ((_2913 * _2913) * (_2895 + (-1.0))) + 1.0;
                        float _2918 = _2853 * _2894;
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2843) + _2919;
                        float _4237 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2924 = 1.0 - _2894;
                        float _2934 = (0.5 / (((_2923 * ((_2909 * _2924) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _2924) + _2894) * _2909))) * _2923;
                        float _4248 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2945 = (((_2895 * 3.1415927410125732421875) * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) / ((_2917 * _2917) * ((_2860 * 2.1991131305694580078125) + 3.141590118408203125))) * _2849;
                        _2697 = (_2864 * _2812.x) + _2770;
                        _2698 = (_2864 * _2812.y) + _2771;
                        _2699 = (_2864 * _2812.z) + _2772;
                        _2694 = (_2945 * _2829.x) + _2767;
                        _2695 = (_2945 * _2829.y) + _2768;
                        _2696 = (_2945 * _2829.z) + _2769;
                        if (_2774 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2767 = _2694;
                            _2768 = _2695;
                            _2769 = _2696;
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2774;
                        }
                    }
                    frontier_phi_68_pred = _2696;
                    frontier_phi_68_pred_1 = _2699;
                    frontier_phi_68_pred_2 = _2698;
                    frontier_phi_68_pred_3 = _2697;
                    frontier_phi_68_pred_4 = _2695;
                    frontier_phi_68_pred_5 = _2694;
                }
                _2475 = frontier_phi_68_pred;
                _2481 = frontier_phi_68_pred_1;
                _2479 = frontier_phi_68_pred_2;
                _2477 = frontier_phi_68_pred_3;
                _2473 = frontier_phi_68_pred_4;
                _2471 = frontier_phi_68_pred_5;
                uint _2629 = _2628 + 1u;
                if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2622 = _2471;
                    _2623 = _2473;
                    _2624 = _2475;
                    _2625 = _2477;
                    _2626 = _2479;
                    _2627 = _2481;
                    _2628 = _2629;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
        }
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.z;
        uint _2487 = (_2485 >> 8u) & 15u;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((4294967295u << _2487) & _2370) == 0u)
        {
            _2590 = _2470;
            _2592 = _2472;
            _2594 = _2474;
            _2596 = _2476;
            _2598 = _2478;
            _2600 = _2480;
        }
        else
        {
            float _2615 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
            float _2616 = _2615 * _2324;
            float _2617 = _2615 * _2325;
            float _2618 = _2615 * _2326;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2487 < ((_2485 >> 12u) & 15u))
            {
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2750 = _2470;
                float _2751 = _2472;
                float _2752 = _2474;
                float _2753 = _2476;
                float _2754 = _2478;
                float _2755 = _2480;
                uint _2756 = _2487;
                uint _2765;
                bool _2766;
                for (;;)
                {
                    _2765 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                    _2766 = _2765 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2766)
                    {
                        frontier_phi_79_pred = _2755;
                        frontier_phi_79_pred_1 = _2754;
                        frontier_phi_79_pred_2 = _2753;
                        frontier_phi_79_pred_3 = _2752;
                        frontier_phi_79_pred_4 = _2751;
                        frontier_phi_79_pred_5 = _2750;
                    }
                    else
                    {
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _2972 = _2750;
                        float _2973 = _2751;
                        float _2974 = _2752;
                        float _2975 = _2753;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        uint _2978 = _2765;
                        uint _2979;
                        vec4 _3004;
                        float _3005;
                        vec4 _3020;
                        vec3 _3032;
                        vec4 _3048;
                        vec4 _3064;
                        float _3111;
                        bool _3112;
                        for (;;)
                        {
                            uint _2989 = ((_2756 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2978));
                            _2979 = (_2978 + 4294967295u) & _2978;
                            uint _2991 = _2989 * 40u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3005 = _3004.w;
                            uint _3007 = (_2989 * 40u) + 4u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3022 = (_2989 * 40u) + 8u;
                            _3032 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x));
                            uint _3035 = (_2989 * 40u) + 16u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3051 = (_2989 * 40u) + 20u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3067 = (_2989 * 40u) + 24u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3086 = (_2989 * 40u) + 28u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3111 = fma(_2326, _3099.z, fma(_2325, _3099.y, _3099.x * _2324)) + _3099.w;
                            _3112 = !((fma(_2326, _3080.z, fma(_2325, _3080.y, _3080.x * _2324)) + _3080.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3112)
                            {
                                float _3139 = _3004.x - _2324;
                                float _3140 = _3004.y - _2325;
                                float _3141 = _3004.z - _2326;
                                float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                                float _3145 = inversesqrt(_3142);
                                float _3146 = _3145 * _3139;
                                float _3147 = _3145 * _3140;
                                float _3148 = _3145 * _3141;
                                float _3152 = 1.0 - (_3142 / (_3005 * _3005));
                                float _4259 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3157 = sqrt(_3142) * _3020.w;
                                float _3159 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                                float _3160 = _3159 * _3159;
                                float _3163 = ((1.0 - _3160) * dot(vec3(_3146, _3147, _3148), vec3(_527, _530, _533))) + _3160;
                                float _3166 = _3157 * _3157;
                                float _3170 = (fma(_2326, _3048.z, fma(_2325, _3048.y, _3048.x * _2324)) + _3048.w) / _3111;
                                float _3171 = (fma(_2326, _3064.z, fma(_2325, _3064.y, _3064.x * _2324)) + _3064.w) / _3111;
                                float _3175 = 1.0 - dot(vec2(_3170, _3171), vec2(_3170, _3171));
                                float _4275 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3177 = _3176 * (((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3153) / ((_3166 * 0.699999988079071044921875) + 1.0));
                                float _3189 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                                float _3190 = 1.0 - _602;
                                float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                                float _3198 = _3197 * _3197;
                                float _3199 = _3198 * _3198;
                                float _3200 = _3146 - _2616;
                                float _3201 = _3147 - _2617;
                                float _3202 = _3148 - _2618;
                                float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                                float _3210 = dot(vec3(_527, _530, _533), vec3((-0.0) - _2616, (-0.0) - _2617, (-0.0) - _2618));
                                float _4286 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3213 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3214 = dot(vec3(_527, _530, _533), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                                float _4297 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                                float _3222 = _3159 * _3198;
                                float _3223 = _3222 * _3222;
                                float _3229 = ((1.0 - _3223) * dot(vec3(_527, _530, _533), vec3(_3146, _3147, _3148))) + _3223;
                                float _4308 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3231 = 1.0 - _3198;
                                float _3241 = (0.5 / (((_3230 * ((_3213 * _3231) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3198) * _3213))) * _3230;
                                float _4319 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3251 = (_3176 * _3153) * (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) / ((_3221 * _3221) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3177 * _3020.z;
                                frontier_phi_85_pred_1 = _3177 * _3020.y;
                                frontier_phi_85_pred_2 = _3177 * _3020.x;
                                frontier_phi_85_pred_3 = _3251 * _3032.z;
                                frontier_phi_85_pred_4 = _3251 * _3032.y;
                                frontier_phi_85_pred_5 = _3251 * _3032.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_85_pred;
                            _3259 = frontier_phi_85_pred_1;
                            _3258 = frontier_phi_85_pred_2;
                            _3257 = frontier_phi_85_pred_3;
                            _3256 = frontier_phi_85_pred_4;
                            _3255 = frontier_phi_85_pred_5;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            _2964 = _3260 + _2977;
                            _2959 = _3255 + _2972;
                            _2960 = _3256 + _2973;
                            _2961 = _3257 + _2974;
                            if (_2979 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2979;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2964;
                        frontier_phi_79_pred_1 = _2963;
                        frontier_phi_79_pred_2 = _2962;
                        frontier_phi_79_pred_3 = _2961;
                        frontier_phi_79_pred_4 = _2960;
                        frontier_phi_79_pred_5 = _2959;
                    }
                    _2601 = frontier_phi_79_pred;
                    _2599 = frontier_phi_79_pred_1;
                    _2597 = frontier_phi_79_pred_2;
                    _2595 = frontier_phi_79_pred_3;
                    _2593 = frontier_phi_79_pred_4;
                    _2591 = frontier_phi_79_pred_5;
                    uint _2757 = _2756 + 1u;
                    if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2750 = _2591;
                        _2751 = _2593;
                        _2752 = _2595;
                        _2753 = _2597;
                        _2754 = _2599;
                        _2755 = _2601;
                        _2756 = _2757;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2597;
                frontier_phi_60_61_ladder_1 = _2601;
                frontier_phi_60_61_ladder_2 = _2599;
                frontier_phi_60_61_ladder_3 = _2595;
                frontier_phi_60_61_ladder_4 = _2593;
                frontier_phi_60_61_ladder_5 = _2591;
            }
            else
            {
                frontier_phi_60_61_ladder = _2476;
                frontier_phi_60_61_ladder_1 = _2480;
                frontier_phi_60_61_ladder_2 = _2478;
                frontier_phi_60_61_ladder_3 = _2474;
                frontier_phi_60_61_ladder_4 = _2472;
                frontier_phi_60_61_ladder_5 = _2470;
            }
            _2590 = frontier_phi_60_61_ladder_5;
            _2592 = frontier_phi_60_61_ladder_4;
            _2594 = frontier_phi_60_61_ladder_3;
            _2596 = frontier_phi_60_61_ladder;
            _2598 = frontier_phi_60_61_ladder_2;
            _2600 = frontier_phi_60_61_ladder_1;
        }
        float _2605 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
        _2382 = (_2605 * _2596) + _1816;
        _2384 = (_2605 * _2598) + _1818;
        _2386 = (_2605 * _2600) + _1820;
        _2388 = ((_2590 * _571) * _2605) + _2164;
        _2390 = ((_2592 * _573) * _2605) + _2166;
        _2392 = ((_2594 * _574) * _2605) + _2168;
    }
    else
    {
        _2382 = _1816;
        _2384 = _1818;
        _2386 = _1820;
        _2388 = _2164;
        _2390 = _2166;
        _2392 = _2168;
    }
    float _4335 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4346 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4357 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _2409 = ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2382 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _586))) + ((_2388 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1428)) * cbPerFrame._m0[3u].x);
    float _2410 = ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2384 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _586))) + ((_2390 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1428)) * cbPerFrame._m0[3u].x);
    float _2411 = ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2386 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _586))) + ((_2392 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1428)) * cbPerFrame._m0[3u].x);
    uint _2412 = _546 + 6u;
    float _2420 = _508 / cbSceneParam._m0[86u].x;
    float _2421 = _509 / cbSceneParam._m0[86u].y;
    vec4 _2435 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, (log2((isnan(cbSceneParam._m0[77u].w) ? _429 : (isnan(_429) ? cbSceneParam._m0[77u].w : min(_429, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2437 = _2435.x;
    float _2438 = _2435.y;
    float _2439 = _2435.z;
    float _2440 = _2435.w;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    if (_429 > cbSceneParam._m0[78u].w)
    {
        float _2495 = isnan(_429) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _429 : min(cbSceneParam._m0[80u].w, _429));
        float _2496 = _2495 / _429;
        float _2507 = _2496 * _480;
        float _2508 = _481 * _2496;
        float _2509 = (-0.0) - _2508;
        float _2510 = _2496 * _482;
        float _2512 = (cbSceneParam._m0[77u].w * _2509) / _2495;
        float _2513 = _2512 + cbSceneParam._m0[79u].w;
        float _2514 = cbSceneParam._m0[79u].w - _2508;
        float _2520 = sqrt(((_2507 * _2507) + (_2508 * _2508)) + (_2510 * _2510));
        float _2523 = (1.0 - (cbSceneParam._m0[77u].w / _2495)) * _2520;
        float _2528 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2530 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2707;
        if (abs((_2509 - _2512) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2707 = ((((_2513 > 0.0) ? exp2(_2528 * _2513) : (2.0 - exp2(_2530 * _2513))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2523;
        }
        else
        {
            float _2651 = 1.0 / cbSceneParam._m0[80u].x;
            float _2652 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : max(_2513, _2514));
            float _2653 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : min(_2513, _2514));
            float _2662 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : min(_2652, 0.0));
            float _2663 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : min(_2653, 0.0));
            _2707 = ((abs(_2520 / _2509) * cbSceneParam._m0[80u].y) * ((((_2662 - _2663) * 2.0) - ((exp2(_2528 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0)))) - exp2(_2528 * (isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0))))) * _2651)) - ((exp2(_2530 * _2662) - exp2(_2530 * _2663)) * _2651))) + (_2523 * cbSceneParam._m0[80u].z);
        }
        vec4 _2709 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, 1.0), 0.0);
        float _2718 = exp2((_2707 * (-1.44269502162933349609375)) * (1.0 - _2709.w));
        float _2719 = log2(_2718);
        float _2735 = log2(_2440);
        _2532 = (exp2(_2735 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].x)) * _2709.x) / cbSceneParam._m0[78u].x)) + _2437;
        _2534 = (exp2(_2735 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].y)) * _2709.y) / cbSceneParam._m0[78u].y)) + _2438;
        _2536 = (exp2(_2735 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].z)) * _2709.z) / cbSceneParam._m0[78u].z)) + _2439;
        _2538 = _2718 * _2440;
    }
    else
    {
        _2532 = _2437;
        _2534 = _2438;
        _2536 = _2439;
        _2538 = _2440;
    }
    bool _2745;
    vec4 _2548;
    vec4 _2570;
    float _2572;
    float _2576;
    float _2577;
    float _2578;
    float _2579;
    bool _2589;
    for (;;)
    {
        _2548 = cbMatDynParam._m0[0u];
        float _2550 = roundEven(_2548.y);
        bool _2551 = _2550 == 3.0;
        float _2552 = log2(_2538);
        float _2559 = exp2(_2552 * cbSceneParam._m0[78u].x) * _2409;
        float _2560 = exp2(_2552 * cbSceneParam._m0[78u].y) * _2410;
        float _2561 = exp2(_2552 * cbSceneParam._m0[78u].z) * _2411;
        float _2568 = _496 + (-0.5);
        _2570 = cbMtdParam._m0[1u];
        _2572 = _2570.y * _2568;
        float _2575 = (_2550 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2576 = _2575 * (_2551 ? _2559 : (_2559 + (cbSceneParam._m0[72u].w * _2532)));
        _2577 = _2575 * (_2551 ? _2560 : (_2560 + (cbSceneParam._m0[72u].w * _2534)));
        _2578 = _2575 * (_2551 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2536)));
        _2579 = _2568 * 0.999000012874603271484375;
        _2589 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2589)
        {
            if ((cbInstanceData._m0[_546 + 7u].x + _2579) < 0.5)
            {
                _2745 = true;
                break;
            }
        }
        uint _2686 = _547 + uint(_2548.w);
        if ((cbInstanceData._m0[_2686].w < 1.0) && ((cbInstanceData._m0[_2686].w + _2579) < 0.5))
        {
            _2745 = true;
            break;
        }
        if ((_2572 + 1.0) < _2570.x)
        {
            _2745 = true;
            break;
        }
        _2745 = false;
        break;
    }
    float _2950;
    if (_2745)
    {
        discard_state = true;
        _2950 = 0.0;
    }
    else
    {
        _2950 = cbInstanceData._m0[_2412].w;
    }
    SV_Target.x = _2576;
    SV_Target.y = _2577;
    SV_Target.z = _2578;
    SV_Target.w = _2950;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2412].w;
    discard_exit();
}


