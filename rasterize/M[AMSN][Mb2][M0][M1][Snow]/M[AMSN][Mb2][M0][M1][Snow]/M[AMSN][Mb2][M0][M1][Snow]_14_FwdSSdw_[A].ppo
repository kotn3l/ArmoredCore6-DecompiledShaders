#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _856;
float _3250;
float _3251;
float _3252;
float _3253;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _235 = _230.z;
    float _239 = (_230.x * 2.0) + (-1.0);
    float _241 = (_230.y * 2.0) + (-1.0);
    float _242 = dot(vec2(_239, _241), vec2(_239, _241));
    float _3262 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _248 = sqrt(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))));
    vec4 _266 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _266.x * cbMtdParam._m0[9u].x;
    float _272 = _266.y * cbMtdParam._m0[9u].y;
    float _273 = _266.z * cbMtdParam._m0[9u].z;
    float _276 = fma(_248, _214, fma(_241, _206 * TANGENT.x, (_192 * _184) * _239));
    float _279 = fma(_248, _215, fma(_241, _206 * TANGENT.y, (_192 * _185) * _239));
    float _282 = fma(_248, _216, fma(_241, _206 * TANGENT.z, (_192 * _186) * _239));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3273 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _290 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3295 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3306 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _535 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _541 = (cbMatDynParam._m0[5u].x * _535) + cbMatDynParam._m0[5u].y;
        float _3317 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
        float _542 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _546 = (cbMatDynParam._m0[5u].z * _535) + cbMatDynParam._m0[5u].w;
        float _3328 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) - _542)) + _542) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _414 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _417 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = _430 + 9u;
    uint _432 = _431 + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3339 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    vec4 _452 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _455 = _452.x * TEXCOORD_9.w;
    float _456 = dot(vec3(_287, _288, _289), vec3(_369, _370, _371));
    float _459 = _456 * 2.0;
    float _463 = (_459 * _287) - _369;
    float _464 = (_459 * _288) - _370;
    float _465 = (_459 * _289) - _371;
    float _469 = abs(dot(vec3(_369, _370, _371), vec3(_287, _288, _289)));
    float _3372 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _471 = sqrt(_290);
    float _484 = exp2((_471 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_471 * 3.0));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _855;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _580 = fma(_524, cbModelParam._m0[26u].z, fma(_520, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _516));
        float _584 = fma(_524, cbModelParam._m0[27u].z, fma(_520, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _516));
        float _588 = fma(_524, cbModelParam._m0[28u].z, fma(_520, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _516));
        float _613 = _516 + _287;
        float _614 = _520 + _288;
        float _615 = _524 + _289;
        float _625 = fma(_615, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) - _580;
        float _626 = fma(_615, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) - _584;
        float _627 = fma(_615, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) - _588;
        float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
        float _644 = ((_631 * _625) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_580 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_631 * _626) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_584 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_631 * _627) / cbModelParam._m0[34u].z) + ((((((_588 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        float _683 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_649.x + (-0.5));
        float _685 = _683 * (_649.y + (-0.5));
        float _686 = _683 * (_649.z + (-0.5));
        float _693 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_656.x + (-0.5));
        float _695 = _693 * (_656.y + (-0.5));
        float _696 = _693 * (_656.z + (-0.5));
        float _703 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_663.x + (-0.5));
        float _705 = _703 * (_663.y + (-0.5));
        float _706 = _703 * (_663.z + (-0.5));
        float _713 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_670.x + (-0.5));
        float _715 = _713 * (_670.y + (-0.5));
        float _716 = _713 * (_670.z + (-0.5));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = _684 * 0.5;
        float _721 = _694 * 0.5;
        float _722 = _704 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _737 = (dot(vec3(_287, _288, _289), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _747 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _749 = _748 * 2.0;
        float _753 = (1.0 - _748) / (_748 + 1.0);
        float _3420 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _763 = ((((1.0 - _754) * (_749 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_749 + 1.0))) + _754) * _717;
        float _764 = _685 * 0.5;
        float _765 = _695 * 0.5;
        float _766 = _705 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_287, _288, _289), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3453 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_791 + 1.0))) + _796) * _718;
        float _806 = _686 * 0.5;
        float _807 = _696 * 0.5;
        float _808 = _706 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_287, _288, _289), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3486 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_833 + 1.0))) + _838) * _719;
        _855 = _686;
        _857 = _685;
        _858 = _684;
        _859 = _696;
        _860 = _695;
        _861 = _694;
        _862 = _706;
        _863 = _705;
        _864 = _704;
        _865 = _719;
        _866 = _718;
        _867 = _717;
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
    }
    else
    {
        _855 = _856;
        _857 = _856;
        _858 = _856;
        _859 = _856;
        _860 = _856;
        _861 = _856;
        _862 = _856;
        _863 = _856;
        _864 = _856;
        _865 = _856;
        _866 = _856;
        _867 = _856;
        _868 = 0.0;
        _869 = 0.0;
        _870 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_524, cbModelParam._m0[30u].z, fma(_520, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _516));
        float _903 = fma(_524, cbModelParam._m0[31u].z, fma(_520, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _516));
        float _907 = fma(_524, cbModelParam._m0[32u].z, fma(_520, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _516));
        float _930 = _516 + _287;
        float _931 = _520 + _288;
        float _932 = _524 + _289;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_287, _288, _289), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3549 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_287, _288, _289), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3582 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_287, _288, _289), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3615 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _856;
        _1169 = _856;
        _1170 = _856;
        _1171 = _856;
        _1172 = _856;
        _1173 = _856;
        _1174 = _856;
        _1175 = _856;
        _1176 = _856;
        _1177 = _856;
        _1178 = _856;
        _1179 = _856;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _463 * 0.5;
    float _1237 = _464 * 0.5;
    float _1238 = _465 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_855, _859, _862, _865));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_857, _860, _863, _866));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _861, _864, _867));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _290);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1354 = fma(_524, cbModelParam._m0[13u].z, fma(_520, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _516)) + cbModelParam._m0[13u].w;
        float _1358 = fma(_524, cbModelParam._m0[14u].z, fma(_520, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _516)) + cbModelParam._m0[14u].w;
        float _1362 = fma(_524, cbModelParam._m0[15u].z, fma(_520, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _516)) + cbModelParam._m0[15u].w;
        float _1365 = fma(_465, cbModelParam._m0[13u].z, fma(_464, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _463));
        float _1368 = fma(_465, cbModelParam._m0[14u].z, fma(_464, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _463));
        float _1371 = fma(_465, cbModelParam._m0[15u].z, fma(_464, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _463));
        float _1399;
        if (_1365 > 0.0)
        {
            _1399 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1399 = frontier_phi_19_17_ladder;
        }
        float _1626;
        if (_1368 > 0.0)
        {
            _1626 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1626 = frontier_phi_28_24_ladder;
        }
        float _1872;
        if (_1371 > 0.0)
        {
            _1872 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1872 = frontier_phi_40_35_ladder;
        }
        float _1874 = isnan(_1626) ? _1399 : (isnan(_1399) ? _1626 : min(_1399, _1626));
        float _1875 = isnan(_1872) ? _1874 : (isnan(_1874) ? _1872 : min(_1874, _1872));
        float _1879 = (_1875 * _1365) + _1354;
        float _1880 = (_1875 * _1368) + _1358;
        float _1881 = (_1875 * _1371) + _1362;
        float _1882 = _1875 * 9.9999997473787516355514526367188e-05;
        float _1884 = (-1.0) - _1882;
        float _1886 = _1882 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1881 > _1886) || ((_1881 < _1884) || ((_1880 > _1886) || ((_1880 < _1884) || ((_1879 < _1884) || (_1879 > _1886))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2005 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1881, cbModelParam._m0[9u].z, fma(_1880, cbModelParam._m0[9u].y, _1879 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1881, cbModelParam._m0[10u].z, fma(_1880, cbModelParam._m0[10u].y, _1879 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1881, cbModelParam._m0[11u].z, fma(_1880, cbModelParam._m0[11u].y, _1879 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_18_40_ladder = _2005.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2005.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2005.x * cbModelParam._m0[1u].y;
        }
        _1387 = frontier_phi_18_40_ladder_2;
        _1389 = frontier_phi_18_40_ladder_1;
        _1391 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_463, _464, _465), _1305);
        _1387 = _1375.x * cbModelParam._m0[1u].y;
        _1389 = _1375.y * cbModelParam._m0[1u].y;
        _1391 = _1375.z * cbModelParam._m0[1u].y;
    }
    float _1395 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _290);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1395 : min(cbModelParam._m0[25u].w, _1395));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1453 = fma(_524, cbModelParam._m0[21u].z, fma(_520, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _516)) + cbModelParam._m0[21u].w;
        float _1457 = fma(_524, cbModelParam._m0[22u].z, fma(_520, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _516)) + cbModelParam._m0[22u].w;
        float _1461 = fma(_524, cbModelParam._m0[23u].z, fma(_520, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _516)) + cbModelParam._m0[23u].w;
        float _1464 = fma(_465, cbModelParam._m0[21u].z, fma(_464, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _463));
        float _1467 = fma(_465, cbModelParam._m0[22u].z, fma(_464, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _463));
        float _1470 = fma(_465, cbModelParam._m0[23u].z, fma(_464, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _463));
        float _1631;
        if (_1464 > 0.0)
        {
            _1631 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1631 = frontier_phi_30_26_ladder;
        }
        float _1899;
        if (_1467 > 0.0)
        {
            _1899 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1899 = frontier_phi_42_37_ladder;
        }
        float _2104;
        if (_1470 > 0.0)
        {
            _2104 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2104 = frontier_phi_51_48_ladder;
        }
        float _2106 = isnan(_1899) ? _1631 : (isnan(_1631) ? _1899 : min(_1631, _1899));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1464) + _1453;
        float _2112 = (_2107 * _1467) + _1457;
        float _2113 = (_2107 * _1470) + _1461;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2114;
        float _2117 = _2114 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2113 > _2117) || ((_2113 < _2115) || ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 < _2115) || (_2111 > _2117))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2113, cbModelParam._m0[17u].z, fma(_2112, cbModelParam._m0[17u].y, _2111 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2113, cbModelParam._m0[18u].z, fma(_2112, cbModelParam._m0[18u].y, _2111 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2113, cbModelParam._m0[19u].z, fma(_2112, cbModelParam._m0[19u].y, _2111 * cbModelParam._m0[19u].x))), _1396);
            frontier_phi_27_51_ladder = _2311.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2311.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2311.x * cbModelParam._m0[1u].z;
        }
        _1489 = frontier_phi_27_51_ladder_2;
        _1491 = frontier_phi_27_51_ladder_1;
        _1493 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_463, _464, _465), _1396);
        _1489 = _1473.x * cbModelParam._m0[1u].z;
        _1491 = _1473.y * cbModelParam._m0[1u].z;
        _1493 = _1473.z * cbModelParam._m0[1u].z;
    }
    float _1505 = ((((1.0 - _484) * ((_471 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_484 * _471)) * _455;
    float _1506 = _1505 * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1507 = _1505 * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1508 = _1505 * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, _1506 * cbSceneParam._m0[91u].x));
    vec4 _1525 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_390, _391));
    float _1527 = _1525.w;
    float _1539 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1527);
    float _1540 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1527);
    float _1541 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1527);
    uvec4 _1545 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1547 = _1545.x * 14u;
    uint _1548 = _1547 + 13u;
    float _1555 = _455 + (-1.0);
    float _1560 = (cbLight._m0[_1548].x * _1555) + 1.0;
    float _1561 = (cbLight._m0[_1548].y * _1555) + 1.0;
    float _1562 = (cbLight._m0[_1548].z * _1555) + 1.0;
    float _1563 = (cbLight._m0[_1548].w * _1555) + 1.0;
    uint _1564 = _1547 + 5u;
    float _1570 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
    uint _1574 = _1547 + 4u;
    float _1584 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1588 = _1547 | 1u;
    float _1599 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_287, _288, _289));
    float _1602 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_287, _288, _289));
    float _3751 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _3762 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1607 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1609 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.3183098733425140380859375;
    float _1616 = ((cbLight._m0[_1564].x * _1570) * _1609) + (((cbLight._m0[_1574].x * _1539) * _1584) * _1607);
    float _1617 = ((_1570 * cbLight._m0[_1564].y) * _1609) + (((cbLight._m0[_1574].y * _1540) * _1584) * _1607);
    float _1618 = ((_1570 * cbLight._m0[_1564].z) * _1609) + (((cbLight._m0[_1574].z * _1541) * _1584) * _1607);
    uvec4 _1623 = floatBitsToUint(cbLight._m0[_1547 + 12u]);
    bool _1625 = _1623.x == 0u;
    float _1636;
    float _1638;
    float _1640;
    if (_1625)
    {
        _1636 = _1616;
        _1638 = _1617;
        _1640 = _1618;
    }
    else
    {
        uint _1644 = _1547 + 6u;
        float _1660 = (dot(vec3(cbLight._m0[_1547 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1661 = _1660 * _1660;
        float _3773 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1663 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1636 = (((cbLight._m0[_1644].x * 0.3183098733425140380859375) * _1662) * _1663) + _1616;
        _1638 = (((cbLight._m0[_1644].y * 0.3183098733425140380859375) * _1662) * _1663) + _1617;
        _1640 = (((cbLight._m0[_1644].z * 0.3183098733425140380859375) * _1662) * _1663) + _1618;
    }
    bool _1643 = _1623.y == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1643)
    {
        _1681 = _1636;
        _1683 = _1638;
        _1685 = _1640;
    }
    else
    {
        uint _1843 = _1547 + 7u;
        float _1859 = (dot(vec3(cbLight._m0[_1547 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1860 = _1859 * _1859;
        float _3789 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1862 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _1681 = (((cbLight._m0[_1843].x * 0.3183098733425140380859375) * _1861) * _1862) + _1636;
        _1683 = (((cbLight._m0[_1843].y * 0.3183098733425140380859375) * _1861) * _1862) + _1638;
        _1685 = (((cbLight._m0[_1843].z * 0.3183098733425140380859375) * _1861) * _1862) + _1640;
    }
    uint _1688 = _1547 + 8u;
    float _1701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1547].w)) * _290) * 0.949999988079071044921875);
    float _1702 = _1701 * _1701;
    float _1703 = cbLight._m0[_1547].x + _369;
    float _1704 = cbLight._m0[_1547].y + _370;
    float _1705 = cbLight._m0[_1547].z + _371;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1710 = _1709 * _1703;
    float _1711 = _1709 * _1704;
    float _1712 = _1709 * _1705;
    float _1713 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1547].xyz));
    float _3805 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _1717 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1718 = dot(vec3(_287, _288, _289), vec3(_1710, _1711, _1712));
    float _3827 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1722 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_1710, _1711, _1712));
    float _3838 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1726 = _1702 * _1702;
    float _1730 = ((_1721 * _1721) * (_1726 + (-1.0))) + 1.0;
    float _1741 = (exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1742 = 1.0 - _1702;
    float _1753 = (0.5 / (((_1717 * ((_1716 * _1742) + _1702)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1742) + _1702) * _1716))) * _1716;
    float _3849 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1726 / ((_1730 * _1730) * 3.141590118408203125));
    uint _1769 = _1547 + 9u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _290) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1588].x + _369;
    float _1783 = cbLight._m0[_1588].y + _370;
    float _1784 = cbLight._m0[_1588].z + _371;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1588].xyz));
    float _3860 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1796 = dot(vec3(_287, _288, _289), vec3(_1789, _1790, _1791));
    float _3871 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1789, _1790, _1791));
    float _3882 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1781 * _1781;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1818 = 1.0 - _1781;
    float _1828 = (0.5 / (((_1717 * ((_1795 * _1818) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1818) + _1781) * _1795))) * _1795;
    float _3893 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    float _1840 = (((_1817 * cbLight._m0[_1769].x) * _1830) * _1570) + ((((cbLight._m0[_1688].x * _1539) * _1741) * _1755) * _1584);
    float _1841 = (((_1817 * cbLight._m0[_1769].y) * _1830) * _1570) + ((((cbLight._m0[_1688].y * _1540) * _1741) * _1755) * _1584);
    float _1842 = (((_1817 * cbLight._m0[_1769].z) * _1830) * _1570) + ((((cbLight._m0[_1688].z * _1541) * _1741) * _1755) * _1584);
    float _1904;
    float _1906;
    float _1908;
    if (_1625)
    {
        _1904 = _1840;
        _1906 = _1841;
        _1908 = _1842;
    }
    else
    {
        uint _1910 = _1547 + 2u;
        uint _1914 = _1547 + 10u;
        float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _290) * 0.949999988079071044921875);
        float _1929 = _1928 * _1928;
        float _1930 = cbLight._m0[_1910].x + _369;
        float _1931 = cbLight._m0[_1910].y + _370;
        float _1932 = cbLight._m0[_1910].z + _371;
        float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
        float _1937 = _1936 * _1930;
        float _1938 = _1936 * _1931;
        float _1939 = _1936 * _1932;
        float _1940 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1910].xyz));
        float _3904 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1943 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1944 = dot(vec3(_287, _288, _289), vec3(_1937, _1938, _1939));
        float _3915 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1948 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_1937, _1938, _1939));
        float _3926 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1952 = _1929 * _1929;
        float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
        float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1966 = 1.0 - _1929;
        float _1976 = (0.5 / (((_1717 * ((_1943 * _1966) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1966) + _1929) * _1943))) * _1943;
        float _3937 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1978 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
        float _1979 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1904 = (((_1965 * cbLight._m0[_1914].x) * _1978) * _1979) + _1840;
        _1906 = (((_1965 * cbLight._m0[_1914].y) * _1978) * _1979) + _1841;
        _1908 = (((_1965 * cbLight._m0[_1914].z) * _1978) * _1979) + _1842;
    }
    float _2014;
    float _2016;
    float _2018;
    if (_1643)
    {
        _2014 = _1904;
        _2016 = _1906;
        _2018 = _1908;
    }
    else
    {
        uint _2025 = _1547 + 3u;
        uint _2029 = _1547 + 11u;
        float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _290) * 0.949999988079071044921875);
        float _2044 = _2043 * _2043;
        float _2045 = cbLight._m0[_2025].x + _369;
        float _2046 = cbLight._m0[_2025].y + _370;
        float _2047 = cbLight._m0[_2025].z + _371;
        float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
        float _2052 = _2051 * _2045;
        float _2053 = _2051 * _2046;
        float _2054 = _2051 * _2047;
        float _2055 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2025].xyz));
        float _3953 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2059 = dot(vec3(_287, _288, _289), vec3(_2052, _2053, _2054));
        float _3964 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2063 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2052, _2053, _2054));
        float _3975 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2067 = _2044 * _2044;
        float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
        float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2081 = 1.0 - _2044;
        float _2091 = (0.5 / (((_1717 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _2081) + _2044) * _2058))) * _2058;
        float _3986 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2093 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
        float _2094 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _2014 = (((_2080 * cbLight._m0[_2029].x) * _2093) * _2094) + _1904;
        _2016 = (((_2080 * cbLight._m0[_2029].y) * _2093) * _2094) + _1906;
        _2018 = (((_2080 * cbLight._m0[_2029].z) * _2093) * _2094) + _1908;
    }
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    if (_1545.y == 0u)
    {
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2169;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2169;
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2169;
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.x;
        uint _2196 = uint((float(_2184.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2185))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2185)));
        float _2206 = (log2(_2172 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2207 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        uint _2210 = uint(isnan(14.0) ? _2207 : (isnan(_2207) ? 14.0 : min(_2207, 14.0)));
        uvec4 _2215 = texelFetch(g_lightClusterGridBuffer, int(((_2210 << 2u) + (_2196 << 6u)) >> 2u));
        uint _2216 = _2215.x;
        uint _2217 = _2184.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2217 >> 4u) & 15u)) + 4294967295u) & _2216) == 0u) || ((_2217 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            uint _2474 = 0u;
            uint _2483;
            bool _2484;
            for (;;)
            {
                _2483 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2474 << 2u)) >> 2u)).x;
                _2484 = _2483 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2484)
                {
                    frontier_phi_68_pred = _2470;
                    frontier_phi_68_pred_1 = _2473;
                    frontier_phi_68_pred_2 = _2472;
                    frontier_phi_68_pred_3 = _2471;
                    frontier_phi_68_pred_4 = _2469;
                    frontier_phi_68_pred_5 = _2468;
                }
                else
                {
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    uint _2619;
                    _2613 = _2468;
                    _2614 = _2469;
                    _2615 = _2470;
                    _2616 = _2471;
                    _2617 = _2472;
                    _2618 = _2473;
                    _2619 = _2483;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    for (;;)
                    {
                        uint _2623 = uint(findLSB(_2619)) + (_2474 << 5u);
                        uint _2620 = (_2619 + 4294967295u) & _2619;
                        uint _2625 = _2623 * 48u;
                        vec4 _2639 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2625)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 3u)).x));
                        uint _2645 = (_2623 * 48u) + 4u;
                        vec4 _2658 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 3u)).x));
                        uint _2664 = (_2623 * 48u) + 8u;
                        vec3 _2675 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 2u)).x));
                        float _2679 = _2639.x - _2170;
                        float _2680 = _2639.y - _2171;
                        float _2681 = _2639.z - _2172;
                        float _2682 = dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681));
                        float _2685 = inversesqrt(_2682);
                        float _2686 = _2685 * _2679;
                        float _2687 = _2685 * _2680;
                        float _2688 = _2685 * _2681;
                        float _2689 = dot(vec3(_411, _414, _417), vec3(_2686, _2687, _2688));
                        float _2694 = 1.0 - (_2682 * _2639.w);
                        float _4012 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                        float _2695 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2696 = sqrt(_2682) * _2658.w;
                        float _2699 = 1.39999997615814208984375 / (_2696 + 1.39999997615814208984375);
                        float _2700 = _2699 * _2699;
                        float _2703 = ((1.0 - _2700) * _2689) + _2700;
                        float _2706 = _2696 * _2696;
                        float _2710 = ((isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))) * _2695) / ((_2706 * 0.699999988079071044921875) + 1.0);
                        float _2714 = (-0.0) - _2170;
                        float _2715 = (-0.0) - _2171;
                        float _2716 = (-0.0) - _2172;
                        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
                        float _2721 = _2720 * _2714;
                        float _2722 = _2720 * _2715;
                        float _2723 = _2720 * _2716;
                        float _2731 = exp2(log2(1.0 / ((_2706 * 3.5) + 5.0)) * 0.25);
                        float _2732 = 1.0 - _471;
                        float _2739 = sqrt(1.0 - ((1.0 - (_2732 * _2732)) * (1.0 - (_2731 * _2731))));
                        float _2740 = _2739 * _2739;
                        float _2741 = _2740 * _2740;
                        float _2742 = _2721 + _2686;
                        float _2743 = _2722 + _2687;
                        float _2744 = _2723 + _2688;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2752 = dot(vec3(_411, _414, _417), vec3(_2721, _2722, _2723));
                        float _4028 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2755 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2756 = dot(vec3(_411, _414, _417), vec3(_2748 * _2742, _2748 * _2743, _2748 * _2744));
                        float _4039 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2759 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2763 = ((_2759 * _2759) * (_2741 + (-1.0))) + 1.0;
                        float _2764 = _2699 * _2740;
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * _2689) + _2765;
                        float _4050 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2769 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2770 = 1.0 - _2740;
                        float _2780 = (0.5 / (((_2769 * ((_2755 * _2770) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2769 * _2770) + _2740) * _2755))) * _2769;
                        float _4061 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2791 = (((_2741 * 3.1415927410125732421875) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) / ((_2763 * _2763) * ((_2706 * 2.1991131305694580078125) + 3.141590118408203125))) * _2695;
                        _2543 = (_2710 * _2658.x) + _2616;
                        _2544 = (_2710 * _2658.y) + _2617;
                        _2545 = (_2710 * _2658.z) + _2618;
                        _2540 = (_2791 * _2675.x) + _2613;
                        _2541 = (_2791 * _2675.y) + _2614;
                        _2542 = (_2791 * _2675.z) + _2615;
                        if (_2620 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2613 = _2540;
                            _2614 = _2541;
                            _2615 = _2542;
                            _2616 = _2543;
                            _2617 = _2544;
                            _2618 = _2545;
                            _2619 = _2620;
                        }
                    }
                    frontier_phi_68_pred = _2542;
                    frontier_phi_68_pred_1 = _2545;
                    frontier_phi_68_pred_2 = _2544;
                    frontier_phi_68_pred_3 = _2543;
                    frontier_phi_68_pred_4 = _2541;
                    frontier_phi_68_pred_5 = _2540;
                }
                _2321 = frontier_phi_68_pred;
                _2327 = frontier_phi_68_pred_1;
                _2325 = frontier_phi_68_pred_2;
                _2323 = frontier_phi_68_pred_3;
                _2319 = frontier_phi_68_pred_4;
                _2317 = frontier_phi_68_pred_5;
                uint _2475 = _2474 + 1u;
                if (_2475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2468 = _2317;
                    _2469 = _2319;
                    _2470 = _2321;
                    _2471 = _2323;
                    _2472 = _2325;
                    _2473 = _2327;
                    _2474 = _2475;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        if (((4294967295u << _2333) & _2216) == 0u)
        {
            _2436 = _2316;
            _2438 = _2318;
            _2440 = _2320;
            _2442 = _2322;
            _2444 = _2324;
            _2446 = _2326;
        }
        else
        {
            float _2461 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
            float _2462 = _2461 * _2170;
            float _2463 = _2461 * _2171;
            float _2464 = _2461 * _2172;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2596 = _2316;
                float _2597 = _2318;
                float _2598 = _2320;
                float _2599 = _2322;
                float _2600 = _2324;
                float _2601 = _2326;
                uint _2602 = _2333;
                uint _2611;
                bool _2612;
                for (;;)
                {
                    _2611 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2602 << 2u)) >> 2u)).x;
                    _2612 = _2611 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2612)
                    {
                        frontier_phi_79_pred = _2601;
                        frontier_phi_79_pred_1 = _2600;
                        frontier_phi_79_pred_2 = _2599;
                        frontier_phi_79_pred_3 = _2598;
                        frontier_phi_79_pred_4 = _2597;
                        frontier_phi_79_pred_5 = _2596;
                    }
                    else
                    {
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _2818 = _2596;
                        float _2819 = _2597;
                        float _2820 = _2598;
                        float _2821 = _2599;
                        float _2822 = _2600;
                        float _2823 = _2601;
                        uint _2824 = _2611;
                        uint _2825;
                        vec4 _2850;
                        float _2851;
                        vec4 _2866;
                        vec3 _2878;
                        vec4 _2894;
                        vec4 _2910;
                        float _2957;
                        bool _2958;
                        for (;;)
                        {
                            uint _2835 = ((_2602 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2824));
                            _2825 = (_2824 + 4294967295u) & _2824;
                            uint _2837 = _2835 * 40u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            _2851 = _2850.w;
                            uint _2853 = (_2835 * 40u) + 4u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2868 = (_2835 * 40u) + 8u;
                            _2878 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x));
                            uint _2881 = (_2835 * 40u) + 16u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2897 = (_2835 * 40u) + 20u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2913 = (_2835 * 40u) + 24u;
                            vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2932 = (_2835 * 40u) + 28u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            _2957 = fma(_2172, _2945.z, fma(_2171, _2945.y, _2945.x * _2170)) + _2945.w;
                            _2958 = !((fma(_2172, _2926.z, fma(_2171, _2926.y, _2926.x * _2170)) + _2926.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2958)
                            {
                                float _2985 = _2850.x - _2170;
                                float _2986 = _2850.y - _2171;
                                float _2987 = _2850.z - _2172;
                                float _2988 = dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987));
                                float _2991 = inversesqrt(_2988);
                                float _2992 = _2991 * _2985;
                                float _2993 = _2991 * _2986;
                                float _2994 = _2991 * _2987;
                                float _2998 = 1.0 - (_2988 / (_2851 * _2851));
                                float _4072 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _2999 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3003 = sqrt(_2988) * _2866.w;
                                float _3005 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                                float _3006 = _3005 * _3005;
                                float _3009 = ((1.0 - _3006) * dot(vec3(_2992, _2993, _2994), vec3(_411, _414, _417))) + _3006;
                                float _3012 = _3003 * _3003;
                                float _3016 = (fma(_2172, _2894.z, fma(_2171, _2894.y, _2894.x * _2170)) + _2894.w) / _2957;
                                float _3017 = (fma(_2172, _2910.z, fma(_2171, _2910.y, _2910.x * _2170)) + _2910.w) / _2957;
                                float _3021 = 1.0 - dot(vec2(_3016, _3017), vec2(_3016, _3017));
                                float _4088 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3023 = _3022 * (((isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))) * _2999) / ((_3012 * 0.699999988079071044921875) + 1.0));
                                float _3035 = exp2(log2(1.0 / ((_3012 * 3.5) + 5.0)) * 0.25);
                                float _3036 = 1.0 - _471;
                                float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                                float _3044 = _3043 * _3043;
                                float _3045 = _3044 * _3044;
                                float _3046 = _2992 - _2462;
                                float _3047 = _2993 - _2463;
                                float _3048 = _2994 - _2464;
                                float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                                float _3056 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2462, (-0.0) - _2463, (-0.0) - _2464));
                                float _4099 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3059 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3060 = dot(vec3(_411, _414, _417), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                                float _4110 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3063 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                                float _3068 = _3005 * _3044;
                                float _3069 = _3068 * _3068;
                                float _3075 = ((1.0 - _3069) * dot(vec3(_411, _414, _417), vec3(_2992, _2993, _2994))) + _3069;
                                float _4121 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3077 = 1.0 - _3044;
                                float _3087 = (0.5 / (((_3076 * ((_3059 * _3077) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3044) * _3059))) * _3076;
                                float _4132 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3097 = (_3022 * _2999) * (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) / ((_3067 * _3067) * ((_3012 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3023 * _2866.z;
                                frontier_phi_85_pred_1 = _3023 * _2866.y;
                                frontier_phi_85_pred_2 = _3023 * _2866.x;
                                frontier_phi_85_pred_3 = _3097 * _2878.z;
                                frontier_phi_85_pred_4 = _3097 * _2878.y;
                                frontier_phi_85_pred_5 = _3097 * _2878.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3106 = frontier_phi_85_pred;
                            _3105 = frontier_phi_85_pred_1;
                            _3104 = frontier_phi_85_pred_2;
                            _3103 = frontier_phi_85_pred_3;
                            _3102 = frontier_phi_85_pred_4;
                            _3101 = frontier_phi_85_pred_5;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            if (_2825 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2825;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2810;
                        frontier_phi_79_pred_1 = _2809;
                        frontier_phi_79_pred_2 = _2808;
                        frontier_phi_79_pred_3 = _2807;
                        frontier_phi_79_pred_4 = _2806;
                        frontier_phi_79_pred_5 = _2805;
                    }
                    _2447 = frontier_phi_79_pred;
                    _2445 = frontier_phi_79_pred_1;
                    _2443 = frontier_phi_79_pred_2;
                    _2441 = frontier_phi_79_pred_3;
                    _2439 = frontier_phi_79_pred_4;
                    _2437 = frontier_phi_79_pred_5;
                    uint _2603 = _2602 + 1u;
                    if (_2603 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2596 = _2437;
                        _2597 = _2439;
                        _2598 = _2441;
                        _2599 = _2443;
                        _2600 = _2445;
                        _2601 = _2447;
                        _2602 = _2603;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2443;
                frontier_phi_60_61_ladder_1 = _2447;
                frontier_phi_60_61_ladder_2 = _2445;
                frontier_phi_60_61_ladder_3 = _2441;
                frontier_phi_60_61_ladder_4 = _2439;
                frontier_phi_60_61_ladder_5 = _2437;
            }
            else
            {
                frontier_phi_60_61_ladder = _2322;
                frontier_phi_60_61_ladder_1 = _2326;
                frontier_phi_60_61_ladder_2 = _2324;
                frontier_phi_60_61_ladder_3 = _2320;
                frontier_phi_60_61_ladder_4 = _2318;
                frontier_phi_60_61_ladder_5 = _2316;
            }
            _2436 = frontier_phi_60_61_ladder_5;
            _2438 = frontier_phi_60_61_ladder_4;
            _2440 = frontier_phi_60_61_ladder_3;
            _2442 = frontier_phi_60_61_ladder;
            _2444 = frontier_phi_60_61_ladder_2;
            _2446 = frontier_phi_60_61_ladder_1;
        }
        float _2451 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
        _2228 = (_2451 * _2442) + _1681;
        _2230 = (_2451 * _2444) + _1683;
        _2232 = (_2451 * _2446) + _1685;
        _2234 = ((_2436 * 0.039999999105930328369140625) * _2451) + _2014;
        _2236 = ((_2438 * 0.039999999105930328369140625) * _2451) + _2016;
        _2238 = ((_2440 * 0.039999999105930328369140625) * _2451) + _2018;
    }
    else
    {
        _2228 = _1681;
        _2230 = _1683;
        _2232 = _1685;
        _2234 = _2014;
        _2236 = _2016;
        _2238 = _2018;
    }
    float _4148 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4159 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4170 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _2255 = ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2228 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _455))) + ((_2234 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1294)) * cbPerFrame._m0[3u].x);
    float _2256 = ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2230 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _455))) + ((_2236 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1294)) * cbPerFrame._m0[3u].x);
    float _2257 = ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2232 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _455))) + ((_2238 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1294)) * cbPerFrame._m0[3u].x);
    uint _2258 = _430 + 6u;
    float _2266 = _390 / cbSceneParam._m0[86u].x;
    float _2267 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2281 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2283 = _2281.x;
    float _2284 = _2281.y;
    float _2285 = _2281.z;
    float _2286 = _2281.w;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2341 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2342 = _2341 / _309;
        float _2353 = _2342 * _362;
        float _2354 = _363 * _2342;
        float _2355 = (-0.0) - _2354;
        float _2356 = _2342 * _364;
        float _2358 = (cbSceneParam._m0[77u].w * _2355) / _2341;
        float _2359 = _2358 + cbSceneParam._m0[79u].w;
        float _2360 = cbSceneParam._m0[79u].w - _2354;
        float _2366 = sqrt(((_2353 * _2353) + (_2354 * _2354)) + (_2356 * _2356));
        float _2369 = (1.0 - (cbSceneParam._m0[77u].w / _2341)) * _2366;
        float _2374 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2376 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2553;
        if (abs((_2355 - _2358) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2553 = ((((_2359 > 0.0) ? exp2(_2374 * _2359) : (2.0 - exp2(_2376 * _2359))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2369;
        }
        else
        {
            float _2497 = 1.0 / cbSceneParam._m0[80u].x;
            float _2498 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : max(_2359, _2360));
            float _2499 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : min(_2359, _2360));
            float _2508 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : min(_2498, 0.0));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            _2553 = ((abs(_2366 / _2355) * cbSceneParam._m0[80u].y) * ((((_2508 - _2509) * 2.0) - ((exp2(_2374 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0)))) - exp2(_2374 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))))) * _2497)) - ((exp2(_2376 * _2508) - exp2(_2376 * _2509)) * _2497))) + (_2369 * cbSceneParam._m0[80u].z);
        }
        vec4 _2555 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, 1.0), 0.0);
        float _2564 = exp2((_2553 * (-1.44269502162933349609375)) * (1.0 - _2555.w));
        float _2565 = log2(_2564);
        float _2581 = log2(_2286);
        _2378 = (exp2(_2581 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].x)) * _2555.x) / cbSceneParam._m0[78u].x)) + _2283;
        _2380 = (exp2(_2581 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].y)) * _2555.y) / cbSceneParam._m0[78u].y)) + _2284;
        _2382 = (exp2(_2581 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].z)) * _2555.z) / cbSceneParam._m0[78u].z)) + _2285;
        _2384 = _2564 * _2286;
    }
    else
    {
        _2378 = _2283;
        _2380 = _2284;
        _2382 = _2285;
        _2384 = _2286;
    }
    bool _2591;
    vec4 _2394;
    vec4 _2416;
    float _2418;
    float _2422;
    float _2423;
    float _2424;
    float _2425;
    bool _2435;
    for (;;)
    {
        _2394 = cbMatDynParam._m0[0u];
        float _2396 = roundEven(_2394.y);
        bool _2397 = _2396 == 3.0;
        float _2398 = log2(_2384);
        float _2405 = exp2(_2398 * cbSceneParam._m0[78u].x) * _2255;
        float _2406 = exp2(_2398 * cbSceneParam._m0[78u].y) * _2256;
        float _2407 = exp2(_2398 * cbSceneParam._m0[78u].z) * _2257;
        float _2414 = _378 + (-0.5);
        _2416 = cbMtdParam._m0[1u];
        _2418 = _2416.y * _2414;
        float _2421 = (_2396 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2422 = _2421 * (_2397 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2378)));
        _2423 = _2421 * (_2397 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2380)));
        _2424 = _2421 * (_2397 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2382)));
        _2425 = _2414 * 0.999000012874603271484375;
        _2435 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2435)
        {
            if ((cbInstanceData._m0[_430 + 7u].x + _2425) < 0.5)
            {
                _2591 = true;
                break;
            }
        }
        uint _2532 = _431 + uint(_2394.w);
        if ((cbInstanceData._m0[_2532].w < 1.0) && ((cbInstanceData._m0[_2532].w + _2425) < 0.5))
        {
            _2591 = true;
            break;
        }
        if ((_2418 + 1.0) < _2416.x)
        {
            _2591 = true;
            break;
        }
        _2591 = false;
        break;
    }
    float _2796;
    if (_2591)
    {
        discard_state = true;
        _2796 = 0.0;
    }
    else
    {
        _2796 = cbInstanceData._m0[_2258].w;
    }
    SV_Target.x = _2422;
    SV_Target.y = _2423;
    SV_Target.z = _2424;
    SV_Target.w = _2796;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2258].w;
    discard_exit();
}


