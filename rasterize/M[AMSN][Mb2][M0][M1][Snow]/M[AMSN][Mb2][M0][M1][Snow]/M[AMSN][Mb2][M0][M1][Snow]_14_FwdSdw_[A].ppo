#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _858;
float _3511;
float _3512;
float _3513;
float _3514;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _237 = _232.z;
    float _241 = (_232.x * 2.0) + (-1.0);
    float _243 = (_232.y * 2.0) + (-1.0);
    float _244 = dot(vec2(_241, _243), vec2(_241, _243));
    float _3523 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _250 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    vec4 _268 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = _268.x * cbMtdParam._m0[9u].x;
    float _274 = _268.y * cbMtdParam._m0[9u].y;
    float _275 = _268.z * cbMtdParam._m0[9u].z;
    float _278 = fma(_250, _216, fma(_243, _208 * TANGENT.x, (_194 * _186) * _241));
    float _281 = fma(_250, _217, fma(_243, _208 * TANGENT.y, (_194 * _187) * _241));
    float _284 = fma(_250, _218, fma(_243, _208 * TANGENT.z, (_194 * _188) * _241));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3534 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _292 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3556 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3567 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _537 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _543 = (cbMatDynParam._m0[5u].x * _537) + cbMatDynParam._m0[5u].y;
        float _3578 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        float _544 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _548 = (cbMatDynParam._m0[5u].z * _537) + cbMatDynParam._m0[5u].w;
        float _3589 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) - _544)) + _544) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _416 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _419 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = _432 + 9u;
    uint _434 = _433 + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3600 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    vec4 _454 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _457 = _454.x * TEXCOORD_9.w;
    float _458 = dot(vec3(_289, _290, _291), vec3(_371, _372, _373));
    float _461 = _458 * 2.0;
    float _465 = (_461 * _289) - _371;
    float _466 = (_461 * _290) - _372;
    float _467 = (_461 * _291) - _373;
    float _471 = abs(dot(vec3(_371, _372, _373), vec3(_289, _290, _291)));
    float _3633 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = sqrt(_292);
    float _486 = exp2((_473 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_473 * 3.0));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _857;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_526, cbModelParam._m0[26u].z, fma(_522, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _518));
        float _586 = fma(_526, cbModelParam._m0[27u].z, fma(_522, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _518));
        float _590 = fma(_526, cbModelParam._m0[28u].z, fma(_522, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _518));
        float _615 = _518 + _289;
        float _616 = _522 + _290;
        float _617 = _526 + _291;
        float _627 = fma(_617, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) - _582;
        float _628 = fma(_617, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) - _586;
        float _629 = fma(_617, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) - _590;
        float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
        float _646 = ((_633 * _627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_633 * _628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_633 * _629) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        float _685 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_651.x + (-0.5));
        float _687 = _685 * (_651.y + (-0.5));
        float _688 = _685 * (_651.z + (-0.5));
        float _695 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_658.x + (-0.5));
        float _697 = _695 * (_658.y + (-0.5));
        float _698 = _695 * (_658.z + (-0.5));
        float _705 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_665.x + (-0.5));
        float _707 = _705 * (_665.y + (-0.5));
        float _708 = _705 * (_665.z + (-0.5));
        float _715 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_672.x + (-0.5));
        float _717 = _715 * (_672.y + (-0.5));
        float _718 = _715 * (_672.z + (-0.5));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = _686 * 0.5;
        float _723 = _696 * 0.5;
        float _724 = _706 * 0.5;
        float _725 = dot(vec3(_722, _723, _724), vec3(_722, _723, _724));
        float _730 = (_725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_725);
        float _739 = (dot(vec3(_289, _290, _291), vec3(_730 * _722, _730 * _723, _730 * _724)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _749 = sqrt(((_723 * _723) + (_722 * _722)) + (_724 * _724)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _751 = _750 * 2.0;
        float _755 = (1.0 - _750) / (_750 + 1.0);
        float _3681 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _765 = ((((1.0 - _756) * (_751 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_751 + 1.0))) + _756) * _719;
        float _766 = _687 * 0.5;
        float _767 = _697 * 0.5;
        float _768 = _707 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_289, _290, _291), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3714 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_793 + 1.0))) + _798) * _720;
        float _808 = _688 * 0.5;
        float _809 = _698 * 0.5;
        float _810 = _708 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_289, _290, _291), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3747 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_835 + 1.0))) + _840) * _721;
        _857 = _688;
        _859 = _687;
        _860 = _686;
        _861 = _698;
        _862 = _697;
        _863 = _696;
        _864 = _708;
        _865 = _707;
        _866 = _706;
        _867 = _721;
        _868 = _720;
        _869 = _719;
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
    }
    else
    {
        _857 = _858;
        _859 = _858;
        _860 = _858;
        _861 = _858;
        _862 = _858;
        _863 = _858;
        _864 = _858;
        _865 = _858;
        _866 = _858;
        _867 = _858;
        _868 = _858;
        _869 = _858;
        _870 = 0.0;
        _871 = 0.0;
        _872 = 0.0;
    }
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = fma(_526, cbModelParam._m0[30u].z, fma(_522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _518));
        float _905 = fma(_526, cbModelParam._m0[31u].z, fma(_522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _518));
        float _909 = fma(_526, cbModelParam._m0[32u].z, fma(_522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _518));
        float _932 = _518 + _289;
        float _933 = _522 + _290;
        float _934 = _526 + _291;
        float _944 = fma(_934, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_901 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_905 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[35u].z) + ((((((_909 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1000 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_967.x + (-0.5));
        float _1002 = _1000 * (_967.y + (-0.5));
        float _1003 = _1000 * (_967.z + (-0.5));
        float _1010 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_974.x + (-0.5));
        float _1012 = _1010 * (_974.y + (-0.5));
        float _1013 = _1010 * (_974.z + (-0.5));
        float _1020 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_981.x + (-0.5));
        float _1022 = _1020 * (_981.y + (-0.5));
        float _1023 = _1020 * (_981.z + (-0.5));
        float _1030 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_988.x + (-0.5));
        float _1032 = _1030 * (_988.y + (-0.5));
        float _1033 = _1030 * (_988.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_289, _290, _291), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3810 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1064 + 1.0))) + _1069) * _1034;
        float _1079 = _1002 * 0.5;
        float _1080 = _1012 * 0.5;
        float _1081 = _1022 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_289, _290, _291), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3843 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1106 + 1.0))) + _1111) * _1035;
        float _1121 = _1003 * 0.5;
        float _1122 = _1013 * 0.5;
        float _1123 = _1023 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_289, _290, _291), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3876 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1148 + 1.0))) + _1153) * _1036;
        _1170 = _1003;
        _1171 = _1002;
        _1172 = _1001;
        _1173 = _1013;
        _1174 = _1012;
        _1175 = _1011;
        _1176 = _1023;
        _1177 = _1022;
        _1178 = _1021;
        _1179 = _1036;
        _1180 = _1035;
        _1181 = _1034;
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _858;
        _1171 = _858;
        _1172 = _858;
        _1173 = _858;
        _1174 = _858;
        _1175 = _858;
        _1176 = _858;
        _1177 = _858;
        _1178 = _858;
        _1179 = _858;
        _1180 = _858;
        _1181 = _858;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _871)) + _871;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _872)) + _872;
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1194));
    float _1238 = _465 * 0.5;
    float _1239 = _466 * 0.5;
    float _1240 = _467 * 0.5;
    float _1241 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1244 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1247 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1281;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1254 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_857, _861, _864, _867));
        float _1258 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_859, _862, _865, _868));
        float _1262 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_860, _863, _866, _869));
        float _1269 = dot(vec4(cbModelParam._m0[39u]), vec4(_1238, _1239, _1240, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1292;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1283 = dot(vec4(cbModelParam._m0[40u]), vec4(_1238, _1239, _1240, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1296 = (_1292 * cbModelParam._m0[1u].x) + (_1281 * (1.0 - cbModelParam._m0[1u].x));
    float _1306 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _292);
    float _1307 = isnan(_1306) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1306 : min(cbModelParam._m0[25u].z, _1306));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1356 = fma(_526, cbModelParam._m0[13u].z, fma(_522, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _518)) + cbModelParam._m0[13u].w;
        float _1360 = fma(_526, cbModelParam._m0[14u].z, fma(_522, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _518)) + cbModelParam._m0[14u].w;
        float _1364 = fma(_526, cbModelParam._m0[15u].z, fma(_522, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _518)) + cbModelParam._m0[15u].w;
        float _1367 = fma(_467, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465));
        float _1370 = fma(_467, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465));
        float _1373 = fma(_467, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465));
        float _1401;
        if (_1367 > 0.0)
        {
            _1401 = abs((1.0 - _1356) / _1367);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1356 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1401 = frontier_phi_19_17_ladder;
        }
        float _1575;
        if (_1370 > 0.0)
        {
            _1575 = abs((1.0 - _1360) / _1370);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1360 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1575 = frontier_phi_28_24_ladder;
        }
        float _1871;
        if (_1373 > 0.0)
        {
            _1871 = abs((1.0 - _1364) / _1373);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1364 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1871 = frontier_phi_40_35_ladder;
        }
        float _1873 = isnan(_1575) ? _1401 : (isnan(_1401) ? _1575 : min(_1401, _1575));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1367) + _1356;
        float _1879 = (_1874 * _1370) + _1360;
        float _1880 = (_1874 * _1373) + _1364;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1881;
        float _1885 = _1881 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 > _1885) || ((_1879 < _1883) || ((_1878 < _1883) || (_1878 > _1885))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1880, cbModelParam._m0[9u].z, fma(_1879, cbModelParam._m0[9u].y, _1878 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1880, cbModelParam._m0[10u].z, fma(_1879, cbModelParam._m0[10u].y, _1878 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1880, cbModelParam._m0[11u].z, fma(_1879, cbModelParam._m0[11u].y, _1878 * cbModelParam._m0[11u].x))), _1307);
            frontier_phi_18_40_ladder = _2025.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2025.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2025.x * cbModelParam._m0[1u].y;
        }
        _1389 = frontier_phi_18_40_ladder_2;
        _1391 = frontier_phi_18_40_ladder_1;
        _1393 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_465, _466, _467), _1307);
        _1389 = _1377.x * cbModelParam._m0[1u].y;
        _1391 = _1377.y * cbModelParam._m0[1u].y;
        _1393 = _1377.z * cbModelParam._m0[1u].y;
    }
    float _1397 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _292);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1397 : min(cbModelParam._m0[25u].w, _1397));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1455 = fma(_526, cbModelParam._m0[21u].z, fma(_522, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _518)) + cbModelParam._m0[21u].w;
        float _1459 = fma(_526, cbModelParam._m0[22u].z, fma(_522, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _518)) + cbModelParam._m0[22u].w;
        float _1463 = fma(_526, cbModelParam._m0[23u].z, fma(_522, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _518)) + cbModelParam._m0[23u].w;
        float _1466 = fma(_467, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465));
        float _1469 = fma(_467, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465));
        float _1472 = fma(_467, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465));
        float _1580;
        if (_1466 > 0.0)
        {
            _1580 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1580 = frontier_phi_30_26_ladder;
        }
        float _1898;
        if (_1469 > 0.0)
        {
            _1898 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1898 = frontier_phi_42_37_ladder;
        }
        float _2225;
        if (_1472 > 0.0)
        {
            _2225 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2225 = frontier_phi_52_49_ladder;
        }
        float _2227 = isnan(_1898) ? _1580 : (isnan(_1580) ? _1898 : min(_1580, _1898));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1466) + _1455;
        float _2233 = (_2228 * _1469) + _1459;
        float _2234 = (_2228 * _1472) + _1463;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2235;
        float _2238 = _2235 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2234 > _2238) || ((_2234 < _2236) || ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 < _2236) || (_2232 > _2238))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2234, cbModelParam._m0[17u].z, fma(_2233, cbModelParam._m0[17u].y, _2232 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2234, cbModelParam._m0[18u].z, fma(_2233, cbModelParam._m0[18u].y, _2232 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2234, cbModelParam._m0[19u].z, fma(_2233, cbModelParam._m0[19u].y, _2232 * cbModelParam._m0[19u].x))), _1398);
            frontier_phi_27_52_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1491 = frontier_phi_27_52_ladder_2;
        _1493 = frontier_phi_27_52_ladder_1;
        _1495 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_465, _466, _467), _1398);
        _1491 = _1475.x * cbModelParam._m0[1u].z;
        _1493 = _1475.y * cbModelParam._m0[1u].z;
        _1495 = _1475.z * cbModelParam._m0[1u].z;
    }
    float _1507 = ((((1.0 - _486) * ((_473 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_486 * _473)) * _457;
    float _1508 = _1507 * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1509 = _1507 * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1510 = _1507 * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, _1508 * cbSceneParam._m0[91u].x));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1562 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1567 = _1554 / _1566;
    float _1568 = _1558 / _1566;
    float _1569 = _1562 / _1566;
    float _1716;
    float _1717;
    float _1718;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1596 = ((uint(_1569 > cbSceneParam._m0[59u].y) + uint(_1569 > cbSceneParam._m0[59u].x)) + uint(_1569 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1597 = _1596 + 43u;
        uint _1605 = _1596 + 44u;
        uint _1613 = _1596 + 45u;
        uint _1621 = _1596 + 46u;
        float _1632 = fma(_1566, cbSceneParam._m0[_1597].w, fma(_1562, cbSceneParam._m0[_1597].z, fma(_1558, cbSceneParam._m0[_1597].y, _1554 * cbSceneParam._m0[_1597].x)));
        float _1636 = fma(_1566, cbSceneParam._m0[_1605].w, fma(_1562, cbSceneParam._m0[_1605].z, fma(_1558, cbSceneParam._m0[_1605].y, _1554 * cbSceneParam._m0[_1605].x)));
        float _1644 = fma(_1566, cbSceneParam._m0[_1621].w, fma(_1562, cbSceneParam._m0[_1621].z, fma(_1558, cbSceneParam._m0[_1621].y, _1554 * cbSceneParam._m0[_1621].x)));
        float _1649 = cbSceneParam._m0[33u].z * _1644;
        float _1651 = cbSceneParam._m0[33u].w * _1644;
        float _1654 = fma(_1566, cbSceneParam._m0[_1613].w, fma(_1562, cbSceneParam._m0[_1613].z, fma(_1558, cbSceneParam._m0[_1613].y, _1554 * cbSceneParam._m0[_1613].x))) / _1644;
        float _1702 = (cbSceneParam._m0[33u].x - sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569))) * cbSceneParam._m0[33u].y;
        float _4002 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1709 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1649 + _1632) / _1644, (_1651 + _1636) / _1644), _1654), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 + _1632) / _1644, (_1636 - _1649) / _1644), _1654), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1632 - _1649) / _1644, (_1636 - _1651) / _1644), _1654), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1632 - _1651) / _1644, (_1649 + _1636) / _1644), _1654), 0.0)).x), vec4(0.25)));
        _1716 = 1.0 - (_1709 * cbSceneParam._m0[34u].x);
        _1717 = 1.0 - (_1709 * cbSceneParam._m0[34u].y);
        _1718 = 1.0 - (_1709 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1716 = 1.0;
        _1717 = 1.0;
        _1718 = 1.0;
    }
    float _1782;
    float _1784;
    float _1786;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1770 = fma(_1566, cbSceneParam._m0[63u].w, fma(_1562, cbSceneParam._m0[63u].z, fma(_1558, cbSceneParam._m0[63u].y, _1554 * cbSceneParam._m0[63u].x)));
        float _1771 = fma(_1566, cbSceneParam._m0[60u].w, fma(_1562, cbSceneParam._m0[60u].z, fma(_1558, cbSceneParam._m0[60u].y, _1554 * cbSceneParam._m0[60u].x))) / _1770;
        float _1772 = fma(_1566, cbSceneParam._m0[61u].w, fma(_1562, cbSceneParam._m0[61u].z, fma(_1558, cbSceneParam._m0[61u].y, _1554 * cbSceneParam._m0[61u].x))) / _1770;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1771 >= cbSceneParam._m0[64u].x) && (_1772 >= cbSceneParam._m0[64u].y)) && (_1771 <= cbSceneParam._m0[64u].z)) && (_1772 <= cbSceneParam._m0[64u].w))
        {
            float _1911 = fma(_1566, cbSceneParam._m0[62u].w, fma(_1562, cbSceneParam._m0[62u].z, fma(_1558, cbSceneParam._m0[62u].y, _1554 * cbSceneParam._m0[62u].x))) / _1770;
            float _1915 = isnan(cbSceneParam._m0[41u].w) ? _1911 : (isnan(_1911) ? cbSceneParam._m0[41u].w : max(_1911, cbSceneParam._m0[41u].w));
            float _1958 = (cbSceneParam._m0[33u].x - sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569))) * cbSceneParam._m0[33u].y;
            float _4018 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
            float _1965 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1771, cbSceneParam._m0[33u].w + _1772), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1771, _1772 - cbSceneParam._m0[33u].z), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1771 - cbSceneParam._m0[33u].z, _1772 - cbSceneParam._m0[33u].w), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1771 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1772), _1915), 0.0)).x), vec4(0.25)));
            float _1969 = 1.0 - (_1965 * cbSceneParam._m0[34u].x);
            float _1970 = 1.0 - (_1965 * cbSceneParam._m0[34u].y);
            float _1971 = 1.0 - (_1965 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1970) ? _1717 : (isnan(_1717) ? _1970 : min(_1717, _1970));
            frontier_phi_39_38_ladder_1 = isnan(_1969) ? _1716 : (isnan(_1716) ? _1969 : min(_1716, _1969));
            frontier_phi_39_38_ladder_2 = isnan(_1971) ? _1718 : (isnan(_1718) ? _1971 : min(_1718, _1971));
        }
        else
        {
            frontier_phi_39_38_ladder = _1717;
            frontier_phi_39_38_ladder_1 = _1716;
            frontier_phi_39_38_ladder_2 = _1718;
        }
        _1782 = frontier_phi_39_38_ladder_1;
        _1784 = frontier_phi_39_38_ladder;
        _1786 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1782 = _1716;
        _1784 = _1717;
        _1786 = _1718;
    }
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1801 = _457 + (-1.0);
    float _1806 = (cbLight._m0[_1794].x * _1801) + 1.0;
    float _1807 = (cbLight._m0[_1794].y * _1801) + 1.0;
    float _1808 = (cbLight._m0[_1794].z * _1801) + 1.0;
    float _1809 = (cbLight._m0[_1794].w * _1801) + 1.0;
    uint _1810 = _1793 + 5u;
    float _1816 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1820 = _1793 + 4u;
    float _1830 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1834 = _1793 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_289, _290, _291));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_289, _290, _291));
    float _4054 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _4065 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1810].x * _1816) * _1855) + (((cbLight._m0[_1820].x * _1782) * _1830) * _1853);
    float _1863 = ((_1816 * cbLight._m0[_1810].y) * _1855) + (((cbLight._m0[_1820].y * _1784) * _1830) * _1853);
    float _1864 = ((_1816 * cbLight._m0[_1810].z) * _1855) + (((cbLight._m0[_1820].z * _1786) * _1830) * _1853);
    uvec4 _1868 = floatBitsToUint(cbLight._m0[_1793 + 12u]);
    bool _1870 = _1868.x == 0u;
    float _1972;
    float _1974;
    float _1976;
    if (_1870)
    {
        _1972 = _1862;
        _1974 = _1863;
        _1976 = _1864;
    }
    else
    {
        uint _1980 = _1793 + 6u;
        float _1996 = (dot(vec3(cbLight._m0[_1793 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _4076 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1999 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1972 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1862;
        _1974 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1863;
        _1976 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1864;
    }
    bool _1979 = _1868.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1979)
    {
        _2034 = _1972;
        _2036 = _1974;
        _2038 = _1976;
    }
    else
    {
        uint _2196 = _1793 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1793 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4092 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2215 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2034 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1972;
        _2036 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1974;
        _2038 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1976;
    }
    uint _2041 = _1793 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _292) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1793].x + _371;
    float _2057 = cbLight._m0[_1793].y + _372;
    float _2058 = cbLight._m0[_1793].z + _373;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1793].xyz));
    float _4108 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2070 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2071 = dot(vec3(_289, _290, _291), vec3(_2063, _2064, _2065));
    float _4130 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_2063, _2064, _2065));
    float _4141 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2095 = 1.0 - _2055;
    float _2106 = (0.5 / (((_2070 * ((_2069 * _2095) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2095) + _2055) * _2069))) * _2069;
    float _4152 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2122 = _1793 + 9u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _292) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1834].x + _371;
    float _2136 = cbLight._m0[_1834].y + _372;
    float _2137 = cbLight._m0[_1834].z + _373;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1834].xyz));
    float _4163 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2149 = dot(vec3(_289, _290, _291), vec3(_2142, _2143, _2144));
    float _4174 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2142, _2143, _2144));
    float _4185 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2134 * _2134;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2171 = 1.0 - _2134;
    float _2181 = (0.5 / (((_2070 * ((_2148 * _2171) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2171) + _2134) * _2148))) * _2148;
    float _4196 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    float _2193 = (((_2170 * cbLight._m0[_2122].x) * _2183) * _1816) + ((((cbLight._m0[_2041].x * _1782) * _2094) * _2108) * _1830);
    float _2194 = (((_2170 * cbLight._m0[_2122].y) * _2183) * _1816) + ((((cbLight._m0[_2041].y * _1784) * _2094) * _2108) * _1830);
    float _2195 = (((_2170 * cbLight._m0[_2122].z) * _2183) * _1816) + ((((cbLight._m0[_2041].z * _1786) * _2094) * _2108) * _1830);
    float _2251;
    float _2253;
    float _2255;
    if (_1870)
    {
        _2251 = _2193;
        _2253 = _2194;
        _2255 = _2195;
    }
    else
    {
        uint _2257 = _1793 + 2u;
        uint _2261 = _1793 + 10u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _292) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _371;
        float _2278 = cbLight._m0[_2257].y + _372;
        float _2279 = cbLight._m0[_2257].z + _373;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2257].xyz));
        float _4207 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2291 = dot(vec3(_289, _290, _291), vec3(_2284, _2285, _2286));
        float _4218 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4229 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2313 = 1.0 - _2276;
        float _2323 = (0.5 / (((_2070 * ((_2290 * _2313) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2313) + _2276) * _2290))) * _2290;
        float _4240 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2251 = (((_2312 * cbLight._m0[_2261].x) * _2325) * _2326) + _2193;
        _2253 = (((_2312 * cbLight._m0[_2261].y) * _2325) * _2326) + _2194;
        _2255 = (((_2312 * cbLight._m0[_2261].z) * _2325) * _2326) + _2195;
    }
    float _2357;
    float _2359;
    float _2361;
    if (_1979)
    {
        _2357 = _2251;
        _2359 = _2253;
        _2361 = _2255;
    }
    else
    {
        uint _2368 = _1793 + 3u;
        uint _2372 = _1793 + 11u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _292) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _371;
        float _2389 = cbLight._m0[_2368].y + _372;
        float _2390 = cbLight._m0[_2368].z + _373;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2368].xyz));
        float _4256 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2402 = dot(vec3(_289, _290, _291), vec3(_2395, _2396, _2397));
        float _4267 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4278 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2423 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2424 = 1.0 - _2387;
        float _2434 = (0.5 / (((_2070 * ((_2401 * _2424) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2424) + _2387) * _2401))) * _2401;
        float _4289 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2357 = (((_2423 * cbLight._m0[_2372].x) * _2436) * _2437) + _2251;
        _2359 = (((_2423 * cbLight._m0[_2372].y) * _2436) * _2437) + _2253;
        _2361 = (((_2423 * cbLight._m0[_2372].z) * _2436) * _2437) + _2255;
    }
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_1791.y == 0u)
    {
        uvec4 _2458 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2459 = _2458.x;
        uint _2470 = uint((float(_2458.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2459))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2459)));
        float _2480 = (log2(_1569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2481 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        uint _2484 = uint(isnan(14.0) ? _2481 : (isnan(_2481) ? 14.0 : min(_2481, 14.0)));
        uvec4 _2489 = texelFetch(g_lightClusterGridBuffer, int(((_2484 << 2u) + (_2470 << 6u)) >> 2u));
        uint _2490 = _2489.x;
        uint _2491 = _2458.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2491 >> 4u) & 15u)) + 4294967295u) & _2490) == 0u) || ((_2491 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            uint _2727 = 0u;
            uint _2736;
            bool _2737;
            for (;;)
            {
                _2736 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                _2737 = _2736 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2737)
                {
                    frontier_phi_73_pred = _2726;
                    frontier_phi_73_pred_1 = _2725;
                    frontier_phi_73_pred_2 = _2724;
                    frontier_phi_73_pred_3 = _2723;
                    frontier_phi_73_pred_4 = _2722;
                    frontier_phi_73_pred_5 = _2721;
                }
                else
                {
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    uint _2872;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2736;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    for (;;)
                    {
                        uint _2876 = uint(findLSB(_2872)) + (_2727 << 5u);
                        uint _2873 = (_2872 + 4294967295u) & _2872;
                        uint _2878 = _2876 * 48u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2898 = (_2876 * 48u) + 4u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2917 = (_2876 * 48u) + 8u;
                        vec3 _2928 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x));
                        float _2932 = _2892.x - _1567;
                        float _2933 = _2892.y - _1568;
                        float _2934 = _2892.z - _1569;
                        float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                        float _2938 = inversesqrt(_2935);
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2942 = dot(vec3(_413, _416, _419), vec3(_2939, _2940, _2941));
                        float _2947 = 1.0 - (_2935 * _2892.w);
                        float _4315 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _2949 = sqrt(_2935) * _2911.w;
                        float _2952 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2942) + _2953;
                        float _2959 = _2949 * _2949;
                        float _2963 = ((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2948) / ((_2959 * 0.699999988079071044921875) + 1.0);
                        float _2967 = (-0.0) - _1567;
                        float _2968 = (-0.0) - _1568;
                        float _2969 = (-0.0) - _1569;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2983 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _473;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2974 + _2939;
                        float _2995 = _2975 + _2940;
                        float _2996 = _2976 + _2941;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_413, _416, _419), vec3(_2974, _2975, _2976));
                        float _4331 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3008 = dot(vec3(_413, _416, _419), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4342 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2952 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2942) + _3017;
                        float _4353 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4364 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3015 * _3015) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125))) * _2948;
                        _2796 = (_2963 * _2911.x) + _2869;
                        _2797 = (_2963 * _2911.y) + _2870;
                        _2798 = (_2963 * _2911.z) + _2871;
                        _2793 = (_3043 * _2928.x) + _2866;
                        _2794 = (_3043 * _2928.y) + _2867;
                        _2795 = (_3043 * _2928.z) + _2868;
                        if (_2873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2873;
                        }
                    }
                    frontier_phi_73_pred = _2798;
                    frontier_phi_73_pred_1 = _2797;
                    frontier_phi_73_pred_2 = _2796;
                    frontier_phi_73_pred_3 = _2795;
                    frontier_phi_73_pred_4 = _2794;
                    frontier_phi_73_pred_5 = _2793;
                }
                _2580 = frontier_phi_73_pred;
                _2578 = frontier_phi_73_pred_1;
                _2576 = frontier_phi_73_pred_2;
                _2574 = frontier_phi_73_pred_3;
                _2572 = frontier_phi_73_pred_4;
                _2570 = frontier_phi_73_pred_5;
                uint _2728 = _2727 + 1u;
                if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2721 = _2570;
                    _2722 = _2572;
                    _2723 = _2574;
                    _2724 = _2576;
                    _2725 = _2578;
                    _2726 = _2580;
                    _2727 = _2728;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((4294967295u << _2586) & _2490) == 0u)
        {
            _2689 = _2569;
            _2691 = _2571;
            _2693 = _2573;
            _2695 = _2575;
            _2697 = _2577;
            _2699 = _2579;
        }
        else
        {
            float _2714 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
            float _2715 = _2714 * _1567;
            float _2716 = _2714 * _1568;
            float _2717 = _2714 * _1569;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2849 = _2569;
                float _2850 = _2571;
                float _2851 = _2573;
                float _2852 = _2575;
                float _2853 = _2577;
                float _2854 = _2579;
                uint _2855 = _2586;
                uint _2864;
                bool _2865;
                for (;;)
                {
                    _2864 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                    _2865 = _2864 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2865)
                    {
                        frontier_phi_84_pred = _2853;
                        frontier_phi_84_pred_1 = _2852;
                        frontier_phi_84_pred_2 = _2851;
                        frontier_phi_84_pred_3 = _2850;
                        frontier_phi_84_pred_4 = _2849;
                        frontier_phi_84_pred_5 = _2854;
                    }
                    else
                    {
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3070 = _2849;
                        float _3071 = _2850;
                        float _3072 = _2851;
                        float _3073 = _2852;
                        float _3074 = _2853;
                        float _3075 = _2854;
                        uint _3076 = _2864;
                        uint _3077;
                        vec4 _3102;
                        float _3103;
                        vec4 _3118;
                        vec3 _3130;
                        vec4 _3146;
                        vec4 _3162;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3087 = ((_2855 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3076));
                            _3077 = (_3076 + 4294967295u) & _3076;
                            uint _3089 = _3087 * 40u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            _3103 = _3102.w;
                            uint _3105 = (_3087 * 40u) + 4u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3087 * 40u) + 8u;
                            _3130 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x));
                            uint _3133 = (_3087 * 40u) + 16u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3149 = (_3087 * 40u) + 20u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3087 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3087 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_1569, _3197.z, fma(_1568, _3197.y, _3197.x * _1567)) + _3197.w;
                            _3210 = !((fma(_1569, _3178.z, fma(_1568, _3178.y, _3178.x * _1567)) + _3178.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3102.x - _1567;
                                float _3238 = _3102.y - _1568;
                                float _3239 = _3102.z - _1569;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3103 * _3103));
                                float _4375 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3255 = sqrt(_3240) * _3118.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_413, _416, _419))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_1569, _3146.z, fma(_1568, _3146.y, _3146.x * _1567)) + _3146.w) / _3209;
                                float _3269 = (fma(_1569, _3162.z, fma(_1568, _3162.y, _3162.x * _1567)) + _3162.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4391 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _473;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2715;
                                float _3299 = _3245 - _2716;
                                float _3300 = _3246 - _2717;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2715, (-0.0) - _2716, (-0.0) - _2717));
                                float _4402 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3312 = dot(vec3(_413, _416, _419), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4413 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_413, _416, _419), vec3(_3244, _3245, _3246))) + _3321;
                                float _4424 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4435 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3275 * _3118.y;
                                frontier_phi_90_pred_1 = _3275 * _3118.x;
                                frontier_phi_90_pred_2 = _3349 * _3130.z;
                                frontier_phi_90_pred_3 = _3349 * _3130.y;
                                frontier_phi_90_pred_4 = _3349 * _3130.x;
                                frontier_phi_90_pred_5 = _3275 * _3118.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3357 = frontier_phi_90_pred;
                            _3356 = frontier_phi_90_pred_1;
                            _3355 = frontier_phi_90_pred_2;
                            _3354 = frontier_phi_90_pred_3;
                            _3353 = frontier_phi_90_pred_4;
                            _3358 = frontier_phi_90_pred_5;
                            _3060 = _3356 + _3073;
                            _3061 = _3357 + _3074;
                            _3062 = _3358 + _3075;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            if (_3077 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3077;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3061;
                        frontier_phi_84_pred_1 = _3060;
                        frontier_phi_84_pred_2 = _3059;
                        frontier_phi_84_pred_3 = _3058;
                        frontier_phi_84_pred_4 = _3057;
                        frontier_phi_84_pred_5 = _3062;
                    }
                    _2698 = frontier_phi_84_pred;
                    _2696 = frontier_phi_84_pred_1;
                    _2694 = frontier_phi_84_pred_2;
                    _2692 = frontier_phi_84_pred_3;
                    _2690 = frontier_phi_84_pred_4;
                    _2700 = frontier_phi_84_pred_5;
                    uint _2856 = _2855 + 1u;
                    if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2849 = _2690;
                        _2850 = _2692;
                        _2851 = _2694;
                        _2852 = _2696;
                        _2853 = _2698;
                        _2854 = _2700;
                        _2855 = _2856;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2700;
                frontier_phi_65_66_ladder_1 = _2696;
                frontier_phi_65_66_ladder_2 = _2698;
                frontier_phi_65_66_ladder_3 = _2692;
                frontier_phi_65_66_ladder_4 = _2690;
                frontier_phi_65_66_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_65_66_ladder = _2579;
                frontier_phi_65_66_ladder_1 = _2575;
                frontier_phi_65_66_ladder_2 = _2577;
                frontier_phi_65_66_ladder_3 = _2571;
                frontier_phi_65_66_ladder_4 = _2569;
                frontier_phi_65_66_ladder_5 = _2573;
            }
            _2689 = frontier_phi_65_66_ladder_4;
            _2691 = frontier_phi_65_66_ladder_3;
            _2693 = frontier_phi_65_66_ladder_5;
            _2695 = frontier_phi_65_66_ladder_1;
            _2697 = frontier_phi_65_66_ladder_2;
            _2699 = frontier_phi_65_66_ladder;
        }
        float _2704 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _2502 = (_2704 * _2695) + _2034;
        _2504 = (_2704 * _2697) + _2036;
        _2506 = (_2704 * _2699) + _2038;
        _2508 = ((_2689 * 0.039999999105930328369140625) * _2704) + _2357;
        _2510 = ((_2691 * 0.039999999105930328369140625) * _2704) + _2359;
        _2512 = ((_2693 * 0.039999999105930328369140625) * _2704) + _2361;
    }
    else
    {
        _2502 = _2034;
        _2504 = _2036;
        _2506 = _2038;
        _2508 = _2357;
        _2510 = _2359;
        _2512 = _2361;
    }
    float _4451 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4462 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4473 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _2529 = ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2502 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _457))) + ((_2508 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1296)) * cbPerFrame._m0[3u].x);
    float _2530 = ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2504 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _457))) + ((_2510 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1296)) * cbPerFrame._m0[3u].x);
    float _2531 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2506 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _457))) + ((_2512 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1296)) * cbPerFrame._m0[3u].x);
    uint _2532 = _432 + 6u;
    float _2540 = _392 / cbSceneParam._m0[86u].x;
    float _2541 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2555 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2557 = _2555.x;
    float _2558 = _2555.y;
    float _2559 = _2555.z;
    float _2560 = _2555.w;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2594 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2595 = _2594 / _311;
        float _2606 = _2595 * _364;
        float _2607 = _365 * _2595;
        float _2608 = (-0.0) - _2607;
        float _2609 = _2595 * _366;
        float _2611 = (cbSceneParam._m0[77u].w * _2608) / _2594;
        float _2612 = _2611 + cbSceneParam._m0[79u].w;
        float _2613 = cbSceneParam._m0[79u].w - _2607;
        float _2619 = sqrt(((_2606 * _2606) + (_2607 * _2607)) + (_2609 * _2609));
        float _2622 = (1.0 - (cbSceneParam._m0[77u].w / _2594)) * _2619;
        float _2627 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2629 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2806;
        if (abs((_2608 - _2611) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2806 = ((((_2612 > 0.0) ? exp2(_2627 * _2612) : (2.0 - exp2(_2629 * _2612))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2622;
        }
        else
        {
            float _2750 = 1.0 / cbSceneParam._m0[80u].x;
            float _2751 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : max(_2612, _2613));
            float _2752 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : min(_2612, _2613));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            _2806 = ((abs(_2619 / _2608) * cbSceneParam._m0[80u].y) * ((((_2761 - _2762) * 2.0) - ((exp2(_2627 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)))) - exp2(_2627 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))))) * _2750)) - ((exp2(_2629 * _2761) - exp2(_2629 * _2762)) * _2750))) + (_2622 * cbSceneParam._m0[80u].z);
        }
        vec4 _2808 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, 1.0), 0.0);
        float _2817 = exp2((_2806 * (-1.44269502162933349609375)) * (1.0 - _2808.w));
        float _2818 = log2(_2817);
        float _2834 = log2(_2560);
        _2631 = (exp2(_2834 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].x)) * _2808.x) / cbSceneParam._m0[78u].x)) + _2557;
        _2633 = (exp2(_2834 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].y)) * _2808.y) / cbSceneParam._m0[78u].y)) + _2558;
        _2635 = (exp2(_2834 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].z)) * _2808.z) / cbSceneParam._m0[78u].z)) + _2559;
        _2637 = _2817 * _2560;
    }
    else
    {
        _2631 = _2557;
        _2633 = _2558;
        _2635 = _2559;
        _2637 = _2560;
    }
    bool _2844;
    vec4 _2647;
    vec4 _2669;
    float _2671;
    float _2675;
    float _2676;
    float _2677;
    float _2678;
    bool _2688;
    for (;;)
    {
        _2647 = cbMatDynParam._m0[0u];
        float _2649 = roundEven(_2647.y);
        bool _2650 = _2649 == 3.0;
        float _2651 = log2(_2637);
        float _2658 = exp2(_2651 * cbSceneParam._m0[78u].x) * _2529;
        float _2659 = exp2(_2651 * cbSceneParam._m0[78u].y) * _2530;
        float _2660 = exp2(_2651 * cbSceneParam._m0[78u].z) * _2531;
        float _2667 = _380 + (-0.5);
        _2669 = cbMtdParam._m0[1u];
        _2671 = _2669.y * _2667;
        float _2674 = (_2649 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2675 = _2674 * (_2650 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2631)));
        _2676 = _2674 * (_2650 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2633)));
        _2677 = _2674 * (_2650 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2635)));
        _2678 = _2667 * 0.999000012874603271484375;
        _2688 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2688)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2678) < 0.5)
            {
                _2844 = true;
                break;
            }
        }
        uint _2785 = _433 + uint(_2647.w);
        if ((cbInstanceData._m0[_2785].w < 1.0) && ((cbInstanceData._m0[_2785].w + _2678) < 0.5))
        {
            _2844 = true;
            break;
        }
        if ((_2671 + 1.0) < _2669.x)
        {
            _2844 = true;
            break;
        }
        _2844 = false;
        break;
    }
    float _3048;
    if (_2844)
    {
        discard_state = true;
        _3048 = 0.0;
    }
    else
    {
        _3048 = cbInstanceData._m0[_2532].w;
    }
    SV_Target.x = _2675;
    SV_Target.y = _2676;
    SV_Target.z = _2677;
    SV_Target.w = _3048;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2532].w;
    discard_exit();
}


