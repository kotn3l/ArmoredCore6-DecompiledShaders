#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1107;
float _3520;
float _3521;
float _3522;
float _3523;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _252.x;
    float _256 = _252.y;
    float _257 = _252.z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _302 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3532 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _312 = ((_289.z - _257) * _303) + _257;
    float _316 = ((((_289.x - _255) * _303) + _255) * 2.0) + (-1.0);
    float _318 = ((((_289.y - _256) * _303) + _256) * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3543 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))));
    float _327 = fma(_324, _236, fma(_318, _229, _316 * _215));
    float _330 = fma(_324, _237, fma(_318, _230, _316 * _216));
    float _333 = fma(_324, _238, fma(_318, _231, _316 * _217));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    float _351 = cbMtdParam._m0[11u].z + dot(vec4(_337 * _327, _337 * _330, _337 * _333, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3554 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    vec4 _370 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _375 = _370.x * cbMtdParam._m0[9u].x;
    float _376 = _370.y * cbMtdParam._m0[9u].y;
    float _377 = _370.z * cbMtdParam._m0[9u].z;
    vec4 _396 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _410 = (((_396.x * cbMtdParam._m0[10u].x) - _375) * _303) + _375;
    float _411 = (((_396.y * cbMtdParam._m0[10u].y) - _376) * _303) + _376;
    float _412 = (((_396.z * cbMtdParam._m0[10u].z) - _377) * _303) + _377;
    vec4 _425 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _436 = ((_425.x - _410) * _352) + _410;
    float _437 = ((_425.y - _411) * _352) + _411;
    float _438 = ((_425.z - _412) * _352) + _412;
    vec4 _451 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _453 = _451.x;
    float _471 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _453) * _303) + _453;
    float _473 = _471 - (_471 * _352);
    vec4 _486 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _493 = (_486.x * 2.0) + (-1.0);
    float _494 = (_486.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_493, _494), vec2(_493, _494));
    float _3565 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _503 = ((_486.z - _312) * _352) + _312;
    float _510 = ((_493 - _316) * _352) + _316;
    float _511 = ((_494 - _318) * _352) + _318;
    float _512 = ((sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) - _324) * _352) + _324;
    float _515 = fma(_512, _236, fma(_511, _229, _510 * _215));
    float _518 = fma(_512, _237, fma(_511, _230, _510 * _216));
    float _521 = fma(_512, _238, fma(_511, _231, _510 * _217));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    float _526 = _525 * _515;
    float _527 = _525 * _518;
    float _528 = _525 * _521;
    float _3576 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _529 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3598 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3609 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3620 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _533 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _599 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _589);
    float _600 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _589);
    float _601 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _589);
    float _605 = inversesqrt(dot(vec3(_599, _600, _601), vec3(_599, _600, _601)));
    float _606 = _599 * _605;
    float _607 = _600 * _605;
    float _608 = _601 * _605;
    vec4 _613 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _615 = _613.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _787 = sqrt(((_599 * _599) + (_600 * _600)) + (_601 * _601));
        float _793 = (cbMatDynParam._m0[5u].x * _787) + cbMatDynParam._m0[5u].y;
        float _3631 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _798 = (cbMatDynParam._m0[5u].z * _787) + cbMatDynParam._m0[5u].w;
        float _3642 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) - _794)) + _794) < ((_615 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _626 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _627 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _645 = fma(_528, cbSceneParam._m0[5u].z, fma(_527, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _526));
    float _648 = fma(_528, cbSceneParam._m0[6u].z, fma(_527, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _526));
    float _651 = fma(_528, cbSceneParam._m0[7u].z, fma(_527, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _526));
    uint _664 = uint(roundEven(NORMAL.w)) * 13u;
    uint _665 = _664 + 9u;
    uint _666 = _665 + uint(cbMatDynParam._m0[0u].w);
    float _672 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_666].x;
    float _673 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_666].y;
    float _674 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_666].z;
    float _3653 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _678 = 1.0 - _533;
    float _679 = _675 * _678;
    float _680 = _676 * _678;
    float _681 = _677 * _678;
    float _686 = (_675 + (-0.039999999105930328369140625)) * _533;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _533;
    float _688 = (_677 + (-0.039999999105930328369140625)) * _533;
    float _689 = _686 + 0.039999999105930328369140625;
    float _691 = _687 + 0.039999999105930328369140625;
    float _692 = _688 + 0.039999999105930328369140625;
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _626, cbSceneParam._m0[86u].y * _627));
    float _704 = _701.x * TEXCOORD_9.w;
    float _705 = dot(vec3(_526, _527, _528), vec3(_606, _607, _608));
    float _708 = _705 * 2.0;
    float _712 = (_708 * _526) - _606;
    float _713 = (_708 * _527) - _607;
    float _714 = (_708 * _528) - _608;
    float _718 = abs(dot(vec3(_606, _607, _608), vec3(_526, _527, _528)));
    float _3686 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _720 = sqrt(_529);
    float _733 = exp2((_720 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_720 * 3.0));
    float _739 = (1.0 - _733) * ((_720 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _740 = _733 * _720;
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1106;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _831 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _835 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _839 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _864 = _768 + _526;
        float _865 = _772 + _527;
        float _866 = _776 + _528;
        float _876 = fma(_866, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864)) - _831;
        float _877 = fma(_866, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864)) - _835;
        float _878 = fma(_866, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864)) - _839;
        float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
        float _895 = ((_882 * _876) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_831 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_882 * _877) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_835 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_882 * _878) / cbModelParam._m0[34u].z) + ((((((_839 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        float _934 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_900.x + (-0.5));
        float _936 = _934 * (_900.y + (-0.5));
        float _937 = _934 * (_900.z + (-0.5));
        float _944 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_907.x + (-0.5));
        float _946 = _944 * (_907.y + (-0.5));
        float _947 = _944 * (_907.z + (-0.5));
        float _954 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_914.x + (-0.5));
        float _956 = _954 * (_914.y + (-0.5));
        float _957 = _954 * (_914.z + (-0.5));
        float _964 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_921.x + (-0.5));
        float _966 = _964 * (_921.y + (-0.5));
        float _967 = _964 * (_921.z + (-0.5));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = _935 * 0.5;
        float _972 = _945 * 0.5;
        float _973 = _955 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _988 = (dot(vec3(_526, _527, _528), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _998 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3734 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1000 + 1.0))) + _1005) * _968;
        float _1015 = _936 * 0.5;
        float _1016 = _946 * 0.5;
        float _1017 = _956 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_526, _527, _528), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3767 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1042 + 1.0))) + _1047) * _969;
        float _1057 = _937 * 0.5;
        float _1058 = _947 * 0.5;
        float _1059 = _957 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_526, _527, _528), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3800 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1084 + 1.0))) + _1089) * _970;
        _1106 = _937;
        _1108 = _936;
        _1109 = _935;
        _1110 = _947;
        _1111 = _946;
        _1112 = _945;
        _1113 = _957;
        _1114 = _956;
        _1115 = _955;
        _1116 = _970;
        _1117 = _969;
        _1118 = _968;
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
    }
    else
    {
        _1106 = _1107;
        _1108 = _1107;
        _1109 = _1107;
        _1110 = _1107;
        _1111 = _1107;
        _1112 = _1107;
        _1113 = _1107;
        _1114 = _1107;
        _1115 = _1107;
        _1116 = _1107;
        _1117 = _1107;
        _1118 = _1107;
        _1119 = 0.0;
        _1120 = 0.0;
        _1121 = 0.0;
    }
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1150 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1154 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1158 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1181 = _768 + _526;
        float _1182 = _772 + _527;
        float _1183 = _776 + _528;
        float _1193 = fma(_1183, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181)) - _1150;
        float _1194 = fma(_1183, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181)) - _1154;
        float _1195 = fma(_1183, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181)) - _1158;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1150 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1154 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[35u].z) + ((((((_1158 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1249 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1216.x + (-0.5));
        float _1251 = _1249 * (_1216.y + (-0.5));
        float _1252 = _1249 * (_1216.z + (-0.5));
        float _1259 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1223.x + (-0.5));
        float _1261 = _1259 * (_1223.y + (-0.5));
        float _1262 = _1259 * (_1223.z + (-0.5));
        float _1269 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1230.x + (-0.5));
        float _1271 = _1269 * (_1230.y + (-0.5));
        float _1272 = _1269 * (_1230.z + (-0.5));
        float _1279 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1237.x + (-0.5));
        float _1281 = _1279 * (_1237.y + (-0.5));
        float _1282 = _1279 * (_1237.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_526, _527, _528), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3863 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1313 + 1.0))) + _1318) * _1283;
        float _1328 = _1251 * 0.5;
        float _1329 = _1261 * 0.5;
        float _1330 = _1271 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_526, _527, _528), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3896 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1355 + 1.0))) + _1360) * _1284;
        float _1370 = _1252 * 0.5;
        float _1371 = _1262 * 0.5;
        float _1372 = _1272 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_526, _527, _528), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3929 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1397 + 1.0))) + _1402) * _1285;
        _1419 = _1252;
        _1420 = _1251;
        _1421 = _1250;
        _1422 = _1262;
        _1423 = _1261;
        _1424 = _1260;
        _1425 = _1272;
        _1426 = _1271;
        _1427 = _1270;
        _1428 = _1285;
        _1429 = _1284;
        _1430 = _1283;
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1107;
        _1420 = _1107;
        _1421 = _1107;
        _1422 = _1107;
        _1423 = _1107;
        _1424 = _1107;
        _1425 = _1107;
        _1426 = _1107;
        _1427 = _1107;
        _1428 = _1107;
        _1429 = _1107;
        _1430 = _1107;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1119)) + _1119;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1121)) + _1121;
    float _1466 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1443));
    float _1487 = _712 * 0.5;
    float _1488 = _713 * 0.5;
    float _1489 = _714 * 0.5;
    float _1490 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1493 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1496 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1530;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1503 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1106, _1110, _1113, _1116));
        float _1507 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1511 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1109, _1112, _1115, _1118));
        float _1518 = dot(vec4(cbModelParam._m0[39u]), vec4(_1487, _1488, _1489, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1541;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1532 = dot(vec4(cbModelParam._m0[40u]), vec4(_1487, _1488, _1489, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1545 = (_1541 * cbModelParam._m0[1u].x) + (_1530 * (1.0 - cbModelParam._m0[1u].x));
    float _1555 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _529);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1555 : min(cbModelParam._m0[25u].z, _1555));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1605 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1609 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1613 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1616 = fma(_714, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712));
        float _1619 = fma(_714, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712));
        float _1622 = fma(_714, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712));
        float _1650;
        if (_1616 > 0.0)
        {
            _1650 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1650 = frontier_phi_19_17_ladder;
        }
        float _1877;
        if (_1619 > 0.0)
        {
            _1877 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1877 = frontier_phi_28_24_ladder;
        }
        float _2134;
        if (_1622 > 0.0)
        {
            _2134 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2134 = frontier_phi_40_35_ladder;
        }
        float _2136 = isnan(_1877) ? _1650 : (isnan(_1650) ? _1877 : min(_1650, _1877));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1616) + _1605;
        float _2142 = (_2137 * _1619) + _1609;
        float _2143 = (_2137 * _1622) + _1613;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2144;
        float _2148 = _2144 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 > _2148) || ((_2142 < _2146) || ((_2141 < _2146) || (_2141 > _2148))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2143, cbModelParam._m0[9u].z, fma(_2142, cbModelParam._m0[9u].y, _2141 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2143, cbModelParam._m0[10u].z, fma(_2142, cbModelParam._m0[10u].y, _2141 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2143, cbModelParam._m0[11u].z, fma(_2142, cbModelParam._m0[11u].y, _2141 * cbModelParam._m0[11u].x))), _1556);
            frontier_phi_18_40_ladder = _2271.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2271.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2271.x * cbModelParam._m0[1u].y;
        }
        _1638 = frontier_phi_18_40_ladder_2;
        _1640 = frontier_phi_18_40_ladder_1;
        _1642 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_712, _713, _714), _1556);
        _1638 = _1626.x * cbModelParam._m0[1u].y;
        _1640 = _1626.y * cbModelParam._m0[1u].y;
        _1642 = _1626.z * cbModelParam._m0[1u].y;
    }
    float _1646 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _529);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1646 : min(cbModelParam._m0[25u].w, _1646));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_714, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712));
        float _1718 = fma(_714, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712));
        float _1721 = fma(_714, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712));
        float _1882;
        if (_1715 > 0.0)
        {
            _1882 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1882 = frontier_phi_30_26_ladder;
        }
        float _2161;
        if (_1718 > 0.0)
        {
            _2161 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2161 = frontier_phi_42_37_ladder;
        }
        float _2374;
        if (_1721 > 0.0)
        {
            _2374 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2374 = frontier_phi_51_48_ladder;
        }
        float _2376 = isnan(_2161) ? _1882 : (isnan(_1882) ? _2161 : min(_1882, _2161));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1715) + _1704;
        float _2382 = (_2377 * _1718) + _1708;
        float _2383 = (_2377 * _1721) + _1712;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2384;
        float _2387 = _2384 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2383 > _2387) || ((_2383 < _2385) || ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 < _2385) || (_2381 > _2387))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2383, cbModelParam._m0[17u].z, fma(_2382, cbModelParam._m0[17u].y, _2381 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2383, cbModelParam._m0[18u].z, fma(_2382, cbModelParam._m0[18u].y, _2381 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2383, cbModelParam._m0[19u].z, fma(_2382, cbModelParam._m0[19u].y, _2381 * cbModelParam._m0[19u].x))), _1647);
            frontier_phi_27_51_ladder = _2581.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2581.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2581.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_27_51_ladder_2;
        _1742 = frontier_phi_27_51_ladder_1;
        _1744 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_712, _713, _714), _1647);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1757 = (((_739 * _689) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1740 - _1638)) + _1638);
    float _1759 = (((_739 * _691) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1742 - _1640)) + _1640);
    float _1761 = (((_739 * _692) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1744 - _1642)) + _1642);
    float _1764 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    vec4 _1778 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_626, _627));
    float _1780 = _1778.w;
    float _1792 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1780);
    float _1793 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1780);
    float _1794 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1780);
    uvec4 _1798 = floatBitsToUint(cbInstanceData._m0[_664 + 5u]);
    uint _1800 = _1798.x * 14u;
    uint _1801 = _1800 + 13u;
    float _1808 = _704 + (-1.0);
    float _1813 = (cbLight._m0[_1801].x * _1808) + 1.0;
    float _1814 = (cbLight._m0[_1801].y * _1808) + 1.0;
    float _1815 = (cbLight._m0[_1801].z * _1808) + 1.0;
    float _1816 = (cbLight._m0[_1801].w * _1808) + 1.0;
    uint _1817 = _1800 + 5u;
    float _1823 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1827 = _1800 + 4u;
    float _1836 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
    uint _1840 = _1800 | 1u;
    float _1851 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_526, _527, _528));
    float _1854 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_526, _527, _528));
    float _4065 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _4076 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1859 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1861 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1868 = ((cbLight._m0[_1817].x * _1823) * _1861) + (((cbLight._m0[_1827].x * _1792) * _1836) * _1859);
    float _1869 = ((_1823 * cbLight._m0[_1817].y) * _1861) + (((cbLight._m0[_1827].y * _1793) * _1836) * _1859);
    float _1870 = ((_1823 * cbLight._m0[_1817].z) * _1861) + (((cbLight._m0[_1827].z * _1794) * _1836) * _1859);
    uvec4 _1874 = floatBitsToUint(cbLight._m0[_1800 + 12u]);
    bool _1876 = _1874.x == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1876)
    {
        _1887 = _1868;
        _1889 = _1869;
        _1891 = _1870;
    }
    else
    {
        uint _1895 = _1800 + 6u;
        float _1911 = (dot(vec3(cbLight._m0[_1800 + 2u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _4087 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1914 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _1887 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1868;
        _1889 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1869;
        _1891 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1870;
    }
    bool _1894 = _1874.y == 0u;
    float _1932;
    float _1934;
    float _1936;
    if (_1894)
    {
        _1932 = _1887;
        _1934 = _1889;
        _1936 = _1891;
    }
    else
    {
        uint _2105 = _1800 + 7u;
        float _2121 = (dot(vec3(cbLight._m0[_1800 + 3u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4103 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2124 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1932 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _1887;
        _1934 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _1889;
        _1936 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _1891;
    }
    uint _1939 = _1800 + 8u;
    float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _529) * 0.949999988079071044921875);
    float _1953 = _1952 * _1952;
    float _1954 = cbLight._m0[_1800].x + _606;
    float _1955 = cbLight._m0[_1800].y + _607;
    float _1956 = cbLight._m0[_1800].z + _608;
    float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
    float _1961 = _1960 * _1954;
    float _1962 = _1960 * _1955;
    float _1963 = _1960 * _1956;
    float _1964 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1800].xyz));
    float _4119 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _1968 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1969 = dot(vec3(_526, _527, _528), vec3(_1961, _1962, _1963));
    float _4141 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _1973 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_1961, _1962, _1963));
    float _4152 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1977 = _1953 * _1953;
    float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
    float _1989 = exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0);
    float _1990 = 0.959999978542327880859375 - _686;
    float _1992 = 0.959999978542327880859375 - _687;
    float _1993 = 0.959999978542327880859375 - _688;
    float _2000 = 1.0 - _1953;
    float _2011 = (0.5 / (((_1968 * ((_1967 * _2000) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2000) + _1953) * _1967))) * _1967;
    float _4163 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
    uint _2027 = _1800 + 9u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _529) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1840].x + _606;
    float _2041 = cbLight._m0[_1840].y + _607;
    float _2042 = cbLight._m0[_1840].z + _608;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1840].xyz));
    float _4174 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2054 = dot(vec3(_526, _527, _528), vec3(_2047, _2048, _2049));
    float _4185 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2047, _2048, _2049));
    float _4196 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2039 * _2039;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2073 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
    float _2080 = 1.0 - _2039;
    float _2090 = (0.5 / (((_1968 * ((_2053 * _2080) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2080) + _2039) * _2053))) * _2053;
    float _4207 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    float _2102 = (((((_2073 * _1990) + _689) * cbLight._m0[_2027].x) * _2092) * _1823) + ((((cbLight._m0[_1939].x * _1792) * ((_1989 * _1990) + _689)) * _2013) * _1836);
    float _2103 = (((((_2073 * _1992) + _691) * cbLight._m0[_2027].y) * _2092) * _1823) + ((((cbLight._m0[_1939].y * _1793) * ((_1989 * _1992) + _691)) * _2013) * _1836);
    float _2104 = (((((_2073 * _1993) + _692) * cbLight._m0[_2027].z) * _2092) * _1823) + ((((cbLight._m0[_1939].z * _1794) * ((_1989 * _1993) + _692)) * _2013) * _1836);
    float _2166;
    float _2168;
    float _2170;
    if (_1876)
    {
        _2166 = _2102;
        _2168 = _2103;
        _2170 = _2104;
    }
    else
    {
        uint _2172 = _1800 + 2u;
        uint _2176 = _1800 + 10u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _529) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _606;
        float _2193 = cbLight._m0[_2172].y + _607;
        float _2194 = cbLight._m0[_2172].z + _608;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2172].xyz));
        float _4218 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2206 = dot(vec3(_526, _527, _528), vec3(_2199, _2200, _2201));
        float _4229 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4240 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
        float _2232 = 1.0 - _2191;
        float _2242 = (0.5 / (((_1968 * ((_2205 * _2232) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2232) + _2191) * _2205))) * _2205;
        float _4251 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2244 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2245 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _2166 = (((((_2225 * _1990) + _689) * cbLight._m0[_2176].x) * _2244) * _2245) + _2102;
        _2168 = (((((_2225 * _1992) + _691) * cbLight._m0[_2176].y) * _2244) * _2245) + _2103;
        _2170 = (((((_2225 * _1993) + _692) * cbLight._m0[_2176].z) * _2244) * _2245) + _2104;
    }
    float _2280;
    float _2282;
    float _2284;
    if (_1894)
    {
        _2280 = _2166;
        _2282 = _2168;
        _2284 = _2170;
    }
    else
    {
        uint _2291 = _1800 + 3u;
        uint _2295 = _1800 + 11u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _529) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _606;
        float _2312 = cbLight._m0[_2291].y + _607;
        float _2313 = cbLight._m0[_2291].z + _608;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2291].xyz));
        float _4267 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2325 = dot(vec3(_526, _527, _528), vec3(_2318, _2319, _2320));
        float _4278 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4289 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
        float _2351 = 1.0 - _2310;
        float _2361 = (0.5 / (((_1968 * ((_2324 * _2351) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2351) + _2310) * _2324))) * _2324;
        float _4300 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2363 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2364 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2280 = (((((_2344 * _1990) + _689) * cbLight._m0[_2295].x) * _2363) * _2364) + _2166;
        _2282 = (((((_2344 * _1992) + _691) * cbLight._m0[_2295].y) * _2363) * _2364) + _2168;
        _2284 = (((((_2344 * _1993) + _692) * cbLight._m0[_2295].z) * _2363) * _2364) + _2170;
    }
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_1798.y == 0u)
    {
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2439;
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2439;
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2439;
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.x;
        uint _2466 = uint((float(_2454.y) * floor(float(uint(cbSceneParam._m0[85u].y * _627) / _2455))) + floor(float(uint(cbSceneParam._m0[85u].x * _626) / _2455)));
        float _2476 = (log2(_2442 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2477 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        uint _2480 = uint(isnan(14.0) ? _2477 : (isnan(_2477) ? 14.0 : min(_2477, 14.0)));
        uvec4 _2485 = texelFetch(g_lightClusterGridBuffer, int(((_2480 << 2u) + (_2466 << 6u)) >> 2u));
        uint _2486 = _2485.x;
        uint _2487 = _2454.z;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((((1u << ((_2487 >> 4u) & 15u)) + 4294967295u) & _2486) == 0u) || ((_2487 & 240u) == 0u))
        {
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
        }
        else
        {
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            uint _2744 = 0u;
            uint _2753;
            bool _2754;
            for (;;)
            {
                _2753 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                _2754 = _2753 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2754)
                {
                    frontier_phi_68_pred = _2740;
                    frontier_phi_68_pred_1 = _2743;
                    frontier_phi_68_pred_2 = _2742;
                    frontier_phi_68_pred_3 = _2741;
                    frontier_phi_68_pred_4 = _2739;
                    frontier_phi_68_pred_5 = _2738;
                }
                else
                {
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    uint _2889;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2753;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    for (;;)
                    {
                        uint _2893 = uint(findLSB(_2889)) + (_2744 << 5u);
                        uint _2890 = (_2889 + 4294967295u) & _2889;
                        uint _2895 = _2893 * 48u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2915 = (_2893 * 48u) + 4u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2934 = (_2893 * 48u) + 8u;
                        vec3 _2945 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x));
                        float _2949 = _2909.x - _2440;
                        float _2950 = _2909.y - _2441;
                        float _2951 = _2909.z - _2442;
                        float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                        float _2955 = inversesqrt(_2952);
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2959 = dot(vec3(_645, _648, _651), vec3(_2956, _2957, _2958));
                        float _2964 = 1.0 - (_2952 * _2909.w);
                        float _4326 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _2966 = sqrt(_2952) * _2928.w;
                        float _2969 = 1.39999997615814208984375 / (_2966 + 1.39999997615814208984375);
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2959) + _2970;
                        float _2976 = _2966 * _2966;
                        float _2980 = ((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2965) / ((_2976 * 0.699999988079071044921875) + 1.0);
                        float _2984 = (-0.0) - _2440;
                        float _2985 = (-0.0) - _2441;
                        float _2986 = (-0.0) - _2442;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _3001 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                        float _3002 = 1.0 - _720;
                        float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                        float _3010 = _3009 * _3009;
                        float _3011 = _3010 * _3010;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3022 = dot(vec3(_645, _648, _651), vec3(_2991, _2992, _2993));
                        float _4342 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3026 = dot(vec3(_645, _648, _651), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                        float _4353 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3029 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                        float _3034 = _2969 * _3010;
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _2959) + _3035;
                        float _4364 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3040 = 1.0 - _3010;
                        float _3050 = (0.5 / (((_3039 * ((_3025 * _3040) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3039 * _3040) + _3010) * _3025))) * _3039;
                        float _4375 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3061 = (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3033 * _3033) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125))) * _2965;
                        _2813 = (_2980 * _2928.x) + _2886;
                        _2814 = (_2980 * _2928.y) + _2887;
                        _2815 = (_2980 * _2928.z) + _2888;
                        _2810 = (_3061 * _2945.x) + _2883;
                        _2811 = (_3061 * _2945.y) + _2884;
                        _2812 = (_3061 * _2945.z) + _2885;
                        if (_2890 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2890;
                        }
                    }
                    frontier_phi_68_pred = _2812;
                    frontier_phi_68_pred_1 = _2815;
                    frontier_phi_68_pred_2 = _2814;
                    frontier_phi_68_pred_3 = _2813;
                    frontier_phi_68_pred_4 = _2811;
                    frontier_phi_68_pred_5 = _2810;
                }
                _2591 = frontier_phi_68_pred;
                _2597 = frontier_phi_68_pred_1;
                _2595 = frontier_phi_68_pred_2;
                _2593 = frontier_phi_68_pred_3;
                _2589 = frontier_phi_68_pred_4;
                _2587 = frontier_phi_68_pred_5;
                uint _2745 = _2744 + 1u;
                if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2738 = _2587;
                    _2739 = _2589;
                    _2740 = _2591;
                    _2741 = _2593;
                    _2742 = _2595;
                    _2743 = _2597;
                    _2744 = _2745;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
        }
        uvec4 _2600 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2601 = _2600.z;
        uint _2603 = (_2601 >> 8u) & 15u;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((4294967295u << _2603) & _2486) == 0u)
        {
            _2706 = _2586;
            _2708 = _2588;
            _2710 = _2590;
            _2712 = _2592;
            _2714 = _2594;
            _2716 = _2596;
        }
        else
        {
            float _2731 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
            float _2732 = _2731 * _2440;
            float _2733 = _2731 * _2441;
            float _2734 = _2731 * _2442;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2603 < ((_2601 >> 12u) & 15u))
            {
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2866 = _2586;
                float _2867 = _2588;
                float _2868 = _2590;
                float _2869 = _2592;
                float _2870 = _2594;
                float _2871 = _2596;
                uint _2872 = _2603;
                uint _2881;
                bool _2882;
                for (;;)
                {
                    _2881 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                    _2882 = _2881 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2882)
                    {
                        frontier_phi_79_pred = _2871;
                        frontier_phi_79_pred_1 = _2870;
                        frontier_phi_79_pred_2 = _2869;
                        frontier_phi_79_pred_3 = _2868;
                        frontier_phi_79_pred_4 = _2867;
                        frontier_phi_79_pred_5 = _2866;
                    }
                    else
                    {
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        uint _3094 = _2881;
                        uint _3095;
                        vec4 _3120;
                        float _3121;
                        vec4 _3136;
                        vec3 _3148;
                        vec4 _3164;
                        vec4 _3180;
                        float _3227;
                        bool _3228;
                        for (;;)
                        {
                            uint _3105 = ((_2872 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3094));
                            _3095 = (_3094 + 4294967295u) & _3094;
                            uint _3107 = _3105 * 40u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3121 = _3120.w;
                            uint _3123 = (_3105 * 40u) + 4u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3105 * 40u) + 8u;
                            _3148 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x));
                            uint _3151 = (_3105 * 40u) + 16u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3167 = (_3105 * 40u) + 20u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3183 = (_3105 * 40u) + 24u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3202 = (_3105 * 40u) + 28u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3227 = fma(_2442, _3215.z, fma(_2441, _3215.y, _3215.x * _2440)) + _3215.w;
                            _3228 = !((fma(_2442, _3196.z, fma(_2441, _3196.y, _3196.x * _2440)) + _3196.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3228)
                            {
                                float _3255 = _3120.x - _2440;
                                float _3256 = _3120.y - _2441;
                                float _3257 = _3120.z - _2442;
                                float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                                float _3261 = inversesqrt(_3258);
                                float _3262 = _3261 * _3255;
                                float _3263 = _3261 * _3256;
                                float _3264 = _3261 * _3257;
                                float _3268 = 1.0 - (_3258 / (_3121 * _3121));
                                float _4386 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3273 = sqrt(_3258) * _3136.w;
                                float _3275 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                                float _3276 = _3275 * _3275;
                                float _3279 = ((1.0 - _3276) * dot(vec3(_3262, _3263, _3264), vec3(_645, _648, _651))) + _3276;
                                float _3282 = _3273 * _3273;
                                float _3286 = (fma(_2442, _3164.z, fma(_2441, _3164.y, _3164.x * _2440)) + _3164.w) / _3227;
                                float _3287 = (fma(_2442, _3180.z, fma(_2441, _3180.y, _3180.x * _2440)) + _3180.w) / _3227;
                                float _3291 = 1.0 - dot(vec2(_3286, _3287), vec2(_3286, _3287));
                                float _4402 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3293 = _3292 * (((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3269) / ((_3282 * 0.699999988079071044921875) + 1.0));
                                float _3305 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                                float _3306 = 1.0 - _720;
                                float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                                float _3314 = _3313 * _3313;
                                float _3315 = _3314 * _3314;
                                float _3316 = _3262 - _2732;
                                float _3317 = _3263 - _2733;
                                float _3318 = _3264 - _2734;
                                float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                                float _3326 = dot(vec3(_645, _648, _651), vec3((-0.0) - _2732, (-0.0) - _2733, (-0.0) - _2734));
                                float _4413 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3330 = dot(vec3(_645, _648, _651), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                                float _4424 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                                float _3338 = _3275 * _3314;
                                float _3339 = _3338 * _3338;
                                float _3345 = ((1.0 - _3339) * dot(vec3(_645, _648, _651), vec3(_3262, _3263, _3264))) + _3339;
                                float _4435 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3347 = 1.0 - _3314;
                                float _3357 = (0.5 / (((_3346 * ((_3329 * _3347) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3314) * _3329))) * _3346;
                                float _4446 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3367 = (_3292 * _3269) * (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3337 * _3337) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3293 * _3136.z;
                                frontier_phi_85_pred_1 = _3293 * _3136.y;
                                frontier_phi_85_pred_2 = _3293 * _3136.x;
                                frontier_phi_85_pred_3 = _3367 * _3148.z;
                                frontier_phi_85_pred_4 = _3367 * _3148.y;
                                frontier_phi_85_pred_5 = _3367 * _3148.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_85_pred;
                            _3375 = frontier_phi_85_pred_1;
                            _3374 = frontier_phi_85_pred_2;
                            _3373 = frontier_phi_85_pred_3;
                            _3372 = frontier_phi_85_pred_4;
                            _3371 = frontier_phi_85_pred_5;
                            _3078 = _3374 + _3091;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3075 = _3371 + _3088;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            if (_3095 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3095;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3080;
                        frontier_phi_79_pred_1 = _3079;
                        frontier_phi_79_pred_2 = _3078;
                        frontier_phi_79_pred_3 = _3077;
                        frontier_phi_79_pred_4 = _3076;
                        frontier_phi_79_pred_5 = _3075;
                    }
                    _2717 = frontier_phi_79_pred;
                    _2715 = frontier_phi_79_pred_1;
                    _2713 = frontier_phi_79_pred_2;
                    _2711 = frontier_phi_79_pred_3;
                    _2709 = frontier_phi_79_pred_4;
                    _2707 = frontier_phi_79_pred_5;
                    uint _2873 = _2872 + 1u;
                    if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2866 = _2707;
                        _2867 = _2709;
                        _2868 = _2711;
                        _2869 = _2713;
                        _2870 = _2715;
                        _2871 = _2717;
                        _2872 = _2873;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2713;
                frontier_phi_60_61_ladder_1 = _2717;
                frontier_phi_60_61_ladder_2 = _2715;
                frontier_phi_60_61_ladder_3 = _2711;
                frontier_phi_60_61_ladder_4 = _2709;
                frontier_phi_60_61_ladder_5 = _2707;
            }
            else
            {
                frontier_phi_60_61_ladder = _2592;
                frontier_phi_60_61_ladder_1 = _2596;
                frontier_phi_60_61_ladder_2 = _2594;
                frontier_phi_60_61_ladder_3 = _2590;
                frontier_phi_60_61_ladder_4 = _2588;
                frontier_phi_60_61_ladder_5 = _2586;
            }
            _2706 = frontier_phi_60_61_ladder_5;
            _2708 = frontier_phi_60_61_ladder_4;
            _2710 = frontier_phi_60_61_ladder_3;
            _2712 = frontier_phi_60_61_ladder;
            _2714 = frontier_phi_60_61_ladder_2;
            _2716 = frontier_phi_60_61_ladder_1;
        }
        float _2721 = isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0));
        _2498 = (_2721 * _2712) + _1932;
        _2500 = (_2721 * _2714) + _1934;
        _2502 = (_2721 * _2716) + _1936;
        _2504 = ((_2706 * _689) * _2721) + _2280;
        _2506 = ((_2708 * _691) * _2721) + _2282;
        _2508 = ((_2710 * _692) * _2721) + _2284;
    }
    else
    {
        _2498 = _1932;
        _2500 = _1934;
        _2502 = _1936;
        _2504 = _2280;
        _2506 = _2282;
        _2508 = _2284;
    }
    float _4462 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4473 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4484 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _2525 = ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2498 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _704))) + ((_2504 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1545)) * cbPerFrame._m0[3u].x);
    float _2526 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2500 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _704))) + ((_2506 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1545)) * cbPerFrame._m0[3u].x);
    float _2527 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2502 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _704))) + ((_2508 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1545)) * cbPerFrame._m0[3u].x);
    uint _2528 = _664 + 6u;
    float _2536 = _626 / cbSceneParam._m0[86u].x;
    float _2537 = _627 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2611 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2612 = _2611 / _549;
        float _2623 = _2612 * _599;
        float _2624 = _600 * _2612;
        float _2625 = (-0.0) - _2624;
        float _2626 = _2612 * _601;
        float _2628 = (cbSceneParam._m0[77u].w * _2625) / _2611;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2624;
        float _2636 = sqrt(((_2623 * _2623) + (_2624 * _2624)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2611)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2823;
        if (abs((_2625 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2823 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2767 = 1.0 / cbSceneParam._m0[80u].x;
            float _2768 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2769 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            _2823 = ((abs(_2636 / _2625) * cbSceneParam._m0[80u].y) * ((((_2778 - _2779) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))))) * _2767)) - ((exp2(_2646 * _2778) - exp2(_2646 * _2779)) * _2767))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2825 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2834 = exp2((_2823 * (-1.44269502162933349609375)) * (1.0 - _2825.w));
        float _2835 = log2(_2834);
        float _2851 = log2(_2556);
        _2648 = (exp2(_2851 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].x)) * _2825.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2650 = (exp2(_2851 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].y)) * _2825.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2652 = (exp2(_2851 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].z)) * _2825.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2654 = _2834 * _2556;
    }
    else
    {
        _2648 = _2553;
        _2650 = _2554;
        _2652 = _2555;
        _2654 = _2556;
    }
    bool _2861;
    vec4 _2664;
    vec4 _2686;
    float _2688;
    float _2692;
    float _2693;
    float _2694;
    float _2695;
    bool _2705;
    for (;;)
    {
        _2664 = cbMatDynParam._m0[0u];
        float _2666 = roundEven(_2664.y);
        bool _2667 = _2666 == 3.0;
        float _2668 = log2(_2654);
        float _2675 = exp2(_2668 * cbSceneParam._m0[78u].x) * _2525;
        float _2676 = exp2(_2668 * cbSceneParam._m0[78u].y) * _2526;
        float _2677 = exp2(_2668 * cbSceneParam._m0[78u].z) * _2527;
        float _2684 = _615 + (-0.5);
        _2686 = cbMtdParam._m0[1u];
        _2688 = _2686.y * _2684;
        float _2691 = (_2666 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2692 = _2691 * (_2667 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
        _2693 = _2691 * (_2667 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
        _2694 = _2691 * (_2667 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
        _2695 = _2684 * 0.999000012874603271484375;
        _2705 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2705)
        {
            if ((cbInstanceData._m0[_664 + 7u].x + _2695) < 0.5)
            {
                _2861 = true;
                break;
            }
        }
        uint _2802 = _665 + uint(_2664.w);
        if ((cbInstanceData._m0[_2802].w < 1.0) && ((cbInstanceData._m0[_2802].w + _2695) < 0.5))
        {
            _2861 = true;
            break;
        }
        if ((_2688 + 1.0) < _2686.x)
        {
            _2861 = true;
            break;
        }
        _2861 = false;
        break;
    }
    float _3066;
    if (_2861)
    {
        discard_state = true;
        _3066 = 0.0;
    }
    else
    {
        _3066 = cbInstanceData._m0[_2528].w;
    }
    SV_Target.x = _2692;
    SV_Target.y = _2693;
    SV_Target.z = _2694;
    SV_Target.w = _3066;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2528].w;
    discard_exit();
}


