#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1053;
float _3704;
float _3705;
float _3706;
float _3707;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _250.x;
    float _254 = _250.y;
    float _255 = _250.z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _300 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3716 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _310 = ((_287.z - _255) * _301) + _255;
    float _314 = ((((_287.x - _253) * _301) + _253) * 2.0) + (-1.0);
    float _316 = ((((_287.y - _254) * _301) + _254) * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3727 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))));
    float _325 = fma(_322, _234, fma(_316, _227, _314 * _213));
    float _328 = fma(_322, _235, fma(_316, _228, _314 * _214));
    float _331 = fma(_322, _236, fma(_316, _229, _314 * _215));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    float _349 = cbMtdParam._m0[11u].z + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3738 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    vec4 _368 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _373 = _368.x * cbMtdParam._m0[9u].x;
    float _374 = _368.y * cbMtdParam._m0[9u].y;
    float _375 = _368.z * cbMtdParam._m0[9u].z;
    vec4 _394 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _408 = (((_394.x * cbMtdParam._m0[10u].x) - _373) * _301) + _373;
    float _409 = (((_394.y * cbMtdParam._m0[10u].y) - _374) * _301) + _374;
    float _410 = (((_394.z * cbMtdParam._m0[10u].z) - _375) * _301) + _375;
    vec4 _423 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _434 = ((_423.x - _408) * _350) + _408;
    float _435 = ((_423.y - _409) * _350) + _409;
    float _436 = ((_423.z - _410) * _350) + _410;
    vec4 _449 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _456 = (_449.x * 2.0) + (-1.0);
    float _457 = (_449.y * 2.0) + (-1.0);
    float _458 = dot(vec2(_456, _457), vec2(_456, _457));
    float _3749 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _466 = ((_449.z - _310) * _350) + _310;
    float _473 = ((_456 - _314) * _350) + _314;
    float _474 = ((_457 - _316) * _350) + _316;
    float _475 = ((sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) - _322) * _350) + _322;
    float _478 = fma(_475, _234, fma(_474, _227, _473 * _213));
    float _481 = fma(_475, _235, fma(_474, _228, _473 * _214));
    float _484 = fma(_475, _236, fma(_474, _229, _473 * _215));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    float _489 = _488 * _478;
    float _490 = _488 * _481;
    float _491 = _488 * _484;
    float _3760 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _492 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3782 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3793 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _511 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _561 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _551);
    float _562 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _551);
    float _563 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _551);
    float _567 = inversesqrt(dot(vec3(_561, _562, _563), vec3(_561, _562, _563)));
    float _568 = _561 * _567;
    float _569 = _562 * _567;
    float _570 = _563 * _567;
    vec4 _575 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _577 = _575.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _733 = sqrt(((_561 * _561) + (_562 * _562)) + (_563 * _563));
        float _739 = (cbMatDynParam._m0[5u].x * _733) + cbMatDynParam._m0[5u].y;
        float _3804 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _744 = (cbMatDynParam._m0[5u].z * _733) + cbMatDynParam._m0[5u].w;
        float _3815 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) - _740)) + _740) < ((_577 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _609 = fma(_491, cbSceneParam._m0[5u].z, fma(_490, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _489));
    float _612 = fma(_491, cbSceneParam._m0[6u].z, fma(_490, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _489));
    float _615 = fma(_491, cbSceneParam._m0[7u].z, fma(_490, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _489));
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _629 = _628 + 9u;
    uint _630 = _629 + uint(cbMatDynParam._m0[0u].w);
    float _636 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_630].x;
    float _637 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_630].y;
    float _638 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_630].z;
    float _3826 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    vec4 _650 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _653 = _650.x * TEXCOORD_9.w;
    float _654 = dot(vec3(_489, _490, _491), vec3(_568, _569, _570));
    float _657 = _654 * 2.0;
    float _661 = (_657 * _489) - _568;
    float _662 = (_657 * _490) - _569;
    float _663 = (_657 * _491) - _570;
    float _667 = abs(dot(vec3(_568, _569, _570), vec3(_489, _490, _491)));
    float _3859 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _669 = sqrt(_492);
    float _682 = exp2((_669 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_669 * 3.0));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1052;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _777 = fma(_722, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _714));
        float _781 = fma(_722, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _714));
        float _785 = fma(_722, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _714));
        float _810 = _714 + _489;
        float _811 = _718 + _490;
        float _812 = _722 + _491;
        float _822 = fma(_812, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810)) - _777;
        float _823 = fma(_812, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810)) - _781;
        float _824 = fma(_812, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810)) - _785;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_777 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_781 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[34u].z) + ((((((_785 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _880 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_846.x + (-0.5));
        float _882 = _880 * (_846.y + (-0.5));
        float _883 = _880 * (_846.z + (-0.5));
        float _890 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_853.x + (-0.5));
        float _892 = _890 * (_853.y + (-0.5));
        float _893 = _890 * (_853.z + (-0.5));
        float _900 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_860.x + (-0.5));
        float _902 = _900 * (_860.y + (-0.5));
        float _903 = _900 * (_860.z + (-0.5));
        float _910 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_867.x + (-0.5));
        float _912 = _910 * (_867.y + (-0.5));
        float _913 = _910 * (_867.z + (-0.5));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = _881 * 0.5;
        float _918 = _891 * 0.5;
        float _919 = _901 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _934 = (dot(vec3(_489, _490, _491), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _944 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3907 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_946 + 1.0))) + _951) * _914;
        float _961 = _882 * 0.5;
        float _962 = _892 * 0.5;
        float _963 = _902 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_489, _490, _491), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3940 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_988 + 1.0))) + _993) * _915;
        float _1003 = _883 * 0.5;
        float _1004 = _893 * 0.5;
        float _1005 = _903 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_489, _490, _491), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3973 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1030 + 1.0))) + _1035) * _916;
        _1052 = _883;
        _1054 = _882;
        _1055 = _881;
        _1056 = _893;
        _1057 = _892;
        _1058 = _891;
        _1059 = _903;
        _1060 = _902;
        _1061 = _901;
        _1062 = _916;
        _1063 = _915;
        _1064 = _914;
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = _1053;
        _1054 = _1053;
        _1055 = _1053;
        _1056 = _1053;
        _1057 = _1053;
        _1058 = _1053;
        _1059 = _1053;
        _1060 = _1053;
        _1061 = _1053;
        _1062 = _1053;
        _1063 = _1053;
        _1064 = _1053;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1096 = fma(_722, cbModelParam._m0[30u].z, fma(_718, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _714));
        float _1100 = fma(_722, cbModelParam._m0[31u].z, fma(_718, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _714));
        float _1104 = fma(_722, cbModelParam._m0[32u].z, fma(_718, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _714));
        float _1127 = _714 + _489;
        float _1128 = _718 + _490;
        float _1129 = _722 + _491;
        float _1139 = fma(_1129, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127)) - _1096;
        float _1140 = fma(_1129, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127)) - _1100;
        float _1141 = fma(_1129, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127)) - _1104;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1096 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1100 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[35u].z) + ((((((_1104 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1195 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1162.x + (-0.5));
        float _1197 = _1195 * (_1162.y + (-0.5));
        float _1198 = _1195 * (_1162.z + (-0.5));
        float _1205 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1169.x + (-0.5));
        float _1207 = _1205 * (_1169.y + (-0.5));
        float _1208 = _1205 * (_1169.z + (-0.5));
        float _1215 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1176.x + (-0.5));
        float _1217 = _1215 * (_1176.y + (-0.5));
        float _1218 = _1215 * (_1176.z + (-0.5));
        float _1225 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1183.x + (-0.5));
        float _1227 = _1225 * (_1183.y + (-0.5));
        float _1228 = _1225 * (_1183.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_489, _490, _491), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4036 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1259 + 1.0))) + _1264) * _1229;
        float _1274 = _1197 * 0.5;
        float _1275 = _1207 * 0.5;
        float _1276 = _1217 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_489, _490, _491), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4069 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1301 + 1.0))) + _1306) * _1230;
        float _1316 = _1198 * 0.5;
        float _1317 = _1208 * 0.5;
        float _1318 = _1218 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_489, _490, _491), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4102 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1343 + 1.0))) + _1348) * _1231;
        _1365 = _1198;
        _1366 = _1197;
        _1367 = _1196;
        _1368 = _1208;
        _1369 = _1207;
        _1370 = _1206;
        _1371 = _1218;
        _1372 = _1217;
        _1373 = _1216;
        _1374 = _1231;
        _1375 = _1230;
        _1376 = _1229;
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1053;
        _1366 = _1053;
        _1367 = _1053;
        _1368 = _1053;
        _1369 = _1053;
        _1370 = _1053;
        _1371 = _1053;
        _1372 = _1053;
        _1373 = _1053;
        _1374 = _1053;
        _1375 = _1053;
        _1376 = _1053;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1065)) + _1065;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1066)) + _1066;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1067)) + _1067;
    float _1412 = fma(_1391, cbSceneParam._m0[89u].z, fma(_1390, cbSceneParam._m0[89u].y, _1389 * cbSceneParam._m0[89u].x));
    float _1415 = fma(_1391, cbSceneParam._m0[90u].z, fma(_1390, cbSceneParam._m0[90u].y, _1389 * cbSceneParam._m0[90u].x));
    float _1418 = fma(_1391, cbSceneParam._m0[91u].z, fma(_1390, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1389));
    float _1433 = _661 * 0.5;
    float _1434 = _662 * 0.5;
    float _1435 = _663 * 0.5;
    float _1436 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1439 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1442 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1476;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1449 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1052, _1056, _1059, _1062));
        float _1453 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1457 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1464 = dot(vec4(cbModelParam._m0[39u]), vec4(_1433, _1434, _1435, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1487;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1478 = dot(vec4(cbModelParam._m0[40u]), vec4(_1433, _1434, _1435, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1491 = (_1487 * cbModelParam._m0[1u].x) + (_1476 * (1.0 - cbModelParam._m0[1u].x));
    float _1501 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _492);
    float _1502 = isnan(_1501) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1501 : min(cbModelParam._m0[25u].z, _1501));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1551 = fma(_722, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _714)) + cbModelParam._m0[13u].w;
        float _1555 = fma(_722, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _714)) + cbModelParam._m0[14u].w;
        float _1559 = fma(_722, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _714)) + cbModelParam._m0[15u].w;
        float _1562 = fma(_663, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661));
        float _1565 = fma(_663, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661));
        float _1568 = fma(_663, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661));
        float _1596;
        if (_1562 > 0.0)
        {
            _1596 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1596 = frontier_phi_19_17_ladder;
        }
        float _1769;
        if (_1565 > 0.0)
        {
            _1769 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1769 = frontier_phi_28_24_ladder;
        }
        float _2064;
        if (_1568 > 0.0)
        {
            _2064 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2064 = frontier_phi_40_35_ladder;
        }
        float _2066 = isnan(_1769) ? _1596 : (isnan(_1596) ? _1769 : min(_1596, _1769));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1562) + _1551;
        float _2072 = (_2067 * _1565) + _1555;
        float _2073 = (_2067 * _1568) + _1559;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2076 = (-1.0) - _2074;
        float _2078 = _2074 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2073 > _2078) || ((_2073 < _2076) || ((_2072 > _2078) || ((_2072 < _2076) || ((_2071 < _2076) || (_2071 > _2078))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2073, cbModelParam._m0[9u].z, fma(_2072, cbModelParam._m0[9u].y, _2071 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2073, cbModelParam._m0[10u].z, fma(_2072, cbModelParam._m0[10u].y, _2071 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2073, cbModelParam._m0[11u].z, fma(_2072, cbModelParam._m0[11u].y, _2071 * cbModelParam._m0[11u].x))), _1502);
            frontier_phi_18_40_ladder = _2218.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2218.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2218.x * cbModelParam._m0[1u].y;
        }
        _1584 = frontier_phi_18_40_ladder_2;
        _1586 = frontier_phi_18_40_ladder_1;
        _1588 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_661, _662, _663), _1502);
        _1584 = _1572.x * cbModelParam._m0[1u].y;
        _1586 = _1572.y * cbModelParam._m0[1u].y;
        _1588 = _1572.z * cbModelParam._m0[1u].y;
    }
    float _1592 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _492);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1592 : min(cbModelParam._m0[25u].w, _1592));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1650 = fma(_722, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _714)) + cbModelParam._m0[21u].w;
        float _1654 = fma(_722, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _714)) + cbModelParam._m0[22u].w;
        float _1658 = fma(_722, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _714)) + cbModelParam._m0[23u].w;
        float _1661 = fma(_663, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661));
        float _1664 = fma(_663, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661));
        float _1667 = fma(_663, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661));
        float _1774;
        if (_1661 > 0.0)
        {
            _1774 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1774 = frontier_phi_30_26_ladder;
        }
        float _2091;
        if (_1664 > 0.0)
        {
            _2091 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2091 = frontier_phi_42_37_ladder;
        }
        float _2418;
        if (_1667 > 0.0)
        {
            _2418 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2418 = frontier_phi_52_49_ladder;
        }
        float _2420 = isnan(_2091) ? _1774 : (isnan(_1774) ? _2091 : min(_1774, _2091));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1661) + _1650;
        float _2426 = (_2421 * _1664) + _1654;
        float _2427 = (_2421 * _1667) + _1658;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2428;
        float _2431 = _2428 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2427 > _2431) || ((_2427 < _2429) || ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 < _2429) || (_2425 > _2431))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2427, cbModelParam._m0[17u].z, fma(_2426, cbModelParam._m0[17u].y, _2425 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2427, cbModelParam._m0[18u].z, fma(_2426, cbModelParam._m0[18u].y, _2425 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2427, cbModelParam._m0[19u].z, fma(_2426, cbModelParam._m0[19u].y, _2425 * cbModelParam._m0[19u].x))), _1593);
            frontier_phi_27_52_ladder = _2545.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2545.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2545.x * cbModelParam._m0[1u].z;
        }
        _1686 = frontier_phi_27_52_ladder_2;
        _1688 = frontier_phi_27_52_ladder_1;
        _1690 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_661, _662, _663), _1593);
        _1686 = _1670.x * cbModelParam._m0[1u].z;
        _1688 = _1670.y * cbModelParam._m0[1u].z;
        _1690 = _1670.z * cbModelParam._m0[1u].z;
    }
    float _1702 = ((((1.0 - _682) * ((_669 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_682 * _669)) * _653;
    float _1703 = _1702 * ((cbModelParam._m0[1u].w * (_1686 - _1584)) + _1584);
    float _1704 = _1702 * ((cbModelParam._m0[1u].w * (_1688 - _1586)) + _1586);
    float _1705 = _1702 * ((cbModelParam._m0[1u].w * (_1690 - _1588)) + _1588);
    float _1708 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, _1703 * cbSceneParam._m0[91u].x));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1761 = _1748 / _1760;
    float _1762 = _1752 / _1760;
    float _1763 = _1756 / _1760;
    float _1910;
    float _1911;
    float _1912;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1790 = ((uint(_1763 > cbSceneParam._m0[59u].y) + uint(_1763 > cbSceneParam._m0[59u].x)) + uint(_1763 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1791 = _1790 + 43u;
        uint _1799 = _1790 + 44u;
        uint _1807 = _1790 + 45u;
        uint _1815 = _1790 + 46u;
        float _1826 = fma(_1760, cbSceneParam._m0[_1791].w, fma(_1756, cbSceneParam._m0[_1791].z, fma(_1752, cbSceneParam._m0[_1791].y, _1748 * cbSceneParam._m0[_1791].x)));
        float _1830 = fma(_1760, cbSceneParam._m0[_1799].w, fma(_1756, cbSceneParam._m0[_1799].z, fma(_1752, cbSceneParam._m0[_1799].y, _1748 * cbSceneParam._m0[_1799].x)));
        float _1838 = fma(_1760, cbSceneParam._m0[_1815].w, fma(_1756, cbSceneParam._m0[_1815].z, fma(_1752, cbSceneParam._m0[_1815].y, _1748 * cbSceneParam._m0[_1815].x)));
        float _1843 = cbSceneParam._m0[33u].z * _1838;
        float _1845 = cbSceneParam._m0[33u].w * _1838;
        float _1848 = fma(_1760, cbSceneParam._m0[_1807].w, fma(_1756, cbSceneParam._m0[_1807].z, fma(_1752, cbSceneParam._m0[_1807].y, _1748 * cbSceneParam._m0[_1807].x))) / _1838;
        float _1896 = (cbSceneParam._m0[33u].x - sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763))) * cbSceneParam._m0[33u].y;
        float _4228 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1903 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 + _1826) / _1838, (_1845 + _1830) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1826) / _1838, (_1830 - _1843) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 - _1843) / _1838, (_1830 - _1845) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 - _1845) / _1838, (_1843 + _1830) / _1838), _1848), 0.0)).x), vec4(0.25)));
        _1910 = 1.0 - (_1903 * cbSceneParam._m0[34u].x);
        _1911 = 1.0 - (_1903 * cbSceneParam._m0[34u].y);
        _1912 = 1.0 - (_1903 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1910 = 1.0;
        _1911 = 1.0;
        _1912 = 1.0;
    }
    float _1976;
    float _1978;
    float _1980;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1964 = fma(_1760, cbSceneParam._m0[63u].w, fma(_1756, cbSceneParam._m0[63u].z, fma(_1752, cbSceneParam._m0[63u].y, _1748 * cbSceneParam._m0[63u].x)));
        float _1965 = fma(_1760, cbSceneParam._m0[60u].w, fma(_1756, cbSceneParam._m0[60u].z, fma(_1752, cbSceneParam._m0[60u].y, _1748 * cbSceneParam._m0[60u].x))) / _1964;
        float _1966 = fma(_1760, cbSceneParam._m0[61u].w, fma(_1756, cbSceneParam._m0[61u].z, fma(_1752, cbSceneParam._m0[61u].y, _1748 * cbSceneParam._m0[61u].x))) / _1964;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1965 >= cbSceneParam._m0[64u].x) && (_1966 >= cbSceneParam._m0[64u].y)) && (_1965 <= cbSceneParam._m0[64u].z)) && (_1966 <= cbSceneParam._m0[64u].w))
        {
            float _2104 = fma(_1760, cbSceneParam._m0[62u].w, fma(_1756, cbSceneParam._m0[62u].z, fma(_1752, cbSceneParam._m0[62u].y, _1748 * cbSceneParam._m0[62u].x))) / _1964;
            float _2108 = isnan(cbSceneParam._m0[41u].w) ? _2104 : (isnan(_2104) ? cbSceneParam._m0[41u].w : max(_2104, cbSceneParam._m0[41u].w));
            float _2151 = (cbSceneParam._m0[33u].x - sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763))) * cbSceneParam._m0[33u].y;
            float _4244 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
            float _2158 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1965, cbSceneParam._m0[33u].w + _1966), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1965, _1966 - cbSceneParam._m0[33u].z), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1965 - cbSceneParam._m0[33u].z, _1966 - cbSceneParam._m0[33u].w), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1965 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1966), _2108), 0.0)).x), vec4(0.25)));
            float _2162 = 1.0 - (_2158 * cbSceneParam._m0[34u].x);
            float _2163 = 1.0 - (_2158 * cbSceneParam._m0[34u].y);
            float _2164 = 1.0 - (_2158 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2163) ? _1911 : (isnan(_1911) ? _2163 : min(_1911, _2163));
            frontier_phi_39_38_ladder_1 = isnan(_2162) ? _1910 : (isnan(_1910) ? _2162 : min(_1910, _2162));
            frontier_phi_39_38_ladder_2 = isnan(_2164) ? _1912 : (isnan(_1912) ? _2164 : min(_1912, _2164));
        }
        else
        {
            frontier_phi_39_38_ladder = _1911;
            frontier_phi_39_38_ladder_1 = _1910;
            frontier_phi_39_38_ladder_2 = _1912;
        }
        _1976 = frontier_phi_39_38_ladder_1;
        _1978 = frontier_phi_39_38_ladder;
        _1980 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1976 = _1910;
        _1978 = _1911;
        _1980 = _1912;
    }
    uvec4 _1985 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _1987 = _1985.x * 14u;
    uint _1988 = _1987 + 13u;
    float _1995 = _653 + (-1.0);
    float _2000 = (cbLight._m0[_1988].x * _1995) + 1.0;
    float _2001 = (cbLight._m0[_1988].y * _1995) + 1.0;
    float _2002 = (cbLight._m0[_1988].z * _1995) + 1.0;
    float _2003 = (cbLight._m0[_1988].w * _1995) + 1.0;
    uint _2004 = _1987 + 5u;
    float _2010 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2014 = _1987 + 4u;
    float _2023 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2027 = _1987 | 1u;
    float _2038 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_489, _490, _491));
    float _2041 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_489, _490, _491));
    float _4280 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _4291 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2046 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2048 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.3183098733425140380859375;
    float _2055 = ((cbLight._m0[_2004].x * _2010) * _2048) + (((cbLight._m0[_2014].x * _1976) * _2023) * _2046);
    float _2056 = ((_2010 * cbLight._m0[_2004].y) * _2048) + (((cbLight._m0[_2014].y * _1978) * _2023) * _2046);
    float _2057 = ((_2010 * cbLight._m0[_2004].z) * _2048) + (((cbLight._m0[_2014].z * _1980) * _2023) * _2046);
    uvec4 _2061 = floatBitsToUint(cbLight._m0[_1987 + 12u]);
    bool _2063 = _2061.x == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2063)
    {
        _2165 = _2055;
        _2167 = _2056;
        _2169 = _2057;
    }
    else
    {
        uint _2173 = _1987 + 6u;
        float _2189 = (dot(vec3(cbLight._m0[_1987 + 2u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _2190 = _2189 * _2189;
        float _4302 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2192 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2165 = (((cbLight._m0[_2173].x * 0.3183098733425140380859375) * _2191) * _2192) + _2055;
        _2167 = (((cbLight._m0[_2173].y * 0.3183098733425140380859375) * _2191) * _2192) + _2056;
        _2169 = (((cbLight._m0[_2173].z * 0.3183098733425140380859375) * _2191) * _2192) + _2057;
    }
    bool _2172 = _2061.y == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2172)
    {
        _2227 = _2165;
        _2229 = _2167;
        _2231 = _2169;
    }
    else
    {
        uint _2389 = _1987 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_1987 + 3u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4318 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2408 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2227 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2165;
        _2229 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2167;
        _2231 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2169;
    }
    uint _2234 = _1987 + 8u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _492) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_1987].x + _568;
    float _2250 = cbLight._m0[_1987].y + _569;
    float _2251 = cbLight._m0[_1987].z + _570;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1987].xyz));
    float _4334 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _4345 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2263 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2264 = dot(vec3(_489, _490, _491), vec3(_2256, _2257, _2258));
    float _4356 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2256, _2257, _2258));
    float _4367 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2248 * _2248;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2288 = 1.0 - _2248;
    float _2299 = (0.5 / (((_2263 * ((_2262 * _2288) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2288) + _2248) * _2262))) * _2262;
    float _4378 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    uint _2315 = _1987 + 9u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _492) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2027].x + _568;
    float _2329 = cbLight._m0[_2027].y + _569;
    float _2330 = cbLight._m0[_2027].z + _570;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2027].xyz));
    float _4389 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2342 = dot(vec3(_489, _490, _491), vec3(_2335, _2336, _2337));
    float _4400 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2335, _2336, _2337));
    float _4411 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2327 * _2327;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2364 = 1.0 - _2327;
    float _2374 = (0.5 / (((_2263 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2364) + _2327) * _2341))) * _2341;
    float _4422 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    float _2386 = (((_2363 * cbLight._m0[_2315].x) * _2376) * _2010) + ((((cbLight._m0[_2234].x * _1976) * _2287) * _2301) * _2023);
    float _2387 = (((_2363 * cbLight._m0[_2315].y) * _2376) * _2010) + ((((cbLight._m0[_2234].y * _1978) * _2287) * _2301) * _2023);
    float _2388 = (((_2363 * cbLight._m0[_2315].z) * _2376) * _2010) + ((((cbLight._m0[_2234].z * _1980) * _2287) * _2301) * _2023);
    float _2444;
    float _2446;
    float _2448;
    if (_2063)
    {
        _2444 = _2386;
        _2446 = _2387;
        _2448 = _2388;
    }
    else
    {
        uint _2450 = _1987 + 2u;
        uint _2454 = _1987 + 10u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _492) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _568;
        float _2471 = cbLight._m0[_2450].y + _569;
        float _2472 = cbLight._m0[_2450].z + _570;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2450].xyz));
        float _4433 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2484 = dot(vec3(_489, _490, _491), vec3(_2477, _2478, _2479));
        float _4444 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4455 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2506 = 1.0 - _2469;
        float _2516 = (0.5 / (((_2263 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2506) + _2469) * _2483))) * _2483;
        float _4466 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2444 = (((_2505 * cbLight._m0[_2454].x) * _2518) * _2519) + _2386;
        _2446 = (((_2505 * cbLight._m0[_2454].y) * _2518) * _2519) + _2387;
        _2448 = (((_2505 * cbLight._m0[_2454].z) * _2518) * _2519) + _2388;
    }
    float _2550;
    float _2552;
    float _2554;
    if (_2172)
    {
        _2550 = _2444;
        _2552 = _2446;
        _2554 = _2448;
    }
    else
    {
        uint _2561 = _1987 + 3u;
        uint _2565 = _1987 + 11u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _492) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _568;
        float _2582 = cbLight._m0[_2561].y + _569;
        float _2583 = cbLight._m0[_2561].z + _570;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2561].xyz));
        float _4482 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2595 = dot(vec3(_489, _490, _491), vec3(_2588, _2589, _2590));
        float _4493 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4504 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2616 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2617 = 1.0 - _2580;
        float _2627 = (0.5 / (((_2263 * ((_2594 * _2617) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2617) + _2580) * _2594))) * _2594;
        float _4515 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2550 = (((_2616 * cbLight._m0[_2565].x) * _2629) * _2630) + _2444;
        _2552 = (((_2616 * cbLight._m0[_2565].y) * _2629) * _2630) + _2446;
        _2554 = (((_2616 * cbLight._m0[_2565].z) * _2629) * _2630) + _2448;
    }
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_1985.y == 0u)
    {
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.x;
        uint _2663 = uint((float(_2651.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2652))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2652)));
        float _2673 = (log2(_1763 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2674 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        uint _2677 = uint(isnan(14.0) ? _2674 : (isnan(_2674) ? 14.0 : min(_2674, 14.0)));
        uvec4 _2682 = texelFetch(g_lightClusterGridBuffer, int(((_2677 << 2u) + (_2663 << 6u)) >> 2u));
        uint _2683 = _2682.x;
        uint _2684 = _2651.z;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        if (((((1u << ((_2684 >> 4u) & 15u)) + 4294967295u) & _2683) == 0u) || ((_2684 & 240u) == 0u))
        {
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
        }
        else
        {
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            uint _2920 = 0u;
            uint _2929;
            bool _2930;
            for (;;)
            {
                _2929 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                _2930 = _2929 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2930)
                {
                    frontier_phi_73_pred = _2919;
                    frontier_phi_73_pred_1 = _2918;
                    frontier_phi_73_pred_2 = _2917;
                    frontier_phi_73_pred_3 = _2916;
                    frontier_phi_73_pred_4 = _2915;
                    frontier_phi_73_pred_5 = _2914;
                }
                else
                {
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    uint _3065;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2929;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3069 = uint(findLSB(_3065)) + (_2920 << 5u);
                        uint _3066 = (_3065 + 4294967295u) & _3065;
                        uint _3071 = _3069 * 48u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3091 = (_3069 * 48u) + 4u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3110 = (_3069 * 48u) + 8u;
                        vec3 _3121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x));
                        float _3125 = _3085.x - _1761;
                        float _3126 = _3085.y - _1762;
                        float _3127 = _3085.z - _1763;
                        float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                        float _3131 = inversesqrt(_3128);
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3135 = dot(vec3(_609, _612, _615), vec3(_3132, _3133, _3134));
                        float _3140 = 1.0 - (_3128 * _3085.w);
                        float _4541 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3142 = sqrt(_3128) * _3104.w;
                        float _3145 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3135) + _3146;
                        float _3152 = _3142 * _3142;
                        float _3156 = ((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3141) / ((_3152 * 0.699999988079071044921875) + 1.0);
                        float _3160 = (-0.0) - _1761;
                        float _3161 = (-0.0) - _1762;
                        float _3162 = (-0.0) - _1763;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3176 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _669;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3167 + _3132;
                        float _3188 = _3168 + _3133;
                        float _3189 = _3169 + _3134;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_609, _612, _615), vec3(_3167, _3168, _3169));
                        float _4557 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3201 = dot(vec3(_609, _612, _615), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4568 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3145 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3135) + _3210;
                        float _4579 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4590 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3236 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3208 * _3208) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125))) * _3141;
                        _2989 = (_3156 * _3104.x) + _3062;
                        _2990 = (_3156 * _3104.y) + _3063;
                        _2991 = (_3156 * _3104.z) + _3064;
                        _2986 = (_3236 * _3121.x) + _3059;
                        _2987 = (_3236 * _3121.y) + _3060;
                        _2988 = (_3236 * _3121.z) + _3061;
                        if (_3066 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _3066;
                        }
                    }
                    frontier_phi_73_pred = _2991;
                    frontier_phi_73_pred_1 = _2990;
                    frontier_phi_73_pred_2 = _2989;
                    frontier_phi_73_pred_3 = _2988;
                    frontier_phi_73_pred_4 = _2987;
                    frontier_phi_73_pred_5 = _2986;
                }
                _2773 = frontier_phi_73_pred;
                _2771 = frontier_phi_73_pred_1;
                _2769 = frontier_phi_73_pred_2;
                _2767 = frontier_phi_73_pred_3;
                _2765 = frontier_phi_73_pred_4;
                _2763 = frontier_phi_73_pred_5;
                uint _2921 = _2920 + 1u;
                if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2914 = _2763;
                    _2915 = _2765;
                    _2916 = _2767;
                    _2917 = _2769;
                    _2918 = _2771;
                    _2919 = _2773;
                    _2920 = _2921;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
        }
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.z;
        uint _2779 = (_2777 >> 8u) & 15u;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((4294967295u << _2779) & _2683) == 0u)
        {
            _2882 = _2762;
            _2884 = _2764;
            _2886 = _2766;
            _2888 = _2768;
            _2890 = _2770;
            _2892 = _2772;
        }
        else
        {
            float _2907 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
            float _2908 = _2907 * _1761;
            float _2909 = _2907 * _1762;
            float _2910 = _2907 * _1763;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2779 < ((_2777 >> 12u) & 15u))
            {
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _3042 = _2762;
                float _3043 = _2764;
                float _3044 = _2766;
                float _3045 = _2768;
                float _3046 = _2770;
                float _3047 = _2772;
                uint _3048 = _2779;
                uint _3057;
                bool _3058;
                for (;;)
                {
                    _3057 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                    _3058 = _3057 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3058)
                    {
                        frontier_phi_84_pred = _3046;
                        frontier_phi_84_pred_1 = _3045;
                        frontier_phi_84_pred_2 = _3044;
                        frontier_phi_84_pred_3 = _3043;
                        frontier_phi_84_pred_4 = _3042;
                        frontier_phi_84_pred_5 = _3047;
                    }
                    else
                    {
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3263 = _3042;
                        float _3264 = _3043;
                        float _3265 = _3044;
                        float _3266 = _3045;
                        float _3267 = _3046;
                        float _3268 = _3047;
                        uint _3269 = _3057;
                        uint _3270;
                        vec4 _3295;
                        float _3296;
                        vec4 _3311;
                        vec3 _3323;
                        vec4 _3339;
                        vec4 _3355;
                        float _3402;
                        bool _3403;
                        for (;;)
                        {
                            uint _3280 = ((_3048 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3269));
                            _3270 = (_3269 + 4294967295u) & _3269;
                            uint _3282 = _3280 * 40u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3296 = _3295.w;
                            uint _3298 = (_3280 * 40u) + 4u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3280 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3326 = (_3280 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3280 * 40u) + 20u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3358 = (_3280 * 40u) + 24u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3377 = (_3280 * 40u) + 28u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            _3402 = fma(_1763, _3390.z, fma(_1762, _3390.y, _3390.x * _1761)) + _3390.w;
                            _3403 = !((fma(_1763, _3371.z, fma(_1762, _3371.y, _3371.x * _1761)) + _3371.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3403)
                            {
                                float _3430 = _3295.x - _1761;
                                float _3431 = _3295.y - _1762;
                                float _3432 = _3295.z - _1763;
                                float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                                float _3436 = inversesqrt(_3433);
                                float _3437 = _3436 * _3430;
                                float _3438 = _3436 * _3431;
                                float _3439 = _3436 * _3432;
                                float _3443 = 1.0 - (_3433 / (_3296 * _3296));
                                float _4601 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3448 = sqrt(_3433) * _3311.w;
                                float _3450 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                                float _3451 = _3450 * _3450;
                                float _3454 = ((1.0 - _3451) * dot(vec3(_3437, _3438, _3439), vec3(_609, _612, _615))) + _3451;
                                float _3457 = _3448 * _3448;
                                float _3461 = (fma(_1763, _3339.z, fma(_1762, _3339.y, _3339.x * _1761)) + _3339.w) / _3402;
                                float _3462 = (fma(_1763, _3355.z, fma(_1762, _3355.y, _3355.x * _1761)) + _3355.w) / _3402;
                                float _3466 = 1.0 - dot(vec2(_3461, _3462), vec2(_3461, _3462));
                                float _4617 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3468 = _3467 * (((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3444) / ((_3457 * 0.699999988079071044921875) + 1.0));
                                float _3480 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                                float _3481 = 1.0 - _669;
                                float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                                float _3489 = _3488 * _3488;
                                float _3490 = _3489 * _3489;
                                float _3491 = _3437 - _2908;
                                float _3492 = _3438 - _2909;
                                float _3493 = _3439 - _2910;
                                float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                                float _3501 = dot(vec3(_609, _612, _615), vec3((-0.0) - _2908, (-0.0) - _2909, (-0.0) - _2910));
                                float _4628 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3505 = dot(vec3(_609, _612, _615), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                                float _4639 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                                float _3513 = _3450 * _3489;
                                float _3514 = _3513 * _3513;
                                float _3520 = ((1.0 - _3514) * dot(vec3(_609, _612, _615), vec3(_3437, _3438, _3439))) + _3514;
                                float _4650 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3522 = 1.0 - _3489;
                                float _3532 = (0.5 / (((_3521 * ((_3504 * _3522) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3521 * _3522) + _3489) * _3504))) * _3521;
                                float _4661 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3542 = (_3467 * _3444) * (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3512 * _3512) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3468 * _3311.y;
                                frontier_phi_90_pred_1 = _3468 * _3311.x;
                                frontier_phi_90_pred_2 = _3542 * _3323.z;
                                frontier_phi_90_pred_3 = _3542 * _3323.y;
                                frontier_phi_90_pred_4 = _3542 * _3323.x;
                                frontier_phi_90_pred_5 = _3468 * _3311.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3550 = frontier_phi_90_pred;
                            _3549 = frontier_phi_90_pred_1;
                            _3548 = frontier_phi_90_pred_2;
                            _3547 = frontier_phi_90_pred_3;
                            _3546 = frontier_phi_90_pred_4;
                            _3551 = frontier_phi_90_pred_5;
                            _3253 = _3549 + _3266;
                            _3254 = _3550 + _3267;
                            _3255 = _3551 + _3268;
                            _3250 = _3546 + _3263;
                            _3251 = _3547 + _3264;
                            _3252 = _3548 + _3265;
                            if (_3270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3270;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3254;
                        frontier_phi_84_pred_1 = _3253;
                        frontier_phi_84_pred_2 = _3252;
                        frontier_phi_84_pred_3 = _3251;
                        frontier_phi_84_pred_4 = _3250;
                        frontier_phi_84_pred_5 = _3255;
                    }
                    _2891 = frontier_phi_84_pred;
                    _2889 = frontier_phi_84_pred_1;
                    _2887 = frontier_phi_84_pred_2;
                    _2885 = frontier_phi_84_pred_3;
                    _2883 = frontier_phi_84_pred_4;
                    _2893 = frontier_phi_84_pred_5;
                    uint _3049 = _3048 + 1u;
                    if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3042 = _2883;
                        _3043 = _2885;
                        _3044 = _2887;
                        _3045 = _2889;
                        _3046 = _2891;
                        _3047 = _2893;
                        _3048 = _3049;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2893;
                frontier_phi_65_66_ladder_1 = _2889;
                frontier_phi_65_66_ladder_2 = _2891;
                frontier_phi_65_66_ladder_3 = _2885;
                frontier_phi_65_66_ladder_4 = _2883;
                frontier_phi_65_66_ladder_5 = _2887;
            }
            else
            {
                frontier_phi_65_66_ladder = _2772;
                frontier_phi_65_66_ladder_1 = _2768;
                frontier_phi_65_66_ladder_2 = _2770;
                frontier_phi_65_66_ladder_3 = _2764;
                frontier_phi_65_66_ladder_4 = _2762;
                frontier_phi_65_66_ladder_5 = _2766;
            }
            _2882 = frontier_phi_65_66_ladder_4;
            _2884 = frontier_phi_65_66_ladder_3;
            _2886 = frontier_phi_65_66_ladder_5;
            _2888 = frontier_phi_65_66_ladder_1;
            _2890 = frontier_phi_65_66_ladder_2;
            _2892 = frontier_phi_65_66_ladder;
        }
        float _2897 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
        _2695 = (_2897 * _2888) + _2227;
        _2697 = (_2897 * _2890) + _2229;
        _2699 = (_2897 * _2892) + _2231;
        _2701 = ((_2882 * 0.039999999105930328369140625) * _2897) + _2550;
        _2703 = ((_2884 * 0.039999999105930328369140625) * _2897) + _2552;
        _2705 = ((_2886 * 0.039999999105930328369140625) * _2897) + _2554;
    }
    else
    {
        _2695 = _2227;
        _2697 = _2229;
        _2699 = _2231;
        _2701 = _2550;
        _2703 = _2552;
        _2705 = _2554;
    }
    float _4677 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4688 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4699 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _2722 = ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2695 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _653))) + ((_2701 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1491)) * cbPerFrame._m0[3u].x);
    float _2723 = ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2697 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _653))) + ((_2703 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1491)) * cbPerFrame._m0[3u].x);
    float _2724 = ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2699 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _653))) + ((_2705 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1491)) * cbPerFrame._m0[3u].x);
    uint _2725 = _628 + 6u;
    float _2733 = _589 / cbSceneParam._m0[86u].x;
    float _2734 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2748 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, (log2((isnan(cbSceneParam._m0[77u].w) ? _511 : (isnan(_511) ? cbSceneParam._m0[77u].w : min(_511, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2750 = _2748.x;
    float _2751 = _2748.y;
    float _2752 = _2748.z;
    float _2753 = _2748.w;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_511 > cbSceneParam._m0[78u].w)
    {
        float _2787 = isnan(_511) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _511 : min(cbSceneParam._m0[80u].w, _511));
        float _2788 = _2787 / _511;
        float _2799 = _2788 * _561;
        float _2800 = _562 * _2788;
        float _2801 = (-0.0) - _2800;
        float _2802 = _2788 * _563;
        float _2804 = (cbSceneParam._m0[77u].w * _2801) / _2787;
        float _2805 = _2804 + cbSceneParam._m0[79u].w;
        float _2806 = cbSceneParam._m0[79u].w - _2800;
        float _2812 = sqrt(((_2799 * _2799) + (_2800 * _2800)) + (_2802 * _2802));
        float _2815 = (1.0 - (cbSceneParam._m0[77u].w / _2787)) * _2812;
        float _2820 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2822 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2801 - _2804) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2805 > 0.0) ? exp2(_2820 * _2805) : (2.0 - exp2(_2822 * _2805))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2815;
        }
        else
        {
            float _2943 = 1.0 / cbSceneParam._m0[80u].x;
            float _2944 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : max(_2805, _2806));
            float _2945 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : min(_2805, _2806));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            float _2955 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : min(_2945, 0.0));
            _2999 = ((abs(_2812 / _2801) * cbSceneParam._m0[80u].y) * ((((_2954 - _2955) * 2.0) - ((exp2(_2820 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0)))) - exp2(_2820 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))))) * _2943)) - ((exp2(_2822 * _2954) - exp2(_2822 * _2955)) * _2943))) + (_2815 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2753);
        _2824 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2750;
        _2826 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2751;
        _2828 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2752;
        _2830 = _3010 * _2753;
    }
    else
    {
        _2824 = _2750;
        _2826 = _2751;
        _2828 = _2752;
        _2830 = _2753;
    }
    bool _3037;
    vec4 _2840;
    vec4 _2862;
    float _2864;
    float _2868;
    float _2869;
    float _2870;
    float _2871;
    bool _2881;
    for (;;)
    {
        _2840 = cbMatDynParam._m0[0u];
        float _2842 = roundEven(_2840.y);
        bool _2843 = _2842 == 3.0;
        float _2844 = log2(_2830);
        float _2851 = exp2(_2844 * cbSceneParam._m0[78u].x) * _2722;
        float _2852 = exp2(_2844 * cbSceneParam._m0[78u].y) * _2723;
        float _2853 = exp2(_2844 * cbSceneParam._m0[78u].z) * _2724;
        float _2860 = _577 + (-0.5);
        _2862 = cbMtdParam._m0[1u];
        _2864 = _2862.y * _2860;
        float _2867 = (_2842 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2868 = _2867 * (_2843 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2824)));
        _2869 = _2867 * (_2843 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2826)));
        _2870 = _2867 * (_2843 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2828)));
        _2871 = _2860 * 0.999000012874603271484375;
        _2881 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2881)
        {
            if ((cbInstanceData._m0[_628 + 7u].x + _2871) < 0.5)
            {
                _3037 = true;
                break;
            }
        }
        uint _2978 = _629 + uint(_2840.w);
        if ((cbInstanceData._m0[_2978].w < 1.0) && ((cbInstanceData._m0[_2978].w + _2871) < 0.5))
        {
            _3037 = true;
            break;
        }
        if ((_2864 + 1.0) < _2862.x)
        {
            _3037 = true;
            break;
        }
        _3037 = false;
        break;
    }
    float _3241;
    if (_3037)
    {
        discard_state = true;
        _3241 = 0.0;
    }
    else
    {
        _3241 = cbInstanceData._m0[_2725].w;
    }
    SV_Target.x = _2868;
    SV_Target.y = _2869;
    SV_Target.z = _2870;
    SV_Target.w = _3241;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2725].w;
    discard_exit();
}


