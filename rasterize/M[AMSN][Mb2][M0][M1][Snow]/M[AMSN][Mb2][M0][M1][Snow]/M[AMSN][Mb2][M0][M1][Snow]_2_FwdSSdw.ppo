#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3364 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3375 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))));
    float _321 = fma(_318, _230, fma(_312, _223, _310 * _209));
    float _324 = fma(_318, _231, fma(_312, _224, _310 * _210));
    float _327 = fma(_318, _232, fma(_312, _225, _310 * _211));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    vec4 _359 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _363 = (cbMtdParam._m0[11u].z + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_359.x * cbMtdParam._m0[11u].w);
    float _3386 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    vec4 _381 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _386 = _381.x * cbMtdParam._m0[9u].x;
    float _387 = _381.y * cbMtdParam._m0[9u].y;
    float _388 = _381.z * cbMtdParam._m0[9u].z;
    vec4 _407 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _421 = (((_407.x * cbMtdParam._m0[10u].x) - _386) * _297) + _386;
    float _422 = (((_407.y * cbMtdParam._m0[10u].y) - _387) * _297) + _387;
    float _423 = (((_407.z * cbMtdParam._m0[10u].z) - _388) * _297) + _388;
    vec4 _436 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _447 = ((_436.x - _421) * _364) + _421;
    float _448 = ((_436.y - _422) * _364) + _422;
    float _449 = ((_436.z - _423) * _364) + _423;
    vec4 _462 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _469 = (_462.x * 2.0) + (-1.0);
    float _470 = (_462.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3397 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _479 = ((_462.z - _306) * _364) + _306;
    float _486 = ((_469 - _310) * _364) + _310;
    float _487 = ((_470 - _312) * _364) + _312;
    float _488 = ((sqrt(1.0 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) - _318) * _364) + _318;
    float _491 = fma(_488, _230, fma(_487, _223, _486 * _209));
    float _494 = fma(_488, _231, fma(_487, _224, _486 * _210));
    float _497 = fma(_488, _232, fma(_487, _225, _486 * _211));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3408 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _505 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3430 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3441 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _610 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _613 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _616 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _629 = uint(roundEven(NORMAL.w)) * 13u;
    uint _631 = (_629 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3452 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    vec4 _651 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _654 = _651.x * TEXCOORD_9.w;
    float _655 = dot(vec3(_502, _503, _504), vec3(_581, _582, _583));
    float _658 = _655 * 2.0;
    float _662 = (_658 * _502) - _581;
    float _663 = (_658 * _503) - _582;
    float _664 = (_658 * _504) - _583;
    float _668 = abs(dot(vec3(_581, _582, _583), vec3(_502, _503, _504)));
    float _3485 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = sqrt(_505);
    float _683 = exp2((_670 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_670 * 3.0));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715));
        float _754 = fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715));
        float _758 = fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715));
        float _783 = _715 + _502;
        float _784 = _719 + _503;
        float _785 = _723 + _504;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_502, _503, _504), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3533 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_502, _503, _504), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3566 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_502, _503, _504), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3599 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1066 = fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715));
        float _1070 = fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715));
        float _1074 = fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715));
        float _1097 = _715 + _502;
        float _1098 = _719 + _503;
        float _1099 = _723 + _504;
        float _1109 = fma(_1099, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1066 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1070 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[35u].z) + ((((((_1074 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1165 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1132.x + (-0.5));
        float _1167 = _1165 * (_1132.y + (-0.5));
        float _1168 = _1165 * (_1132.z + (-0.5));
        float _1175 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1139.x + (-0.5));
        float _1177 = _1175 * (_1139.y + (-0.5));
        float _1178 = _1175 * (_1139.z + (-0.5));
        float _1185 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1146.x + (-0.5));
        float _1187 = _1185 * (_1146.y + (-0.5));
        float _1188 = _1185 * (_1146.z + (-0.5));
        float _1195 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1153.x + (-0.5));
        float _1197 = _1195 * (_1153.y + (-0.5));
        float _1198 = _1195 * (_1153.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_502, _503, _504), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3662 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1229 + 1.0))) + _1234) * _1199;
        float _1244 = _1167 * 0.5;
        float _1245 = _1177 * 0.5;
        float _1246 = _1187 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_502, _503, _504), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3695 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1271 + 1.0))) + _1276) * _1200;
        float _1286 = _1168 * 0.5;
        float _1287 = _1178 * 0.5;
        float _1288 = _1188 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_502, _503, _504), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3728 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1313 + 1.0))) + _1318) * _1201;
        _1335 = _1168;
        _1336 = _1167;
        _1337 = _1166;
        _1338 = _1178;
        _1339 = _1177;
        _1340 = _1176;
        _1341 = _1188;
        _1342 = _1187;
        _1343 = _1186;
        _1344 = _1201;
        _1345 = _1200;
        _1346 = _1199;
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1026;
        _1336 = _1026;
        _1337 = _1026;
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1039)) + _1039;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1382 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1359));
    float _1403 = _662 * 0.5;
    float _1404 = _663 * 0.5;
    float _1405 = _664 * 0.5;
    float _1406 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1409 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1412 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1446;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1419 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1423 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1427 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1434 = dot(vec4(cbModelParam._m0[39u]), vec4(_1403, _1404, _1405, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1457;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1448 = dot(vec4(cbModelParam._m0[40u]), vec4(_1403, _1404, _1405, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1461 = (_1457 * cbModelParam._m0[1u].x) + (_1446 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1471 : min(cbModelParam._m0[25u].z, _1471));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_664, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662));
        float _1535 = fma(_664, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662));
        float _1538 = fma(_664, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1566 = frontier_phi_16_14_ladder;
        }
        float _1791;
        if (_1535 > 0.0)
        {
            _1791 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1791 = frontier_phi_25_21_ladder;
        }
        float _2037;
        if (_1538 > 0.0)
        {
            _2037 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2037 = frontier_phi_37_32_ladder;
        }
        float _2039 = isnan(_1791) ? _1566 : (isnan(_1566) ? _1791 : min(_1566, _1791));
        float _2040 = isnan(_2037) ? _2039 : (isnan(_2039) ? _2037 : min(_2039, _2037));
        float _2044 = (_2040 * _1532) + _1521;
        float _2045 = (_2040 * _1535) + _1525;
        float _2046 = (_2040 * _1538) + _1529;
        float _2047 = _2040 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2047;
        float _2051 = _2047 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 > _2051) || ((_2045 < _2049) || ((_2044 < _2049) || (_2044 > _2051))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2046, cbModelParam._m0[9u].z, fma(_2045, cbModelParam._m0[9u].y, _2044 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2046, cbModelParam._m0[10u].z, fma(_2045, cbModelParam._m0[10u].y, _2044 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2046, cbModelParam._m0[11u].z, fma(_2045, cbModelParam._m0[11u].y, _2044 * cbModelParam._m0[11u].x))), _1472);
            frontier_phi_15_37_ladder = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2170.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2170.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_15_37_ladder_2;
        _1556 = frontier_phi_15_37_ladder_1;
        _1558 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_662, _663, _664), _1472);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1620 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1624 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1628 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1631 = fma(_664, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662));
        float _1634 = fma(_664, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662));
        float _1637 = fma(_664, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662));
        float _1796;
        if (_1631 > 0.0)
        {
            _1796 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1796 = frontier_phi_27_23_ladder;
        }
        float _2064;
        if (_1634 > 0.0)
        {
            _2064 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2064 = frontier_phi_39_34_ladder;
        }
        float _2269;
        if (_1637 > 0.0)
        {
            _2269 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2269 = frontier_phi_48_45_ladder;
        }
        float _2271 = isnan(_2064) ? _1796 : (isnan(_1796) ? _2064 : min(_1796, _2064));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1631) + _1620;
        float _2277 = (_2272 * _1634) + _1624;
        float _2278 = (_2272 * _1637) + _1628;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2279;
        float _2282 = _2279 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2278 > _2282) || ((_2278 < _2280) || ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 < _2280) || (_2276 > _2282))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2278, cbModelParam._m0[17u].z, fma(_2277, cbModelParam._m0[17u].y, _2276 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2278, cbModelParam._m0[18u].z, fma(_2277, cbModelParam._m0[18u].y, _2276 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2278, cbModelParam._m0[19u].z, fma(_2277, cbModelParam._m0[19u].y, _2276 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_24_48_ladder = _2476.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2476.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2476.x * cbModelParam._m0[1u].z;
        }
        _1656 = frontier_phi_24_48_ladder_2;
        _1658 = frontier_phi_24_48_ladder_1;
        _1660 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_662, _663, _664), _1563);
        _1656 = _1640.x * cbModelParam._m0[1u].z;
        _1658 = _1640.y * cbModelParam._m0[1u].z;
        _1660 = _1640.z * cbModelParam._m0[1u].z;
    }
    float _1672 = ((((1.0 - _683) * ((_670 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_683 * _670)) * _654;
    float _1673 = _1672 * ((cbModelParam._m0[1u].w * (_1656 - _1554)) + _1554);
    float _1674 = _1672 * ((cbModelParam._m0[1u].w * (_1658 - _1556)) + _1556);
    float _1675 = _1672 * ((cbModelParam._m0[1u].w * (_1660 - _1558)) + _1558);
    float _1678 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, _1673 * cbSceneParam._m0[91u].x));
    vec4 _1692 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_589, _590));
    float _1694 = _1692.w;
    float _1706 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1694);
    float _1707 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1694);
    float _1708 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1694);
    uvec4 _1712 = floatBitsToUint(cbInstanceData._m0[_629 + 5u]);
    uint _1714 = _1712.x * 14u;
    uint _1715 = _1714 + 13u;
    float _1722 = _654 + (-1.0);
    float _1727 = (cbLight._m0[_1715].x * _1722) + 1.0;
    float _1728 = (cbLight._m0[_1715].y * _1722) + 1.0;
    float _1729 = (cbLight._m0[_1715].z * _1722) + 1.0;
    float _1730 = (cbLight._m0[_1715].w * _1722) + 1.0;
    uint _1731 = _1714 + 5u;
    float _1737 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
    uint _1741 = _1714 + 4u;
    float _1750 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
    uint _1754 = _1714 | 1u;
    float _1765 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_502, _503, _504));
    float _1768 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_502, _503, _504));
    float _3864 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _3875 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1773 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1775 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1782 = ((cbLight._m0[_1731].x * _1737) * _1775) + (((cbLight._m0[_1741].x * _1706) * _1750) * _1773);
    float _1783 = ((_1737 * cbLight._m0[_1731].y) * _1775) + (((cbLight._m0[_1741].y * _1707) * _1750) * _1773);
    float _1784 = ((_1737 * cbLight._m0[_1731].z) * _1775) + (((cbLight._m0[_1741].z * _1708) * _1750) * _1773);
    uvec4 _1788 = floatBitsToUint(cbLight._m0[_1714 + 12u]);
    bool _1790 = _1788.x == 0u;
    float _1801;
    float _1803;
    float _1805;
    if (_1790)
    {
        _1801 = _1782;
        _1803 = _1783;
        _1805 = _1784;
    }
    else
    {
        uint _1809 = _1714 + 6u;
        float _1825 = (dot(vec3(cbLight._m0[_1714 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3886 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1828 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _1801 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1782;
        _1803 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1783;
        _1805 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1784;
    }
    bool _1808 = _1788.y == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1808)
    {
        _1846 = _1801;
        _1848 = _1803;
        _1850 = _1805;
    }
    else
    {
        uint _2008 = _1714 + 7u;
        float _2024 = (dot(vec3(cbLight._m0[_1714 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _3902 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2027 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _1846 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1801;
        _1848 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1803;
        _1850 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1805;
    }
    uint _1853 = _1714 + 8u;
    float _1866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1714].w)) * _505) * 0.949999988079071044921875);
    float _1867 = _1866 * _1866;
    float _1868 = cbLight._m0[_1714].x + _581;
    float _1869 = cbLight._m0[_1714].y + _582;
    float _1870 = cbLight._m0[_1714].z + _583;
    float _1874 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
    float _1875 = _1874 * _1868;
    float _1876 = _1874 * _1869;
    float _1877 = _1874 * _1870;
    float _1878 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1714].xyz));
    float _3918 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _1882 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1883 = dot(vec3(_502, _503, _504), vec3(_1875, _1876, _1877));
    float _3940 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1875, _1876, _1877));
    float _3951 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1867 * _1867;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1906 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1907 = 1.0 - _1867;
    float _1918 = (0.5 / (((_1882 * ((_1881 * _1907) + _1867)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _1907) + _1867) * _1881))) * _1881;
    float _3962 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    uint _1934 = _1714 + 9u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _505) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1754].x + _581;
    float _1948 = cbLight._m0[_1754].y + _582;
    float _1949 = cbLight._m0[_1754].z + _583;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1754].xyz));
    float _3973 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1961 = dot(vec3(_502, _503, _504), vec3(_1954, _1955, _1956));
    float _3984 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1954, _1955, _1956));
    float _3995 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1946 * _1946;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1946;
    float _1993 = (0.5 / (((_1882 * ((_1960 * _1983) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _1983) + _1946) * _1960))) * _1960;
    float _4006 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    float _2005 = (((_1982 * cbLight._m0[_1934].x) * _1995) * _1737) + ((((cbLight._m0[_1853].x * _1706) * _1906) * _1920) * _1750);
    float _2006 = (((_1982 * cbLight._m0[_1934].y) * _1995) * _1737) + ((((cbLight._m0[_1853].y * _1707) * _1906) * _1920) * _1750);
    float _2007 = (((_1982 * cbLight._m0[_1934].z) * _1995) * _1737) + ((((cbLight._m0[_1853].z * _1708) * _1906) * _1920) * _1750);
    float _2069;
    float _2071;
    float _2073;
    if (_1790)
    {
        _2069 = _2005;
        _2071 = _2006;
        _2073 = _2007;
    }
    else
    {
        uint _2075 = _1714 + 2u;
        uint _2079 = _1714 + 10u;
        float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _505) * 0.949999988079071044921875);
        float _2094 = _2093 * _2093;
        float _2095 = cbLight._m0[_2075].x + _581;
        float _2096 = cbLight._m0[_2075].y + _582;
        float _2097 = cbLight._m0[_2075].z + _583;
        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
        float _2102 = _2101 * _2095;
        float _2103 = _2101 * _2096;
        float _2104 = _2101 * _2097;
        float _2105 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2075].xyz));
        float _4017 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2109 = dot(vec3(_502, _503, _504), vec3(_2102, _2103, _2104));
        float _4028 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2113 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2102, _2103, _2104));
        float _4039 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2117 = _2094 * _2094;
        float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
        float _2130 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2131 = 1.0 - _2094;
        float _2141 = (0.5 / (((_1882 * ((_2108 * _2131) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _2131) + _2094) * _2108))) * _2108;
        float _4050 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2143 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
        float _2144 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _2069 = (((_2130 * cbLight._m0[_2079].x) * _2143) * _2144) + _2005;
        _2071 = (((_2130 * cbLight._m0[_2079].y) * _2143) * _2144) + _2006;
        _2073 = (((_2130 * cbLight._m0[_2079].z) * _2143) * _2144) + _2007;
    }
    float _2179;
    float _2181;
    float _2183;
    if (_1808)
    {
        _2179 = _2069;
        _2181 = _2071;
        _2183 = _2073;
    }
    else
    {
        uint _2190 = _1714 + 3u;
        uint _2194 = _1714 + 11u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _505) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _581;
        float _2211 = cbLight._m0[_2190].y + _582;
        float _2212 = cbLight._m0[_2190].z + _583;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2190].xyz));
        float _4066 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2224 = dot(vec3(_502, _503, _504), vec3(_2217, _2218, _2219));
        float _4077 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4088 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = 1.0 - _2209;
        float _2256 = (0.5 / (((_1882 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1882 * _2246) + _2209) * _2223))) * _2223;
        float _4099 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _2179 = (((_2245 * cbLight._m0[_2194].x) * _2258) * _2259) + _2069;
        _2181 = (((_2245 * cbLight._m0[_2194].y) * _2258) * _2259) + _2071;
        _2183 = (((_2245 * cbLight._m0[_2194].z) * _2258) * _2259) + _2073;
    }
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    if (_1712.y == 0u)
    {
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2334;
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2334;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2334;
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.x;
        uint _2361 = uint((float(_2349.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2350))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2350)));
        float _2371 = (log2(_2337 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2372 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        uint _2375 = uint(isnan(14.0) ? _2372 : (isnan(_2372) ? 14.0 : min(_2372, 14.0)));
        uvec4 _2380 = texelFetch(g_lightClusterGridBuffer, int(((_2375 << 2u) + (_2361 << 6u)) >> 2u));
        uint _2381 = _2380.x;
        uint _2382 = _2349.z;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((((1u << ((_2382 >> 4u) & 15u)) + 4294967295u) & _2381) == 0u) || ((_2382 & 240u) == 0u))
        {
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
        }
        else
        {
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            uint _2631 = 0u;
            uint _2640;
            bool _2641;
            for (;;)
            {
                _2640 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                _2641 = _2640 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2641)
                {
                    frontier_phi_63_pred = _2630;
                    frontier_phi_63_pred_1 = _2629;
                    frontier_phi_63_pred_2 = _2628;
                    frontier_phi_63_pred_3 = _2627;
                    frontier_phi_63_pred_4 = _2626;
                    frontier_phi_63_pred_5 = _2625;
                }
                else
                {
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    uint _2755;
                    _2749 = _2625;
                    _2750 = _2626;
                    _2751 = _2627;
                    _2752 = _2628;
                    _2753 = _2629;
                    _2754 = _2630;
                    _2755 = _2640;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    for (;;)
                    {
                        uint _2759 = uint(findLSB(_2755)) + (_2631 << 5u);
                        uint _2756 = (_2755 + 4294967295u) & _2755;
                        uint _2761 = _2759 * 48u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2781 = (_2759 * 48u) + 4u;
                        vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2800 = (_2759 * 48u) + 8u;
                        vec3 _2811 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x));
                        float _2815 = _2775.x - _2335;
                        float _2816 = _2775.y - _2336;
                        float _2817 = _2775.z - _2337;
                        float _2818 = dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817));
                        float _2821 = inversesqrt(_2818);
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2825 = dot(vec3(_610, _613, _616), vec3(_2822, _2823, _2824));
                        float _2830 = 1.0 - (_2818 * _2775.w);
                        float _4125 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2832 = sqrt(_2818) * _2794.w;
                        float _2835 = 1.39999997615814208984375 / (_2832 + 1.39999997615814208984375);
                        float _2836 = _2835 * _2835;
                        float _2839 = ((1.0 - _2836) * _2825) + _2836;
                        float _2842 = _2832 * _2832;
                        float _2846 = ((isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))) * _2831) / ((_2842 * 0.699999988079071044921875) + 1.0);
                        float _2850 = (-0.0) - _2335;
                        float _2851 = (-0.0) - _2336;
                        float _2852 = (-0.0) - _2337;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2867 = exp2(log2(1.0 / ((_2842 * 3.5) + 5.0)) * 0.25);
                        float _2868 = 1.0 - _670;
                        float _2875 = sqrt(1.0 - ((1.0 - (_2868 * _2868)) * (1.0 - (_2867 * _2867))));
                        float _2876 = _2875 * _2875;
                        float _2877 = _2876 * _2876;
                        float _2878 = _2857 + _2822;
                        float _2879 = _2858 + _2823;
                        float _2880 = _2859 + _2824;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2888 = dot(vec3(_610, _613, _616), vec3(_2857, _2858, _2859));
                        float _4141 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2892 = dot(vec3(_610, _613, _616), vec3(_2884 * _2878, _2884 * _2879, _2884 * _2880));
                        float _4152 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2899 = ((_2895 * _2895) * (_2877 + (-1.0))) + 1.0;
                        float _2900 = _2835 * _2876;
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2825) + _2901;
                        float _4163 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2906 = 1.0 - _2876;
                        float _2916 = (0.5 / (((_2905 * ((_2891 * _2906) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2905 * _2906) + _2876) * _2891))) * _2905;
                        float _4174 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2927 = (((_2877 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_2899 * _2899) * ((_2842 * 2.1991131305694580078125) + 3.141590118408203125))) * _2831;
                        _2684 = (_2846 * _2794.x) + _2752;
                        _2685 = (_2846 * _2794.y) + _2753;
                        _2686 = (_2846 * _2794.z) + _2754;
                        _2681 = (_2927 * _2811.x) + _2749;
                        _2682 = (_2927 * _2811.y) + _2750;
                        _2683 = (_2927 * _2811.z) + _2751;
                        if (_2756 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2749 = _2681;
                            _2750 = _2682;
                            _2751 = _2683;
                            _2752 = _2684;
                            _2753 = _2685;
                            _2754 = _2686;
                            _2755 = _2756;
                        }
                    }
                    frontier_phi_63_pred = _2686;
                    frontier_phi_63_pred_1 = _2685;
                    frontier_phi_63_pred_2 = _2684;
                    frontier_phi_63_pred_3 = _2683;
                    frontier_phi_63_pred_4 = _2682;
                    frontier_phi_63_pred_5 = _2681;
                }
                _2492 = frontier_phi_63_pred;
                _2490 = frontier_phi_63_pred_1;
                _2488 = frontier_phi_63_pred_2;
                _2486 = frontier_phi_63_pred_3;
                _2484 = frontier_phi_63_pred_4;
                _2482 = frontier_phi_63_pred_5;
                uint _2632 = _2631 + 1u;
                if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2625 = _2482;
                    _2626 = _2484;
                    _2627 = _2486;
                    _2628 = _2488;
                    _2629 = _2490;
                    _2630 = _2492;
                    _2631 = _2632;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
        }
        uvec4 _2495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2496 = _2495.z;
        uint _2498 = (_2496 >> 8u) & 15u;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        if (((4294967295u << _2498) & _2381) == 0u)
        {
            _2593 = _2481;
            _2595 = _2483;
            _2597 = _2485;
            _2599 = _2487;
            _2601 = _2489;
            _2603 = _2491;
        }
        else
        {
            float _2618 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
            float _2619 = _2618 * _2335;
            float _2620 = _2618 * _2336;
            float _2621 = _2618 * _2337;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2498 < ((_2496 >> 12u) & 15u))
            {
                float _2594;
                float _2596;
                float _2598;
                float _2600;
                float _2602;
                float _2604;
                float _2732 = _2481;
                float _2733 = _2483;
                float _2734 = _2485;
                float _2735 = _2487;
                float _2736 = _2489;
                float _2737 = _2491;
                uint _2738 = _2498;
                uint _2747;
                bool _2748;
                for (;;)
                {
                    _2747 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                    _2748 = _2747 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2748)
                    {
                        frontier_phi_69_pred = _2737;
                        frontier_phi_69_pred_1 = _2736;
                        frontier_phi_69_pred_2 = _2735;
                        frontier_phi_69_pred_3 = _2734;
                        frontier_phi_69_pred_4 = _2733;
                        frontier_phi_69_pred_5 = _2732;
                    }
                    else
                    {
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _2945 = _2732;
                        float _2946 = _2733;
                        float _2947 = _2734;
                        float _2948 = _2735;
                        float _2949 = _2736;
                        float _2950 = _2737;
                        uint _2951 = _2747;
                        uint _2952;
                        vec4 _2977;
                        float _2978;
                        vec4 _2993;
                        vec3 _3005;
                        vec4 _3021;
                        vec4 _3037;
                        float _3084;
                        bool _3085;
                        for (;;)
                        {
                            uint _2962 = ((_2738 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2951));
                            _2952 = (_2951 + 4294967295u) & _2951;
                            uint _2964 = _2962 * 40u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            _2978 = _2977.w;
                            uint _2980 = (_2962 * 40u) + 4u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2995 = (_2962 * 40u) + 8u;
                            _3005 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x));
                            uint _3008 = (_2962 * 40u) + 16u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3024 = (_2962 * 40u) + 20u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3040 = (_2962 * 40u) + 24u;
                            vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3059 = (_2962 * 40u) + 28u;
                            vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3084 = fma(_2337, _3072.z, fma(_2336, _3072.y, _3072.x * _2335)) + _3072.w;
                            _3085 = !((fma(_2337, _3053.z, fma(_2336, _3053.y, _3053.x * _2335)) + _3053.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3085)
                            {
                                float _3112 = _2977.x - _2335;
                                float _3113 = _2977.y - _2336;
                                float _3114 = _2977.z - _2337;
                                float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                                float _3118 = inversesqrt(_3115);
                                float _3119 = _3118 * _3112;
                                float _3120 = _3118 * _3113;
                                float _3121 = _3118 * _3114;
                                float _3125 = 1.0 - (_3115 / (_2978 * _2978));
                                float _4185 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3130 = sqrt(_3115) * _2993.w;
                                float _3132 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                                float _3133 = _3132 * _3132;
                                float _3136 = ((1.0 - _3133) * dot(vec3(_3119, _3120, _3121), vec3(_610, _613, _616))) + _3133;
                                float _3139 = _3130 * _3130;
                                float _3143 = (fma(_2337, _3021.z, fma(_2336, _3021.y, _3021.x * _2335)) + _3021.w) / _3084;
                                float _3144 = (fma(_2337, _3037.z, fma(_2336, _3037.y, _3037.x * _2335)) + _3037.w) / _3084;
                                float _3148 = 1.0 - dot(vec2(_3143, _3144), vec2(_3143, _3144));
                                float _4201 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3150 = _3149 * (((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3126) / ((_3139 * 0.699999988079071044921875) + 1.0));
                                float _3162 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                                float _3163 = 1.0 - _670;
                                float _3170 = sqrt(1.0 - ((1.0 - (_3163 * _3163)) * (1.0 - (_3162 * _3162))));
                                float _3171 = _3170 * _3170;
                                float _3172 = _3171 * _3171;
                                float _3173 = _3119 - _2619;
                                float _3174 = _3120 - _2620;
                                float _3175 = _3121 - _2621;
                                float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                                float _3183 = dot(vec3(_610, _613, _616), vec3((-0.0) - _2619, (-0.0) - _2620, (-0.0) - _2621));
                                float _4212 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3186 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3187 = dot(vec3(_610, _613, _616), vec3(_3179 * _3173, _3179 * _3174, _3179 * _3175));
                                float _4223 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3190 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3194 = ((_3190 * _3190) * (_3172 + (-1.0))) + 1.0;
                                float _3195 = _3132 * _3171;
                                float _3196 = _3195 * _3195;
                                float _3202 = ((1.0 - _3196) * dot(vec3(_610, _613, _616), vec3(_3119, _3120, _3121))) + _3196;
                                float _4234 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3204 = 1.0 - _3171;
                                float _3214 = (0.5 / (((_3203 * ((_3186 * _3204) + _3171)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3171) * _3186))) * _3203;
                                float _4245 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3224 = (_3149 * _3126) * (((_3172 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_3194 * _3194) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3150 * _2993.z;
                                frontier_phi_75_pred_1 = _3150 * _2993.y;
                                frontier_phi_75_pred_2 = _3150 * _2993.x;
                                frontier_phi_75_pred_3 = _3224 * _3005.z;
                                frontier_phi_75_pred_4 = _3224 * _3005.y;
                                frontier_phi_75_pred_5 = _3224 * _3005.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3233 = frontier_phi_75_pred;
                            _3232 = frontier_phi_75_pred_1;
                            _3231 = frontier_phi_75_pred_2;
                            _3230 = frontier_phi_75_pred_3;
                            _3229 = frontier_phi_75_pred_4;
                            _3228 = frontier_phi_75_pred_5;
                            _2935 = _3231 + _2948;
                            _2936 = _3232 + _2949;
                            _2937 = _3233 + _2950;
                            _2932 = _3228 + _2945;
                            _2933 = _3229 + _2946;
                            _2934 = _3230 + _2947;
                            if (_2952 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2952;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2937;
                        frontier_phi_69_pred_1 = _2936;
                        frontier_phi_69_pred_2 = _2935;
                        frontier_phi_69_pred_3 = _2934;
                        frontier_phi_69_pred_4 = _2933;
                        frontier_phi_69_pred_5 = _2932;
                    }
                    _2604 = frontier_phi_69_pred;
                    _2602 = frontier_phi_69_pred_1;
                    _2600 = frontier_phi_69_pred_2;
                    _2598 = frontier_phi_69_pred_3;
                    _2596 = frontier_phi_69_pred_4;
                    _2594 = frontier_phi_69_pred_5;
                    uint _2739 = _2738 + 1u;
                    if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2732 = _2594;
                        _2733 = _2596;
                        _2734 = _2598;
                        _2735 = _2600;
                        _2736 = _2602;
                        _2737 = _2604;
                        _2738 = _2739;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2604;
                frontier_phi_57_58_ladder_1 = _2602;
                frontier_phi_57_58_ladder_2 = _2600;
                frontier_phi_57_58_ladder_3 = _2598;
                frontier_phi_57_58_ladder_4 = _2596;
                frontier_phi_57_58_ladder_5 = _2594;
            }
            else
            {
                frontier_phi_57_58_ladder = _2491;
                frontier_phi_57_58_ladder_1 = _2489;
                frontier_phi_57_58_ladder_2 = _2487;
                frontier_phi_57_58_ladder_3 = _2485;
                frontier_phi_57_58_ladder_4 = _2483;
                frontier_phi_57_58_ladder_5 = _2481;
            }
            _2593 = frontier_phi_57_58_ladder_5;
            _2595 = frontier_phi_57_58_ladder_4;
            _2597 = frontier_phi_57_58_ladder_3;
            _2599 = frontier_phi_57_58_ladder_2;
            _2601 = frontier_phi_57_58_ladder_1;
            _2603 = frontier_phi_57_58_ladder;
        }
        float _2608 = isnan(1.0) ? _654 : (isnan(_654) ? 1.0 : min(_654, 1.0));
        _2393 = (_2608 * _2599) + _1846;
        _2395 = (_2608 * _2601) + _1848;
        _2397 = (_2608 * _2603) + _1850;
        _2399 = ((_2593 * 0.039999999105930328369140625) * _2608) + _2179;
        _2401 = ((_2595 * 0.039999999105930328369140625) * _2608) + _2181;
        _2403 = ((_2597 * 0.039999999105930328369140625) * _2608) + _2183;
    }
    else
    {
        _2393 = _1846;
        _2395 = _1848;
        _2397 = _1850;
        _2399 = _2179;
        _2401 = _2181;
        _2403 = _2183;
    }
    float _4261 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4272 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4283 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    uint _2423 = _629 + 6u;
    float _2431 = _589 / cbSceneParam._m0[86u].x;
    float _2432 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2446 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2431, _2432, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2448 = _2446.x;
    float _2449 = _2446.y;
    float _2450 = _2446.z;
    float _2451 = _2446.w;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2506 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2507 = _2506 / _524;
        float _2518 = _2507 * _574;
        float _2519 = _575 * _2507;
        float _2520 = (-0.0) - _2519;
        float _2521 = _2507 * _576;
        float _2523 = (cbSceneParam._m0[77u].w * _2520) / _2506;
        float _2524 = _2523 + cbSceneParam._m0[79u].w;
        float _2525 = cbSceneParam._m0[79u].w - _2519;
        float _2531 = sqrt(((_2518 * _2518) + (_2519 * _2519)) + (_2521 * _2521));
        float _2534 = (1.0 - (cbSceneParam._m0[77u].w / _2506)) * _2531;
        float _2539 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2541 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2694;
        if (abs((_2520 - _2523) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2694 = ((((_2524 > 0.0) ? exp2(_2539 * _2524) : (2.0 - exp2(_2541 * _2524))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2534;
        }
        else
        {
            float _2654 = 1.0 / cbSceneParam._m0[80u].x;
            float _2655 = isnan(_2525) ? _2524 : (isnan(_2524) ? _2525 : max(_2524, _2525));
            float _2656 = isnan(_2525) ? _2524 : (isnan(_2524) ? _2525 : min(_2524, _2525));
            float _2665 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : min(_2655, 0.0));
            float _2666 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : min(_2656, 0.0));
            _2694 = ((abs(_2531 / _2520) * cbSceneParam._m0[80u].y) * ((((_2665 - _2666) * 2.0) - ((exp2(_2539 * (isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0)))) - exp2(_2539 * (isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))))) * _2654)) - ((exp2(_2541 * _2665) - exp2(_2541 * _2666)) * _2654))) + (_2534 * cbSceneParam._m0[80u].z);
        }
        vec4 _2696 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2431, _2432, 1.0), 0.0);
        float _2705 = exp2((_2694 * (-1.44269502162933349609375)) * (1.0 - _2696.w));
        float _2706 = log2(_2705);
        float _2722 = log2(_2451);
        _2543 = (exp2(_2722 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].x)) * _2696.x) / cbSceneParam._m0[78u].x)) + _2448;
        _2545 = (exp2(_2722 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].y)) * _2696.y) / cbSceneParam._m0[78u].y)) + _2449;
        _2547 = (exp2(_2722 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].z)) * _2696.z) / cbSceneParam._m0[78u].z)) + _2450;
        _2549 = _2705 * _2451;
    }
    else
    {
        _2543 = _2448;
        _2545 = _2449;
        _2547 = _2450;
        _2549 = _2451;
    }
    float _2561 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2562 = _2561 == 3.0;
    float _2563 = log2(_2549);
    float _2570 = exp2(_2563 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2393 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _654))) + ((_2399 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1461)) * cbPerFrame._m0[3u].x));
    float _2571 = exp2(_2563 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2395 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _654))) + ((_2401 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1461)) * cbPerFrame._m0[3u].x));
    float _2572 = exp2(_2563 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2397 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _654))) + ((_2403 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1461)) * cbPerFrame._m0[3u].x));
    float _2581 = (_2561 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2581 * (_2562 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2543)));
    SV_Target.y = _2581 * (_2562 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2545)));
    SV_Target.z = _2581 * (_2562 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2547)));
    SV_Target.w = cbInstanceData._m0[_2423].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2423].w;
}


