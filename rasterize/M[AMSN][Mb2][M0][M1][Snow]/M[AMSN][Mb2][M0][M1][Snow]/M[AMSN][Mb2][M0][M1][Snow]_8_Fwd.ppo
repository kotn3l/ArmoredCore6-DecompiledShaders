#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _910;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _241 = _238.x;
    float _242 = _238.y;
    float _243 = _238.z;
    vec4 _275 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _288 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3225 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _289 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
    float _298 = ((_275.z - _243) * _289) + _243;
    float _302 = ((((_275.x - _241) * _289) + _241) * 2.0) + (-1.0);
    float _304 = ((((_275.y - _242) * _289) + _242) * 2.0) + (-1.0);
    float _305 = dot(vec2(_302, _304), vec2(_302, _304));
    float _3236 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _310 = sqrt(1.0 - (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))));
    vec4 _328 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _333 = _328.x * cbMtdParam._m0[9u].x;
    float _334 = _328.y * cbMtdParam._m0[9u].y;
    float _335 = _328.z * cbMtdParam._m0[9u].z;
    vec4 _354 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _368 = (((_354.x * cbMtdParam._m0[10u].x) - _333) * _289) + _333;
    float _369 = (((_354.y * cbMtdParam._m0[10u].y) - _334) * _289) + _334;
    float _370 = (((_354.z * cbMtdParam._m0[10u].z) - _335) * _289) + _335;
    float _373 = fma(_310, _222, fma(_304, _214 * TANGENT.x, (_200 * _192) * _302));
    float _376 = fma(_310, _223, fma(_304, _214 * TANGENT.y, (_200 * _193) * _302));
    float _379 = fma(_310, _224, fma(_304, _214 * TANGENT.z, (_200 * _194) * _302));
    float _383 = inversesqrt(dot(vec3(_373, _376, _379), vec3(_373, _376, _379)));
    float _384 = _383 * _373;
    float _385 = _383 * _376;
    float _386 = _383 * _379;
    float _3247 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _387 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _3258 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3269 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3280 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _406 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _457 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _447);
    float _458 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _447);
    float _459 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _447);
    float _463 = inversesqrt(dot(vec3(_457, _458, _459), vec3(_457, _458, _459)));
    float _464 = _457 * _463;
    float _465 = _458 * _463;
    float _466 = _459 * _463;
    float _472 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _473 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _494 = fma(_386, cbSceneParam._m0[5u].z, fma(_385, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _384));
    float _497 = fma(_386, cbSceneParam._m0[6u].z, fma(_385, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _384));
    float _500 = fma(_386, cbSceneParam._m0[7u].z, fma(_385, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _384));
    uint _513 = uint(roundEven(NORMAL.w)) * 13u;
    uint _515 = (_513 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _521 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_515].x;
    float _522 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_515].y;
    float _523 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_515].z;
    float _3291 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    vec4 _535 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _472, cbSceneParam._m0[86u].y * _473));
    float _538 = _535.x * TEXCOORD_9.w;
    float _539 = dot(vec3(_384, _385, _386), vec3(_464, _465, _466));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _384) - _464;
    float _547 = (_542 * _385) - _465;
    float _548 = (_542 * _386) - _466;
    float _552 = abs(dot(vec3(_464, _465, _466), vec3(_384, _385, _386)));
    float _3324 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_387);
    float _567 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _909;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _634 = fma(_607, cbModelParam._m0[26u].z, fma(_603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599));
        float _638 = fma(_607, cbModelParam._m0[27u].z, fma(_603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599));
        float _642 = fma(_607, cbModelParam._m0[28u].z, fma(_603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599));
        float _667 = _599 + _384;
        float _668 = _603 + _385;
        float _669 = _607 + _386;
        float _679 = fma(_669, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667)) - _634;
        float _680 = fma(_669, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667)) - _638;
        float _681 = fma(_669, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667)) - _642;
        float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
        float _698 = ((_685 * _679) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_634 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_685 * _680) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_638 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_685 * _681) / cbModelParam._m0[34u].z) + ((((((_642 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        float _737 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_703.x + (-0.5));
        float _739 = _737 * (_703.y + (-0.5));
        float _740 = _737 * (_703.z + (-0.5));
        float _747 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_710.x + (-0.5));
        float _749 = _747 * (_710.y + (-0.5));
        float _750 = _747 * (_710.z + (-0.5));
        float _757 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_717.x + (-0.5));
        float _759 = _757 * (_717.y + (-0.5));
        float _760 = _757 * (_717.z + (-0.5));
        float _767 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_724.x + (-0.5));
        float _769 = _767 * (_724.y + (-0.5));
        float _770 = _767 * (_724.z + (-0.5));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = _738 * 0.5;
        float _775 = _748 * 0.5;
        float _776 = _758 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _791 = (dot(vec3(_384, _385, _386), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _801 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3372 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_803 + 1.0))) + _808) * _771;
        float _818 = _739 * 0.5;
        float _819 = _749 * 0.5;
        float _820 = _759 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_384, _385, _386), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3405 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_845 + 1.0))) + _850) * _772;
        float _860 = _740 * 0.5;
        float _861 = _750 * 0.5;
        float _862 = _760 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_384, _385, _386), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3438 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_887 + 1.0))) + _892) * _773;
        _909 = _740;
        _911 = _739;
        _912 = _738;
        _913 = _750;
        _914 = _749;
        _915 = _748;
        _916 = _760;
        _917 = _759;
        _918 = _758;
        _919 = _773;
        _920 = _772;
        _921 = _771;
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
    }
    else
    {
        _909 = _910;
        _911 = _910;
        _912 = _910;
        _913 = _910;
        _914 = _910;
        _915 = _910;
        _916 = _910;
        _917 = _910;
        _918 = _910;
        _919 = _910;
        _920 = _910;
        _921 = _910;
        _922 = 0.0;
        _923 = 0.0;
        _924 = 0.0;
    }
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _950 = fma(_607, cbModelParam._m0[30u].z, fma(_603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _599));
        float _954 = fma(_607, cbModelParam._m0[31u].z, fma(_603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _599));
        float _958 = fma(_607, cbModelParam._m0[32u].z, fma(_603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _599));
        float _981 = _599 + _384;
        float _982 = _603 + _385;
        float _983 = _607 + _386;
        float _993 = fma(_983, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981)) - _950;
        float _994 = fma(_983, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981)) - _954;
        float _995 = fma(_983, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981)) - _958;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_950 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_954 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[35u].z) + ((((((_958 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1049 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1016.x + (-0.5));
        float _1051 = _1049 * (_1016.y + (-0.5));
        float _1052 = _1049 * (_1016.z + (-0.5));
        float _1059 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1023.x + (-0.5));
        float _1061 = _1059 * (_1023.y + (-0.5));
        float _1062 = _1059 * (_1023.z + (-0.5));
        float _1069 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1030.x + (-0.5));
        float _1071 = _1069 * (_1030.y + (-0.5));
        float _1072 = _1069 * (_1030.z + (-0.5));
        float _1079 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1037.x + (-0.5));
        float _1081 = _1079 * (_1037.y + (-0.5));
        float _1082 = _1079 * (_1037.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_384, _385, _386), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3501 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1113 + 1.0))) + _1118) * _1083;
        float _1128 = _1051 * 0.5;
        float _1129 = _1061 * 0.5;
        float _1130 = _1071 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_384, _385, _386), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3534 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1155 + 1.0))) + _1160) * _1084;
        float _1170 = _1052 * 0.5;
        float _1171 = _1062 * 0.5;
        float _1172 = _1072 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_384, _385, _386), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3567 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1197 + 1.0))) + _1202) * _1085;
        _1219 = _1052;
        _1220 = _1051;
        _1221 = _1050;
        _1222 = _1062;
        _1223 = _1061;
        _1224 = _1060;
        _1225 = _1072;
        _1226 = _1071;
        _1227 = _1070;
        _1228 = _1085;
        _1229 = _1084;
        _1230 = _1083;
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _910;
        _1220 = _910;
        _1221 = _910;
        _1222 = _910;
        _1223 = _910;
        _1224 = _910;
        _1225 = _910;
        _1226 = _910;
        _1227 = _910;
        _1228 = _910;
        _1229 = _910;
        _1230 = _910;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _922)) + _922;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1266 = fma(_1245, cbSceneParam._m0[89u].z, fma(_1244, cbSceneParam._m0[89u].y, _1243 * cbSceneParam._m0[89u].x));
    float _1269 = fma(_1245, cbSceneParam._m0[90u].z, fma(_1244, cbSceneParam._m0[90u].y, _1243 * cbSceneParam._m0[90u].x));
    float _1272 = fma(_1245, cbSceneParam._m0[91u].z, fma(_1244, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1243));
    float _1287 = _546 * 0.5;
    float _1288 = _547 * 0.5;
    float _1289 = _548 * 0.5;
    float _1290 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1293 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1296 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1330;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1303 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_909, _913, _916, _919));
        float _1307 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_911, _914, _917, _920));
        float _1311 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_912, _915, _918, _921));
        float _1318 = dot(vec4(cbModelParam._m0[39u]), vec4(_1287, _1288, _1289, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1341;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1332 = dot(vec4(cbModelParam._m0[40u]), vec4(_1287, _1288, _1289, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1345 = (_1341 * cbModelParam._m0[1u].x) + (_1330 * (1.0 - cbModelParam._m0[1u].x));
    float _1355 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _387);
    float _1356 = isnan(_1355) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1355 : min(cbModelParam._m0[25u].z, _1355));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1405 = fma(_607, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599)) + cbModelParam._m0[13u].w;
        float _1409 = fma(_607, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599)) + cbModelParam._m0[14u].w;
        float _1413 = fma(_607, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599)) + cbModelParam._m0[15u].w;
        float _1416 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1419 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1422 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1450;
        if (_1416 > 0.0)
        {
            _1450 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1450 = frontier_phi_16_14_ladder;
        }
        float _1655;
        if (_1419 > 0.0)
        {
            _1655 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1655 = frontier_phi_25_21_ladder;
        }
        float _1898;
        if (_1422 > 0.0)
        {
            _1898 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1898 = frontier_phi_37_32_ladder;
        }
        float _1900 = isnan(_1655) ? _1450 : (isnan(_1450) ? _1655 : min(_1450, _1655));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1416) + _1405;
        float _1906 = (_1901 * _1419) + _1409;
        float _1907 = (_1901 * _1422) + _1413;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1908;
        float _1912 = _1908 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 > _1912) || ((_1906 < _1910) || ((_1905 < _1910) || (_1905 > _1912))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1907, cbModelParam._m0[9u].z, fma(_1906, cbModelParam._m0[9u].y, _1905 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1907, cbModelParam._m0[10u].z, fma(_1906, cbModelParam._m0[10u].y, _1905 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1907, cbModelParam._m0[11u].z, fma(_1906, cbModelParam._m0[11u].y, _1905 * cbModelParam._m0[11u].x))), _1356);
            frontier_phi_15_37_ladder = _2031.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2031.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2031.x * cbModelParam._m0[1u].y;
        }
        _1438 = frontier_phi_15_37_ladder_2;
        _1440 = frontier_phi_15_37_ladder_1;
        _1442 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1356);
        _1438 = _1426.x * cbModelParam._m0[1u].y;
        _1440 = _1426.y * cbModelParam._m0[1u].y;
        _1442 = _1426.z * cbModelParam._m0[1u].y;
    }
    float _1446 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _387);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1446 : min(cbModelParam._m0[25u].w, _1446));
    float _1540;
    float _1542;
    float _1544;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1504 = fma(_607, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599)) + cbModelParam._m0[21u].w;
        float _1508 = fma(_607, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599)) + cbModelParam._m0[22u].w;
        float _1512 = fma(_607, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599)) + cbModelParam._m0[23u].w;
        float _1515 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1518 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1521 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1660;
        if (_1515 > 0.0)
        {
            _1660 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1660 = frontier_phi_27_23_ladder;
        }
        float _1925;
        if (_1518 > 0.0)
        {
            _1925 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1925 = frontier_phi_39_34_ladder;
        }
        float _2130;
        if (_1521 > 0.0)
        {
            _2130 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2130 = frontier_phi_48_45_ladder;
        }
        float _2132 = isnan(_1925) ? _1660 : (isnan(_1660) ? _1925 : min(_1660, _1925));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1515) + _1504;
        float _2138 = (_2133 * _1518) + _1508;
        float _2139 = (_2133 * _1521) + _1512;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2140;
        float _2143 = _2140 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2139 > _2143) || ((_2139 < _2141) || ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 < _2141) || (_2137 > _2143))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2139, cbModelParam._m0[17u].z, fma(_2138, cbModelParam._m0[17u].y, _2137 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2139, cbModelParam._m0[18u].z, fma(_2138, cbModelParam._m0[18u].y, _2137 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2139, cbModelParam._m0[19u].z, fma(_2138, cbModelParam._m0[19u].y, _2137 * cbModelParam._m0[19u].x))), _1447);
            frontier_phi_24_48_ladder = _2337.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2337.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2337.x * cbModelParam._m0[1u].z;
        }
        _1540 = frontier_phi_24_48_ladder_2;
        _1542 = frontier_phi_24_48_ladder_1;
        _1544 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1447);
        _1540 = _1524.x * cbModelParam._m0[1u].z;
        _1542 = _1524.y * cbModelParam._m0[1u].z;
        _1544 = _1524.z * cbModelParam._m0[1u].z;
    }
    float _1556 = ((((1.0 - _567) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_567 * _554)) * _538;
    float _1557 = _1556 * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1558 = _1556 * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1559 = _1556 * ((cbModelParam._m0[1u].w * (_1544 - _1442)) + _1442);
    float _1562 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1557 * cbSceneParam._m0[91u].x));
    uvec4 _1578 = floatBitsToUint(cbInstanceData._m0[_513 + 5u]);
    uint _1580 = _1578.x * 14u;
    uint _1581 = _1580 + 13u;
    float _1588 = _538 + (-1.0);
    float _1593 = (cbLight._m0[_1581].x * _1588) + 1.0;
    float _1594 = (cbLight._m0[_1581].y * _1588) + 1.0;
    float _1595 = (cbLight._m0[_1581].z * _1588) + 1.0;
    float _1596 = (cbLight._m0[_1581].w * _1588) + 1.0;
    uint _1597 = _1580 + 5u;
    float _1603 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1607 = _1580 + 4u;
    float _1613 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1617 = _1580 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_384, _385, _386));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_384, _385, _386));
    float _3703 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3714 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1597].x * _1603) * _1638) + ((cbLight._m0[_1607].x * _1613) * _1636);
    float _1646 = ((_1603 * cbLight._m0[_1597].y) * _1638) + ((_1613 * cbLight._m0[_1607].y) * _1636);
    float _1647 = ((_1603 * cbLight._m0[_1597].z) * _1638) + ((_1613 * cbLight._m0[_1607].z) * _1636);
    uvec4 _1652 = floatBitsToUint(cbLight._m0[_1580 + 12u]);
    bool _1654 = _1652.x == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1654)
    {
        _1665 = _1645;
        _1667 = _1646;
        _1669 = _1647;
    }
    else
    {
        uint _1673 = _1580 + 6u;
        float _1689 = (dot(vec3(cbLight._m0[_1580 + 2u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1690 = _1689 * _1689;
        float _3725 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1692 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1665 = (((cbLight._m0[_1673].x * 0.3183098733425140380859375) * _1691) * _1692) + _1645;
        _1667 = (((cbLight._m0[_1673].y * 0.3183098733425140380859375) * _1691) * _1692) + _1646;
        _1669 = (((cbLight._m0[_1673].z * 0.3183098733425140380859375) * _1691) * _1692) + _1647;
    }
    bool _1672 = _1652.y == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1672)
    {
        _1710 = _1665;
        _1712 = _1667;
        _1714 = _1669;
    }
    else
    {
        uint _1869 = _1580 + 7u;
        float _1885 = (dot(vec3(cbLight._m0[_1580 + 3u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3741 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1888 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1710 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1665;
        _1712 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1667;
        _1714 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1669;
    }
    uint _1717 = _1580 + 8u;
    float _1730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _387) * 0.949999988079071044921875);
    float _1731 = _1730 * _1730;
    float _1732 = cbLight._m0[_1580].x + _464;
    float _1733 = cbLight._m0[_1580].y + _465;
    float _1734 = cbLight._m0[_1580].z + _466;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1739 = _1738 * _1732;
    float _1740 = _1738 * _1733;
    float _1741 = _1738 * _1734;
    float _1742 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1580].xyz));
    float _3757 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _1746 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1747 = dot(vec3(_384, _385, _386), vec3(_1739, _1740, _1741));
    float _3779 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1739, _1740, _1741));
    float _3790 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1731 * _1731;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1770 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1771 = 1.0 - _1731;
    float _1782 = (0.5 / (((_1746 * ((_1745 * _1771) + _1731)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1771) + _1731) * _1745))) * _1745;
    float _3801 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1784 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    uint _1795 = _1580 + 9u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _387) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1617].x + _464;
    float _1809 = cbLight._m0[_1617].y + _465;
    float _1810 = cbLight._m0[_1617].z + _466;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1617].xyz));
    float _3812 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1822 = dot(vec3(_384, _385, _386), vec3(_1815, _1816, _1817));
    float _3823 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1826 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1815, _1816, _1817));
    float _3834 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1830 = _1807 * _1807;
    float _1834 = ((_1825 * _1825) * (_1830 + (-1.0))) + 1.0;
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1844 = 1.0 - _1807;
    float _1854 = (0.5 / (((_1746 * ((_1821 * _1844) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1844) + _1807) * _1821))) * _1821;
    float _3845 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1830 / ((_1834 * _1834) * 3.141590118408203125));
    float _1866 = (((_1843 * cbLight._m0[_1795].x) * _1856) * _1603) + (((_1770 * cbLight._m0[_1717].x) * _1784) * _1613);
    float _1867 = (((_1843 * cbLight._m0[_1795].y) * _1856) * _1603) + (((_1770 * cbLight._m0[_1717].y) * _1784) * _1613);
    float _1868 = (((_1843 * cbLight._m0[_1795].z) * _1856) * _1603) + (((_1770 * cbLight._m0[_1717].z) * _1784) * _1613);
    float _1930;
    float _1932;
    float _1934;
    if (_1654)
    {
        _1930 = _1866;
        _1932 = _1867;
        _1934 = _1868;
    }
    else
    {
        uint _1936 = _1580 + 2u;
        uint _1940 = _1580 + 10u;
        float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _387) * 0.949999988079071044921875);
        float _1955 = _1954 * _1954;
        float _1956 = cbLight._m0[_1936].x + _464;
        float _1957 = cbLight._m0[_1936].y + _465;
        float _1958 = cbLight._m0[_1936].z + _466;
        float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
        float _1963 = _1962 * _1956;
        float _1964 = _1962 * _1957;
        float _1965 = _1962 * _1958;
        float _1966 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1936].xyz));
        float _3856 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1970 = dot(vec3(_384, _385, _386), vec3(_1963, _1964, _1965));
        float _3867 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_1963, _1964, _1965));
        float _3878 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1978 = _1955 * _1955;
        float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
        float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1992 = 1.0 - _1955;
        float _2002 = (0.5 / (((_1746 * ((_1969 * _1992) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1992) + _1955) * _1969))) * _1969;
        float _3889 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2004 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
        float _2005 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1930 = (((_1991 * cbLight._m0[_1940].x) * _2004) * _2005) + _1866;
        _1932 = (((_1991 * cbLight._m0[_1940].y) * _2004) * _2005) + _1867;
        _1934 = (((_1991 * cbLight._m0[_1940].z) * _2004) * _2005) + _1868;
    }
    float _2040;
    float _2042;
    float _2044;
    if (_1672)
    {
        _2040 = _1930;
        _2042 = _1932;
        _2044 = _1934;
    }
    else
    {
        uint _2051 = _1580 + 3u;
        uint _2055 = _1580 + 11u;
        float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _387) * 0.949999988079071044921875);
        float _2070 = _2069 * _2069;
        float _2071 = cbLight._m0[_2051].x + _464;
        float _2072 = cbLight._m0[_2051].y + _465;
        float _2073 = cbLight._m0[_2051].z + _466;
        float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
        float _2078 = _2077 * _2071;
        float _2079 = _2077 * _2072;
        float _2080 = _2077 * _2073;
        float _2081 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2051].xyz));
        float _3905 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _2085 = dot(vec3(_384, _385, _386), vec3(_2078, _2079, _2080));
        float _3916 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2089 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2078, _2079, _2080));
        float _3927 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2093 = _2070 * _2070;
        float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
        float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2107 = 1.0 - _2070;
        float _2117 = (0.5 / (((_1746 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2107) + _2070) * _2084))) * _2084;
        float _3938 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
        float _2120 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _2040 = (((_2106 * cbLight._m0[_2055].x) * _2119) * _2120) + _1930;
        _2042 = (((_2106 * cbLight._m0[_2055].y) * _2119) * _2120) + _1932;
        _2044 = (((_2106 * cbLight._m0[_2055].z) * _2119) * _2120) + _1934;
    }
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_1578.y == 0u)
    {
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2195;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2195;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2195;
        uvec4 _2210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2211 = _2210.x;
        uint _2222 = uint((float(_2210.y) * floor(float(uint(cbSceneParam._m0[85u].y * _473) / _2211))) + floor(float(uint(cbSceneParam._m0[85u].x * _472) / _2211)));
        float _2232 = (log2(_2198 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2233 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        uint _2236 = uint(isnan(14.0) ? _2233 : (isnan(_2233) ? 14.0 : min(_2233, 14.0)));
        uvec4 _2241 = texelFetch(g_lightClusterGridBuffer, int(((_2236 << 2u) + (_2222 << 6u)) >> 2u));
        uint _2242 = _2241.x;
        uint _2243 = _2210.z;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        if (((((1u << ((_2243 >> 4u) & 15u)) + 4294967295u) & _2242) == 0u) || ((_2243 & 240u) == 0u))
        {
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
        }
        else
        {
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            uint _2492 = 0u;
            uint _2501;
            bool _2502;
            for (;;)
            {
                _2501 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2492 << 2u)) >> 2u)).x;
                _2502 = _2501 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2502)
                {
                    frontier_phi_63_pred = _2491;
                    frontier_phi_63_pred_1 = _2490;
                    frontier_phi_63_pred_2 = _2489;
                    frontier_phi_63_pred_3 = _2488;
                    frontier_phi_63_pred_4 = _2487;
                    frontier_phi_63_pred_5 = _2486;
                }
                else
                {
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    uint _2616;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2501;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    for (;;)
                    {
                        uint _2620 = uint(findLSB(_2616)) + (_2492 << 5u);
                        uint _2617 = (_2616 + 4294967295u) & _2616;
                        uint _2622 = _2620 * 48u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 3u)).x));
                        uint _2642 = (_2620 * 48u) + 4u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2661 = (_2620 * 48u) + 8u;
                        vec3 _2672 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x));
                        float _2676 = _2636.x - _2196;
                        float _2677 = _2636.y - _2197;
                        float _2678 = _2636.z - _2198;
                        float _2679 = dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678));
                        float _2682 = inversesqrt(_2679);
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2686 = dot(vec3(_494, _497, _500), vec3(_2683, _2684, _2685));
                        float _2691 = 1.0 - (_2679 * _2636.w);
                        float _3964 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2692 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2693 = sqrt(_2679) * _2655.w;
                        float _2696 = 1.39999997615814208984375 / (_2693 + 1.39999997615814208984375);
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2686) + _2697;
                        float _2703 = _2693 * _2693;
                        float _2707 = ((isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))) * _2692) / ((_2703 * 0.699999988079071044921875) + 1.0);
                        float _2711 = (-0.0) - _2196;
                        float _2712 = (-0.0) - _2197;
                        float _2713 = (-0.0) - _2198;
                        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2728 = exp2(log2(1.0 / ((_2703 * 3.5) + 5.0)) * 0.25);
                        float _2729 = 1.0 - _554;
                        float _2736 = sqrt(1.0 - ((1.0 - (_2729 * _2729)) * (1.0 - (_2728 * _2728))));
                        float _2737 = _2736 * _2736;
                        float _2738 = _2737 * _2737;
                        float _2739 = _2718 + _2683;
                        float _2740 = _2719 + _2684;
                        float _2741 = _2720 + _2685;
                        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
                        float _2749 = dot(vec3(_494, _497, _500), vec3(_2718, _2719, _2720));
                        float _3980 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2752 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2753 = dot(vec3(_494, _497, _500), vec3(_2745 * _2739, _2745 * _2740, _2745 * _2741));
                        float _3991 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2756 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2760 = ((_2756 * _2756) * (_2738 + (-1.0))) + 1.0;
                        float _2761 = _2696 * _2737;
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2686) + _2762;
                        float _4002 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2767 = 1.0 - _2737;
                        float _2777 = (0.5 / (((_2766 * ((_2752 * _2767) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2766 * _2767) + _2737) * _2752))) * _2766;
                        float _4013 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2788 = (((_2738 * 3.1415927410125732421875) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) / ((_2760 * _2760) * ((_2703 * 2.1991131305694580078125) + 3.141590118408203125))) * _2692;
                        _2545 = (_2707 * _2655.x) + _2613;
                        _2546 = (_2707 * _2655.y) + _2614;
                        _2547 = (_2707 * _2655.z) + _2615;
                        _2542 = (_2788 * _2672.x) + _2610;
                        _2543 = (_2788 * _2672.y) + _2611;
                        _2544 = (_2788 * _2672.z) + _2612;
                        if (_2617 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2617;
                        }
                    }
                    frontier_phi_63_pred = _2547;
                    frontier_phi_63_pred_1 = _2546;
                    frontier_phi_63_pred_2 = _2545;
                    frontier_phi_63_pred_3 = _2544;
                    frontier_phi_63_pred_4 = _2543;
                    frontier_phi_63_pred_5 = _2542;
                }
                _2353 = frontier_phi_63_pred;
                _2351 = frontier_phi_63_pred_1;
                _2349 = frontier_phi_63_pred_2;
                _2347 = frontier_phi_63_pred_3;
                _2345 = frontier_phi_63_pred_4;
                _2343 = frontier_phi_63_pred_5;
                uint _2493 = _2492 + 1u;
                if (_2493 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2486 = _2343;
                    _2487 = _2345;
                    _2488 = _2347;
                    _2489 = _2349;
                    _2490 = _2351;
                    _2491 = _2353;
                    _2492 = _2493;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
        }
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.z;
        uint _2359 = (_2357 >> 8u) & 15u;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((4294967295u << _2359) & _2242) == 0u)
        {
            _2454 = _2342;
            _2456 = _2344;
            _2458 = _2346;
            _2460 = _2348;
            _2462 = _2350;
            _2464 = _2352;
        }
        else
        {
            float _2479 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
            float _2480 = _2479 * _2196;
            float _2481 = _2479 * _2197;
            float _2482 = _2479 * _2198;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2359 < ((_2357 >> 12u) & 15u))
            {
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2593 = _2342;
                float _2594 = _2344;
                float _2595 = _2346;
                float _2596 = _2348;
                float _2597 = _2350;
                float _2598 = _2352;
                uint _2599 = _2359;
                uint _2608;
                bool _2609;
                for (;;)
                {
                    _2608 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                    _2609 = _2608 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2609)
                    {
                        frontier_phi_69_pred = _2598;
                        frontier_phi_69_pred_1 = _2597;
                        frontier_phi_69_pred_2 = _2596;
                        frontier_phi_69_pred_3 = _2595;
                        frontier_phi_69_pred_4 = _2594;
                        frontier_phi_69_pred_5 = _2593;
                    }
                    else
                    {
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        uint _2812 = _2608;
                        uint _2813;
                        vec4 _2838;
                        float _2839;
                        vec4 _2854;
                        vec3 _2866;
                        vec4 _2882;
                        vec4 _2898;
                        float _2945;
                        bool _2946;
                        for (;;)
                        {
                            uint _2823 = ((_2599 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2812));
                            _2813 = (_2812 + 4294967295u) & _2812;
                            uint _2825 = _2823 * 40u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2839 = _2838.w;
                            uint _2841 = (_2823 * 40u) + 4u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2823 * 40u) + 8u;
                            _2866 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x));
                            uint _2869 = (_2823 * 40u) + 16u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2885 = (_2823 * 40u) + 20u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2823 * 40u) + 24u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2920 = (_2823 * 40u) + 28u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2945 = fma(_2198, _2933.z, fma(_2197, _2933.y, _2933.x * _2196)) + _2933.w;
                            _2946 = !((fma(_2198, _2914.z, fma(_2197, _2914.y, _2914.x * _2196)) + _2914.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2946)
                            {
                                float _2973 = _2838.x - _2196;
                                float _2974 = _2838.y - _2197;
                                float _2975 = _2838.z - _2198;
                                float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                                float _2979 = inversesqrt(_2976);
                                float _2980 = _2979 * _2973;
                                float _2981 = _2979 * _2974;
                                float _2982 = _2979 * _2975;
                                float _2986 = 1.0 - (_2976 / (_2839 * _2839));
                                float _4024 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _2991 = sqrt(_2976) * _2854.w;
                                float _2993 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                                float _2994 = _2993 * _2993;
                                float _2997 = ((1.0 - _2994) * dot(vec3(_2980, _2981, _2982), vec3(_494, _497, _500))) + _2994;
                                float _3000 = _2991 * _2991;
                                float _3004 = (fma(_2198, _2882.z, fma(_2197, _2882.y, _2882.x * _2196)) + _2882.w) / _2945;
                                float _3005 = (fma(_2198, _2898.z, fma(_2197, _2898.y, _2898.x * _2196)) + _2898.w) / _2945;
                                float _3009 = 1.0 - dot(vec2(_3004, _3005), vec2(_3004, _3005));
                                float _4040 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3011 = _3010 * (((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2987) / ((_3000 * 0.699999988079071044921875) + 1.0));
                                float _3023 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                                float _3024 = 1.0 - _554;
                                float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                                float _3032 = _3031 * _3031;
                                float _3033 = _3032 * _3032;
                                float _3034 = _2980 - _2480;
                                float _3035 = _2981 - _2481;
                                float _3036 = _2982 - _2482;
                                float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                                float _3044 = dot(vec3(_494, _497, _500), vec3((-0.0) - _2480, (-0.0) - _2481, (-0.0) - _2482));
                                float _4051 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3048 = dot(vec3(_494, _497, _500), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                                float _4062 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                                float _3056 = _2993 * _3032;
                                float _3057 = _3056 * _3056;
                                float _3063 = ((1.0 - _3057) * dot(vec3(_494, _497, _500), vec3(_2980, _2981, _2982))) + _3057;
                                float _4073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3065 = 1.0 - _3032;
                                float _3075 = (0.5 / (((_3064 * ((_3047 * _3065) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3032) * _3047))) * _3064;
                                float _4084 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3085 = (_3010 * _2987) * (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) / ((_3055 * _3055) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3011 * _2854.z;
                                frontier_phi_75_pred_1 = _3011 * _2854.y;
                                frontier_phi_75_pred_2 = _3011 * _2854.x;
                                frontier_phi_75_pred_3 = _3085 * _2866.z;
                                frontier_phi_75_pred_4 = _3085 * _2866.y;
                                frontier_phi_75_pred_5 = _3085 * _2866.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3094 = frontier_phi_75_pred;
                            _3093 = frontier_phi_75_pred_1;
                            _3092 = frontier_phi_75_pred_2;
                            _3091 = frontier_phi_75_pred_3;
                            _3090 = frontier_phi_75_pred_4;
                            _3089 = frontier_phi_75_pred_5;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            if (_2813 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2813;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2798;
                        frontier_phi_69_pred_1 = _2797;
                        frontier_phi_69_pred_2 = _2796;
                        frontier_phi_69_pred_3 = _2795;
                        frontier_phi_69_pred_4 = _2794;
                        frontier_phi_69_pred_5 = _2793;
                    }
                    _2465 = frontier_phi_69_pred;
                    _2463 = frontier_phi_69_pred_1;
                    _2461 = frontier_phi_69_pred_2;
                    _2459 = frontier_phi_69_pred_3;
                    _2457 = frontier_phi_69_pred_4;
                    _2455 = frontier_phi_69_pred_5;
                    uint _2600 = _2599 + 1u;
                    if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2593 = _2455;
                        _2594 = _2457;
                        _2595 = _2459;
                        _2596 = _2461;
                        _2597 = _2463;
                        _2598 = _2465;
                        _2599 = _2600;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2465;
                frontier_phi_57_58_ladder_1 = _2463;
                frontier_phi_57_58_ladder_2 = _2461;
                frontier_phi_57_58_ladder_3 = _2459;
                frontier_phi_57_58_ladder_4 = _2457;
                frontier_phi_57_58_ladder_5 = _2455;
            }
            else
            {
                frontier_phi_57_58_ladder = _2352;
                frontier_phi_57_58_ladder_1 = _2350;
                frontier_phi_57_58_ladder_2 = _2348;
                frontier_phi_57_58_ladder_3 = _2346;
                frontier_phi_57_58_ladder_4 = _2344;
                frontier_phi_57_58_ladder_5 = _2342;
            }
            _2454 = frontier_phi_57_58_ladder_5;
            _2456 = frontier_phi_57_58_ladder_4;
            _2458 = frontier_phi_57_58_ladder_3;
            _2460 = frontier_phi_57_58_ladder_2;
            _2462 = frontier_phi_57_58_ladder_1;
            _2464 = frontier_phi_57_58_ladder;
        }
        float _2469 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2254 = (_2469 * _2460) + _1710;
        _2256 = (_2469 * _2462) + _1712;
        _2258 = (_2469 * _2464) + _1714;
        _2260 = ((_2454 * 0.039999999105930328369140625) * _2469) + _2040;
        _2262 = ((_2456 * 0.039999999105930328369140625) * _2469) + _2042;
        _2264 = ((_2458 * 0.039999999105930328369140625) * _2469) + _2044;
    }
    else
    {
        _2254 = _1710;
        _2256 = _1712;
        _2258 = _1714;
        _2260 = _2040;
        _2262 = _2042;
        _2264 = _2044;
    }
    float _4100 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4111 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4122 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    uint _2284 = _513 + 6u;
    float _2292 = _472 / cbSceneParam._m0[86u].x;
    float _2293 = _473 / cbSceneParam._m0[86u].y;
    vec4 _2307 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, (log2((isnan(cbSceneParam._m0[77u].w) ? _406 : (isnan(_406) ? cbSceneParam._m0[77u].w : min(_406, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2309 = _2307.x;
    float _2310 = _2307.y;
    float _2311 = _2307.z;
    float _2312 = _2307.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_406 > cbSceneParam._m0[78u].w)
    {
        float _2367 = isnan(_406) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _406 : min(cbSceneParam._m0[80u].w, _406));
        float _2368 = _2367 / _406;
        float _2379 = _2368 * _457;
        float _2380 = _458 * _2368;
        float _2381 = (-0.0) - _2380;
        float _2382 = _2368 * _459;
        float _2384 = (cbSceneParam._m0[77u].w * _2381) / _2367;
        float _2385 = _2384 + cbSceneParam._m0[79u].w;
        float _2386 = cbSceneParam._m0[79u].w - _2380;
        float _2392 = sqrt(((_2379 * _2379) + (_2380 * _2380)) + (_2382 * _2382));
        float _2395 = (1.0 - (cbSceneParam._m0[77u].w / _2367)) * _2392;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2555;
        if (abs((_2381 - _2384) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2555 = ((((_2385 > 0.0) ? exp2(_2400 * _2385) : (2.0 - exp2(_2402 * _2385))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2395;
        }
        else
        {
            float _2515 = 1.0 / cbSceneParam._m0[80u].x;
            float _2516 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : max(_2385, _2386));
            float _2517 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : min(_2385, _2386));
            float _2526 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : min(_2516, 0.0));
            float _2527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : min(_2517, 0.0));
            _2555 = ((abs(_2392 / _2381) * cbSceneParam._m0[80u].y) * ((((_2526 - _2527) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0))))) * _2515)) - ((exp2(_2402 * _2526) - exp2(_2402 * _2527)) * _2515))) + (_2395 * cbSceneParam._m0[80u].z);
        }
        vec4 _2557 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, 1.0), 0.0);
        float _2566 = exp2((_2555 * (-1.44269502162933349609375)) * (1.0 - _2557.w));
        float _2567 = log2(_2566);
        float _2583 = log2(_2312);
        _2404 = (exp2(_2583 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].x)) * _2557.x) / cbSceneParam._m0[78u].x)) + _2309;
        _2406 = (exp2(_2583 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].y)) * _2557.y) / cbSceneParam._m0[78u].y)) + _2310;
        _2408 = (exp2(_2583 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].z)) * _2557.z) / cbSceneParam._m0[78u].z)) + _2311;
        _2410 = _2566 * _2312;
    }
    else
    {
        _2404 = _2309;
        _2406 = _2310;
        _2408 = _2311;
        _2410 = _2312;
    }
    float _2422 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2423 = _2422 == 3.0;
    float _2424 = log2(_2410);
    float _2431 = exp2(_2424 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2254 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _538))) + ((_2260 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1345)) * cbPerFrame._m0[3u].x));
    float _2432 = exp2(_2424 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2256 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _538))) + ((_2262 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1345)) * cbPerFrame._m0[3u].x));
    float _2433 = exp2(_2424 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2258 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _538))) + ((_2264 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1345)) * cbPerFrame._m0[3u].x));
    float _2442 = (_2422 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2442 * (_2423 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.y = _2442 * (_2423 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.z = _2442 * (_2423 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.w = cbInstanceData._m0[_2284].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2284].w;
}


