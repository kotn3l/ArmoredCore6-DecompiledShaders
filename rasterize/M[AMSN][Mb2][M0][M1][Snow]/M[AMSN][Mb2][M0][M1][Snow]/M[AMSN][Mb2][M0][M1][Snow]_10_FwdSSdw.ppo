#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _927;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _237 = _232.z;
    float _241 = (_232.x * 2.0) + (-1.0);
    float _243 = (_232.y * 2.0) + (-1.0);
    float _244 = dot(vec2(_241, _243), vec2(_241, _243));
    float _3266 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _250 = sqrt(1.0 - (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))));
    float _253 = fma(_250, _216, fma(_243, _209, _241 * _195));
    float _256 = fma(_250, _217, fma(_243, _210, _241 * _196));
    float _259 = fma(_250, _218, fma(_243, _211, _241 * _197));
    float _263 = inversesqrt(dot(vec3(_253, _256, _259), vec3(_253, _256, _259)));
    float _298 = (cbMtdParam._m0[11u].z + dot(vec4(_263 * _253, _263 * _256, _263 * _259, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3277 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    vec4 _316 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _321 = _316.x * cbMtdParam._m0[9u].x;
    float _322 = _316.y * cbMtdParam._m0[9u].y;
    float _323 = _316.z * cbMtdParam._m0[9u].z;
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _347 = ((_336.x - _321) * _299) + _321;
    float _348 = ((_336.y - _322) * _299) + _322;
    float _349 = ((_336.z - _323) * _299) + _323;
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = (_362.x * 2.0) + (-1.0);
    float _370 = (_362.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3288 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _379 = ((_362.z - _237) * _299) + _237;
    float _386 = ((_369 - _241) * _299) + _241;
    float _387 = ((_370 - _243) * _299) + _243;
    float _388 = ((sqrt(1.0 - (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) - _250) * _299) + _250;
    float _391 = fma(_388, _216, fma(_387, _209, _386 * _195));
    float _394 = fma(_388, _217, fma(_387, _210, _386 * _196));
    float _397 = fma(_388, _218, fma(_387, _211, _386 * _197));
    float _401 = inversesqrt(dot(vec3(_391, _394, _397), vec3(_391, _394, _397)));
    float _402 = _401 * _391;
    float _403 = _401 * _394;
    float _404 = _401 * _397;
    float _3299 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _405 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3321 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3332 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _424 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _475 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _465);
    float _476 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _465);
    float _477 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _465);
    float _481 = inversesqrt(dot(vec3(_475, _476, _477), vec3(_475, _476, _477)));
    float _482 = _475 * _481;
    float _483 = _476 * _481;
    float _484 = _477 * _481;
    float _490 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _491 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _511 = fma(_404, cbSceneParam._m0[5u].z, fma(_403, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _402));
    float _514 = fma(_404, cbSceneParam._m0[6u].z, fma(_403, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _402));
    float _517 = fma(_404, cbSceneParam._m0[7u].z, fma(_403, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _402));
    uint _530 = uint(roundEven(NORMAL.w)) * 13u;
    uint _532 = (_530 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3343 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _3354 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _3365 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    vec4 _552 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _490, cbSceneParam._m0[86u].y * _491));
    float _555 = _552.x * TEXCOORD_9.w;
    float _556 = dot(vec3(_402, _403, _404), vec3(_482, _483, _484));
    float _559 = _556 * 2.0;
    float _563 = (_559 * _402) - _482;
    float _564 = (_559 * _403) - _483;
    float _565 = (_559 * _404) - _484;
    float _569 = abs(dot(vec3(_482, _483, _484), vec3(_402, _403, _404)));
    float _3376 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _571 = sqrt(_405);
    float _584 = exp2((_571 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _926;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _651 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _655 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _659 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _684 = _616 + _402;
        float _685 = _620 + _403;
        float _686 = _624 + _404;
        float _696 = fma(_686, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _684)) - _651;
        float _697 = fma(_686, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _684)) - _655;
        float _698 = fma(_686, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _684)) - _659;
        float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
        float _715 = ((_702 * _696) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_651 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_702 * _697) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_655 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_702 * _698) / cbModelParam._m0[34u].z) + ((((((_659 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        float _754 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_720.x + (-0.5));
        float _756 = _754 * (_720.y + (-0.5));
        float _757 = _754 * (_720.z + (-0.5));
        float _764 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_727.x + (-0.5));
        float _766 = _764 * (_727.y + (-0.5));
        float _767 = _764 * (_727.z + (-0.5));
        float _774 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_734.x + (-0.5));
        float _776 = _774 * (_734.y + (-0.5));
        float _777 = _774 * (_734.z + (-0.5));
        float _784 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_741.x + (-0.5));
        float _786 = _784 * (_741.y + (-0.5));
        float _787 = _784 * (_741.z + (-0.5));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = _755 * 0.5;
        float _792 = _765 * 0.5;
        float _793 = _775 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _808 = (dot(vec3(_402, _403, _404), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _818 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3424 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_820 + 1.0))) + _825) * _788;
        float _835 = _756 * 0.5;
        float _836 = _766 * 0.5;
        float _837 = _776 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_402, _403, _404), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3457 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_862 + 1.0))) + _867) * _789;
        float _877 = _757 * 0.5;
        float _878 = _767 * 0.5;
        float _879 = _777 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_402, _403, _404), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3490 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_904 + 1.0))) + _909) * _790;
        _926 = _757;
        _928 = _756;
        _929 = _755;
        _930 = _767;
        _931 = _766;
        _932 = _765;
        _933 = _777;
        _934 = _776;
        _935 = _775;
        _936 = _790;
        _937 = _789;
        _938 = _788;
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
    }
    else
    {
        _926 = _927;
        _928 = _927;
        _929 = _927;
        _930 = _927;
        _931 = _927;
        _932 = _927;
        _933 = _927;
        _934 = _927;
        _935 = _927;
        _936 = _927;
        _937 = _927;
        _938 = _927;
        _939 = 0.0;
        _940 = 0.0;
        _941 = 0.0;
    }
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _967 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _971 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _975 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _998 = _616 + _402;
        float _999 = _620 + _403;
        float _1000 = _624 + _404;
        float _1010 = fma(_1000, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998)) - _967;
        float _1011 = fma(_1000, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998)) - _971;
        float _1012 = fma(_1000, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998)) - _975;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_967 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_971 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[35u].z) + ((((((_975 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1066 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1033.x + (-0.5));
        float _1068 = _1066 * (_1033.y + (-0.5));
        float _1069 = _1066 * (_1033.z + (-0.5));
        float _1076 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1040.x + (-0.5));
        float _1078 = _1076 * (_1040.y + (-0.5));
        float _1079 = _1076 * (_1040.z + (-0.5));
        float _1086 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1047.x + (-0.5));
        float _1088 = _1086 * (_1047.y + (-0.5));
        float _1089 = _1086 * (_1047.z + (-0.5));
        float _1096 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1054.x + (-0.5));
        float _1098 = _1096 * (_1054.y + (-0.5));
        float _1099 = _1096 * (_1054.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_402, _403, _404), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3553 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_1130 + 1.0))) + _1135) * _1100;
        float _1145 = _1068 * 0.5;
        float _1146 = _1078 * 0.5;
        float _1147 = _1088 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_402, _403, _404), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3586 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1172 + 1.0))) + _1177) * _1101;
        float _1187 = _1069 * 0.5;
        float _1188 = _1079 * 0.5;
        float _1189 = _1089 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_402, _403, _404), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3619 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1214 + 1.0))) + _1219) * _1102;
        _1236 = _1069;
        _1237 = _1068;
        _1238 = _1067;
        _1239 = _1079;
        _1240 = _1078;
        _1241 = _1077;
        _1242 = _1089;
        _1243 = _1088;
        _1244 = _1087;
        _1245 = _1102;
        _1246 = _1101;
        _1247 = _1100;
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _927;
        _1237 = _927;
        _1238 = _927;
        _1239 = _927;
        _1240 = _927;
        _1241 = _927;
        _1242 = _927;
        _1243 = _927;
        _1244 = _927;
        _1245 = _927;
        _1246 = _927;
        _1247 = _927;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _939)) + _939;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _940)) + _940;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _941)) + _941;
    float _1283 = fma(_1262, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1260 * cbSceneParam._m0[89u].x));
    float _1286 = fma(_1262, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1260 * cbSceneParam._m0[90u].x));
    float _1289 = fma(_1262, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1260));
    float _1304 = _563 * 0.5;
    float _1305 = _564 * 0.5;
    float _1306 = _565 * 0.5;
    float _1307 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1310 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1313 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1347;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1320 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_926, _930, _933, _936));
        float _1324 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_928, _931, _934, _937));
        float _1328 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_929, _932, _935, _938));
        float _1335 = dot(vec4(cbModelParam._m0[39u]), vec4(_1304, _1305, _1306, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1358;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1349 = dot(vec4(cbModelParam._m0[40u]), vec4(_1304, _1305, _1306, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1362 = (_1358 * cbModelParam._m0[1u].x) + (_1347 * (1.0 - cbModelParam._m0[1u].x));
    float _1372 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _405);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1372 : min(cbModelParam._m0[25u].z, _1372));
    float _1455;
    float _1457;
    float _1459;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1422 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1426 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1430 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1433 = fma(_565, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563));
        float _1436 = fma(_565, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563));
        float _1439 = fma(_565, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563));
        float _1467;
        if (_1433 > 0.0)
        {
            _1467 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1467 = frontier_phi_16_14_ladder;
        }
        float _1693;
        if (_1436 > 0.0)
        {
            _1693 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1693 = frontier_phi_25_21_ladder;
        }
        float _1939;
        if (_1439 > 0.0)
        {
            _1939 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1939 = frontier_phi_37_32_ladder;
        }
        float _1941 = isnan(_1693) ? _1467 : (isnan(_1467) ? _1693 : min(_1467, _1693));
        float _1942 = isnan(_1939) ? _1941 : (isnan(_1941) ? _1939 : min(_1941, _1939));
        float _1946 = (_1942 * _1433) + _1422;
        float _1947 = (_1942 * _1436) + _1426;
        float _1948 = (_1942 * _1439) + _1430;
        float _1949 = _1942 * 9.9999997473787516355514526367188e-05;
        float _1951 = (-1.0) - _1949;
        float _1953 = _1949 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1948 > _1953) || ((_1948 < _1951) || ((_1947 > _1953) || ((_1947 < _1951) || ((_1946 < _1951) || (_1946 > _1953))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1948, cbModelParam._m0[9u].z, fma(_1947, cbModelParam._m0[9u].y, _1946 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1948, cbModelParam._m0[10u].z, fma(_1947, cbModelParam._m0[10u].y, _1946 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1948, cbModelParam._m0[11u].z, fma(_1947, cbModelParam._m0[11u].y, _1946 * cbModelParam._m0[11u].x))), _1373);
            frontier_phi_15_37_ladder = _2072.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2072.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2072.x * cbModelParam._m0[1u].y;
        }
        _1455 = frontier_phi_15_37_ladder_2;
        _1457 = frontier_phi_15_37_ladder_1;
        _1459 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_563, _564, _565), _1373);
        _1455 = _1443.x * cbModelParam._m0[1u].y;
        _1457 = _1443.y * cbModelParam._m0[1u].y;
        _1459 = _1443.z * cbModelParam._m0[1u].y;
    }
    float _1463 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _405);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1463 : min(cbModelParam._m0[25u].w, _1463));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1521 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1525 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1529 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1532 = fma(_565, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563));
        float _1535 = fma(_565, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563));
        float _1538 = fma(_565, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563));
        float _1698;
        if (_1532 > 0.0)
        {
            _1698 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1698 = frontier_phi_27_23_ladder;
        }
        float _1966;
        if (_1535 > 0.0)
        {
            _1966 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1966 = frontier_phi_39_34_ladder;
        }
        float _2171;
        if (_1538 > 0.0)
        {
            _2171 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2171 = frontier_phi_48_45_ladder;
        }
        float _2173 = isnan(_1966) ? _1698 : (isnan(_1698) ? _1966 : min(_1698, _1966));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1532) + _1521;
        float _2179 = (_2174 * _1535) + _1525;
        float _2180 = (_2174 * _1538) + _1529;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2181;
        float _2184 = _2181 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2180 > _2184) || ((_2180 < _2182) || ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 < _2182) || (_2178 > _2184))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2180, cbModelParam._m0[17u].z, fma(_2179, cbModelParam._m0[17u].y, _2178 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2180, cbModelParam._m0[18u].z, fma(_2179, cbModelParam._m0[18u].y, _2178 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2180, cbModelParam._m0[19u].z, fma(_2179, cbModelParam._m0[19u].y, _2178 * cbModelParam._m0[19u].x))), _1464);
            frontier_phi_24_48_ladder = _2378.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2378.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2378.x * cbModelParam._m0[1u].z;
        }
        _1557 = frontier_phi_24_48_ladder_2;
        _1559 = frontier_phi_24_48_ladder_1;
        _1561 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_563, _564, _565), _1464);
        _1557 = _1541.x * cbModelParam._m0[1u].z;
        _1559 = _1541.y * cbModelParam._m0[1u].z;
        _1561 = _1541.z * cbModelParam._m0[1u].z;
    }
    float _1573 = ((((1.0 - _584) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_584 * _571)) * _555;
    float _1574 = _1573 * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1575 = _1573 * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1576 = _1573 * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1579 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    vec4 _1593 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_490, _491));
    float _1595 = _1593.w;
    float _1607 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1595);
    float _1608 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1595);
    float _1609 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1595);
    uvec4 _1613 = floatBitsToUint(cbInstanceData._m0[_530 + 5u]);
    uint _1615 = _1613.x * 14u;
    uint _1616 = _1615 + 13u;
    float _1623 = _555 + (-1.0);
    float _1628 = (cbLight._m0[_1616].x * _1623) + 1.0;
    float _1629 = (cbLight._m0[_1616].y * _1623) + 1.0;
    float _1630 = (cbLight._m0[_1616].z * _1623) + 1.0;
    float _1631 = (cbLight._m0[_1616].w * _1623) + 1.0;
    uint _1632 = _1615 + 5u;
    float _1638 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    uint _1642 = _1615 + 4u;
    float _1652 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
    uint _1656 = _1615 | 1u;
    float _1667 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_402, _403, _404));
    float _1670 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_402, _403, _404));
    float _3755 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _3766 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1675 = (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.3183098733425140380859375;
    float _1677 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.3183098733425140380859375;
    float _1684 = ((cbLight._m0[_1632].x * _1638) * _1677) + (((cbLight._m0[_1642].x * _1607) * _1652) * _1675);
    float _1685 = ((_1638 * cbLight._m0[_1632].y) * _1677) + (((cbLight._m0[_1642].y * _1608) * _1652) * _1675);
    float _1686 = ((_1638 * cbLight._m0[_1632].z) * _1677) + (((cbLight._m0[_1642].z * _1609) * _1652) * _1675);
    uvec4 _1690 = floatBitsToUint(cbLight._m0[_1615 + 12u]);
    bool _1692 = _1690.x == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1692)
    {
        _1703 = _1684;
        _1705 = _1685;
        _1707 = _1686;
    }
    else
    {
        uint _1711 = _1615 + 6u;
        float _1727 = (dot(vec3(cbLight._m0[_1615 + 2u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1728 = _1727 * _1727;
        float _3777 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1730 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1703 = (((cbLight._m0[_1711].x * 0.3183098733425140380859375) * _1729) * _1730) + _1684;
        _1705 = (((cbLight._m0[_1711].y * 0.3183098733425140380859375) * _1729) * _1730) + _1685;
        _1707 = (((cbLight._m0[_1711].z * 0.3183098733425140380859375) * _1729) * _1730) + _1686;
    }
    bool _1710 = _1690.y == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1710)
    {
        _1748 = _1703;
        _1750 = _1705;
        _1752 = _1707;
    }
    else
    {
        uint _1910 = _1615 + 7u;
        float _1926 = (dot(vec3(cbLight._m0[_1615 + 3u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1927 = _1926 * _1926;
        float _3793 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1929 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _1748 = (((cbLight._m0[_1910].x * 0.3183098733425140380859375) * _1928) * _1929) + _1703;
        _1750 = (((cbLight._m0[_1910].y * 0.3183098733425140380859375) * _1928) * _1929) + _1705;
        _1752 = (((cbLight._m0[_1910].z * 0.3183098733425140380859375) * _1928) * _1929) + _1707;
    }
    uint _1755 = _1615 + 8u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _405) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1615].x + _482;
    float _1771 = cbLight._m0[_1615].y + _483;
    float _1772 = cbLight._m0[_1615].z + _484;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1615].xyz));
    float _3809 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _1784 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1785 = dot(vec3(_402, _403, _404), vec3(_1777, _1778, _1779));
    float _3831 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1777, _1778, _1779));
    float _3842 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1769 * _1769;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1808 = (exp2(log2(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1809 = 1.0 - _1769;
    float _1820 = (0.5 / (((_1784 * ((_1783 * _1809) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1809) + _1769) * _1783))) * _1783;
    float _3853 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    uint _1836 = _1615 + 9u;
    float _1847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1656].w)) * _405) * 0.949999988079071044921875);
    float _1848 = _1847 * _1847;
    float _1849 = cbLight._m0[_1656].x + _482;
    float _1850 = cbLight._m0[_1656].y + _483;
    float _1851 = cbLight._m0[_1656].z + _484;
    float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
    float _1856 = _1855 * _1849;
    float _1857 = _1855 * _1850;
    float _1858 = _1855 * _1851;
    float _1859 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1656].xyz));
    float _3864 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1863 = dot(vec3(_402, _403, _404), vec3(_1856, _1857, _1858));
    float _3875 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _1867 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_1856, _1857, _1858));
    float _3886 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1871 = _1848 * _1848;
    float _1875 = ((_1866 * _1866) * (_1871 + (-1.0))) + 1.0;
    float _1884 = (exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1885 = 1.0 - _1848;
    float _1895 = (0.5 / (((_1784 * ((_1862 * _1885) + _1848)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1885) + _1848) * _1862))) * _1862;
    float _3897 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1871 / ((_1875 * _1875) * 3.141590118408203125));
    float _1907 = (((_1884 * cbLight._m0[_1836].x) * _1897) * _1638) + ((((cbLight._m0[_1755].x * _1607) * _1808) * _1822) * _1652);
    float _1908 = (((_1884 * cbLight._m0[_1836].y) * _1897) * _1638) + ((((cbLight._m0[_1755].y * _1608) * _1808) * _1822) * _1652);
    float _1909 = (((_1884 * cbLight._m0[_1836].z) * _1897) * _1638) + ((((cbLight._m0[_1755].z * _1609) * _1808) * _1822) * _1652);
    float _1971;
    float _1973;
    float _1975;
    if (_1692)
    {
        _1971 = _1907;
        _1973 = _1908;
        _1975 = _1909;
    }
    else
    {
        uint _1977 = _1615 + 2u;
        uint _1981 = _1615 + 10u;
        float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _405) * 0.949999988079071044921875);
        float _1996 = _1995 * _1995;
        float _1997 = cbLight._m0[_1977].x + _482;
        float _1998 = cbLight._m0[_1977].y + _483;
        float _1999 = cbLight._m0[_1977].z + _484;
        float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
        float _2004 = _2003 * _1997;
        float _2005 = _2003 * _1998;
        float _2006 = _2003 * _1999;
        float _2007 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1977].xyz));
        float _3908 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _2011 = dot(vec3(_402, _403, _404), vec3(_2004, _2005, _2006));
        float _3919 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2015 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2004, _2005, _2006));
        float _3930 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2019 = _1996 * _1996;
        float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
        float _2032 = (exp2(log2(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2033 = 1.0 - _1996;
        float _2043 = (0.5 / (((_1784 * ((_2010 * _2033) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2033) + _1996) * _2010))) * _2010;
        float _3941 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2045 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
        float _2046 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1971 = (((_2032 * cbLight._m0[_1981].x) * _2045) * _2046) + _1907;
        _1973 = (((_2032 * cbLight._m0[_1981].y) * _2045) * _2046) + _1908;
        _1975 = (((_2032 * cbLight._m0[_1981].z) * _2045) * _2046) + _1909;
    }
    float _2081;
    float _2083;
    float _2085;
    if (_1710)
    {
        _2081 = _1971;
        _2083 = _1973;
        _2085 = _1975;
    }
    else
    {
        uint _2092 = _1615 + 3u;
        uint _2096 = _1615 + 11u;
        float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _405) * 0.949999988079071044921875);
        float _2111 = _2110 * _2110;
        float _2112 = cbLight._m0[_2092].x + _482;
        float _2113 = cbLight._m0[_2092].y + _483;
        float _2114 = cbLight._m0[_2092].z + _484;
        float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
        float _2119 = _2118 * _2112;
        float _2120 = _2118 * _2113;
        float _2121 = _2118 * _2114;
        float _2122 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2092].xyz));
        float _3957 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _2126 = dot(vec3(_402, _403, _404), vec3(_2119, _2120, _2121));
        float _3968 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2130 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2119, _2120, _2121));
        float _3979 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2134 = _2111 * _2111;
        float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
        float _2147 = (exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2148 = 1.0 - _2111;
        float _2158 = (0.5 / (((_1784 * ((_2125 * _2148) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2148) + _2111) * _2125))) * _2125;
        float _3990 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2160 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
        float _2161 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _2081 = (((_2147 * cbLight._m0[_2096].x) * _2160) * _2161) + _1971;
        _2083 = (((_2147 * cbLight._m0[_2096].y) * _2160) * _2161) + _1973;
        _2085 = (((_2147 * cbLight._m0[_2096].z) * _2160) * _2161) + _1975;
    }
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    if (_1613.y == 0u)
    {
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2236;
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2236;
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2236;
        uvec4 _2251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2252 = _2251.x;
        uint _2263 = uint((float(_2251.y) * floor(float(uint(cbSceneParam._m0[85u].y * _491) / _2252))) + floor(float(uint(cbSceneParam._m0[85u].x * _490) / _2252)));
        float _2273 = (log2(_2239 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2274 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        uint _2277 = uint(isnan(14.0) ? _2274 : (isnan(_2274) ? 14.0 : min(_2274, 14.0)));
        uvec4 _2282 = texelFetch(g_lightClusterGridBuffer, int(((_2277 << 2u) + (_2263 << 6u)) >> 2u));
        uint _2283 = _2282.x;
        uint _2284 = _2251.z;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        if (((((1u << ((_2284 >> 4u) & 15u)) + 4294967295u) & _2283) == 0u) || ((_2284 & 240u) == 0u))
        {
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
        }
        else
        {
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2277 << 5u) + (_2263 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2543)
                {
                    frontier_phi_63_pred = _2532;
                    frontier_phi_63_pred_1 = _2531;
                    frontier_phi_63_pred_2 = _2530;
                    frontier_phi_63_pred_3 = _2529;
                    frontier_phi_63_pred_4 = _2528;
                    frontier_phi_63_pred_5 = _2527;
                }
                else
                {
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    uint _2657;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2542;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2661 = uint(findLSB(_2657)) + (_2533 << 5u);
                        uint _2658 = (_2657 + 4294967295u) & _2657;
                        uint _2663 = _2661 * 48u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 3u)).x));
                        uint _2683 = (_2661 * 48u) + 4u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2702 = (_2661 * 48u) + 8u;
                        vec3 _2713 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x));
                        float _2717 = _2677.x - _2237;
                        float _2718 = _2677.y - _2238;
                        float _2719 = _2677.z - _2239;
                        float _2720 = dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719));
                        float _2723 = inversesqrt(_2720);
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2727 = dot(vec3(_511, _514, _517), vec3(_2724, _2725, _2726));
                        float _2732 = 1.0 - (_2720 * _2677.w);
                        float _4016 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2733 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2734 = sqrt(_2720) * _2696.w;
                        float _2737 = 1.39999997615814208984375 / (_2734 + 1.39999997615814208984375);
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2727) + _2738;
                        float _2744 = _2734 * _2734;
                        float _2748 = ((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2733) / ((_2744 * 0.699999988079071044921875) + 1.0);
                        float _2752 = (-0.0) - _2237;
                        float _2753 = (-0.0) - _2238;
                        float _2754 = (-0.0) - _2239;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2769 = exp2(log2(1.0 / ((_2744 * 3.5) + 5.0)) * 0.25);
                        float _2770 = 1.0 - _571;
                        float _2777 = sqrt(1.0 - ((1.0 - (_2770 * _2770)) * (1.0 - (_2769 * _2769))));
                        float _2778 = _2777 * _2777;
                        float _2779 = _2778 * _2778;
                        float _2780 = _2759 + _2724;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2790 = dot(vec3(_511, _514, _517), vec3(_2759, _2760, _2761));
                        float _4032 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2794 = dot(vec3(_511, _514, _517), vec3(_2786 * _2780, _2786 * _2781, _2786 * _2782));
                        float _4043 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                        float _2801 = ((_2797 * _2797) * (_2779 + (-1.0))) + 1.0;
                        float _2802 = _2737 * _2778;
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2727) + _2803;
                        float _4054 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2808 = 1.0 - _2778;
                        float _2818 = (0.5 / (((_2807 * ((_2793 * _2808) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2807 * _2808) + _2778) * _2793))) * _2807;
                        float _4065 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2829 = (((_2779 * 3.1415927410125732421875) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) / ((_2801 * _2801) * ((_2744 * 2.1991131305694580078125) + 3.141590118408203125))) * _2733;
                        _2586 = (_2748 * _2696.x) + _2654;
                        _2587 = (_2748 * _2696.y) + _2655;
                        _2588 = (_2748 * _2696.z) + _2656;
                        _2583 = (_2829 * _2713.x) + _2651;
                        _2584 = (_2829 * _2713.y) + _2652;
                        _2585 = (_2829 * _2713.z) + _2653;
                        if (_2658 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2658;
                        }
                    }
                    frontier_phi_63_pred = _2588;
                    frontier_phi_63_pred_1 = _2587;
                    frontier_phi_63_pred_2 = _2586;
                    frontier_phi_63_pred_3 = _2585;
                    frontier_phi_63_pred_4 = _2584;
                    frontier_phi_63_pred_5 = _2583;
                }
                _2394 = frontier_phi_63_pred;
                _2392 = frontier_phi_63_pred_1;
                _2390 = frontier_phi_63_pred_2;
                _2388 = frontier_phi_63_pred_3;
                _2386 = frontier_phi_63_pred_4;
                _2384 = frontier_phi_63_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2384;
                    _2528 = _2386;
                    _2529 = _2388;
                    _2530 = _2390;
                    _2531 = _2392;
                    _2532 = _2394;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
        }
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.z;
        uint _2400 = (_2398 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2400) & _2283) == 0u)
        {
            _2495 = _2383;
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
            _2503 = _2391;
            _2505 = _2393;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
            float _2521 = _2520 * _2237;
            float _2522 = _2520 * _2238;
            float _2523 = _2520 * _2239;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2400 < ((_2398 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2634 = _2383;
                float _2635 = _2385;
                float _2636 = _2387;
                float _2637 = _2389;
                float _2638 = _2391;
                float _2639 = _2393;
                uint _2640 = _2400;
                uint _2649;
                bool _2650;
                for (;;)
                {
                    _2649 = texelFetch(g_lightClassification, int((((_2277 << 5u) + (_2263 << 9u)) + (_2640 << 2u)) >> 2u)).x;
                    _2650 = _2649 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2650)
                    {
                        frontier_phi_69_pred = _2639;
                        frontier_phi_69_pred_1 = _2638;
                        frontier_phi_69_pred_2 = _2637;
                        frontier_phi_69_pred_3 = _2636;
                        frontier_phi_69_pred_4 = _2635;
                        frontier_phi_69_pred_5 = _2634;
                    }
                    else
                    {
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        uint _2853 = _2649;
                        uint _2854;
                        vec4 _2879;
                        float _2880;
                        vec4 _2895;
                        vec3 _2907;
                        vec4 _2923;
                        vec4 _2939;
                        float _2986;
                        bool _2987;
                        for (;;)
                        {
                            uint _2864 = ((_2640 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2853));
                            _2854 = (_2853 + 4294967295u) & _2853;
                            uint _2866 = _2864 * 40u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            _2880 = _2879.w;
                            uint _2882 = (_2864 * 40u) + 4u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2864 * 40u) + 8u;
                            _2907 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x));
                            uint _2910 = (_2864 * 40u) + 16u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2926 = (_2864 * 40u) + 20u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2864 * 40u) + 24u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2961 = (_2864 * 40u) + 28u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            _2986 = fma(_2239, _2974.z, fma(_2238, _2974.y, _2974.x * _2237)) + _2974.w;
                            _2987 = !((fma(_2239, _2955.z, fma(_2238, _2955.y, _2955.x * _2237)) + _2955.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2987)
                            {
                                float _3014 = _2879.x - _2237;
                                float _3015 = _2879.y - _2238;
                                float _3016 = _2879.z - _2239;
                                float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                                float _3020 = inversesqrt(_3017);
                                float _3021 = _3020 * _3014;
                                float _3022 = _3020 * _3015;
                                float _3023 = _3020 * _3016;
                                float _3027 = 1.0 - (_3017 / (_2880 * _2880));
                                float _4076 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3032 = sqrt(_3017) * _2895.w;
                                float _3034 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                                float _3035 = _3034 * _3034;
                                float _3038 = ((1.0 - _3035) * dot(vec3(_3021, _3022, _3023), vec3(_511, _514, _517))) + _3035;
                                float _3041 = _3032 * _3032;
                                float _3045 = (fma(_2239, _2923.z, fma(_2238, _2923.y, _2923.x * _2237)) + _2923.w) / _2986;
                                float _3046 = (fma(_2239, _2939.z, fma(_2238, _2939.y, _2939.x * _2237)) + _2939.w) / _2986;
                                float _3050 = 1.0 - dot(vec2(_3045, _3046), vec2(_3045, _3046));
                                float _4092 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3052 = _3051 * (((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3028) / ((_3041 * 0.699999988079071044921875) + 1.0));
                                float _3064 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                                float _3065 = 1.0 - _571;
                                float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                                float _3073 = _3072 * _3072;
                                float _3074 = _3073 * _3073;
                                float _3075 = _3021 - _2521;
                                float _3076 = _3022 - _2522;
                                float _3077 = _3023 - _2523;
                                float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                                float _3085 = dot(vec3(_511, _514, _517), vec3((-0.0) - _2521, (-0.0) - _2522, (-0.0) - _2523));
                                float _4103 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3089 = dot(vec3(_511, _514, _517), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                                float _4114 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                                float _3097 = _3034 * _3073;
                                float _3098 = _3097 * _3097;
                                float _3104 = ((1.0 - _3098) * dot(vec3(_511, _514, _517), vec3(_3021, _3022, _3023))) + _3098;
                                float _4125 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3106 = 1.0 - _3073;
                                float _3116 = (0.5 / (((_3105 * ((_3088 * _3106) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3073) * _3088))) * _3105;
                                float _4136 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3126 = (_3051 * _3028) * (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) / ((_3096 * _3096) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3052 * _2895.z;
                                frontier_phi_75_pred_1 = _3052 * _2895.y;
                                frontier_phi_75_pred_2 = _3052 * _2895.x;
                                frontier_phi_75_pred_3 = _3126 * _2907.z;
                                frontier_phi_75_pred_4 = _3126 * _2907.y;
                                frontier_phi_75_pred_5 = _3126 * _2907.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3135 = frontier_phi_75_pred;
                            _3134 = frontier_phi_75_pred_1;
                            _3133 = frontier_phi_75_pred_2;
                            _3132 = frontier_phi_75_pred_3;
                            _3131 = frontier_phi_75_pred_4;
                            _3130 = frontier_phi_75_pred_5;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            if (_2854 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2854;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2839;
                        frontier_phi_69_pred_1 = _2838;
                        frontier_phi_69_pred_2 = _2837;
                        frontier_phi_69_pred_3 = _2836;
                        frontier_phi_69_pred_4 = _2835;
                        frontier_phi_69_pred_5 = _2834;
                    }
                    _2506 = frontier_phi_69_pred;
                    _2504 = frontier_phi_69_pred_1;
                    _2502 = frontier_phi_69_pred_2;
                    _2500 = frontier_phi_69_pred_3;
                    _2498 = frontier_phi_69_pred_4;
                    _2496 = frontier_phi_69_pred_5;
                    uint _2641 = _2640 + 1u;
                    if (_2641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2634 = _2496;
                        _2635 = _2498;
                        _2636 = _2500;
                        _2637 = _2502;
                        _2638 = _2504;
                        _2639 = _2506;
                        _2640 = _2641;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2506;
                frontier_phi_57_58_ladder_1 = _2504;
                frontier_phi_57_58_ladder_2 = _2502;
                frontier_phi_57_58_ladder_3 = _2500;
                frontier_phi_57_58_ladder_4 = _2498;
                frontier_phi_57_58_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_57_58_ladder = _2393;
                frontier_phi_57_58_ladder_1 = _2391;
                frontier_phi_57_58_ladder_2 = _2389;
                frontier_phi_57_58_ladder_3 = _2387;
                frontier_phi_57_58_ladder_4 = _2385;
                frontier_phi_57_58_ladder_5 = _2383;
            }
            _2495 = frontier_phi_57_58_ladder_5;
            _2497 = frontier_phi_57_58_ladder_4;
            _2499 = frontier_phi_57_58_ladder_3;
            _2501 = frontier_phi_57_58_ladder_2;
            _2503 = frontier_phi_57_58_ladder_1;
            _2505 = frontier_phi_57_58_ladder;
        }
        float _2510 = isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0));
        _2295 = (_2510 * _2501) + _1748;
        _2297 = (_2510 * _2503) + _1750;
        _2299 = (_2510 * _2505) + _1752;
        _2301 = ((_2495 * 0.039999999105930328369140625) * _2510) + _2081;
        _2303 = ((_2497 * 0.039999999105930328369140625) * _2510) + _2083;
        _2305 = ((_2499 * 0.039999999105930328369140625) * _2510) + _2085;
    }
    else
    {
        _2295 = _1748;
        _2297 = _1750;
        _2299 = _1752;
        _2301 = _2081;
        _2303 = _2083;
        _2305 = _2085;
    }
    float _4152 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4163 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4174 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    uint _2325 = _530 + 6u;
    float _2333 = _490 / cbSceneParam._m0[86u].x;
    float _2334 = _491 / cbSceneParam._m0[86u].y;
    vec4 _2348 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, (log2((isnan(cbSceneParam._m0[77u].w) ? _424 : (isnan(_424) ? cbSceneParam._m0[77u].w : min(_424, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2350 = _2348.x;
    float _2351 = _2348.y;
    float _2352 = _2348.z;
    float _2353 = _2348.w;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_424 > cbSceneParam._m0[78u].w)
    {
        float _2408 = isnan(_424) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _424 : min(cbSceneParam._m0[80u].w, _424));
        float _2409 = _2408 / _424;
        float _2420 = _2409 * _475;
        float _2421 = _476 * _2409;
        float _2422 = (-0.0) - _2421;
        float _2423 = _2409 * _477;
        float _2425 = (cbSceneParam._m0[77u].w * _2422) / _2408;
        float _2426 = _2425 + cbSceneParam._m0[79u].w;
        float _2427 = cbSceneParam._m0[79u].w - _2421;
        float _2433 = sqrt(((_2420 * _2420) + (_2421 * _2421)) + (_2423 * _2423));
        float _2436 = (1.0 - (cbSceneParam._m0[77u].w / _2408)) * _2433;
        float _2441 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2443 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2422 - _2425) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2426 > 0.0) ? exp2(_2441 * _2426) : (2.0 - exp2(_2443 * _2426))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2436;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : max(_2426, _2427));
            float _2558 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : min(_2426, _2427));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2596 = ((abs(_2433 / _2422) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2441 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2441 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2443 * _2567) - exp2(_2443 * _2568)) * _2556))) + (_2436 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2353);
        _2445 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2350;
        _2447 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2351;
        _2449 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2352;
        _2451 = _2607 * _2353;
    }
    else
    {
        _2445 = _2350;
        _2447 = _2351;
        _2449 = _2352;
        _2451 = _2353;
    }
    float _2463 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2464 = _2463 == 3.0;
    float _2465 = log2(_2451);
    float _2472 = exp2(_2465 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2295 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _555))) + ((_2301 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1362)) * cbPerFrame._m0[3u].x));
    float _2473 = exp2(_2465 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2297 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _555))) + ((_2303 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1362)) * cbPerFrame._m0[3u].x));
    float _2474 = exp2(_2465 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2299 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _555))) + ((_2305 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1362)) * cbPerFrame._m0[3u].x));
    float _2483 = (_2463 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2483 * (_2464 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.y = _2483 * (_2464 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.z = _2483 * (_2464 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2449)));
    SV_Target.w = cbInstanceData._m0[_2325].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2325].w;
}


