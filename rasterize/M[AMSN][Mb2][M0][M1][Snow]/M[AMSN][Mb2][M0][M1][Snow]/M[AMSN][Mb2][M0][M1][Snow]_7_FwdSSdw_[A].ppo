#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _992;
float _3406;
float _3407;
float _3408;
float _3409;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3418 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3429 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))));
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _341 = _336.x * cbMtdParam._m0[9u].x;
    float _342 = _336.y * cbMtdParam._m0[9u].y;
    float _343 = _336.z * cbMtdParam._m0[9u].z;
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _376 = (((_362.x * cbMtdParam._m0[10u].x) - _341) * _297) + _341;
    float _377 = (((_362.y * cbMtdParam._m0[10u].y) - _342) * _297) + _342;
    float _378 = (((_362.z * cbMtdParam._m0[10u].z) - _343) * _297) + _343;
    float _394 = _297 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _397 = fma(_318, _230, fma(_312, _222 * TANGENT.x, (_208 * _200) * _310));
    float _400 = fma(_318, _231, fma(_312, _222 * TANGENT.y, (_208 * _201) * _310));
    float _403 = fma(_318, _232, fma(_312, _222 * TANGENT.z, (_208 * _202) * _310));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3440 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _411 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3462 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3473 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3484 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _415 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _482 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _472);
    float _483 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _472);
    float _484 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _472);
    float _488 = inversesqrt(dot(vec3(_482, _483, _484), vec3(_482, _483, _484)));
    float _489 = _482 * _488;
    float _490 = _483 * _488;
    float _491 = _484 * _488;
    vec4 _496 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _498 = _496.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _672 = sqrt(((_482 * _482) + (_483 * _483)) + (_484 * _484));
        float _678 = (cbMatDynParam._m0[5u].x * _672) + cbMatDynParam._m0[5u].y;
        float _3495 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _683 = (cbMatDynParam._m0[5u].z * _672) + cbMatDynParam._m0[5u].w;
        float _3506 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) - _679)) + _679) < ((_498 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _509 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _510 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _530 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _533 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _536 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _549 = uint(roundEven(NORMAL.w)) * 13u;
    uint _550 = _549 + 9u;
    uint _551 = _550 + uint(cbMatDynParam._m0[0u].w);
    float _557 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_551].x;
    float _558 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_551].y;
    float _559 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_551].z;
    float _3517 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _563 = 1.0 - _415;
    float _564 = _560 * _563;
    float _565 = _561 * _563;
    float _566 = _562 * _563;
    float _571 = (_560 + (-0.039999999105930328369140625)) * _415;
    float _572 = (_561 + (-0.039999999105930328369140625)) * _415;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _415;
    float _574 = _571 + 0.039999999105930328369140625;
    float _576 = _572 + 0.039999999105930328369140625;
    float _577 = _573 + 0.039999999105930328369140625;
    vec4 _586 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _509, cbSceneParam._m0[86u].y * _510));
    float _589 = _586.x * TEXCOORD_9.w;
    float _590 = dot(vec3(_408, _409, _410), vec3(_489, _490, _491));
    float _593 = _590 * 2.0;
    float _597 = (_593 * _408) - _489;
    float _598 = (_593 * _409) - _490;
    float _599 = (_593 * _410) - _491;
    float _603 = abs(dot(vec3(_489, _490, _491), vec3(_408, _409, _410)));
    float _3550 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _605 = sqrt(_411);
    float _618 = exp2((_605 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_605 * 3.0));
    float _624 = (1.0 - _618) * ((_605 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _625 = _618 * _605;
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _991;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = fma(_661, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653));
        float _720 = fma(_661, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653));
        float _724 = fma(_661, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653));
        float _749 = _653 + _408;
        float _750 = _657 + _409;
        float _751 = _661 + _410;
        float _761 = fma(_751, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749)) - _716;
        float _762 = fma(_751, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749)) - _720;
        float _763 = fma(_751, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749)) - _724;
        float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
        float _780 = ((_767 * _761) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_716 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_767 * _762) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_720 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_767 * _763) / cbModelParam._m0[34u].z) + ((((((_724 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        float _819 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_785.x + (-0.5));
        float _821 = _819 * (_785.y + (-0.5));
        float _822 = _819 * (_785.z + (-0.5));
        float _829 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_792.x + (-0.5));
        float _831 = _829 * (_792.y + (-0.5));
        float _832 = _829 * (_792.z + (-0.5));
        float _839 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_799.x + (-0.5));
        float _841 = _839 * (_799.y + (-0.5));
        float _842 = _839 * (_799.z + (-0.5));
        float _849 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_806.x + (-0.5));
        float _851 = _849 * (_806.y + (-0.5));
        float _852 = _849 * (_806.z + (-0.5));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = _820 * 0.5;
        float _857 = _830 * 0.5;
        float _858 = _840 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _873 = (dot(vec3(_408, _409, _410), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _883 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3598 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_885 + 1.0))) + _890) * _853;
        float _900 = _821 * 0.5;
        float _901 = _831 * 0.5;
        float _902 = _841 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_408, _409, _410), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3631 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_927 + 1.0))) + _932) * _854;
        float _942 = _822 * 0.5;
        float _943 = _832 * 0.5;
        float _944 = _842 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_408, _409, _410), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3664 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_969 + 1.0))) + _974) * _855;
        _991 = _822;
        _993 = _821;
        _994 = _820;
        _995 = _832;
        _996 = _831;
        _997 = _830;
        _998 = _842;
        _999 = _841;
        _1000 = _840;
        _1001 = _855;
        _1002 = _854;
        _1003 = _853;
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
    }
    else
    {
        _991 = _992;
        _993 = _992;
        _994 = _992;
        _995 = _992;
        _996 = _992;
        _997 = _992;
        _998 = _992;
        _999 = _992;
        _1000 = _992;
        _1001 = _992;
        _1002 = _992;
        _1003 = _992;
        _1004 = 0.0;
        _1005 = 0.0;
        _1006 = 0.0;
    }
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1035 = fma(_661, cbModelParam._m0[30u].z, fma(_657, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _653));
        float _1039 = fma(_661, cbModelParam._m0[31u].z, fma(_657, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _653));
        float _1043 = fma(_661, cbModelParam._m0[32u].z, fma(_657, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _653));
        float _1066 = _653 + _408;
        float _1067 = _657 + _409;
        float _1068 = _661 + _410;
        float _1078 = fma(_1068, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066)) - _1035;
        float _1079 = fma(_1068, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066)) - _1039;
        float _1080 = fma(_1068, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066)) - _1043;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1035 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1039 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[35u].z) + ((((((_1043 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1134 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1101.x + (-0.5));
        float _1136 = _1134 * (_1101.y + (-0.5));
        float _1137 = _1134 * (_1101.z + (-0.5));
        float _1144 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1108.x + (-0.5));
        float _1146 = _1144 * (_1108.y + (-0.5));
        float _1147 = _1144 * (_1108.z + (-0.5));
        float _1154 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1115.x + (-0.5));
        float _1156 = _1154 * (_1115.y + (-0.5));
        float _1157 = _1154 * (_1115.z + (-0.5));
        float _1164 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1122.x + (-0.5));
        float _1166 = _1164 * (_1122.y + (-0.5));
        float _1167 = _1164 * (_1122.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_408, _409, _410), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3727 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1198 + 1.0))) + _1203) * _1168;
        float _1213 = _1136 * 0.5;
        float _1214 = _1146 * 0.5;
        float _1215 = _1156 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_408, _409, _410), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3760 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1240 + 1.0))) + _1245) * _1169;
        float _1255 = _1137 * 0.5;
        float _1256 = _1147 * 0.5;
        float _1257 = _1157 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_408, _409, _410), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3793 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1282 + 1.0))) + _1287) * _1170;
        _1304 = _1137;
        _1305 = _1136;
        _1306 = _1135;
        _1307 = _1147;
        _1308 = _1146;
        _1309 = _1145;
        _1310 = _1157;
        _1311 = _1156;
        _1312 = _1155;
        _1313 = _1170;
        _1314 = _1169;
        _1315 = _1168;
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _992;
        _1305 = _992;
        _1306 = _992;
        _1307 = _992;
        _1308 = _992;
        _1309 = _992;
        _1310 = _992;
        _1311 = _992;
        _1312 = _992;
        _1313 = _992;
        _1314 = _992;
        _1315 = _992;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1004)) + _1004;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1351 = fma(_1330, cbSceneParam._m0[89u].z, fma(_1329, cbSceneParam._m0[89u].y, _1328 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1330, cbSceneParam._m0[90u].z, fma(_1329, cbSceneParam._m0[90u].y, _1328 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1330, cbSceneParam._m0[91u].z, fma(_1329, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1328));
    float _1372 = _597 * 0.5;
    float _1373 = _598 * 0.5;
    float _1374 = _599 * 0.5;
    float _1375 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1378 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1381 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1415;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1388 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_991, _995, _998, _1001));
        float _1392 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_993, _996, _999, _1002));
        float _1396 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_994, _997, _1000, _1003));
        float _1403 = dot(vec4(cbModelParam._m0[39u]), vec4(_1372, _1373, _1374, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1426;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1417 = dot(vec4(cbModelParam._m0[40u]), vec4(_1372, _1373, _1374, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1430 = (_1426 * cbModelParam._m0[1u].x) + (_1415 * (1.0 - cbModelParam._m0[1u].x));
    float _1440 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1440 : min(cbModelParam._m0[25u].z, _1440));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1490 = fma(_661, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653)) + cbModelParam._m0[13u].w;
        float _1494 = fma(_661, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653)) + cbModelParam._m0[14u].w;
        float _1498 = fma(_661, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653)) + cbModelParam._m0[15u].w;
        float _1501 = fma(_599, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597));
        float _1504 = fma(_599, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597));
        float _1507 = fma(_599, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597));
        float _1535;
        if (_1501 > 0.0)
        {
            _1535 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1535 = frontier_phi_19_17_ladder;
        }
        float _1763;
        if (_1504 > 0.0)
        {
            _1763 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1763 = frontier_phi_28_24_ladder;
        }
        float _2020;
        if (_1507 > 0.0)
        {
            _2020 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2020 = frontier_phi_40_35_ladder;
        }
        float _2022 = isnan(_1763) ? _1535 : (isnan(_1535) ? _1763 : min(_1535, _1763));
        float _2023 = isnan(_2020) ? _2022 : (isnan(_2022) ? _2020 : min(_2022, _2020));
        float _2027 = (_2023 * _1501) + _1490;
        float _2028 = (_2023 * _1504) + _1494;
        float _2029 = (_2023 * _1507) + _1498;
        float _2030 = _2023 * 9.9999997473787516355514526367188e-05;
        float _2032 = (-1.0) - _2030;
        float _2034 = _2030 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2029 > _2034) || ((_2029 < _2032) || ((_2028 > _2034) || ((_2028 < _2032) || ((_2027 < _2032) || (_2027 > _2034))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2157 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2029, cbModelParam._m0[9u].z, fma(_2028, cbModelParam._m0[9u].y, _2027 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2029, cbModelParam._m0[10u].z, fma(_2028, cbModelParam._m0[10u].y, _2027 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2029, cbModelParam._m0[11u].z, fma(_2028, cbModelParam._m0[11u].y, _2027 * cbModelParam._m0[11u].x))), _1441);
            frontier_phi_18_40_ladder = _2157.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2157.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2157.x * cbModelParam._m0[1u].y;
        }
        _1523 = frontier_phi_18_40_ladder_2;
        _1525 = frontier_phi_18_40_ladder_1;
        _1527 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_597, _598, _599), _1441);
        _1523 = _1511.x * cbModelParam._m0[1u].y;
        _1525 = _1511.y * cbModelParam._m0[1u].y;
        _1527 = _1511.z * cbModelParam._m0[1u].y;
    }
    float _1531 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1532 = isnan(_1531) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1531 : min(cbModelParam._m0[25u].w, _1531));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1589 = fma(_661, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653)) + cbModelParam._m0[21u].w;
        float _1593 = fma(_661, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653)) + cbModelParam._m0[22u].w;
        float _1597 = fma(_661, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653)) + cbModelParam._m0[23u].w;
        float _1600 = fma(_599, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597));
        float _1603 = fma(_599, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597));
        float _1606 = fma(_599, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597));
        float _1768;
        if (_1600 > 0.0)
        {
            _1768 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1768 = frontier_phi_30_26_ladder;
        }
        float _2047;
        if (_1603 > 0.0)
        {
            _2047 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2047 = frontier_phi_42_37_ladder;
        }
        float _2260;
        if (_1606 > 0.0)
        {
            _2260 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2260 = frontier_phi_51_48_ladder;
        }
        float _2262 = isnan(_2047) ? _1768 : (isnan(_1768) ? _2047 : min(_1768, _2047));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1600) + _1589;
        float _2268 = (_2263 * _1603) + _1593;
        float _2269 = (_2263 * _1606) + _1597;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2269, cbModelParam._m0[17u].z, fma(_2268, cbModelParam._m0[17u].y, _2267 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2269, cbModelParam._m0[18u].z, fma(_2268, cbModelParam._m0[18u].y, _2267 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2269, cbModelParam._m0[19u].z, fma(_2268, cbModelParam._m0[19u].y, _2267 * cbModelParam._m0[19u].x))), _1532);
            frontier_phi_27_51_ladder = _2467.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2467.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2467.x * cbModelParam._m0[1u].z;
        }
        _1625 = frontier_phi_27_51_ladder_2;
        _1627 = frontier_phi_27_51_ladder_1;
        _1629 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_597, _598, _599), _1532);
        _1625 = _1609.x * cbModelParam._m0[1u].z;
        _1627 = _1609.y * cbModelParam._m0[1u].z;
        _1629 = _1609.z * cbModelParam._m0[1u].z;
    }
    float _1642 = (((_624 * _574) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1625 - _1523)) + _1523);
    float _1644 = (((_624 * _576) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1646 = (((_624 * _577) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1642 * cbSceneParam._m0[91u].x));
    vec4 _1663 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_509, _510));
    float _1665 = _1663.w;
    float _1677 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1665);
    float _1678 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1665);
    float _1679 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1665);
    uvec4 _1683 = floatBitsToUint(cbInstanceData._m0[_549 + 5u]);
    uint _1685 = _1683.x * 14u;
    uint _1686 = _1685 + 13u;
    float _1693 = _589 + (-1.0);
    float _1698 = (cbLight._m0[_1686].x * _1693) + 1.0;
    float _1699 = (cbLight._m0[_1686].y * _1693) + 1.0;
    float _1700 = (cbLight._m0[_1686].z * _1693) + 1.0;
    float _1701 = (cbLight._m0[_1686].w * _1693) + 1.0;
    uint _1702 = _1685 + 5u;
    float _1708 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1712 = _1685 + 4u;
    float _1721 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1725 = _1685 | 1u;
    float _1736 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_408, _409, _410));
    float _1739 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_408, _409, _410));
    float _3929 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _3940 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1744 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _1746 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.3183098733425140380859375;
    float _1753 = ((cbLight._m0[_1702].x * _1708) * _1746) + (((cbLight._m0[_1712].x * _1677) * _1721) * _1744);
    float _1754 = ((_1708 * cbLight._m0[_1702].y) * _1746) + (((cbLight._m0[_1712].y * _1678) * _1721) * _1744);
    float _1755 = ((_1708 * cbLight._m0[_1702].z) * _1746) + (((cbLight._m0[_1712].z * _1679) * _1721) * _1744);
    uvec4 _1760 = floatBitsToUint(cbLight._m0[_1685 + 12u]);
    bool _1762 = _1760.x == 0u;
    float _1773;
    float _1775;
    float _1777;
    if (_1762)
    {
        _1773 = _1753;
        _1775 = _1754;
        _1777 = _1755;
    }
    else
    {
        uint _1781 = _1685 + 6u;
        float _1797 = (dot(vec3(cbLight._m0[_1685 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1798 = _1797 * _1797;
        float _3951 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1800 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _1773 = (((cbLight._m0[_1781].x * 0.3183098733425140380859375) * _1799) * _1800) + _1753;
        _1775 = (((cbLight._m0[_1781].y * 0.3183098733425140380859375) * _1799) * _1800) + _1754;
        _1777 = (((cbLight._m0[_1781].z * 0.3183098733425140380859375) * _1799) * _1800) + _1755;
    }
    bool _1780 = _1760.y == 0u;
    float _1818;
    float _1820;
    float _1822;
    if (_1780)
    {
        _1818 = _1773;
        _1820 = _1775;
        _1822 = _1777;
    }
    else
    {
        uint _1991 = _1685 + 7u;
        float _2007 = (dot(vec3(cbLight._m0[_1685 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _2008 = _2007 * _2007;
        float _3967 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2010 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1818 = (((cbLight._m0[_1991].x * 0.3183098733425140380859375) * _2009) * _2010) + _1773;
        _1820 = (((cbLight._m0[_1991].y * 0.3183098733425140380859375) * _2009) * _2010) + _1775;
        _1822 = (((cbLight._m0[_1991].z * 0.3183098733425140380859375) * _2009) * _2010) + _1777;
    }
    uint _1825 = _1685 + 8u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1685].w)) * _411) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1685].x + _489;
    float _1841 = cbLight._m0[_1685].y + _490;
    float _1842 = cbLight._m0[_1685].z + _491;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1685].xyz));
    float _3983 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _1854 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1855 = dot(vec3(_408, _409, _410), vec3(_1847, _1848, _1849));
    float _4005 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1847, _1848, _1849));
    float _4016 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1839 * _1839;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1875 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
    float _1876 = 0.959999978542327880859375 - _571;
    float _1878 = 0.959999978542327880859375 - _572;
    float _1879 = 0.959999978542327880859375 - _573;
    float _1886 = 1.0 - _1839;
    float _1897 = (0.5 / (((_1854 * ((_1853 * _1886) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _1886) + _1839) * _1853))) * _1853;
    float _4027 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1899 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    uint _1913 = _1685 + 9u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _411) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1725].x + _489;
    float _1927 = cbLight._m0[_1725].y + _490;
    float _1928 = cbLight._m0[_1725].z + _491;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1725].xyz));
    float _4038 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1940 = dot(vec3(_408, _409, _410), vec3(_1933, _1934, _1935));
    float _4049 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1933, _1934, _1935));
    float _4060 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1948 = _1925 * _1925;
    float _1952 = ((_1943 * _1943) * (_1948 + (-1.0))) + 1.0;
    float _1959 = exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0);
    float _1966 = 1.0 - _1925;
    float _1976 = (0.5 / (((_1854 * ((_1939 * _1966) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _1966) + _1925) * _1939))) * _1939;
    float _4071 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1978 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1948 / ((_1952 * _1952) * 3.141590118408203125));
    float _1988 = (((((_1959 * _1876) + _574) * cbLight._m0[_1913].x) * _1978) * _1708) + ((((cbLight._m0[_1825].x * _1677) * ((_1875 * _1876) + _574)) * _1899) * _1721);
    float _1989 = (((((_1959 * _1878) + _576) * cbLight._m0[_1913].y) * _1978) * _1708) + ((((cbLight._m0[_1825].y * _1678) * ((_1875 * _1878) + _576)) * _1899) * _1721);
    float _1990 = (((((_1959 * _1879) + _577) * cbLight._m0[_1913].z) * _1978) * _1708) + ((((cbLight._m0[_1825].z * _1679) * ((_1875 * _1879) + _577)) * _1899) * _1721);
    float _2052;
    float _2054;
    float _2056;
    if (_1762)
    {
        _2052 = _1988;
        _2054 = _1989;
        _2056 = _1990;
    }
    else
    {
        uint _2058 = _1685 + 2u;
        uint _2062 = _1685 + 10u;
        float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _411) * 0.949999988079071044921875);
        float _2077 = _2076 * _2076;
        float _2078 = cbLight._m0[_2058].x + _489;
        float _2079 = cbLight._m0[_2058].y + _490;
        float _2080 = cbLight._m0[_2058].z + _491;
        float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
        float _2085 = _2084 * _2078;
        float _2086 = _2084 * _2079;
        float _2087 = _2084 * _2080;
        float _2088 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2058].xyz));
        float _4082 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2092 = dot(vec3(_408, _409, _410), vec3(_2085, _2086, _2087));
        float _4093 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2085, _2086, _2087));
        float _4104 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2100 = _2077 * _2077;
        float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
        float _2111 = exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0);
        float _2118 = 1.0 - _2077;
        float _2128 = (0.5 / (((_1854 * ((_2091 * _2118) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _2118) + _2077) * _2091))) * _2091;
        float _4115 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2130 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
        float _2131 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _2052 = (((((_2111 * _1876) + _574) * cbLight._m0[_2062].x) * _2130) * _2131) + _1988;
        _2054 = (((((_2111 * _1878) + _576) * cbLight._m0[_2062].y) * _2130) * _2131) + _1989;
        _2056 = (((((_2111 * _1879) + _577) * cbLight._m0[_2062].z) * _2130) * _2131) + _1990;
    }
    float _2166;
    float _2168;
    float _2170;
    if (_1780)
    {
        _2166 = _2052;
        _2168 = _2054;
        _2170 = _2056;
    }
    else
    {
        uint _2177 = _1685 + 3u;
        uint _2181 = _1685 + 11u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _411) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _489;
        float _2198 = cbLight._m0[_2177].y + _490;
        float _2199 = cbLight._m0[_2177].z + _491;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2177].xyz));
        float _4131 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2211 = dot(vec3(_408, _409, _410), vec3(_2204, _2205, _2206));
        float _4142 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4153 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
        float _2237 = 1.0 - _2196;
        float _2247 = (0.5 / (((_1854 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _2237) + _2196) * _2210))) * _2210;
        float _4164 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2166 = (((((_2230 * _1876) + _574) * cbLight._m0[_2181].x) * _2249) * _2250) + _2052;
        _2168 = (((((_2230 * _1878) + _576) * cbLight._m0[_2181].y) * _2249) * _2250) + _2054;
        _2170 = (((((_2230 * _1879) + _577) * cbLight._m0[_2181].z) * _2249) * _2250) + _2056;
    }
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    if (_1683.y == 0u)
    {
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2325;
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2325;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2325;
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.x;
        uint _2352 = uint((float(_2340.y) * floor(float(uint(cbSceneParam._m0[85u].y * _510) / _2341))) + floor(float(uint(cbSceneParam._m0[85u].x * _509) / _2341)));
        float _2362 = (log2(_2328 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2363 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        uint _2366 = uint(isnan(14.0) ? _2363 : (isnan(_2363) ? 14.0 : min(_2363, 14.0)));
        uvec4 _2371 = texelFetch(g_lightClusterGridBuffer, int(((_2366 << 2u) + (_2352 << 6u)) >> 2u));
        uint _2372 = _2371.x;
        uint _2373 = _2340.z;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        if (((((1u << ((_2373 >> 4u) & 15u)) + 4294967295u) & _2372) == 0u) || ((_2373 & 240u) == 0u))
        {
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
        }
        else
        {
            float _2473;
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            uint _2630 = 0u;
            uint _2639;
            bool _2640;
            for (;;)
            {
                _2639 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                _2640 = _2639 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2640)
                {
                    frontier_phi_68_pred = _2626;
                    frontier_phi_68_pred_1 = _2629;
                    frontier_phi_68_pred_2 = _2628;
                    frontier_phi_68_pred_3 = _2627;
                    frontier_phi_68_pred_4 = _2625;
                    frontier_phi_68_pred_5 = _2624;
                }
                else
                {
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    uint _2775;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2639;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    for (;;)
                    {
                        uint _2779 = uint(findLSB(_2775)) + (_2630 << 5u);
                        uint _2776 = (_2775 + 4294967295u) & _2775;
                        uint _2781 = _2779 * 48u;
                        vec4 _2795 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2801 = (_2779 * 48u) + 4u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2820 = (_2779 * 48u) + 8u;
                        vec3 _2831 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x));
                        float _2835 = _2795.x - _2326;
                        float _2836 = _2795.y - _2327;
                        float _2837 = _2795.z - _2328;
                        float _2838 = dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837));
                        float _2841 = inversesqrt(_2838);
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2845 = dot(vec3(_530, _533, _536), vec3(_2842, _2843, _2844));
                        float _2850 = 1.0 - (_2838 * _2795.w);
                        float _4190 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2851 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2852 = sqrt(_2838) * _2814.w;
                        float _2855 = 1.39999997615814208984375 / (_2852 + 1.39999997615814208984375);
                        float _2856 = _2855 * _2855;
                        float _2859 = ((1.0 - _2856) * _2845) + _2856;
                        float _2862 = _2852 * _2852;
                        float _2866 = ((isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))) * _2851) / ((_2862 * 0.699999988079071044921875) + 1.0);
                        float _2870 = (-0.0) - _2326;
                        float _2871 = (-0.0) - _2327;
                        float _2872 = (-0.0) - _2328;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2887 = exp2(log2(1.0 / ((_2862 * 3.5) + 5.0)) * 0.25);
                        float _2888 = 1.0 - _605;
                        float _2895 = sqrt(1.0 - ((1.0 - (_2888 * _2888)) * (1.0 - (_2887 * _2887))));
                        float _2896 = _2895 * _2895;
                        float _2897 = _2896 * _2896;
                        float _2898 = _2877 + _2842;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2908 = dot(vec3(_530, _533, _536), vec3(_2877, _2878, _2879));
                        float _4206 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2911 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2912 = dot(vec3(_530, _533, _536), vec3(_2904 * _2898, _2904 * _2899, _2904 * _2900));
                        float _4217 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2919 = ((_2915 * _2915) * (_2897 + (-1.0))) + 1.0;
                        float _2920 = _2855 * _2896;
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2845) + _2921;
                        float _4228 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2926 = 1.0 - _2896;
                        float _2936 = (0.5 / (((_2925 * ((_2911 * _2926) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2926) + _2896) * _2911))) * _2925;
                        float _4239 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2947 = (((_2897 * 3.1415927410125732421875) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) / ((_2919 * _2919) * ((_2862 * 2.1991131305694580078125) + 3.141590118408203125))) * _2851;
                        _2699 = (_2866 * _2814.x) + _2772;
                        _2700 = (_2866 * _2814.y) + _2773;
                        _2701 = (_2866 * _2814.z) + _2774;
                        _2696 = (_2947 * _2831.x) + _2769;
                        _2697 = (_2947 * _2831.y) + _2770;
                        _2698 = (_2947 * _2831.z) + _2771;
                        if (_2776 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2769 = _2696;
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2776;
                        }
                    }
                    frontier_phi_68_pred = _2698;
                    frontier_phi_68_pred_1 = _2701;
                    frontier_phi_68_pred_2 = _2700;
                    frontier_phi_68_pred_3 = _2699;
                    frontier_phi_68_pred_4 = _2697;
                    frontier_phi_68_pred_5 = _2696;
                }
                _2477 = frontier_phi_68_pred;
                _2483 = frontier_phi_68_pred_1;
                _2481 = frontier_phi_68_pred_2;
                _2479 = frontier_phi_68_pred_3;
                _2475 = frontier_phi_68_pred_4;
                _2473 = frontier_phi_68_pred_5;
                uint _2631 = _2630 + 1u;
                if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2624 = _2473;
                    _2625 = _2475;
                    _2626 = _2477;
                    _2627 = _2479;
                    _2628 = _2481;
                    _2629 = _2483;
                    _2630 = _2631;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
        }
        uvec4 _2486 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2487 = _2486.z;
        uint _2489 = (_2487 >> 8u) & 15u;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((4294967295u << _2489) & _2372) == 0u)
        {
            _2592 = _2472;
            _2594 = _2474;
            _2596 = _2476;
            _2598 = _2478;
            _2600 = _2480;
            _2602 = _2482;
        }
        else
        {
            float _2617 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
            float _2618 = _2617 * _2326;
            float _2619 = _2617 * _2327;
            float _2620 = _2617 * _2328;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2489 < ((_2487 >> 12u) & 15u))
            {
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2603;
                float _2752 = _2472;
                float _2753 = _2474;
                float _2754 = _2476;
                float _2755 = _2478;
                float _2756 = _2480;
                float _2757 = _2482;
                uint _2758 = _2489;
                uint _2767;
                bool _2768;
                for (;;)
                {
                    _2767 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                    _2768 = _2767 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2768)
                    {
                        frontier_phi_79_pred = _2757;
                        frontier_phi_79_pred_1 = _2756;
                        frontier_phi_79_pred_2 = _2755;
                        frontier_phi_79_pred_3 = _2754;
                        frontier_phi_79_pred_4 = _2753;
                        frontier_phi_79_pred_5 = _2752;
                    }
                    else
                    {
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _2974 = _2752;
                        float _2975 = _2753;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        uint _2980 = _2767;
                        uint _2981;
                        vec4 _3006;
                        float _3007;
                        vec4 _3022;
                        vec3 _3034;
                        vec4 _3050;
                        vec4 _3066;
                        float _3113;
                        bool _3114;
                        for (;;)
                        {
                            uint _2991 = ((_2758 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2980));
                            _2981 = (_2980 + 4294967295u) & _2980;
                            uint _2993 = _2991 * 40u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3007 = _3006.w;
                            uint _3009 = (_2991 * 40u) + 4u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2991 * 40u) + 8u;
                            _3034 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x));
                            uint _3037 = (_2991 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2991 * 40u) + 20u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_2991 * 40u) + 24u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3088 = (_2991 * 40u) + 28u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3113 = fma(_2328, _3101.z, fma(_2327, _3101.y, _3101.x * _2326)) + _3101.w;
                            _3114 = !((fma(_2328, _3082.z, fma(_2327, _3082.y, _3082.x * _2326)) + _3082.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3114)
                            {
                                float _3141 = _3006.x - _2326;
                                float _3142 = _3006.y - _2327;
                                float _3143 = _3006.z - _2328;
                                float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                                float _3147 = inversesqrt(_3144);
                                float _3148 = _3147 * _3141;
                                float _3149 = _3147 * _3142;
                                float _3150 = _3147 * _3143;
                                float _3154 = 1.0 - (_3144 / (_3007 * _3007));
                                float _4250 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3159 = sqrt(_3144) * _3022.w;
                                float _3161 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                                float _3162 = _3161 * _3161;
                                float _3165 = ((1.0 - _3162) * dot(vec3(_3148, _3149, _3150), vec3(_530, _533, _536))) + _3162;
                                float _3168 = _3159 * _3159;
                                float _3172 = (fma(_2328, _3050.z, fma(_2327, _3050.y, _3050.x * _2326)) + _3050.w) / _3113;
                                float _3173 = (fma(_2328, _3066.z, fma(_2327, _3066.y, _3066.x * _2326)) + _3066.w) / _3113;
                                float _3177 = 1.0 - dot(vec2(_3172, _3173), vec2(_3172, _3173));
                                float _4266 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3179 = _3178 * (((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3155) / ((_3168 * 0.699999988079071044921875) + 1.0));
                                float _3191 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                                float _3192 = 1.0 - _605;
                                float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                                float _3200 = _3199 * _3199;
                                float _3201 = _3200 * _3200;
                                float _3202 = _3148 - _2618;
                                float _3203 = _3149 - _2619;
                                float _3204 = _3150 - _2620;
                                float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                                float _3212 = dot(vec3(_530, _533, _536), vec3((-0.0) - _2618, (-0.0) - _2619, (-0.0) - _2620));
                                float _4277 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3216 = dot(vec3(_530, _533, _536), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                                float _4288 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                                float _3224 = _3161 * _3200;
                                float _3225 = _3224 * _3224;
                                float _3231 = ((1.0 - _3225) * dot(vec3(_530, _533, _536), vec3(_3148, _3149, _3150))) + _3225;
                                float _4299 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3233 = 1.0 - _3200;
                                float _3243 = (0.5 / (((_3232 * ((_3215 * _3233) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3200) * _3215))) * _3232;
                                float _4310 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3253 = (_3178 * _3155) * (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3223 * _3223) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3179 * _3022.z;
                                frontier_phi_85_pred_1 = _3179 * _3022.y;
                                frontier_phi_85_pred_2 = _3179 * _3022.x;
                                frontier_phi_85_pred_3 = _3253 * _3034.z;
                                frontier_phi_85_pred_4 = _3253 * _3034.y;
                                frontier_phi_85_pred_5 = _3253 * _3034.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3262 = frontier_phi_85_pred;
                            _3261 = frontier_phi_85_pred_1;
                            _3260 = frontier_phi_85_pred_2;
                            _3259 = frontier_phi_85_pred_3;
                            _3258 = frontier_phi_85_pred_4;
                            _3257 = frontier_phi_85_pred_5;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            if (_2981 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2981;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2966;
                        frontier_phi_79_pred_1 = _2965;
                        frontier_phi_79_pred_2 = _2964;
                        frontier_phi_79_pred_3 = _2963;
                        frontier_phi_79_pred_4 = _2962;
                        frontier_phi_79_pred_5 = _2961;
                    }
                    _2603 = frontier_phi_79_pred;
                    _2601 = frontier_phi_79_pred_1;
                    _2599 = frontier_phi_79_pred_2;
                    _2597 = frontier_phi_79_pred_3;
                    _2595 = frontier_phi_79_pred_4;
                    _2593 = frontier_phi_79_pred_5;
                    uint _2759 = _2758 + 1u;
                    if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2752 = _2593;
                        _2753 = _2595;
                        _2754 = _2597;
                        _2755 = _2599;
                        _2756 = _2601;
                        _2757 = _2603;
                        _2758 = _2759;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2599;
                frontier_phi_60_61_ladder_1 = _2603;
                frontier_phi_60_61_ladder_2 = _2601;
                frontier_phi_60_61_ladder_3 = _2597;
                frontier_phi_60_61_ladder_4 = _2595;
                frontier_phi_60_61_ladder_5 = _2593;
            }
            else
            {
                frontier_phi_60_61_ladder = _2478;
                frontier_phi_60_61_ladder_1 = _2482;
                frontier_phi_60_61_ladder_2 = _2480;
                frontier_phi_60_61_ladder_3 = _2476;
                frontier_phi_60_61_ladder_4 = _2474;
                frontier_phi_60_61_ladder_5 = _2472;
            }
            _2592 = frontier_phi_60_61_ladder_5;
            _2594 = frontier_phi_60_61_ladder_4;
            _2596 = frontier_phi_60_61_ladder_3;
            _2598 = frontier_phi_60_61_ladder;
            _2600 = frontier_phi_60_61_ladder_2;
            _2602 = frontier_phi_60_61_ladder_1;
        }
        float _2607 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
        _2384 = (_2607 * _2598) + _1818;
        _2386 = (_2607 * _2600) + _1820;
        _2388 = (_2607 * _2602) + _1822;
        _2390 = ((_2592 * _574) * _2607) + _2166;
        _2392 = ((_2594 * _576) * _2607) + _2168;
        _2394 = ((_2596 * _577) * _2607) + _2170;
    }
    else
    {
        _2384 = _1818;
        _2386 = _1820;
        _2388 = _1822;
        _2390 = _2166;
        _2392 = _2168;
        _2394 = _2170;
    }
    float _4326 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4337 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4348 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2411 = ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2384 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _589))) + ((_2390 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    float _2412 = ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2386 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _589))) + ((_2392 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    float _2413 = ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2388 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _589))) + ((_2394 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1430)) * cbPerFrame._m0[3u].x);
    uint _2414 = _549 + 6u;
    float _2422 = _509 / cbSceneParam._m0[86u].x;
    float _2423 = _510 / cbSceneParam._m0[86u].y;
    vec4 _2437 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2422, _2423, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2439 = _2437.x;
    float _2440 = _2437.y;
    float _2441 = _2437.z;
    float _2442 = _2437.w;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _2497 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _2498 = _2497 / _431;
        float _2509 = _2498 * _482;
        float _2510 = _483 * _2498;
        float _2511 = (-0.0) - _2510;
        float _2512 = _2498 * _484;
        float _2514 = (cbSceneParam._m0[77u].w * _2511) / _2497;
        float _2515 = _2514 + cbSceneParam._m0[79u].w;
        float _2516 = cbSceneParam._m0[79u].w - _2510;
        float _2522 = sqrt(((_2509 * _2509) + (_2510 * _2510)) + (_2512 * _2512));
        float _2525 = (1.0 - (cbSceneParam._m0[77u].w / _2497)) * _2522;
        float _2530 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2532 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2709;
        if (abs((_2511 - _2514) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2709 = ((((_2515 > 0.0) ? exp2(_2530 * _2515) : (2.0 - exp2(_2532 * _2515))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2525;
        }
        else
        {
            float _2653 = 1.0 / cbSceneParam._m0[80u].x;
            float _2654 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : max(_2515, _2516));
            float _2655 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : min(_2515, _2516));
            float _2664 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : min(_2654, 0.0));
            float _2665 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : min(_2655, 0.0));
            _2709 = ((abs(_2522 / _2511) * cbSceneParam._m0[80u].y) * ((((_2664 - _2665) * 2.0) - ((exp2(_2530 * (isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0)))) - exp2(_2530 * (isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0))))) * _2653)) - ((exp2(_2532 * _2664) - exp2(_2532 * _2665)) * _2653))) + (_2525 * cbSceneParam._m0[80u].z);
        }
        vec4 _2711 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2422, _2423, 1.0), 0.0);
        float _2720 = exp2((_2709 * (-1.44269502162933349609375)) * (1.0 - _2711.w));
        float _2721 = log2(_2720);
        float _2737 = log2(_2442);
        _2534 = (exp2(_2737 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].x)) * _2711.x) / cbSceneParam._m0[78u].x)) + _2439;
        _2536 = (exp2(_2737 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].y)) * _2711.y) / cbSceneParam._m0[78u].y)) + _2440;
        _2538 = (exp2(_2737 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].z)) * _2711.z) / cbSceneParam._m0[78u].z)) + _2441;
        _2540 = _2720 * _2442;
    }
    else
    {
        _2534 = _2439;
        _2536 = _2440;
        _2538 = _2441;
        _2540 = _2442;
    }
    bool _2747;
    vec4 _2550;
    vec4 _2572;
    float _2574;
    float _2578;
    float _2579;
    float _2580;
    float _2581;
    bool _2591;
    for (;;)
    {
        _2550 = cbMatDynParam._m0[0u];
        float _2552 = roundEven(_2550.y);
        bool _2553 = _2552 == 3.0;
        float _2554 = log2(_2540);
        float _2561 = exp2(_2554 * cbSceneParam._m0[78u].x) * _2411;
        float _2562 = exp2(_2554 * cbSceneParam._m0[78u].y) * _2412;
        float _2563 = exp2(_2554 * cbSceneParam._m0[78u].z) * _2413;
        float _2570 = _498 + (-0.5);
        _2572 = cbMtdParam._m0[1u];
        _2574 = _2572.y * _2570;
        float _2577 = (_2552 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2578 = _2577 * (_2553 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2534)));
        _2579 = _2577 * (_2553 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2536)));
        _2580 = _2577 * (_2553 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2538)));
        _2581 = _2570 * 0.999000012874603271484375;
        _2591 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2591)
        {
            if ((cbInstanceData._m0[_549 + 7u].x + _2581) < 0.5)
            {
                _2747 = true;
                break;
            }
        }
        uint _2688 = _550 + uint(_2550.w);
        if ((cbInstanceData._m0[_2688].w < 1.0) && ((cbInstanceData._m0[_2688].w + _2581) < 0.5))
        {
            _2747 = true;
            break;
        }
        if ((_2574 + 1.0) < _2572.x)
        {
            _2747 = true;
            break;
        }
        _2747 = false;
        break;
    }
    float _2952;
    if (_2747)
    {
        discard_state = true;
        _2952 = 0.0;
    }
    else
    {
        _2952 = cbInstanceData._m0[_2414].w;
    }
    SV_Target.x = _2578;
    SV_Target.y = _2579;
    SV_Target.z = _2580;
    SV_Target.w = _2952;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2414].w;
    discard_exit();
}


