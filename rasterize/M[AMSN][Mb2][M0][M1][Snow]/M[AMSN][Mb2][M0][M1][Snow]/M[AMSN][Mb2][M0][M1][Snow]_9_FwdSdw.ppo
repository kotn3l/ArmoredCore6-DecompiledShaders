#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _966;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3585 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    float _257 = fma(_254, _220, fma(_247, _213, _245 * _199));
    float _260 = fma(_254, _221, fma(_247, _214, _245 * _200));
    float _263 = fma(_254, _222, fma(_247, _215, _245 * _201));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _302 = (cbMtdParam._m0[11u].z + dot(vec4(_267 * _257, _267 * _260, _267 * _263, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3596 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _320 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _325 = _320.x * cbMtdParam._m0[9u].x;
    float _326 = _320.y * cbMtdParam._m0[9u].y;
    float _327 = _320.z * cbMtdParam._m0[9u].z;
    vec4 _340 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _351 = ((_340.x - _325) * _303) + _325;
    float _352 = ((_340.y - _326) * _303) + _326;
    float _353 = ((_340.z - _327) * _303) + _327;
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _368 = _366.x;
    float _370 = _368 - (_368 * _303);
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = (_383.x * 2.0) + (-1.0);
    float _391 = (_383.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3607 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _400 = ((_383.z - _241) * _303) + _241;
    float _407 = ((_390 - _245) * _303) + _245;
    float _408 = ((_391 - _247) * _303) + _247;
    float _409 = ((sqrt(1.0 - (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) - _254) * _303) + _254;
    float _412 = fma(_409, _220, fma(_408, _213, _407 * _199));
    float _415 = fma(_409, _221, fma(_408, _214, _407 * _200));
    float _418 = fma(_409, _222, fma(_408, _215, _407 * _201));
    float _422 = inversesqrt(dot(vec3(_412, _415, _418), vec3(_412, _415, _418)));
    float _423 = _422 * _412;
    float _424 = _422 * _415;
    float _425 = _422 * _418;
    float _3618 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _426 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3640 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3651 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3662 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _430 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _446 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _497 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _487);
    float _498 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _487);
    float _499 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _487);
    float _503 = inversesqrt(dot(vec3(_497, _498, _499), vec3(_497, _498, _499)));
    float _504 = _497 * _503;
    float _505 = _498 * _503;
    float _506 = _499 * _503;
    float _512 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _513 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _532 = fma(_425, cbSceneParam._m0[5u].z, fma(_424, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _423));
    float _535 = fma(_425, cbSceneParam._m0[6u].z, fma(_424, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _423));
    float _538 = fma(_425, cbSceneParam._m0[7u].z, fma(_424, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _423));
    uint _551 = uint(roundEven(NORMAL.w)) * 13u;
    uint _553 = (_551 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3673 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _565 = 1.0 - _430;
    float _566 = _562 * _565;
    float _567 = _563 * _565;
    float _568 = _564 * _565;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _430;
    float _574 = (_563 + (-0.039999999105930328369140625)) * _430;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _430;
    float _576 = _573 + 0.039999999105930328369140625;
    float _578 = _574 + 0.039999999105930328369140625;
    float _579 = _575 + 0.039999999105930328369140625;
    vec4 _588 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _512, cbSceneParam._m0[86u].y * _513));
    float _591 = _588.x * TEXCOORD_9.w;
    float _592 = dot(vec3(_423, _424, _425), vec3(_504, _505, _506));
    float _595 = _592 * 2.0;
    float _599 = (_595 * _423) - _504;
    float _600 = (_595 * _424) - _505;
    float _601 = (_595 * _425) - _506;
    float _605 = abs(dot(vec3(_504, _505, _506), vec3(_423, _424, _425)));
    float _3706 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _607 = sqrt(_426);
    float _620 = exp2((_607 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_607 * 3.0));
    float _626 = (1.0 - _620) * ((_607 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _627 = _620 * _607;
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _965;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _690 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _694 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _698 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _723 = _655 + _423;
        float _724 = _659 + _424;
        float _725 = _663 + _425;
        float _735 = fma(_725, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723)) - _690;
        float _736 = fma(_725, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723)) - _694;
        float _737 = fma(_725, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723)) - _698;
        float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
        float _754 = ((_741 * _735) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_690 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_741 * _736) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_694 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_741 * _737) / cbModelParam._m0[34u].z) + ((((((_698 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        float _793 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_759.x + (-0.5));
        float _795 = _793 * (_759.y + (-0.5));
        float _796 = _793 * (_759.z + (-0.5));
        float _803 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_766.x + (-0.5));
        float _805 = _803 * (_766.y + (-0.5));
        float _806 = _803 * (_766.z + (-0.5));
        float _813 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_773.x + (-0.5));
        float _815 = _813 * (_773.y + (-0.5));
        float _816 = _813 * (_773.z + (-0.5));
        float _823 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_780.x + (-0.5));
        float _825 = _823 * (_780.y + (-0.5));
        float _826 = _823 * (_780.z + (-0.5));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = _794 * 0.5;
        float _831 = _804 * 0.5;
        float _832 = _814 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _847 = (dot(vec3(_423, _424, _425), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _857 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3754 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_859 + 1.0))) + _864) * _827;
        float _874 = _795 * 0.5;
        float _875 = _805 * 0.5;
        float _876 = _815 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_423, _424, _425), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3787 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_901 + 1.0))) + _906) * _828;
        float _916 = _796 * 0.5;
        float _917 = _806 * 0.5;
        float _918 = _816 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_423, _424, _425), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3820 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_943 + 1.0))) + _948) * _829;
        _965 = _796;
        _967 = _795;
        _968 = _794;
        _969 = _806;
        _970 = _805;
        _971 = _804;
        _972 = _816;
        _973 = _815;
        _974 = _814;
        _975 = _829;
        _976 = _828;
        _977 = _827;
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
    }
    else
    {
        _965 = _966;
        _967 = _966;
        _968 = _966;
        _969 = _966;
        _970 = _966;
        _971 = _966;
        _972 = _966;
        _973 = _966;
        _974 = _966;
        _975 = _966;
        _976 = _966;
        _977 = _966;
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
    }
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1006 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1010 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1014 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1037 = _655 + _423;
        float _1038 = _659 + _424;
        float _1039 = _663 + _425;
        float _1049 = fma(_1039, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037)) - _1006;
        float _1050 = fma(_1039, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037)) - _1010;
        float _1051 = fma(_1039, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037)) - _1014;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1006 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1010 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[35u].z) + ((((((_1014 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1105 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1072.x + (-0.5));
        float _1107 = _1105 * (_1072.y + (-0.5));
        float _1108 = _1105 * (_1072.z + (-0.5));
        float _1115 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1079.x + (-0.5));
        float _1117 = _1115 * (_1079.y + (-0.5));
        float _1118 = _1115 * (_1079.z + (-0.5));
        float _1125 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1086.x + (-0.5));
        float _1127 = _1125 * (_1086.y + (-0.5));
        float _1128 = _1125 * (_1086.z + (-0.5));
        float _1135 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1093.x + (-0.5));
        float _1137 = _1135 * (_1093.y + (-0.5));
        float _1138 = _1135 * (_1093.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_423, _424, _425), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3883 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1169 + 1.0))) + _1174) * _1139;
        float _1184 = _1107 * 0.5;
        float _1185 = _1117 * 0.5;
        float _1186 = _1127 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_423, _424, _425), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3916 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1211 + 1.0))) + _1216) * _1140;
        float _1226 = _1108 * 0.5;
        float _1227 = _1118 * 0.5;
        float _1228 = _1128 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_423, _424, _425), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3949 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1253 + 1.0))) + _1258) * _1141;
        _1275 = _1108;
        _1276 = _1107;
        _1277 = _1106;
        _1278 = _1118;
        _1279 = _1117;
        _1280 = _1116;
        _1281 = _1128;
        _1282 = _1127;
        _1283 = _1126;
        _1284 = _1141;
        _1285 = _1140;
        _1286 = _1139;
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _966;
        _1276 = _966;
        _1277 = _966;
        _1278 = _966;
        _1279 = _966;
        _1280 = _966;
        _1281 = _966;
        _1282 = _966;
        _1283 = _966;
        _1284 = _966;
        _1285 = _966;
        _1286 = _966;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _978)) + _978;
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _979)) + _979;
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _980)) + _980;
    float _1322 = fma(_1301, cbSceneParam._m0[89u].z, fma(_1300, cbSceneParam._m0[89u].y, _1299 * cbSceneParam._m0[89u].x));
    float _1325 = fma(_1301, cbSceneParam._m0[90u].z, fma(_1300, cbSceneParam._m0[90u].y, _1299 * cbSceneParam._m0[90u].x));
    float _1328 = fma(_1301, cbSceneParam._m0[91u].z, fma(_1300, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1299));
    float _1343 = _599 * 0.5;
    float _1344 = _600 * 0.5;
    float _1345 = _601 * 0.5;
    float _1346 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1349 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1352 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1386;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1359 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_965, _969, _972, _975));
        float _1363 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_967, _970, _973, _976));
        float _1367 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_968, _971, _974, _977));
        float _1374 = dot(vec4(cbModelParam._m0[39u]), vec4(_1343, _1344, _1345, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1397;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1388 = dot(vec4(cbModelParam._m0[40u]), vec4(_1343, _1344, _1345, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1401 = (_1397 * cbModelParam._m0[1u].x) + (_1386 * (1.0 - cbModelParam._m0[1u].x));
    float _1411 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _426);
    float _1412 = isnan(_1411) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1411 : min(cbModelParam._m0[25u].z, _1411));
    float _1494;
    float _1496;
    float _1498;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1461 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1465 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1469 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1472 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1475 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1478 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1506;
        if (_1472 > 0.0)
        {
            _1506 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1506 = frontier_phi_16_14_ladder;
        }
        float _1681;
        if (_1475 > 0.0)
        {
            _1681 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1681 = frontier_phi_25_21_ladder;
        }
        float _1977;
        if (_1478 > 0.0)
        {
            _1977 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1977 = frontier_phi_37_32_ladder;
        }
        float _1979 = isnan(_1681) ? _1506 : (isnan(_1506) ? _1681 : min(_1506, _1681));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1472) + _1461;
        float _1985 = (_1980 * _1475) + _1465;
        float _1986 = (_1980 * _1478) + _1469;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1989 = (-1.0) - _1987;
        float _1991 = _1987 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1986 > _1991) || ((_1986 < _1989) || ((_1985 > _1991) || ((_1985 < _1989) || ((_1984 < _1989) || (_1984 > _1991))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1412);
            frontier_phi_15_37_ladder = _2131.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2131.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2131.z * cbModelParam._m0[1u].y;
        }
        _1494 = frontier_phi_15_37_ladder_1;
        _1496 = frontier_phi_15_37_ladder;
        _1498 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1412);
        _1494 = _1482.x * cbModelParam._m0[1u].y;
        _1496 = _1482.y * cbModelParam._m0[1u].y;
        _1498 = _1482.z * cbModelParam._m0[1u].y;
    }
    float _1502 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _426);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1502 : min(cbModelParam._m0[25u].w, _1502));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1560 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1564 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1568 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1571 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1574 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1577 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1686;
        if (_1571 > 0.0)
        {
            _1686 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1686 = frontier_phi_27_23_ladder;
        }
        float _2004;
        if (_1574 > 0.0)
        {
            _2004 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2004 = frontier_phi_39_34_ladder;
        }
        float _2342;
        if (_1577 > 0.0)
        {
            _2342 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2342 = frontier_phi_49_46_ladder;
        }
        float _2344 = isnan(_2004) ? _1686 : (isnan(_1686) ? _2004 : min(_1686, _2004));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1571) + _1560;
        float _2350 = (_2345 * _1574) + _1564;
        float _2351 = (_2345 * _1577) + _1568;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2352;
        float _2355 = _2352 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2351 > _2355) || ((_2351 < _2353) || ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 < _2353) || (_2349 > _2355))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2351, cbModelParam._m0[17u].z, fma(_2350, cbModelParam._m0[17u].y, _2349 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2351, cbModelParam._m0[18u].z, fma(_2350, cbModelParam._m0[18u].y, _2349 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2351, cbModelParam._m0[19u].z, fma(_2350, cbModelParam._m0[19u].y, _2349 * cbModelParam._m0[19u].x))), _1503);
            frontier_phi_24_49_ladder = _2473.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2473.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2473.x * cbModelParam._m0[1u].z;
        }
        _1596 = frontier_phi_24_49_ladder_2;
        _1598 = frontier_phi_24_49_ladder_1;
        _1600 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1503);
        _1596 = _1580.x * cbModelParam._m0[1u].z;
        _1598 = _1580.y * cbModelParam._m0[1u].z;
        _1600 = _1580.z * cbModelParam._m0[1u].z;
    }
    float _1613 = (((_626 * _576) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1615 = (((_626 * _578) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1617 = (((_626 * _579) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1620 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, _1613 * cbSceneParam._m0[91u].x));
    float _1660 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1664 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1668 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1672 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1673 = _1660 / _1672;
    float _1674 = _1664 / _1672;
    float _1675 = _1668 / _1672;
    float _1822;
    float _1823;
    float _1824;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1702 = ((uint(_1675 > cbSceneParam._m0[59u].y) + uint(_1675 > cbSceneParam._m0[59u].x)) + uint(_1675 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1703 = _1702 + 43u;
        uint _1711 = _1702 + 44u;
        uint _1719 = _1702 + 45u;
        uint _1727 = _1702 + 46u;
        float _1738 = fma(_1672, cbSceneParam._m0[_1703].w, fma(_1668, cbSceneParam._m0[_1703].z, fma(_1664, cbSceneParam._m0[_1703].y, _1660 * cbSceneParam._m0[_1703].x)));
        float _1742 = fma(_1672, cbSceneParam._m0[_1711].w, fma(_1668, cbSceneParam._m0[_1711].z, fma(_1664, cbSceneParam._m0[_1711].y, _1660 * cbSceneParam._m0[_1711].x)));
        float _1750 = fma(_1672, cbSceneParam._m0[_1727].w, fma(_1668, cbSceneParam._m0[_1727].z, fma(_1664, cbSceneParam._m0[_1727].y, _1660 * cbSceneParam._m0[_1727].x)));
        float _1755 = cbSceneParam._m0[33u].z * _1750;
        float _1757 = cbSceneParam._m0[33u].w * _1750;
        float _1760 = fma(_1672, cbSceneParam._m0[_1719].w, fma(_1668, cbSceneParam._m0[_1719].z, fma(_1664, cbSceneParam._m0[_1719].y, _1660 * cbSceneParam._m0[_1719].x))) / _1750;
        float _1808 = (cbSceneParam._m0[33u].x - sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675))) * cbSceneParam._m0[33u].y;
        float _4075 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1815 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1755 + _1738) / _1750, (_1757 + _1742) / _1750), _1760), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 + _1738) / _1750, (_1742 - _1755) / _1750), _1760), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1738 - _1755) / _1750, (_1742 - _1757) / _1750), _1760), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1738 - _1757) / _1750, (_1755 + _1742) / _1750), _1760), 0.0)).x), vec4(0.25)));
        _1822 = 1.0 - (_1815 * cbSceneParam._m0[34u].x);
        _1823 = 1.0 - (_1815 * cbSceneParam._m0[34u].y);
        _1824 = 1.0 - (_1815 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1822 = 1.0;
        _1823 = 1.0;
        _1824 = 1.0;
    }
    float _1888;
    float _1890;
    float _1892;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1876 = fma(_1672, cbSceneParam._m0[63u].w, fma(_1668, cbSceneParam._m0[63u].z, fma(_1664, cbSceneParam._m0[63u].y, _1660 * cbSceneParam._m0[63u].x)));
        float _1877 = fma(_1672, cbSceneParam._m0[60u].w, fma(_1668, cbSceneParam._m0[60u].z, fma(_1664, cbSceneParam._m0[60u].y, _1660 * cbSceneParam._m0[60u].x))) / _1876;
        float _1878 = fma(_1672, cbSceneParam._m0[61u].w, fma(_1668, cbSceneParam._m0[61u].z, fma(_1664, cbSceneParam._m0[61u].y, _1660 * cbSceneParam._m0[61u].x))) / _1876;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1877 >= cbSceneParam._m0[64u].x) && (_1878 >= cbSceneParam._m0[64u].y)) && (_1877 <= cbSceneParam._m0[64u].z)) && (_1878 <= cbSceneParam._m0[64u].w))
        {
            float _2017 = fma(_1672, cbSceneParam._m0[62u].w, fma(_1668, cbSceneParam._m0[62u].z, fma(_1664, cbSceneParam._m0[62u].y, _1660 * cbSceneParam._m0[62u].x))) / _1876;
            float _2021 = isnan(cbSceneParam._m0[41u].w) ? _2017 : (isnan(_2017) ? cbSceneParam._m0[41u].w : max(_2017, cbSceneParam._m0[41u].w));
            float _2064 = (cbSceneParam._m0[33u].x - sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675))) * cbSceneParam._m0[33u].y;
            float _4091 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
            float _2071 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1877, cbSceneParam._m0[33u].w + _1878), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1877, _1878 - cbSceneParam._m0[33u].z), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1877 - cbSceneParam._m0[33u].z, _1878 - cbSceneParam._m0[33u].w), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1877 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1878), _2021), 0.0)).x), vec4(0.25)));
            float _2075 = 1.0 - (_2071 * cbSceneParam._m0[34u].x);
            float _2076 = 1.0 - (_2071 * cbSceneParam._m0[34u].y);
            float _2077 = 1.0 - (_2071 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2076) ? _1823 : (isnan(_1823) ? _2076 : min(_1823, _2076));
            frontier_phi_36_35_ladder_1 = isnan(_2077) ? _1824 : (isnan(_1824) ? _2077 : min(_1824, _2077));
            frontier_phi_36_35_ladder_2 = isnan(_2075) ? _1822 : (isnan(_1822) ? _2075 : min(_1822, _2075));
        }
        else
        {
            frontier_phi_36_35_ladder = _1823;
            frontier_phi_36_35_ladder_1 = _1824;
            frontier_phi_36_35_ladder_2 = _1822;
        }
        _1888 = frontier_phi_36_35_ladder_2;
        _1890 = frontier_phi_36_35_ladder;
        _1892 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1888 = _1822;
        _1890 = _1823;
        _1892 = _1824;
    }
    uvec4 _1897 = floatBitsToUint(cbInstanceData._m0[_551 + 5u]);
    uint _1899 = _1897.x * 14u;
    uint _1900 = _1899 + 13u;
    float _1907 = _591 + (-1.0);
    float _1912 = (cbLight._m0[_1900].x * _1907) + 1.0;
    float _1913 = (cbLight._m0[_1900].y * _1907) + 1.0;
    float _1914 = (cbLight._m0[_1900].z * _1907) + 1.0;
    float _1915 = (cbLight._m0[_1900].w * _1907) + 1.0;
    uint _1916 = _1899 + 5u;
    float _1922 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1926 = _1899 + 4u;
    float _1936 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1940 = _1899 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_423, _424, _425));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_423, _424, _425));
    float _4127 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _4138 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1916].x * _1922) * _1961) + (((cbLight._m0[_1926].x * _1888) * _1936) * _1959);
    float _1969 = ((_1922 * cbLight._m0[_1916].y) * _1961) + (((cbLight._m0[_1926].y * _1890) * _1936) * _1959);
    float _1970 = ((_1922 * cbLight._m0[_1916].z) * _1961) + (((cbLight._m0[_1926].z * _1892) * _1936) * _1959);
    uvec4 _1974 = floatBitsToUint(cbLight._m0[_1899 + 12u]);
    bool _1976 = _1974.x == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_1976)
    {
        _2078 = _1968;
        _2080 = _1969;
        _2082 = _1970;
    }
    else
    {
        uint _2086 = _1899 + 6u;
        float _2102 = (dot(vec3(cbLight._m0[_1899 + 2u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4149 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2105 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2078 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1968;
        _2080 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1969;
        _2082 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1970;
    }
    bool _2085 = _1974.y == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2085)
    {
        _2140 = _2078;
        _2142 = _2080;
        _2144 = _2082;
    }
    else
    {
        uint _2313 = _1899 + 7u;
        float _2329 = (dot(vec3(cbLight._m0[_1899 + 3u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4165 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2332 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2140 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2078;
        _2142 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2080;
        _2144 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2082;
    }
    uint _2147 = _1899 + 8u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _426) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_1899].x + _504;
    float _2163 = cbLight._m0[_1899].y + _505;
    float _2164 = cbLight._m0[_1899].z + _506;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1899].xyz));
    float _4181 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2176 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2177 = dot(vec3(_423, _424, _425), vec3(_2169, _2170, _2171));
    float _4203 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2169, _2170, _2171));
    float _4214 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2161 * _2161;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
    float _2198 = 0.959999978542327880859375 - _573;
    float _2200 = 0.959999978542327880859375 - _574;
    float _2201 = 0.959999978542327880859375 - _575;
    float _2208 = 1.0 - _2161;
    float _2219 = (0.5 / (((_2176 * ((_2175 * _2208) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2208) + _2161) * _2175))) * _2175;
    float _4225 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    uint _2235 = _1899 + 9u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _426) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_1940].x + _504;
    float _2249 = cbLight._m0[_1940].y + _505;
    float _2250 = cbLight._m0[_1940].z + _506;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1940].xyz));
    float _4236 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2262 = dot(vec3(_423, _424, _425), vec3(_2255, _2256, _2257));
    float _4247 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2255, _2256, _2257));
    float _4258 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2247 * _2247;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2288 = 1.0 - _2247;
    float _2298 = (0.5 / (((_2176 * ((_2261 * _2288) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2288) + _2247) * _2261))) * _2261;
    float _4269 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    float _2310 = (((((_2281 * _2198) + _576) * cbLight._m0[_2235].x) * _2300) * _1922) + ((((cbLight._m0[_2147].x * _1888) * ((_2197 * _2198) + _576)) * _2221) * _1936);
    float _2311 = (((((_2281 * _2200) + _578) * cbLight._m0[_2235].y) * _2300) * _1922) + ((((cbLight._m0[_2147].y * _1890) * ((_2197 * _2200) + _578)) * _2221) * _1936);
    float _2312 = (((((_2281 * _2201) + _579) * cbLight._m0[_2235].z) * _2300) * _1922) + ((((cbLight._m0[_2147].z * _1892) * ((_2197 * _2201) + _579)) * _2221) * _1936);
    float _2368;
    float _2370;
    float _2372;
    if (_1976)
    {
        _2368 = _2310;
        _2370 = _2311;
        _2372 = _2312;
    }
    else
    {
        uint _2374 = _1899 + 2u;
        uint _2378 = _1899 + 10u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _426) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _504;
        float _2395 = cbLight._m0[_2374].y + _505;
        float _2396 = cbLight._m0[_2374].z + _506;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2374].xyz));
        float _4280 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2408 = dot(vec3(_423, _424, _425), vec3(_2401, _2402, _2403));
        float _4291 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4302 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
        float _2434 = 1.0 - _2393;
        float _2444 = (0.5 / (((_2176 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2434) + _2393) * _2407))) * _2407;
        float _4313 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2368 = (((((_2427 * _2198) + _576) * cbLight._m0[_2378].x) * _2446) * _2447) + _2310;
        _2370 = (((((_2427 * _2200) + _578) * cbLight._m0[_2378].y) * _2446) * _2447) + _2311;
        _2372 = (((((_2427 * _2201) + _579) * cbLight._m0[_2378].z) * _2446) * _2447) + _2312;
    }
    float _2478;
    float _2480;
    float _2482;
    if (_2085)
    {
        _2478 = _2368;
        _2480 = _2370;
        _2482 = _2372;
    }
    else
    {
        uint _2489 = _1899 + 3u;
        uint _2493 = _1899 + 11u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _426) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _504;
        float _2510 = cbLight._m0[_2489].y + _505;
        float _2511 = cbLight._m0[_2489].z + _506;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2489].xyz));
        float _4329 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2523 = dot(vec3(_423, _424, _425), vec3(_2516, _2517, _2518));
        float _4340 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4351 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
        float _2549 = 1.0 - _2508;
        float _2559 = (0.5 / (((_2176 * ((_2522 * _2549) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2549) + _2508) * _2522))) * _2522;
        float _4362 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2478 = (((((_2542 * _2198) + _576) * cbLight._m0[_2493].x) * _2561) * _2562) + _2368;
        _2480 = (((((_2542 * _2200) + _578) * cbLight._m0[_2493].y) * _2561) * _2562) + _2370;
        _2482 = (((((_2542 * _2201) + _579) * cbLight._m0[_2493].z) * _2561) * _2562) + _2372;
    }
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_1897.y == 0u)
    {
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _513) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _512) / _2584)));
        float _2605 = (log2(_1675 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
        }
        else
        {
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            uint _2844 = 0u;
            uint _2853;
            bool _2854;
            for (;;)
            {
                _2853 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                _2854 = _2853 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2854)
                {
                    frontier_phi_68_pred = _2843;
                    frontier_phi_68_pred_1 = _2842;
                    frontier_phi_68_pred_2 = _2841;
                    frontier_phi_68_pred_3 = _2839;
                    frontier_phi_68_pred_4 = _2838;
                    frontier_phi_68_pred_5 = _2840;
                }
                else
                {
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    uint _2968;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2853;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2972 = uint(findLSB(_2968)) + (_2844 << 5u);
                        uint _2969 = (_2968 + 4294967295u) & _2968;
                        uint _2974 = _2972 * 48u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 3u)).x));
                        uint _2994 = (_2972 * 48u) + 4u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3013 = (_2972 * 48u) + 8u;
                        vec3 _3024 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x));
                        float _3028 = _2988.x - _1673;
                        float _3029 = _2988.y - _1674;
                        float _3030 = _2988.z - _1675;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_532, _535, _538), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2988.w);
                        float _4388 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3045 = sqrt(_3031) * _3007.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _3038) + _3049;
                        float _3055 = _3045 * _3045;
                        float _3059 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3044) / ((_3055 * 0.699999988079071044921875) + 1.0);
                        float _3063 = (-0.0) - _1673;
                        float _3064 = (-0.0) - _1674;
                        float _3065 = (-0.0) - _1675;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3079 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _607;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3070 + _3035;
                        float _3091 = _3071 + _3036;
                        float _3092 = _3072 + _3037;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_532, _535, _538), vec3(_3070, _3071, _3072));
                        float _4404 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3104 = dot(vec3(_532, _535, _538), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4415 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3048 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3038) + _3113;
                        float _4426 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4437 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) / ((_3111 * _3111) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2897 = (_3059 * _3007.x) + _2965;
                        _2898 = (_3059 * _3007.y) + _2966;
                        _2899 = (_3059 * _3007.z) + _2967;
                        _2894 = (_3139 * _3024.x) + _2962;
                        _2895 = (_3139 * _3024.y) + _2963;
                        _2896 = (_3139 * _3024.z) + _2964;
                        if (_2969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2969;
                        }
                    }
                    frontier_phi_68_pred = _2899;
                    frontier_phi_68_pred_1 = _2898;
                    frontier_phi_68_pred_2 = _2897;
                    frontier_phi_68_pred_3 = _2895;
                    frontier_phi_68_pred_4 = _2894;
                    frontier_phi_68_pred_5 = _2896;
                }
                _2705 = frontier_phi_68_pred;
                _2703 = frontier_phi_68_pred_1;
                _2701 = frontier_phi_68_pred_2;
                _2697 = frontier_phi_68_pred_3;
                _2695 = frontier_phi_68_pred_4;
                _2699 = frontier_phi_68_pred_5;
                uint _2845 = _2844 + 1u;
                if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2838 = _2695;
                    _2839 = _2697;
                    _2840 = _2699;
                    _2841 = _2701;
                    _2842 = _2703;
                    _2843 = _2705;
                    _2844 = _2845;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
        }
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.z;
        uint _2711 = (_2709 >> 8u) & 15u;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((4294967295u << _2711) & _2615) == 0u)
        {
            _2806 = _2694;
            _2808 = _2696;
            _2810 = _2698;
            _2812 = _2700;
            _2814 = _2702;
            _2816 = _2704;
        }
        else
        {
            float _2831 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
            float _2832 = _2831 * _1673;
            float _2833 = _2831 * _1674;
            float _2834 = _2831 * _1675;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2711 < ((_2709 >> 12u) & 15u))
            {
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2945 = _2694;
                float _2946 = _2696;
                float _2947 = _2698;
                float _2948 = _2700;
                float _2949 = _2702;
                float _2950 = _2704;
                uint _2951 = _2711;
                uint _2960;
                bool _2961;
                for (;;)
                {
                    _2960 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                    _2961 = _2960 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2961)
                    {
                        frontier_phi_74_pred = _2947;
                        frontier_phi_74_pred_1 = _2946;
                        frontier_phi_74_pred_2 = _2945;
                        frontier_phi_74_pred_3 = _2950;
                        frontier_phi_74_pred_4 = _2949;
                        frontier_phi_74_pred_5 = _2948;
                    }
                    else
                    {
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3157 = _2945;
                        float _3158 = _2946;
                        float _3159 = _2947;
                        float _3160 = _2948;
                        float _3161 = _2949;
                        float _3162 = _2950;
                        uint _3163 = _2960;
                        uint _3164;
                        vec4 _3189;
                        float _3190;
                        vec4 _3205;
                        vec3 _3217;
                        vec4 _3233;
                        vec4 _3249;
                        float _3296;
                        bool _3297;
                        for (;;)
                        {
                            uint _3174 = ((_2951 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3163));
                            _3164 = (_3163 + 4294967295u) & _3163;
                            uint _3176 = _3174 * 40u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3190 = _3189.w;
                            uint _3192 = (_3174 * 40u) + 4u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3174 * 40u) + 8u;
                            _3217 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x));
                            uint _3220 = (_3174 * 40u) + 16u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3236 = (_3174 * 40u) + 20u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3252 = (_3174 * 40u) + 24u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3271 = (_3174 * 40u) + 28u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3296 = fma(_1675, _3284.z, fma(_1674, _3284.y, _3284.x * _1673)) + _3284.w;
                            _3297 = !((fma(_1675, _3265.z, fma(_1674, _3265.y, _3265.x * _1673)) + _3265.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3297)
                            {
                                float _3324 = _3189.x - _1673;
                                float _3325 = _3189.y - _1674;
                                float _3326 = _3189.z - _1675;
                                float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                                float _3330 = inversesqrt(_3327);
                                float _3331 = _3330 * _3324;
                                float _3332 = _3330 * _3325;
                                float _3333 = _3330 * _3326;
                                float _3337 = 1.0 - (_3327 / (_3190 * _3190));
                                float _4448 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3342 = sqrt(_3327) * _3205.w;
                                float _3344 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                                float _3345 = _3344 * _3344;
                                float _3348 = ((1.0 - _3345) * dot(vec3(_3331, _3332, _3333), vec3(_532, _535, _538))) + _3345;
                                float _3351 = _3342 * _3342;
                                float _3355 = (fma(_1675, _3233.z, fma(_1674, _3233.y, _3233.x * _1673)) + _3233.w) / _3296;
                                float _3356 = (fma(_1675, _3249.z, fma(_1674, _3249.y, _3249.x * _1673)) + _3249.w) / _3296;
                                float _3360 = 1.0 - dot(vec2(_3355, _3356), vec2(_3355, _3356));
                                float _4464 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3362 = _3361 * (((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3338) / ((_3351 * 0.699999988079071044921875) + 1.0));
                                float _3374 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                                float _3375 = 1.0 - _607;
                                float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                                float _3383 = _3382 * _3382;
                                float _3384 = _3383 * _3383;
                                float _3385 = _3331 - _2832;
                                float _3386 = _3332 - _2833;
                                float _3387 = _3333 - _2834;
                                float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                                float _3395 = dot(vec3(_532, _535, _538), vec3((-0.0) - _2832, (-0.0) - _2833, (-0.0) - _2834));
                                float _4475 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3399 = dot(vec3(_532, _535, _538), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                                float _4486 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                                float _3407 = _3344 * _3383;
                                float _3408 = _3407 * _3407;
                                float _3414 = ((1.0 - _3408) * dot(vec3(_532, _535, _538), vec3(_3331, _3332, _3333))) + _3408;
                                float _4497 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3416 = 1.0 - _3383;
                                float _3426 = (0.5 / (((_3415 * ((_3398 * _3416) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3383) * _3398))) * _3415;
                                float _4508 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3436 = (_3361 * _3338) * (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3406 * _3406) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3436 * _3217.z;
                                frontier_phi_80_pred_1 = _3436 * _3217.y;
                                frontier_phi_80_pred_2 = _3436 * _3217.x;
                                frontier_phi_80_pred_3 = _3362 * _3205.z;
                                frontier_phi_80_pred_4 = _3362 * _3205.y;
                                frontier_phi_80_pred_5 = _3362 * _3205.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3442 = frontier_phi_80_pred;
                            _3441 = frontier_phi_80_pred_1;
                            _3440 = frontier_phi_80_pred_2;
                            _3445 = frontier_phi_80_pred_3;
                            _3444 = frontier_phi_80_pred_4;
                            _3443 = frontier_phi_80_pred_5;
                            _3147 = _3443 + _3160;
                            _3148 = _3444 + _3161;
                            _3149 = _3445 + _3162;
                            _3144 = _3440 + _3157;
                            _3145 = _3441 + _3158;
                            _3146 = _3442 + _3159;
                            if (_3164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3164;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3146;
                        frontier_phi_74_pred_1 = _3145;
                        frontier_phi_74_pred_2 = _3144;
                        frontier_phi_74_pred_3 = _3149;
                        frontier_phi_74_pred_4 = _3148;
                        frontier_phi_74_pred_5 = _3147;
                    }
                    _2811 = frontier_phi_74_pred;
                    _2809 = frontier_phi_74_pred_1;
                    _2807 = frontier_phi_74_pred_2;
                    _2817 = frontier_phi_74_pred_3;
                    _2815 = frontier_phi_74_pred_4;
                    _2813 = frontier_phi_74_pred_5;
                    uint _2952 = _2951 + 1u;
                    if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2945 = _2807;
                        _2946 = _2809;
                        _2947 = _2811;
                        _2948 = _2813;
                        _2949 = _2815;
                        _2950 = _2817;
                        _2951 = _2952;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2815;
                frontier_phi_62_63_ladder_1 = _2813;
                frontier_phi_62_63_ladder_2 = _2811;
                frontier_phi_62_63_ladder_3 = _2817;
                frontier_phi_62_63_ladder_4 = _2809;
                frontier_phi_62_63_ladder_5 = _2807;
            }
            else
            {
                frontier_phi_62_63_ladder = _2702;
                frontier_phi_62_63_ladder_1 = _2700;
                frontier_phi_62_63_ladder_2 = _2698;
                frontier_phi_62_63_ladder_3 = _2704;
                frontier_phi_62_63_ladder_4 = _2696;
                frontier_phi_62_63_ladder_5 = _2694;
            }
            _2806 = frontier_phi_62_63_ladder_5;
            _2808 = frontier_phi_62_63_ladder_4;
            _2810 = frontier_phi_62_63_ladder_2;
            _2812 = frontier_phi_62_63_ladder_1;
            _2814 = frontier_phi_62_63_ladder;
            _2816 = frontier_phi_62_63_ladder_3;
        }
        float _2821 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
        _2627 = (_2821 * _2812) + _2140;
        _2629 = (_2821 * _2814) + _2142;
        _2631 = (_2821 * _2816) + _2144;
        _2633 = ((_2806 * _576) * _2821) + _2478;
        _2635 = ((_2808 * _578) * _2821) + _2480;
        _2637 = ((_2810 * _579) * _2821) + _2482;
    }
    else
    {
        _2627 = _2140;
        _2629 = _2142;
        _2631 = _2144;
        _2633 = _2478;
        _2635 = _2480;
        _2637 = _2482;
    }
    float _4524 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4535 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4546 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    uint _2657 = _551 + 6u;
    float _2665 = _512 / cbSceneParam._m0[86u].x;
    float _2666 = _513 / cbSceneParam._m0[86u].y;
    vec4 _2680 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, (log2((isnan(cbSceneParam._m0[77u].w) ? _446 : (isnan(_446) ? cbSceneParam._m0[77u].w : min(_446, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2682 = _2680.x;
    float _2683 = _2680.y;
    float _2684 = _2680.z;
    float _2685 = _2680.w;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_446 > cbSceneParam._m0[78u].w)
    {
        float _2719 = isnan(_446) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _446 : min(cbSceneParam._m0[80u].w, _446));
        float _2720 = _2719 / _446;
        float _2731 = _2720 * _497;
        float _2732 = _498 * _2720;
        float _2733 = (-0.0) - _2732;
        float _2734 = _2720 * _499;
        float _2736 = (cbSceneParam._m0[77u].w * _2733) / _2719;
        float _2737 = _2736 + cbSceneParam._m0[79u].w;
        float _2738 = cbSceneParam._m0[79u].w - _2732;
        float _2744 = sqrt(((_2731 * _2731) + (_2732 * _2732)) + (_2734 * _2734));
        float _2747 = (1.0 - (cbSceneParam._m0[77u].w / _2719)) * _2744;
        float _2752 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2754 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2733 - _2736) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2737 > 0.0) ? exp2(_2752 * _2737) : (2.0 - exp2(_2754 * _2737))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2747;
        }
        else
        {
            float _2867 = 1.0 / cbSceneParam._m0[80u].x;
            float _2868 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : max(_2737, _2738));
            float _2869 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : min(_2737, _2738));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            _2907 = ((abs(_2744 / _2733) * cbSceneParam._m0[80u].y) * ((((_2878 - _2879) * 2.0) - ((exp2(_2752 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)))) - exp2(_2752 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))))) * _2867)) - ((exp2(_2754 * _2878) - exp2(_2754 * _2879)) * _2867))) + (_2747 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2685);
        _2756 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2682;
        _2758 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2683;
        _2760 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2684;
        _2762 = _2918 * _2685;
    }
    else
    {
        _2756 = _2682;
        _2758 = _2683;
        _2760 = _2684;
        _2762 = _2685;
    }
    float _2774 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2775 = _2774 == 3.0;
    float _2776 = log2(_2762);
    float _2783 = exp2(_2776 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2627 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _591))) + ((_2633 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1401)) * cbPerFrame._m0[3u].x));
    float _2784 = exp2(_2776 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2629 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _591))) + ((_2635 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1401)) * cbPerFrame._m0[3u].x));
    float _2785 = exp2(_2776 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2631 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _591))) + ((_2637 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1401)) * cbPerFrame._m0[3u].x));
    float _2794 = (_2774 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2794 * (_2775 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2756)));
    SV_Target.y = _2794 * (_2775 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2758)));
    SV_Target.z = _2794 * (_2775 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2760)));
    SV_Target.w = cbInstanceData._m0[_2657].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2657].w;
}


