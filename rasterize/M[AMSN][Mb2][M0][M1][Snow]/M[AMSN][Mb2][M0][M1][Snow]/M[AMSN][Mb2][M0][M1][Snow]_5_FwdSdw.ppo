#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1009;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3606 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3617 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))));
    float _321 = fma(_318, _230, fma(_312, _223, _310 * _209));
    float _324 = fma(_318, _231, fma(_312, _224, _310 * _210));
    float _327 = fma(_318, _232, fma(_312, _225, _310 * _211));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _345 = cbMtdParam._m0[11u].z + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3628 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _369 = _364.x * cbMtdParam._m0[9u].x;
    float _370 = _364.y * cbMtdParam._m0[9u].y;
    float _371 = _364.z * cbMtdParam._m0[9u].z;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _404 = (((_390.x * cbMtdParam._m0[10u].x) - _369) * _297) + _369;
    float _405 = (((_390.y * cbMtdParam._m0[10u].y) - _370) * _297) + _370;
    float _406 = (((_390.z * cbMtdParam._m0[10u].z) - _371) * _297) + _371;
    vec4 _419 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _430 = ((_419.x - _404) * _346) + _404;
    float _431 = ((_419.y - _405) * _346) + _405;
    float _432 = ((_419.z - _406) * _346) + _406;
    vec4 _445 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _452 = (_445.x * 2.0) + (-1.0);
    float _453 = (_445.y * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3639 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _462 = ((_445.z - _306) * _346) + _306;
    float _469 = ((_452 - _310) * _346) + _310;
    float _470 = ((_453 - _312) * _346) + _312;
    float _471 = ((sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) - _318) * _346) + _318;
    float _474 = fma(_471, _230, fma(_470, _223, _469 * _209));
    float _477 = fma(_471, _231, fma(_470, _224, _469 * _210));
    float _480 = fma(_471, _232, fma(_470, _225, _469 * _211));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    float _485 = _484 * _474;
    float _486 = _484 * _477;
    float _487 = _484 * _480;
    float _3650 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _488 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3672 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3683 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _507 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _557 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _547);
    float _558 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _547);
    float _559 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _547);
    float _563 = inversesqrt(dot(vec3(_557, _558, _559), vec3(_557, _558, _559)));
    float _564 = _557 * _563;
    float _565 = _558 * _563;
    float _566 = _559 * _563;
    float _572 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _573 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _593 = fma(_487, cbSceneParam._m0[5u].z, fma(_486, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _485));
    float _596 = fma(_487, cbSceneParam._m0[6u].z, fma(_486, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _485));
    float _599 = fma(_487, cbSceneParam._m0[7u].z, fma(_486, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _485));
    uint _612 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = (_612 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3694 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _572, cbSceneParam._m0[86u].y * _573));
    float _637 = _634.x * TEXCOORD_9.w;
    float _638 = dot(vec3(_485, _486, _487), vec3(_564, _565, _566));
    float _641 = _638 * 2.0;
    float _645 = (_641 * _485) - _564;
    float _646 = (_641 * _486) - _565;
    float _647 = (_641 * _487) - _566;
    float _651 = abs(dot(vec3(_564, _565, _566), vec3(_485, _486, _487)));
    float _3727 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _653 = sqrt(_488);
    float _666 = exp2((_653 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_653 * 3.0));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1008;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _733 = fma(_706, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698));
        float _737 = fma(_706, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698));
        float _741 = fma(_706, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698));
        float _766 = _698 + _485;
        float _767 = _702 + _486;
        float _768 = _706 + _487;
        float _778 = fma(_768, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766)) - _733;
        float _779 = fma(_768, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766)) - _737;
        float _780 = fma(_768, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766)) - _741;
        float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
        float _797 = ((_784 * _778) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_733 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_784 * _779) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_737 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_784 * _780) / cbModelParam._m0[34u].z) + ((((((_741 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        float _836 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_802.x + (-0.5));
        float _838 = _836 * (_802.y + (-0.5));
        float _839 = _836 * (_802.z + (-0.5));
        float _846 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_809.x + (-0.5));
        float _848 = _846 * (_809.y + (-0.5));
        float _849 = _846 * (_809.z + (-0.5));
        float _856 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_816.x + (-0.5));
        float _858 = _856 * (_816.y + (-0.5));
        float _859 = _856 * (_816.z + (-0.5));
        float _866 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_823.x + (-0.5));
        float _868 = _866 * (_823.y + (-0.5));
        float _869 = _866 * (_823.z + (-0.5));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = _837 * 0.5;
        float _874 = _847 * 0.5;
        float _875 = _857 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _890 = (dot(vec3(_485, _486, _487), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _900 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3775 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_902 + 1.0))) + _907) * _870;
        float _917 = _838 * 0.5;
        float _918 = _848 * 0.5;
        float _919 = _858 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_485, _486, _487), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3808 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_944 + 1.0))) + _949) * _871;
        float _959 = _839 * 0.5;
        float _960 = _849 * 0.5;
        float _961 = _859 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_485, _486, _487), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3841 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_986 + 1.0))) + _991) * _872;
        _1008 = _839;
        _1010 = _838;
        _1011 = _837;
        _1012 = _849;
        _1013 = _848;
        _1014 = _847;
        _1015 = _859;
        _1016 = _858;
        _1017 = _857;
        _1018 = _872;
        _1019 = _871;
        _1020 = _870;
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
    }
    else
    {
        _1008 = _1009;
        _1010 = _1009;
        _1011 = _1009;
        _1012 = _1009;
        _1013 = _1009;
        _1014 = _1009;
        _1015 = _1009;
        _1016 = _1009;
        _1017 = _1009;
        _1018 = _1009;
        _1019 = _1009;
        _1020 = _1009;
        _1021 = 0.0;
        _1022 = 0.0;
        _1023 = 0.0;
    }
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1049 = fma(_706, cbModelParam._m0[30u].z, fma(_702, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _698));
        float _1053 = fma(_706, cbModelParam._m0[31u].z, fma(_702, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _698));
        float _1057 = fma(_706, cbModelParam._m0[32u].z, fma(_702, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _698));
        float _1080 = _698 + _485;
        float _1081 = _702 + _486;
        float _1082 = _706 + _487;
        float _1092 = fma(_1082, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080)) - _1049;
        float _1093 = fma(_1082, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080)) - _1053;
        float _1094 = fma(_1082, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080)) - _1057;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1049 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1053 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[35u].z) + ((((((_1057 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1148 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1115.x + (-0.5));
        float _1150 = _1148 * (_1115.y + (-0.5));
        float _1151 = _1148 * (_1115.z + (-0.5));
        float _1158 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1122.x + (-0.5));
        float _1160 = _1158 * (_1122.y + (-0.5));
        float _1161 = _1158 * (_1122.z + (-0.5));
        float _1168 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1129.x + (-0.5));
        float _1170 = _1168 * (_1129.y + (-0.5));
        float _1171 = _1168 * (_1129.z + (-0.5));
        float _1178 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1136.x + (-0.5));
        float _1180 = _1178 * (_1136.y + (-0.5));
        float _1181 = _1178 * (_1136.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_485, _486, _487), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3904 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1212 + 1.0))) + _1217) * _1182;
        float _1227 = _1150 * 0.5;
        float _1228 = _1160 * 0.5;
        float _1229 = _1170 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_485, _486, _487), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3937 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1254 + 1.0))) + _1259) * _1183;
        float _1269 = _1151 * 0.5;
        float _1270 = _1161 * 0.5;
        float _1271 = _1171 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_485, _486, _487), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3970 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1296 + 1.0))) + _1301) * _1184;
        _1318 = _1151;
        _1319 = _1150;
        _1320 = _1149;
        _1321 = _1161;
        _1322 = _1160;
        _1323 = _1159;
        _1324 = _1171;
        _1325 = _1170;
        _1326 = _1169;
        _1327 = _1184;
        _1328 = _1183;
        _1329 = _1182;
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1009;
        _1319 = _1009;
        _1320 = _1009;
        _1321 = _1009;
        _1322 = _1009;
        _1323 = _1009;
        _1324 = _1009;
        _1325 = _1009;
        _1326 = _1009;
        _1327 = _1009;
        _1328 = _1009;
        _1329 = _1009;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1022)) + _1022;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1023)) + _1023;
    float _1365 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1368 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1371 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1342));
    float _1386 = _645 * 0.5;
    float _1387 = _646 * 0.5;
    float _1388 = _647 * 0.5;
    float _1389 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1392 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1395 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1429;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1402 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1008, _1012, _1015, _1018));
        float _1406 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1010, _1013, _1016, _1019));
        float _1410 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1417 = dot(vec4(cbModelParam._m0[39u]), vec4(_1386, _1387, _1388, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1440;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1431 = dot(vec4(cbModelParam._m0[40u]), vec4(_1386, _1387, _1388, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1444 = (_1440 * cbModelParam._m0[1u].x) + (_1429 * (1.0 - cbModelParam._m0[1u].x));
    float _1454 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _488);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1454 : min(cbModelParam._m0[25u].z, _1454));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1504 = fma(_706, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698)) + cbModelParam._m0[13u].w;
        float _1508 = fma(_706, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698)) + cbModelParam._m0[14u].w;
        float _1512 = fma(_706, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698)) + cbModelParam._m0[15u].w;
        float _1515 = fma(_647, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645));
        float _1518 = fma(_647, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645));
        float _1521 = fma(_647, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645));
        float _1549;
        if (_1515 > 0.0)
        {
            _1549 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1549 = frontier_phi_16_14_ladder;
        }
        float _1722;
        if (_1518 > 0.0)
        {
            _1722 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1722 = frontier_phi_25_21_ladder;
        }
        float _2017;
        if (_1521 > 0.0)
        {
            _2017 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2017 = frontier_phi_37_32_ladder;
        }
        float _2019 = isnan(_1722) ? _1549 : (isnan(_1549) ? _1722 : min(_1549, _1722));
        float _2020 = isnan(_2017) ? _2019 : (isnan(_2019) ? _2017 : min(_2019, _2017));
        float _2024 = (_2020 * _1515) + _1504;
        float _2025 = (_2020 * _1518) + _1508;
        float _2026 = (_2020 * _1521) + _1512;
        float _2027 = _2020 * 9.9999997473787516355514526367188e-05;
        float _2029 = (-1.0) - _2027;
        float _2031 = _2027 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2026 > _2031) || ((_2026 < _2029) || ((_2025 > _2031) || ((_2025 < _2029) || ((_2024 < _2029) || (_2024 > _2031))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2171 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2026, cbModelParam._m0[9u].z, fma(_2025, cbModelParam._m0[9u].y, _2024 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2026, cbModelParam._m0[10u].z, fma(_2025, cbModelParam._m0[10u].y, _2024 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2026, cbModelParam._m0[11u].z, fma(_2025, cbModelParam._m0[11u].y, _2024 * cbModelParam._m0[11u].x))), _1455);
            frontier_phi_15_37_ladder = _2171.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2171.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2171.z * cbModelParam._m0[1u].y;
        }
        _1537 = frontier_phi_15_37_ladder_1;
        _1539 = frontier_phi_15_37_ladder;
        _1541 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_645, _646, _647), _1455);
        _1537 = _1525.x * cbModelParam._m0[1u].y;
        _1539 = _1525.y * cbModelParam._m0[1u].y;
        _1541 = _1525.z * cbModelParam._m0[1u].y;
    }
    float _1545 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _488);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1545 : min(cbModelParam._m0[25u].w, _1545));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1603 = fma(_706, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698)) + cbModelParam._m0[21u].w;
        float _1607 = fma(_706, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698)) + cbModelParam._m0[22u].w;
        float _1611 = fma(_706, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698)) + cbModelParam._m0[23u].w;
        float _1614 = fma(_647, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645));
        float _1617 = fma(_647, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645));
        float _1620 = fma(_647, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645));
        float _1727;
        if (_1614 > 0.0)
        {
            _1727 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1727 = frontier_phi_27_23_ladder;
        }
        float _2044;
        if (_1617 > 0.0)
        {
            _2044 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2044 = frontier_phi_39_34_ladder;
        }
        float _2371;
        if (_1620 > 0.0)
        {
            _2371 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2371 = frontier_phi_49_46_ladder;
        }
        float _2373 = isnan(_2044) ? _1727 : (isnan(_1727) ? _2044 : min(_1727, _2044));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1614) + _1603;
        float _2379 = (_2374 * _1617) + _1607;
        float _2380 = (_2374 * _1620) + _1611;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1546);
            frontier_phi_24_49_ladder = _2498.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2498.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2498.x * cbModelParam._m0[1u].z;
        }
        _1639 = frontier_phi_24_49_ladder_2;
        _1641 = frontier_phi_24_49_ladder_1;
        _1643 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_645, _646, _647), _1546);
        _1639 = _1623.x * cbModelParam._m0[1u].z;
        _1641 = _1623.y * cbModelParam._m0[1u].z;
        _1643 = _1623.z * cbModelParam._m0[1u].z;
    }
    float _1655 = ((((1.0 - _666) * ((_653 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_666 * _653)) * _637;
    float _1656 = _1655 * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1657 = _1655 * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1658 = _1655 * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1661 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, _1656 * cbSceneParam._m0[91u].x));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1705 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1713 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1714 = _1701 / _1713;
    float _1715 = _1705 / _1713;
    float _1716 = _1709 / _1713;
    float _1863;
    float _1864;
    float _1865;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1743 = ((uint(_1716 > cbSceneParam._m0[59u].y) + uint(_1716 > cbSceneParam._m0[59u].x)) + uint(_1716 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1744 = _1743 + 43u;
        uint _1752 = _1743 + 44u;
        uint _1760 = _1743 + 45u;
        uint _1768 = _1743 + 46u;
        float _1779 = fma(_1713, cbSceneParam._m0[_1744].w, fma(_1709, cbSceneParam._m0[_1744].z, fma(_1705, cbSceneParam._m0[_1744].y, _1701 * cbSceneParam._m0[_1744].x)));
        float _1783 = fma(_1713, cbSceneParam._m0[_1752].w, fma(_1709, cbSceneParam._m0[_1752].z, fma(_1705, cbSceneParam._m0[_1752].y, _1701 * cbSceneParam._m0[_1752].x)));
        float _1791 = fma(_1713, cbSceneParam._m0[_1768].w, fma(_1709, cbSceneParam._m0[_1768].z, fma(_1705, cbSceneParam._m0[_1768].y, _1701 * cbSceneParam._m0[_1768].x)));
        float _1796 = cbSceneParam._m0[33u].z * _1791;
        float _1798 = cbSceneParam._m0[33u].w * _1791;
        float _1801 = fma(_1713, cbSceneParam._m0[_1760].w, fma(_1709, cbSceneParam._m0[_1760].z, fma(_1705, cbSceneParam._m0[_1760].y, _1701 * cbSceneParam._m0[_1760].x))) / _1791;
        float _1849 = (cbSceneParam._m0[33u].x - sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716))) * cbSceneParam._m0[33u].y;
        float _4096 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1856 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1796 + _1779) / _1791, (_1798 + _1783) / _1791), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1798 + _1779) / _1791, (_1783 - _1796) / _1791), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1779 - _1796) / _1791, (_1783 - _1798) / _1791), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1779 - _1798) / _1791, (_1796 + _1783) / _1791), _1801), 0.0)).x), vec4(0.25)));
        _1863 = 1.0 - (_1856 * cbSceneParam._m0[34u].x);
        _1864 = 1.0 - (_1856 * cbSceneParam._m0[34u].y);
        _1865 = 1.0 - (_1856 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1863 = 1.0;
        _1864 = 1.0;
        _1865 = 1.0;
    }
    float _1929;
    float _1931;
    float _1933;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1917 = fma(_1713, cbSceneParam._m0[63u].w, fma(_1709, cbSceneParam._m0[63u].z, fma(_1705, cbSceneParam._m0[63u].y, _1701 * cbSceneParam._m0[63u].x)));
        float _1918 = fma(_1713, cbSceneParam._m0[60u].w, fma(_1709, cbSceneParam._m0[60u].z, fma(_1705, cbSceneParam._m0[60u].y, _1701 * cbSceneParam._m0[60u].x))) / _1917;
        float _1919 = fma(_1713, cbSceneParam._m0[61u].w, fma(_1709, cbSceneParam._m0[61u].z, fma(_1705, cbSceneParam._m0[61u].y, _1701 * cbSceneParam._m0[61u].x))) / _1917;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1918 >= cbSceneParam._m0[64u].x) && (_1919 >= cbSceneParam._m0[64u].y)) && (_1918 <= cbSceneParam._m0[64u].z)) && (_1919 <= cbSceneParam._m0[64u].w))
        {
            float _2057 = fma(_1713, cbSceneParam._m0[62u].w, fma(_1709, cbSceneParam._m0[62u].z, fma(_1705, cbSceneParam._m0[62u].y, _1701 * cbSceneParam._m0[62u].x))) / _1917;
            float _2061 = isnan(cbSceneParam._m0[41u].w) ? _2057 : (isnan(_2057) ? cbSceneParam._m0[41u].w : max(_2057, cbSceneParam._m0[41u].w));
            float _2104 = (cbSceneParam._m0[33u].x - sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716))) * cbSceneParam._m0[33u].y;
            float _4112 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
            float _2111 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1918, cbSceneParam._m0[33u].w + _1919), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1918, _1919 - cbSceneParam._m0[33u].z), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1918 - cbSceneParam._m0[33u].z, _1919 - cbSceneParam._m0[33u].w), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1918 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1919), _2061), 0.0)).x), vec4(0.25)));
            float _2115 = 1.0 - (_2111 * cbSceneParam._m0[34u].x);
            float _2116 = 1.0 - (_2111 * cbSceneParam._m0[34u].y);
            float _2117 = 1.0 - (_2111 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2116) ? _1864 : (isnan(_1864) ? _2116 : min(_1864, _2116));
            frontier_phi_36_35_ladder_1 = isnan(_2117) ? _1865 : (isnan(_1865) ? _2117 : min(_1865, _2117));
            frontier_phi_36_35_ladder_2 = isnan(_2115) ? _1863 : (isnan(_1863) ? _2115 : min(_1863, _2115));
        }
        else
        {
            frontier_phi_36_35_ladder = _1864;
            frontier_phi_36_35_ladder_1 = _1865;
            frontier_phi_36_35_ladder_2 = _1863;
        }
        _1929 = frontier_phi_36_35_ladder_2;
        _1931 = frontier_phi_36_35_ladder;
        _1933 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1929 = _1863;
        _1931 = _1864;
        _1933 = _1865;
    }
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_612 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1948 = _637 + (-1.0);
    float _1953 = (cbLight._m0[_1941].x * _1948) + 1.0;
    float _1954 = (cbLight._m0[_1941].y * _1948) + 1.0;
    float _1955 = (cbLight._m0[_1941].z * _1948) + 1.0;
    float _1956 = (cbLight._m0[_1941].w * _1948) + 1.0;
    uint _1957 = _1940 + 5u;
    float _1963 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1967 = _1940 + 4u;
    float _1976 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1980 = _1940 | 1u;
    float _1991 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_485, _486, _487));
    float _1994 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_485, _486, _487));
    float _4148 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _4159 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1999 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _2001 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _2008 = ((cbLight._m0[_1957].x * _1963) * _2001) + (((cbLight._m0[_1967].x * _1929) * _1976) * _1999);
    float _2009 = ((_1963 * cbLight._m0[_1957].y) * _2001) + (((cbLight._m0[_1967].y * _1931) * _1976) * _1999);
    float _2010 = ((_1963 * cbLight._m0[_1957].z) * _2001) + (((cbLight._m0[_1967].z * _1933) * _1976) * _1999);
    uvec4 _2014 = floatBitsToUint(cbLight._m0[_1940 + 12u]);
    bool _2016 = _2014.x == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2016)
    {
        _2118 = _2008;
        _2120 = _2009;
        _2122 = _2010;
    }
    else
    {
        uint _2126 = _1940 + 6u;
        float _2142 = (dot(vec3(cbLight._m0[_1940 + 2u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4170 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2145 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2118 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _2008;
        _2120 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _2009;
        _2122 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _2010;
    }
    bool _2125 = _2014.y == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2125)
    {
        _2180 = _2118;
        _2182 = _2120;
        _2184 = _2122;
    }
    else
    {
        uint _2342 = _1940 + 7u;
        float _2358 = (dot(vec3(cbLight._m0[_1940 + 3u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2359 = _2358 * _2358;
        float _4186 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2360 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2361 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2180 = (((cbLight._m0[_2342].x * 0.3183098733425140380859375) * _2360) * _2361) + _2118;
        _2182 = (((cbLight._m0[_2342].y * 0.3183098733425140380859375) * _2360) * _2361) + _2120;
        _2184 = (((cbLight._m0[_2342].z * 0.3183098733425140380859375) * _2360) * _2361) + _2122;
    }
    uint _2187 = _1940 + 8u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _488) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_1940].x + _564;
    float _2203 = cbLight._m0[_1940].y + _565;
    float _2204 = cbLight._m0[_1940].z + _566;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1940].xyz));
    float _4202 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _2216 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2217 = dot(vec3(_485, _486, _487), vec3(_2209, _2210, _2211));
    float _4224 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2209, _2210, _2211));
    float _4235 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2201 * _2201;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2241 = 1.0 - _2201;
    float _2252 = (0.5 / (((_2216 * ((_2215 * _2241) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2241) + _2201) * _2215))) * _2215;
    float _4246 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    uint _2268 = _1940 + 9u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _488) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_1980].x + _564;
    float _2282 = cbLight._m0[_1980].y + _565;
    float _2283 = cbLight._m0[_1980].z + _566;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1980].xyz));
    float _4257 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2295 = dot(vec3(_485, _486, _487), vec3(_2288, _2289, _2290));
    float _4268 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2288, _2289, _2290));
    float _4279 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2280 * _2280;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2316 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2317 = 1.0 - _2280;
    float _2327 = (0.5 / (((_2216 * ((_2294 * _2317) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2317) + _2280) * _2294))) * _2294;
    float _4290 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    float _2339 = (((_2316 * cbLight._m0[_2268].x) * _2329) * _1963) + ((((cbLight._m0[_2187].x * _1929) * _2240) * _2254) * _1976);
    float _2340 = (((_2316 * cbLight._m0[_2268].y) * _2329) * _1963) + ((((cbLight._m0[_2187].y * _1931) * _2240) * _2254) * _1976);
    float _2341 = (((_2316 * cbLight._m0[_2268].z) * _2329) * _1963) + ((((cbLight._m0[_2187].z * _1933) * _2240) * _2254) * _1976);
    float _2397;
    float _2399;
    float _2401;
    if (_2016)
    {
        _2397 = _2339;
        _2399 = _2340;
        _2401 = _2341;
    }
    else
    {
        uint _2403 = _1940 + 2u;
        uint _2407 = _1940 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _488) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _564;
        float _2424 = cbLight._m0[_2403].y + _565;
        float _2425 = cbLight._m0[_2403].z + _566;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2403].xyz));
        float _4301 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2437 = dot(vec3(_485, _486, _487), vec3(_2430, _2431, _2432));
        float _4312 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4323 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2459 = 1.0 - _2422;
        float _2469 = (0.5 / (((_2216 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2459) + _2422) * _2436))) * _2436;
        float _4334 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2397 = (((_2458 * cbLight._m0[_2407].x) * _2471) * _2472) + _2339;
        _2399 = (((_2458 * cbLight._m0[_2407].y) * _2471) * _2472) + _2340;
        _2401 = (((_2458 * cbLight._m0[_2407].z) * _2471) * _2472) + _2341;
    }
    float _2503;
    float _2505;
    float _2507;
    if (_2125)
    {
        _2503 = _2397;
        _2505 = _2399;
        _2507 = _2401;
    }
    else
    {
        uint _2514 = _1940 + 3u;
        uint _2518 = _1940 + 11u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _488) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _564;
        float _2535 = cbLight._m0[_2514].y + _565;
        float _2536 = cbLight._m0[_2514].z + _566;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2514].xyz));
        float _4350 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2548 = dot(vec3(_485, _486, _487), vec3(_2541, _2542, _2543));
        float _4361 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4372 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2570 = 1.0 - _2533;
        float _2580 = (0.5 / (((_2216 * ((_2547 * _2570) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2570) + _2533) * _2547))) * _2547;
        float _4383 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2503 = (((_2569 * cbLight._m0[_2518].x) * _2582) * _2583) + _2397;
        _2505 = (((_2569 * cbLight._m0[_2518].y) * _2582) * _2583) + _2399;
        _2507 = (((_2569 * cbLight._m0[_2518].z) * _2582) * _2583) + _2401;
    }
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_1938.y == 0u)
    {
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.x;
        uint _2616 = uint((float(_2604.y) * floor(float(uint(cbSceneParam._m0[85u].y * _573) / _2605))) + floor(float(uint(cbSceneParam._m0[85u].x * _572) / _2605)));
        float _2626 = (log2(_1716 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2627 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        uint _2630 = uint(isnan(14.0) ? _2627 : (isnan(_2627) ? 14.0 : min(_2627, 14.0)));
        uvec4 _2635 = texelFetch(g_lightClusterGridBuffer, int(((_2630 << 2u) + (_2616 << 6u)) >> 2u));
        uint _2636 = _2635.x;
        uint _2637 = _2604.z;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        if (((((1u << ((_2637 >> 4u) & 15u)) + 4294967295u) & _2636) == 0u) || ((_2637 & 240u) == 0u))
        {
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
        }
        else
        {
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            uint _2865 = 0u;
            uint _2874;
            bool _2875;
            for (;;)
            {
                _2874 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                _2875 = _2874 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2875)
                {
                    frontier_phi_68_pred = _2864;
                    frontier_phi_68_pred_1 = _2863;
                    frontier_phi_68_pred_2 = _2862;
                    frontier_phi_68_pred_3 = _2860;
                    frontier_phi_68_pred_4 = _2859;
                    frontier_phi_68_pred_5 = _2861;
                }
                else
                {
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    uint _2989;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2874;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    for (;;)
                    {
                        uint _2993 = uint(findLSB(_2989)) + (_2865 << 5u);
                        uint _2990 = (_2989 + 4294967295u) & _2989;
                        uint _2995 = _2993 * 48u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3015 = (_2993 * 48u) + 4u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3034 = (_2993 * 48u) + 8u;
                        vec3 _3045 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x));
                        float _3049 = _3009.x - _1714;
                        float _3050 = _3009.y - _1715;
                        float _3051 = _3009.z - _1716;
                        float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                        float _3055 = inversesqrt(_3052);
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3059 = dot(vec3(_593, _596, _599), vec3(_3056, _3057, _3058));
                        float _3064 = 1.0 - (_3052 * _3009.w);
                        float _4409 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3066 = sqrt(_3052) * _3028.w;
                        float _3069 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _3059) + _3070;
                        float _3076 = _3066 * _3066;
                        float _3080 = ((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3065) / ((_3076 * 0.699999988079071044921875) + 1.0);
                        float _3084 = (-0.0) - _1714;
                        float _3085 = (-0.0) - _1715;
                        float _3086 = (-0.0) - _1716;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3100 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _653;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3091 + _3056;
                        float _3112 = _3092 + _3057;
                        float _3113 = _3093 + _3058;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_593, _596, _599), vec3(_3091, _3092, _3093));
                        float _4425 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3125 = dot(vec3(_593, _596, _599), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4436 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3069 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3059) + _3134;
                        float _4447 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4458 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3132 * _3132) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125))) * _3065;
                        _2918 = (_3080 * _3028.x) + _2986;
                        _2919 = (_3080 * _3028.y) + _2987;
                        _2920 = (_3080 * _3028.z) + _2988;
                        _2915 = (_3160 * _3045.x) + _2983;
                        _2916 = (_3160 * _3045.y) + _2984;
                        _2917 = (_3160 * _3045.z) + _2985;
                        if (_2990 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2990;
                        }
                    }
                    frontier_phi_68_pred = _2920;
                    frontier_phi_68_pred_1 = _2919;
                    frontier_phi_68_pred_2 = _2918;
                    frontier_phi_68_pred_3 = _2916;
                    frontier_phi_68_pred_4 = _2915;
                    frontier_phi_68_pred_5 = _2917;
                }
                _2726 = frontier_phi_68_pred;
                _2724 = frontier_phi_68_pred_1;
                _2722 = frontier_phi_68_pred_2;
                _2718 = frontier_phi_68_pred_3;
                _2716 = frontier_phi_68_pred_4;
                _2720 = frontier_phi_68_pred_5;
                uint _2866 = _2865 + 1u;
                if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2859 = _2716;
                    _2860 = _2718;
                    _2861 = _2720;
                    _2862 = _2722;
                    _2863 = _2724;
                    _2864 = _2726;
                    _2865 = _2866;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
        }
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.z;
        uint _2732 = (_2730 >> 8u) & 15u;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((4294967295u << _2732) & _2636) == 0u)
        {
            _2827 = _2715;
            _2829 = _2717;
            _2831 = _2719;
            _2833 = _2721;
            _2835 = _2723;
            _2837 = _2725;
        }
        else
        {
            float _2852 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
            float _2853 = _2852 * _1714;
            float _2854 = _2852 * _1715;
            float _2855 = _2852 * _1716;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2732 < ((_2730 >> 12u) & 15u))
            {
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2966 = _2715;
                float _2967 = _2717;
                float _2968 = _2719;
                float _2969 = _2721;
                float _2970 = _2723;
                float _2971 = _2725;
                uint _2972 = _2732;
                uint _2981;
                bool _2982;
                for (;;)
                {
                    _2981 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                    _2982 = _2981 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2982)
                    {
                        frontier_phi_74_pred = _2968;
                        frontier_phi_74_pred_1 = _2967;
                        frontier_phi_74_pred_2 = _2966;
                        frontier_phi_74_pred_3 = _2971;
                        frontier_phi_74_pred_4 = _2970;
                        frontier_phi_74_pred_5 = _2969;
                    }
                    else
                    {
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3178 = _2966;
                        float _3179 = _2967;
                        float _3180 = _2968;
                        float _3181 = _2969;
                        float _3182 = _2970;
                        float _3183 = _2971;
                        uint _3184 = _2981;
                        uint _3185;
                        vec4 _3210;
                        float _3211;
                        vec4 _3226;
                        vec3 _3238;
                        vec4 _3254;
                        vec4 _3270;
                        float _3317;
                        bool _3318;
                        for (;;)
                        {
                            uint _3195 = ((_2972 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3184));
                            _3185 = (_3184 + 4294967295u) & _3184;
                            uint _3197 = _3195 * 40u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3211 = _3210.w;
                            uint _3213 = (_3195 * 40u) + 4u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3195 * 40u) + 8u;
                            _3238 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x));
                            uint _3241 = (_3195 * 40u) + 16u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3257 = (_3195 * 40u) + 20u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3273 = (_3195 * 40u) + 24u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3292 = (_3195 * 40u) + 28u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3317 = fma(_1716, _3305.z, fma(_1715, _3305.y, _3305.x * _1714)) + _3305.w;
                            _3318 = !((fma(_1716, _3286.z, fma(_1715, _3286.y, _3286.x * _1714)) + _3286.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3318)
                            {
                                float _3345 = _3210.x - _1714;
                                float _3346 = _3210.y - _1715;
                                float _3347 = _3210.z - _1716;
                                float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                                float _3351 = inversesqrt(_3348);
                                float _3352 = _3351 * _3345;
                                float _3353 = _3351 * _3346;
                                float _3354 = _3351 * _3347;
                                float _3358 = 1.0 - (_3348 / (_3211 * _3211));
                                float _4469 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3363 = sqrt(_3348) * _3226.w;
                                float _3365 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                                float _3366 = _3365 * _3365;
                                float _3369 = ((1.0 - _3366) * dot(vec3(_3352, _3353, _3354), vec3(_593, _596, _599))) + _3366;
                                float _3372 = _3363 * _3363;
                                float _3376 = (fma(_1716, _3254.z, fma(_1715, _3254.y, _3254.x * _1714)) + _3254.w) / _3317;
                                float _3377 = (fma(_1716, _3270.z, fma(_1715, _3270.y, _3270.x * _1714)) + _3270.w) / _3317;
                                float _3381 = 1.0 - dot(vec2(_3376, _3377), vec2(_3376, _3377));
                                float _4485 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3383 = _3382 * (((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3359) / ((_3372 * 0.699999988079071044921875) + 1.0));
                                float _3395 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                                float _3396 = 1.0 - _653;
                                float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                                float _3404 = _3403 * _3403;
                                float _3405 = _3404 * _3404;
                                float _3406 = _3352 - _2853;
                                float _3407 = _3353 - _2854;
                                float _3408 = _3354 - _2855;
                                float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                                float _3416 = dot(vec3(_593, _596, _599), vec3((-0.0) - _2853, (-0.0) - _2854, (-0.0) - _2855));
                                float _4496 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3420 = dot(vec3(_593, _596, _599), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                                float _4507 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                                float _3428 = _3365 * _3404;
                                float _3429 = _3428 * _3428;
                                float _3435 = ((1.0 - _3429) * dot(vec3(_593, _596, _599), vec3(_3352, _3353, _3354))) + _3429;
                                float _4518 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3437 = 1.0 - _3404;
                                float _3447 = (0.5 / (((_3436 * ((_3419 * _3437) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3404) * _3419))) * _3436;
                                float _4529 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3457 = (_3382 * _3359) * (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3427 * _3427) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3457 * _3238.z;
                                frontier_phi_80_pred_1 = _3457 * _3238.y;
                                frontier_phi_80_pred_2 = _3457 * _3238.x;
                                frontier_phi_80_pred_3 = _3383 * _3226.z;
                                frontier_phi_80_pred_4 = _3383 * _3226.y;
                                frontier_phi_80_pred_5 = _3383 * _3226.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3463 = frontier_phi_80_pred;
                            _3462 = frontier_phi_80_pred_1;
                            _3461 = frontier_phi_80_pred_2;
                            _3466 = frontier_phi_80_pred_3;
                            _3465 = frontier_phi_80_pred_4;
                            _3464 = frontier_phi_80_pred_5;
                            _3168 = _3464 + _3181;
                            _3169 = _3465 + _3182;
                            _3170 = _3466 + _3183;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            _3167 = _3463 + _3180;
                            if (_3185 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3185;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3167;
                        frontier_phi_74_pred_1 = _3166;
                        frontier_phi_74_pred_2 = _3165;
                        frontier_phi_74_pred_3 = _3170;
                        frontier_phi_74_pred_4 = _3169;
                        frontier_phi_74_pred_5 = _3168;
                    }
                    _2832 = frontier_phi_74_pred;
                    _2830 = frontier_phi_74_pred_1;
                    _2828 = frontier_phi_74_pred_2;
                    _2838 = frontier_phi_74_pred_3;
                    _2836 = frontier_phi_74_pred_4;
                    _2834 = frontier_phi_74_pred_5;
                    uint _2973 = _2972 + 1u;
                    if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2966 = _2828;
                        _2967 = _2830;
                        _2968 = _2832;
                        _2969 = _2834;
                        _2970 = _2836;
                        _2971 = _2838;
                        _2972 = _2973;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2836;
                frontier_phi_62_63_ladder_1 = _2834;
                frontier_phi_62_63_ladder_2 = _2832;
                frontier_phi_62_63_ladder_3 = _2838;
                frontier_phi_62_63_ladder_4 = _2830;
                frontier_phi_62_63_ladder_5 = _2828;
            }
            else
            {
                frontier_phi_62_63_ladder = _2723;
                frontier_phi_62_63_ladder_1 = _2721;
                frontier_phi_62_63_ladder_2 = _2719;
                frontier_phi_62_63_ladder_3 = _2725;
                frontier_phi_62_63_ladder_4 = _2717;
                frontier_phi_62_63_ladder_5 = _2715;
            }
            _2827 = frontier_phi_62_63_ladder_5;
            _2829 = frontier_phi_62_63_ladder_4;
            _2831 = frontier_phi_62_63_ladder_2;
            _2833 = frontier_phi_62_63_ladder_1;
            _2835 = frontier_phi_62_63_ladder;
            _2837 = frontier_phi_62_63_ladder_3;
        }
        float _2842 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
        _2648 = (_2842 * _2833) + _2180;
        _2650 = (_2842 * _2835) + _2182;
        _2652 = (_2842 * _2837) + _2184;
        _2654 = ((_2827 * 0.039999999105930328369140625) * _2842) + _2503;
        _2656 = ((_2829 * 0.039999999105930328369140625) * _2842) + _2505;
        _2658 = ((_2831 * 0.039999999105930328369140625) * _2842) + _2507;
    }
    else
    {
        _2648 = _2180;
        _2650 = _2182;
        _2652 = _2184;
        _2654 = _2503;
        _2656 = _2505;
        _2658 = _2507;
    }
    float _4545 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4556 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4567 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    uint _2678 = _612 + 6u;
    float _2686 = _572 / cbSceneParam._m0[86u].x;
    float _2687 = _573 / cbSceneParam._m0[86u].y;
    vec4 _2701 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2686, _2687, (log2((isnan(cbSceneParam._m0[77u].w) ? _507 : (isnan(_507) ? cbSceneParam._m0[77u].w : min(_507, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2703 = _2701.x;
    float _2704 = _2701.y;
    float _2705 = _2701.z;
    float _2706 = _2701.w;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_507 > cbSceneParam._m0[78u].w)
    {
        float _2740 = isnan(_507) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _507 : min(cbSceneParam._m0[80u].w, _507));
        float _2741 = _2740 / _507;
        float _2752 = _2741 * _557;
        float _2753 = _558 * _2741;
        float _2754 = (-0.0) - _2753;
        float _2755 = _2741 * _559;
        float _2757 = (cbSceneParam._m0[77u].w * _2754) / _2740;
        float _2758 = _2757 + cbSceneParam._m0[79u].w;
        float _2759 = cbSceneParam._m0[79u].w - _2753;
        float _2765 = sqrt(((_2752 * _2752) + (_2753 * _2753)) + (_2755 * _2755));
        float _2768 = (1.0 - (cbSceneParam._m0[77u].w / _2740)) * _2765;
        float _2773 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2775 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2928;
        if (abs((_2754 - _2757) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2928 = ((((_2758 > 0.0) ? exp2(_2773 * _2758) : (2.0 - exp2(_2775 * _2758))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2768;
        }
        else
        {
            float _2888 = 1.0 / cbSceneParam._m0[80u].x;
            float _2889 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : max(_2758, _2759));
            float _2890 = isnan(_2759) ? _2758 : (isnan(_2758) ? _2759 : min(_2758, _2759));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            _2928 = ((abs(_2765 / _2754) * cbSceneParam._m0[80u].y) * ((((_2899 - _2900) * 2.0) - ((exp2(_2773 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)))) - exp2(_2773 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))))) * _2888)) - ((exp2(_2775 * _2899) - exp2(_2775 * _2900)) * _2888))) + (_2768 * cbSceneParam._m0[80u].z);
        }
        vec4 _2930 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2686, _2687, 1.0), 0.0);
        float _2939 = exp2((_2928 * (-1.44269502162933349609375)) * (1.0 - _2930.w));
        float _2940 = log2(_2939);
        float _2956 = log2(_2706);
        _2777 = (exp2(_2956 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].x)) * _2930.x) / cbSceneParam._m0[78u].x)) + _2703;
        _2779 = (exp2(_2956 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].y)) * _2930.y) / cbSceneParam._m0[78u].y)) + _2704;
        _2781 = (exp2(_2956 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].z)) * _2930.z) / cbSceneParam._m0[78u].z)) + _2705;
        _2783 = _2939 * _2706;
    }
    else
    {
        _2777 = _2703;
        _2779 = _2704;
        _2781 = _2705;
        _2783 = _2706;
    }
    float _2795 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2796 = _2795 == 3.0;
    float _2797 = log2(_2783);
    float _2804 = exp2(_2797 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2648 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _637))) + ((_2654 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1444)) * cbPerFrame._m0[3u].x));
    float _2805 = exp2(_2797 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2650 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _637))) + ((_2656 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1444)) * cbPerFrame._m0[3u].x));
    float _2806 = exp2(_2797 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2652 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _637))) + ((_2658 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1444)) * cbPerFrame._m0[3u].x));
    float _2815 = (_2795 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2815 * (_2796 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.y = _2815 * (_2796 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.z = _2815 * (_2796 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.w = cbInstanceData._m0[_2678].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2678].w;
}


