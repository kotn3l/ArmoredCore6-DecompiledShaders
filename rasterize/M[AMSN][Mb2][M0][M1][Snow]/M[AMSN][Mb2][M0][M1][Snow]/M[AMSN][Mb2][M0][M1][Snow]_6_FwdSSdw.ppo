#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _966;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _244.x;
    float _248 = _244.y;
    float _249 = _244.z;
    vec4 _281 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _294 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3326 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _304 = ((_281.z - _249) * _295) + _249;
    float _308 = ((((_281.x - _247) * _295) + _247) * 2.0) + (-1.0);
    float _310 = ((((_281.y - _248) * _295) + _248) * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3337 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))));
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _339 = _334.x * cbMtdParam._m0[9u].x;
    float _340 = _334.y * cbMtdParam._m0[9u].y;
    float _341 = _334.z * cbMtdParam._m0[9u].z;
    vec4 _360 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _374 = (((_360.x * cbMtdParam._m0[10u].x) - _339) * _295) + _339;
    float _375 = (((_360.y * cbMtdParam._m0[10u].y) - _340) * _295) + _340;
    float _376 = (((_360.z * cbMtdParam._m0[10u].z) - _341) * _295) + _341;
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _391 = _389.x;
    float _409 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _391) * _295) + _391;
    float _412 = fma(_316, _228, fma(_310, _220 * TANGENT.x, (_206 * _198) * _308));
    float _415 = fma(_316, _229, fma(_310, _220 * TANGENT.y, (_206 * _199) * _308));
    float _418 = fma(_316, _230, fma(_310, _220 * TANGENT.z, (_206 * _200) * _308));
    float _422 = inversesqrt(dot(vec3(_412, _415, _418), vec3(_412, _415, _418)));
    float _423 = _422 * _412;
    float _424 = _422 * _415;
    float _425 = _422 * _418;
    float _3348 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _426 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3370 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3381 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3392 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _430 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _446 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _497 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _487);
    float _498 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _487);
    float _499 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _487);
    float _503 = inversesqrt(dot(vec3(_497, _498, _499), vec3(_497, _498, _499)));
    float _504 = _497 * _503;
    float _505 = _498 * _503;
    float _506 = _499 * _503;
    float _512 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _513 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _532 = fma(_425, cbSceneParam._m0[5u].z, fma(_424, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _423));
    float _535 = fma(_425, cbSceneParam._m0[6u].z, fma(_424, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _423));
    float _538 = fma(_425, cbSceneParam._m0[7u].z, fma(_424, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _423));
    uint _551 = uint(roundEven(NORMAL.w)) * 13u;
    uint _553 = (_551 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3403 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _3425 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _565 = 1.0 - _430;
    float _566 = _562 * _565;
    float _567 = _563 * _565;
    float _568 = _564 * _565;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _430;
    float _574 = (_563 + (-0.039999999105930328369140625)) * _430;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _430;
    float _576 = _573 + 0.039999999105930328369140625;
    float _578 = _574 + 0.039999999105930328369140625;
    float _579 = _575 + 0.039999999105930328369140625;
    vec4 _588 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _512, cbSceneParam._m0[86u].y * _513));
    float _591 = _588.x * TEXCOORD_9.w;
    float _592 = dot(vec3(_423, _424, _425), vec3(_504, _505, _506));
    float _595 = _592 * 2.0;
    float _599 = (_595 * _423) - _504;
    float _600 = (_595 * _424) - _505;
    float _601 = (_595 * _425) - _506;
    float _605 = abs(dot(vec3(_504, _505, _506), vec3(_423, _424, _425)));
    float _3436 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _607 = sqrt(_426);
    float _620 = exp2((_607 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_607 * 3.0));
    float _626 = (1.0 - _620) * ((_607 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _627 = _620 * _607;
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _965;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _690 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _694 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _698 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _723 = _655 + _423;
        float _724 = _659 + _424;
        float _725 = _663 + _425;
        float _735 = fma(_725, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723)) - _690;
        float _736 = fma(_725, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723)) - _694;
        float _737 = fma(_725, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723)) - _698;
        float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
        float _754 = ((_741 * _735) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_690 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_741 * _736) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_694 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_741 * _737) / cbModelParam._m0[34u].z) + ((((((_698 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        float _793 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_759.x + (-0.5));
        float _795 = _793 * (_759.y + (-0.5));
        float _796 = _793 * (_759.z + (-0.5));
        float _803 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_766.x + (-0.5));
        float _805 = _803 * (_766.y + (-0.5));
        float _806 = _803 * (_766.z + (-0.5));
        float _813 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_773.x + (-0.5));
        float _815 = _813 * (_773.y + (-0.5));
        float _816 = _813 * (_773.z + (-0.5));
        float _823 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_780.x + (-0.5));
        float _825 = _823 * (_780.y + (-0.5));
        float _826 = _823 * (_780.z + (-0.5));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = _794 * 0.5;
        float _831 = _804 * 0.5;
        float _832 = _814 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _847 = (dot(vec3(_423, _424, _425), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _857 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3484 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_859 + 1.0))) + _864) * _827;
        float _874 = _795 * 0.5;
        float _875 = _805 * 0.5;
        float _876 = _815 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_423, _424, _425), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3517 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_901 + 1.0))) + _906) * _828;
        float _916 = _796 * 0.5;
        float _917 = _806 * 0.5;
        float _918 = _816 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_423, _424, _425), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3550 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_943 + 1.0))) + _948) * _829;
        _965 = _796;
        _967 = _795;
        _968 = _794;
        _969 = _806;
        _970 = _805;
        _971 = _804;
        _972 = _816;
        _973 = _815;
        _974 = _814;
        _975 = _829;
        _976 = _828;
        _977 = _827;
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
    }
    else
    {
        _965 = _966;
        _967 = _966;
        _968 = _966;
        _969 = _966;
        _970 = _966;
        _971 = _966;
        _972 = _966;
        _973 = _966;
        _974 = _966;
        _975 = _966;
        _976 = _966;
        _977 = _966;
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
    }
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1006 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1010 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1014 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1037 = _655 + _423;
        float _1038 = _659 + _424;
        float _1039 = _663 + _425;
        float _1049 = fma(_1039, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037)) - _1006;
        float _1050 = fma(_1039, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037)) - _1010;
        float _1051 = fma(_1039, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037)) - _1014;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1006 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1010 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[35u].z) + ((((((_1014 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1105 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1072.x + (-0.5));
        float _1107 = _1105 * (_1072.y + (-0.5));
        float _1108 = _1105 * (_1072.z + (-0.5));
        float _1115 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1079.x + (-0.5));
        float _1117 = _1115 * (_1079.y + (-0.5));
        float _1118 = _1115 * (_1079.z + (-0.5));
        float _1125 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1086.x + (-0.5));
        float _1127 = _1125 * (_1086.y + (-0.5));
        float _1128 = _1125 * (_1086.z + (-0.5));
        float _1135 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1093.x + (-0.5));
        float _1137 = _1135 * (_1093.y + (-0.5));
        float _1138 = _1135 * (_1093.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_423, _424, _425), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3613 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1169 + 1.0))) + _1174) * _1139;
        float _1184 = _1107 * 0.5;
        float _1185 = _1117 * 0.5;
        float _1186 = _1127 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_423, _424, _425), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3646 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1211 + 1.0))) + _1216) * _1140;
        float _1226 = _1108 * 0.5;
        float _1227 = _1118 * 0.5;
        float _1228 = _1128 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_423, _424, _425), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3679 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1253 + 1.0))) + _1258) * _1141;
        _1275 = _1108;
        _1276 = _1107;
        _1277 = _1106;
        _1278 = _1118;
        _1279 = _1117;
        _1280 = _1116;
        _1281 = _1128;
        _1282 = _1127;
        _1283 = _1126;
        _1284 = _1141;
        _1285 = _1140;
        _1286 = _1139;
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _966;
        _1276 = _966;
        _1277 = _966;
        _1278 = _966;
        _1279 = _966;
        _1280 = _966;
        _1281 = _966;
        _1282 = _966;
        _1283 = _966;
        _1284 = _966;
        _1285 = _966;
        _1286 = _966;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _978)) + _978;
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _979)) + _979;
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _980)) + _980;
    float _1322 = fma(_1301, cbSceneParam._m0[89u].z, fma(_1300, cbSceneParam._m0[89u].y, _1299 * cbSceneParam._m0[89u].x));
    float _1325 = fma(_1301, cbSceneParam._m0[90u].z, fma(_1300, cbSceneParam._m0[90u].y, _1299 * cbSceneParam._m0[90u].x));
    float _1328 = fma(_1301, cbSceneParam._m0[91u].z, fma(_1300, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1299));
    float _1343 = _599 * 0.5;
    float _1344 = _600 * 0.5;
    float _1345 = _601 * 0.5;
    float _1346 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1349 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1352 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1386;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1359 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_965, _969, _972, _975));
        float _1363 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_967, _970, _973, _976));
        float _1367 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_968, _971, _974, _977));
        float _1374 = dot(vec4(cbModelParam._m0[39u]), vec4(_1343, _1344, _1345, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1397;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1388 = dot(vec4(cbModelParam._m0[40u]), vec4(_1343, _1344, _1345, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1401 = (_1397 * cbModelParam._m0[1u].x) + (_1386 * (1.0 - cbModelParam._m0[1u].x));
    float _1411 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _426);
    float _1412 = isnan(_1411) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1411 : min(cbModelParam._m0[25u].z, _1411));
    float _1494;
    float _1496;
    float _1498;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1461 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1465 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1469 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1472 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1475 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1478 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1506;
        if (_1472 > 0.0)
        {
            _1506 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1506 = frontier_phi_16_14_ladder;
        }
        float _1734;
        if (_1475 > 0.0)
        {
            _1734 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1734 = frontier_phi_25_21_ladder;
        }
        float _1991;
        if (_1478 > 0.0)
        {
            _1991 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1991 = frontier_phi_37_32_ladder;
        }
        float _1993 = isnan(_1734) ? _1506 : (isnan(_1506) ? _1734 : min(_1506, _1734));
        float _1994 = isnan(_1991) ? _1993 : (isnan(_1993) ? _1991 : min(_1993, _1991));
        float _1998 = (_1994 * _1472) + _1461;
        float _1999 = (_1994 * _1475) + _1465;
        float _2000 = (_1994 * _1478) + _1469;
        float _2001 = _1994 * 9.9999997473787516355514526367188e-05;
        float _2003 = (-1.0) - _2001;
        float _2005 = _2001 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2000 > _2005) || ((_2000 < _2003) || ((_1999 > _2005) || ((_1999 < _2003) || ((_1998 < _2003) || (_1998 > _2005))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2128 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2000, cbModelParam._m0[9u].z, fma(_1999, cbModelParam._m0[9u].y, _1998 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2000, cbModelParam._m0[10u].z, fma(_1999, cbModelParam._m0[10u].y, _1998 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2000, cbModelParam._m0[11u].z, fma(_1999, cbModelParam._m0[11u].y, _1998 * cbModelParam._m0[11u].x))), _1412);
            frontier_phi_15_37_ladder = _2128.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2128.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2128.x * cbModelParam._m0[1u].y;
        }
        _1494 = frontier_phi_15_37_ladder_2;
        _1496 = frontier_phi_15_37_ladder_1;
        _1498 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1412);
        _1494 = _1482.x * cbModelParam._m0[1u].y;
        _1496 = _1482.y * cbModelParam._m0[1u].y;
        _1498 = _1482.z * cbModelParam._m0[1u].y;
    }
    float _1502 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _426);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1502 : min(cbModelParam._m0[25u].w, _1502));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1560 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1564 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1568 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1571 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1574 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1577 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1739;
        if (_1571 > 0.0)
        {
            _1739 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1739 = frontier_phi_27_23_ladder;
        }
        float _2018;
        if (_1574 > 0.0)
        {
            _2018 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2018 = frontier_phi_39_34_ladder;
        }
        float _2231;
        if (_1577 > 0.0)
        {
            _2231 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2231 = frontier_phi_48_45_ladder;
        }
        float _2233 = isnan(_2018) ? _1739 : (isnan(_1739) ? _2018 : min(_1739, _2018));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1571) + _1560;
        float _2239 = (_2234 * _1574) + _1564;
        float _2240 = (_2234 * _1577) + _1568;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2241;
        float _2244 = _2241 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2240 > _2244) || ((_2240 < _2242) || ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 < _2242) || (_2238 > _2244))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2240, cbModelParam._m0[17u].z, fma(_2239, cbModelParam._m0[17u].y, _2238 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2240, cbModelParam._m0[18u].z, fma(_2239, cbModelParam._m0[18u].y, _2238 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2240, cbModelParam._m0[19u].z, fma(_2239, cbModelParam._m0[19u].y, _2238 * cbModelParam._m0[19u].x))), _1503);
            frontier_phi_24_48_ladder = _2438.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2438.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2438.x * cbModelParam._m0[1u].z;
        }
        _1596 = frontier_phi_24_48_ladder_2;
        _1598 = frontier_phi_24_48_ladder_1;
        _1600 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1503);
        _1596 = _1580.x * cbModelParam._m0[1u].z;
        _1598 = _1580.y * cbModelParam._m0[1u].z;
        _1600 = _1580.z * cbModelParam._m0[1u].z;
    }
    float _1613 = (((_626 * _576) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1615 = (((_626 * _578) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1617 = (((_626 * _579) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1620 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, _1613 * cbSceneParam._m0[91u].x));
    vec4 _1634 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_512, _513));
    float _1636 = _1634.w;
    float _1648 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1636);
    float _1649 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1636);
    float _1650 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1636);
    uvec4 _1654 = floatBitsToUint(cbInstanceData._m0[_551 + 5u]);
    uint _1656 = _1654.x * 14u;
    uint _1657 = _1656 + 13u;
    float _1664 = _591 + (-1.0);
    float _1669 = (cbLight._m0[_1657].x * _1664) + 1.0;
    float _1670 = (cbLight._m0[_1657].y * _1664) + 1.0;
    float _1671 = (cbLight._m0[_1657].z * _1664) + 1.0;
    float _1672 = (cbLight._m0[_1657].w * _1664) + 1.0;
    uint _1673 = _1656 + 5u;
    float _1679 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1683 = _1656 + 4u;
    float _1692 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
    uint _1696 = _1656 | 1u;
    float _1707 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_423, _424, _425));
    float _1710 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_423, _424, _425));
    float _3815 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _3826 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1715 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.3183098733425140380859375;
    float _1717 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * 0.3183098733425140380859375;
    float _1724 = ((cbLight._m0[_1673].x * _1679) * _1717) + (((cbLight._m0[_1683].x * _1648) * _1692) * _1715);
    float _1725 = ((_1679 * cbLight._m0[_1673].y) * _1717) + (((cbLight._m0[_1683].y * _1649) * _1692) * _1715);
    float _1726 = ((_1679 * cbLight._m0[_1673].z) * _1717) + (((cbLight._m0[_1683].z * _1650) * _1692) * _1715);
    uvec4 _1731 = floatBitsToUint(cbLight._m0[_1656 + 12u]);
    bool _1733 = _1731.x == 0u;
    float _1744;
    float _1746;
    float _1748;
    if (_1733)
    {
        _1744 = _1724;
        _1746 = _1725;
        _1748 = _1726;
    }
    else
    {
        uint _1752 = _1656 + 6u;
        float _1768 = (dot(vec3(cbLight._m0[_1656 + 2u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1769 = _1768 * _1768;
        float _3837 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1771 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _1744 = (((cbLight._m0[_1752].x * 0.3183098733425140380859375) * _1770) * _1771) + _1724;
        _1746 = (((cbLight._m0[_1752].y * 0.3183098733425140380859375) * _1770) * _1771) + _1725;
        _1748 = (((cbLight._m0[_1752].z * 0.3183098733425140380859375) * _1770) * _1771) + _1726;
    }
    bool _1751 = _1731.y == 0u;
    float _1789;
    float _1791;
    float _1793;
    if (_1751)
    {
        _1789 = _1744;
        _1791 = _1746;
        _1793 = _1748;
    }
    else
    {
        uint _1962 = _1656 + 7u;
        float _1978 = (dot(vec3(cbLight._m0[_1656 + 3u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1979 = _1978 * _1978;
        float _3853 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1980 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1981 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _1789 = (((cbLight._m0[_1962].x * 0.3183098733425140380859375) * _1980) * _1981) + _1744;
        _1791 = (((cbLight._m0[_1962].y * 0.3183098733425140380859375) * _1980) * _1981) + _1746;
        _1793 = (((cbLight._m0[_1962].z * 0.3183098733425140380859375) * _1980) * _1981) + _1748;
    }
    uint _1796 = _1656 + 8u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1656].w)) * _426) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1656].x + _504;
    float _1812 = cbLight._m0[_1656].y + _505;
    float _1813 = cbLight._m0[_1656].z + _506;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1656].xyz));
    float _3869 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _1825 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1826 = dot(vec3(_423, _424, _425), vec3(_1818, _1819, _1820));
    float _3891 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_1818, _1819, _1820));
    float _3902 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1810 * _1810;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1846 = exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0);
    float _1847 = 0.959999978542327880859375 - _573;
    float _1849 = 0.959999978542327880859375 - _574;
    float _1850 = 0.959999978542327880859375 - _575;
    float _1857 = 1.0 - _1810;
    float _1868 = (0.5 / (((_1825 * ((_1824 * _1857) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _1857) + _1810) * _1824))) * _1824;
    float _3913 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    uint _1884 = _1656 + 9u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1696].w)) * _426) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1696].x + _504;
    float _1898 = cbLight._m0[_1696].y + _505;
    float _1899 = cbLight._m0[_1696].z + _506;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1696].xyz));
    float _3924 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1911 = dot(vec3(_423, _424, _425), vec3(_1904, _1905, _1906));
    float _3935 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_1904, _1905, _1906));
    float _3946 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1896 * _1896;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1930 = exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0);
    float _1937 = 1.0 - _1896;
    float _1947 = (0.5 / (((_1825 * ((_1910 * _1937) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _1937) + _1896) * _1910))) * _1910;
    float _3957 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1949 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    float _1959 = (((((_1930 * _1847) + _576) * cbLight._m0[_1884].x) * _1949) * _1679) + ((((cbLight._m0[_1796].x * _1648) * ((_1846 * _1847) + _576)) * _1870) * _1692);
    float _1960 = (((((_1930 * _1849) + _578) * cbLight._m0[_1884].y) * _1949) * _1679) + ((((cbLight._m0[_1796].y * _1649) * ((_1846 * _1849) + _578)) * _1870) * _1692);
    float _1961 = (((((_1930 * _1850) + _579) * cbLight._m0[_1884].z) * _1949) * _1679) + ((((cbLight._m0[_1796].z * _1650) * ((_1846 * _1850) + _579)) * _1870) * _1692);
    float _2023;
    float _2025;
    float _2027;
    if (_1733)
    {
        _2023 = _1959;
        _2025 = _1960;
        _2027 = _1961;
    }
    else
    {
        uint _2029 = _1656 + 2u;
        uint _2033 = _1656 + 10u;
        float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _426) * 0.949999988079071044921875);
        float _2048 = _2047 * _2047;
        float _2049 = cbLight._m0[_2029].x + _504;
        float _2050 = cbLight._m0[_2029].y + _505;
        float _2051 = cbLight._m0[_2029].z + _506;
        float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
        float _2056 = _2055 * _2049;
        float _2057 = _2055 * _2050;
        float _2058 = _2055 * _2051;
        float _2059 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2029].xyz));
        float _3968 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2063 = dot(vec3(_423, _424, _425), vec3(_2056, _2057, _2058));
        float _3979 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _2067 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2056, _2057, _2058));
        float _3990 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2071 = _2048 * _2048;
        float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
        float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0);
        float _2089 = 1.0 - _2048;
        float _2099 = (0.5 / (((_1825 * ((_2062 * _2089) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _2089) + _2048) * _2062))) * _2062;
        float _4001 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2101 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
        float _2102 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _2023 = (((((_2082 * _1847) + _576) * cbLight._m0[_2033].x) * _2101) * _2102) + _1959;
        _2025 = (((((_2082 * _1849) + _578) * cbLight._m0[_2033].y) * _2101) * _2102) + _1960;
        _2027 = (((((_2082 * _1850) + _579) * cbLight._m0[_2033].z) * _2101) * _2102) + _1961;
    }
    float _2137;
    float _2139;
    float _2141;
    if (_1751)
    {
        _2137 = _2023;
        _2139 = _2025;
        _2141 = _2027;
    }
    else
    {
        uint _2148 = _1656 + 3u;
        uint _2152 = _1656 + 11u;
        float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _426) * 0.949999988079071044921875);
        float _2167 = _2166 * _2166;
        float _2168 = cbLight._m0[_2148].x + _504;
        float _2169 = cbLight._m0[_2148].y + _505;
        float _2170 = cbLight._m0[_2148].z + _506;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2175 = _2174 * _2168;
        float _2176 = _2174 * _2169;
        float _2177 = _2174 * _2170;
        float _2178 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2148].xyz));
        float _4017 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2182 = dot(vec3(_423, _424, _425), vec3(_2175, _2176, _2177));
        float _4028 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2186 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2175, _2176, _2177));
        float _4039 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2190 = _2167 * _2167;
        float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
        float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
        float _2208 = 1.0 - _2167;
        float _2218 = (0.5 / (((_1825 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _2208) + _2167) * _2181))) * _2181;
        float _4050 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2220 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
        float _2221 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _2137 = (((((_2201 * _1847) + _576) * cbLight._m0[_2152].x) * _2220) * _2221) + _2023;
        _2139 = (((((_2201 * _1849) + _578) * cbLight._m0[_2152].y) * _2220) * _2221) + _2025;
        _2141 = (((((_2201 * _1850) + _579) * cbLight._m0[_2152].z) * _2220) * _2221) + _2027;
    }
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    if (_1654.y == 0u)
    {
        float _2296 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2297 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2296;
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2296;
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2296;
        uvec4 _2311 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2312 = _2311.x;
        uint _2323 = uint((float(_2311.y) * floor(float(uint(cbSceneParam._m0[85u].y * _513) / _2312))) + floor(float(uint(cbSceneParam._m0[85u].x * _512) / _2312)));
        float _2333 = (log2(_2299 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2334 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        uint _2337 = uint(isnan(14.0) ? _2334 : (isnan(_2334) ? 14.0 : min(_2334, 14.0)));
        uvec4 _2342 = texelFetch(g_lightClusterGridBuffer, int(((_2337 << 2u) + (_2323 << 6u)) >> 2u));
        uint _2343 = _2342.x;
        uint _2344 = _2311.z;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        if (((((1u << ((_2344 >> 4u) & 15u)) + 4294967295u) & _2343) == 0u) || ((_2344 & 240u) == 0u))
        {
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
        }
        else
        {
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            uint _2593 = 0u;
            uint _2602;
            bool _2603;
            for (;;)
            {
                _2602 = texelFetch(g_lightClassification, int((((_2337 << 5u) + (_2323 << 9u)) + (_2593 << 2u)) >> 2u)).x;
                _2603 = _2602 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2603)
                {
                    frontier_phi_63_pred = _2592;
                    frontier_phi_63_pred_1 = _2591;
                    frontier_phi_63_pred_2 = _2590;
                    frontier_phi_63_pred_3 = _2589;
                    frontier_phi_63_pred_4 = _2588;
                    frontier_phi_63_pred_5 = _2587;
                }
                else
                {
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    uint _2717;
                    _2711 = _2587;
                    _2712 = _2588;
                    _2713 = _2589;
                    _2714 = _2590;
                    _2715 = _2591;
                    _2716 = _2592;
                    _2717 = _2602;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    for (;;)
                    {
                        uint _2721 = uint(findLSB(_2717)) + (_2593 << 5u);
                        uint _2718 = (_2717 + 4294967295u) & _2717;
                        uint _2723 = _2721 * 48u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2743 = (_2721 * 48u) + 4u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2762 = (_2721 * 48u) + 8u;
                        vec3 _2773 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x));
                        float _2777 = _2737.x - _2297;
                        float _2778 = _2737.y - _2298;
                        float _2779 = _2737.z - _2299;
                        float _2780 = dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779));
                        float _2783 = inversesqrt(_2780);
                        float _2784 = _2783 * _2777;
                        float _2785 = _2783 * _2778;
                        float _2786 = _2783 * _2779;
                        float _2787 = dot(vec3(_532, _535, _538), vec3(_2784, _2785, _2786));
                        float _2792 = 1.0 - (_2780 * _2737.w);
                        float _4076 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2794 = sqrt(_2780) * _2756.w;
                        float _2797 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2787) + _2798;
                        float _2804 = _2794 * _2794;
                        float _2808 = ((isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))) * _2793) / ((_2804 * 0.699999988079071044921875) + 1.0);
                        float _2812 = (-0.0) - _2297;
                        float _2813 = (-0.0) - _2298;
                        float _2814 = (-0.0) - _2299;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2819 = _2818 * _2812;
                        float _2820 = _2818 * _2813;
                        float _2821 = _2818 * _2814;
                        float _2829 = exp2(log2(1.0 / ((_2804 * 3.5) + 5.0)) * 0.25);
                        float _2830 = 1.0 - _607;
                        float _2837 = sqrt(1.0 - ((1.0 - (_2830 * _2830)) * (1.0 - (_2829 * _2829))));
                        float _2838 = _2837 * _2837;
                        float _2839 = _2838 * _2838;
                        float _2840 = _2819 + _2784;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
                        float _2850 = dot(vec3(_532, _535, _538), vec3(_2819, _2820, _2821));
                        float _4092 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2854 = dot(vec3(_532, _535, _538), vec3(_2846 * _2840, _2846 * _2841, _2846 * _2842));
                        float _4103 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2861 = ((_2857 * _2857) * (_2839 + (-1.0))) + 1.0;
                        float _2862 = _2797 * _2838;
                        float _2863 = _2862 * _2862;
                        float _2866 = ((1.0 - _2863) * _2787) + _2863;
                        float _4114 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2867 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2868 = 1.0 - _2838;
                        float _2878 = (0.5 / (((_2867 * ((_2853 * _2868) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2867 * _2868) + _2838) * _2853))) * _2867;
                        float _4125 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2889 = (((_2839 * 3.1415927410125732421875) * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) / ((_2861 * _2861) * ((_2804 * 2.1991131305694580078125) + 3.141590118408203125))) * _2793;
                        _2646 = (_2808 * _2756.x) + _2714;
                        _2647 = (_2808 * _2756.y) + _2715;
                        _2648 = (_2808 * _2756.z) + _2716;
                        _2643 = (_2889 * _2773.x) + _2711;
                        _2644 = (_2889 * _2773.y) + _2712;
                        _2645 = (_2889 * _2773.z) + _2713;
                        if (_2718 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2711 = _2643;
                            _2712 = _2644;
                            _2713 = _2645;
                            _2714 = _2646;
                            _2715 = _2647;
                            _2716 = _2648;
                            _2717 = _2718;
                        }
                    }
                    frontier_phi_63_pred = _2648;
                    frontier_phi_63_pred_1 = _2647;
                    frontier_phi_63_pred_2 = _2646;
                    frontier_phi_63_pred_3 = _2645;
                    frontier_phi_63_pred_4 = _2644;
                    frontier_phi_63_pred_5 = _2643;
                }
                _2454 = frontier_phi_63_pred;
                _2452 = frontier_phi_63_pred_1;
                _2450 = frontier_phi_63_pred_2;
                _2448 = frontier_phi_63_pred_3;
                _2446 = frontier_phi_63_pred_4;
                _2444 = frontier_phi_63_pred_5;
                uint _2594 = _2593 + 1u;
                if (_2594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2587 = _2444;
                    _2588 = _2446;
                    _2589 = _2448;
                    _2590 = _2450;
                    _2591 = _2452;
                    _2592 = _2454;
                    _2593 = _2594;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
        }
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.z;
        uint _2460 = (_2458 >> 8u) & 15u;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((4294967295u << _2460) & _2343) == 0u)
        {
            _2555 = _2443;
            _2557 = _2445;
            _2559 = _2447;
            _2561 = _2449;
            _2563 = _2451;
            _2565 = _2453;
        }
        else
        {
            float _2580 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
            float _2581 = _2580 * _2297;
            float _2582 = _2580 * _2298;
            float _2583 = _2580 * _2299;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2460 < ((_2458 >> 12u) & 15u))
            {
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2694 = _2443;
                float _2695 = _2445;
                float _2696 = _2447;
                float _2697 = _2449;
                float _2698 = _2451;
                float _2699 = _2453;
                uint _2700 = _2460;
                uint _2709;
                bool _2710;
                for (;;)
                {
                    _2709 = texelFetch(g_lightClassification, int((((_2337 << 5u) + (_2323 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                    _2710 = _2709 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2710)
                    {
                        frontier_phi_69_pred = _2699;
                        frontier_phi_69_pred_1 = _2698;
                        frontier_phi_69_pred_2 = _2697;
                        frontier_phi_69_pred_3 = _2696;
                        frontier_phi_69_pred_4 = _2695;
                        frontier_phi_69_pred_5 = _2694;
                    }
                    else
                    {
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _2907 = _2694;
                        float _2908 = _2695;
                        float _2909 = _2696;
                        float _2910 = _2697;
                        float _2911 = _2698;
                        float _2912 = _2699;
                        uint _2913 = _2709;
                        uint _2914;
                        vec4 _2939;
                        float _2940;
                        vec4 _2955;
                        vec3 _2967;
                        vec4 _2983;
                        vec4 _2999;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2924 = ((_2700 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2913));
                            _2914 = (_2913 + 4294967295u) & _2913;
                            uint _2926 = _2924 * 40u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            _2940 = _2939.w;
                            uint _2942 = (_2924 * 40u) + 4u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2957 = (_2924 * 40u) + 8u;
                            _2967 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x));
                            uint _2970 = (_2924 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2924 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2924 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2924 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_2299, _3034.z, fma(_2298, _3034.y, _3034.x * _2297)) + _3034.w;
                            _3047 = !((fma(_2299, _3015.z, fma(_2298, _3015.y, _3015.x * _2297)) + _3015.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3047)
                            {
                                float _3074 = _2939.x - _2297;
                                float _3075 = _2939.y - _2298;
                                float _3076 = _2939.z - _2299;
                                float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                                float _3080 = inversesqrt(_3077);
                                float _3081 = _3080 * _3074;
                                float _3082 = _3080 * _3075;
                                float _3083 = _3080 * _3076;
                                float _3087 = 1.0 - (_3077 / (_2940 * _2940));
                                float _4136 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3092 = sqrt(_3077) * _2955.w;
                                float _3094 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                                float _3095 = _3094 * _3094;
                                float _3098 = ((1.0 - _3095) * dot(vec3(_3081, _3082, _3083), vec3(_532, _535, _538))) + _3095;
                                float _3101 = _3092 * _3092;
                                float _3105 = (fma(_2299, _2983.z, fma(_2298, _2983.y, _2983.x * _2297)) + _2983.w) / _3046;
                                float _3106 = (fma(_2299, _2999.z, fma(_2298, _2999.y, _2999.x * _2297)) + _2999.w) / _3046;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4152 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3088) / ((_3101 * 0.699999988079071044921875) + 1.0));
                                float _3124 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                                float _3125 = 1.0 - _607;
                                float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                                float _3133 = _3132 * _3132;
                                float _3134 = _3133 * _3133;
                                float _3135 = _3081 - _2581;
                                float _3136 = _3082 - _2582;
                                float _3137 = _3083 - _2583;
                                float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                                float _3145 = dot(vec3(_532, _535, _538), vec3((-0.0) - _2581, (-0.0) - _2582, (-0.0) - _2583));
                                float _4163 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3149 = dot(vec3(_532, _535, _538), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                                float _4174 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                                float _3157 = _3094 * _3133;
                                float _3158 = _3157 * _3157;
                                float _3164 = ((1.0 - _3158) * dot(vec3(_532, _535, _538), vec3(_3081, _3082, _3083))) + _3158;
                                float _4185 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3166 = 1.0 - _3133;
                                float _3176 = (0.5 / (((_3165 * ((_3148 * _3166) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3133) * _3148))) * _3165;
                                float _4196 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3186 = (_3111 * _3088) * (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) / ((_3156 * _3156) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3112 * _2955.z;
                                frontier_phi_75_pred_1 = _3112 * _2955.y;
                                frontier_phi_75_pred_2 = _3112 * _2955.x;
                                frontier_phi_75_pred_3 = _3186 * _2967.z;
                                frontier_phi_75_pred_4 = _3186 * _2967.y;
                                frontier_phi_75_pred_5 = _3186 * _2967.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_75_pred;
                            _3194 = frontier_phi_75_pred_1;
                            _3193 = frontier_phi_75_pred_2;
                            _3192 = frontier_phi_75_pred_3;
                            _3191 = frontier_phi_75_pred_4;
                            _3190 = frontier_phi_75_pred_5;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            if (_2914 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2914;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2899;
                        frontier_phi_69_pred_1 = _2898;
                        frontier_phi_69_pred_2 = _2897;
                        frontier_phi_69_pred_3 = _2896;
                        frontier_phi_69_pred_4 = _2895;
                        frontier_phi_69_pred_5 = _2894;
                    }
                    _2566 = frontier_phi_69_pred;
                    _2564 = frontier_phi_69_pred_1;
                    _2562 = frontier_phi_69_pred_2;
                    _2560 = frontier_phi_69_pred_3;
                    _2558 = frontier_phi_69_pred_4;
                    _2556 = frontier_phi_69_pred_5;
                    uint _2701 = _2700 + 1u;
                    if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2694 = _2556;
                        _2695 = _2558;
                        _2696 = _2560;
                        _2697 = _2562;
                        _2698 = _2564;
                        _2699 = _2566;
                        _2700 = _2701;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2566;
                frontier_phi_57_58_ladder_1 = _2564;
                frontier_phi_57_58_ladder_2 = _2562;
                frontier_phi_57_58_ladder_3 = _2560;
                frontier_phi_57_58_ladder_4 = _2558;
                frontier_phi_57_58_ladder_5 = _2556;
            }
            else
            {
                frontier_phi_57_58_ladder = _2453;
                frontier_phi_57_58_ladder_1 = _2451;
                frontier_phi_57_58_ladder_2 = _2449;
                frontier_phi_57_58_ladder_3 = _2447;
                frontier_phi_57_58_ladder_4 = _2445;
                frontier_phi_57_58_ladder_5 = _2443;
            }
            _2555 = frontier_phi_57_58_ladder_5;
            _2557 = frontier_phi_57_58_ladder_4;
            _2559 = frontier_phi_57_58_ladder_3;
            _2561 = frontier_phi_57_58_ladder_2;
            _2563 = frontier_phi_57_58_ladder_1;
            _2565 = frontier_phi_57_58_ladder;
        }
        float _2570 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
        _2355 = (_2570 * _2561) + _1789;
        _2357 = (_2570 * _2563) + _1791;
        _2359 = (_2570 * _2565) + _1793;
        _2361 = ((_2555 * _576) * _2570) + _2137;
        _2363 = ((_2557 * _578) * _2570) + _2139;
        _2365 = ((_2559 * _579) * _2570) + _2141;
    }
    else
    {
        _2355 = _1789;
        _2357 = _1791;
        _2359 = _1793;
        _2361 = _2137;
        _2363 = _2139;
        _2365 = _2141;
    }
    float _4212 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4223 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4234 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    uint _2385 = _551 + 6u;
    float _2393 = _512 / cbSceneParam._m0[86u].x;
    float _2394 = _513 / cbSceneParam._m0[86u].y;
    vec4 _2408 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2393, _2394, (log2((isnan(cbSceneParam._m0[77u].w) ? _446 : (isnan(_446) ? cbSceneParam._m0[77u].w : min(_446, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2410 = _2408.x;
    float _2411 = _2408.y;
    float _2412 = _2408.z;
    float _2413 = _2408.w;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_446 > cbSceneParam._m0[78u].w)
    {
        float _2468 = isnan(_446) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _446 : min(cbSceneParam._m0[80u].w, _446));
        float _2469 = _2468 / _446;
        float _2480 = _2469 * _497;
        float _2481 = _498 * _2469;
        float _2482 = (-0.0) - _2481;
        float _2483 = _2469 * _499;
        float _2485 = (cbSceneParam._m0[77u].w * _2482) / _2468;
        float _2486 = _2485 + cbSceneParam._m0[79u].w;
        float _2487 = cbSceneParam._m0[79u].w - _2481;
        float _2493 = sqrt(((_2480 * _2480) + (_2481 * _2481)) + (_2483 * _2483));
        float _2496 = (1.0 - (cbSceneParam._m0[77u].w / _2468)) * _2493;
        float _2501 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2503 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2656;
        if (abs((_2482 - _2485) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2656 = ((((_2486 > 0.0) ? exp2(_2501 * _2486) : (2.0 - exp2(_2503 * _2486))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2496;
        }
        else
        {
            float _2616 = 1.0 / cbSceneParam._m0[80u].x;
            float _2617 = isnan(_2487) ? _2486 : (isnan(_2486) ? _2487 : max(_2486, _2487));
            float _2618 = isnan(_2487) ? _2486 : (isnan(_2486) ? _2487 : min(_2486, _2487));
            float _2627 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : min(_2617, 0.0));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            _2656 = ((abs(_2493 / _2482) * cbSceneParam._m0[80u].y) * ((((_2627 - _2628) * 2.0) - ((exp2(_2501 * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0)))) - exp2(_2501 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0))))) * _2616)) - ((exp2(_2503 * _2627) - exp2(_2503 * _2628)) * _2616))) + (_2496 * cbSceneParam._m0[80u].z);
        }
        vec4 _2658 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2393, _2394, 1.0), 0.0);
        float _2667 = exp2((_2656 * (-1.44269502162933349609375)) * (1.0 - _2658.w));
        float _2668 = log2(_2667);
        float _2684 = log2(_2413);
        _2505 = (exp2(_2684 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].x)) * _2658.x) / cbSceneParam._m0[78u].x)) + _2410;
        _2507 = (exp2(_2684 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].y)) * _2658.y) / cbSceneParam._m0[78u].y)) + _2411;
        _2509 = (exp2(_2684 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].z)) * _2658.z) / cbSceneParam._m0[78u].z)) + _2412;
        _2511 = _2667 * _2413;
    }
    else
    {
        _2505 = _2410;
        _2507 = _2411;
        _2509 = _2412;
        _2511 = _2413;
    }
    float _2523 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2524 = _2523 == 3.0;
    float _2525 = log2(_2511);
    float _2532 = exp2(_2525 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2355 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _591))) + ((_2361 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1401)) * cbPerFrame._m0[3u].x));
    float _2533 = exp2(_2525 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2357 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _591))) + ((_2363 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1401)) * cbPerFrame._m0[3u].x));
    float _2534 = exp2(_2525 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2359 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _591))) + ((_2365 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1401)) * cbPerFrame._m0[3u].x));
    float _2543 = (_2523 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2543 * (_2524 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2505)));
    SV_Target.y = _2543 * (_2524 ? _2533 : (_2533 + (cbSceneParam._m0[72u].w * _2507)));
    SV_Target.z = _2543 * (_2524 ? _2534 : (_2534 + (cbSceneParam._m0[72u].w * _2509)));
    SV_Target.w = cbInstanceData._m0[_2385].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2385].w;
}


