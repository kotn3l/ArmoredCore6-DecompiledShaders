#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _947;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _239 = _234.z;
    float _243 = (_234.x * 2.0) + (-1.0);
    float _245 = (_234.y * 2.0) + (-1.0);
    float _246 = dot(vec2(_243, _245), vec2(_243, _245));
    float _3566 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _252 = sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))));
    float _255 = fma(_252, _218, fma(_245, _211, _243 * _197));
    float _258 = fma(_252, _219, fma(_245, _212, _243 * _198));
    float _261 = fma(_252, _220, fma(_245, _213, _243 * _199));
    float _265 = inversesqrt(dot(vec3(_255, _258, _261), vec3(_255, _258, _261)));
    float _282 = cbMtdParam._m0[11u].z + dot(vec4(_265 * _255, _265 * _258, _265 * _261, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3577 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    vec4 _301 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _306 = _301.x * cbMtdParam._m0[9u].x;
    float _307 = _301.y * cbMtdParam._m0[9u].y;
    float _308 = _301.z * cbMtdParam._m0[9u].z;
    vec4 _321 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _332 = ((_321.x - _306) * _283) + _306;
    float _333 = ((_321.y - _307) * _283) + _307;
    float _334 = ((_321.z - _308) * _283) + _308;
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _349 = _347.x;
    float _351 = _349 - (_349 * _283);
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = (_364.x * 2.0) + (-1.0);
    float _372 = (_364.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_371, _372), vec2(_371, _372));
    float _3588 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _381 = ((_364.z - _239) * _283) + _239;
    float _388 = ((_371 - _243) * _283) + _243;
    float _389 = ((_372 - _245) * _283) + _245;
    float _390 = ((sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) - _252) * _283) + _252;
    float _393 = fma(_390, _218, fma(_389, _211, _388 * _197));
    float _396 = fma(_390, _219, fma(_389, _212, _388 * _198));
    float _399 = fma(_390, _220, fma(_389, _213, _388 * _199));
    float _403 = inversesqrt(dot(vec3(_393, _396, _399), vec3(_393, _396, _399)));
    float _404 = _403 * _393;
    float _405 = _403 * _396;
    float _406 = _403 * _399;
    float _3599 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _407 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3621 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3632 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3643 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _411 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _427 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _478 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _468);
    float _479 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _468);
    float _480 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _468);
    float _484 = inversesqrt(dot(vec3(_478, _479, _480), vec3(_478, _479, _480)));
    float _485 = _478 * _484;
    float _486 = _479 * _484;
    float _487 = _480 * _484;
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _513 = fma(_406, cbSceneParam._m0[5u].z, fma(_405, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _404));
    float _516 = fma(_406, cbSceneParam._m0[6u].z, fma(_405, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _404));
    float _519 = fma(_406, cbSceneParam._m0[7u].z, fma(_405, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _404));
    uint _532 = uint(roundEven(NORMAL.w)) * 13u;
    uint _534 = (_532 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _540 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_534].x;
    float _541 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_534].y;
    float _542 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_534].z;
    float _3654 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _546 = 1.0 - _411;
    float _547 = _543 * _546;
    float _548 = _544 * _546;
    float _549 = _545 * _546;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _411;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _411;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _411;
    float _557 = _554 + 0.039999999105930328369140625;
    float _559 = _555 + 0.039999999105930328369140625;
    float _560 = _556 + 0.039999999105930328369140625;
    vec4 _569 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _572 = _569.x * TEXCOORD_9.w;
    float _573 = dot(vec3(_404, _405, _406), vec3(_485, _486, _487));
    float _576 = _573 * 2.0;
    float _580 = (_576 * _404) - _485;
    float _581 = (_576 * _405) - _486;
    float _582 = (_576 * _406) - _487;
    float _586 = abs(dot(vec3(_485, _486, _487), vec3(_404, _405, _406)));
    float _3687 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _588 = sqrt(_407);
    float _601 = exp2((_588 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_588 * 3.0));
    float _607 = (1.0 - _601) * ((_588 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _608 = _601 * _588;
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _946;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _671 = fma(_644, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636));
        float _675 = fma(_644, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636));
        float _679 = fma(_644, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636));
        float _704 = _636 + _404;
        float _705 = _640 + _405;
        float _706 = _644 + _406;
        float _716 = fma(_706, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704)) - _671;
        float _717 = fma(_706, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704)) - _675;
        float _718 = fma(_706, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704)) - _679;
        float _722 = inversesqrt(dot(vec3(_716, _717, _718), vec3(_716, _717, _718)));
        float _735 = ((_722 * _716) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_671 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_722 * _717) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_675 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_722 * _718) / cbModelParam._m0[34u].z) + ((((((_679 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        float _774 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_740.x + (-0.5));
        float _776 = _774 * (_740.y + (-0.5));
        float _777 = _774 * (_740.z + (-0.5));
        float _784 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_747.x + (-0.5));
        float _786 = _784 * (_747.y + (-0.5));
        float _787 = _784 * (_747.z + (-0.5));
        float _794 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_754.x + (-0.5));
        float _796 = _794 * (_754.y + (-0.5));
        float _797 = _794 * (_754.z + (-0.5));
        float _804 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_761.x + (-0.5));
        float _806 = _804 * (_761.y + (-0.5));
        float _807 = _804 * (_761.z + (-0.5));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = _775 * 0.5;
        float _812 = _785 * 0.5;
        float _813 = _795 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _828 = (dot(vec3(_404, _405, _406), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _838 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3735 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_840 + 1.0))) + _845) * _808;
        float _855 = _776 * 0.5;
        float _856 = _786 * 0.5;
        float _857 = _796 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(_404, _405, _406), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3768 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_882 + 1.0))) + _887) * _809;
        float _897 = _777 * 0.5;
        float _898 = _787 * 0.5;
        float _899 = _797 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(_404, _405, _406), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3801 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_924 + 1.0))) + _929) * _810;
        _946 = _777;
        _948 = _776;
        _949 = _775;
        _950 = _787;
        _951 = _786;
        _952 = _785;
        _953 = _797;
        _954 = _796;
        _955 = _795;
        _956 = _810;
        _957 = _809;
        _958 = _808;
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
    }
    else
    {
        _946 = _947;
        _948 = _947;
        _949 = _947;
        _950 = _947;
        _951 = _947;
        _952 = _947;
        _953 = _947;
        _954 = _947;
        _955 = _947;
        _956 = _947;
        _957 = _947;
        _958 = _947;
        _959 = 0.0;
        _960 = 0.0;
        _961 = 0.0;
    }
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _987 = fma(_644, cbModelParam._m0[30u].z, fma(_640, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _636));
        float _991 = fma(_644, cbModelParam._m0[31u].z, fma(_640, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _636));
        float _995 = fma(_644, cbModelParam._m0[32u].z, fma(_640, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _636));
        float _1018 = _636 + _404;
        float _1019 = _640 + _405;
        float _1020 = _644 + _406;
        float _1030 = fma(_1020, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018)) - _987;
        float _1031 = fma(_1020, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018)) - _991;
        float _1032 = fma(_1020, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018)) - _995;
        float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
        float _1049 = ((_1036 * _1030) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_987 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1036 * _1031) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_991 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1036 * _1032) / cbModelParam._m0[35u].z) + ((((((_995 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        float _1086 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1053.x + (-0.5));
        float _1088 = _1086 * (_1053.y + (-0.5));
        float _1089 = _1086 * (_1053.z + (-0.5));
        float _1096 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1060.x + (-0.5));
        float _1098 = _1096 * (_1060.y + (-0.5));
        float _1099 = _1096 * (_1060.z + (-0.5));
        float _1106 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1067.x + (-0.5));
        float _1108 = _1106 * (_1067.y + (-0.5));
        float _1109 = _1106 * (_1067.z + (-0.5));
        float _1116 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1074.x + (-0.5));
        float _1118 = _1116 * (_1074.y + (-0.5));
        float _1119 = _1116 * (_1074.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_404, _405, _406), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3864 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1150 + 1.0))) + _1155) * _1120;
        float _1165 = _1088 * 0.5;
        float _1166 = _1098 * 0.5;
        float _1167 = _1108 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_404, _405, _406), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3897 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1192 + 1.0))) + _1197) * _1121;
        float _1207 = _1089 * 0.5;
        float _1208 = _1099 * 0.5;
        float _1209 = _1109 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_404, _405, _406), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3930 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1234 + 1.0))) + _1239) * _1122;
        _1256 = _1089;
        _1257 = _1088;
        _1258 = _1087;
        _1259 = _1099;
        _1260 = _1098;
        _1261 = _1097;
        _1262 = _1109;
        _1263 = _1108;
        _1264 = _1107;
        _1265 = _1122;
        _1266 = _1121;
        _1267 = _1120;
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _947;
        _1257 = _947;
        _1258 = _947;
        _1259 = _947;
        _1260 = _947;
        _1261 = _947;
        _1262 = _947;
        _1263 = _947;
        _1264 = _947;
        _1265 = _947;
        _1266 = _947;
        _1267 = _947;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _959)) + _959;
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _961)) + _961;
    float _1303 = fma(_1282, cbSceneParam._m0[89u].z, fma(_1281, cbSceneParam._m0[89u].y, _1280 * cbSceneParam._m0[89u].x));
    float _1306 = fma(_1282, cbSceneParam._m0[90u].z, fma(_1281, cbSceneParam._m0[90u].y, _1280 * cbSceneParam._m0[90u].x));
    float _1309 = fma(_1282, cbSceneParam._m0[91u].z, fma(_1281, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1280));
    float _1324 = _580 * 0.5;
    float _1325 = _581 * 0.5;
    float _1326 = _582 * 0.5;
    float _1327 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1330 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1333 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1367;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1340 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_946, _950, _953, _956));
        float _1344 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_948, _951, _954, _957));
        float _1348 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_949, _952, _955, _958));
        float _1355 = dot(vec4(cbModelParam._m0[39u]), vec4(_1324, _1325, _1326, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1378;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1369 = dot(vec4(cbModelParam._m0[40u]), vec4(_1324, _1325, _1326, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1382 = (_1378 * cbModelParam._m0[1u].x) + (_1367 * (1.0 - cbModelParam._m0[1u].x));
    float _1392 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _407);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1392 : min(cbModelParam._m0[25u].z, _1392));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1442 = fma(_644, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636)) + cbModelParam._m0[13u].w;
        float _1446 = fma(_644, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636)) + cbModelParam._m0[14u].w;
        float _1450 = fma(_644, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636)) + cbModelParam._m0[15u].w;
        float _1453 = fma(_582, cbModelParam._m0[13u].z, fma(_581, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580));
        float _1456 = fma(_582, cbModelParam._m0[14u].z, fma(_581, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580));
        float _1459 = fma(_582, cbModelParam._m0[15u].z, fma(_581, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580));
        float _1487;
        if (_1453 > 0.0)
        {
            _1487 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1487 = frontier_phi_16_14_ladder;
        }
        float _1662;
        if (_1456 > 0.0)
        {
            _1662 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1662 = frontier_phi_25_21_ladder;
        }
        float _1958;
        if (_1459 > 0.0)
        {
            _1958 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1958 = frontier_phi_37_32_ladder;
        }
        float _1960 = isnan(_1662) ? _1487 : (isnan(_1487) ? _1662 : min(_1487, _1662));
        float _1961 = isnan(_1958) ? _1960 : (isnan(_1960) ? _1958 : min(_1960, _1958));
        float _1965 = (_1961 * _1453) + _1442;
        float _1966 = (_1961 * _1456) + _1446;
        float _1967 = (_1961 * _1459) + _1450;
        float _1968 = _1961 * 9.9999997473787516355514526367188e-05;
        float _1970 = (-1.0) - _1968;
        float _1972 = _1968 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1967 > _1972) || ((_1967 < _1970) || ((_1966 > _1972) || ((_1966 < _1970) || ((_1965 < _1970) || (_1965 > _1972))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1967, cbModelParam._m0[9u].z, fma(_1966, cbModelParam._m0[9u].y, _1965 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1967, cbModelParam._m0[10u].z, fma(_1966, cbModelParam._m0[10u].y, _1965 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1967, cbModelParam._m0[11u].z, fma(_1966, cbModelParam._m0[11u].y, _1965 * cbModelParam._m0[11u].x))), _1393);
            frontier_phi_15_37_ladder = _2112.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2112.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2112.z * cbModelParam._m0[1u].y;
        }
        _1475 = frontier_phi_15_37_ladder_1;
        _1477 = frontier_phi_15_37_ladder;
        _1479 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_580, _581, _582), _1393);
        _1475 = _1463.x * cbModelParam._m0[1u].y;
        _1477 = _1463.y * cbModelParam._m0[1u].y;
        _1479 = _1463.z * cbModelParam._m0[1u].y;
    }
    float _1483 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _407);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1483 : min(cbModelParam._m0[25u].w, _1483));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1541 = fma(_644, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636)) + cbModelParam._m0[21u].w;
        float _1545 = fma(_644, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636)) + cbModelParam._m0[22u].w;
        float _1549 = fma(_644, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636)) + cbModelParam._m0[23u].w;
        float _1552 = fma(_582, cbModelParam._m0[21u].z, fma(_581, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580));
        float _1555 = fma(_582, cbModelParam._m0[22u].z, fma(_581, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580));
        float _1558 = fma(_582, cbModelParam._m0[23u].z, fma(_581, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580));
        float _1667;
        if (_1552 > 0.0)
        {
            _1667 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1667 = frontier_phi_27_23_ladder;
        }
        float _1985;
        if (_1555 > 0.0)
        {
            _1985 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1985 = frontier_phi_39_34_ladder;
        }
        float _2323;
        if (_1558 > 0.0)
        {
            _2323 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2323 = frontier_phi_49_46_ladder;
        }
        float _2325 = isnan(_1985) ? _1667 : (isnan(_1667) ? _1985 : min(_1667, _1985));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1552) + _1541;
        float _2331 = (_2326 * _1555) + _1545;
        float _2332 = (_2326 * _1558) + _1549;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2332, cbModelParam._m0[17u].z, fma(_2331, cbModelParam._m0[17u].y, _2330 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2332, cbModelParam._m0[18u].z, fma(_2331, cbModelParam._m0[18u].y, _2330 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2332, cbModelParam._m0[19u].z, fma(_2331, cbModelParam._m0[19u].y, _2330 * cbModelParam._m0[19u].x))), _1484);
            frontier_phi_24_49_ladder = _2454.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2454.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2454.x * cbModelParam._m0[1u].z;
        }
        _1577 = frontier_phi_24_49_ladder_2;
        _1579 = frontier_phi_24_49_ladder_1;
        _1581 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_580, _581, _582), _1484);
        _1577 = _1561.x * cbModelParam._m0[1u].z;
        _1579 = _1561.y * cbModelParam._m0[1u].z;
        _1581 = _1561.z * cbModelParam._m0[1u].z;
    }
    float _1594 = (((_607 * _557) + _608) * _572) * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1596 = (((_607 * _559) + _608) * _572) * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1598 = (((_607 * _560) + _608) * _572) * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1601 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, _1594 * cbSceneParam._m0[91u].x));
    float _1641 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1645 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1649 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1653 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1654 = _1641 / _1653;
    float _1655 = _1645 / _1653;
    float _1656 = _1649 / _1653;
    float _1803;
    float _1804;
    float _1805;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1683 = ((uint(_1656 > cbSceneParam._m0[59u].y) + uint(_1656 > cbSceneParam._m0[59u].x)) + uint(_1656 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1684 = _1683 + 43u;
        uint _1692 = _1683 + 44u;
        uint _1700 = _1683 + 45u;
        uint _1708 = _1683 + 46u;
        float _1719 = fma(_1653, cbSceneParam._m0[_1684].w, fma(_1649, cbSceneParam._m0[_1684].z, fma(_1645, cbSceneParam._m0[_1684].y, _1641 * cbSceneParam._m0[_1684].x)));
        float _1723 = fma(_1653, cbSceneParam._m0[_1692].w, fma(_1649, cbSceneParam._m0[_1692].z, fma(_1645, cbSceneParam._m0[_1692].y, _1641 * cbSceneParam._m0[_1692].x)));
        float _1731 = fma(_1653, cbSceneParam._m0[_1708].w, fma(_1649, cbSceneParam._m0[_1708].z, fma(_1645, cbSceneParam._m0[_1708].y, _1641 * cbSceneParam._m0[_1708].x)));
        float _1736 = cbSceneParam._m0[33u].z * _1731;
        float _1738 = cbSceneParam._m0[33u].w * _1731;
        float _1741 = fma(_1653, cbSceneParam._m0[_1700].w, fma(_1649, cbSceneParam._m0[_1700].z, fma(_1645, cbSceneParam._m0[_1700].y, _1641 * cbSceneParam._m0[_1700].x))) / _1731;
        float _1789 = (cbSceneParam._m0[33u].x - sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656))) * cbSceneParam._m0[33u].y;
        float _4056 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1796 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1736 + _1719) / _1731, (_1738 + _1723) / _1731), _1741), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1738 + _1719) / _1731, (_1723 - _1736) / _1731), _1741), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1719 - _1736) / _1731, (_1723 - _1738) / _1731), _1741), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1719 - _1738) / _1731, (_1736 + _1723) / _1731), _1741), 0.0)).x), vec4(0.25)));
        _1803 = 1.0 - (_1796 * cbSceneParam._m0[34u].x);
        _1804 = 1.0 - (_1796 * cbSceneParam._m0[34u].y);
        _1805 = 1.0 - (_1796 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1803 = 1.0;
        _1804 = 1.0;
        _1805 = 1.0;
    }
    float _1869;
    float _1871;
    float _1873;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1857 = fma(_1653, cbSceneParam._m0[63u].w, fma(_1649, cbSceneParam._m0[63u].z, fma(_1645, cbSceneParam._m0[63u].y, _1641 * cbSceneParam._m0[63u].x)));
        float _1858 = fma(_1653, cbSceneParam._m0[60u].w, fma(_1649, cbSceneParam._m0[60u].z, fma(_1645, cbSceneParam._m0[60u].y, _1641 * cbSceneParam._m0[60u].x))) / _1857;
        float _1859 = fma(_1653, cbSceneParam._m0[61u].w, fma(_1649, cbSceneParam._m0[61u].z, fma(_1645, cbSceneParam._m0[61u].y, _1641 * cbSceneParam._m0[61u].x))) / _1857;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1858 >= cbSceneParam._m0[64u].x) && (_1859 >= cbSceneParam._m0[64u].y)) && (_1858 <= cbSceneParam._m0[64u].z)) && (_1859 <= cbSceneParam._m0[64u].w))
        {
            float _1998 = fma(_1653, cbSceneParam._m0[62u].w, fma(_1649, cbSceneParam._m0[62u].z, fma(_1645, cbSceneParam._m0[62u].y, _1641 * cbSceneParam._m0[62u].x))) / _1857;
            float _2002 = isnan(cbSceneParam._m0[41u].w) ? _1998 : (isnan(_1998) ? cbSceneParam._m0[41u].w : max(_1998, cbSceneParam._m0[41u].w));
            float _2045 = (cbSceneParam._m0[33u].x - sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656))) * cbSceneParam._m0[33u].y;
            float _4072 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
            float _2052 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1858, cbSceneParam._m0[33u].w + _1859), _2002), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1858, _1859 - cbSceneParam._m0[33u].z), _2002), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1858 - cbSceneParam._m0[33u].z, _1859 - cbSceneParam._m0[33u].w), _2002), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1858 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1859), _2002), 0.0)).x), vec4(0.25)));
            float _2056 = 1.0 - (_2052 * cbSceneParam._m0[34u].x);
            float _2057 = 1.0 - (_2052 * cbSceneParam._m0[34u].y);
            float _2058 = 1.0 - (_2052 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2057) ? _1804 : (isnan(_1804) ? _2057 : min(_1804, _2057));
            frontier_phi_36_35_ladder_1 = isnan(_2058) ? _1805 : (isnan(_1805) ? _2058 : min(_1805, _2058));
            frontier_phi_36_35_ladder_2 = isnan(_2056) ? _1803 : (isnan(_1803) ? _2056 : min(_1803, _2056));
        }
        else
        {
            frontier_phi_36_35_ladder = _1804;
            frontier_phi_36_35_ladder_1 = _1805;
            frontier_phi_36_35_ladder_2 = _1803;
        }
        _1869 = frontier_phi_36_35_ladder_2;
        _1871 = frontier_phi_36_35_ladder;
        _1873 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1869 = _1803;
        _1871 = _1804;
        _1873 = _1805;
    }
    uvec4 _1878 = floatBitsToUint(cbInstanceData._m0[_532 + 5u]);
    uint _1880 = _1878.x * 14u;
    uint _1881 = _1880 + 13u;
    float _1888 = _572 + (-1.0);
    float _1893 = (cbLight._m0[_1881].x * _1888) + 1.0;
    float _1894 = (cbLight._m0[_1881].y * _1888) + 1.0;
    float _1895 = (cbLight._m0[_1881].z * _1888) + 1.0;
    float _1896 = (cbLight._m0[_1881].w * _1888) + 1.0;
    uint _1897 = _1880 + 5u;
    float _1903 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1907 = _1880 + 4u;
    float _1917 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1921 = _1880 | 1u;
    float _1932 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_404, _405, _406));
    float _1935 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_404, _405, _406));
    float _4108 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _4119 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1940 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1942 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1949 = ((cbLight._m0[_1897].x * _1903) * _1942) + (((cbLight._m0[_1907].x * _1869) * _1917) * _1940);
    float _1950 = ((_1903 * cbLight._m0[_1897].y) * _1942) + (((cbLight._m0[_1907].y * _1871) * _1917) * _1940);
    float _1951 = ((_1903 * cbLight._m0[_1897].z) * _1942) + (((cbLight._m0[_1907].z * _1873) * _1917) * _1940);
    uvec4 _1955 = floatBitsToUint(cbLight._m0[_1880 + 12u]);
    bool _1957 = _1955.x == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_1957)
    {
        _2059 = _1949;
        _2061 = _1950;
        _2063 = _1951;
    }
    else
    {
        uint _2067 = _1880 + 6u;
        float _2083 = (dot(vec3(cbLight._m0[_1880 + 2u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _4130 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2086 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2059 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _1949;
        _2061 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _1950;
        _2063 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _1951;
    }
    bool _2066 = _1955.y == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2066)
    {
        _2121 = _2059;
        _2123 = _2061;
        _2125 = _2063;
    }
    else
    {
        uint _2294 = _1880 + 7u;
        float _2310 = (dot(vec3(cbLight._m0[_1880 + 3u].xyz), vec3(_404, _405, _406)) * 0.5) + 0.5;
        float _2311 = _2310 * _2310;
        float _4146 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2312 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2313 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2121 = (((cbLight._m0[_2294].x * 0.3183098733425140380859375) * _2312) * _2313) + _2059;
        _2123 = (((cbLight._m0[_2294].y * 0.3183098733425140380859375) * _2312) * _2313) + _2061;
        _2125 = (((cbLight._m0[_2294].z * 0.3183098733425140380859375) * _2312) * _2313) + _2063;
    }
    uint _2128 = _1880 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _407) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1880].x + _485;
    float _2144 = cbLight._m0[_1880].y + _486;
    float _2145 = cbLight._m0[_1880].z + _487;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1880].xyz));
    float _4162 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _2157 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2158 = dot(vec3(_404, _405, _406), vec3(_2150, _2151, _2152));
    float _4184 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_2150, _2151, _2152));
    float _4195 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _2179 = 0.959999978542327880859375 - _554;
    float _2181 = 0.959999978542327880859375 - _555;
    float _2182 = 0.959999978542327880859375 - _556;
    float _2189 = 1.0 - _2142;
    float _2200 = (0.5 / (((_2157 * ((_2156 * _2189) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2189) + _2142) * _2156))) * _2156;
    float _4206 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2216 = _1880 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _407) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_1921].x + _485;
    float _2230 = cbLight._m0[_1921].y + _486;
    float _2231 = cbLight._m0[_1921].z + _487;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_1921].xyz));
    float _4217 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2243 = dot(vec3(_404, _405, _406), vec3(_2236, _2237, _2238));
    float _4228 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2236, _2237, _2238));
    float _4239 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
    float _2269 = 1.0 - _2228;
    float _2279 = (0.5 / (((_2157 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2269) + _2228) * _2242))) * _2242;
    float _4250 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2281 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2291 = (((((_2262 * _2179) + _557) * cbLight._m0[_2216].x) * _2281) * _1903) + ((((cbLight._m0[_2128].x * _1869) * ((_2178 * _2179) + _557)) * _2202) * _1917);
    float _2292 = (((((_2262 * _2181) + _559) * cbLight._m0[_2216].y) * _2281) * _1903) + ((((cbLight._m0[_2128].y * _1871) * ((_2178 * _2181) + _559)) * _2202) * _1917);
    float _2293 = (((((_2262 * _2182) + _560) * cbLight._m0[_2216].z) * _2281) * _1903) + ((((cbLight._m0[_2128].z * _1873) * ((_2178 * _2182) + _560)) * _2202) * _1917);
    float _2349;
    float _2351;
    float _2353;
    if (_1957)
    {
        _2349 = _2291;
        _2351 = _2292;
        _2353 = _2293;
    }
    else
    {
        uint _2355 = _1880 + 2u;
        uint _2359 = _1880 + 10u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _407) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _485;
        float _2376 = cbLight._m0[_2355].y + _486;
        float _2377 = cbLight._m0[_2355].z + _487;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2355].xyz));
        float _4261 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2389 = dot(vec3(_404, _405, _406), vec3(_2382, _2383, _2384));
        float _4272 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4283 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
        float _2415 = 1.0 - _2374;
        float _2425 = (0.5 / (((_2157 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2415) + _2374) * _2388))) * _2388;
        float _4294 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2349 = (((((_2408 * _2179) + _557) * cbLight._m0[_2359].x) * _2427) * _2428) + _2291;
        _2351 = (((((_2408 * _2181) + _559) * cbLight._m0[_2359].y) * _2427) * _2428) + _2292;
        _2353 = (((((_2408 * _2182) + _560) * cbLight._m0[_2359].z) * _2427) * _2428) + _2293;
    }
    float _2459;
    float _2461;
    float _2463;
    if (_2066)
    {
        _2459 = _2349;
        _2461 = _2351;
        _2463 = _2353;
    }
    else
    {
        uint _2470 = _1880 + 3u;
        uint _2474 = _1880 + 11u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _407) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _485;
        float _2491 = cbLight._m0[_2470].y + _486;
        float _2492 = cbLight._m0[_2470].z + _487;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_404, _405, _406), vec3(cbLight._m0[_2470].xyz));
        float _4310 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2504 = dot(vec3(_404, _405, _406), vec3(_2497, _2498, _2499));
        float _4321 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4332 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2157 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2530) + _2489) * _2503))) * _2503;
        float _4343 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2459 = (((((_2523 * _2179) + _557) * cbLight._m0[_2474].x) * _2542) * _2543) + _2349;
        _2461 = (((((_2523 * _2181) + _559) * cbLight._m0[_2474].y) * _2542) * _2543) + _2351;
        _2463 = (((((_2523 * _2182) + _560) * cbLight._m0[_2474].z) * _2542) * _2543) + _2353;
    }
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_1878.y == 0u)
    {
        uvec4 _2564 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2565 = _2564.x;
        uint _2576 = uint((float(_2564.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2565))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2565)));
        float _2586 = (log2(_1656 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2587 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        uint _2590 = uint(isnan(14.0) ? _2587 : (isnan(_2587) ? 14.0 : min(_2587, 14.0)));
        uvec4 _2595 = texelFetch(g_lightClusterGridBuffer, int(((_2590 << 2u) + (_2576 << 6u)) >> 2u));
        uint _2596 = _2595.x;
        uint _2597 = _2564.z;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((((1u << ((_2597 >> 4u) & 15u)) + 4294967295u) & _2596) == 0u) || ((_2597 & 240u) == 0u))
        {
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
        }
        else
        {
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            uint _2825 = 0u;
            uint _2834;
            bool _2835;
            for (;;)
            {
                _2834 = texelFetch(g_lightClassification, int((((_2590 << 5u) + (_2576 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                _2835 = _2834 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2835)
                {
                    frontier_phi_68_pred = _2824;
                    frontier_phi_68_pred_1 = _2823;
                    frontier_phi_68_pred_2 = _2822;
                    frontier_phi_68_pred_3 = _2820;
                    frontier_phi_68_pred_4 = _2819;
                    frontier_phi_68_pred_5 = _2821;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2834;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2825 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _1654;
                        float _3010 = _2969.y - _1655;
                        float _3011 = _2969.z - _1656;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_513, _516, _519), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4369 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _1654;
                        float _3045 = (-0.0) - _1655;
                        float _3046 = (-0.0) - _1656;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3060 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3061 = 1.0 - _588;
                        float _3068 = sqrt(1.0 - ((1.0 - (_3061 * _3061)) * (1.0 - (_3060 * _3060))));
                        float _3069 = _3068 * _3068;
                        float _3070 = _3069 * _3069;
                        float _3071 = _3051 + _3016;
                        float _3072 = _3052 + _3017;
                        float _3073 = _3053 + _3018;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3081 = dot(vec3(_513, _516, _519), vec3(_3051, _3052, _3053));
                        float _4385 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3084 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3085 = dot(vec3(_513, _516, _519), vec3(_3077 * _3071, _3077 * _3072, _3077 * _3073));
                        float _4396 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3092 = ((_3088 * _3088) * (_3070 + (-1.0))) + 1.0;
                        float _3093 = _3029 * _3069;
                        float _3094 = _3093 * _3093;
                        float _3097 = ((1.0 - _3094) * _3019) + _3094;
                        float _4407 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3099 = 1.0 - _3069;
                        float _3109 = (0.5 / (((_3098 * ((_3084 * _3099) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_3098 * _3099) + _3069) * _3084))) * _3098;
                        float _4418 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3120 = (((_3070 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3092 * _3092) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2878 = (_3040 * _2988.x) + _2946;
                        _2879 = (_3040 * _2988.y) + _2947;
                        _2880 = (_3040 * _2988.z) + _2948;
                        _2875 = (_3120 * _3005.x) + _2943;
                        _2876 = (_3120 * _3005.y) + _2944;
                        _2877 = (_3120 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_68_pred = _2880;
                    frontier_phi_68_pred_1 = _2879;
                    frontier_phi_68_pred_2 = _2878;
                    frontier_phi_68_pred_3 = _2876;
                    frontier_phi_68_pred_4 = _2875;
                    frontier_phi_68_pred_5 = _2877;
                }
                _2686 = frontier_phi_68_pred;
                _2684 = frontier_phi_68_pred_1;
                _2682 = frontier_phi_68_pred_2;
                _2678 = frontier_phi_68_pred_3;
                _2676 = frontier_phi_68_pred_4;
                _2680 = frontier_phi_68_pred_5;
                uint _2826 = _2825 + 1u;
                if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2819 = _2676;
                    _2820 = _2678;
                    _2821 = _2680;
                    _2822 = _2682;
                    _2823 = _2684;
                    _2824 = _2686;
                    _2825 = _2826;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
        }
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.z;
        uint _2692 = (_2690 >> 8u) & 15u;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((4294967295u << _2692) & _2596) == 0u)
        {
            _2787 = _2675;
            _2789 = _2677;
            _2791 = _2679;
            _2793 = _2681;
            _2795 = _2683;
            _2797 = _2685;
        }
        else
        {
            float _2812 = inversesqrt(dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656)));
            float _2813 = _2812 * _1654;
            float _2814 = _2812 * _1655;
            float _2815 = _2812 * _1656;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2692 < ((_2690 >> 12u) & 15u))
            {
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2926 = _2675;
                float _2927 = _2677;
                float _2928 = _2679;
                float _2929 = _2681;
                float _2930 = _2683;
                float _2931 = _2685;
                uint _2932 = _2692;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2590 << 5u) + (_2576 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2942)
                    {
                        frontier_phi_74_pred = _2928;
                        frontier_phi_74_pred_1 = _2927;
                        frontier_phi_74_pred_2 = _2926;
                        frontier_phi_74_pred_3 = _2931;
                        frontier_phi_74_pred_4 = _2930;
                        frontier_phi_74_pred_5 = _2929;
                    }
                    else
                    {
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3138 = _2926;
                        float _3139 = _2927;
                        float _3140 = _2928;
                        float _3141 = _2929;
                        float _3142 = _2930;
                        float _3143 = _2931;
                        uint _3144 = _2941;
                        uint _3145;
                        vec4 _3170;
                        float _3171;
                        vec4 _3186;
                        vec3 _3198;
                        vec4 _3214;
                        vec4 _3230;
                        float _3277;
                        bool _3278;
                        for (;;)
                        {
                            uint _3155 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3144));
                            _3145 = (_3144 + 4294967295u) & _3144;
                            uint _3157 = _3155 * 40u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3171 = _3170.w;
                            uint _3173 = (_3155 * 40u) + 4u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3155 * 40u) + 8u;
                            _3198 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x));
                            uint _3201 = (_3155 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3155 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3233 = (_3155 * 40u) + 24u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3252 = (_3155 * 40u) + 28u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3277 = fma(_1656, _3265.z, fma(_1655, _3265.y, _3265.x * _1654)) + _3265.w;
                            _3278 = !((fma(_1656, _3246.z, fma(_1655, _3246.y, _3246.x * _1654)) + _3246.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3278)
                            {
                                float _3305 = _3170.x - _1654;
                                float _3306 = _3170.y - _1655;
                                float _3307 = _3170.z - _1656;
                                float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                                float _3311 = inversesqrt(_3308);
                                float _3312 = _3311 * _3305;
                                float _3313 = _3311 * _3306;
                                float _3314 = _3311 * _3307;
                                float _3318 = 1.0 - (_3308 / (_3171 * _3171));
                                float _4429 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3323 = sqrt(_3308) * _3186.w;
                                float _3325 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                                float _3326 = _3325 * _3325;
                                float _3329 = ((1.0 - _3326) * dot(vec3(_3312, _3313, _3314), vec3(_513, _516, _519))) + _3326;
                                float _3332 = _3323 * _3323;
                                float _3336 = (fma(_1656, _3214.z, fma(_1655, _3214.y, _3214.x * _1654)) + _3214.w) / _3277;
                                float _3337 = (fma(_1656, _3230.z, fma(_1655, _3230.y, _3230.x * _1654)) + _3230.w) / _3277;
                                float _3341 = 1.0 - dot(vec2(_3336, _3337), vec2(_3336, _3337));
                                float _4445 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3343 = _3342 * (((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3319) / ((_3332 * 0.699999988079071044921875) + 1.0));
                                float _3355 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                                float _3356 = 1.0 - _588;
                                float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                                float _3364 = _3363 * _3363;
                                float _3365 = _3364 * _3364;
                                float _3366 = _3312 - _2813;
                                float _3367 = _3313 - _2814;
                                float _3368 = _3314 - _2815;
                                float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                                float _3376 = dot(vec3(_513, _516, _519), vec3((-0.0) - _2813, (-0.0) - _2814, (-0.0) - _2815));
                                float _4456 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3380 = dot(vec3(_513, _516, _519), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                                float _4467 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                                float _3388 = _3325 * _3364;
                                float _3389 = _3388 * _3388;
                                float _3395 = ((1.0 - _3389) * dot(vec3(_513, _516, _519), vec3(_3312, _3313, _3314))) + _3389;
                                float _4478 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3397 = 1.0 - _3364;
                                float _3407 = (0.5 / (((_3396 * ((_3379 * _3397) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3364) * _3379))) * _3396;
                                float _4489 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3417 = (_3342 * _3319) * (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3387 * _3387) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3417 * _3198.z;
                                frontier_phi_80_pred_1 = _3417 * _3198.y;
                                frontier_phi_80_pred_2 = _3417 * _3198.x;
                                frontier_phi_80_pred_3 = _3343 * _3186.z;
                                frontier_phi_80_pred_4 = _3343 * _3186.y;
                                frontier_phi_80_pred_5 = _3343 * _3186.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3423 = frontier_phi_80_pred;
                            _3422 = frontier_phi_80_pred_1;
                            _3421 = frontier_phi_80_pred_2;
                            _3426 = frontier_phi_80_pred_3;
                            _3425 = frontier_phi_80_pred_4;
                            _3424 = frontier_phi_80_pred_5;
                            _3128 = _3424 + _3141;
                            _3129 = _3425 + _3142;
                            _3130 = _3426 + _3143;
                            _3125 = _3421 + _3138;
                            _3126 = _3422 + _3139;
                            _3127 = _3423 + _3140;
                            if (_3145 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3145;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3127;
                        frontier_phi_74_pred_1 = _3126;
                        frontier_phi_74_pred_2 = _3125;
                        frontier_phi_74_pred_3 = _3130;
                        frontier_phi_74_pred_4 = _3129;
                        frontier_phi_74_pred_5 = _3128;
                    }
                    _2792 = frontier_phi_74_pred;
                    _2790 = frontier_phi_74_pred_1;
                    _2788 = frontier_phi_74_pred_2;
                    _2798 = frontier_phi_74_pred_3;
                    _2796 = frontier_phi_74_pred_4;
                    _2794 = frontier_phi_74_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2788;
                        _2927 = _2790;
                        _2928 = _2792;
                        _2929 = _2794;
                        _2930 = _2796;
                        _2931 = _2798;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2796;
                frontier_phi_62_63_ladder_1 = _2794;
                frontier_phi_62_63_ladder_2 = _2792;
                frontier_phi_62_63_ladder_3 = _2798;
                frontier_phi_62_63_ladder_4 = _2790;
                frontier_phi_62_63_ladder_5 = _2788;
            }
            else
            {
                frontier_phi_62_63_ladder = _2683;
                frontier_phi_62_63_ladder_1 = _2681;
                frontier_phi_62_63_ladder_2 = _2679;
                frontier_phi_62_63_ladder_3 = _2685;
                frontier_phi_62_63_ladder_4 = _2677;
                frontier_phi_62_63_ladder_5 = _2675;
            }
            _2787 = frontier_phi_62_63_ladder_5;
            _2789 = frontier_phi_62_63_ladder_4;
            _2791 = frontier_phi_62_63_ladder_2;
            _2793 = frontier_phi_62_63_ladder_1;
            _2795 = frontier_phi_62_63_ladder;
            _2797 = frontier_phi_62_63_ladder_3;
        }
        float _2802 = isnan(1.0) ? _572 : (isnan(_572) ? 1.0 : min(_572, 1.0));
        _2608 = (_2802 * _2793) + _2121;
        _2610 = (_2802 * _2795) + _2123;
        _2612 = (_2802 * _2797) + _2125;
        _2614 = ((_2787 * _557) * _2802) + _2459;
        _2616 = ((_2789 * _559) * _2802) + _2461;
        _2618 = ((_2791 * _560) * _2802) + _2463;
    }
    else
    {
        _2608 = _2121;
        _2610 = _2123;
        _2612 = _2125;
        _2614 = _2459;
        _2616 = _2461;
        _2618 = _2463;
    }
    float _4505 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4516 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4527 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    uint _2638 = _532 + 6u;
    float _2646 = _493 / cbSceneParam._m0[86u].x;
    float _2647 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _427 : (isnan(_427) ? cbSceneParam._m0[77u].w : min(_427, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    if (_427 > cbSceneParam._m0[78u].w)
    {
        float _2700 = isnan(_427) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _427 : min(cbSceneParam._m0[80u].w, _427));
        float _2701 = _2700 / _427;
        float _2712 = _2701 * _478;
        float _2713 = _479 * _2701;
        float _2714 = (-0.0) - _2713;
        float _2715 = _2701 * _480;
        float _2717 = (cbSceneParam._m0[77u].w * _2714) / _2700;
        float _2718 = _2717 + cbSceneParam._m0[79u].w;
        float _2719 = cbSceneParam._m0[79u].w - _2713;
        float _2725 = sqrt(((_2712 * _2712) + (_2713 * _2713)) + (_2715 * _2715));
        float _2728 = (1.0 - (cbSceneParam._m0[77u].w / _2700)) * _2725;
        float _2733 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2735 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2888;
        if (abs((_2714 - _2717) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2888 = ((((_2718 > 0.0) ? exp2(_2733 * _2718) : (2.0 - exp2(_2735 * _2718))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2728;
        }
        else
        {
            float _2848 = 1.0 / cbSceneParam._m0[80u].x;
            float _2849 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : max(_2718, _2719));
            float _2850 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : min(_2718, _2719));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            _2888 = ((abs(_2725 / _2714) * cbSceneParam._m0[80u].y) * ((((_2859 - _2860) * 2.0) - ((exp2(_2733 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)))) - exp2(_2733 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))))) * _2848)) - ((exp2(_2735 * _2859) - exp2(_2735 * _2860)) * _2848))) + (_2728 * cbSceneParam._m0[80u].z);
        }
        vec4 _2890 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2899 = exp2((_2888 * (-1.44269502162933349609375)) * (1.0 - _2890.w));
        float _2900 = log2(_2899);
        float _2916 = log2(_2666);
        _2737 = (exp2(_2916 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].x)) * _2890.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2739 = (exp2(_2916 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].y)) * _2890.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2741 = (exp2(_2916 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].z)) * _2890.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2743 = _2899 * _2666;
    }
    else
    {
        _2737 = _2663;
        _2739 = _2664;
        _2741 = _2665;
        _2743 = _2666;
    }
    float _2755 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2756 = _2755 == 3.0;
    float _2757 = log2(_2743);
    float _2764 = exp2(_2757 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2608 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _572))) + ((_2614 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1382)) * cbPerFrame._m0[3u].x));
    float _2765 = exp2(_2757 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2610 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _572))) + ((_2616 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1382)) * cbPerFrame._m0[3u].x));
    float _2766 = exp2(_2757 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2612 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _572))) + ((_2618 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1382)) * cbPerFrame._m0[3u].x));
    float _2775 = (_2755 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2775 * (_2756 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.y = _2775 * (_2756 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2739)));
    SV_Target.z = _2775 * (_2756 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.w = cbInstanceData._m0[_2638].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
}


