#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _958;
float _3610;
float _3611;
float _3612;
float _3613;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3622 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3633 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))));
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _341 = _336.x * cbMtdParam._m0[9u].x;
    float _342 = _336.y * cbMtdParam._m0[9u].y;
    float _343 = _336.z * cbMtdParam._m0[9u].z;
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _376 = (((_362.x * cbMtdParam._m0[10u].x) - _341) * _297) + _341;
    float _377 = (((_362.y * cbMtdParam._m0[10u].y) - _342) * _297) + _342;
    float _378 = (((_362.z * cbMtdParam._m0[10u].z) - _343) * _297) + _343;
    float _381 = fma(_318, _230, fma(_312, _222 * TANGENT.x, (_208 * _200) * _310));
    float _384 = fma(_318, _231, fma(_312, _222 * TANGENT.y, (_208 * _201) * _310));
    float _387 = fma(_318, _232, fma(_312, _222 * TANGENT.z, (_208 * _202) * _310));
    float _391 = inversesqrt(dot(vec3(_381, _384, _387), vec3(_381, _384, _387)));
    float _392 = _391 * _381;
    float _393 = _391 * _384;
    float _394 = _391 * _387;
    float _3644 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _395 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3666 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3677 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _414 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _465 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _455);
    float _466 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _455);
    float _467 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _455);
    float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
    float _472 = _465 * _471;
    float _473 = _466 * _471;
    float _474 = _467 * _471;
    vec4 _479 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _481 = _479.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _638 = sqrt(((_465 * _465) + (_466 * _466)) + (_467 * _467));
        float _644 = (cbMatDynParam._m0[5u].x * _638) + cbMatDynParam._m0[5u].y;
        float _3688 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _649 = (cbMatDynParam._m0[5u].z * _638) + cbMatDynParam._m0[5u].w;
        float _3699 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) - _645)) + _645) < ((_481 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _514 = fma(_394, cbSceneParam._m0[5u].z, fma(_393, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _392));
    float _517 = fma(_394, cbSceneParam._m0[6u].z, fma(_393, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _392));
    float _520 = fma(_394, cbSceneParam._m0[7u].z, fma(_393, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _392));
    uint _533 = uint(roundEven(NORMAL.w)) * 13u;
    uint _534 = _533 + 9u;
    uint _535 = _534 + uint(cbMatDynParam._m0[0u].w);
    float _541 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_535].x;
    float _542 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_535].y;
    float _543 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_535].z;
    float _3710 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    vec4 _555 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _558 = _555.x * TEXCOORD_9.w;
    float _559 = dot(vec3(_392, _393, _394), vec3(_472, _473, _474));
    float _562 = _559 * 2.0;
    float _566 = (_562 * _392) - _472;
    float _567 = (_562 * _393) - _473;
    float _568 = (_562 * _394) - _474;
    float _572 = abs(dot(vec3(_472, _473, _474), vec3(_392, _393, _394)));
    float _3743 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _574 = sqrt(_395);
    float _587 = exp2((_574 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_574 * 3.0));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_627, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619));
        float _686 = fma(_627, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619));
        float _690 = fma(_627, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619));
        float _715 = _619 + _392;
        float _716 = _623 + _393;
        float _717 = _627 + _394;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_392, _393, _394), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3791 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_392, _393, _394), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3824 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_392, _393, _394), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3857 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = fma(_627, cbModelParam._m0[30u].z, fma(_623, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _619));
        float _1005 = fma(_627, cbModelParam._m0[31u].z, fma(_623, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _619));
        float _1009 = fma(_627, cbModelParam._m0[32u].z, fma(_623, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _619));
        float _1032 = _619 + _392;
        float _1033 = _623 + _393;
        float _1034 = _627 + _394;
        float _1044 = fma(_1034, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032)) - _1001;
        float _1045 = fma(_1034, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032)) - _1005;
        float _1046 = fma(_1034, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032)) - _1009;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1001 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1005 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[35u].z) + ((((((_1009 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1100 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1067.x + (-0.5));
        float _1102 = _1100 * (_1067.y + (-0.5));
        float _1103 = _1100 * (_1067.z + (-0.5));
        float _1110 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1074.x + (-0.5));
        float _1112 = _1110 * (_1074.y + (-0.5));
        float _1113 = _1110 * (_1074.z + (-0.5));
        float _1120 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1081.x + (-0.5));
        float _1122 = _1120 * (_1081.y + (-0.5));
        float _1123 = _1120 * (_1081.z + (-0.5));
        float _1130 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1088.x + (-0.5));
        float _1132 = _1130 * (_1088.y + (-0.5));
        float _1133 = _1130 * (_1088.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_392, _393, _394), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3920 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1164 + 1.0))) + _1169) * _1134;
        float _1179 = _1102 * 0.5;
        float _1180 = _1112 * 0.5;
        float _1181 = _1122 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_392, _393, _394), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3953 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1206 + 1.0))) + _1211) * _1135;
        float _1221 = _1103 * 0.5;
        float _1222 = _1113 * 0.5;
        float _1223 = _1123 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_392, _393, _394), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3986 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1248 + 1.0))) + _1253) * _1136;
        _1270 = _1103;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1113;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1123;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1136;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = _958;
        _1280 = _958;
        _1281 = _958;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _971)) + _971;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1317 = fma(_1296, cbSceneParam._m0[89u].z, fma(_1295, cbSceneParam._m0[89u].y, _1294 * cbSceneParam._m0[89u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[90u].z, fma(_1295, cbSceneParam._m0[90u].y, _1294 * cbSceneParam._m0[90u].x));
    float _1323 = fma(_1296, cbSceneParam._m0[91u].z, fma(_1295, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1294));
    float _1338 = _566 * 0.5;
    float _1339 = _567 * 0.5;
    float _1340 = _568 * 0.5;
    float _1341 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1344 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1347 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1381;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1354 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_957, _961, _964, _967));
        float _1358 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_959, _962, _965, _968));
        float _1362 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_960, _963, _966, _969));
        float _1369 = dot(vec4(cbModelParam._m0[39u]), vec4(_1338, _1339, _1340, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1392;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1383 = dot(vec4(cbModelParam._m0[40u]), vec4(_1338, _1339, _1340, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1396 = (_1392 * cbModelParam._m0[1u].x) + (_1381 * (1.0 - cbModelParam._m0[1u].x));
    float _1406 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _395);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1406 : min(cbModelParam._m0[25u].z, _1406));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1456 = fma(_627, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619)) + cbModelParam._m0[13u].w;
        float _1460 = fma(_627, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619)) + cbModelParam._m0[14u].w;
        float _1464 = fma(_627, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619)) + cbModelParam._m0[15u].w;
        float _1467 = fma(_568, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566));
        float _1470 = fma(_568, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566));
        float _1473 = fma(_568, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566));
        float _1501;
        if (_1467 > 0.0)
        {
            _1501 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1501 = frontier_phi_19_17_ladder;
        }
        float _1675;
        if (_1470 > 0.0)
        {
            _1675 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1675 = frontier_phi_28_24_ladder;
        }
        float _1970;
        if (_1473 > 0.0)
        {
            _1970 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1970 = frontier_phi_40_35_ladder;
        }
        float _1972 = isnan(_1675) ? _1501 : (isnan(_1501) ? _1675 : min(_1501, _1675));
        float _1973 = isnan(_1970) ? _1972 : (isnan(_1972) ? _1970 : min(_1972, _1970));
        float _1977 = (_1973 * _1467) + _1456;
        float _1978 = (_1973 * _1470) + _1460;
        float _1979 = (_1973 * _1473) + _1464;
        float _1980 = _1973 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1980;
        float _1984 = _1980 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 > _1984) || ((_1978 < _1982) || ((_1977 < _1982) || (_1977 > _1984))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2124 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1979, cbModelParam._m0[9u].z, fma(_1978, cbModelParam._m0[9u].y, _1977 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1979, cbModelParam._m0[10u].z, fma(_1978, cbModelParam._m0[10u].y, _1977 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1979, cbModelParam._m0[11u].z, fma(_1978, cbModelParam._m0[11u].y, _1977 * cbModelParam._m0[11u].x))), _1407);
            frontier_phi_18_40_ladder = _2124.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2124.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2124.x * cbModelParam._m0[1u].y;
        }
        _1489 = frontier_phi_18_40_ladder_2;
        _1491 = frontier_phi_18_40_ladder_1;
        _1493 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_566, _567, _568), _1407);
        _1489 = _1477.x * cbModelParam._m0[1u].y;
        _1491 = _1477.y * cbModelParam._m0[1u].y;
        _1493 = _1477.z * cbModelParam._m0[1u].y;
    }
    float _1497 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _395);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1497 : min(cbModelParam._m0[25u].w, _1497));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1555 = fma(_627, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619)) + cbModelParam._m0[21u].w;
        float _1559 = fma(_627, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619)) + cbModelParam._m0[22u].w;
        float _1563 = fma(_627, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619)) + cbModelParam._m0[23u].w;
        float _1566 = fma(_568, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566));
        float _1569 = fma(_568, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566));
        float _1572 = fma(_568, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566));
        float _1680;
        if (_1566 > 0.0)
        {
            _1680 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1680 = frontier_phi_30_26_ladder;
        }
        float _1997;
        if (_1569 > 0.0)
        {
            _1997 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1997 = frontier_phi_42_37_ladder;
        }
        float _2324;
        if (_1572 > 0.0)
        {
            _2324 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2324 = frontier_phi_52_49_ladder;
        }
        float _2326 = isnan(_1997) ? _1680 : (isnan(_1680) ? _1997 : min(_1680, _1997));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1566) + _1555;
        float _2332 = (_2327 * _1569) + _1559;
        float _2333 = (_2327 * _1572) + _1563;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1498);
            frontier_phi_27_52_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1591 = frontier_phi_27_52_ladder_2;
        _1593 = frontier_phi_27_52_ladder_1;
        _1595 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_566, _567, _568), _1498);
        _1591 = _1575.x * cbModelParam._m0[1u].z;
        _1593 = _1575.y * cbModelParam._m0[1u].z;
        _1595 = _1575.z * cbModelParam._m0[1u].z;
    }
    float _1607 = ((((1.0 - _587) * ((_574 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_587 * _574)) * _558;
    float _1608 = _1607 * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1609 = _1607 * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1610 = _1607 * ((cbModelParam._m0[1u].w * (_1595 - _1493)) + _1493);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1609, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1609, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1609, cbSceneParam._m0[91u].y, _1608 * cbSceneParam._m0[91u].x));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1667 = _1654 / _1666;
    float _1668 = _1658 / _1666;
    float _1669 = _1662 / _1666;
    float _1816;
    float _1817;
    float _1818;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1696 = ((uint(_1669 > cbSceneParam._m0[59u].y) + uint(_1669 > cbSceneParam._m0[59u].x)) + uint(_1669 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1697 = _1696 + 43u;
        uint _1705 = _1696 + 44u;
        uint _1713 = _1696 + 45u;
        uint _1721 = _1696 + 46u;
        float _1732 = fma(_1666, cbSceneParam._m0[_1697].w, fma(_1662, cbSceneParam._m0[_1697].z, fma(_1658, cbSceneParam._m0[_1697].y, _1654 * cbSceneParam._m0[_1697].x)));
        float _1736 = fma(_1666, cbSceneParam._m0[_1705].w, fma(_1662, cbSceneParam._m0[_1705].z, fma(_1658, cbSceneParam._m0[_1705].y, _1654 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1666, cbSceneParam._m0[_1721].w, fma(_1662, cbSceneParam._m0[_1721].z, fma(_1658, cbSceneParam._m0[_1721].y, _1654 * cbSceneParam._m0[_1721].x)));
        float _1749 = cbSceneParam._m0[33u].z * _1744;
        float _1751 = cbSceneParam._m0[33u].w * _1744;
        float _1754 = fma(_1666, cbSceneParam._m0[_1713].w, fma(_1662, cbSceneParam._m0[_1713].z, fma(_1658, cbSceneParam._m0[_1713].y, _1654 * cbSceneParam._m0[_1713].x))) / _1744;
        float _1802 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
        float _4112 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1809 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 + _1732) / _1744, (_1751 + _1736) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 + _1732) / _1744, (_1736 - _1749) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1749) / _1744, (_1736 - _1751) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1751) / _1744, (_1749 + _1736) / _1744), _1754), 0.0)).x), vec4(0.25)));
        _1816 = 1.0 - (_1809 * cbSceneParam._m0[34u].x);
        _1817 = 1.0 - (_1809 * cbSceneParam._m0[34u].y);
        _1818 = 1.0 - (_1809 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1816 = 1.0;
        _1817 = 1.0;
        _1818 = 1.0;
    }
    float _1882;
    float _1884;
    float _1886;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1870 = fma(_1666, cbSceneParam._m0[63u].w, fma(_1662, cbSceneParam._m0[63u].z, fma(_1658, cbSceneParam._m0[63u].y, _1654 * cbSceneParam._m0[63u].x)));
        float _1871 = fma(_1666, cbSceneParam._m0[60u].w, fma(_1662, cbSceneParam._m0[60u].z, fma(_1658, cbSceneParam._m0[60u].y, _1654 * cbSceneParam._m0[60u].x))) / _1870;
        float _1872 = fma(_1666, cbSceneParam._m0[61u].w, fma(_1662, cbSceneParam._m0[61u].z, fma(_1658, cbSceneParam._m0[61u].y, _1654 * cbSceneParam._m0[61u].x))) / _1870;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1871 >= cbSceneParam._m0[64u].x) && (_1872 >= cbSceneParam._m0[64u].y)) && (_1871 <= cbSceneParam._m0[64u].z)) && (_1872 <= cbSceneParam._m0[64u].w))
        {
            float _2010 = fma(_1666, cbSceneParam._m0[62u].w, fma(_1662, cbSceneParam._m0[62u].z, fma(_1658, cbSceneParam._m0[62u].y, _1654 * cbSceneParam._m0[62u].x))) / _1870;
            float _2014 = isnan(cbSceneParam._m0[41u].w) ? _2010 : (isnan(_2010) ? cbSceneParam._m0[41u].w : max(_2010, cbSceneParam._m0[41u].w));
            float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
            float _4128 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
            float _2064 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1871, cbSceneParam._m0[33u].w + _1872), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1871, _1872 - cbSceneParam._m0[33u].z), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].z, _1872 - cbSceneParam._m0[33u].w), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1872), _2014), 0.0)).x), vec4(0.25)));
            float _2068 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
            float _2069 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
            float _2070 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2069) ? _1817 : (isnan(_1817) ? _2069 : min(_1817, _2069));
            frontier_phi_39_38_ladder_1 = isnan(_2068) ? _1816 : (isnan(_1816) ? _2068 : min(_1816, _2068));
            frontier_phi_39_38_ladder_2 = isnan(_2070) ? _1818 : (isnan(_1818) ? _2070 : min(_1818, _2070));
        }
        else
        {
            frontier_phi_39_38_ladder = _1817;
            frontier_phi_39_38_ladder_1 = _1816;
            frontier_phi_39_38_ladder_2 = _1818;
        }
        _1882 = frontier_phi_39_38_ladder_1;
        _1884 = frontier_phi_39_38_ladder;
        _1886 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1882 = _1816;
        _1884 = _1817;
        _1886 = _1818;
    }
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_533 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _558 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1929 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1933 = _1893 | 1u;
    float _1944 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_392, _393, _394));
    float _1947 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_392, _393, _394));
    float _4164 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _4175 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1952 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1954 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1961 = ((cbLight._m0[_1910].x * _1916) * _1954) + (((cbLight._m0[_1920].x * _1882) * _1929) * _1952);
    float _1962 = ((_1916 * cbLight._m0[_1910].y) * _1954) + (((cbLight._m0[_1920].y * _1884) * _1929) * _1952);
    float _1963 = ((_1916 * cbLight._m0[_1910].z) * _1954) + (((cbLight._m0[_1920].z * _1886) * _1929) * _1952);
    uvec4 _1967 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1969 = _1967.x == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_1969)
    {
        _2071 = _1961;
        _2073 = _1962;
        _2075 = _1963;
    }
    else
    {
        uint _2079 = _1893 + 6u;
        float _2095 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4186 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2098 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2071 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1961;
        _2073 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1962;
        _2075 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1963;
    }
    bool _2078 = _1967.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2078)
    {
        _2133 = _2071;
        _2135 = _2073;
        _2137 = _2075;
    }
    else
    {
        uint _2295 = _1893 + 7u;
        float _2311 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4202 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2314 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2133 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2071;
        _2135 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2073;
        _2137 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2075;
    }
    uint _2140 = _1893 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _395) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1893].x + _472;
    float _2156 = cbLight._m0[_1893].y + _473;
    float _2157 = cbLight._m0[_1893].z + _474;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1893].xyz));
    float _4218 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _2169 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2170 = dot(vec3(_392, _393, _394), vec3(_2162, _2163, _2164));
    float _4240 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2162, _2163, _2164));
    float _4251 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2154;
    float _2205 = (0.5 / (((_2169 * ((_2168 * _2194) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2194) + _2154) * _2168))) * _2168;
    float _4262 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2221 = _1893 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _395) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_1933].x + _472;
    float _2235 = cbLight._m0[_1933].y + _473;
    float _2236 = cbLight._m0[_1933].z + _474;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1933].xyz));
    float _4273 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2248 = dot(vec3(_392, _393, _394), vec3(_2241, _2242, _2243));
    float _4284 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2241, _2242, _2243));
    float _4295 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2270 = 1.0 - _2233;
    float _2280 = (0.5 / (((_2169 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2270) + _2233) * _2247))) * _2247;
    float _4306 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2292 = (((_2269 * cbLight._m0[_2221].x) * _2282) * _1916) + ((((cbLight._m0[_2140].x * _1882) * _2193) * _2207) * _1929);
    float _2293 = (((_2269 * cbLight._m0[_2221].y) * _2282) * _1916) + ((((cbLight._m0[_2140].y * _1884) * _2193) * _2207) * _1929);
    float _2294 = (((_2269 * cbLight._m0[_2221].z) * _2282) * _1916) + ((((cbLight._m0[_2140].z * _1886) * _2193) * _2207) * _1929);
    float _2350;
    float _2352;
    float _2354;
    if (_1969)
    {
        _2350 = _2292;
        _2352 = _2293;
        _2354 = _2294;
    }
    else
    {
        uint _2356 = _1893 + 2u;
        uint _2360 = _1893 + 10u;
        float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _395) * 0.949999988079071044921875);
        float _2375 = _2374 * _2374;
        float _2376 = cbLight._m0[_2356].x + _472;
        float _2377 = cbLight._m0[_2356].y + _473;
        float _2378 = cbLight._m0[_2356].z + _474;
        float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
        float _2383 = _2382 * _2376;
        float _2384 = _2382 * _2377;
        float _2385 = _2382 * _2378;
        float _2386 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2356].xyz));
        float _4317 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2390 = dot(vec3(_392, _393, _394), vec3(_2383, _2384, _2385));
        float _4328 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2394 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2383, _2384, _2385));
        float _4339 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2398 = _2375 * _2375;
        float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
        float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2412 = 1.0 - _2375;
        float _2422 = (0.5 / (((_2169 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2412) + _2375) * _2389))) * _2389;
        float _4350 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2350 = (((_2411 * cbLight._m0[_2360].x) * _2424) * _2425) + _2292;
        _2352 = (((_2411 * cbLight._m0[_2360].y) * _2424) * _2425) + _2293;
        _2354 = (((_2411 * cbLight._m0[_2360].z) * _2424) * _2425) + _2294;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2078)
    {
        _2456 = _2350;
        _2458 = _2352;
        _2460 = _2354;
    }
    else
    {
        uint _2467 = _1893 + 3u;
        uint _2471 = _1893 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _395) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _472;
        float _2488 = cbLight._m0[_2467].y + _473;
        float _2489 = cbLight._m0[_2467].z + _474;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2467].xyz));
        float _4366 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2501 = dot(vec3(_392, _393, _394), vec3(_2494, _2495, _2496));
        float _4377 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4388 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2169 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2523) + _2486) * _2500))) * _2500;
        float _4399 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2456 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2350;
        _2458 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2352;
        _2460 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2354;
    }
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_1891.y == 0u)
    {
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2558)));
        float _2579 = (log2(_1669 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
        }
        else
        {
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            uint _2826 = 0u;
            uint _2835;
            bool _2836;
            for (;;)
            {
                _2835 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                _2836 = _2835 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2836)
                {
                    frontier_phi_73_pred = _2825;
                    frontier_phi_73_pred_1 = _2824;
                    frontier_phi_73_pred_2 = _2823;
                    frontier_phi_73_pred_3 = _2822;
                    frontier_phi_73_pred_4 = _2821;
                    frontier_phi_73_pred_5 = _2820;
                }
                else
                {
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    uint _2971;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2835;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    for (;;)
                    {
                        uint _2975 = uint(findLSB(_2971)) + (_2826 << 5u);
                        uint _2972 = (_2971 + 4294967295u) & _2971;
                        uint _2977 = _2975 * 48u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 3u)).x));
                        uint _2997 = (_2975 * 48u) + 4u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 3u)).x));
                        uint _3016 = (_2975 * 48u) + 8u;
                        vec3 _3027 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x));
                        float _3031 = _2991.x - _1667;
                        float _3032 = _2991.y - _1668;
                        float _3033 = _2991.z - _1669;
                        float _3034 = dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033));
                        float _3037 = inversesqrt(_3034);
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3041 = dot(vec3(_514, _517, _520), vec3(_3038, _3039, _3040));
                        float _3046 = 1.0 - (_3034 * _2991.w);
                        float _4425 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3047 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3048 = sqrt(_3034) * _3010.w;
                        float _3051 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _3041) + _3052;
                        float _3058 = _3048 * _3048;
                        float _3062 = ((isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))) * _3047) / ((_3058 * 0.699999988079071044921875) + 1.0);
                        float _3066 = (-0.0) - _1667;
                        float _3067 = (-0.0) - _1668;
                        float _3068 = (-0.0) - _1669;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3082 = exp2(log2(1.0 / ((_3058 * 3.5) + 5.0)) * 0.25);
                        float _3083 = 1.0 - _574;
                        float _3090 = sqrt(1.0 - ((1.0 - (_3083 * _3083)) * (1.0 - (_3082 * _3082))));
                        float _3091 = _3090 * _3090;
                        float _3092 = _3091 * _3091;
                        float _3093 = _3073 + _3038;
                        float _3094 = _3074 + _3039;
                        float _3095 = _3075 + _3040;
                        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                        float _3103 = dot(vec3(_514, _517, _520), vec3(_3073, _3074, _3075));
                        float _4441 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3106 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3107 = dot(vec3(_514, _517, _520), vec3(_3099 * _3093, _3099 * _3094, _3099 * _3095));
                        float _4452 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3110 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3114 = ((_3110 * _3110) * (_3092 + (-1.0))) + 1.0;
                        float _3115 = _3051 * _3091;
                        float _3116 = _3115 * _3115;
                        float _3119 = ((1.0 - _3116) * _3041) + _3116;
                        float _4463 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3120 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3121 = 1.0 - _3091;
                        float _3131 = (0.5 / (((_3120 * ((_3106 * _3121) + _3091)) + 9.9999999392252902907785028219223e-09) + (((_3120 * _3121) + _3091) * _3106))) * _3120;
                        float _4474 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3142 = (((_3092 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3114 * _3114) * ((_3058 * 2.1991131305694580078125) + 3.141590118408203125))) * _3047;
                        _2895 = (_3062 * _3010.x) + _2968;
                        _2896 = (_3062 * _3010.y) + _2969;
                        _2897 = (_3062 * _3010.z) + _2970;
                        _2892 = (_3142 * _3027.x) + _2965;
                        _2893 = (_3142 * _3027.y) + _2966;
                        _2894 = (_3142 * _3027.z) + _2967;
                        if (_2972 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2972;
                        }
                    }
                    frontier_phi_73_pred = _2897;
                    frontier_phi_73_pred_1 = _2896;
                    frontier_phi_73_pred_2 = _2895;
                    frontier_phi_73_pred_3 = _2894;
                    frontier_phi_73_pred_4 = _2893;
                    frontier_phi_73_pred_5 = _2892;
                }
                _2679 = frontier_phi_73_pred;
                _2677 = frontier_phi_73_pred_1;
                _2675 = frontier_phi_73_pred_2;
                _2673 = frontier_phi_73_pred_3;
                _2671 = frontier_phi_73_pred_4;
                _2669 = frontier_phi_73_pred_5;
                uint _2827 = _2826 + 1u;
                if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2820 = _2669;
                    _2821 = _2671;
                    _2822 = _2673;
                    _2823 = _2675;
                    _2824 = _2677;
                    _2825 = _2679;
                    _2826 = _2827;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
        }
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.z;
        uint _2685 = (_2683 >> 8u) & 15u;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((4294967295u << _2685) & _2589) == 0u)
        {
            _2788 = _2668;
            _2790 = _2670;
            _2792 = _2672;
            _2794 = _2674;
            _2796 = _2676;
            _2798 = _2678;
        }
        else
        {
            float _2813 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
            float _2814 = _2813 * _1667;
            float _2815 = _2813 * _1668;
            float _2816 = _2813 * _1669;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2685 < ((_2683 >> 12u) & 15u))
            {
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2948 = _2668;
                float _2949 = _2670;
                float _2950 = _2672;
                float _2951 = _2674;
                float _2952 = _2676;
                float _2953 = _2678;
                uint _2954 = _2685;
                uint _2963;
                bool _2964;
                for (;;)
                {
                    _2963 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2954 << 2u)) >> 2u)).x;
                    _2964 = _2963 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2964)
                    {
                        frontier_phi_84_pred = _2952;
                        frontier_phi_84_pred_1 = _2951;
                        frontier_phi_84_pred_2 = _2950;
                        frontier_phi_84_pred_3 = _2949;
                        frontier_phi_84_pred_4 = _2948;
                        frontier_phi_84_pred_5 = _2953;
                    }
                    else
                    {
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3169 = _2948;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        float _3173 = _2952;
                        float _3174 = _2953;
                        uint _3175 = _2963;
                        uint _3176;
                        vec4 _3201;
                        float _3202;
                        vec4 _3217;
                        vec3 _3229;
                        vec4 _3245;
                        vec4 _3261;
                        float _3308;
                        bool _3309;
                        for (;;)
                        {
                            uint _3186 = ((_2954 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3175));
                            _3176 = (_3175 + 4294967295u) & _3175;
                            uint _3188 = _3186 * 40u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3202 = _3201.w;
                            uint _3204 = (_3186 * 40u) + 4u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3186 * 40u) + 8u;
                            _3229 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x));
                            uint _3232 = (_3186 * 40u) + 16u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3248 = (_3186 * 40u) + 20u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3186 * 40u) + 24u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3283 = (_3186 * 40u) + 28u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3308 = fma(_1669, _3296.z, fma(_1668, _3296.y, _3296.x * _1667)) + _3296.w;
                            _3309 = !((fma(_1669, _3277.z, fma(_1668, _3277.y, _3277.x * _1667)) + _3277.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3309)
                            {
                                float _3336 = _3201.x - _1667;
                                float _3337 = _3201.y - _1668;
                                float _3338 = _3201.z - _1669;
                                float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                                float _3342 = inversesqrt(_3339);
                                float _3343 = _3342 * _3336;
                                float _3344 = _3342 * _3337;
                                float _3345 = _3342 * _3338;
                                float _3349 = 1.0 - (_3339 / (_3202 * _3202));
                                float _4485 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3354 = sqrt(_3339) * _3217.w;
                                float _3356 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                                float _3357 = _3356 * _3356;
                                float _3360 = ((1.0 - _3357) * dot(vec3(_3343, _3344, _3345), vec3(_514, _517, _520))) + _3357;
                                float _3363 = _3354 * _3354;
                                float _3367 = (fma(_1669, _3245.z, fma(_1668, _3245.y, _3245.x * _1667)) + _3245.w) / _3308;
                                float _3368 = (fma(_1669, _3261.z, fma(_1668, _3261.y, _3261.x * _1667)) + _3261.w) / _3308;
                                float _3372 = 1.0 - dot(vec2(_3367, _3368), vec2(_3367, _3368));
                                float _4501 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3374 = _3373 * (((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3350) / ((_3363 * 0.699999988079071044921875) + 1.0));
                                float _3386 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                                float _3387 = 1.0 - _574;
                                float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                                float _3395 = _3394 * _3394;
                                float _3396 = _3395 * _3395;
                                float _3397 = _3343 - _2814;
                                float _3398 = _3344 - _2815;
                                float _3399 = _3345 - _2816;
                                float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                                float _3407 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2814, (-0.0) - _2815, (-0.0) - _2816));
                                float _4512 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3411 = dot(vec3(_514, _517, _520), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                                float _4523 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                                float _3419 = _3356 * _3395;
                                float _3420 = _3419 * _3419;
                                float _3426 = ((1.0 - _3420) * dot(vec3(_514, _517, _520), vec3(_3343, _3344, _3345))) + _3420;
                                float _4534 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3428 = 1.0 - _3395;
                                float _3438 = (0.5 / (((_3427 * ((_3410 * _3428) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3395) * _3410))) * _3427;
                                float _4545 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3448 = (_3373 * _3350) * (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3418 * _3418) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3374 * _3217.y;
                                frontier_phi_90_pred_1 = _3374 * _3217.x;
                                frontier_phi_90_pred_2 = _3448 * _3229.z;
                                frontier_phi_90_pred_3 = _3448 * _3229.y;
                                frontier_phi_90_pred_4 = _3448 * _3229.x;
                                frontier_phi_90_pred_5 = _3374 * _3217.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3456 = frontier_phi_90_pred;
                            _3455 = frontier_phi_90_pred_1;
                            _3454 = frontier_phi_90_pred_2;
                            _3453 = frontier_phi_90_pred_3;
                            _3452 = frontier_phi_90_pred_4;
                            _3457 = frontier_phi_90_pred_5;
                            _3159 = _3455 + _3172;
                            _3160 = _3456 + _3173;
                            _3161 = _3457 + _3174;
                            _3156 = _3452 + _3169;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            if (_3176 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3176;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3160;
                        frontier_phi_84_pred_1 = _3159;
                        frontier_phi_84_pred_2 = _3158;
                        frontier_phi_84_pred_3 = _3157;
                        frontier_phi_84_pred_4 = _3156;
                        frontier_phi_84_pred_5 = _3161;
                    }
                    _2797 = frontier_phi_84_pred;
                    _2795 = frontier_phi_84_pred_1;
                    _2793 = frontier_phi_84_pred_2;
                    _2791 = frontier_phi_84_pred_3;
                    _2789 = frontier_phi_84_pred_4;
                    _2799 = frontier_phi_84_pred_5;
                    uint _2955 = _2954 + 1u;
                    if (_2955 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2948 = _2789;
                        _2949 = _2791;
                        _2950 = _2793;
                        _2951 = _2795;
                        _2952 = _2797;
                        _2953 = _2799;
                        _2954 = _2955;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2799;
                frontier_phi_65_66_ladder_1 = _2795;
                frontier_phi_65_66_ladder_2 = _2797;
                frontier_phi_65_66_ladder_3 = _2791;
                frontier_phi_65_66_ladder_4 = _2789;
                frontier_phi_65_66_ladder_5 = _2793;
            }
            else
            {
                frontier_phi_65_66_ladder = _2678;
                frontier_phi_65_66_ladder_1 = _2674;
                frontier_phi_65_66_ladder_2 = _2676;
                frontier_phi_65_66_ladder_3 = _2670;
                frontier_phi_65_66_ladder_4 = _2668;
                frontier_phi_65_66_ladder_5 = _2672;
            }
            _2788 = frontier_phi_65_66_ladder_4;
            _2790 = frontier_phi_65_66_ladder_3;
            _2792 = frontier_phi_65_66_ladder_5;
            _2794 = frontier_phi_65_66_ladder_1;
            _2796 = frontier_phi_65_66_ladder_2;
            _2798 = frontier_phi_65_66_ladder;
        }
        float _2803 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
        _2601 = (_2803 * _2794) + _2133;
        _2603 = (_2803 * _2796) + _2135;
        _2605 = (_2803 * _2798) + _2137;
        _2607 = ((_2788 * 0.039999999105930328369140625) * _2803) + _2456;
        _2609 = ((_2790 * 0.039999999105930328369140625) * _2803) + _2458;
        _2611 = ((_2792 * 0.039999999105930328369140625) * _2803) + _2460;
    }
    else
    {
        _2601 = _2133;
        _2603 = _2135;
        _2605 = _2137;
        _2607 = _2456;
        _2609 = _2458;
        _2611 = _2460;
    }
    float _4561 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4572 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4583 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _2628 = ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2601 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _558))) + ((_2607 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2629 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2603 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _558))) + ((_2609 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2605 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _558))) + ((_2611 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    uint _2631 = _533 + 6u;
    float _2639 = _493 / cbSceneParam._m0[86u].x;
    float _2640 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2654 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, (log2((isnan(cbSceneParam._m0[77u].w) ? _414 : (isnan(_414) ? cbSceneParam._m0[77u].w : min(_414, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2656 = _2654.x;
    float _2657 = _2654.y;
    float _2658 = _2654.z;
    float _2659 = _2654.w;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_414 > cbSceneParam._m0[78u].w)
    {
        float _2693 = isnan(_414) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _414 : min(cbSceneParam._m0[80u].w, _414));
        float _2694 = _2693 / _414;
        float _2705 = _2694 * _465;
        float _2706 = _466 * _2694;
        float _2707 = (-0.0) - _2706;
        float _2708 = _2694 * _467;
        float _2710 = (cbSceneParam._m0[77u].w * _2707) / _2693;
        float _2711 = _2710 + cbSceneParam._m0[79u].w;
        float _2712 = cbSceneParam._m0[79u].w - _2706;
        float _2718 = sqrt(((_2705 * _2705) + (_2706 * _2706)) + (_2708 * _2708));
        float _2721 = (1.0 - (cbSceneParam._m0[77u].w / _2693)) * _2718;
        float _2726 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2728 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2905;
        if (abs((_2707 - _2710) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2905 = ((((_2711 > 0.0) ? exp2(_2726 * _2711) : (2.0 - exp2(_2728 * _2711))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2721;
        }
        else
        {
            float _2849 = 1.0 / cbSceneParam._m0[80u].x;
            float _2850 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : max(_2711, _2712));
            float _2851 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : min(_2711, _2712));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            _2905 = ((abs(_2718 / _2707) * cbSceneParam._m0[80u].y) * ((((_2860 - _2861) * 2.0) - ((exp2(_2726 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)))) - exp2(_2726 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))))) * _2849)) - ((exp2(_2728 * _2860) - exp2(_2728 * _2861)) * _2849))) + (_2721 * cbSceneParam._m0[80u].z);
        }
        vec4 _2907 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, 1.0), 0.0);
        float _2916 = exp2((_2905 * (-1.44269502162933349609375)) * (1.0 - _2907.w));
        float _2917 = log2(_2916);
        float _2933 = log2(_2659);
        _2730 = (exp2(_2933 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].x)) * _2907.x) / cbSceneParam._m0[78u].x)) + _2656;
        _2732 = (exp2(_2933 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].y)) * _2907.y) / cbSceneParam._m0[78u].y)) + _2657;
        _2734 = (exp2(_2933 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].z)) * _2907.z) / cbSceneParam._m0[78u].z)) + _2658;
        _2736 = _2916 * _2659;
    }
    else
    {
        _2730 = _2656;
        _2732 = _2657;
        _2734 = _2658;
        _2736 = _2659;
    }
    bool _2943;
    vec4 _2746;
    vec4 _2768;
    float _2770;
    float _2774;
    float _2775;
    float _2776;
    float _2777;
    bool _2787;
    for (;;)
    {
        _2746 = cbMatDynParam._m0[0u];
        float _2748 = roundEven(_2746.y);
        bool _2749 = _2748 == 3.0;
        float _2750 = log2(_2736);
        float _2757 = exp2(_2750 * cbSceneParam._m0[78u].x) * _2628;
        float _2758 = exp2(_2750 * cbSceneParam._m0[78u].y) * _2629;
        float _2759 = exp2(_2750 * cbSceneParam._m0[78u].z) * _2630;
        float _2766 = _481 + (-0.5);
        _2768 = cbMtdParam._m0[1u];
        _2770 = _2768.y * _2766;
        float _2773 = (_2748 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2774 = _2773 * (_2749 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2730)));
        _2775 = _2773 * (_2749 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2732)));
        _2776 = _2773 * (_2749 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2734)));
        _2777 = _2766 * 0.999000012874603271484375;
        _2787 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2787)
        {
            if ((cbInstanceData._m0[_533 + 7u].x + _2777) < 0.5)
            {
                _2943 = true;
                break;
            }
        }
        uint _2884 = _534 + uint(_2746.w);
        if ((cbInstanceData._m0[_2884].w < 1.0) && ((cbInstanceData._m0[_2884].w + _2777) < 0.5))
        {
            _2943 = true;
            break;
        }
        if ((_2770 + 1.0) < _2768.x)
        {
            _2943 = true;
            break;
        }
        _2943 = false;
        break;
    }
    float _3147;
    if (_2943)
    {
        discard_state = true;
        _3147 = 0.0;
    }
    else
    {
        _3147 = cbInstanceData._m0[_2631].w;
    }
    SV_Target.x = _2774;
    SV_Target.y = _2775;
    SV_Target.z = _2776;
    SV_Target.w = _3147;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2631].w;
    discard_exit();
}


