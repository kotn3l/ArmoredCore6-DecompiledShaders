#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1061;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _246.x;
    float _250 = _246.y;
    float _251 = _246.z;
    vec4 _283 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _296 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3396 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _306 = ((_283.z - _251) * _297) + _251;
    float _310 = ((((_283.x - _249) * _297) + _249) * 2.0) + (-1.0);
    float _312 = ((((_283.y - _250) * _297) + _250) * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3407 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))));
    float _321 = fma(_318, _230, fma(_312, _223, _310 * _209));
    float _324 = fma(_318, _231, fma(_312, _224, _310 * _210));
    float _327 = fma(_318, _232, fma(_312, _225, _310 * _211));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _345 = cbMtdParam._m0[11u].z + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3418 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    vec4 _364 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _369 = _364.x * cbMtdParam._m0[9u].x;
    float _370 = _364.y * cbMtdParam._m0[9u].y;
    float _371 = _364.z * cbMtdParam._m0[9u].z;
    vec4 _390 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _404 = (((_390.x * cbMtdParam._m0[10u].x) - _369) * _297) + _369;
    float _405 = (((_390.y * cbMtdParam._m0[10u].y) - _370) * _297) + _370;
    float _406 = (((_390.z * cbMtdParam._m0[10u].z) - _371) * _297) + _371;
    vec4 _419 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _430 = ((_419.x - _404) * _346) + _404;
    float _431 = ((_419.y - _405) * _346) + _405;
    float _432 = ((_419.z - _406) * _346) + _406;
    vec4 _445 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _447 = _445.x;
    float _465 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _447) * _297) + _447;
    float _467 = _465 - (_465 * _346);
    vec4 _480 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _487 = (_480.x * 2.0) + (-1.0);
    float _488 = (_480.y * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _3429 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _497 = ((_480.z - _306) * _346) + _306;
    float _504 = ((_487 - _310) * _346) + _310;
    float _505 = ((_488 - _312) * _346) + _312;
    float _506 = ((sqrt(1.0 - (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) - _318) * _346) + _318;
    float _509 = fma(_506, _230, fma(_505, _223, _504 * _209));
    float _512 = fma(_506, _231, fma(_505, _224, _504 * _210));
    float _515 = fma(_506, _232, fma(_505, _225, _504 * _211));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3440 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _523 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3462 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3473 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3484 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _527 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _593 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _583);
    float _594 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _583);
    float _595 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _583);
    float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
    float _600 = _593 * _599;
    float _601 = _594 * _599;
    float _602 = _595 * _599;
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _627 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _630 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _633 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _646 = uint(roundEven(NORMAL.w)) * 13u;
    uint _648 = (_646 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _654 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_648].x;
    float _655 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_648].y;
    float _656 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_648].z;
    float _3495 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _660 = 1.0 - _527;
    float _661 = _657 * _660;
    float _662 = _658 * _660;
    float _663 = _659 * _660;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _527;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _527;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _527;
    float _671 = _668 + 0.039999999105930328369140625;
    float _673 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _686 = _683.x * TEXCOORD_9.w;
    float _687 = dot(vec3(_520, _521, _522), vec3(_600, _601, _602));
    float _690 = _687 * 2.0;
    float _694 = (_690 * _520) - _600;
    float _695 = (_690 * _521) - _601;
    float _696 = (_690 * _522) - _602;
    float _700 = abs(dot(vec3(_600, _601, _602), vec3(_520, _521, _522)));
    float _3528 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _702 = sqrt(_523);
    float _715 = exp2((_702 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_702 * 3.0));
    float _721 = (1.0 - _715) * ((_702 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _722 = _715 * _702;
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _789 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _793 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _818 = _750 + _520;
        float _819 = _754 + _521;
        float _820 = _758 + _522;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _785;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _789;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _793;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_520, _521, _522), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3576 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_520, _521, _522), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3609 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_520, _521, _522), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3642 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1105 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1109 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1132 = _750 + _520;
        float _1133 = _754 + _521;
        float _1134 = _758 + _522;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_520, _521, _522), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3705 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_520, _521, _522), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3738 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_520, _521, _522), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3771 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1061;
        _1371 = _1061;
        _1372 = _1061;
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = _1061;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1074)) + _1074;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _694 * 0.5;
    float _1439 = _695 * 0.5;
    float _1440 = _696 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _523);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_696, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694));
        float _1570 = fma(_696, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694));
        float _1573 = fma(_696, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1601 = frontier_phi_16_14_ladder;
        }
        float _1807;
        if (_1570 > 0.0)
        {
            _1807 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1807 = frontier_phi_25_21_ladder;
        }
        float _2061;
        if (_1573 > 0.0)
        {
            _2061 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2061 = frontier_phi_37_32_ladder;
        }
        float _2063 = isnan(_1807) ? _1601 : (isnan(_1601) ? _1807 : min(_1601, _1807));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1567) + _1556;
        float _2069 = (_2064 * _1570) + _1560;
        float _2070 = (_2064 * _1573) + _1564;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2073 = (-1.0) - _2071;
        float _2075 = _2071 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2070 > _2075) || ((_2070 < _2073) || ((_2069 > _2075) || ((_2069 < _2073) || ((_2068 < _2073) || (_2068 > _2075))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2070, cbModelParam._m0[9u].z, fma(_2069, cbModelParam._m0[9u].y, _2068 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2070, cbModelParam._m0[10u].z, fma(_2069, cbModelParam._m0[10u].y, _2068 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2070, cbModelParam._m0[11u].z, fma(_2069, cbModelParam._m0[11u].y, _2068 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_15_37_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_15_37_ladder_2;
        _1591 = frontier_phi_15_37_ladder_1;
        _1593 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_694, _695, _696), _1507);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _523);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1655 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1659 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1663 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1666 = fma(_696, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694));
        float _1669 = fma(_696, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694));
        float _1672 = fma(_696, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694));
        float _1812;
        if (_1666 > 0.0)
        {
            _1812 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1812 = frontier_phi_27_23_ladder;
        }
        float _2088;
        if (_1669 > 0.0)
        {
            _2088 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2088 = frontier_phi_39_34_ladder;
        }
        float _2301;
        if (_1672 > 0.0)
        {
            _2301 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2301 = frontier_phi_48_45_ladder;
        }
        float _2303 = isnan(_2088) ? _1812 : (isnan(_1812) ? _2088 : min(_1812, _2088));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1666) + _1655;
        float _2309 = (_2304 * _1669) + _1659;
        float _2310 = (_2304 * _1672) + _1663;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2311;
        float _2314 = _2311 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2310 > _2314) || ((_2310 < _2312) || ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 < _2312) || (_2308 > _2314))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2310, cbModelParam._m0[17u].z, fma(_2309, cbModelParam._m0[17u].y, _2308 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2310, cbModelParam._m0[18u].z, fma(_2309, cbModelParam._m0[18u].y, _2308 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2310, cbModelParam._m0[19u].z, fma(_2309, cbModelParam._m0[19u].y, _2308 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_24_48_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1691 = frontier_phi_24_48_ladder_2;
        _1693 = frontier_phi_24_48_ladder_1;
        _1695 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_694, _695, _696), _1598);
        _1691 = _1675.x * cbModelParam._m0[1u].z;
        _1693 = _1675.y * cbModelParam._m0[1u].z;
        _1695 = _1675.z * cbModelParam._m0[1u].z;
    }
    float _1708 = (((_721 * _671) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1691 - _1589)) + _1589);
    float _1710 = (((_721 * _673) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1693 - _1591)) + _1591);
    float _1712 = (((_721 * _674) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1695 - _1593)) + _1593);
    float _1715 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, _1708 * cbSceneParam._m0[91u].x));
    uvec4 _1731 = floatBitsToUint(cbInstanceData._m0[_646 + 5u]);
    uint _1733 = _1731.x * 14u;
    uint _1734 = _1733 + 13u;
    float _1741 = _686 + (-1.0);
    float _1746 = (cbLight._m0[_1734].x * _1741) + 1.0;
    float _1747 = (cbLight._m0[_1734].y * _1741) + 1.0;
    float _1748 = (cbLight._m0[_1734].z * _1741) + 1.0;
    float _1749 = (cbLight._m0[_1734].w * _1741) + 1.0;
    uint _1750 = _1733 + 5u;
    float _1756 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1760 = _1733 + 4u;
    float _1766 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1770 = _1733 | 1u;
    float _1781 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_520, _521, _522));
    float _1784 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_520, _521, _522));
    float _3907 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _3918 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1789 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.3183098733425140380859375;
    float _1791 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _1798 = ((cbLight._m0[_1750].x * _1756) * _1791) + ((cbLight._m0[_1760].x * _1766) * _1789);
    float _1799 = ((_1756 * cbLight._m0[_1750].y) * _1791) + ((_1766 * cbLight._m0[_1760].y) * _1789);
    float _1800 = ((_1756 * cbLight._m0[_1750].z) * _1791) + ((_1766 * cbLight._m0[_1760].z) * _1789);
    uvec4 _1804 = floatBitsToUint(cbLight._m0[_1733 + 12u]);
    bool _1806 = _1804.x == 0u;
    float _1817;
    float _1819;
    float _1821;
    if (_1806)
    {
        _1817 = _1798;
        _1819 = _1799;
        _1821 = _1800;
    }
    else
    {
        uint _1825 = _1733 + 6u;
        float _1841 = (dot(vec3(cbLight._m0[_1733 + 2u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _1842 = _1841 * _1841;
        float _3929 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1844 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1817 = (((cbLight._m0[_1825].x * 0.3183098733425140380859375) * _1843) * _1844) + _1798;
        _1819 = (((cbLight._m0[_1825].y * 0.3183098733425140380859375) * _1843) * _1844) + _1799;
        _1821 = (((cbLight._m0[_1825].z * 0.3183098733425140380859375) * _1843) * _1844) + _1800;
    }
    bool _1824 = _1804.y == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1824)
    {
        _1862 = _1817;
        _1864 = _1819;
        _1866 = _1821;
    }
    else
    {
        uint _2032 = _1733 + 7u;
        float _2048 = (dot(vec3(cbLight._m0[_1733 + 3u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _3945 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _2051 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1862 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _1817;
        _1864 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _1819;
        _1866 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _1821;
    }
    uint _1869 = _1733 + 8u;
    float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1733].w)) * _523) * 0.949999988079071044921875);
    float _1883 = _1882 * _1882;
    float _1884 = cbLight._m0[_1733].x + _600;
    float _1885 = cbLight._m0[_1733].y + _601;
    float _1886 = cbLight._m0[_1733].z + _602;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1891 = _1890 * _1884;
    float _1892 = _1890 * _1885;
    float _1893 = _1890 * _1886;
    float _1894 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1733].xyz));
    float _3961 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _1898 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1899 = dot(vec3(_520, _521, _522), vec3(_1891, _1892, _1893));
    float _3983 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1903 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1891, _1892, _1893));
    float _3994 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1907 = _1883 * _1883;
    float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
    float _1919 = exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0);
    float _1920 = 0.959999978542327880859375 - _668;
    float _1922 = 0.959999978542327880859375 - _669;
    float _1923 = 0.959999978542327880859375 - _670;
    float _1930 = 1.0 - _1883;
    float _1941 = (0.5 / (((_1898 * ((_1897 * _1930) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _1930) + _1883) * _1897))) * _1897;
    float _4005 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
    uint _1954 = _1733 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _523) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1770].x + _600;
    float _1968 = cbLight._m0[_1770].y + _601;
    float _1969 = cbLight._m0[_1770].z + _602;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1770].xyz));
    float _4016 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1981 = dot(vec3(_520, _521, _522), vec3(_1974, _1975, _1976));
    float _4027 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1974, _1975, _1976));
    float _4038 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2000 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
    float _2007 = 1.0 - _1966;
    float _2017 = (0.5 / (((_1898 * ((_1980 * _2007) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2007) + _1966) * _1980))) * _1980;
    float _4049 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2029 = (((((_2000 * _1920) + _671) * cbLight._m0[_1954].x) * _2019) * _1756) + (((((_1919 * _1920) + _671) * cbLight._m0[_1869].x) * _1943) * _1766);
    float _2030 = (((((_2000 * _1922) + _673) * cbLight._m0[_1954].y) * _2019) * _1756) + (((((_1919 * _1922) + _673) * cbLight._m0[_1869].y) * _1943) * _1766);
    float _2031 = (((((_2000 * _1923) + _674) * cbLight._m0[_1954].z) * _2019) * _1756) + (((((_1919 * _1923) + _674) * cbLight._m0[_1869].z) * _1943) * _1766);
    float _2093;
    float _2095;
    float _2097;
    if (_1806)
    {
        _2093 = _2029;
        _2095 = _2030;
        _2097 = _2031;
    }
    else
    {
        uint _2099 = _1733 + 2u;
        uint _2103 = _1733 + 10u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _523) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _600;
        float _2120 = cbLight._m0[_2099].y + _601;
        float _2121 = cbLight._m0[_2099].z + _602;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2099].xyz));
        float _4060 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2133 = dot(vec3(_520, _521, _522), vec3(_2126, _2127, _2128));
        float _4071 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4082 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
        float _2159 = 1.0 - _2118;
        float _2169 = (0.5 / (((_1898 * ((_2132 * _2159) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2159) + _2118) * _2132))) * _2132;
        float _4093 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2171 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2172 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2093 = (((((_2152 * _1920) + _671) * cbLight._m0[_2103].x) * _2171) * _2172) + _2029;
        _2095 = (((((_2152 * _1922) + _673) * cbLight._m0[_2103].y) * _2171) * _2172) + _2030;
        _2097 = (((((_2152 * _1923) + _674) * cbLight._m0[_2103].z) * _2171) * _2172) + _2031;
    }
    float _2207;
    float _2209;
    float _2211;
    if (_1824)
    {
        _2207 = _2093;
        _2209 = _2095;
        _2211 = _2097;
    }
    else
    {
        uint _2218 = _1733 + 3u;
        uint _2222 = _1733 + 11u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _523) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _600;
        float _2239 = cbLight._m0[_2218].y + _601;
        float _2240 = cbLight._m0[_2218].z + _602;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2218].xyz));
        float _4109 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2252 = dot(vec3(_520, _521, _522), vec3(_2245, _2246, _2247));
        float _4120 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4131 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2271 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
        float _2278 = 1.0 - _2237;
        float _2288 = (0.5 / (((_1898 * ((_2251 * _2278) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2278) + _2237) * _2251))) * _2251;
        float _4142 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2290 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2291 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2207 = (((((_2271 * _1920) + _671) * cbLight._m0[_2222].x) * _2290) * _2291) + _2093;
        _2209 = (((((_2271 * _1922) + _673) * cbLight._m0[_2222].y) * _2290) * _2291) + _2095;
        _2211 = (((((_2271 * _1923) + _674) * cbLight._m0[_2222].z) * _2290) * _2291) + _2097;
    }
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_1731.y == 0u)
    {
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2366;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2366;
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2366;
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.x;
        uint _2393 = uint((float(_2381.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2382))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2382)));
        float _2403 = (log2(_2369 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2404 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        uint _2407 = uint(isnan(14.0) ? _2404 : (isnan(_2404) ? 14.0 : min(_2404, 14.0)));
        uvec4 _2412 = texelFetch(g_lightClusterGridBuffer, int(((_2407 << 2u) + (_2393 << 6u)) >> 2u));
        uint _2413 = _2412.x;
        uint _2414 = _2381.z;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((((1u << ((_2414 >> 4u) & 15u)) + 4294967295u) & _2413) == 0u) || ((_2414 & 240u) == 0u))
        {
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
        }
        else
        {
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            uint _2663 = 0u;
            uint _2672;
            bool _2673;
            for (;;)
            {
                _2672 = texelFetch(g_lightClassification, int((((_2407 << 5u) + (_2393 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                _2673 = _2672 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2673)
                {
                    frontier_phi_63_pred = _2662;
                    frontier_phi_63_pred_1 = _2661;
                    frontier_phi_63_pred_2 = _2660;
                    frontier_phi_63_pred_3 = _2659;
                    frontier_phi_63_pred_4 = _2658;
                    frontier_phi_63_pred_5 = _2657;
                }
                else
                {
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    uint _2787;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2672;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    for (;;)
                    {
                        uint _2791 = uint(findLSB(_2787)) + (_2663 << 5u);
                        uint _2788 = (_2787 + 4294967295u) & _2787;
                        uint _2793 = _2791 * 48u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2813 = (_2791 * 48u) + 4u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2832 = (_2791 * 48u) + 8u;
                        vec3 _2843 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x));
                        float _2847 = _2807.x - _2367;
                        float _2848 = _2807.y - _2368;
                        float _2849 = _2807.z - _2369;
                        float _2850 = dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849));
                        float _2853 = inversesqrt(_2850);
                        float _2854 = _2853 * _2847;
                        float _2855 = _2853 * _2848;
                        float _2856 = _2853 * _2849;
                        float _2857 = dot(vec3(_627, _630, _633), vec3(_2854, _2855, _2856));
                        float _2862 = 1.0 - (_2850 * _2807.w);
                        float _4168 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2864 = sqrt(_2850) * _2826.w;
                        float _2867 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2857) + _2868;
                        float _2874 = _2864 * _2864;
                        float _2878 = ((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * _2863) / ((_2874 * 0.699999988079071044921875) + 1.0);
                        float _2882 = (-0.0) - _2367;
                        float _2883 = (-0.0) - _2368;
                        float _2884 = (-0.0) - _2369;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2899 = exp2(log2(1.0 / ((_2874 * 3.5) + 5.0)) * 0.25);
                        float _2900 = 1.0 - _702;
                        float _2907 = sqrt(1.0 - ((1.0 - (_2900 * _2900)) * (1.0 - (_2899 * _2899))));
                        float _2908 = _2907 * _2907;
                        float _2909 = _2908 * _2908;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2920 = dot(vec3(_627, _630, _633), vec3(_2889, _2890, _2891));
                        float _4184 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2924 = dot(vec3(_627, _630, _633), vec3(_2916 * _2910, _2916 * _2911, _2916 * _2912));
                        float _4195 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2927 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2931 = ((_2927 * _2927) * (_2909 + (-1.0))) + 1.0;
                        float _2932 = _2867 * _2908;
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2857) + _2933;
                        float _4206 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2938 = 1.0 - _2908;
                        float _2948 = (0.5 / (((_2937 * ((_2923 * _2938) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2937 * _2938) + _2908) * _2923))) * _2937;
                        float _4217 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2959 = (((_2909 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_2931 * _2931) * ((_2874 * 2.1991131305694580078125) + 3.141590118408203125))) * _2863;
                        _2716 = (_2878 * _2826.x) + _2784;
                        _2717 = (_2878 * _2826.y) + _2785;
                        _2718 = (_2878 * _2826.z) + _2786;
                        _2713 = (_2959 * _2843.x) + _2781;
                        _2714 = (_2959 * _2843.y) + _2782;
                        _2715 = (_2959 * _2843.z) + _2783;
                        if (_2788 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2788;
                        }
                    }
                    frontier_phi_63_pred = _2718;
                    frontier_phi_63_pred_1 = _2717;
                    frontier_phi_63_pred_2 = _2716;
                    frontier_phi_63_pred_3 = _2715;
                    frontier_phi_63_pred_4 = _2714;
                    frontier_phi_63_pred_5 = _2713;
                }
                _2524 = frontier_phi_63_pred;
                _2522 = frontier_phi_63_pred_1;
                _2520 = frontier_phi_63_pred_2;
                _2518 = frontier_phi_63_pred_3;
                _2516 = frontier_phi_63_pred_4;
                _2514 = frontier_phi_63_pred_5;
                uint _2664 = _2663 + 1u;
                if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2657 = _2514;
                    _2658 = _2516;
                    _2659 = _2518;
                    _2660 = _2520;
                    _2661 = _2522;
                    _2662 = _2524;
                    _2663 = _2664;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
        }
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.z;
        uint _2530 = (_2528 >> 8u) & 15u;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((4294967295u << _2530) & _2413) == 0u)
        {
            _2625 = _2513;
            _2627 = _2515;
            _2629 = _2517;
            _2631 = _2519;
            _2633 = _2521;
            _2635 = _2523;
        }
        else
        {
            float _2650 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
            float _2651 = _2650 * _2367;
            float _2652 = _2650 * _2368;
            float _2653 = _2650 * _2369;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2530 < ((_2528 >> 12u) & 15u))
            {
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2764 = _2513;
                float _2765 = _2515;
                float _2766 = _2517;
                float _2767 = _2519;
                float _2768 = _2521;
                float _2769 = _2523;
                uint _2770 = _2530;
                uint _2779;
                bool _2780;
                for (;;)
                {
                    _2779 = texelFetch(g_lightClassification, int((((_2407 << 5u) + (_2393 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                    _2780 = _2779 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2780)
                    {
                        frontier_phi_69_pred = _2769;
                        frontier_phi_69_pred_1 = _2768;
                        frontier_phi_69_pred_2 = _2767;
                        frontier_phi_69_pred_3 = _2766;
                        frontier_phi_69_pred_4 = _2765;
                        frontier_phi_69_pred_5 = _2764;
                    }
                    else
                    {
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        uint _2983 = _2779;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        vec3 _3037;
                        vec4 _3053;
                        vec4 _3069;
                        float _3116;
                        bool _3117;
                        for (;;)
                        {
                            uint _2994 = ((_2770 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2994 * 40u) + 8u;
                            _3037 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x));
                            uint _3040 = (_2994 * 40u) + 16u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3056 = (_2994 * 40u) + 20u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_2994 * 40u) + 24u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3091 = (_2994 * 40u) + 28u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3116 = fma(_2369, _3104.z, fma(_2368, _3104.y, _3104.x * _2367)) + _3104.w;
                            _3117 = !((fma(_2369, _3085.z, fma(_2368, _3085.y, _3085.x * _2367)) + _3085.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3117)
                            {
                                float _3144 = _3009.x - _2367;
                                float _3145 = _3009.y - _2368;
                                float _3146 = _3009.z - _2369;
                                float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                                float _3150 = inversesqrt(_3147);
                                float _3151 = _3150 * _3144;
                                float _3152 = _3150 * _3145;
                                float _3153 = _3150 * _3146;
                                float _3157 = 1.0 - (_3147 / (_3010 * _3010));
                                float _4228 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3162 = sqrt(_3147) * _3025.w;
                                float _3164 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                                float _3165 = _3164 * _3164;
                                float _3168 = ((1.0 - _3165) * dot(vec3(_3151, _3152, _3153), vec3(_627, _630, _633))) + _3165;
                                float _3171 = _3162 * _3162;
                                float _3175 = (fma(_2369, _3053.z, fma(_2368, _3053.y, _3053.x * _2367)) + _3053.w) / _3116;
                                float _3176 = (fma(_2369, _3069.z, fma(_2368, _3069.y, _3069.x * _2367)) + _3069.w) / _3116;
                                float _3180 = 1.0 - dot(vec2(_3175, _3176), vec2(_3175, _3176));
                                float _4244 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3182 = _3181 * (((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3158) / ((_3171 * 0.699999988079071044921875) + 1.0));
                                float _3194 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                                float _3195 = 1.0 - _702;
                                float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                                float _3203 = _3202 * _3202;
                                float _3204 = _3203 * _3203;
                                float _3205 = _3151 - _2651;
                                float _3206 = _3152 - _2652;
                                float _3207 = _3153 - _2653;
                                float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                                float _3215 = dot(vec3(_627, _630, _633), vec3((-0.0) - _2651, (-0.0) - _2652, (-0.0) - _2653));
                                float _4255 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3219 = dot(vec3(_627, _630, _633), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                                float _4266 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                                float _3227 = _3164 * _3203;
                                float _3228 = _3227 * _3227;
                                float _3234 = ((1.0 - _3228) * dot(vec3(_627, _630, _633), vec3(_3151, _3152, _3153))) + _3228;
                                float _4277 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3236 = 1.0 - _3203;
                                float _3246 = (0.5 / (((_3235 * ((_3218 * _3236) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3203) * _3218))) * _3235;
                                float _4288 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3256 = (_3181 * _3158) * (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_3226 * _3226) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3182 * _3025.z;
                                frontier_phi_75_pred_1 = _3182 * _3025.y;
                                frontier_phi_75_pred_2 = _3182 * _3025.x;
                                frontier_phi_75_pred_3 = _3256 * _3037.z;
                                frontier_phi_75_pred_4 = _3256 * _3037.y;
                                frontier_phi_75_pred_5 = _3256 * _3037.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3265 = frontier_phi_75_pred;
                            _3264 = frontier_phi_75_pred_1;
                            _3263 = frontier_phi_75_pred_2;
                            _3262 = frontier_phi_75_pred_3;
                            _3261 = frontier_phi_75_pred_4;
                            _3260 = frontier_phi_75_pred_5;
                            _2967 = _3263 + _2980;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2969;
                        frontier_phi_69_pred_1 = _2968;
                        frontier_phi_69_pred_2 = _2967;
                        frontier_phi_69_pred_3 = _2966;
                        frontier_phi_69_pred_4 = _2965;
                        frontier_phi_69_pred_5 = _2964;
                    }
                    _2636 = frontier_phi_69_pred;
                    _2634 = frontier_phi_69_pred_1;
                    _2632 = frontier_phi_69_pred_2;
                    _2630 = frontier_phi_69_pred_3;
                    _2628 = frontier_phi_69_pred_4;
                    _2626 = frontier_phi_69_pred_5;
                    uint _2771 = _2770 + 1u;
                    if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2764 = _2626;
                        _2765 = _2628;
                        _2766 = _2630;
                        _2767 = _2632;
                        _2768 = _2634;
                        _2769 = _2636;
                        _2770 = _2771;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2636;
                frontier_phi_57_58_ladder_1 = _2634;
                frontier_phi_57_58_ladder_2 = _2632;
                frontier_phi_57_58_ladder_3 = _2630;
                frontier_phi_57_58_ladder_4 = _2628;
                frontier_phi_57_58_ladder_5 = _2626;
            }
            else
            {
                frontier_phi_57_58_ladder = _2523;
                frontier_phi_57_58_ladder_1 = _2521;
                frontier_phi_57_58_ladder_2 = _2519;
                frontier_phi_57_58_ladder_3 = _2517;
                frontier_phi_57_58_ladder_4 = _2515;
                frontier_phi_57_58_ladder_5 = _2513;
            }
            _2625 = frontier_phi_57_58_ladder_5;
            _2627 = frontier_phi_57_58_ladder_4;
            _2629 = frontier_phi_57_58_ladder_3;
            _2631 = frontier_phi_57_58_ladder_2;
            _2633 = frontier_phi_57_58_ladder_1;
            _2635 = frontier_phi_57_58_ladder;
        }
        float _2640 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _2425 = (_2640 * _2631) + _1862;
        _2427 = (_2640 * _2633) + _1864;
        _2429 = (_2640 * _2635) + _1866;
        _2431 = ((_2625 * _671) * _2640) + _2207;
        _2433 = ((_2627 * _673) * _2640) + _2209;
        _2435 = ((_2629 * _674) * _2640) + _2211;
    }
    else
    {
        _2425 = _1862;
        _2427 = _1864;
        _2429 = _1866;
        _2431 = _2207;
        _2433 = _2209;
        _2435 = _2211;
    }
    float _4304 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4315 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4326 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    uint _2455 = _646 + 6u;
    float _2463 = _608 / cbSceneParam._m0[86u].x;
    float _2464 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2478 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2480 = _2478.x;
    float _2481 = _2478.y;
    float _2482 = _2478.z;
    float _2483 = _2478.w;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2538 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2539 = _2538 / _543;
        float _2550 = _2539 * _593;
        float _2551 = _594 * _2539;
        float _2552 = (-0.0) - _2551;
        float _2553 = _2539 * _595;
        float _2555 = (cbSceneParam._m0[77u].w * _2552) / _2538;
        float _2556 = _2555 + cbSceneParam._m0[79u].w;
        float _2557 = cbSceneParam._m0[79u].w - _2551;
        float _2563 = sqrt(((_2550 * _2550) + (_2551 * _2551)) + (_2553 * _2553));
        float _2566 = (1.0 - (cbSceneParam._m0[77u].w / _2538)) * _2563;
        float _2571 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2573 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2726;
        if (abs((_2552 - _2555) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2726 = ((((_2556 > 0.0) ? exp2(_2571 * _2556) : (2.0 - exp2(_2573 * _2556))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2566;
        }
        else
        {
            float _2686 = 1.0 / cbSceneParam._m0[80u].x;
            float _2687 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : max(_2556, _2557));
            float _2688 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : min(_2556, _2557));
            float _2697 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : min(_2687, 0.0));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            _2726 = ((abs(_2563 / _2552) * cbSceneParam._m0[80u].y) * ((((_2697 - _2698) * 2.0) - ((exp2(_2571 * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0)))) - exp2(_2571 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))))) * _2686)) - ((exp2(_2573 * _2697) - exp2(_2573 * _2698)) * _2686))) + (_2566 * cbSceneParam._m0[80u].z);
        }
        vec4 _2728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, 1.0), 0.0);
        float _2737 = exp2((_2726 * (-1.44269502162933349609375)) * (1.0 - _2728.w));
        float _2738 = log2(_2737);
        float _2754 = log2(_2483);
        _2575 = (exp2(_2754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].x)) * _2728.x) / cbSceneParam._m0[78u].x)) + _2480;
        _2577 = (exp2(_2754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].y)) * _2728.y) / cbSceneParam._m0[78u].y)) + _2481;
        _2579 = (exp2(_2754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].z)) * _2728.z) / cbSceneParam._m0[78u].z)) + _2482;
        _2581 = _2737 * _2483;
    }
    else
    {
        _2575 = _2480;
        _2577 = _2481;
        _2579 = _2482;
        _2581 = _2483;
    }
    float _2593 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2594 = _2593 == 3.0;
    float _2595 = log2(_2581);
    float _2602 = exp2(_2595 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2425 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _686))) + ((_2431 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2603 = exp2(_2595 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2427 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _686))) + ((_2433 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2604 = exp2(_2595 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2429 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _686))) + ((_2435 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2613 = (_2593 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2613 * (_2594 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.y = _2613 * (_2594 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.z = _2613 * (_2594 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2579)));
    SV_Target.w = cbInstanceData._m0[_2455].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2455].w;
}


