#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _925;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _235 = _230.z;
    float _239 = (_230.x * 2.0) + (-1.0);
    float _241 = (_230.y * 2.0) + (-1.0);
    float _242 = dot(vec2(_239, _241), vec2(_239, _241));
    float _3240 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _248 = sqrt(1.0 - (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))));
    float _251 = fma(_248, _214, fma(_241, _207, _239 * _193));
    float _254 = fma(_248, _215, fma(_241, _208, _239 * _194));
    float _257 = fma(_248, _216, fma(_241, _209, _239 * _195));
    float _261 = inversesqrt(dot(vec3(_251, _254, _257), vec3(_251, _254, _257)));
    float _296 = (cbMtdParam._m0[11u].z + dot(vec4(_261 * _251, _261 * _254, _261 * _257, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3251 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    vec4 _314 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _319 = _314.x * cbMtdParam._m0[9u].x;
    float _320 = _314.y * cbMtdParam._m0[9u].y;
    float _321 = _314.z * cbMtdParam._m0[9u].z;
    vec4 _334 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _345 = ((_334.x - _319) * _297) + _319;
    float _346 = ((_334.y - _320) * _297) + _320;
    float _347 = ((_334.z - _321) * _297) + _321;
    vec4 _360 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = (_360.x * 2.0) + (-1.0);
    float _368 = (_360.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3262 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _377 = ((_360.z - _235) * _297) + _235;
    float _384 = ((_367 - _239) * _297) + _239;
    float _385 = ((_368 - _241) * _297) + _241;
    float _386 = ((sqrt(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) - _248) * _297) + _248;
    float _389 = fma(_386, _214, fma(_385, _207, _384 * _193));
    float _392 = fma(_386, _215, fma(_385, _208, _384 * _194));
    float _395 = fma(_386, _216, fma(_385, _209, _384 * _195));
    float _399 = inversesqrt(dot(vec3(_389, _392, _395), vec3(_389, _392, _395)));
    float _400 = _399 * _389;
    float _401 = _399 * _392;
    float _402 = _399 * _395;
    float _3273 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _403 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3295 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3306 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _422 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _473 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _463);
    float _474 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _463);
    float _475 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _463);
    float _479 = inversesqrt(dot(vec3(_473, _474, _475), vec3(_473, _474, _475)));
    float _480 = _473 * _479;
    float _481 = _474 * _479;
    float _482 = _475 * _479;
    float _488 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _489 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _509 = fma(_402, cbSceneParam._m0[5u].z, fma(_401, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _400));
    float _512 = fma(_402, cbSceneParam._m0[6u].z, fma(_401, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _400));
    float _515 = fma(_402, cbSceneParam._m0[7u].z, fma(_401, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _400));
    uint _528 = uint(roundEven(NORMAL.w)) * 13u;
    uint _530 = (_528 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _536 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_530].x;
    float _537 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_530].y;
    float _538 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_530].z;
    float _3317 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    vec4 _550 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _488, cbSceneParam._m0[86u].y * _489));
    float _553 = _550.x * TEXCOORD_9.w;
    float _554 = dot(vec3(_400, _401, _402), vec3(_480, _481, _482));
    float _557 = _554 * 2.0;
    float _561 = (_557 * _400) - _480;
    float _562 = (_557 * _401) - _481;
    float _563 = (_557 * _402) - _482;
    float _567 = abs(dot(vec3(_480, _481, _482), vec3(_400, _401, _402)));
    float _3350 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _569 = sqrt(_403);
    float _582 = exp2((_569 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_569 * 3.0));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _924;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _649 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _653 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _657 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _682 = _614 + _400;
        float _683 = _618 + _401;
        float _684 = _622 + _402;
        float _694 = fma(_684, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _682)) - _649;
        float _695 = fma(_684, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _682)) - _653;
        float _696 = fma(_684, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _682)) - _657;
        float _700 = inversesqrt(dot(vec3(_694, _695, _696), vec3(_694, _695, _696)));
        float _713 = ((_700 * _694) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_649 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_700 * _695) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_653 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_700 * _696) / cbModelParam._m0[34u].z) + ((((((_657 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        float _752 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_718.x + (-0.5));
        float _754 = _752 * (_718.y + (-0.5));
        float _755 = _752 * (_718.z + (-0.5));
        float _762 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_725.x + (-0.5));
        float _764 = _762 * (_725.y + (-0.5));
        float _765 = _762 * (_725.z + (-0.5));
        float _772 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_732.x + (-0.5));
        float _774 = _772 * (_732.y + (-0.5));
        float _775 = _772 * (_732.z + (-0.5));
        float _782 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_739.x + (-0.5));
        float _784 = _782 * (_739.y + (-0.5));
        float _785 = _782 * (_739.z + (-0.5));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = _753 * 0.5;
        float _790 = _763 * 0.5;
        float _791 = _773 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _806 = (dot(vec3(_400, _401, _402), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _816 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3398 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_818 + 1.0))) + _823) * _786;
        float _833 = _754 * 0.5;
        float _834 = _764 * 0.5;
        float _835 = _774 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_400, _401, _402), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3431 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_860 + 1.0))) + _865) * _787;
        float _875 = _755 * 0.5;
        float _876 = _765 * 0.5;
        float _877 = _775 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_400, _401, _402), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3464 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_902 + 1.0))) + _907) * _788;
        _924 = _755;
        _926 = _754;
        _927 = _753;
        _928 = _765;
        _929 = _764;
        _930 = _763;
        _931 = _775;
        _932 = _774;
        _933 = _773;
        _934 = _788;
        _935 = _787;
        _936 = _786;
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
    }
    else
    {
        _924 = _925;
        _926 = _925;
        _927 = _925;
        _928 = _925;
        _929 = _925;
        _930 = _925;
        _931 = _925;
        _932 = _925;
        _933 = _925;
        _934 = _925;
        _935 = _925;
        _936 = _925;
        _937 = 0.0;
        _938 = 0.0;
        _939 = 0.0;
    }
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _965 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _969 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _973 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _996 = _614 + _400;
        float _997 = _618 + _401;
        float _998 = _622 + _402;
        float _1008 = fma(_998, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996)) - _965;
        float _1009 = fma(_998, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996)) - _969;
        float _1010 = fma(_998, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996)) - _973;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_965 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_969 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[35u].z) + ((((((_973 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1064 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1031.x + (-0.5));
        float _1066 = _1064 * (_1031.y + (-0.5));
        float _1067 = _1064 * (_1031.z + (-0.5));
        float _1074 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1038.x + (-0.5));
        float _1076 = _1074 * (_1038.y + (-0.5));
        float _1077 = _1074 * (_1038.z + (-0.5));
        float _1084 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1045.x + (-0.5));
        float _1086 = _1084 * (_1045.y + (-0.5));
        float _1087 = _1084 * (_1045.z + (-0.5));
        float _1094 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1052.x + (-0.5));
        float _1096 = _1094 * (_1052.y + (-0.5));
        float _1097 = _1094 * (_1052.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_400, _401, _402), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3527 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1128 + 1.0))) + _1133) * _1098;
        float _1143 = _1066 * 0.5;
        float _1144 = _1076 * 0.5;
        float _1145 = _1086 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_400, _401, _402), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3560 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1170 + 1.0))) + _1175) * _1099;
        float _1185 = _1067 * 0.5;
        float _1186 = _1077 * 0.5;
        float _1187 = _1087 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_400, _401, _402), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3593 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1212 + 1.0))) + _1217) * _1100;
        _1234 = _1067;
        _1235 = _1066;
        _1236 = _1065;
        _1237 = _1077;
        _1238 = _1076;
        _1239 = _1075;
        _1240 = _1087;
        _1241 = _1086;
        _1242 = _1085;
        _1243 = _1100;
        _1244 = _1099;
        _1245 = _1098;
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _925;
        _1235 = _925;
        _1236 = _925;
        _1237 = _925;
        _1238 = _925;
        _1239 = _925;
        _1240 = _925;
        _1241 = _925;
        _1242 = _925;
        _1243 = _925;
        _1244 = _925;
        _1245 = _925;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _938)) + _938;
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _939)) + _939;
    float _1281 = fma(_1260, cbSceneParam._m0[89u].z, fma(_1259, cbSceneParam._m0[89u].y, _1258 * cbSceneParam._m0[89u].x));
    float _1284 = fma(_1260, cbSceneParam._m0[90u].z, fma(_1259, cbSceneParam._m0[90u].y, _1258 * cbSceneParam._m0[90u].x));
    float _1287 = fma(_1260, cbSceneParam._m0[91u].z, fma(_1259, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1258));
    float _1302 = _561 * 0.5;
    float _1303 = _562 * 0.5;
    float _1304 = _563 * 0.5;
    float _1305 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1308 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1311 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1345;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1318 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_924, _928, _931, _934));
        float _1322 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_926, _929, _932, _935));
        float _1326 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_927, _930, _933, _936));
        float _1333 = dot(vec4(cbModelParam._m0[39u]), vec4(_1302, _1303, _1304, 1.0));
        _1345 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1345 = 1.0;
    }
    float _1356;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1347 = dot(vec4(cbModelParam._m0[40u]), vec4(_1302, _1303, _1304, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1360 = (_1356 * cbModelParam._m0[1u].x) + (_1345 * (1.0 - cbModelParam._m0[1u].x));
    float _1370 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _403);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1370 : min(cbModelParam._m0[25u].z, _1370));
    float _1453;
    float _1455;
    float _1457;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1420 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1424 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1428 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1431 = fma(_563, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561));
        float _1434 = fma(_563, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561));
        float _1437 = fma(_563, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561));
        float _1465;
        if (_1431 > 0.0)
        {
            _1465 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1465 = frontier_phi_16_14_ladder;
        }
        float _1670;
        if (_1434 > 0.0)
        {
            _1670 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1670 = frontier_phi_25_21_ladder;
        }
        float _1913;
        if (_1437 > 0.0)
        {
            _1913 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1913 = frontier_phi_37_32_ladder;
        }
        float _1915 = isnan(_1670) ? _1465 : (isnan(_1465) ? _1670 : min(_1465, _1670));
        float _1916 = isnan(_1913) ? _1915 : (isnan(_1915) ? _1913 : min(_1915, _1913));
        float _1920 = (_1916 * _1431) + _1420;
        float _1921 = (_1916 * _1434) + _1424;
        float _1922 = (_1916 * _1437) + _1428;
        float _1923 = _1916 * 9.9999997473787516355514526367188e-05;
        float _1925 = (-1.0) - _1923;
        float _1927 = _1923 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1922 > _1927) || ((_1922 < _1925) || ((_1921 > _1927) || ((_1921 < _1925) || ((_1920 < _1925) || (_1920 > _1927))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1922, cbModelParam._m0[9u].z, fma(_1921, cbModelParam._m0[9u].y, _1920 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1922, cbModelParam._m0[10u].z, fma(_1921, cbModelParam._m0[10u].y, _1920 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1922, cbModelParam._m0[11u].z, fma(_1921, cbModelParam._m0[11u].y, _1920 * cbModelParam._m0[11u].x))), _1371);
            frontier_phi_15_37_ladder = _2046.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2046.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2046.x * cbModelParam._m0[1u].y;
        }
        _1453 = frontier_phi_15_37_ladder_2;
        _1455 = frontier_phi_15_37_ladder_1;
        _1457 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_561, _562, _563), _1371);
        _1453 = _1441.x * cbModelParam._m0[1u].y;
        _1455 = _1441.y * cbModelParam._m0[1u].y;
        _1457 = _1441.z * cbModelParam._m0[1u].y;
    }
    float _1461 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _403);
    float _1462 = isnan(_1461) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1461 : min(cbModelParam._m0[25u].w, _1461));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1519 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1523 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1527 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1530 = fma(_563, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561));
        float _1533 = fma(_563, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561));
        float _1536 = fma(_563, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561));
        float _1675;
        if (_1530 > 0.0)
        {
            _1675 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1675 = frontier_phi_27_23_ladder;
        }
        float _1940;
        if (_1533 > 0.0)
        {
            _1940 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1940 = frontier_phi_39_34_ladder;
        }
        float _2145;
        if (_1536 > 0.0)
        {
            _2145 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2145 = frontier_phi_48_45_ladder;
        }
        float _2147 = isnan(_1940) ? _1675 : (isnan(_1675) ? _1940 : min(_1675, _1940));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1530) + _1519;
        float _2153 = (_2148 * _1533) + _1523;
        float _2154 = (_2148 * _1536) + _1527;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2154, cbModelParam._m0[17u].z, fma(_2153, cbModelParam._m0[17u].y, _2152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2154, cbModelParam._m0[18u].z, fma(_2153, cbModelParam._m0[18u].y, _2152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2154, cbModelParam._m0[19u].z, fma(_2153, cbModelParam._m0[19u].y, _2152 * cbModelParam._m0[19u].x))), _1462);
            frontier_phi_24_48_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1555 = frontier_phi_24_48_ladder_2;
        _1557 = frontier_phi_24_48_ladder_1;
        _1559 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_561, _562, _563), _1462);
        _1555 = _1539.x * cbModelParam._m0[1u].z;
        _1557 = _1539.y * cbModelParam._m0[1u].z;
        _1559 = _1539.z * cbModelParam._m0[1u].z;
    }
    float _1571 = ((((1.0 - _582) * ((_569 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_582 * _569)) * _553;
    float _1572 = _1571 * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1573 = _1571 * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1574 = _1571 * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, _1572 * cbSceneParam._m0[91u].x));
    uvec4 _1593 = floatBitsToUint(cbInstanceData._m0[_528 + 5u]);
    uint _1595 = _1593.x * 14u;
    uint _1596 = _1595 + 13u;
    float _1603 = _553 + (-1.0);
    float _1608 = (cbLight._m0[_1596].x * _1603) + 1.0;
    float _1609 = (cbLight._m0[_1596].y * _1603) + 1.0;
    float _1610 = (cbLight._m0[_1596].z * _1603) + 1.0;
    float _1611 = (cbLight._m0[_1596].w * _1603) + 1.0;
    uint _1612 = _1595 + 5u;
    float _1618 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    uint _1622 = _1595 + 4u;
    float _1629 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    uint _1633 = _1595 | 1u;
    float _1644 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_400, _401, _402));
    float _1647 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_400, _401, _402));
    float _3729 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _3740 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1652 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1654 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1661 = ((cbLight._m0[_1612].x * _1618) * _1654) + ((cbLight._m0[_1622].x * _1629) * _1652);
    float _1662 = ((_1618 * cbLight._m0[_1612].y) * _1654) + ((_1629 * cbLight._m0[_1622].y) * _1652);
    float _1663 = ((_1618 * cbLight._m0[_1612].z) * _1654) + ((_1629 * cbLight._m0[_1622].z) * _1652);
    uvec4 _1667 = floatBitsToUint(cbLight._m0[_1595 + 12u]);
    bool _1669 = _1667.x == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1669)
    {
        _1680 = _1661;
        _1682 = _1662;
        _1684 = _1663;
    }
    else
    {
        uint _1688 = _1595 + 6u;
        float _1704 = (dot(vec3(cbLight._m0[_1595 + 2u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _1705 = _1704 * _1704;
        float _3751 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1707 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1680 = (((cbLight._m0[_1688].x * 0.3183098733425140380859375) * _1706) * _1707) + _1661;
        _1682 = (((cbLight._m0[_1688].y * 0.3183098733425140380859375) * _1706) * _1707) + _1662;
        _1684 = (((cbLight._m0[_1688].z * 0.3183098733425140380859375) * _1706) * _1707) + _1663;
    }
    bool _1687 = _1667.y == 0u;
    float _1725;
    float _1727;
    float _1729;
    if (_1687)
    {
        _1725 = _1680;
        _1727 = _1682;
        _1729 = _1684;
    }
    else
    {
        uint _1884 = _1595 + 7u;
        float _1900 = (dot(vec3(cbLight._m0[_1595 + 3u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _1901 = _1900 * _1900;
        float _3767 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1903 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1725 = (((cbLight._m0[_1884].x * 0.3183098733425140380859375) * _1902) * _1903) + _1680;
        _1727 = (((cbLight._m0[_1884].y * 0.3183098733425140380859375) * _1902) * _1903) + _1682;
        _1729 = (((cbLight._m0[_1884].z * 0.3183098733425140380859375) * _1902) * _1903) + _1684;
    }
    uint _1732 = _1595 + 8u;
    float _1745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1595].w)) * _403) * 0.949999988079071044921875);
    float _1746 = _1745 * _1745;
    float _1747 = cbLight._m0[_1595].x + _480;
    float _1748 = cbLight._m0[_1595].y + _481;
    float _1749 = cbLight._m0[_1595].z + _482;
    float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
    float _1754 = _1753 * _1747;
    float _1755 = _1753 * _1748;
    float _1756 = _1753 * _1749;
    float _1757 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1595].xyz));
    float _3783 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _1761 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1762 = dot(vec3(_400, _401, _402), vec3(_1754, _1755, _1756));
    float _3805 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_1754, _1755, _1756));
    float _3816 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1746 * _1746;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1786 = 1.0 - _1746;
    float _1797 = (0.5 / (((_1761 * ((_1760 * _1786) + _1746)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1786) + _1746) * _1760))) * _1760;
    float _3827 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1799 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    uint _1810 = _1595 + 9u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1633].w)) * _403) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1633].x + _480;
    float _1824 = cbLight._m0[_1633].y + _481;
    float _1825 = cbLight._m0[_1633].z + _482;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1633].xyz));
    float _3838 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1837 = dot(vec3(_400, _401, _402), vec3(_1830, _1831, _1832));
    float _3849 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_1830, _1831, _1832));
    float _3860 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1822 * _1822;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1858 = (exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1859 = 1.0 - _1822;
    float _1869 = (0.5 / (((_1761 * ((_1836 * _1859) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1859) + _1822) * _1836))) * _1836;
    float _3871 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1871 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    float _1881 = (((_1858 * cbLight._m0[_1810].x) * _1871) * _1618) + (((_1785 * cbLight._m0[_1732].x) * _1799) * _1629);
    float _1882 = (((_1858 * cbLight._m0[_1810].y) * _1871) * _1618) + (((_1785 * cbLight._m0[_1732].y) * _1799) * _1629);
    float _1883 = (((_1858 * cbLight._m0[_1810].z) * _1871) * _1618) + (((_1785 * cbLight._m0[_1732].z) * _1799) * _1629);
    float _1945;
    float _1947;
    float _1949;
    if (_1669)
    {
        _1945 = _1881;
        _1947 = _1882;
        _1949 = _1883;
    }
    else
    {
        uint _1951 = _1595 + 2u;
        uint _1955 = _1595 + 10u;
        float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _403) * 0.949999988079071044921875);
        float _1970 = _1969 * _1969;
        float _1971 = cbLight._m0[_1951].x + _480;
        float _1972 = cbLight._m0[_1951].y + _481;
        float _1973 = cbLight._m0[_1951].z + _482;
        float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
        float _1978 = _1977 * _1971;
        float _1979 = _1977 * _1972;
        float _1980 = _1977 * _1973;
        float _1981 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1951].xyz));
        float _3882 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1985 = dot(vec3(_400, _401, _402), vec3(_1978, _1979, _1980));
        float _3893 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1989 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_1978, _1979, _1980));
        float _3904 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1993 = _1970 * _1970;
        float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
        float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2007 = 1.0 - _1970;
        float _2017 = (0.5 / (((_1761 * ((_1984 * _2007) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _2007) + _1970) * _1984))) * _1984;
        float _3915 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2019 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
        float _2020 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1945 = (((_2006 * cbLight._m0[_1955].x) * _2019) * _2020) + _1881;
        _1947 = (((_2006 * cbLight._m0[_1955].y) * _2019) * _2020) + _1882;
        _1949 = (((_2006 * cbLight._m0[_1955].z) * _2019) * _2020) + _1883;
    }
    float _2055;
    float _2057;
    float _2059;
    if (_1687)
    {
        _2055 = _1945;
        _2057 = _1947;
        _2059 = _1949;
    }
    else
    {
        uint _2066 = _1595 + 3u;
        uint _2070 = _1595 + 11u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _403) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _480;
        float _2087 = cbLight._m0[_2066].y + _481;
        float _2088 = cbLight._m0[_2066].z + _482;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2066].xyz));
        float _3931 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _2100 = dot(vec3(_400, _401, _402), vec3(_2093, _2094, _2095));
        float _3942 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _3953 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = 1.0 - _2085;
        float _2132 = (0.5 / (((_1761 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _2122) + _2085) * _2099))) * _2099;
        float _3964 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _2055 = (((_2121 * cbLight._m0[_2070].x) * _2134) * _2135) + _1945;
        _2057 = (((_2121 * cbLight._m0[_2070].y) * _2134) * _2135) + _1947;
        _2059 = (((_2121 * cbLight._m0[_2070].z) * _2134) * _2135) + _1949;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1593.y == 0u)
    {
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2210;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2210;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2210;
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _489) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _488) / _2226)));
        float _2247 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            uint _2507 = 0u;
            uint _2516;
            bool _2517;
            for (;;)
            {
                _2516 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                _2517 = _2516 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2517)
                {
                    frontier_phi_63_pred = _2506;
                    frontier_phi_63_pred_1 = _2505;
                    frontier_phi_63_pred_2 = _2504;
                    frontier_phi_63_pred_3 = _2503;
                    frontier_phi_63_pred_4 = _2502;
                    frontier_phi_63_pred_5 = _2501;
                }
                else
                {
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    uint _2631;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2516;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2635 = uint(findLSB(_2631)) + (_2507 << 5u);
                        uint _2632 = (_2631 + 4294967295u) & _2631;
                        uint _2637 = _2635 * 48u;
                        vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 3u)).x));
                        uint _2657 = (_2635 * 48u) + 4u;
                        vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2676 = (_2635 * 48u) + 8u;
                        vec3 _2687 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x));
                        float _2691 = _2651.x - _2211;
                        float _2692 = _2651.y - _2212;
                        float _2693 = _2651.z - _2213;
                        float _2694 = dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693));
                        float _2697 = inversesqrt(_2694);
                        float _2698 = _2697 * _2691;
                        float _2699 = _2697 * _2692;
                        float _2700 = _2697 * _2693;
                        float _2701 = dot(vec3(_509, _512, _515), vec3(_2698, _2699, _2700));
                        float _2706 = 1.0 - (_2694 * _2651.w);
                        float _3990 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2707 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2708 = sqrt(_2694) * _2670.w;
                        float _2711 = 1.39999997615814208984375 / (_2708 + 1.39999997615814208984375);
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2701) + _2712;
                        float _2718 = _2708 * _2708;
                        float _2722 = ((isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))) * _2707) / ((_2718 * 0.699999988079071044921875) + 1.0);
                        float _2726 = (-0.0) - _2211;
                        float _2727 = (-0.0) - _2212;
                        float _2728 = (-0.0) - _2213;
                        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2743 = exp2(log2(1.0 / ((_2718 * 3.5) + 5.0)) * 0.25);
                        float _2744 = 1.0 - _569;
                        float _2751 = sqrt(1.0 - ((1.0 - (_2744 * _2744)) * (1.0 - (_2743 * _2743))));
                        float _2752 = _2751 * _2751;
                        float _2753 = _2752 * _2752;
                        float _2754 = _2733 + _2698;
                        float _2755 = _2734 + _2699;
                        float _2756 = _2735 + _2700;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2764 = dot(vec3(_509, _512, _515), vec3(_2733, _2734, _2735));
                        float _4006 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2768 = dot(vec3(_509, _512, _515), vec3(_2760 * _2754, _2760 * _2755, _2760 * _2756));
                        float _4017 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2771 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2775 = ((_2771 * _2771) * (_2753 + (-1.0))) + 1.0;
                        float _2776 = _2711 * _2752;
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2701) + _2777;
                        float _4028 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2782 = 1.0 - _2752;
                        float _2792 = (0.5 / (((_2781 * ((_2767 * _2782) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2781 * _2782) + _2752) * _2767))) * _2781;
                        float _4039 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2803 = (((_2753 * 3.1415927410125732421875) * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) / ((_2775 * _2775) * ((_2718 * 2.1991131305694580078125) + 3.141590118408203125))) * _2707;
                        _2560 = (_2722 * _2670.x) + _2628;
                        _2561 = (_2722 * _2670.y) + _2629;
                        _2562 = (_2722 * _2670.z) + _2630;
                        _2557 = (_2803 * _2687.x) + _2625;
                        _2558 = (_2803 * _2687.y) + _2626;
                        _2559 = (_2803 * _2687.z) + _2627;
                        if (_2632 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2632;
                        }
                    }
                    frontier_phi_63_pred = _2562;
                    frontier_phi_63_pred_1 = _2561;
                    frontier_phi_63_pred_2 = _2560;
                    frontier_phi_63_pred_3 = _2559;
                    frontier_phi_63_pred_4 = _2558;
                    frontier_phi_63_pred_5 = _2557;
                }
                _2368 = frontier_phi_63_pred;
                _2366 = frontier_phi_63_pred_1;
                _2364 = frontier_phi_63_pred_2;
                _2362 = frontier_phi_63_pred_3;
                _2360 = frontier_phi_63_pred_4;
                _2358 = frontier_phi_63_pred_5;
                uint _2508 = _2507 + 1u;
                if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2501 = _2358;
                    _2502 = _2360;
                    _2503 = _2362;
                    _2504 = _2364;
                    _2505 = _2366;
                    _2506 = _2368;
                    _2507 = _2508;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2374) & _2257) == 0u)
        {
            _2469 = _2357;
            _2471 = _2359;
            _2473 = _2361;
            _2475 = _2363;
            _2477 = _2365;
            _2479 = _2367;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _2495 = _2494 * _2211;
            float _2496 = _2494 * _2212;
            float _2497 = _2494 * _2213;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2608 = _2357;
                float _2609 = _2359;
                float _2610 = _2361;
                float _2611 = _2363;
                float _2612 = _2365;
                float _2613 = _2367;
                uint _2614 = _2374;
                uint _2623;
                bool _2624;
                for (;;)
                {
                    _2623 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                    _2624 = _2623 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2624)
                    {
                        frontier_phi_69_pred = _2613;
                        frontier_phi_69_pred_1 = _2612;
                        frontier_phi_69_pred_2 = _2611;
                        frontier_phi_69_pred_3 = _2610;
                        frontier_phi_69_pred_4 = _2609;
                        frontier_phi_69_pred_5 = _2608;
                    }
                    else
                    {
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        uint _2827 = _2623;
                        uint _2828;
                        vec4 _2853;
                        float _2854;
                        vec4 _2869;
                        vec3 _2881;
                        vec4 _2897;
                        vec4 _2913;
                        float _2960;
                        bool _2961;
                        for (;;)
                        {
                            uint _2838 = ((_2614 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2827));
                            _2828 = (_2827 + 4294967295u) & _2827;
                            uint _2840 = _2838 * 40u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2854 = _2853.w;
                            uint _2856 = (_2838 * 40u) + 4u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2838 * 40u) + 8u;
                            _2881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x));
                            uint _2884 = (_2838 * 40u) + 16u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2900 = (_2838 * 40u) + 20u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2838 * 40u) + 24u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2935 = (_2838 * 40u) + 28u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2960 = fma(_2213, _2948.z, fma(_2212, _2948.y, _2948.x * _2211)) + _2948.w;
                            _2961 = !((fma(_2213, _2929.z, fma(_2212, _2929.y, _2929.x * _2211)) + _2929.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2961)
                            {
                                float _2988 = _2853.x - _2211;
                                float _2989 = _2853.y - _2212;
                                float _2990 = _2853.z - _2213;
                                float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                                float _2994 = inversesqrt(_2991);
                                float _2995 = _2994 * _2988;
                                float _2996 = _2994 * _2989;
                                float _2997 = _2994 * _2990;
                                float _3001 = 1.0 - (_2991 / (_2854 * _2854));
                                float _4050 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3006 = sqrt(_2991) * _2869.w;
                                float _3008 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                                float _3009 = _3008 * _3008;
                                float _3012 = ((1.0 - _3009) * dot(vec3(_2995, _2996, _2997), vec3(_509, _512, _515))) + _3009;
                                float _3015 = _3006 * _3006;
                                float _3019 = (fma(_2213, _2897.z, fma(_2212, _2897.y, _2897.x * _2211)) + _2897.w) / _2960;
                                float _3020 = (fma(_2213, _2913.z, fma(_2212, _2913.y, _2913.x * _2211)) + _2913.w) / _2960;
                                float _3024 = 1.0 - dot(vec2(_3019, _3020), vec2(_3019, _3020));
                                float _4066 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3026 = _3025 * (((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3002) / ((_3015 * 0.699999988079071044921875) + 1.0));
                                float _3038 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                                float _3039 = 1.0 - _569;
                                float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                                float _3047 = _3046 * _3046;
                                float _3048 = _3047 * _3047;
                                float _3049 = _2995 - _2495;
                                float _3050 = _2996 - _2496;
                                float _3051 = _2997 - _2497;
                                float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                                float _3059 = dot(vec3(_509, _512, _515), vec3((-0.0) - _2495, (-0.0) - _2496, (-0.0) - _2497));
                                float _4077 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3063 = dot(vec3(_509, _512, _515), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                                float _4088 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3066 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                                float _3071 = _3008 * _3047;
                                float _3072 = _3071 * _3071;
                                float _3078 = ((1.0 - _3072) * dot(vec3(_509, _512, _515), vec3(_2995, _2996, _2997))) + _3072;
                                float _4099 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3080 = 1.0 - _3047;
                                float _3090 = (0.5 / (((_3079 * ((_3062 * _3080) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3047) * _3062))) * _3079;
                                float _4110 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3100 = (_3025 * _3002) * (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) / ((_3070 * _3070) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3026 * _2869.z;
                                frontier_phi_75_pred_1 = _3026 * _2869.y;
                                frontier_phi_75_pred_2 = _3026 * _2869.x;
                                frontier_phi_75_pred_3 = _3100 * _2881.z;
                                frontier_phi_75_pred_4 = _3100 * _2881.y;
                                frontier_phi_75_pred_5 = _3100 * _2881.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3109 = frontier_phi_75_pred;
                            _3108 = frontier_phi_75_pred_1;
                            _3107 = frontier_phi_75_pred_2;
                            _3106 = frontier_phi_75_pred_3;
                            _3105 = frontier_phi_75_pred_4;
                            _3104 = frontier_phi_75_pred_5;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            if (_2828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2828;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2813;
                        frontier_phi_69_pred_1 = _2812;
                        frontier_phi_69_pred_2 = _2811;
                        frontier_phi_69_pred_3 = _2810;
                        frontier_phi_69_pred_4 = _2809;
                        frontier_phi_69_pred_5 = _2808;
                    }
                    _2480 = frontier_phi_69_pred;
                    _2478 = frontier_phi_69_pred_1;
                    _2476 = frontier_phi_69_pred_2;
                    _2474 = frontier_phi_69_pred_3;
                    _2472 = frontier_phi_69_pred_4;
                    _2470 = frontier_phi_69_pred_5;
                    uint _2615 = _2614 + 1u;
                    if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2608 = _2470;
                        _2609 = _2472;
                        _2610 = _2474;
                        _2611 = _2476;
                        _2612 = _2478;
                        _2613 = _2480;
                        _2614 = _2615;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2480;
                frontier_phi_57_58_ladder_1 = _2478;
                frontier_phi_57_58_ladder_2 = _2476;
                frontier_phi_57_58_ladder_3 = _2474;
                frontier_phi_57_58_ladder_4 = _2472;
                frontier_phi_57_58_ladder_5 = _2470;
            }
            else
            {
                frontier_phi_57_58_ladder = _2367;
                frontier_phi_57_58_ladder_1 = _2365;
                frontier_phi_57_58_ladder_2 = _2363;
                frontier_phi_57_58_ladder_3 = _2361;
                frontier_phi_57_58_ladder_4 = _2359;
                frontier_phi_57_58_ladder_5 = _2357;
            }
            _2469 = frontier_phi_57_58_ladder_5;
            _2471 = frontier_phi_57_58_ladder_4;
            _2473 = frontier_phi_57_58_ladder_3;
            _2475 = frontier_phi_57_58_ladder_2;
            _2477 = frontier_phi_57_58_ladder_1;
            _2479 = frontier_phi_57_58_ladder;
        }
        float _2484 = isnan(1.0) ? _553 : (isnan(_553) ? 1.0 : min(_553, 1.0));
        _2269 = (_2484 * _2475) + _1725;
        _2271 = (_2484 * _2477) + _1727;
        _2273 = (_2484 * _2479) + _1729;
        _2275 = ((_2469 * 0.039999999105930328369140625) * _2484) + _2055;
        _2277 = ((_2471 * 0.039999999105930328369140625) * _2484) + _2057;
        _2279 = ((_2473 * 0.039999999105930328369140625) * _2484) + _2059;
    }
    else
    {
        _2269 = _1725;
        _2271 = _1727;
        _2273 = _1729;
        _2275 = _2055;
        _2277 = _2057;
        _2279 = _2059;
    }
    float _4126 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4137 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4148 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    uint _2299 = _528 + 6u;
    float _2307 = _488 / cbSceneParam._m0[86u].x;
    float _2308 = _489 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _422 : (isnan(_422) ? cbSceneParam._m0[77u].w : min(_422, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_422 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_422) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _422 : min(cbSceneParam._m0[80u].w, _422));
        float _2383 = _2382 / _422;
        float _2394 = _2383 * _473;
        float _2395 = _474 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2397 = _2383 * _475;
        float _2399 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2395;
        float _2407 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2570;
        if (abs((_2396 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2570 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2530 = 1.0 / cbSceneParam._m0[80u].x;
            float _2531 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2532 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            _2570 = ((abs(_2407 / _2396) * cbSceneParam._m0[80u].y) * ((((_2541 - _2542) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))))) * _2530)) - ((exp2(_2417 * _2541) - exp2(_2417 * _2542)) * _2530))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2572 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2581 = exp2((_2570 * (-1.44269502162933349609375)) * (1.0 - _2572.w));
        float _2582 = log2(_2581);
        float _2598 = log2(_2327);
        _2419 = (exp2(_2598 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].x)) * _2572.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2421 = (exp2(_2598 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].y)) * _2572.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2423 = (exp2(_2598 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].z)) * _2572.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2425 = _2581 * _2327;
    }
    else
    {
        _2419 = _2324;
        _2421 = _2325;
        _2423 = _2326;
        _2425 = _2327;
    }
    float _2437 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2438 = _2437 == 3.0;
    float _2439 = log2(_2425);
    float _2446 = exp2(_2439 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2269 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _553))) + ((_2275 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1360)) * cbPerFrame._m0[3u].x));
    float _2447 = exp2(_2439 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2271 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _553))) + ((_2277 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1360)) * cbPerFrame._m0[3u].x));
    float _2448 = exp2(_2439 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2273 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _553))) + ((_2279 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1360)) * cbPerFrame._m0[3u].x));
    float _2457 = (_2437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2457 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.y = _2457 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.z = _2457 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.w = cbInstanceData._m0[_2299].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2299].w;
}


