#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _955;
float _3607;
float _3608;
float _3609;
float _3610;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3619 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))));
    float _257 = fma(_254, _220, fma(_247, _213, _245 * _199));
    float _260 = fma(_254, _221, fma(_247, _214, _245 * _200));
    float _263 = fma(_254, _222, fma(_247, _215, _245 * _201));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _284 = cbMtdParam._m0[11u].z + dot(vec4(_267 * _257, _267 * _260, _267 * _263, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3630 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    vec4 _303 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _308 = _303.x * cbMtdParam._m0[9u].x;
    float _309 = _303.y * cbMtdParam._m0[9u].y;
    float _310 = _303.z * cbMtdParam._m0[9u].z;
    vec4 _323 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _334 = ((_323.x - _308) * _285) + _308;
    float _335 = ((_323.y - _309) * _285) + _309;
    float _336 = ((_323.z - _310) * _285) + _310;
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _356 = (_349.x * 2.0) + (-1.0);
    float _357 = (_349.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_356, _357), vec2(_356, _357));
    float _3641 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _366 = ((_349.z - _241) * _285) + _241;
    float _373 = ((_356 - _245) * _285) + _245;
    float _374 = ((_357 - _247) * _285) + _247;
    float _375 = ((sqrt(1.0 - (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) - _254) * _285) + _254;
    float _378 = fma(_375, _220, fma(_374, _213, _373 * _199));
    float _381 = fma(_375, _221, fma(_374, _214, _373 * _200));
    float _384 = fma(_375, _222, fma(_374, _215, _373 * _201));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3652 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _392 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3674 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3685 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _462 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _464 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
    float _469 = _462 * _468;
    float _470 = _463 * _468;
    float _471 = _464 * _468;
    vec4 _476 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _478 = _476.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _634 = sqrt(((_462 * _462) + (_463 * _463)) + (_464 * _464));
        float _640 = (cbMatDynParam._m0[5u].x * _634) + cbMatDynParam._m0[5u].y;
        float _3696 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _645 = (cbMatDynParam._m0[5u].z * _634) + cbMatDynParam._m0[5u].w;
        float _3707 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) - _641)) + _641) < ((_478 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _490 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _491 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _510 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _513 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _516 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _529 = uint(roundEven(NORMAL.w)) * 13u;
    uint _530 = _529 + 9u;
    uint _531 = _530 + uint(cbMatDynParam._m0[0u].w);
    float _537 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_531].x;
    float _538 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_531].y;
    float _539 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_531].z;
    float _3718 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    vec4 _551 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _490, cbSceneParam._m0[86u].y * _491));
    float _554 = _551.x * TEXCOORD_9.w;
    float _555 = dot(vec3(_389, _390, _391), vec3(_469, _470, _471));
    float _558 = _555 * 2.0;
    float _562 = (_558 * _389) - _469;
    float _563 = (_558 * _390) - _470;
    float _564 = (_558 * _391) - _471;
    float _568 = abs(dot(vec3(_469, _470, _471), vec3(_389, _390, _391)));
    float _3751 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _570 = sqrt(_392);
    float _583 = exp2((_570 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_570 * 3.0));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _954;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _679 = fma(_623, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615));
        float _683 = fma(_623, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615));
        float _687 = fma(_623, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615));
        float _712 = _615 + _389;
        float _713 = _619 + _390;
        float _714 = _623 + _391;
        float _724 = fma(_714, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712)) - _679;
        float _725 = fma(_714, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712)) - _683;
        float _726 = fma(_714, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712)) - _687;
        float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
        float _743 = ((_730 * _724) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_679 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_730 * _725) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_683 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_730 * _726) / cbModelParam._m0[34u].z) + ((((((_687 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        float _782 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_748.x + (-0.5));
        float _784 = _782 * (_748.y + (-0.5));
        float _785 = _782 * (_748.z + (-0.5));
        float _792 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_755.x + (-0.5));
        float _794 = _792 * (_755.y + (-0.5));
        float _795 = _792 * (_755.z + (-0.5));
        float _802 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_762.x + (-0.5));
        float _804 = _802 * (_762.y + (-0.5));
        float _805 = _802 * (_762.z + (-0.5));
        float _812 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_769.x + (-0.5));
        float _814 = _812 * (_769.y + (-0.5));
        float _815 = _812 * (_769.z + (-0.5));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = _783 * 0.5;
        float _820 = _793 * 0.5;
        float _821 = _803 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _836 = (dot(vec3(_389, _390, _391), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _846 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3799 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_848 + 1.0))) + _853) * _816;
        float _863 = _784 * 0.5;
        float _864 = _794 * 0.5;
        float _865 = _804 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_389, _390, _391), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3832 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_890 + 1.0))) + _895) * _817;
        float _905 = _785 * 0.5;
        float _906 = _795 * 0.5;
        float _907 = _805 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_389, _390, _391), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3865 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_932 + 1.0))) + _937) * _818;
        _954 = _785;
        _956 = _784;
        _957 = _783;
        _958 = _795;
        _959 = _794;
        _960 = _793;
        _961 = _805;
        _962 = _804;
        _963 = _803;
        _964 = _818;
        _965 = _817;
        _966 = _816;
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
    }
    else
    {
        _954 = _955;
        _956 = _955;
        _957 = _955;
        _958 = _955;
        _959 = _955;
        _960 = _955;
        _961 = _955;
        _962 = _955;
        _963 = _955;
        _964 = _955;
        _965 = _955;
        _966 = _955;
        _967 = 0.0;
        _968 = 0.0;
        _969 = 0.0;
    }
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _998 = fma(_623, cbModelParam._m0[30u].z, fma(_619, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _615));
        float _1002 = fma(_623, cbModelParam._m0[31u].z, fma(_619, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _615));
        float _1006 = fma(_623, cbModelParam._m0[32u].z, fma(_619, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _615));
        float _1029 = _615 + _389;
        float _1030 = _619 + _390;
        float _1031 = _623 + _391;
        float _1041 = fma(_1031, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029)) - _998;
        float _1042 = fma(_1031, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029)) - _1002;
        float _1043 = fma(_1031, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029)) - _1006;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_998 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1002 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[35u].z) + ((((((_1006 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1097 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1064.x + (-0.5));
        float _1099 = _1097 * (_1064.y + (-0.5));
        float _1100 = _1097 * (_1064.z + (-0.5));
        float _1107 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1071.x + (-0.5));
        float _1109 = _1107 * (_1071.y + (-0.5));
        float _1110 = _1107 * (_1071.z + (-0.5));
        float _1117 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1078.x + (-0.5));
        float _1119 = _1117 * (_1078.y + (-0.5));
        float _1120 = _1117 * (_1078.z + (-0.5));
        float _1127 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1085.x + (-0.5));
        float _1129 = _1127 * (_1085.y + (-0.5));
        float _1130 = _1127 * (_1085.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_389, _390, _391), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3928 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1161 + 1.0))) + _1166) * _1131;
        float _1176 = _1099 * 0.5;
        float _1177 = _1109 * 0.5;
        float _1178 = _1119 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_389, _390, _391), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3961 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1203 + 1.0))) + _1208) * _1132;
        float _1218 = _1100 * 0.5;
        float _1219 = _1110 * 0.5;
        float _1220 = _1120 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_389, _390, _391), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3994 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1245 + 1.0))) + _1250) * _1133;
        _1267 = _1100;
        _1268 = _1099;
        _1269 = _1098;
        _1270 = _1110;
        _1271 = _1109;
        _1272 = _1108;
        _1273 = _1120;
        _1274 = _1119;
        _1275 = _1118;
        _1276 = _1133;
        _1277 = _1132;
        _1278 = _1131;
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _955;
        _1268 = _955;
        _1269 = _955;
        _1270 = _955;
        _1271 = _955;
        _1272 = _955;
        _1273 = _955;
        _1274 = _955;
        _1275 = _955;
        _1276 = _955;
        _1277 = _955;
        _1278 = _955;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1314 = fma(_1293, cbSceneParam._m0[89u].z, fma(_1292, cbSceneParam._m0[89u].y, _1291 * cbSceneParam._m0[89u].x));
    float _1317 = fma(_1293, cbSceneParam._m0[90u].z, fma(_1292, cbSceneParam._m0[90u].y, _1291 * cbSceneParam._m0[90u].x));
    float _1320 = fma(_1293, cbSceneParam._m0[91u].z, fma(_1292, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1291));
    float _1335 = _562 * 0.5;
    float _1336 = _563 * 0.5;
    float _1337 = _564 * 0.5;
    float _1338 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1341 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1344 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1378;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1351 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_954, _958, _961, _964));
        float _1355 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_956, _959, _962, _965));
        float _1359 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_957, _960, _963, _966));
        float _1366 = dot(vec4(cbModelParam._m0[39u]), vec4(_1335, _1336, _1337, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1389;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1380 = dot(vec4(cbModelParam._m0[40u]), vec4(_1335, _1336, _1337, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1393 = (_1389 * cbModelParam._m0[1u].x) + (_1378 * (1.0 - cbModelParam._m0[1u].x));
    float _1403 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1403 : min(cbModelParam._m0[25u].z, _1403));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1453 = fma(_623, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615)) + cbModelParam._m0[13u].w;
        float _1457 = fma(_623, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615)) + cbModelParam._m0[14u].w;
        float _1461 = fma(_623, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615)) + cbModelParam._m0[15u].w;
        float _1464 = fma(_564, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562));
        float _1467 = fma(_564, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562));
        float _1470 = fma(_564, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562));
        float _1498;
        if (_1464 > 0.0)
        {
            _1498 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1498 = frontier_phi_19_17_ladder;
        }
        float _1671;
        if (_1467 > 0.0)
        {
            _1671 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1671 = frontier_phi_28_24_ladder;
        }
        float _1967;
        if (_1470 > 0.0)
        {
            _1967 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1967 = frontier_phi_40_35_ladder;
        }
        float _1969 = isnan(_1671) ? _1498 : (isnan(_1498) ? _1671 : min(_1498, _1671));
        float _1970 = isnan(_1967) ? _1969 : (isnan(_1969) ? _1967 : min(_1969, _1967));
        float _1974 = (_1970 * _1464) + _1453;
        float _1975 = (_1970 * _1467) + _1457;
        float _1976 = (_1970 * _1470) + _1461;
        float _1977 = _1970 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1977;
        float _1981 = _1977 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 > _1981) || ((_1975 < _1979) || ((_1974 < _1979) || (_1974 > _1981))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1976, cbModelParam._m0[9u].z, fma(_1975, cbModelParam._m0[9u].y, _1974 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1976, cbModelParam._m0[10u].z, fma(_1975, cbModelParam._m0[10u].y, _1974 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1976, cbModelParam._m0[11u].z, fma(_1975, cbModelParam._m0[11u].y, _1974 * cbModelParam._m0[11u].x))), _1404);
            frontier_phi_18_40_ladder = _2121.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2121.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2121.x * cbModelParam._m0[1u].y;
        }
        _1486 = frontier_phi_18_40_ladder_2;
        _1488 = frontier_phi_18_40_ladder_1;
        _1490 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_562, _563, _564), _1404);
        _1486 = _1474.x * cbModelParam._m0[1u].y;
        _1488 = _1474.y * cbModelParam._m0[1u].y;
        _1490 = _1474.z * cbModelParam._m0[1u].y;
    }
    float _1494 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1494 : min(cbModelParam._m0[25u].w, _1494));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1552 = fma(_623, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615)) + cbModelParam._m0[21u].w;
        float _1556 = fma(_623, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615)) + cbModelParam._m0[22u].w;
        float _1560 = fma(_623, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615)) + cbModelParam._m0[23u].w;
        float _1563 = fma(_564, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562));
        float _1566 = fma(_564, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562));
        float _1569 = fma(_564, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562));
        float _1676;
        if (_1563 > 0.0)
        {
            _1676 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1676 = frontier_phi_30_26_ladder;
        }
        float _1994;
        if (_1566 > 0.0)
        {
            _1994 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1994 = frontier_phi_42_37_ladder;
        }
        float _2321;
        if (_1569 > 0.0)
        {
            _2321 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2321 = frontier_phi_52_49_ladder;
        }
        float _2323 = isnan(_1994) ? _1676 : (isnan(_1676) ? _1994 : min(_1676, _1994));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1563) + _1552;
        float _2329 = (_2324 * _1566) + _1556;
        float _2330 = (_2324 * _1569) + _1560;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1495);
            frontier_phi_27_52_ladder = _2448.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2448.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2448.x * cbModelParam._m0[1u].z;
        }
        _1588 = frontier_phi_27_52_ladder_2;
        _1590 = frontier_phi_27_52_ladder_1;
        _1592 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_562, _563, _564), _1495);
        _1588 = _1572.x * cbModelParam._m0[1u].z;
        _1590 = _1572.y * cbModelParam._m0[1u].z;
        _1592 = _1572.z * cbModelParam._m0[1u].z;
    }
    float _1604 = ((((1.0 - _583) * ((_570 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_583 * _570)) * _554;
    float _1605 = _1604 * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1606 = _1604 * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1607 = _1604 * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1610 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1605 * cbSceneParam._m0[91u].x));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1663 = _1650 / _1662;
    float _1664 = _1654 / _1662;
    float _1665 = _1658 / _1662;
    float _1812;
    float _1813;
    float _1814;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1692 = ((uint(_1665 > cbSceneParam._m0[59u].y) + uint(_1665 > cbSceneParam._m0[59u].x)) + uint(_1665 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1693 = _1692 + 43u;
        uint _1701 = _1692 + 44u;
        uint _1709 = _1692 + 45u;
        uint _1717 = _1692 + 46u;
        float _1728 = fma(_1662, cbSceneParam._m0[_1693].w, fma(_1658, cbSceneParam._m0[_1693].z, fma(_1654, cbSceneParam._m0[_1693].y, _1650 * cbSceneParam._m0[_1693].x)));
        float _1732 = fma(_1662, cbSceneParam._m0[_1701].w, fma(_1658, cbSceneParam._m0[_1701].z, fma(_1654, cbSceneParam._m0[_1701].y, _1650 * cbSceneParam._m0[_1701].x)));
        float _1740 = fma(_1662, cbSceneParam._m0[_1717].w, fma(_1658, cbSceneParam._m0[_1717].z, fma(_1654, cbSceneParam._m0[_1717].y, _1650 * cbSceneParam._m0[_1717].x)));
        float _1745 = cbSceneParam._m0[33u].z * _1740;
        float _1747 = cbSceneParam._m0[33u].w * _1740;
        float _1750 = fma(_1662, cbSceneParam._m0[_1709].w, fma(_1658, cbSceneParam._m0[_1709].z, fma(_1654, cbSceneParam._m0[_1709].y, _1650 * cbSceneParam._m0[_1709].x))) / _1740;
        float _1798 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
        float _4120 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1805 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 + _1728) / _1740, (_1747 + _1732) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 + _1728) / _1740, (_1732 - _1745) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1745) / _1740, (_1732 - _1747) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1747) / _1740, (_1745 + _1732) / _1740), _1750), 0.0)).x), vec4(0.25)));
        _1812 = 1.0 - (_1805 * cbSceneParam._m0[34u].x);
        _1813 = 1.0 - (_1805 * cbSceneParam._m0[34u].y);
        _1814 = 1.0 - (_1805 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1812 = 1.0;
        _1813 = 1.0;
        _1814 = 1.0;
    }
    float _1878;
    float _1880;
    float _1882;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1866 = fma(_1662, cbSceneParam._m0[63u].w, fma(_1658, cbSceneParam._m0[63u].z, fma(_1654, cbSceneParam._m0[63u].y, _1650 * cbSceneParam._m0[63u].x)));
        float _1867 = fma(_1662, cbSceneParam._m0[60u].w, fma(_1658, cbSceneParam._m0[60u].z, fma(_1654, cbSceneParam._m0[60u].y, _1650 * cbSceneParam._m0[60u].x))) / _1866;
        float _1868 = fma(_1662, cbSceneParam._m0[61u].w, fma(_1658, cbSceneParam._m0[61u].z, fma(_1654, cbSceneParam._m0[61u].y, _1650 * cbSceneParam._m0[61u].x))) / _1866;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1867 >= cbSceneParam._m0[64u].x) && (_1868 >= cbSceneParam._m0[64u].y)) && (_1867 <= cbSceneParam._m0[64u].z)) && (_1868 <= cbSceneParam._m0[64u].w))
        {
            float _2007 = fma(_1662, cbSceneParam._m0[62u].w, fma(_1658, cbSceneParam._m0[62u].z, fma(_1654, cbSceneParam._m0[62u].y, _1650 * cbSceneParam._m0[62u].x))) / _1866;
            float _2011 = isnan(cbSceneParam._m0[41u].w) ? _2007 : (isnan(_2007) ? cbSceneParam._m0[41u].w : max(_2007, cbSceneParam._m0[41u].w));
            float _2054 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
            float _4136 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
            float _2061 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1867, cbSceneParam._m0[33u].w + _1868), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1867, _1868 - cbSceneParam._m0[33u].z), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].z, _1868 - cbSceneParam._m0[33u].w), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1868), _2011), 0.0)).x), vec4(0.25)));
            float _2065 = 1.0 - (_2061 * cbSceneParam._m0[34u].x);
            float _2066 = 1.0 - (_2061 * cbSceneParam._m0[34u].y);
            float _2067 = 1.0 - (_2061 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2066) ? _1813 : (isnan(_1813) ? _2066 : min(_1813, _2066));
            frontier_phi_39_38_ladder_1 = isnan(_2065) ? _1812 : (isnan(_1812) ? _2065 : min(_1812, _2065));
            frontier_phi_39_38_ladder_2 = isnan(_2067) ? _1814 : (isnan(_1814) ? _2067 : min(_1814, _2067));
        }
        else
        {
            frontier_phi_39_38_ladder = _1813;
            frontier_phi_39_38_ladder_1 = _1812;
            frontier_phi_39_38_ladder_2 = _1814;
        }
        _1878 = frontier_phi_39_38_ladder_1;
        _1880 = frontier_phi_39_38_ladder;
        _1882 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1878 = _1812;
        _1880 = _1813;
        _1882 = _1814;
    }
    uvec4 _1887 = floatBitsToUint(cbInstanceData._m0[_529 + 5u]);
    uint _1889 = _1887.x * 14u;
    uint _1890 = _1889 + 13u;
    float _1897 = _554 + (-1.0);
    float _1902 = (cbLight._m0[_1890].x * _1897) + 1.0;
    float _1903 = (cbLight._m0[_1890].y * _1897) + 1.0;
    float _1904 = (cbLight._m0[_1890].z * _1897) + 1.0;
    float _1905 = (cbLight._m0[_1890].w * _1897) + 1.0;
    uint _1906 = _1889 + 5u;
    float _1912 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1916 = _1889 + 4u;
    float _1926 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1930 = _1889 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_389, _390, _391));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_389, _390, _391));
    float _4172 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4183 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1906].x * _1912) * _1951) + (((cbLight._m0[_1916].x * _1878) * _1926) * _1949);
    float _1959 = ((_1912 * cbLight._m0[_1906].y) * _1951) + (((cbLight._m0[_1916].y * _1880) * _1926) * _1949);
    float _1960 = ((_1912 * cbLight._m0[_1906].z) * _1951) + (((cbLight._m0[_1916].z * _1882) * _1926) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1889 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_1966)
    {
        _2068 = _1958;
        _2070 = _1959;
        _2072 = _1960;
    }
    else
    {
        uint _2076 = _1889 + 6u;
        float _2092 = (dot(vec3(cbLight._m0[_1889 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4194 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2095 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2068 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1958;
        _2070 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1959;
        _2072 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1960;
    }
    bool _2075 = _1964.y == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2075)
    {
        _2130 = _2068;
        _2132 = _2070;
        _2134 = _2072;
    }
    else
    {
        uint _2292 = _1889 + 7u;
        float _2308 = (dot(vec3(cbLight._m0[_1889 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4210 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2311 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2130 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2068;
        _2132 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2070;
        _2134 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2072;
    }
    uint _2137 = _1889 + 8u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _392) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1889].x + _469;
    float _2153 = cbLight._m0[_1889].y + _470;
    float _2154 = cbLight._m0[_1889].z + _471;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1889].xyz));
    float _4226 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _2166 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2167 = dot(vec3(_389, _390, _391), vec3(_2159, _2160, _2161));
    float _4248 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2159, _2160, _2161));
    float _4259 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2151 * _2151;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2191 = 1.0 - _2151;
    float _2202 = (0.5 / (((_2166 * ((_2165 * _2191) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2191) + _2151) * _2165))) * _2165;
    float _4270 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    uint _2218 = _1889 + 9u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _392) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_1930].x + _469;
    float _2232 = cbLight._m0[_1930].y + _470;
    float _2233 = cbLight._m0[_1930].z + _471;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1930].xyz));
    float _4281 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2245 = dot(vec3(_389, _390, _391), vec3(_2238, _2239, _2240));
    float _4292 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2238, _2239, _2240));
    float _4303 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2230 * _2230;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2267 = 1.0 - _2230;
    float _2277 = (0.5 / (((_2166 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2267) + _2230) * _2244))) * _2244;
    float _4314 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2279 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    float _2289 = (((_2266 * cbLight._m0[_2218].x) * _2279) * _1912) + ((((cbLight._m0[_2137].x * _1878) * _2190) * _2204) * _1926);
    float _2290 = (((_2266 * cbLight._m0[_2218].y) * _2279) * _1912) + ((((cbLight._m0[_2137].y * _1880) * _2190) * _2204) * _1926);
    float _2291 = (((_2266 * cbLight._m0[_2218].z) * _2279) * _1912) + ((((cbLight._m0[_2137].z * _1882) * _2190) * _2204) * _1926);
    float _2347;
    float _2349;
    float _2351;
    if (_1966)
    {
        _2347 = _2289;
        _2349 = _2290;
        _2351 = _2291;
    }
    else
    {
        uint _2353 = _1889 + 2u;
        uint _2357 = _1889 + 10u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _392) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _469;
        float _2374 = cbLight._m0[_2353].y + _470;
        float _2375 = cbLight._m0[_2353].z + _471;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2353].xyz));
        float _4325 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2387 = dot(vec3(_389, _390, _391), vec3(_2380, _2381, _2382));
        float _4336 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4347 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2409 = 1.0 - _2372;
        float _2419 = (0.5 / (((_2166 * ((_2386 * _2409) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2409) + _2372) * _2386))) * _2386;
        float _4358 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2347 = (((_2408 * cbLight._m0[_2357].x) * _2421) * _2422) + _2289;
        _2349 = (((_2408 * cbLight._m0[_2357].y) * _2421) * _2422) + _2290;
        _2351 = (((_2408 * cbLight._m0[_2357].z) * _2421) * _2422) + _2291;
    }
    float _2453;
    float _2455;
    float _2457;
    if (_2075)
    {
        _2453 = _2347;
        _2455 = _2349;
        _2457 = _2351;
    }
    else
    {
        uint _2464 = _1889 + 3u;
        uint _2468 = _1889 + 11u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _392) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _469;
        float _2485 = cbLight._m0[_2464].y + _470;
        float _2486 = cbLight._m0[_2464].z + _471;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2464].xyz));
        float _4374 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2498 = dot(vec3(_389, _390, _391), vec3(_2491, _2492, _2493));
        float _4385 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4396 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2519 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2520 = 1.0 - _2483;
        float _2530 = (0.5 / (((_2166 * ((_2497 * _2520) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2520) + _2483) * _2497))) * _2497;
        float _4407 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2453 = (((_2519 * cbLight._m0[_2468].x) * _2532) * _2533) + _2347;
        _2455 = (((_2519 * cbLight._m0[_2468].y) * _2532) * _2533) + _2349;
        _2457 = (((_2519 * cbLight._m0[_2468].z) * _2532) * _2533) + _2351;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1887.y == 0u)
    {
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.x;
        uint _2566 = uint((float(_2554.y) * floor(float(uint(cbSceneParam._m0[85u].y * _491) / _2555))) + floor(float(uint(cbSceneParam._m0[85u].x * _490) / _2555)));
        float _2576 = (log2(_1665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2577 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        uint _2580 = uint(isnan(14.0) ? _2577 : (isnan(_2577) ? 14.0 : min(_2577, 14.0)));
        uvec4 _2585 = texelFetch(g_lightClusterGridBuffer, int(((_2580 << 2u) + (_2566 << 6u)) >> 2u));
        uint _2586 = _2585.x;
        uint _2587 = _2554.z;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((((1u << ((_2587 >> 4u) & 15u)) + 4294967295u) & _2586) == 0u) || ((_2587 & 240u) == 0u))
        {
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
        }
        else
        {
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            uint _2823 = 0u;
            uint _2832;
            bool _2833;
            for (;;)
            {
                _2832 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                _2833 = _2832 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2833)
                {
                    frontier_phi_73_pred = _2822;
                    frontier_phi_73_pred_1 = _2821;
                    frontier_phi_73_pred_2 = _2820;
                    frontier_phi_73_pred_3 = _2819;
                    frontier_phi_73_pred_4 = _2818;
                    frontier_phi_73_pred_5 = _2817;
                }
                else
                {
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    uint _2968;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2832;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    for (;;)
                    {
                        uint _2972 = uint(findLSB(_2968)) + (_2823 << 5u);
                        uint _2969 = (_2968 + 4294967295u) & _2968;
                        uint _2974 = _2972 * 48u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 3u)).x));
                        uint _2994 = (_2972 * 48u) + 4u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3013 = (_2972 * 48u) + 8u;
                        vec3 _3024 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x));
                        float _3028 = _2988.x - _1663;
                        float _3029 = _2988.y - _1664;
                        float _3030 = _2988.z - _1665;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_510, _513, _516), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2988.w);
                        float _4433 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3045 = sqrt(_3031) * _3007.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _3038) + _3049;
                        float _3055 = _3045 * _3045;
                        float _3059 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3044) / ((_3055 * 0.699999988079071044921875) + 1.0);
                        float _3063 = (-0.0) - _1663;
                        float _3064 = (-0.0) - _1664;
                        float _3065 = (-0.0) - _1665;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3079 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _570;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3070 + _3035;
                        float _3091 = _3071 + _3036;
                        float _3092 = _3072 + _3037;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_510, _513, _516), vec3(_3070, _3071, _3072));
                        float _4449 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3104 = dot(vec3(_510, _513, _516), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4460 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3048 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3038) + _3113;
                        float _4471 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4482 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) / ((_3111 * _3111) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2892 = (_3059 * _3007.x) + _2965;
                        _2893 = (_3059 * _3007.y) + _2966;
                        _2894 = (_3059 * _3007.z) + _2967;
                        _2889 = (_3139 * _3024.x) + _2962;
                        _2890 = (_3139 * _3024.y) + _2963;
                        _2891 = (_3139 * _3024.z) + _2964;
                        if (_2969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2969;
                        }
                    }
                    frontier_phi_73_pred = _2894;
                    frontier_phi_73_pred_1 = _2893;
                    frontier_phi_73_pred_2 = _2892;
                    frontier_phi_73_pred_3 = _2891;
                    frontier_phi_73_pred_4 = _2890;
                    frontier_phi_73_pred_5 = _2889;
                }
                _2676 = frontier_phi_73_pred;
                _2674 = frontier_phi_73_pred_1;
                _2672 = frontier_phi_73_pred_2;
                _2670 = frontier_phi_73_pred_3;
                _2668 = frontier_phi_73_pred_4;
                _2666 = frontier_phi_73_pred_5;
                uint _2824 = _2823 + 1u;
                if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2817 = _2666;
                    _2818 = _2668;
                    _2819 = _2670;
                    _2820 = _2672;
                    _2821 = _2674;
                    _2822 = _2676;
                    _2823 = _2824;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
        }
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.z;
        uint _2682 = (_2680 >> 8u) & 15u;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((4294967295u << _2682) & _2586) == 0u)
        {
            _2785 = _2665;
            _2787 = _2667;
            _2789 = _2669;
            _2791 = _2671;
            _2793 = _2673;
            _2795 = _2675;
        }
        else
        {
            float _2810 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
            float _2811 = _2810 * _1663;
            float _2812 = _2810 * _1664;
            float _2813 = _2810 * _1665;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2682 < ((_2680 >> 12u) & 15u))
            {
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2945 = _2665;
                float _2946 = _2667;
                float _2947 = _2669;
                float _2948 = _2671;
                float _2949 = _2673;
                float _2950 = _2675;
                uint _2951 = _2682;
                uint _2960;
                bool _2961;
                for (;;)
                {
                    _2960 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                    _2961 = _2960 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2961)
                    {
                        frontier_phi_84_pred = _2949;
                        frontier_phi_84_pred_1 = _2948;
                        frontier_phi_84_pred_2 = _2947;
                        frontier_phi_84_pred_3 = _2946;
                        frontier_phi_84_pred_4 = _2945;
                        frontier_phi_84_pred_5 = _2950;
                    }
                    else
                    {
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3166 = _2945;
                        float _3167 = _2946;
                        float _3168 = _2947;
                        float _3169 = _2948;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        uint _3172 = _2960;
                        uint _3173;
                        vec4 _3198;
                        float _3199;
                        vec4 _3214;
                        vec3 _3226;
                        vec4 _3242;
                        vec4 _3258;
                        float _3305;
                        bool _3306;
                        for (;;)
                        {
                            uint _3183 = ((_2951 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3172));
                            _3173 = (_3172 + 4294967295u) & _3172;
                            uint _3185 = _3183 * 40u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3199 = _3198.w;
                            uint _3201 = (_3183 * 40u) + 4u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3183 * 40u) + 8u;
                            _3226 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x));
                            uint _3229 = (_3183 * 40u) + 16u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3245 = (_3183 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3261 = (_3183 * 40u) + 24u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3280 = (_3183 * 40u) + 28u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3305 = fma(_1665, _3293.z, fma(_1664, _3293.y, _3293.x * _1663)) + _3293.w;
                            _3306 = !((fma(_1665, _3274.z, fma(_1664, _3274.y, _3274.x * _1663)) + _3274.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3306)
                            {
                                float _3333 = _3198.x - _1663;
                                float _3334 = _3198.y - _1664;
                                float _3335 = _3198.z - _1665;
                                float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                                float _3339 = inversesqrt(_3336);
                                float _3340 = _3339 * _3333;
                                float _3341 = _3339 * _3334;
                                float _3342 = _3339 * _3335;
                                float _3346 = 1.0 - (_3336 / (_3199 * _3199));
                                float _4493 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3351 = sqrt(_3336) * _3214.w;
                                float _3353 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                                float _3354 = _3353 * _3353;
                                float _3357 = ((1.0 - _3354) * dot(vec3(_3340, _3341, _3342), vec3(_510, _513, _516))) + _3354;
                                float _3360 = _3351 * _3351;
                                float _3364 = (fma(_1665, _3242.z, fma(_1664, _3242.y, _3242.x * _1663)) + _3242.w) / _3305;
                                float _3365 = (fma(_1665, _3258.z, fma(_1664, _3258.y, _3258.x * _1663)) + _3258.w) / _3305;
                                float _3369 = 1.0 - dot(vec2(_3364, _3365), vec2(_3364, _3365));
                                float _4509 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3371 = _3370 * (((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3347) / ((_3360 * 0.699999988079071044921875) + 1.0));
                                float _3383 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                                float _3384 = 1.0 - _570;
                                float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                                float _3392 = _3391 * _3391;
                                float _3393 = _3392 * _3392;
                                float _3394 = _3340 - _2811;
                                float _3395 = _3341 - _2812;
                                float _3396 = _3342 - _2813;
                                float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                                float _3404 = dot(vec3(_510, _513, _516), vec3((-0.0) - _2811, (-0.0) - _2812, (-0.0) - _2813));
                                float _4520 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3408 = dot(vec3(_510, _513, _516), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                                float _4531 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                                float _3416 = _3353 * _3392;
                                float _3417 = _3416 * _3416;
                                float _3423 = ((1.0 - _3417) * dot(vec3(_510, _513, _516), vec3(_3340, _3341, _3342))) + _3417;
                                float _4542 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3425 = 1.0 - _3392;
                                float _3435 = (0.5 / (((_3424 * ((_3407 * _3425) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3392) * _3407))) * _3424;
                                float _4553 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3445 = (_3370 * _3347) * (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3415 * _3415) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3371 * _3214.y;
                                frontier_phi_90_pred_1 = _3371 * _3214.x;
                                frontier_phi_90_pred_2 = _3445 * _3226.z;
                                frontier_phi_90_pred_3 = _3445 * _3226.y;
                                frontier_phi_90_pred_4 = _3445 * _3226.x;
                                frontier_phi_90_pred_5 = _3371 * _3214.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3453 = frontier_phi_90_pred;
                            _3452 = frontier_phi_90_pred_1;
                            _3451 = frontier_phi_90_pred_2;
                            _3450 = frontier_phi_90_pred_3;
                            _3449 = frontier_phi_90_pred_4;
                            _3454 = frontier_phi_90_pred_5;
                            _3156 = _3452 + _3169;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3153 = _3449 + _3166;
                            _3154 = _3450 + _3167;
                            _3155 = _3451 + _3168;
                            if (_3173 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3173;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3157;
                        frontier_phi_84_pred_1 = _3156;
                        frontier_phi_84_pred_2 = _3155;
                        frontier_phi_84_pred_3 = _3154;
                        frontier_phi_84_pred_4 = _3153;
                        frontier_phi_84_pred_5 = _3158;
                    }
                    _2794 = frontier_phi_84_pred;
                    _2792 = frontier_phi_84_pred_1;
                    _2790 = frontier_phi_84_pred_2;
                    _2788 = frontier_phi_84_pred_3;
                    _2786 = frontier_phi_84_pred_4;
                    _2796 = frontier_phi_84_pred_5;
                    uint _2952 = _2951 + 1u;
                    if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2945 = _2786;
                        _2946 = _2788;
                        _2947 = _2790;
                        _2948 = _2792;
                        _2949 = _2794;
                        _2950 = _2796;
                        _2951 = _2952;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2796;
                frontier_phi_65_66_ladder_1 = _2792;
                frontier_phi_65_66_ladder_2 = _2794;
                frontier_phi_65_66_ladder_3 = _2788;
                frontier_phi_65_66_ladder_4 = _2786;
                frontier_phi_65_66_ladder_5 = _2790;
            }
            else
            {
                frontier_phi_65_66_ladder = _2675;
                frontier_phi_65_66_ladder_1 = _2671;
                frontier_phi_65_66_ladder_2 = _2673;
                frontier_phi_65_66_ladder_3 = _2667;
                frontier_phi_65_66_ladder_4 = _2665;
                frontier_phi_65_66_ladder_5 = _2669;
            }
            _2785 = frontier_phi_65_66_ladder_4;
            _2787 = frontier_phi_65_66_ladder_3;
            _2789 = frontier_phi_65_66_ladder_5;
            _2791 = frontier_phi_65_66_ladder_1;
            _2793 = frontier_phi_65_66_ladder_2;
            _2795 = frontier_phi_65_66_ladder;
        }
        float _2800 = isnan(1.0) ? _554 : (isnan(_554) ? 1.0 : min(_554, 1.0));
        _2598 = (_2800 * _2791) + _2130;
        _2600 = (_2800 * _2793) + _2132;
        _2602 = (_2800 * _2795) + _2134;
        _2604 = ((_2785 * 0.039999999105930328369140625) * _2800) + _2453;
        _2606 = ((_2787 * 0.039999999105930328369140625) * _2800) + _2455;
        _2608 = ((_2789 * 0.039999999105930328369140625) * _2800) + _2457;
    }
    else
    {
        _2598 = _2130;
        _2600 = _2132;
        _2602 = _2134;
        _2604 = _2453;
        _2606 = _2455;
        _2608 = _2457;
    }
    float _4569 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4580 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4591 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2625 = ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2598 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _554))) + ((_2604 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _2626 = ((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2600 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _554))) + ((_2606 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _2627 = ((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2602 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _554))) + ((_2608 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    uint _2628 = _529 + 6u;
    float _2636 = _490 / cbSceneParam._m0[86u].x;
    float _2637 = _491 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2690 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2691 = _2690 / _411;
        float _2702 = _2691 * _462;
        float _2703 = _463 * _2691;
        float _2704 = (-0.0) - _2703;
        float _2705 = _2691 * _464;
        float _2707 = (cbSceneParam._m0[77u].w * _2704) / _2690;
        float _2708 = _2707 + cbSceneParam._m0[79u].w;
        float _2709 = cbSceneParam._m0[79u].w - _2703;
        float _2715 = sqrt(((_2702 * _2702) + (_2703 * _2703)) + (_2705 * _2705));
        float _2718 = (1.0 - (cbSceneParam._m0[77u].w / _2690)) * _2715;
        float _2723 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2725 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2902;
        if (abs((_2704 - _2707) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2902 = ((((_2708 > 0.0) ? exp2(_2723 * _2708) : (2.0 - exp2(_2725 * _2708))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2718;
        }
        else
        {
            float _2846 = 1.0 / cbSceneParam._m0[80u].x;
            float _2847 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : max(_2708, _2709));
            float _2848 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : min(_2708, _2709));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            _2902 = ((abs(_2715 / _2704) * cbSceneParam._m0[80u].y) * ((((_2857 - _2858) * 2.0) - ((exp2(_2723 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)))) - exp2(_2723 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))))) * _2846)) - ((exp2(_2725 * _2857) - exp2(_2725 * _2858)) * _2846))) + (_2718 * cbSceneParam._m0[80u].z);
        }
        vec4 _2904 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2913 = exp2((_2902 * (-1.44269502162933349609375)) * (1.0 - _2904.w));
        float _2914 = log2(_2913);
        float _2930 = log2(_2656);
        _2727 = (exp2(_2930 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].x)) * _2904.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2729 = (exp2(_2930 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].y)) * _2904.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2731 = (exp2(_2930 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].z)) * _2904.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2733 = _2913 * _2656;
    }
    else
    {
        _2727 = _2653;
        _2729 = _2654;
        _2731 = _2655;
        _2733 = _2656;
    }
    bool _2940;
    vec4 _2743;
    vec4 _2765;
    float _2767;
    float _2771;
    float _2772;
    float _2773;
    float _2774;
    bool _2784;
    for (;;)
    {
        _2743 = cbMatDynParam._m0[0u];
        float _2745 = roundEven(_2743.y);
        bool _2746 = _2745 == 3.0;
        float _2747 = log2(_2733);
        float _2754 = exp2(_2747 * cbSceneParam._m0[78u].x) * _2625;
        float _2755 = exp2(_2747 * cbSceneParam._m0[78u].y) * _2626;
        float _2756 = exp2(_2747 * cbSceneParam._m0[78u].z) * _2627;
        float _2763 = _478 + (-0.5);
        _2765 = cbMtdParam._m0[1u];
        _2767 = _2765.y * _2763;
        float _2770 = (_2745 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2771 = _2770 * (_2746 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2727)));
        _2772 = _2770 * (_2746 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2729)));
        _2773 = _2770 * (_2746 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2731)));
        _2774 = _2763 * 0.999000012874603271484375;
        _2784 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2784)
        {
            if ((cbInstanceData._m0[_529 + 7u].x + _2774) < 0.5)
            {
                _2940 = true;
                break;
            }
        }
        uint _2881 = _530 + uint(_2743.w);
        if ((cbInstanceData._m0[_2881].w < 1.0) && ((cbInstanceData._m0[_2881].w + _2774) < 0.5))
        {
            _2940 = true;
            break;
        }
        if ((_2767 + 1.0) < _2765.x)
        {
            _2940 = true;
            break;
        }
        _2940 = false;
        break;
    }
    float _3144;
    if (_2940)
    {
        discard_state = true;
        _3144 = 0.0;
    }
    else
    {
        _3144 = cbInstanceData._m0[_2628].w;
    }
    SV_Target.x = _2771;
    SV_Target.y = _2772;
    SV_Target.z = _2773;
    SV_Target.w = _3144;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2628].w;
    discard_exit();
}


