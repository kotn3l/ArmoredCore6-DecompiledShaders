#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1066;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _250.x;
    float _254 = _250.y;
    float _255 = _250.z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _300 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3684 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _310 = ((_287.z - _255) * _301) + _255;
    float _314 = ((((_287.x - _253) * _301) + _253) * 2.0) + (-1.0);
    float _316 = ((((_287.y - _254) * _301) + _254) * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3695 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))));
    float _325 = fma(_322, _234, fma(_316, _227, _314 * _213));
    float _328 = fma(_322, _235, fma(_316, _228, _314 * _214));
    float _331 = fma(_322, _236, fma(_316, _229, _314 * _215));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    vec4 _363 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _367 = (cbMtdParam._m0[11u].z + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_363.x * cbMtdParam._m0[11u].w);
    float _3706 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _390 = _385.x * cbMtdParam._m0[9u].x;
    float _391 = _385.y * cbMtdParam._m0[9u].y;
    float _392 = _385.z * cbMtdParam._m0[9u].z;
    vec4 _411 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _425 = (((_411.x * cbMtdParam._m0[10u].x) - _390) * _301) + _390;
    float _426 = (((_411.y * cbMtdParam._m0[10u].y) - _391) * _301) + _391;
    float _427 = (((_411.z * cbMtdParam._m0[10u].z) - _392) * _301) + _392;
    vec4 _440 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _451 = ((_440.x - _425) * _368) + _425;
    float _452 = ((_440.y - _426) * _368) + _426;
    float _453 = ((_440.z - _427) * _368) + _427;
    float _469 = _301 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _471 = _469 - (_469 * _368);
    vec4 _484 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _491 = (_484.x * 2.0) + (-1.0);
    float _492 = (_484.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3717 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _501 = ((_484.z - _310) * _368) + _310;
    float _508 = ((_491 - _314) * _368) + _314;
    float _509 = ((_492 - _316) * _368) + _316;
    float _510 = ((sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) - _322) * _368) + _322;
    float _513 = fma(_510, _234, fma(_509, _227, _508 * _213));
    float _516 = fma(_510, _235, fma(_509, _228, _508 * _214));
    float _519 = fma(_510, _236, fma(_509, _229, _508 * _215));
    float _523 = inversesqrt(dot(vec3(_513, _516, _519), vec3(_513, _516, _519)));
    float _524 = _523 * _513;
    float _525 = _523 * _516;
    float _526 = _523 * _519;
    float _3728 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _527 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3750 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3761 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3772 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _531 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _597 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _587);
    float _598 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _587);
    float _599 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _587);
    float _603 = inversesqrt(dot(vec3(_597, _598, _599), vec3(_597, _598, _599)));
    float _604 = _597 * _603;
    float _605 = _598 * _603;
    float _606 = _599 * _603;
    float _612 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _613 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _632 = fma(_526, cbSceneParam._m0[5u].z, fma(_525, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _524));
    float _635 = fma(_526, cbSceneParam._m0[6u].z, fma(_525, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _524));
    float _638 = fma(_526, cbSceneParam._m0[7u].z, fma(_525, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _524));
    uint _651 = uint(roundEven(NORMAL.w)) * 13u;
    uint _653 = (_651 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _659 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_653].x;
    float _660 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_653].y;
    float _661 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_653].z;
    float _3783 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _665 = 1.0 - _531;
    float _666 = _662 * _665;
    float _667 = _663 * _665;
    float _668 = _664 * _665;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _531;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _531;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _531;
    float _676 = _673 + 0.039999999105930328369140625;
    float _678 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    vec4 _688 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _612, cbSceneParam._m0[86u].y * _613));
    float _691 = _688.x * TEXCOORD_9.w;
    float _692 = dot(vec3(_524, _525, _526), vec3(_604, _605, _606));
    float _695 = _692 * 2.0;
    float _699 = (_695 * _524) - _604;
    float _700 = (_695 * _525) - _605;
    float _701 = (_695 * _526) - _606;
    float _705 = abs(dot(vec3(_604, _605, _606), vec3(_524, _525, _526)));
    float _3816 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _707 = sqrt(_527);
    float _720 = exp2((_707 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _726 = (1.0 - _720) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _727 = _720 * _707;
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1065;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _790 = fma(_763, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755));
        float _794 = fma(_763, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755));
        float _798 = fma(_763, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755));
        float _823 = _755 + _524;
        float _824 = _759 + _525;
        float _825 = _763 + _526;
        float _835 = fma(_825, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823)) - _790;
        float _836 = fma(_825, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823)) - _794;
        float _837 = fma(_825, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823)) - _798;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_790 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_794 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[34u].z) + ((((((_798 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _893 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_859.x + (-0.5));
        float _895 = _893 * (_859.y + (-0.5));
        float _896 = _893 * (_859.z + (-0.5));
        float _903 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_866.x + (-0.5));
        float _905 = _903 * (_866.y + (-0.5));
        float _906 = _903 * (_866.z + (-0.5));
        float _913 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_873.x + (-0.5));
        float _915 = _913 * (_873.y + (-0.5));
        float _916 = _913 * (_873.z + (-0.5));
        float _923 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_880.x + (-0.5));
        float _925 = _923 * (_880.y + (-0.5));
        float _926 = _923 * (_880.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _947 = (dot(vec3(_524, _525, _526), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _957 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3864 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_959 + 1.0))) + _964) * _927;
        float _974 = _895 * 0.5;
        float _975 = _905 * 0.5;
        float _976 = _915 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_524, _525, _526), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3897 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1001 + 1.0))) + _1006) * _928;
        float _1016 = _896 * 0.5;
        float _1017 = _906 * 0.5;
        float _1018 = _916 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_524, _525, _526), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3930 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1043 + 1.0))) + _1048) * _929;
        _1065 = _896;
        _1067 = _895;
        _1068 = _894;
        _1069 = _906;
        _1070 = _905;
        _1071 = _904;
        _1072 = _916;
        _1073 = _915;
        _1074 = _914;
        _1075 = _929;
        _1076 = _928;
        _1077 = _927;
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
    }
    else
    {
        _1065 = _1066;
        _1067 = _1066;
        _1068 = _1066;
        _1069 = _1066;
        _1070 = _1066;
        _1071 = _1066;
        _1072 = _1066;
        _1073 = _1066;
        _1074 = _1066;
        _1075 = _1066;
        _1076 = _1066;
        _1077 = _1066;
        _1078 = 0.0;
        _1079 = 0.0;
        _1080 = 0.0;
    }
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1106 = fma(_763, cbModelParam._m0[30u].z, fma(_759, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _755));
        float _1110 = fma(_763, cbModelParam._m0[31u].z, fma(_759, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _755));
        float _1114 = fma(_763, cbModelParam._m0[32u].z, fma(_759, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _755));
        float _1137 = _755 + _524;
        float _1138 = _759 + _525;
        float _1139 = _763 + _526;
        float _1149 = fma(_1139, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1106 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1110 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[35u].z) + ((((((_1114 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1205 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1172.x + (-0.5));
        float _1207 = _1205 * (_1172.y + (-0.5));
        float _1208 = _1205 * (_1172.z + (-0.5));
        float _1215 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1179.x + (-0.5));
        float _1217 = _1215 * (_1179.y + (-0.5));
        float _1218 = _1215 * (_1179.z + (-0.5));
        float _1225 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1186.x + (-0.5));
        float _1227 = _1225 * (_1186.y + (-0.5));
        float _1228 = _1225 * (_1186.z + (-0.5));
        float _1235 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1193.x + (-0.5));
        float _1237 = _1235 * (_1193.y + (-0.5));
        float _1238 = _1235 * (_1193.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_524, _525, _526), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3993 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1269 + 1.0))) + _1274) * _1239;
        float _1284 = _1207 * 0.5;
        float _1285 = _1217 * 0.5;
        float _1286 = _1227 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_524, _525, _526), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4026 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1311 + 1.0))) + _1316) * _1240;
        float _1326 = _1208 * 0.5;
        float _1327 = _1218 * 0.5;
        float _1328 = _1228 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_524, _525, _526), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4059 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1353 + 1.0))) + _1358) * _1241;
        _1375 = _1208;
        _1376 = _1207;
        _1377 = _1206;
        _1378 = _1218;
        _1379 = _1217;
        _1380 = _1216;
        _1381 = _1228;
        _1382 = _1227;
        _1383 = _1226;
        _1384 = _1241;
        _1385 = _1240;
        _1386 = _1239;
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1066;
        _1376 = _1066;
        _1377 = _1066;
        _1378 = _1066;
        _1379 = _1066;
        _1380 = _1066;
        _1381 = _1066;
        _1382 = _1066;
        _1383 = _1066;
        _1384 = _1066;
        _1385 = _1066;
        _1386 = _1066;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1080)) + _1080;
    float _1422 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1399));
    float _1443 = _699 * 0.5;
    float _1444 = _700 * 0.5;
    float _1445 = _701 * 0.5;
    float _1446 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1449 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1452 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1486;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1459 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1065, _1069, _1072, _1075));
        float _1463 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1467 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1474 = dot(vec4(cbModelParam._m0[39u]), vec4(_1443, _1444, _1445, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1497;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1488 = dot(vec4(cbModelParam._m0[40u]), vec4(_1443, _1444, _1445, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1501 = (_1497 * cbModelParam._m0[1u].x) + (_1486 * (1.0 - cbModelParam._m0[1u].x));
    float _1511 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _527);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1511 : min(cbModelParam._m0[25u].z, _1511));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1561 = fma(_763, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755)) + cbModelParam._m0[13u].w;
        float _1565 = fma(_763, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755)) + cbModelParam._m0[14u].w;
        float _1569 = fma(_763, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755)) + cbModelParam._m0[15u].w;
        float _1572 = fma(_701, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699));
        float _1575 = fma(_701, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699));
        float _1578 = fma(_701, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699));
        float _1606;
        if (_1572 > 0.0)
        {
            _1606 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1606 = frontier_phi_16_14_ladder;
        }
        float _1781;
        if (_1575 > 0.0)
        {
            _1781 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1781 = frontier_phi_25_21_ladder;
        }
        float _2076;
        if (_1578 > 0.0)
        {
            _2076 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2076 = frontier_phi_37_32_ladder;
        }
        float _2078 = isnan(_1781) ? _1606 : (isnan(_1606) ? _1781 : min(_1606, _1781));
        float _2079 = isnan(_2076) ? _2078 : (isnan(_2078) ? _2076 : min(_2078, _2076));
        float _2083 = (_2079 * _1572) + _1561;
        float _2084 = (_2079 * _1575) + _1565;
        float _2085 = (_2079 * _1578) + _1569;
        float _2086 = _2079 * 9.9999997473787516355514526367188e-05;
        float _2088 = (-1.0) - _2086;
        float _2090 = _2086 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2085 > _2090) || ((_2085 < _2088) || ((_2084 > _2090) || ((_2084 < _2088) || ((_2083 < _2088) || (_2083 > _2090))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2230 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2085, cbModelParam._m0[9u].z, fma(_2084, cbModelParam._m0[9u].y, _2083 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2085, cbModelParam._m0[10u].z, fma(_2084, cbModelParam._m0[10u].y, _2083 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2085, cbModelParam._m0[11u].z, fma(_2084, cbModelParam._m0[11u].y, _2083 * cbModelParam._m0[11u].x))), _1512);
            frontier_phi_15_37_ladder = _2230.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2230.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2230.z * cbModelParam._m0[1u].y;
        }
        _1594 = frontier_phi_15_37_ladder_1;
        _1596 = frontier_phi_15_37_ladder;
        _1598 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_699, _700, _701), _1512);
        _1594 = _1582.x * cbModelParam._m0[1u].y;
        _1596 = _1582.y * cbModelParam._m0[1u].y;
        _1598 = _1582.z * cbModelParam._m0[1u].y;
    }
    float _1602 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _527);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1602 : min(cbModelParam._m0[25u].w, _1602));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1660 = fma(_763, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755)) + cbModelParam._m0[21u].w;
        float _1664 = fma(_763, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755)) + cbModelParam._m0[22u].w;
        float _1668 = fma(_763, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755)) + cbModelParam._m0[23u].w;
        float _1671 = fma(_701, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699));
        float _1674 = fma(_701, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699));
        float _1677 = fma(_701, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699));
        float _1786;
        if (_1671 > 0.0)
        {
            _1786 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1786 = frontier_phi_27_23_ladder;
        }
        float _2103;
        if (_1674 > 0.0)
        {
            _2103 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2103 = frontier_phi_39_34_ladder;
        }
        float _2441;
        if (_1677 > 0.0)
        {
            _2441 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2441 = frontier_phi_49_46_ladder;
        }
        float _2443 = isnan(_2103) ? _1786 : (isnan(_1786) ? _2103 : min(_1786, _2103));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1671) + _1660;
        float _2449 = (_2444 * _1674) + _1664;
        float _2450 = (_2444 * _1677) + _1668;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1603);
            frontier_phi_24_49_ladder = _2572.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2572.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2572.x * cbModelParam._m0[1u].z;
        }
        _1696 = frontier_phi_24_49_ladder_2;
        _1698 = frontier_phi_24_49_ladder_1;
        _1700 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_699, _700, _701), _1603);
        _1696 = _1680.x * cbModelParam._m0[1u].z;
        _1698 = _1680.y * cbModelParam._m0[1u].z;
        _1700 = _1680.z * cbModelParam._m0[1u].z;
    }
    float _1713 = (((_726 * _676) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1715 = (((_726 * _678) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1717 = (((_726 * _679) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1700 - _1598)) + _1598);
    float _1720 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, _1713 * cbSceneParam._m0[91u].x));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1772 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1773 = _1760 / _1772;
    float _1774 = _1764 / _1772;
    float _1775 = _1768 / _1772;
    float _1922;
    float _1923;
    float _1924;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1802 = ((uint(_1775 > cbSceneParam._m0[59u].y) + uint(_1775 > cbSceneParam._m0[59u].x)) + uint(_1775 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1803 = _1802 + 43u;
        uint _1811 = _1802 + 44u;
        uint _1819 = _1802 + 45u;
        uint _1827 = _1802 + 46u;
        float _1838 = fma(_1772, cbSceneParam._m0[_1803].w, fma(_1768, cbSceneParam._m0[_1803].z, fma(_1764, cbSceneParam._m0[_1803].y, _1760 * cbSceneParam._m0[_1803].x)));
        float _1842 = fma(_1772, cbSceneParam._m0[_1811].w, fma(_1768, cbSceneParam._m0[_1811].z, fma(_1764, cbSceneParam._m0[_1811].y, _1760 * cbSceneParam._m0[_1811].x)));
        float _1850 = fma(_1772, cbSceneParam._m0[_1827].w, fma(_1768, cbSceneParam._m0[_1827].z, fma(_1764, cbSceneParam._m0[_1827].y, _1760 * cbSceneParam._m0[_1827].x)));
        float _1855 = cbSceneParam._m0[33u].z * _1850;
        float _1857 = cbSceneParam._m0[33u].w * _1850;
        float _1860 = fma(_1772, cbSceneParam._m0[_1819].w, fma(_1768, cbSceneParam._m0[_1819].z, fma(_1764, cbSceneParam._m0[_1819].y, _1760 * cbSceneParam._m0[_1819].x))) / _1850;
        float _1908 = (cbSceneParam._m0[33u].x - sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775))) * cbSceneParam._m0[33u].y;
        float _4185 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1915 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 + _1838) / _1850, (_1857 + _1842) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 + _1838) / _1850, (_1842 - _1855) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 - _1855) / _1850, (_1842 - _1857) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 - _1857) / _1850, (_1855 + _1842) / _1850), _1860), 0.0)).x), vec4(0.25)));
        _1922 = 1.0 - (_1915 * cbSceneParam._m0[34u].x);
        _1923 = 1.0 - (_1915 * cbSceneParam._m0[34u].y);
        _1924 = 1.0 - (_1915 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1922 = 1.0;
        _1923 = 1.0;
        _1924 = 1.0;
    }
    float _1988;
    float _1990;
    float _1992;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1976 = fma(_1772, cbSceneParam._m0[63u].w, fma(_1768, cbSceneParam._m0[63u].z, fma(_1764, cbSceneParam._m0[63u].y, _1760 * cbSceneParam._m0[63u].x)));
        float _1977 = fma(_1772, cbSceneParam._m0[60u].w, fma(_1768, cbSceneParam._m0[60u].z, fma(_1764, cbSceneParam._m0[60u].y, _1760 * cbSceneParam._m0[60u].x))) / _1976;
        float _1978 = fma(_1772, cbSceneParam._m0[61u].w, fma(_1768, cbSceneParam._m0[61u].z, fma(_1764, cbSceneParam._m0[61u].y, _1760 * cbSceneParam._m0[61u].x))) / _1976;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1977 >= cbSceneParam._m0[64u].x) && (_1978 >= cbSceneParam._m0[64u].y)) && (_1977 <= cbSceneParam._m0[64u].z)) && (_1978 <= cbSceneParam._m0[64u].w))
        {
            float _2116 = fma(_1772, cbSceneParam._m0[62u].w, fma(_1768, cbSceneParam._m0[62u].z, fma(_1764, cbSceneParam._m0[62u].y, _1760 * cbSceneParam._m0[62u].x))) / _1976;
            float _2120 = isnan(cbSceneParam._m0[41u].w) ? _2116 : (isnan(_2116) ? cbSceneParam._m0[41u].w : max(_2116, cbSceneParam._m0[41u].w));
            float _2163 = (cbSceneParam._m0[33u].x - sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775))) * cbSceneParam._m0[33u].y;
            float _4201 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
            float _2170 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1977, cbSceneParam._m0[33u].w + _1978), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1977, _1978 - cbSceneParam._m0[33u].z), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1977 - cbSceneParam._m0[33u].z, _1978 - cbSceneParam._m0[33u].w), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1977 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1978), _2120), 0.0)).x), vec4(0.25)));
            float _2174 = 1.0 - (_2170 * cbSceneParam._m0[34u].x);
            float _2175 = 1.0 - (_2170 * cbSceneParam._m0[34u].y);
            float _2176 = 1.0 - (_2170 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2175) ? _1923 : (isnan(_1923) ? _2175 : min(_1923, _2175));
            frontier_phi_36_35_ladder_1 = isnan(_2176) ? _1924 : (isnan(_1924) ? _2176 : min(_1924, _2176));
            frontier_phi_36_35_ladder_2 = isnan(_2174) ? _1922 : (isnan(_1922) ? _2174 : min(_1922, _2174));
        }
        else
        {
            frontier_phi_36_35_ladder = _1923;
            frontier_phi_36_35_ladder_1 = _1924;
            frontier_phi_36_35_ladder_2 = _1922;
        }
        _1988 = frontier_phi_36_35_ladder_2;
        _1990 = frontier_phi_36_35_ladder;
        _1992 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1988 = _1922;
        _1990 = _1923;
        _1992 = _1924;
    }
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_651 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2007 = _691 + (-1.0);
    float _2012 = (cbLight._m0[_2000].x * _2007) + 1.0;
    float _2013 = (cbLight._m0[_2000].y * _2007) + 1.0;
    float _2014 = (cbLight._m0[_2000].z * _2007) + 1.0;
    float _2015 = (cbLight._m0[_2000].w * _2007) + 1.0;
    uint _2016 = _1999 + 5u;
    float _2022 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2026 = _1999 + 4u;
    float _2035 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2039 = _1999 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_524, _525, _526));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_524, _525, _526));
    float _4237 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4248 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2016].x * _2022) * _2060) + (((cbLight._m0[_2026].x * _1988) * _2035) * _2058);
    float _2068 = ((_2022 * cbLight._m0[_2016].y) * _2060) + (((cbLight._m0[_2026].y * _1990) * _2035) * _2058);
    float _2069 = ((_2022 * cbLight._m0[_2016].z) * _2060) + (((cbLight._m0[_2026].z * _1992) * _2035) * _2058);
    uvec4 _2073 = floatBitsToUint(cbLight._m0[_1999 + 12u]);
    bool _2075 = _2073.x == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2075)
    {
        _2177 = _2067;
        _2179 = _2068;
        _2181 = _2069;
    }
    else
    {
        uint _2185 = _1999 + 6u;
        float _2201 = (dot(vec3(cbLight._m0[_1999 + 2u].xyz), vec3(_524, _525, _526)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4259 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2204 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2177 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _2067;
        _2179 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _2068;
        _2181 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _2069;
    }
    bool _2184 = _2073.y == 0u;
    float _2239;
    float _2241;
    float _2243;
    if (_2184)
    {
        _2239 = _2177;
        _2241 = _2179;
        _2243 = _2181;
    }
    else
    {
        uint _2412 = _1999 + 7u;
        float _2428 = (dot(vec3(cbLight._m0[_1999 + 3u].xyz), vec3(_524, _525, _526)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4275 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2431 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2239 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2177;
        _2241 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2179;
        _2243 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2181;
    }
    uint _2246 = _1999 + 8u;
    float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _527) * 0.949999988079071044921875);
    float _2260 = _2259 * _2259;
    float _2261 = cbLight._m0[_1999].x + _604;
    float _2262 = cbLight._m0[_1999].y + _605;
    float _2263 = cbLight._m0[_1999].z + _606;
    float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
    float _2268 = _2267 * _2261;
    float _2269 = _2267 * _2262;
    float _2270 = _2267 * _2263;
    float _2271 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_1999].xyz));
    float _4291 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2275 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2276 = dot(vec3(_524, _525, _526), vec3(_2268, _2269, _2270));
    float _4313 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2268, _2269, _2270));
    float _4324 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2260 * _2260;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2296 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
    float _2297 = 0.959999978542327880859375 - _673;
    float _2299 = 0.959999978542327880859375 - _674;
    float _2300 = 0.959999978542327880859375 - _675;
    float _2307 = 1.0 - _2260;
    float _2318 = (0.5 / (((_2275 * ((_2274 * _2307) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2307) + _2260) * _2274))) * _2274;
    float _4335 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    uint _2334 = _1999 + 9u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _527) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2039].x + _604;
    float _2348 = cbLight._m0[_2039].y + _605;
    float _2349 = cbLight._m0[_2039].z + _606;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2039].xyz));
    float _4346 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2361 = dot(vec3(_524, _525, _526), vec3(_2354, _2355, _2356));
    float _4357 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2354, _2355, _2356));
    float _4368 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2346 * _2346;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
    float _2387 = 1.0 - _2346;
    float _2397 = (0.5 / (((_2275 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2387) + _2346) * _2360))) * _2360;
    float _4379 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    float _2409 = (((((_2380 * _2297) + _676) * cbLight._m0[_2334].x) * _2399) * _2022) + ((((cbLight._m0[_2246].x * _1988) * ((_2296 * _2297) + _676)) * _2320) * _2035);
    float _2410 = (((((_2380 * _2299) + _678) * cbLight._m0[_2334].y) * _2399) * _2022) + ((((cbLight._m0[_2246].y * _1990) * ((_2296 * _2299) + _678)) * _2320) * _2035);
    float _2411 = (((((_2380 * _2300) + _679) * cbLight._m0[_2334].z) * _2399) * _2022) + ((((cbLight._m0[_2246].z * _1992) * ((_2296 * _2300) + _679)) * _2320) * _2035);
    float _2467;
    float _2469;
    float _2471;
    if (_2075)
    {
        _2467 = _2409;
        _2469 = _2410;
        _2471 = _2411;
    }
    else
    {
        uint _2473 = _1999 + 2u;
        uint _2477 = _1999 + 10u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _527) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _604;
        float _2494 = cbLight._m0[_2473].y + _605;
        float _2495 = cbLight._m0[_2473].z + _606;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2473].xyz));
        float _4390 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2507 = dot(vec3(_524, _525, _526), vec3(_2500, _2501, _2502));
        float _4401 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4412 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2275 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2533) + _2492) * _2506))) * _2506;
        float _4423 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2467 = (((((_2526 * _2297) + _676) * cbLight._m0[_2477].x) * _2545) * _2546) + _2409;
        _2469 = (((((_2526 * _2299) + _678) * cbLight._m0[_2477].y) * _2545) * _2546) + _2410;
        _2471 = (((((_2526 * _2300) + _679) * cbLight._m0[_2477].z) * _2545) * _2546) + _2411;
    }
    float _2577;
    float _2579;
    float _2581;
    if (_2184)
    {
        _2577 = _2467;
        _2579 = _2469;
        _2581 = _2471;
    }
    else
    {
        uint _2588 = _1999 + 3u;
        uint _2592 = _1999 + 11u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _527) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _604;
        float _2609 = cbLight._m0[_2588].y + _605;
        float _2610 = cbLight._m0[_2588].z + _606;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2588].xyz));
        float _4439 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2622 = dot(vec3(_524, _525, _526), vec3(_2615, _2616, _2617));
        float _4450 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4461 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
        float _2648 = 1.0 - _2607;
        float _2658 = (0.5 / (((_2275 * ((_2621 * _2648) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2648) + _2607) * _2621))) * _2621;
        float _4472 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2577 = (((((_2641 * _2297) + _676) * cbLight._m0[_2592].x) * _2660) * _2661) + _2467;
        _2579 = (((((_2641 * _2299) + _678) * cbLight._m0[_2592].y) * _2660) * _2661) + _2469;
        _2581 = (((((_2641 * _2300) + _679) * cbLight._m0[_2592].z) * _2660) * _2661) + _2471;
    }
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_1997.y == 0u)
    {
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.x;
        uint _2694 = uint((float(_2682.y) * floor(float(uint(cbSceneParam._m0[85u].y * _613) / _2683))) + floor(float(uint(cbSceneParam._m0[85u].x * _612) / _2683)));
        float _2704 = (log2(_1775 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2705 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        uint _2708 = uint(isnan(14.0) ? _2705 : (isnan(_2705) ? 14.0 : min(_2705, 14.0)));
        uvec4 _2713 = texelFetch(g_lightClusterGridBuffer, int(((_2708 << 2u) + (_2694 << 6u)) >> 2u));
        uint _2714 = _2713.x;
        uint _2715 = _2682.z;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((((1u << ((_2715 >> 4u) & 15u)) + 4294967295u) & _2714) == 0u) || ((_2715 & 240u) == 0u))
        {
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
        }
        else
        {
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            uint _2943 = 0u;
            uint _2952;
            bool _2953;
            for (;;)
            {
                _2952 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                _2953 = _2952 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2953)
                {
                    frontier_phi_68_pred = _2942;
                    frontier_phi_68_pred_1 = _2941;
                    frontier_phi_68_pred_2 = _2940;
                    frontier_phi_68_pred_3 = _2938;
                    frontier_phi_68_pred_4 = _2937;
                    frontier_phi_68_pred_5 = _2939;
                }
                else
                {
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    uint _3067;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2952;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3071 = uint(findLSB(_3067)) + (_2943 << 5u);
                        uint _3068 = (_3067 + 4294967295u) & _3067;
                        uint _3073 = _3071 * 48u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3093 = (_3071 * 48u) + 4u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3112 = (_3071 * 48u) + 8u;
                        vec3 _3123 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x));
                        float _3127 = _3087.x - _1773;
                        float _3128 = _3087.y - _1774;
                        float _3129 = _3087.z - _1775;
                        float _3130 = dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129));
                        float _3133 = inversesqrt(_3130);
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3137 = dot(vec3(_632, _635, _638), vec3(_3134, _3135, _3136));
                        float _3142 = 1.0 - (_3130 * _3087.w);
                        float _4498 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3144 = sqrt(_3130) * _3106.w;
                        float _3147 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3137) + _3148;
                        float _3154 = _3144 * _3144;
                        float _3158 = ((isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))) * _3143) / ((_3154 * 0.699999988079071044921875) + 1.0);
                        float _3162 = (-0.0) - _1773;
                        float _3163 = (-0.0) - _1774;
                        float _3164 = (-0.0) - _1775;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3178 = exp2(log2(1.0 / ((_3154 * 3.5) + 5.0)) * 0.25);
                        float _3179 = 1.0 - _707;
                        float _3186 = sqrt(1.0 - ((1.0 - (_3179 * _3179)) * (1.0 - (_3178 * _3178))));
                        float _3187 = _3186 * _3186;
                        float _3188 = _3187 * _3187;
                        float _3189 = _3169 + _3134;
                        float _3190 = _3170 + _3135;
                        float _3191 = _3171 + _3136;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3199 = dot(vec3(_632, _635, _638), vec3(_3169, _3170, _3171));
                        float _4514 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3203 = dot(vec3(_632, _635, _638), vec3(_3195 * _3189, _3195 * _3190, _3195 * _3191));
                        float _4525 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3210 = ((_3206 * _3206) * (_3188 + (-1.0))) + 1.0;
                        float _3211 = _3147 * _3187;
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3137) + _3212;
                        float _4536 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3217 = 1.0 - _3187;
                        float _3227 = (0.5 / (((_3216 * ((_3202 * _3217) + _3187)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3187) * _3202))) * _3216;
                        float _4547 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3238 = (((_3188 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3210 * _3210) * ((_3154 * 2.1991131305694580078125) + 3.141590118408203125))) * _3143;
                        _2996 = (_3158 * _3106.x) + _3064;
                        _2997 = (_3158 * _3106.y) + _3065;
                        _2998 = (_3158 * _3106.z) + _3066;
                        _2993 = (_3238 * _3123.x) + _3061;
                        _2994 = (_3238 * _3123.y) + _3062;
                        _2995 = (_3238 * _3123.z) + _3063;
                        if (_3068 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _3068;
                        }
                    }
                    frontier_phi_68_pred = _2998;
                    frontier_phi_68_pred_1 = _2997;
                    frontier_phi_68_pred_2 = _2996;
                    frontier_phi_68_pred_3 = _2994;
                    frontier_phi_68_pred_4 = _2993;
                    frontier_phi_68_pred_5 = _2995;
                }
                _2804 = frontier_phi_68_pred;
                _2802 = frontier_phi_68_pred_1;
                _2800 = frontier_phi_68_pred_2;
                _2796 = frontier_phi_68_pred_3;
                _2794 = frontier_phi_68_pred_4;
                _2798 = frontier_phi_68_pred_5;
                uint _2944 = _2943 + 1u;
                if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2937 = _2794;
                    _2938 = _2796;
                    _2939 = _2798;
                    _2940 = _2800;
                    _2941 = _2802;
                    _2942 = _2804;
                    _2943 = _2944;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
        }
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.z;
        uint _2810 = (_2808 >> 8u) & 15u;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((4294967295u << _2810) & _2714) == 0u)
        {
            _2905 = _2793;
            _2907 = _2795;
            _2909 = _2797;
            _2911 = _2799;
            _2913 = _2801;
            _2915 = _2803;
        }
        else
        {
            float _2930 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
            float _2931 = _2930 * _1773;
            float _2932 = _2930 * _1774;
            float _2933 = _2930 * _1775;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2810 < ((_2808 >> 12u) & 15u))
            {
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _3044 = _2793;
                float _3045 = _2795;
                float _3046 = _2797;
                float _3047 = _2799;
                float _3048 = _2801;
                float _3049 = _2803;
                uint _3050 = _2810;
                uint _3059;
                bool _3060;
                for (;;)
                {
                    _3059 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                    _3060 = _3059 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3060)
                    {
                        frontier_phi_74_pred = _3046;
                        frontier_phi_74_pred_1 = _3045;
                        frontier_phi_74_pred_2 = _3044;
                        frontier_phi_74_pred_3 = _3049;
                        frontier_phi_74_pred_4 = _3048;
                        frontier_phi_74_pred_5 = _3047;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        float _3259 = _3047;
                        float _3260 = _3048;
                        float _3261 = _3049;
                        uint _3262 = _3059;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3332;
                        vec4 _3348;
                        float _3395;
                        bool _3396;
                        for (;;)
                        {
                            uint _3273 = ((_3050 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3319 = (_3273 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3273 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3273 * 40u) + 24u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3370 = (_3273 * 40u) + 28u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3395 = fma(_1775, _3383.z, fma(_1774, _3383.y, _3383.x * _1773)) + _3383.w;
                            _3396 = !((fma(_1775, _3364.z, fma(_1774, _3364.y, _3364.x * _1773)) + _3364.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3396)
                            {
                                float _3423 = _3288.x - _1773;
                                float _3424 = _3288.y - _1774;
                                float _3425 = _3288.z - _1775;
                                float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                                float _3429 = inversesqrt(_3426);
                                float _3430 = _3429 * _3423;
                                float _3431 = _3429 * _3424;
                                float _3432 = _3429 * _3425;
                                float _3436 = 1.0 - (_3426 / (_3289 * _3289));
                                float _4558 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3441 = sqrt(_3426) * _3304.w;
                                float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                                float _3444 = _3443 * _3443;
                                float _3447 = ((1.0 - _3444) * dot(vec3(_3430, _3431, _3432), vec3(_632, _635, _638))) + _3444;
                                float _3450 = _3441 * _3441;
                                float _3454 = (fma(_1775, _3332.z, fma(_1774, _3332.y, _3332.x * _1773)) + _3332.w) / _3395;
                                float _3455 = (fma(_1775, _3348.z, fma(_1774, _3348.y, _3348.x * _1773)) + _3348.w) / _3395;
                                float _3459 = 1.0 - dot(vec2(_3454, _3455), vec2(_3454, _3455));
                                float _4574 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3461 = _3460 * (((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3437) / ((_3450 * 0.699999988079071044921875) + 1.0));
                                float _3473 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                                float _3474 = 1.0 - _707;
                                float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                                float _3482 = _3481 * _3481;
                                float _3483 = _3482 * _3482;
                                float _3484 = _3430 - _2931;
                                float _3485 = _3431 - _2932;
                                float _3486 = _3432 - _2933;
                                float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                                float _3494 = dot(vec3(_632, _635, _638), vec3((-0.0) - _2931, (-0.0) - _2932, (-0.0) - _2933));
                                float _4585 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3498 = dot(vec3(_632, _635, _638), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                                float _4596 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                                float _3506 = _3443 * _3482;
                                float _3507 = _3506 * _3506;
                                float _3513 = ((1.0 - _3507) * dot(vec3(_632, _635, _638), vec3(_3430, _3431, _3432))) + _3507;
                                float _4607 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3515 = 1.0 - _3482;
                                float _3525 = (0.5 / (((_3514 * ((_3497 * _3515) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3482) * _3497))) * _3514;
                                float _4618 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3535 = (_3460 * _3437) * (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3505 * _3505) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3535 * _3316.z;
                                frontier_phi_80_pred_1 = _3535 * _3316.y;
                                frontier_phi_80_pred_2 = _3535 * _3316.x;
                                frontier_phi_80_pred_3 = _3461 * _3304.z;
                                frontier_phi_80_pred_4 = _3461 * _3304.y;
                                frontier_phi_80_pred_5 = _3461 * _3304.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_80_pred;
                            _3540 = frontier_phi_80_pred_1;
                            _3539 = frontier_phi_80_pred_2;
                            _3544 = frontier_phi_80_pred_3;
                            _3543 = frontier_phi_80_pred_4;
                            _3542 = frontier_phi_80_pred_5;
                            _3246 = _3542 + _3259;
                            _3247 = _3543 + _3260;
                            _3248 = _3544 + _3261;
                            _3243 = _3539 + _3256;
                            _3244 = _3540 + _3257;
                            _3245 = _3541 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3245;
                        frontier_phi_74_pred_1 = _3244;
                        frontier_phi_74_pred_2 = _3243;
                        frontier_phi_74_pred_3 = _3248;
                        frontier_phi_74_pred_4 = _3247;
                        frontier_phi_74_pred_5 = _3246;
                    }
                    _2910 = frontier_phi_74_pred;
                    _2908 = frontier_phi_74_pred_1;
                    _2906 = frontier_phi_74_pred_2;
                    _2916 = frontier_phi_74_pred_3;
                    _2914 = frontier_phi_74_pred_4;
                    _2912 = frontier_phi_74_pred_5;
                    uint _3051 = _3050 + 1u;
                    if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3044 = _2906;
                        _3045 = _2908;
                        _3046 = _2910;
                        _3047 = _2912;
                        _3048 = _2914;
                        _3049 = _2916;
                        _3050 = _3051;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2914;
                frontier_phi_62_63_ladder_1 = _2912;
                frontier_phi_62_63_ladder_2 = _2910;
                frontier_phi_62_63_ladder_3 = _2916;
                frontier_phi_62_63_ladder_4 = _2908;
                frontier_phi_62_63_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_62_63_ladder = _2801;
                frontier_phi_62_63_ladder_1 = _2799;
                frontier_phi_62_63_ladder_2 = _2797;
                frontier_phi_62_63_ladder_3 = _2803;
                frontier_phi_62_63_ladder_4 = _2795;
                frontier_phi_62_63_ladder_5 = _2793;
            }
            _2905 = frontier_phi_62_63_ladder_5;
            _2907 = frontier_phi_62_63_ladder_4;
            _2909 = frontier_phi_62_63_ladder_2;
            _2911 = frontier_phi_62_63_ladder_1;
            _2913 = frontier_phi_62_63_ladder;
            _2915 = frontier_phi_62_63_ladder_3;
        }
        float _2920 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
        _2726 = (_2920 * _2911) + _2239;
        _2728 = (_2920 * _2913) + _2241;
        _2730 = (_2920 * _2915) + _2243;
        _2732 = ((_2905 * _676) * _2920) + _2577;
        _2734 = ((_2907 * _678) * _2920) + _2579;
        _2736 = ((_2909 * _679) * _2920) + _2581;
    }
    else
    {
        _2726 = _2239;
        _2728 = _2241;
        _2730 = _2243;
        _2732 = _2577;
        _2734 = _2579;
        _2736 = _2581;
    }
    float _4634 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4645 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4656 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    uint _2756 = _651 + 6u;
    float _2764 = _612 / cbSceneParam._m0[86u].x;
    float _2765 = _613 / cbSceneParam._m0[86u].y;
    vec4 _2779 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2781 = _2779.x;
    float _2782 = _2779.y;
    float _2783 = _2779.z;
    float _2784 = _2779.w;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2818 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2819 = _2818 / _547;
        float _2830 = _2819 * _597;
        float _2831 = _598 * _2819;
        float _2832 = (-0.0) - _2831;
        float _2833 = _2819 * _599;
        float _2835 = (cbSceneParam._m0[77u].w * _2832) / _2818;
        float _2836 = _2835 + cbSceneParam._m0[79u].w;
        float _2837 = cbSceneParam._m0[79u].w - _2831;
        float _2843 = sqrt(((_2830 * _2830) + (_2831 * _2831)) + (_2833 * _2833));
        float _2846 = (1.0 - (cbSceneParam._m0[77u].w / _2818)) * _2843;
        float _2851 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2853 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2832 - _2835) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2836 > 0.0) ? exp2(_2851 * _2836) : (2.0 - exp2(_2853 * _2836))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2846;
        }
        else
        {
            float _2966 = 1.0 / cbSceneParam._m0[80u].x;
            float _2967 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : max(_2836, _2837));
            float _2968 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : min(_2836, _2837));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            _3006 = ((abs(_2843 / _2832) * cbSceneParam._m0[80u].y) * ((((_2977 - _2978) * 2.0) - ((exp2(_2851 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)))) - exp2(_2851 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))))) * _2966)) - ((exp2(_2853 * _2977) - exp2(_2853 * _2978)) * _2966))) + (_2846 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2784);
        _2855 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2781;
        _2857 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2782;
        _2859 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2783;
        _2861 = _3017 * _2784;
    }
    else
    {
        _2855 = _2781;
        _2857 = _2782;
        _2859 = _2783;
        _2861 = _2784;
    }
    float _2873 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2874 = _2873 == 3.0;
    float _2875 = log2(_2861);
    float _2882 = exp2(_2875 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2726 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _691))) + ((_2732 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1501)) * cbPerFrame._m0[3u].x));
    float _2883 = exp2(_2875 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2728 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _691))) + ((_2734 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1501)) * cbPerFrame._m0[3u].x));
    float _2884 = exp2(_2875 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2730 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _691))) + ((_2736 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1501)) * cbPerFrame._m0[3u].x));
    float _2893 = (_2873 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2893 * (_2874 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2855)));
    SV_Target.y = _2893 * (_2874 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.z = _2893 * (_2874 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.w = cbInstanceData._m0[_2756].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2756].w;
}


