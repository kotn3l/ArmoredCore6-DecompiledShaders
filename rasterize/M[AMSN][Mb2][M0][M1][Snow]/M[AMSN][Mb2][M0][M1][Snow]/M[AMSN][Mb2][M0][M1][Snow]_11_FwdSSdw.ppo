#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _945;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _237 = _232.z;
    float _241 = (_232.x * 2.0) + (-1.0);
    float _243 = (_232.y * 2.0) + (-1.0);
    float _244 = dot(vec2(_241, _243), vec2(_241, _243));
    float _3305 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _250 = sqrt(1.0 - (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))));
    float _253 = fma(_250, _216, fma(_243, _209, _241 * _195));
    float _256 = fma(_250, _217, fma(_243, _210, _241 * _196));
    float _259 = fma(_250, _218, fma(_243, _211, _241 * _197));
    float _263 = inversesqrt(dot(vec3(_253, _256, _259), vec3(_253, _256, _259)));
    float _280 = cbMtdParam._m0[11u].z + dot(vec4(_263 * _253, _263 * _256, _263 * _259, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3316 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _281 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    vec4 _299 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _304 = _299.x * cbMtdParam._m0[9u].x;
    float _305 = _299.y * cbMtdParam._m0[9u].y;
    float _306 = _299.z * cbMtdParam._m0[9u].z;
    vec4 _319 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _330 = ((_319.x - _304) * _281) + _304;
    float _331 = ((_319.y - _305) * _281) + _305;
    float _332 = ((_319.z - _306) * _281) + _306;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _345.x;
    float _349 = _347 - (_347 * _281);
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = (_362.x * 2.0) + (-1.0);
    float _370 = (_362.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3327 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _379 = ((_362.z - _237) * _281) + _237;
    float _386 = ((_369 - _241) * _281) + _241;
    float _387 = ((_370 - _243) * _281) + _243;
    float _388 = ((sqrt(1.0 - (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) - _250) * _281) + _250;
    float _391 = fma(_388, _216, fma(_387, _209, _386 * _195));
    float _394 = fma(_388, _217, fma(_387, _210, _386 * _196));
    float _397 = fma(_388, _218, fma(_387, _211, _386 * _197));
    float _401 = inversesqrt(dot(vec3(_391, _394, _397), vec3(_391, _394, _397)));
    float _402 = _401 * _391;
    float _403 = _401 * _394;
    float _404 = _401 * _397;
    float _3338 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _405 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3360 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3371 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3382 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _409 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _425 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _466 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _476 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _466);
    float _477 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _466);
    float _478 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _466);
    float _482 = inversesqrt(dot(vec3(_476, _477, _478), vec3(_476, _477, _478)));
    float _483 = _476 * _482;
    float _484 = _477 * _482;
    float _485 = _478 * _482;
    float _491 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _492 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _511 = fma(_404, cbSceneParam._m0[5u].z, fma(_403, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _402));
    float _514 = fma(_404, cbSceneParam._m0[6u].z, fma(_403, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _402));
    float _517 = fma(_404, cbSceneParam._m0[7u].z, fma(_403, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _402));
    uint _530 = uint(roundEven(NORMAL.w)) * 13u;
    uint _532 = (_530 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3393 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _544 = 1.0 - _409;
    float _545 = _541 * _544;
    float _546 = _542 * _544;
    float _547 = _543 * _544;
    float _552 = (_541 + (-0.039999999105930328369140625)) * _409;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _409;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _409;
    float _555 = _552 + 0.039999999105930328369140625;
    float _557 = _553 + 0.039999999105930328369140625;
    float _558 = _554 + 0.039999999105930328369140625;
    vec4 _567 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _491, cbSceneParam._m0[86u].y * _492));
    float _570 = _567.x * TEXCOORD_9.w;
    float _571 = dot(vec3(_402, _403, _404), vec3(_483, _484, _485));
    float _574 = _571 * 2.0;
    float _578 = (_574 * _402) - _483;
    float _579 = (_574 * _403) - _484;
    float _580 = (_574 * _404) - _485;
    float _584 = abs(dot(vec3(_483, _484, _485), vec3(_402, _403, _404)));
    float _3426 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _586 = sqrt(_405);
    float _599 = exp2((_586 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_586 * 3.0));
    float _605 = (1.0 - _599) * ((_586 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _606 = _599 * _586;
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _944;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _669 = fma(_642, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634));
        float _673 = fma(_642, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634));
        float _677 = fma(_642, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634));
        float _702 = _634 + _402;
        float _703 = _638 + _403;
        float _704 = _642 + _404;
        float _714 = fma(_704, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _702)) - _669;
        float _715 = fma(_704, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _702)) - _673;
        float _716 = fma(_704, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _702)) - _677;
        float _720 = inversesqrt(dot(vec3(_714, _715, _716), vec3(_714, _715, _716)));
        float _733 = ((_720 * _714) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_669 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _734 = ((_720 * _715) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_673 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _735 = ((_720 * _716) / cbModelParam._m0[34u].z) + ((((((_677 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        float _772 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_738.x + (-0.5));
        float _774 = _772 * (_738.y + (-0.5));
        float _775 = _772 * (_738.z + (-0.5));
        float _782 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_745.x + (-0.5));
        float _784 = _782 * (_745.y + (-0.5));
        float _785 = _782 * (_745.z + (-0.5));
        float _792 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_752.x + (-0.5));
        float _794 = _792 * (_752.y + (-0.5));
        float _795 = _792 * (_752.z + (-0.5));
        float _802 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_759.x + (-0.5));
        float _804 = _802 * (_759.y + (-0.5));
        float _805 = _802 * (_759.z + (-0.5));
        float _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = _773 * 0.5;
        float _810 = _783 * 0.5;
        float _811 = _793 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _826 = (dot(vec3(_402, _403, _404), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _836 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_806 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3474 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_838 + 1.0))) + _843) * _806;
        float _853 = _774 * 0.5;
        float _854 = _784 * 0.5;
        float _855 = _794 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _869 = (dot(vec3(_402, _403, _404), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _878 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3507 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_880 + 1.0))) + _885) * _807;
        float _895 = _775 * 0.5;
        float _896 = _785 * 0.5;
        float _897 = _795 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(_402, _403, _404), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3540 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_922 + 1.0))) + _927) * _808;
        _944 = _775;
        _946 = _774;
        _947 = _773;
        _948 = _785;
        _949 = _784;
        _950 = _783;
        _951 = _795;
        _952 = _794;
        _953 = _793;
        _954 = _808;
        _955 = _807;
        _956 = _806;
        _957 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
    }
    else
    {
        _944 = _945;
        _946 = _945;
        _947 = _945;
        _948 = _945;
        _949 = _945;
        _950 = _945;
        _951 = _945;
        _952 = _945;
        _953 = _945;
        _954 = _945;
        _955 = _945;
        _956 = _945;
        _957 = 0.0;
        _958 = 0.0;
        _959 = 0.0;
    }
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _985 = fma(_642, cbModelParam._m0[30u].z, fma(_638, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _634));
        float _989 = fma(_642, cbModelParam._m0[31u].z, fma(_638, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _634));
        float _993 = fma(_642, cbModelParam._m0[32u].z, fma(_638, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _634));
        float _1016 = _634 + _402;
        float _1017 = _638 + _403;
        float _1018 = _642 + _404;
        float _1028 = fma(_1018, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016)) - _985;
        float _1029 = fma(_1018, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016)) - _989;
        float _1030 = fma(_1018, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016)) - _993;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_985 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_989 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[35u].z) + ((((((_993 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1084 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1051.x + (-0.5));
        float _1086 = _1084 * (_1051.y + (-0.5));
        float _1087 = _1084 * (_1051.z + (-0.5));
        float _1094 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1058.x + (-0.5));
        float _1096 = _1094 * (_1058.y + (-0.5));
        float _1097 = _1094 * (_1058.z + (-0.5));
        float _1104 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1065.x + (-0.5));
        float _1106 = _1104 * (_1065.y + (-0.5));
        float _1107 = _1104 * (_1065.z + (-0.5));
        float _1114 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1072.x + (-0.5));
        float _1116 = _1114 * (_1072.y + (-0.5));
        float _1117 = _1114 * (_1072.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_402, _403, _404), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3603 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1148 + 1.0))) + _1153) * _1118;
        float _1163 = _1086 * 0.5;
        float _1164 = _1096 * 0.5;
        float _1165 = _1106 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_402, _403, _404), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3636 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1190 + 1.0))) + _1195) * _1119;
        float _1205 = _1087 * 0.5;
        float _1206 = _1097 * 0.5;
        float _1207 = _1107 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_402, _403, _404), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3669 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1232 + 1.0))) + _1237) * _1120;
        _1254 = _1087;
        _1255 = _1086;
        _1256 = _1085;
        _1257 = _1097;
        _1258 = _1096;
        _1259 = _1095;
        _1260 = _1107;
        _1261 = _1106;
        _1262 = _1105;
        _1263 = _1120;
        _1264 = _1119;
        _1265 = _1118;
        _1266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
    }
    else
    {
        _1254 = _945;
        _1255 = _945;
        _1256 = _945;
        _1257 = _945;
        _1258 = _945;
        _1259 = _945;
        _1260 = _945;
        _1261 = _945;
        _1262 = _945;
        _1263 = _945;
        _1264 = _945;
        _1265 = _945;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1278 = (cbModelParam._m0[1u].x * (_1266 - _957)) + _957;
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _958)) + _958;
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _959)) + _959;
    float _1301 = fma(_1280, cbSceneParam._m0[89u].z, fma(_1279, cbSceneParam._m0[89u].y, _1278 * cbSceneParam._m0[89u].x));
    float _1304 = fma(_1280, cbSceneParam._m0[90u].z, fma(_1279, cbSceneParam._m0[90u].y, _1278 * cbSceneParam._m0[90u].x));
    float _1307 = fma(_1280, cbSceneParam._m0[91u].z, fma(_1279, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1278));
    float _1322 = _578 * 0.5;
    float _1323 = _579 * 0.5;
    float _1324 = _580 * 0.5;
    float _1325 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1328 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1331 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_1254, _1257, _1260, _1263));
    float _1365;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1338 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_944, _948, _951, _954));
        float _1342 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_946, _949, _952, _955));
        float _1346 = dot(vec4(_1322, _1323, _1324, 1.0), vec4(_947, _950, _953, _956));
        float _1353 = dot(vec4(cbModelParam._m0[39u]), vec4(_1322, _1323, _1324, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1376;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1367 = dot(vec4(cbModelParam._m0[40u]), vec4(_1322, _1323, _1324, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1380 = (_1376 * cbModelParam._m0[1u].x) + (_1365 * (1.0 - cbModelParam._m0[1u].x));
    float _1390 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _405);
    float _1391 = isnan(_1390) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1390 : min(cbModelParam._m0[25u].z, _1390));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1440 = fma(_642, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634)) + cbModelParam._m0[13u].w;
        float _1444 = fma(_642, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634)) + cbModelParam._m0[14u].w;
        float _1448 = fma(_642, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634)) + cbModelParam._m0[15u].w;
        float _1451 = fma(_580, cbModelParam._m0[13u].z, fma(_579, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578));
        float _1454 = fma(_580, cbModelParam._m0[14u].z, fma(_579, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578));
        float _1457 = fma(_580, cbModelParam._m0[15u].z, fma(_579, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578));
        float _1485;
        if (_1451 > 0.0)
        {
            _1485 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1485 = frontier_phi_16_14_ladder;
        }
        float _1713;
        if (_1454 > 0.0)
        {
            _1713 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1713 = frontier_phi_25_21_ladder;
        }
        float _1970;
        if (_1457 > 0.0)
        {
            _1970 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1970 = frontier_phi_37_32_ladder;
        }
        float _1972 = isnan(_1713) ? _1485 : (isnan(_1485) ? _1713 : min(_1485, _1713));
        float _1973 = isnan(_1970) ? _1972 : (isnan(_1972) ? _1970 : min(_1972, _1970));
        float _1977 = (_1973 * _1451) + _1440;
        float _1978 = (_1973 * _1454) + _1444;
        float _1979 = (_1973 * _1457) + _1448;
        float _1980 = _1973 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1980;
        float _1984 = _1980 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 > _1984) || ((_1978 < _1982) || ((_1977 < _1982) || (_1977 > _1984))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1979, cbModelParam._m0[9u].z, fma(_1978, cbModelParam._m0[9u].y, _1977 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1979, cbModelParam._m0[10u].z, fma(_1978, cbModelParam._m0[10u].y, _1977 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1979, cbModelParam._m0[11u].z, fma(_1978, cbModelParam._m0[11u].y, _1977 * cbModelParam._m0[11u].x))), _1391);
            frontier_phi_15_37_ladder = _2107.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2107.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2107.x * cbModelParam._m0[1u].y;
        }
        _1473 = frontier_phi_15_37_ladder_2;
        _1475 = frontier_phi_15_37_ladder_1;
        _1477 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_578, _579, _580), _1391);
        _1473 = _1461.x * cbModelParam._m0[1u].y;
        _1475 = _1461.y * cbModelParam._m0[1u].y;
        _1477 = _1461.z * cbModelParam._m0[1u].y;
    }
    float _1481 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _405);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1481 : min(cbModelParam._m0[25u].w, _1481));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1539 = fma(_642, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634)) + cbModelParam._m0[21u].w;
        float _1543 = fma(_642, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634)) + cbModelParam._m0[22u].w;
        float _1547 = fma(_642, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634)) + cbModelParam._m0[23u].w;
        float _1550 = fma(_580, cbModelParam._m0[21u].z, fma(_579, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578));
        float _1553 = fma(_580, cbModelParam._m0[22u].z, fma(_579, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578));
        float _1556 = fma(_580, cbModelParam._m0[23u].z, fma(_579, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578));
        float _1718;
        if (_1550 > 0.0)
        {
            _1718 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1718 = frontier_phi_27_23_ladder;
        }
        float _1997;
        if (_1553 > 0.0)
        {
            _1997 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1997 = frontier_phi_39_34_ladder;
        }
        float _2210;
        if (_1556 > 0.0)
        {
            _2210 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2210 = frontier_phi_48_45_ladder;
        }
        float _2212 = isnan(_1997) ? _1718 : (isnan(_1718) ? _1997 : min(_1718, _1997));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1550) + _1539;
        float _2218 = (_2213 * _1553) + _1543;
        float _2219 = (_2213 * _1556) + _1547;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2220;
        float _2223 = _2220 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2219 > _2223) || ((_2219 < _2221) || ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 < _2221) || (_2217 > _2223))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2219, cbModelParam._m0[17u].z, fma(_2218, cbModelParam._m0[17u].y, _2217 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2219, cbModelParam._m0[18u].z, fma(_2218, cbModelParam._m0[18u].y, _2217 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2219, cbModelParam._m0[19u].z, fma(_2218, cbModelParam._m0[19u].y, _2217 * cbModelParam._m0[19u].x))), _1482);
            frontier_phi_24_48_ladder = _2417.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2417.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2417.x * cbModelParam._m0[1u].z;
        }
        _1575 = frontier_phi_24_48_ladder_2;
        _1577 = frontier_phi_24_48_ladder_1;
        _1579 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_578, _579, _580), _1482);
        _1575 = _1559.x * cbModelParam._m0[1u].z;
        _1577 = _1559.y * cbModelParam._m0[1u].z;
        _1579 = _1559.z * cbModelParam._m0[1u].z;
    }
    float _1592 = (((_605 * _555) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1594 = (((_605 * _557) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1596 = (((_605 * _558) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1599 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, _1592 * cbSceneParam._m0[91u].x));
    vec4 _1613 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_491, _492));
    float _1615 = _1613.w;
    float _1627 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1615);
    float _1628 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1615);
    float _1629 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1615);
    uvec4 _1633 = floatBitsToUint(cbInstanceData._m0[_530 + 5u]);
    uint _1635 = _1633.x * 14u;
    uint _1636 = _1635 + 13u;
    float _1643 = _570 + (-1.0);
    float _1648 = (cbLight._m0[_1636].x * _1643) + 1.0;
    float _1649 = (cbLight._m0[_1636].y * _1643) + 1.0;
    float _1650 = (cbLight._m0[_1636].z * _1643) + 1.0;
    float _1651 = (cbLight._m0[_1636].w * _1643) + 1.0;
    uint _1652 = _1635 + 5u;
    float _1658 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1662 = _1635 + 4u;
    float _1672 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
    uint _1676 = _1635 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_402, _403, _404));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_402, _403, _404));
    float _3805 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3816 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1652].x * _1658) * _1697) + (((cbLight._m0[_1662].x * _1627) * _1672) * _1695);
    float _1705 = ((_1658 * cbLight._m0[_1652].y) * _1697) + (((cbLight._m0[_1662].y * _1628) * _1672) * _1695);
    float _1706 = ((_1658 * cbLight._m0[_1652].z) * _1697) + (((cbLight._m0[_1662].z * _1629) * _1672) * _1695);
    uvec4 _1710 = floatBitsToUint(cbLight._m0[_1635 + 12u]);
    bool _1712 = _1710.x == 0u;
    float _1723;
    float _1725;
    float _1727;
    if (_1712)
    {
        _1723 = _1704;
        _1725 = _1705;
        _1727 = _1706;
    }
    else
    {
        uint _1731 = _1635 + 6u;
        float _1747 = (dot(vec3(cbLight._m0[_1635 + 2u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1748 = _1747 * _1747;
        float _3827 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1750 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1723 = (((cbLight._m0[_1731].x * 0.3183098733425140380859375) * _1749) * _1750) + _1704;
        _1725 = (((cbLight._m0[_1731].y * 0.3183098733425140380859375) * _1749) * _1750) + _1705;
        _1727 = (((cbLight._m0[_1731].z * 0.3183098733425140380859375) * _1749) * _1750) + _1706;
    }
    bool _1730 = _1710.y == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1730)
    {
        _1768 = _1723;
        _1770 = _1725;
        _1772 = _1727;
    }
    else
    {
        uint _1941 = _1635 + 7u;
        float _1957 = (dot(vec3(cbLight._m0[_1635 + 3u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1958 = _1957 * _1957;
        float _3843 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1959 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1960 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1768 = (((cbLight._m0[_1941].x * 0.3183098733425140380859375) * _1959) * _1960) + _1723;
        _1770 = (((cbLight._m0[_1941].y * 0.3183098733425140380859375) * _1959) * _1960) + _1725;
        _1772 = (((cbLight._m0[_1941].z * 0.3183098733425140380859375) * _1959) * _1960) + _1727;
    }
    uint _1775 = _1635 + 8u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1635].w)) * _405) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1635].x + _483;
    float _1791 = cbLight._m0[_1635].y + _484;
    float _1792 = cbLight._m0[_1635].z + _485;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1635].xyz));
    float _3859 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _1804 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1805 = dot(vec3(_402, _403, _404), vec3(_1797, _1798, _1799));
    float _3881 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1809 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_1797, _1798, _1799));
    float _3892 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1813 = _1789 * _1789;
    float _1817 = ((_1808 * _1808) * (_1813 + (-1.0))) + 1.0;
    float _1825 = exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0);
    float _1826 = 0.959999978542327880859375 - _552;
    float _1828 = 0.959999978542327880859375 - _553;
    float _1829 = 0.959999978542327880859375 - _554;
    float _1836 = 1.0 - _1789;
    float _1847 = (0.5 / (((_1804 * ((_1803 * _1836) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1836) + _1789) * _1803))) * _1803;
    float _3903 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1813 / ((_1817 * _1817) * 3.141590118408203125));
    uint _1863 = _1635 + 9u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _405) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1676].x + _483;
    float _1877 = cbLight._m0[_1676].y + _484;
    float _1878 = cbLight._m0[_1676].z + _485;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1676].xyz));
    float _3914 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1890 = dot(vec3(_402, _403, _404), vec3(_1883, _1884, _1885));
    float _3925 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1894 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1883, _1884, _1885));
    float _3936 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1898 = _1875 * _1875;
    float _1902 = ((_1893 * _1893) * (_1898 + (-1.0))) + 1.0;
    float _1909 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
    float _1916 = 1.0 - _1875;
    float _1926 = (0.5 / (((_1804 * ((_1889 * _1916) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1916) + _1875) * _1889))) * _1889;
    float _3947 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1898 / ((_1902 * _1902) * 3.141590118408203125));
    float _1938 = (((((_1909 * _1826) + _555) * cbLight._m0[_1863].x) * _1928) * _1658) + ((((cbLight._m0[_1775].x * _1627) * ((_1825 * _1826) + _555)) * _1849) * _1672);
    float _1939 = (((((_1909 * _1828) + _557) * cbLight._m0[_1863].y) * _1928) * _1658) + ((((cbLight._m0[_1775].y * _1628) * ((_1825 * _1828) + _557)) * _1849) * _1672);
    float _1940 = (((((_1909 * _1829) + _558) * cbLight._m0[_1863].z) * _1928) * _1658) + ((((cbLight._m0[_1775].z * _1629) * ((_1825 * _1829) + _558)) * _1849) * _1672);
    float _2002;
    float _2004;
    float _2006;
    if (_1712)
    {
        _2002 = _1938;
        _2004 = _1939;
        _2006 = _1940;
    }
    else
    {
        uint _2008 = _1635 + 2u;
        uint _2012 = _1635 + 10u;
        float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _405) * 0.949999988079071044921875);
        float _2027 = _2026 * _2026;
        float _2028 = cbLight._m0[_2008].x + _483;
        float _2029 = cbLight._m0[_2008].y + _484;
        float _2030 = cbLight._m0[_2008].z + _485;
        float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
        float _2035 = _2034 * _2028;
        float _2036 = _2034 * _2029;
        float _2037 = _2034 * _2030;
        float _2038 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2008].xyz));
        float _3958 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2041 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2042 = dot(vec3(_402, _403, _404), vec3(_2035, _2036, _2037));
        float _3969 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2045 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2046 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2035, _2036, _2037));
        float _3980 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2050 = _2027 * _2027;
        float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
        float _2061 = exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0);
        float _2068 = 1.0 - _2027;
        float _2078 = (0.5 / (((_1804 * ((_2041 * _2068) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2068) + _2027) * _2041))) * _2041;
        float _3991 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2080 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
        float _2081 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _2002 = (((((_2061 * _1826) + _555) * cbLight._m0[_2012].x) * _2080) * _2081) + _1938;
        _2004 = (((((_2061 * _1828) + _557) * cbLight._m0[_2012].y) * _2080) * _2081) + _1939;
        _2006 = (((((_2061 * _1829) + _558) * cbLight._m0[_2012].z) * _2080) * _2081) + _1940;
    }
    float _2116;
    float _2118;
    float _2120;
    if (_1730)
    {
        _2116 = _2002;
        _2118 = _2004;
        _2120 = _2006;
    }
    else
    {
        uint _2127 = _1635 + 3u;
        uint _2131 = _1635 + 11u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _405) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _483;
        float _2148 = cbLight._m0[_2127].y + _484;
        float _2149 = cbLight._m0[_2127].z + _485;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2127].xyz));
        float _4007 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2161 = dot(vec3(_402, _403, _404), vec3(_2154, _2155, _2156));
        float _4018 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4029 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
        float _2187 = 1.0 - _2146;
        float _2197 = (0.5 / (((_1804 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2187) + _2146) * _2160))) * _2160;
        float _4040 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _2116 = (((((_2180 * _1826) + _555) * cbLight._m0[_2131].x) * _2199) * _2200) + _2002;
        _2118 = (((((_2180 * _1828) + _557) * cbLight._m0[_2131].y) * _2199) * _2200) + _2004;
        _2120 = (((((_2180 * _1829) + _558) * cbLight._m0[_2131].z) * _2199) * _2200) + _2006;
    }
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    if (_1633.y == 0u)
    {
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2275;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2275;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2275;
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.x;
        uint _2302 = uint((float(_2290.y) * floor(float(uint(cbSceneParam._m0[85u].y * _492) / _2291))) + floor(float(uint(cbSceneParam._m0[85u].x * _491) / _2291)));
        float _2312 = (log2(_2278 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2313 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        uint _2316 = uint(isnan(14.0) ? _2313 : (isnan(_2313) ? 14.0 : min(_2313, 14.0)));
        uvec4 _2321 = texelFetch(g_lightClusterGridBuffer, int(((_2316 << 2u) + (_2302 << 6u)) >> 2u));
        uint _2322 = _2321.x;
        uint _2323 = _2290.z;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((((1u << ((_2323 >> 4u) & 15u)) + 4294967295u) & _2322) == 0u) || ((_2323 & 240u) == 0u))
        {
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
        }
        else
        {
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            uint _2572 = 0u;
            uint _2581;
            bool _2582;
            for (;;)
            {
                _2581 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                _2582 = _2581 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2582)
                {
                    frontier_phi_63_pred = _2571;
                    frontier_phi_63_pred_1 = _2570;
                    frontier_phi_63_pred_2 = _2569;
                    frontier_phi_63_pred_3 = _2568;
                    frontier_phi_63_pred_4 = _2567;
                    frontier_phi_63_pred_5 = _2566;
                }
                else
                {
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    uint _2696;
                    _2690 = _2566;
                    _2691 = _2567;
                    _2692 = _2568;
                    _2693 = _2569;
                    _2694 = _2570;
                    _2695 = _2571;
                    _2696 = _2581;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    for (;;)
                    {
                        uint _2700 = uint(findLSB(_2696)) + (_2572 << 5u);
                        uint _2697 = (_2696 + 4294967295u) & _2696;
                        uint _2702 = _2700 * 48u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2722 = (_2700 * 48u) + 4u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        uint _2741 = (_2700 * 48u) + 8u;
                        vec3 _2752 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x));
                        float _2756 = _2716.x - _2276;
                        float _2757 = _2716.y - _2277;
                        float _2758 = _2716.z - _2278;
                        float _2759 = dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758));
                        float _2762 = inversesqrt(_2759);
                        float _2763 = _2762 * _2756;
                        float _2764 = _2762 * _2757;
                        float _2765 = _2762 * _2758;
                        float _2766 = dot(vec3(_511, _514, _517), vec3(_2763, _2764, _2765));
                        float _2771 = 1.0 - (_2759 * _2716.w);
                        float _4066 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2772 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2773 = sqrt(_2759) * _2735.w;
                        float _2776 = 1.39999997615814208984375 / (_2773 + 1.39999997615814208984375);
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2766) + _2777;
                        float _2783 = _2773 * _2773;
                        float _2787 = ((isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))) * _2772) / ((_2783 * 0.699999988079071044921875) + 1.0);
                        float _2791 = (-0.0) - _2276;
                        float _2792 = (-0.0) - _2277;
                        float _2793 = (-0.0) - _2278;
                        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
                        float _2798 = _2797 * _2791;
                        float _2799 = _2797 * _2792;
                        float _2800 = _2797 * _2793;
                        float _2808 = exp2(log2(1.0 / ((_2783 * 3.5) + 5.0)) * 0.25);
                        float _2809 = 1.0 - _586;
                        float _2816 = sqrt(1.0 - ((1.0 - (_2809 * _2809)) * (1.0 - (_2808 * _2808))));
                        float _2817 = _2816 * _2816;
                        float _2818 = _2817 * _2817;
                        float _2819 = _2798 + _2763;
                        float _2820 = _2799 + _2764;
                        float _2821 = _2800 + _2765;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2829 = dot(vec3(_511, _514, _517), vec3(_2798, _2799, _2800));
                        float _4082 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2832 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2833 = dot(vec3(_511, _514, _517), vec3(_2825 * _2819, _2825 * _2820, _2825 * _2821));
                        float _4093 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2840 = ((_2836 * _2836) * (_2818 + (-1.0))) + 1.0;
                        float _2841 = _2776 * _2817;
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2766) + _2842;
                        float _4104 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2846 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2847 = 1.0 - _2817;
                        float _2857 = (0.5 / (((_2846 * ((_2832 * _2847) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2846 * _2847) + _2817) * _2832))) * _2846;
                        float _4115 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2868 = (((_2818 * 3.1415927410125732421875) * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) / ((_2840 * _2840) * ((_2783 * 2.1991131305694580078125) + 3.141590118408203125))) * _2772;
                        _2625 = (_2787 * _2735.x) + _2693;
                        _2626 = (_2787 * _2735.y) + _2694;
                        _2627 = (_2787 * _2735.z) + _2695;
                        _2622 = (_2868 * _2752.x) + _2690;
                        _2623 = (_2868 * _2752.y) + _2691;
                        _2624 = (_2868 * _2752.z) + _2692;
                        if (_2697 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2690 = _2622;
                            _2691 = _2623;
                            _2692 = _2624;
                            _2693 = _2625;
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2697;
                        }
                    }
                    frontier_phi_63_pred = _2627;
                    frontier_phi_63_pred_1 = _2626;
                    frontier_phi_63_pred_2 = _2625;
                    frontier_phi_63_pred_3 = _2624;
                    frontier_phi_63_pred_4 = _2623;
                    frontier_phi_63_pred_5 = _2622;
                }
                _2433 = frontier_phi_63_pred;
                _2431 = frontier_phi_63_pred_1;
                _2429 = frontier_phi_63_pred_2;
                _2427 = frontier_phi_63_pred_3;
                _2425 = frontier_phi_63_pred_4;
                _2423 = frontier_phi_63_pred_5;
                uint _2573 = _2572 + 1u;
                if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2566 = _2423;
                    _2567 = _2425;
                    _2568 = _2427;
                    _2569 = _2429;
                    _2570 = _2431;
                    _2571 = _2433;
                    _2572 = _2573;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
        }
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.z;
        uint _2439 = (_2437 >> 8u) & 15u;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        if (((4294967295u << _2439) & _2322) == 0u)
        {
            _2534 = _2422;
            _2536 = _2424;
            _2538 = _2426;
            _2540 = _2428;
            _2542 = _2430;
            _2544 = _2432;
        }
        else
        {
            float _2559 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
            float _2560 = _2559 * _2276;
            float _2561 = _2559 * _2277;
            float _2562 = _2559 * _2278;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2439 < ((_2437 >> 12u) & 15u))
            {
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2673 = _2422;
                float _2674 = _2424;
                float _2675 = _2426;
                float _2676 = _2428;
                float _2677 = _2430;
                float _2678 = _2432;
                uint _2679 = _2439;
                uint _2688;
                bool _2689;
                for (;;)
                {
                    _2688 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                    _2689 = _2688 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2689)
                    {
                        frontier_phi_69_pred = _2678;
                        frontier_phi_69_pred_1 = _2677;
                        frontier_phi_69_pred_2 = _2676;
                        frontier_phi_69_pred_3 = _2675;
                        frontier_phi_69_pred_4 = _2674;
                        frontier_phi_69_pred_5 = _2673;
                    }
                    else
                    {
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _2886 = _2673;
                        float _2887 = _2674;
                        float _2888 = _2675;
                        float _2889 = _2676;
                        float _2890 = _2677;
                        float _2891 = _2678;
                        uint _2892 = _2688;
                        uint _2893;
                        vec4 _2918;
                        float _2919;
                        vec4 _2934;
                        vec3 _2946;
                        vec4 _2962;
                        vec4 _2978;
                        float _3025;
                        bool _3026;
                        for (;;)
                        {
                            uint _2903 = ((_2679 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2892));
                            _2893 = (_2892 + 4294967295u) & _2892;
                            uint _2905 = _2903 * 40u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2919 = _2918.w;
                            uint _2921 = (_2903 * 40u) + 4u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2903 * 40u) + 8u;
                            _2946 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x));
                            uint _2949 = (_2903 * 40u) + 16u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2965 = (_2903 * 40u) + 20u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2903 * 40u) + 24u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _3000 = (_2903 * 40u) + 28u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3025 = fma(_2278, _3013.z, fma(_2277, _3013.y, _3013.x * _2276)) + _3013.w;
                            _3026 = !((fma(_2278, _2994.z, fma(_2277, _2994.y, _2994.x * _2276)) + _2994.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3026)
                            {
                                float _3053 = _2918.x - _2276;
                                float _3054 = _2918.y - _2277;
                                float _3055 = _2918.z - _2278;
                                float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                                float _3059 = inversesqrt(_3056);
                                float _3060 = _3059 * _3053;
                                float _3061 = _3059 * _3054;
                                float _3062 = _3059 * _3055;
                                float _3066 = 1.0 - (_3056 / (_2919 * _2919));
                                float _4126 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3071 = sqrt(_3056) * _2934.w;
                                float _3073 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                                float _3074 = _3073 * _3073;
                                float _3077 = ((1.0 - _3074) * dot(vec3(_3060, _3061, _3062), vec3(_511, _514, _517))) + _3074;
                                float _3080 = _3071 * _3071;
                                float _3084 = (fma(_2278, _2962.z, fma(_2277, _2962.y, _2962.x * _2276)) + _2962.w) / _3025;
                                float _3085 = (fma(_2278, _2978.z, fma(_2277, _2978.y, _2978.x * _2276)) + _2978.w) / _3025;
                                float _3089 = 1.0 - dot(vec2(_3084, _3085), vec2(_3084, _3085));
                                float _4142 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3091 = _3090 * (((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3067) / ((_3080 * 0.699999988079071044921875) + 1.0));
                                float _3103 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                                float _3104 = 1.0 - _586;
                                float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                                float _3112 = _3111 * _3111;
                                float _3113 = _3112 * _3112;
                                float _3114 = _3060 - _2560;
                                float _3115 = _3061 - _2561;
                                float _3116 = _3062 - _2562;
                                float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                                float _3124 = dot(vec3(_511, _514, _517), vec3((-0.0) - _2560, (-0.0) - _2561, (-0.0) - _2562));
                                float _4153 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3128 = dot(vec3(_511, _514, _517), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                                float _4164 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                                float _3136 = _3073 * _3112;
                                float _3137 = _3136 * _3136;
                                float _3143 = ((1.0 - _3137) * dot(vec3(_511, _514, _517), vec3(_3060, _3061, _3062))) + _3137;
                                float _4175 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3145 = 1.0 - _3112;
                                float _3155 = (0.5 / (((_3144 * ((_3127 * _3145) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3112) * _3127))) * _3144;
                                float _4186 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3165 = (_3090 * _3067) * (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) / ((_3135 * _3135) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3091 * _2934.z;
                                frontier_phi_75_pred_1 = _3091 * _2934.y;
                                frontier_phi_75_pred_2 = _3091 * _2934.x;
                                frontier_phi_75_pred_3 = _3165 * _2946.z;
                                frontier_phi_75_pred_4 = _3165 * _2946.y;
                                frontier_phi_75_pred_5 = _3165 * _2946.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3174 = frontier_phi_75_pred;
                            _3173 = frontier_phi_75_pred_1;
                            _3172 = frontier_phi_75_pred_2;
                            _3171 = frontier_phi_75_pred_3;
                            _3170 = frontier_phi_75_pred_4;
                            _3169 = frontier_phi_75_pred_5;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2873 = _3169 + _2886;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            if (_2893 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2893;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2878;
                        frontier_phi_69_pred_1 = _2877;
                        frontier_phi_69_pred_2 = _2876;
                        frontier_phi_69_pred_3 = _2875;
                        frontier_phi_69_pred_4 = _2874;
                        frontier_phi_69_pred_5 = _2873;
                    }
                    _2545 = frontier_phi_69_pred;
                    _2543 = frontier_phi_69_pred_1;
                    _2541 = frontier_phi_69_pred_2;
                    _2539 = frontier_phi_69_pred_3;
                    _2537 = frontier_phi_69_pred_4;
                    _2535 = frontier_phi_69_pred_5;
                    uint _2680 = _2679 + 1u;
                    if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2673 = _2535;
                        _2674 = _2537;
                        _2675 = _2539;
                        _2676 = _2541;
                        _2677 = _2543;
                        _2678 = _2545;
                        _2679 = _2680;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2545;
                frontier_phi_57_58_ladder_1 = _2543;
                frontier_phi_57_58_ladder_2 = _2541;
                frontier_phi_57_58_ladder_3 = _2539;
                frontier_phi_57_58_ladder_4 = _2537;
                frontier_phi_57_58_ladder_5 = _2535;
            }
            else
            {
                frontier_phi_57_58_ladder = _2432;
                frontier_phi_57_58_ladder_1 = _2430;
                frontier_phi_57_58_ladder_2 = _2428;
                frontier_phi_57_58_ladder_3 = _2426;
                frontier_phi_57_58_ladder_4 = _2424;
                frontier_phi_57_58_ladder_5 = _2422;
            }
            _2534 = frontier_phi_57_58_ladder_5;
            _2536 = frontier_phi_57_58_ladder_4;
            _2538 = frontier_phi_57_58_ladder_3;
            _2540 = frontier_phi_57_58_ladder_2;
            _2542 = frontier_phi_57_58_ladder_1;
            _2544 = frontier_phi_57_58_ladder;
        }
        float _2549 = isnan(1.0) ? _570 : (isnan(_570) ? 1.0 : min(_570, 1.0));
        _2334 = (_2549 * _2540) + _1768;
        _2336 = (_2549 * _2542) + _1770;
        _2338 = (_2549 * _2544) + _1772;
        _2340 = ((_2534 * _555) * _2549) + _2116;
        _2342 = ((_2536 * _557) * _2549) + _2118;
        _2344 = ((_2538 * _558) * _2549) + _2120;
    }
    else
    {
        _2334 = _1768;
        _2336 = _1770;
        _2338 = _1772;
        _2340 = _2116;
        _2342 = _2118;
        _2344 = _2120;
    }
    float _4202 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4213 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4224 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    uint _2364 = _530 + 6u;
    float _2372 = _491 / cbSceneParam._m0[86u].x;
    float _2373 = _492 / cbSceneParam._m0[86u].y;
    vec4 _2387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, (log2((isnan(cbSceneParam._m0[77u].w) ? _425 : (isnan(_425) ? cbSceneParam._m0[77u].w : min(_425, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2389 = _2387.x;
    float _2390 = _2387.y;
    float _2391 = _2387.z;
    float _2392 = _2387.w;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_425 > cbSceneParam._m0[78u].w)
    {
        float _2447 = isnan(_425) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _425 : min(cbSceneParam._m0[80u].w, _425));
        float _2448 = _2447 / _425;
        float _2459 = _2448 * _476;
        float _2460 = _477 * _2448;
        float _2461 = (-0.0) - _2460;
        float _2462 = _2448 * _478;
        float _2464 = (cbSceneParam._m0[77u].w * _2461) / _2447;
        float _2465 = _2464 + cbSceneParam._m0[79u].w;
        float _2466 = cbSceneParam._m0[79u].w - _2460;
        float _2472 = sqrt(((_2459 * _2459) + (_2460 * _2460)) + (_2462 * _2462));
        float _2475 = (1.0 - (cbSceneParam._m0[77u].w / _2447)) * _2472;
        float _2480 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2482 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2635;
        if (abs((_2461 - _2464) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2635 = ((((_2465 > 0.0) ? exp2(_2480 * _2465) : (2.0 - exp2(_2482 * _2465))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2475;
        }
        else
        {
            float _2595 = 1.0 / cbSceneParam._m0[80u].x;
            float _2596 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : max(_2465, _2466));
            float _2597 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : min(_2465, _2466));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            _2635 = ((abs(_2472 / _2461) * cbSceneParam._m0[80u].y) * ((((_2606 - _2607) * 2.0) - ((exp2(_2480 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)))) - exp2(_2480 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))))) * _2595)) - ((exp2(_2482 * _2606) - exp2(_2482 * _2607)) * _2595))) + (_2475 * cbSceneParam._m0[80u].z);
        }
        vec4 _2637 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, 1.0), 0.0);
        float _2646 = exp2((_2635 * (-1.44269502162933349609375)) * (1.0 - _2637.w));
        float _2647 = log2(_2646);
        float _2663 = log2(_2392);
        _2484 = (exp2(_2663 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2647 * cbSceneParam._m0[78u].x)) * _2637.x) / cbSceneParam._m0[78u].x)) + _2389;
        _2486 = (exp2(_2663 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2647 * cbSceneParam._m0[78u].y)) * _2637.y) / cbSceneParam._m0[78u].y)) + _2390;
        _2488 = (exp2(_2663 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2647 * cbSceneParam._m0[78u].z)) * _2637.z) / cbSceneParam._m0[78u].z)) + _2391;
        _2490 = _2646 * _2392;
    }
    else
    {
        _2484 = _2389;
        _2486 = _2390;
        _2488 = _2391;
        _2490 = _2392;
    }
    float _2502 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2503 = _2502 == 3.0;
    float _2504 = log2(_2490);
    float _2511 = exp2(_2504 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2334 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _570))) + ((_2340 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1380)) * cbPerFrame._m0[3u].x));
    float _2512 = exp2(_2504 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2336 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _570))) + ((_2342 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1380)) * cbPerFrame._m0[3u].x));
    float _2513 = exp2(_2504 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2338 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _570))) + ((_2344 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1380)) * cbPerFrame._m0[3u].x));
    float _2522 = (_2502 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2522 * (_2503 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2484)));
    SV_Target.y = _2522 * (_2503 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2486)));
    SV_Target.z = _2522 * (_2503 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2488)));
    SV_Target.w = cbInstanceData._m0[_2364].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2364].w;
}


