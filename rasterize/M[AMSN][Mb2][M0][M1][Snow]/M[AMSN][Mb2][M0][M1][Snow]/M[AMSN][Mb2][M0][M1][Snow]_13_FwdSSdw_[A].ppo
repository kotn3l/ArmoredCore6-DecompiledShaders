#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _891;
float _3306;
float _3307;
float _3308;
float _3309;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _237 = _232.z;
    float _241 = (_232.x * 2.0) + (-1.0);
    float _243 = (_232.y * 2.0) + (-1.0);
    float _244 = dot(vec2(_241, _243), vec2(_241, _243));
    float _3318 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _250 = sqrt(1.0 - (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))));
    vec4 _268 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = _268.x * cbMtdParam._m0[9u].x;
    float _274 = _268.y * cbMtdParam._m0[9u].y;
    float _275 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _290 = _288.x;
    float _293 = fma(_250, _216, fma(_243, _208 * TANGENT.x, (_194 * _186) * _241));
    float _296 = fma(_250, _217, fma(_243, _208 * TANGENT.y, (_194 * _187) * _241));
    float _299 = fma(_250, _218, fma(_243, _208 * TANGENT.z, (_194 * _188) * _241));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3329 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _307 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3351 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3362 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3373 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _311 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _570 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _576 = (cbMatDynParam._m0[5u].x * _570) + cbMatDynParam._m0[5u].y;
        float _3384 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _577 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _581 = (cbMatDynParam._m0[5u].z * _570) + cbMatDynParam._m0[5u].w;
        float _3395 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) - _577)) + _577) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _431 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _434 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _447 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3406 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _461 = 1.0 - _311;
    float _462 = _458 * _461;
    float _463 = _459 * _461;
    float _464 = _460 * _461;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _311;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _311;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _311;
    float _472 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _487 = _484.x * TEXCOORD_9.w;
    float _488 = dot(vec3(_304, _305, _306), vec3(_387, _388, _389));
    float _491 = _488 * 2.0;
    float _495 = (_491 * _304) - _387;
    float _496 = (_491 * _305) - _388;
    float _497 = (_491 * _306) - _389;
    float _501 = abs(dot(vec3(_387, _388, _389), vec3(_304, _305, _306)));
    float _3439 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = sqrt(_307);
    float _516 = exp2((_503 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_503 * 3.0));
    float _522 = (1.0 - _516) * ((_503 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _523 = _516 * _503;
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _619 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _623 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _648 = _551 + _304;
        float _649 = _555 + _305;
        float _650 = _559 + _306;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_304, _305, _306), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3487 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_304, _305, _306), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3520 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_304, _305, _306), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3553 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _938 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _942 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _965 = _551 + _304;
        float _966 = _555 + _305;
        float _967 = _559 + _306;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_304, _305, _306), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3616 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_304, _305, _306), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3649 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_304, _305, _306), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3682 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = _891;
        _1213 = _891;
        _1214 = _891;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _495 * 0.5;
    float _1272 = _496 * 0.5;
    float _1273 = _497 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_890, _894, _897, _900));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_892, _895, _898, _901));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _896, _899, _902));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1389 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1393 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1397 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1400 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1403 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1406 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1434;
        if (_1400 > 0.0)
        {
            _1434 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1434 = frontier_phi_19_17_ladder;
        }
        float _1663;
        if (_1403 > 0.0)
        {
            _1663 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1663 = frontier_phi_28_24_ladder;
        }
        float _1920;
        if (_1406 > 0.0)
        {
            _1920 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1920 = frontier_phi_40_35_ladder;
        }
        float _1922 = isnan(_1663) ? _1434 : (isnan(_1434) ? _1663 : min(_1434, _1663));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1400) + _1389;
        float _1928 = (_1923 * _1403) + _1393;
        float _1929 = (_1923 * _1406) + _1397;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1932 = (-1.0) - _1930;
        float _1934 = _1930 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1929 > _1934) || ((_1929 < _1932) || ((_1928 > _1934) || ((_1928 < _1932) || ((_1927 < _1932) || (_1927 > _1934))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1929, cbModelParam._m0[9u].z, fma(_1928, cbModelParam._m0[9u].y, _1927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1929, cbModelParam._m0[10u].z, fma(_1928, cbModelParam._m0[10u].y, _1927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1929, cbModelParam._m0[11u].z, fma(_1928, cbModelParam._m0[11u].y, _1927 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_18_40_ladder = _2057.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2057.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2057.x * cbModelParam._m0[1u].y;
        }
        _1422 = frontier_phi_18_40_ladder_2;
        _1424 = frontier_phi_18_40_ladder_1;
        _1426 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1340);
        _1422 = _1410.x * cbModelParam._m0[1u].y;
        _1424 = _1410.y * cbModelParam._m0[1u].y;
        _1426 = _1410.z * cbModelParam._m0[1u].y;
    }
    float _1430 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1430 : min(cbModelParam._m0[25u].w, _1430));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1502 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1505 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1668;
        if (_1499 > 0.0)
        {
            _1668 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1668 = frontier_phi_30_26_ladder;
        }
        float _1947;
        if (_1502 > 0.0)
        {
            _1947 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1947 = frontier_phi_42_37_ladder;
        }
        float _2160;
        if (_1505 > 0.0)
        {
            _2160 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2160 = frontier_phi_51_48_ladder;
        }
        float _2162 = isnan(_1947) ? _1668 : (isnan(_1668) ? _1947 : min(_1668, _1947));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1499) + _1488;
        float _2168 = (_2163 * _1502) + _1492;
        float _2169 = (_2163 * _1505) + _1496;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2170;
        float _2173 = _2170 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2169 > _2173) || ((_2169 < _2171) || ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 < _2171) || (_2167 > _2173))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2169, cbModelParam._m0[17u].z, fma(_2168, cbModelParam._m0[17u].y, _2167 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2169, cbModelParam._m0[18u].z, fma(_2168, cbModelParam._m0[18u].y, _2167 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2169, cbModelParam._m0[19u].z, fma(_2168, cbModelParam._m0[19u].y, _2167 * cbModelParam._m0[19u].x))), _1431);
            frontier_phi_27_51_ladder = _2367.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2367.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2367.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_27_51_ladder_2;
        _1526 = frontier_phi_27_51_ladder_1;
        _1528 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1431);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1541 = (((_522 * _472) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1543 = (((_522 * _474) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1545 = (((_522 * _475) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    vec4 _1562 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_408, _409));
    float _1564 = _1562.w;
    float _1576 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1564);
    float _1577 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1564);
    float _1578 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1564);
    uvec4 _1582 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1584 = _1582.x * 14u;
    uint _1585 = _1584 + 13u;
    float _1592 = _487 + (-1.0);
    float _1597 = (cbLight._m0[_1585].x * _1592) + 1.0;
    float _1598 = (cbLight._m0[_1585].y * _1592) + 1.0;
    float _1599 = (cbLight._m0[_1585].z * _1592) + 1.0;
    float _1600 = (cbLight._m0[_1585].w * _1592) + 1.0;
    uint _1601 = _1584 + 5u;
    float _1607 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1611 = _1584 + 4u;
    float _1621 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1625 = _1584 | 1u;
    float _1636 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_304, _305, _306));
    float _1639 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_304, _305, _306));
    float _3818 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _3829 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1644 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.3183098733425140380859375;
    float _1646 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.3183098733425140380859375;
    float _1653 = ((cbLight._m0[_1601].x * _1607) * _1646) + (((cbLight._m0[_1611].x * _1576) * _1621) * _1644);
    float _1654 = ((_1607 * cbLight._m0[_1601].y) * _1646) + (((cbLight._m0[_1611].y * _1577) * _1621) * _1644);
    float _1655 = ((_1607 * cbLight._m0[_1601].z) * _1646) + (((cbLight._m0[_1611].z * _1578) * _1621) * _1644);
    uvec4 _1660 = floatBitsToUint(cbLight._m0[_1584 + 12u]);
    bool _1662 = _1660.x == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1662)
    {
        _1673 = _1653;
        _1675 = _1654;
        _1677 = _1655;
    }
    else
    {
        uint _1681 = _1584 + 6u;
        float _1697 = (dot(vec3(cbLight._m0[_1584 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1698 = _1697 * _1697;
        float _3840 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1700 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1673 = (((cbLight._m0[_1681].x * 0.3183098733425140380859375) * _1699) * _1700) + _1653;
        _1675 = (((cbLight._m0[_1681].y * 0.3183098733425140380859375) * _1699) * _1700) + _1654;
        _1677 = (((cbLight._m0[_1681].z * 0.3183098733425140380859375) * _1699) * _1700) + _1655;
    }
    bool _1680 = _1660.y == 0u;
    float _1718;
    float _1720;
    float _1722;
    if (_1680)
    {
        _1718 = _1673;
        _1720 = _1675;
        _1722 = _1677;
    }
    else
    {
        uint _1891 = _1584 + 7u;
        float _1907 = (dot(vec3(cbLight._m0[_1584 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _3856 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1910 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1718 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1673;
        _1720 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1675;
        _1722 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1677;
    }
    uint _1725 = _1584 + 8u;
    float _1738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1584].w)) * _307) * 0.949999988079071044921875);
    float _1739 = _1738 * _1738;
    float _1740 = cbLight._m0[_1584].x + _387;
    float _1741 = cbLight._m0[_1584].y + _388;
    float _1742 = cbLight._m0[_1584].z + _389;
    float _1746 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
    float _1747 = _1746 * _1740;
    float _1748 = _1746 * _1741;
    float _1749 = _1746 * _1742;
    float _1750 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1584].xyz));
    float _3872 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1754 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _1755 = dot(vec3(_304, _305, _306), vec3(_1747, _1748, _1749));
    float _3894 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1759 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_1747, _1748, _1749));
    float _3905 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1763 = _1739 * _1739;
    float _1767 = ((_1758 * _1758) * (_1763 + (-1.0))) + 1.0;
    float _1775 = exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0);
    float _1776 = 0.959999978542327880859375 - _469;
    float _1778 = 0.959999978542327880859375 - _470;
    float _1779 = 0.959999978542327880859375 - _471;
    float _1786 = 1.0 - _1739;
    float _1797 = (0.5 / (((_1754 * ((_1753 * _1786) + _1739)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1786) + _1739) * _1753))) * _1753;
    float _3916 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1799 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1763 / ((_1767 * _1767) * 3.141590118408203125));
    uint _1813 = _1584 + 9u;
    float _1824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _307) * 0.949999988079071044921875);
    float _1825 = _1824 * _1824;
    float _1826 = cbLight._m0[_1625].x + _387;
    float _1827 = cbLight._m0[_1625].y + _388;
    float _1828 = cbLight._m0[_1625].z + _389;
    float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
    float _1833 = _1832 * _1826;
    float _1834 = _1832 * _1827;
    float _1835 = _1832 * _1828;
    float _1836 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1625].xyz));
    float _3927 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _1840 = dot(vec3(_304, _305, _306), vec3(_1833, _1834, _1835));
    float _3938 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1844 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1833, _1834, _1835));
    float _3949 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1848 = _1825 * _1825;
    float _1852 = ((_1843 * _1843) * (_1848 + (-1.0))) + 1.0;
    float _1859 = exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0);
    float _1866 = 1.0 - _1825;
    float _1876 = (0.5 / (((_1754 * ((_1839 * _1866) + _1825)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1866) + _1825) * _1839))) * _1839;
    float _3960 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1848 / ((_1852 * _1852) * 3.141590118408203125));
    float _1888 = (((((_1859 * _1776) + _472) * cbLight._m0[_1813].x) * _1878) * _1607) + ((((cbLight._m0[_1725].x * _1576) * ((_1775 * _1776) + _472)) * _1799) * _1621);
    float _1889 = (((((_1859 * _1778) + _474) * cbLight._m0[_1813].y) * _1878) * _1607) + ((((cbLight._m0[_1725].y * _1577) * ((_1775 * _1778) + _474)) * _1799) * _1621);
    float _1890 = (((((_1859 * _1779) + _475) * cbLight._m0[_1813].z) * _1878) * _1607) + ((((cbLight._m0[_1725].z * _1578) * ((_1775 * _1779) + _475)) * _1799) * _1621);
    float _1952;
    float _1954;
    float _1956;
    if (_1662)
    {
        _1952 = _1888;
        _1954 = _1889;
        _1956 = _1890;
    }
    else
    {
        uint _1958 = _1584 + 2u;
        uint _1962 = _1584 + 10u;
        float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _307) * 0.949999988079071044921875);
        float _1977 = _1976 * _1976;
        float _1978 = cbLight._m0[_1958].x + _387;
        float _1979 = cbLight._m0[_1958].y + _388;
        float _1980 = cbLight._m0[_1958].z + _389;
        float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
        float _1985 = _1984 * _1978;
        float _1986 = _1984 * _1979;
        float _1987 = _1984 * _1980;
        float _1988 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1958].xyz));
        float _3971 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1992 = dot(vec3(_304, _305, _306), vec3(_1985, _1986, _1987));
        float _3982 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1996 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_1985, _1986, _1987));
        float _3993 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2000 = _1977 * _1977;
        float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
        float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0);
        float _2018 = 1.0 - _1977;
        float _2028 = (0.5 / (((_1754 * ((_1991 * _2018) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _2018) + _1977) * _1991))) * _1991;
        float _4004 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2030 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
        float _2031 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1952 = (((((_2011 * _1776) + _472) * cbLight._m0[_1962].x) * _2030) * _2031) + _1888;
        _1954 = (((((_2011 * _1778) + _474) * cbLight._m0[_1962].y) * _2030) * _2031) + _1889;
        _1956 = (((((_2011 * _1779) + _475) * cbLight._m0[_1962].z) * _2030) * _2031) + _1890;
    }
    float _2066;
    float _2068;
    float _2070;
    if (_1680)
    {
        _2066 = _1952;
        _2068 = _1954;
        _2070 = _1956;
    }
    else
    {
        uint _2077 = _1584 + 3u;
        uint _2081 = _1584 + 11u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _307) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _387;
        float _2098 = cbLight._m0[_2077].y + _388;
        float _2099 = cbLight._m0[_2077].z + _389;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2077].xyz));
        float _4020 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2111 = dot(vec3(_304, _305, _306), vec3(_2104, _2105, _2106));
        float _4031 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4042 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0);
        float _2137 = 1.0 - _2096;
        float _2147 = (0.5 / (((_1754 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _2137) + _2096) * _2110))) * _2110;
        float _4053 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2149 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2150 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _2066 = (((((_2130 * _1776) + _472) * cbLight._m0[_2081].x) * _2149) * _2150) + _1952;
        _2068 = (((((_2130 * _1778) + _474) * cbLight._m0[_2081].y) * _2149) * _2150) + _1954;
        _2070 = (((((_2130 * _1779) + _475) * cbLight._m0[_2081].z) * _2149) * _2150) + _1956;
    }
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    if (_1582.y == 0u)
    {
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2225;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2225;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2225;
        uvec4 _2240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2241 = _2240.x;
        uint _2252 = uint((float(_2240.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2241))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2241)));
        float _2262 = (log2(_2228 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2263 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        uint _2266 = uint(isnan(14.0) ? _2263 : (isnan(_2263) ? 14.0 : min(_2263, 14.0)));
        uvec4 _2271 = texelFetch(g_lightClusterGridBuffer, int(((_2266 << 2u) + (_2252 << 6u)) >> 2u));
        uint _2272 = _2271.x;
        uint _2273 = _2240.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2273 >> 4u) & 15u)) + 4294967295u) & _2272) == 0u) || ((_2273 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            uint _2530 = 0u;
            uint _2539;
            bool _2540;
            for (;;)
            {
                _2539 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2530 << 2u)) >> 2u)).x;
                _2540 = _2539 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2540)
                {
                    frontier_phi_68_pred = _2526;
                    frontier_phi_68_pred_1 = _2529;
                    frontier_phi_68_pred_2 = _2528;
                    frontier_phi_68_pred_3 = _2527;
                    frontier_phi_68_pred_4 = _2525;
                    frontier_phi_68_pred_5 = _2524;
                }
                else
                {
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    uint _2675;
                    _2669 = _2524;
                    _2670 = _2525;
                    _2671 = _2526;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2539;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    for (;;)
                    {
                        uint _2679 = uint(findLSB(_2675)) + (_2530 << 5u);
                        uint _2676 = (_2675 + 4294967295u) & _2675;
                        uint _2681 = _2679 * 48u;
                        vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2701 = (_2679 * 48u) + 4u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2720 = (_2679 * 48u) + 8u;
                        vec3 _2731 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x));
                        float _2735 = _2695.x - _2226;
                        float _2736 = _2695.y - _2227;
                        float _2737 = _2695.z - _2228;
                        float _2738 = dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737));
                        float _2741 = inversesqrt(_2738);
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2745 = dot(vec3(_428, _431, _434), vec3(_2742, _2743, _2744));
                        float _2750 = 1.0 - (_2738 * _2695.w);
                        float _4079 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                        float _2752 = sqrt(_2738) * _2714.w;
                        float _2755 = 1.39999997615814208984375 / (_2752 + 1.39999997615814208984375);
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2745) + _2756;
                        float _2762 = _2752 * _2752;
                        float _2766 = ((isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))) * _2751) / ((_2762 * 0.699999988079071044921875) + 1.0);
                        float _2770 = (-0.0) - _2226;
                        float _2771 = (-0.0) - _2227;
                        float _2772 = (-0.0) - _2228;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2787 = exp2(log2(1.0 / ((_2762 * 3.5) + 5.0)) * 0.25);
                        float _2788 = 1.0 - _503;
                        float _2795 = sqrt(1.0 - ((1.0 - (_2788 * _2788)) * (1.0 - (_2787 * _2787))));
                        float _2796 = _2795 * _2795;
                        float _2797 = _2796 * _2796;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2800 = _2779 + _2744;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2808 = dot(vec3(_428, _431, _434), vec3(_2777, _2778, _2779));
                        float _4095 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2812 = dot(vec3(_428, _431, _434), vec3(_2804 * _2798, _2804 * _2799, _2804 * _2800));
                        float _4106 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2819 = ((_2815 * _2815) * (_2797 + (-1.0))) + 1.0;
                        float _2820 = _2755 * _2796;
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2745) + _2821;
                        float _4117 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2825 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2826 = 1.0 - _2796;
                        float _2836 = (0.5 / (((_2825 * ((_2811 * _2826) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2826) + _2796) * _2811))) * _2825;
                        float _4128 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2847 = (((_2797 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_2819 * _2819) * ((_2762 * 2.1991131305694580078125) + 3.141590118408203125))) * _2751;
                        _2599 = (_2766 * _2714.x) + _2672;
                        _2600 = (_2766 * _2714.y) + _2673;
                        _2601 = (_2766 * _2714.z) + _2674;
                        _2596 = (_2847 * _2731.x) + _2669;
                        _2597 = (_2847 * _2731.y) + _2670;
                        _2598 = (_2847 * _2731.z) + _2671;
                        if (_2676 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2669 = _2596;
                            _2670 = _2597;
                            _2671 = _2598;
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2676;
                        }
                    }
                    frontier_phi_68_pred = _2598;
                    frontier_phi_68_pred_1 = _2601;
                    frontier_phi_68_pred_2 = _2600;
                    frontier_phi_68_pred_3 = _2599;
                    frontier_phi_68_pred_4 = _2597;
                    frontier_phi_68_pred_5 = _2596;
                }
                _2377 = frontier_phi_68_pred;
                _2383 = frontier_phi_68_pred_1;
                _2381 = frontier_phi_68_pred_2;
                _2379 = frontier_phi_68_pred_3;
                _2375 = frontier_phi_68_pred_4;
                _2373 = frontier_phi_68_pred_5;
                uint _2531 = _2530 + 1u;
                if (_2531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2524 = _2373;
                    _2525 = _2375;
                    _2526 = _2377;
                    _2527 = _2379;
                    _2528 = _2381;
                    _2529 = _2383;
                    _2530 = _2531;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        if (((4294967295u << _2389) & _2272) == 0u)
        {
            _2492 = _2372;
            _2494 = _2374;
            _2496 = _2376;
            _2498 = _2378;
            _2500 = _2380;
            _2502 = _2382;
        }
        else
        {
            float _2517 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
            float _2518 = _2517 * _2226;
            float _2519 = _2517 * _2227;
            float _2520 = _2517 * _2228;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2652 = _2372;
                float _2653 = _2374;
                float _2654 = _2376;
                float _2655 = _2378;
                float _2656 = _2380;
                float _2657 = _2382;
                uint _2658 = _2389;
                uint _2667;
                bool _2668;
                for (;;)
                {
                    _2667 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2658 << 2u)) >> 2u)).x;
                    _2668 = _2667 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2668)
                    {
                        frontier_phi_79_pred = _2657;
                        frontier_phi_79_pred_1 = _2656;
                        frontier_phi_79_pred_2 = _2655;
                        frontier_phi_79_pred_3 = _2654;
                        frontier_phi_79_pred_4 = _2653;
                        frontier_phi_79_pred_5 = _2652;
                    }
                    else
                    {
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _2874 = _2652;
                        float _2875 = _2653;
                        float _2876 = _2654;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        uint _2880 = _2667;
                        uint _2881;
                        vec4 _2906;
                        float _2907;
                        vec4 _2922;
                        vec3 _2934;
                        vec4 _2950;
                        vec4 _2966;
                        float _3013;
                        bool _3014;
                        for (;;)
                        {
                            uint _2891 = ((_2658 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2880));
                            _2881 = (_2880 + 4294967295u) & _2880;
                            uint _2893 = _2891 * 40u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            _2907 = _2906.w;
                            uint _2909 = (_2891 * 40u) + 4u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2924 = (_2891 * 40u) + 8u;
                            _2934 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x));
                            uint _2937 = (_2891 * 40u) + 16u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2891 * 40u) + 20u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2969 = (_2891 * 40u) + 24u;
                            vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2988 = (_2891 * 40u) + 28u;
                            vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            _3013 = fma(_2228, _3001.z, fma(_2227, _3001.y, _3001.x * _2226)) + _3001.w;
                            _3014 = !((fma(_2228, _2982.z, fma(_2227, _2982.y, _2982.x * _2226)) + _2982.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3014)
                            {
                                float _3041 = _2906.x - _2226;
                                float _3042 = _2906.y - _2227;
                                float _3043 = _2906.z - _2228;
                                float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                                float _3047 = inversesqrt(_3044);
                                float _3048 = _3047 * _3041;
                                float _3049 = _3047 * _3042;
                                float _3050 = _3047 * _3043;
                                float _3054 = 1.0 - (_3044 / (_2907 * _2907));
                                float _4139 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                                float _3059 = sqrt(_3044) * _2922.w;
                                float _3061 = 1.39999997615814208984375 / (_3059 + 1.39999997615814208984375);
                                float _3062 = _3061 * _3061;
                                float _3065 = ((1.0 - _3062) * dot(vec3(_3048, _3049, _3050), vec3(_428, _431, _434))) + _3062;
                                float _3068 = _3059 * _3059;
                                float _3072 = (fma(_2228, _2950.z, fma(_2227, _2950.y, _2950.x * _2226)) + _2950.w) / _3013;
                                float _3073 = (fma(_2228, _2966.z, fma(_2227, _2966.y, _2966.x * _2226)) + _2966.w) / _3013;
                                float _3077 = 1.0 - dot(vec2(_3072, _3073), vec2(_3072, _3073));
                                float _4155 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3078 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3079 = _3078 * (((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3055) / ((_3068 * 0.699999988079071044921875) + 1.0));
                                float _3091 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                                float _3092 = 1.0 - _503;
                                float _3099 = sqrt(1.0 - ((1.0 - (_3092 * _3092)) * (1.0 - (_3091 * _3091))));
                                float _3100 = _3099 * _3099;
                                float _3101 = _3100 * _3100;
                                float _3102 = _3048 - _2518;
                                float _3103 = _3049 - _2519;
                                float _3104 = _3050 - _2520;
                                float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                                float _3112 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2518, (-0.0) - _2519, (-0.0) - _2520));
                                float _4166 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3115 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3116 = dot(vec3(_428, _431, _434), vec3(_3108 * _3102, _3108 * _3103, _3108 * _3104));
                                float _4177 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3119 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3123 = ((_3119 * _3119) * (_3101 + (-1.0))) + 1.0;
                                float _3124 = _3061 * _3100;
                                float _3125 = _3124 * _3124;
                                float _3131 = ((1.0 - _3125) * dot(vec3(_428, _431, _434), vec3(_3048, _3049, _3050))) + _3125;
                                float _4188 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3133 = 1.0 - _3100;
                                float _3143 = (0.5 / (((_3132 * ((_3115 * _3133) + _3100)) + 9.9999999392252902907785028219223e-09) + (((_3132 * _3133) + _3100) * _3115))) * _3132;
                                float _4199 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3153 = (_3078 * _3055) * (((_3101 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_3123 * _3123) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3079 * _2922.z;
                                frontier_phi_85_pred_1 = _3079 * _2922.y;
                                frontier_phi_85_pred_2 = _3079 * _2922.x;
                                frontier_phi_85_pred_3 = _3153 * _2934.z;
                                frontier_phi_85_pred_4 = _3153 * _2934.y;
                                frontier_phi_85_pred_5 = _3153 * _2934.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3162 = frontier_phi_85_pred;
                            _3161 = frontier_phi_85_pred_1;
                            _3160 = frontier_phi_85_pred_2;
                            _3159 = frontier_phi_85_pred_3;
                            _3158 = frontier_phi_85_pred_4;
                            _3157 = frontier_phi_85_pred_5;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            if (_2881 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2881;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2866;
                        frontier_phi_79_pred_1 = _2865;
                        frontier_phi_79_pred_2 = _2864;
                        frontier_phi_79_pred_3 = _2863;
                        frontier_phi_79_pred_4 = _2862;
                        frontier_phi_79_pred_5 = _2861;
                    }
                    _2503 = frontier_phi_79_pred;
                    _2501 = frontier_phi_79_pred_1;
                    _2499 = frontier_phi_79_pred_2;
                    _2497 = frontier_phi_79_pred_3;
                    _2495 = frontier_phi_79_pred_4;
                    _2493 = frontier_phi_79_pred_5;
                    uint _2659 = _2658 + 1u;
                    if (_2659 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2652 = _2493;
                        _2653 = _2495;
                        _2654 = _2497;
                        _2655 = _2499;
                        _2656 = _2501;
                        _2657 = _2503;
                        _2658 = _2659;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2499;
                frontier_phi_60_61_ladder_1 = _2503;
                frontier_phi_60_61_ladder_2 = _2501;
                frontier_phi_60_61_ladder_3 = _2497;
                frontier_phi_60_61_ladder_4 = _2495;
                frontier_phi_60_61_ladder_5 = _2493;
            }
            else
            {
                frontier_phi_60_61_ladder = _2378;
                frontier_phi_60_61_ladder_1 = _2382;
                frontier_phi_60_61_ladder_2 = _2380;
                frontier_phi_60_61_ladder_3 = _2376;
                frontier_phi_60_61_ladder_4 = _2374;
                frontier_phi_60_61_ladder_5 = _2372;
            }
            _2492 = frontier_phi_60_61_ladder_5;
            _2494 = frontier_phi_60_61_ladder_4;
            _2496 = frontier_phi_60_61_ladder_3;
            _2498 = frontier_phi_60_61_ladder;
            _2500 = frontier_phi_60_61_ladder_2;
            _2502 = frontier_phi_60_61_ladder_1;
        }
        float _2507 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2284 = (_2507 * _2498) + _1718;
        _2286 = (_2507 * _2500) + _1720;
        _2288 = (_2507 * _2502) + _1722;
        _2290 = ((_2492 * _472) * _2507) + _2066;
        _2292 = ((_2494 * _474) * _2507) + _2068;
        _2294 = ((_2496 * _475) * _2507) + _2070;
    }
    else
    {
        _2284 = _1718;
        _2286 = _1720;
        _2288 = _1722;
        _2290 = _2066;
        _2292 = _2068;
        _2294 = _2070;
    }
    float _4215 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4226 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4237 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _2311 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2284 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _487))) + ((_2290 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2312 = ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2286 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _487))) + ((_2292 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2313 = ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2288 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _487))) + ((_2294 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    uint _2314 = _447 + 6u;
    float _2322 = _408 / cbSceneParam._m0[86u].x;
    float _2323 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2337 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2339 = _2337.x;
    float _2340 = _2337.y;
    float _2341 = _2337.z;
    float _2342 = _2337.w;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2397 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2398 = _2397 / _327;
        float _2409 = _2398 * _380;
        float _2410 = _381 * _2398;
        float _2411 = (-0.0) - _2410;
        float _2412 = _2398 * _382;
        float _2414 = (cbSceneParam._m0[77u].w * _2411) / _2397;
        float _2415 = _2414 + cbSceneParam._m0[79u].w;
        float _2416 = cbSceneParam._m0[79u].w - _2410;
        float _2422 = sqrt(((_2409 * _2409) + (_2410 * _2410)) + (_2412 * _2412));
        float _2425 = (1.0 - (cbSceneParam._m0[77u].w / _2397)) * _2422;
        float _2430 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2432 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2609;
        if (abs((_2411 - _2414) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2609 = ((((_2415 > 0.0) ? exp2(_2430 * _2415) : (2.0 - exp2(_2432 * _2415))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2425;
        }
        else
        {
            float _2553 = 1.0 / cbSceneParam._m0[80u].x;
            float _2554 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : max(_2415, _2416));
            float _2555 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : min(_2415, _2416));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            _2609 = ((abs(_2422 / _2411) * cbSceneParam._m0[80u].y) * ((((_2564 - _2565) * 2.0) - ((exp2(_2430 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0)))) - exp2(_2430 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0))))) * _2553)) - ((exp2(_2432 * _2564) - exp2(_2432 * _2565)) * _2553))) + (_2425 * cbSceneParam._m0[80u].z);
        }
        vec4 _2611 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, 1.0), 0.0);
        float _2620 = exp2((_2609 * (-1.44269502162933349609375)) * (1.0 - _2611.w));
        float _2621 = log2(_2620);
        float _2637 = log2(_2342);
        _2434 = (exp2(_2637 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].x)) * _2611.x) / cbSceneParam._m0[78u].x)) + _2339;
        _2436 = (exp2(_2637 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].y)) * _2611.y) / cbSceneParam._m0[78u].y)) + _2340;
        _2438 = (exp2(_2637 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2621 * cbSceneParam._m0[78u].z)) * _2611.z) / cbSceneParam._m0[78u].z)) + _2341;
        _2440 = _2620 * _2342;
    }
    else
    {
        _2434 = _2339;
        _2436 = _2340;
        _2438 = _2341;
        _2440 = _2342;
    }
    bool _2647;
    vec4 _2450;
    vec4 _2472;
    float _2474;
    float _2478;
    float _2479;
    float _2480;
    float _2481;
    bool _2491;
    for (;;)
    {
        _2450 = cbMatDynParam._m0[0u];
        float _2452 = roundEven(_2450.y);
        bool _2453 = _2452 == 3.0;
        float _2454 = log2(_2440);
        float _2461 = exp2(_2454 * cbSceneParam._m0[78u].x) * _2311;
        float _2462 = exp2(_2454 * cbSceneParam._m0[78u].y) * _2312;
        float _2463 = exp2(_2454 * cbSceneParam._m0[78u].z) * _2313;
        float _2470 = _396 + (-0.5);
        _2472 = cbMtdParam._m0[1u];
        _2474 = _2472.y * _2470;
        float _2477 = (_2452 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2478 = _2477 * (_2453 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2434)));
        _2479 = _2477 * (_2453 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2436)));
        _2480 = _2477 * (_2453 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2438)));
        _2481 = _2470 * 0.999000012874603271484375;
        _2491 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2491)
        {
            if ((cbInstanceData._m0[_447 + 7u].x + _2481) < 0.5)
            {
                _2647 = true;
                break;
            }
        }
        uint _2588 = _448 + uint(_2450.w);
        if ((cbInstanceData._m0[_2588].w < 1.0) && ((cbInstanceData._m0[_2588].w + _2481) < 0.5))
        {
            _2647 = true;
            break;
        }
        if ((_2474 + 1.0) < _2472.x)
        {
            _2647 = true;
            break;
        }
        _2647 = false;
        break;
    }
    float _2852;
    if (_2647)
    {
        discard_state = true;
        _2852 = 0.0;
    }
    else
    {
        _2852 = cbInstanceData._m0[_2314].w;
    }
    SV_Target.x = _2478;
    SV_Target.y = _2479;
    SV_Target.z = _2480;
    SV_Target.w = _2852;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2314].w;
    discard_exit();
}


