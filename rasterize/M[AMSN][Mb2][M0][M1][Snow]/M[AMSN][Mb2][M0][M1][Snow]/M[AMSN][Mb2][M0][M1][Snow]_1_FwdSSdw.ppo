#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1064;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _248.x;
    float _252 = _248.y;
    float _253 = _248.z;
    vec4 _285 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _298 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3423 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _308 = ((_285.z - _253) * _299) + _253;
    float _312 = ((((_285.x - _251) * _299) + _251) * 2.0) + (-1.0);
    float _314 = ((((_285.y - _252) * _299) + _252) * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3434 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))));
    float _323 = fma(_320, _232, fma(_314, _225, _312 * _211));
    float _326 = fma(_320, _233, fma(_314, _226, _312 * _212));
    float _329 = fma(_320, _234, fma(_314, _227, _312 * _213));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _361 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _365 = (cbMtdParam._m0[11u].z + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_361.x * cbMtdParam._m0[11u].w);
    float _3445 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    vec4 _383 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _388 = _383.x * cbMtdParam._m0[9u].x;
    float _389 = _383.y * cbMtdParam._m0[9u].y;
    float _390 = _383.z * cbMtdParam._m0[9u].z;
    vec4 _409 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _423 = (((_409.x * cbMtdParam._m0[10u].x) - _388) * _299) + _388;
    float _424 = (((_409.y * cbMtdParam._m0[10u].y) - _389) * _299) + _389;
    float _425 = (((_409.z * cbMtdParam._m0[10u].z) - _390) * _299) + _390;
    vec4 _438 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _449 = ((_438.x - _423) * _366) + _423;
    float _450 = ((_438.y - _424) * _366) + _424;
    float _451 = ((_438.z - _425) * _366) + _425;
    float _467 = _299 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _469 = _467 - (_467 * _366);
    vec4 _482 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _489 = (_482.x * 2.0) + (-1.0);
    float _490 = (_482.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3456 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _499 = ((_482.z - _308) * _366) + _308;
    float _506 = ((_489 - _312) * _366) + _312;
    float _507 = ((_490 - _314) * _366) + _314;
    float _508 = ((sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) - _320) * _366) + _320;
    float _511 = fma(_508, _232, fma(_507, _225, _506 * _211));
    float _514 = fma(_508, _233, fma(_507, _226, _506 * _212));
    float _517 = fma(_508, _234, fma(_507, _227, _506 * _213));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _522 = _521 * _511;
    float _523 = _521 * _514;
    float _524 = _521 * _517;
    float _3467 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _525 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3489 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3500 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3511 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _529 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _595 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _585);
    float _596 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _585);
    float _597 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _585);
    float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
    float _602 = _595 * _601;
    float _603 = _596 * _601;
    float _604 = _597 * _601;
    float _610 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _611 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _630 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _633 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _636 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    uint _649 = uint(roundEven(NORMAL.w)) * 13u;
    uint _651 = (_649 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _657 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_651].x;
    float _658 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_651].y;
    float _659 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_651].z;
    float _3522 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _663 = 1.0 - _529;
    float _664 = _660 * _663;
    float _665 = _661 * _663;
    float _666 = _662 * _663;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _529;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _529;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _529;
    float _674 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _610, cbSceneParam._m0[86u].y * _611));
    float _689 = _686.x * TEXCOORD_9.w;
    float _690 = dot(vec3(_522, _523, _524), vec3(_602, _603, _604));
    float _693 = _690 * 2.0;
    float _697 = (_693 * _522) - _602;
    float _698 = (_693 * _523) - _603;
    float _699 = (_693 * _524) - _604;
    float _703 = abs(dot(vec3(_602, _603, _604), vec3(_522, _523, _524)));
    float _3555 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _705 = sqrt(_525);
    float _718 = exp2((_705 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _724 = (1.0 - _718) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _725 = _718 * _705;
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _788 = fma(_761, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753));
        float _792 = fma(_761, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753));
        float _796 = fma(_761, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753));
        float _821 = _753 + _522;
        float _822 = _757 + _523;
        float _823 = _761 + _524;
        float _833 = fma(_823, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821)) - _788;
        float _834 = fma(_823, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821)) - _792;
        float _835 = fma(_823, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821)) - _796;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_788 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_792 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[34u].z) + ((((((_796 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(_522, _523, _524), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3603 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_522, _523, _524), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3636 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_522, _523, _524), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3669 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1065 = _893;
        _1066 = _892;
        _1067 = _904;
        _1068 = _903;
        _1069 = _902;
        _1070 = _914;
        _1071 = _913;
        _1072 = _912;
        _1073 = _927;
        _1074 = _926;
        _1075 = _925;
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _1064;
        _1065 = _1064;
        _1066 = _1064;
        _1067 = _1064;
        _1068 = _1064;
        _1069 = _1064;
        _1070 = _1064;
        _1071 = _1064;
        _1072 = _1064;
        _1073 = _1064;
        _1074 = _1064;
        _1075 = _1064;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = fma(_761, cbModelParam._m0[30u].z, fma(_757, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _753));
        float _1108 = fma(_761, cbModelParam._m0[31u].z, fma(_757, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _753));
        float _1112 = fma(_761, cbModelParam._m0[32u].z, fma(_757, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _753));
        float _1135 = _753 + _522;
        float _1136 = _757 + _523;
        float _1137 = _761 + _524;
        float _1147 = fma(_1137, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1104 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1108 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[35u].z) + ((((((_1112 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1203 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1170.x + (-0.5));
        float _1205 = _1203 * (_1170.y + (-0.5));
        float _1206 = _1203 * (_1170.z + (-0.5));
        float _1213 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1177.x + (-0.5));
        float _1215 = _1213 * (_1177.y + (-0.5));
        float _1216 = _1213 * (_1177.z + (-0.5));
        float _1223 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1184.x + (-0.5));
        float _1225 = _1223 * (_1184.y + (-0.5));
        float _1226 = _1223 * (_1184.z + (-0.5));
        float _1233 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1191.x + (-0.5));
        float _1235 = _1233 * (_1191.y + (-0.5));
        float _1236 = _1233 * (_1191.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_522, _523, _524), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3732 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1267 + 1.0))) + _1272) * _1237;
        float _1282 = _1205 * 0.5;
        float _1283 = _1215 * 0.5;
        float _1284 = _1225 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_522, _523, _524), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3765 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1309 + 1.0))) + _1314) * _1238;
        float _1324 = _1206 * 0.5;
        float _1325 = _1216 * 0.5;
        float _1326 = _1226 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_522, _523, _524), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3798 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1351 + 1.0))) + _1356) * _1239;
        _1373 = _1206;
        _1374 = _1205;
        _1375 = _1204;
        _1376 = _1216;
        _1377 = _1215;
        _1378 = _1214;
        _1379 = _1226;
        _1380 = _1225;
        _1381 = _1224;
        _1382 = _1239;
        _1383 = _1238;
        _1384 = _1237;
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1064;
        _1374 = _1064;
        _1375 = _1064;
        _1376 = _1064;
        _1377 = _1064;
        _1378 = _1064;
        _1379 = _1064;
        _1380 = _1064;
        _1381 = _1064;
        _1382 = _1064;
        _1383 = _1064;
        _1384 = _1064;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1420 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1397));
    float _1441 = _697 * 0.5;
    float _1442 = _698 * 0.5;
    float _1443 = _699 * 0.5;
    float _1444 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1447 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1450 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1484;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1457 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1063, _1067, _1070, _1073));
        float _1461 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1465 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1472 = dot(vec4(cbModelParam._m0[39u]), vec4(_1441, _1442, _1443, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1495;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1486 = dot(vec4(cbModelParam._m0[40u]), vec4(_1441, _1442, _1443, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1499 = (_1495 * cbModelParam._m0[1u].x) + (_1484 * (1.0 - cbModelParam._m0[1u].x));
    float _1509 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _525);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1509 : min(cbModelParam._m0[25u].z, _1509));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1559 = fma(_761, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753)) + cbModelParam._m0[13u].w;
        float _1563 = fma(_761, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753)) + cbModelParam._m0[14u].w;
        float _1567 = fma(_761, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753)) + cbModelParam._m0[15u].w;
        float _1570 = fma(_699, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697));
        float _1573 = fma(_699, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697));
        float _1576 = fma(_699, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697));
        float _1604;
        if (_1570 > 0.0)
        {
            _1604 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1604 = frontier_phi_16_14_ladder;
        }
        float _1831;
        if (_1573 > 0.0)
        {
            _1831 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1831 = frontier_phi_25_21_ladder;
        }
        float _2088;
        if (_1576 > 0.0)
        {
            _2088 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2088 = frontier_phi_37_32_ladder;
        }
        float _2090 = isnan(_1831) ? _1604 : (isnan(_1604) ? _1831 : min(_1604, _1831));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1570) + _1559;
        float _2096 = (_2091 * _1573) + _1563;
        float _2097 = (_2091 * _1576) + _1567;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2098;
        float _2102 = _2098 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 > _2102) || ((_2096 < _2100) || ((_2095 < _2100) || (_2095 > _2102))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2225 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2097, cbModelParam._m0[9u].z, fma(_2096, cbModelParam._m0[9u].y, _2095 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2097, cbModelParam._m0[10u].z, fma(_2096, cbModelParam._m0[10u].y, _2095 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2097, cbModelParam._m0[11u].z, fma(_2096, cbModelParam._m0[11u].y, _2095 * cbModelParam._m0[11u].x))), _1510);
            frontier_phi_15_37_ladder = _2225.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2225.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2225.x * cbModelParam._m0[1u].y;
        }
        _1592 = frontier_phi_15_37_ladder_2;
        _1594 = frontier_phi_15_37_ladder_1;
        _1596 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_697, _698, _699), _1510);
        _1592 = _1580.x * cbModelParam._m0[1u].y;
        _1594 = _1580.y * cbModelParam._m0[1u].y;
        _1596 = _1580.z * cbModelParam._m0[1u].y;
    }
    float _1600 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _525);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1600 : min(cbModelParam._m0[25u].w, _1600));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1658 = fma(_761, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753)) + cbModelParam._m0[21u].w;
        float _1662 = fma(_761, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753)) + cbModelParam._m0[22u].w;
        float _1666 = fma(_761, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753)) + cbModelParam._m0[23u].w;
        float _1669 = fma(_699, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697));
        float _1672 = fma(_699, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697));
        float _1675 = fma(_699, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697));
        float _1836;
        if (_1669 > 0.0)
        {
            _1836 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1836 = frontier_phi_27_23_ladder;
        }
        float _2115;
        if (_1672 > 0.0)
        {
            _2115 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2115 = frontier_phi_39_34_ladder;
        }
        float _2328;
        if (_1675 > 0.0)
        {
            _2328 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2328 = frontier_phi_48_45_ladder;
        }
        float _2330 = isnan(_2115) ? _1836 : (isnan(_1836) ? _2115 : min(_1836, _2115));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1669) + _1658;
        float _2336 = (_2331 * _1672) + _1662;
        float _2337 = (_2331 * _1675) + _1666;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2338;
        float _2341 = _2338 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2337 > _2341) || ((_2337 < _2339) || ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 < _2339) || (_2335 > _2341))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2337, cbModelParam._m0[17u].z, fma(_2336, cbModelParam._m0[17u].y, _2335 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2337, cbModelParam._m0[18u].z, fma(_2336, cbModelParam._m0[18u].y, _2335 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2337, cbModelParam._m0[19u].z, fma(_2336, cbModelParam._m0[19u].y, _2335 * cbModelParam._m0[19u].x))), _1601);
            frontier_phi_24_48_ladder = _2535.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2535.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2535.x * cbModelParam._m0[1u].z;
        }
        _1694 = frontier_phi_24_48_ladder_2;
        _1696 = frontier_phi_24_48_ladder_1;
        _1698 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_697, _698, _699), _1601);
        _1694 = _1678.x * cbModelParam._m0[1u].z;
        _1696 = _1678.y * cbModelParam._m0[1u].z;
        _1698 = _1678.z * cbModelParam._m0[1u].z;
    }
    float _1711 = (((_724 * _674) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1713 = (((_724 * _676) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1715 = (((_724 * _677) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1718 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, _1711 * cbSceneParam._m0[91u].x));
    vec4 _1732 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_610, _611));
    float _1734 = _1732.w;
    float _1746 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1734);
    float _1747 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1734);
    float _1748 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1734);
    uvec4 _1752 = floatBitsToUint(cbInstanceData._m0[_649 + 5u]);
    uint _1754 = _1752.x * 14u;
    uint _1755 = _1754 + 13u;
    float _1762 = _689 + (-1.0);
    float _1767 = (cbLight._m0[_1755].x * _1762) + 1.0;
    float _1768 = (cbLight._m0[_1755].y * _1762) + 1.0;
    float _1769 = (cbLight._m0[_1755].z * _1762) + 1.0;
    float _1770 = (cbLight._m0[_1755].w * _1762) + 1.0;
    uint _1771 = _1754 + 5u;
    float _1777 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1781 = _1754 + 4u;
    float _1790 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1794 = _1754 | 1u;
    float _1805 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_522, _523, _524));
    float _1808 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_522, _523, _524));
    float _3934 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _3945 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1813 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1815 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1822 = ((cbLight._m0[_1771].x * _1777) * _1815) + (((cbLight._m0[_1781].x * _1746) * _1790) * _1813);
    float _1823 = ((_1777 * cbLight._m0[_1771].y) * _1815) + (((cbLight._m0[_1781].y * _1747) * _1790) * _1813);
    float _1824 = ((_1777 * cbLight._m0[_1771].z) * _1815) + (((cbLight._m0[_1781].z * _1748) * _1790) * _1813);
    uvec4 _1828 = floatBitsToUint(cbLight._m0[_1754 + 12u]);
    bool _1830 = _1828.x == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1830)
    {
        _1841 = _1822;
        _1843 = _1823;
        _1845 = _1824;
    }
    else
    {
        uint _1849 = _1754 + 6u;
        float _1865 = (dot(vec3(cbLight._m0[_1754 + 2u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _1866 = _1865 * _1865;
        float _3956 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1868 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1841 = (((cbLight._m0[_1849].x * 0.3183098733425140380859375) * _1867) * _1868) + _1822;
        _1843 = (((cbLight._m0[_1849].y * 0.3183098733425140380859375) * _1867) * _1868) + _1823;
        _1845 = (((cbLight._m0[_1849].z * 0.3183098733425140380859375) * _1867) * _1868) + _1824;
    }
    bool _1848 = _1828.y == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1848)
    {
        _1886 = _1841;
        _1888 = _1843;
        _1890 = _1845;
    }
    else
    {
        uint _2059 = _1754 + 7u;
        float _2075 = (dot(vec3(cbLight._m0[_1754 + 3u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _2076 = _2075 * _2075;
        float _3972 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2077 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2078 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _1886 = (((cbLight._m0[_2059].x * 0.3183098733425140380859375) * _2077) * _2078) + _1841;
        _1888 = (((cbLight._m0[_2059].y * 0.3183098733425140380859375) * _2077) * _2078) + _1843;
        _1890 = (((cbLight._m0[_2059].z * 0.3183098733425140380859375) * _2077) * _2078) + _1845;
    }
    uint _1893 = _1754 + 8u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _525) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1754].x + _602;
    float _1909 = cbLight._m0[_1754].y + _603;
    float _1910 = cbLight._m0[_1754].z + _604;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1754].xyz));
    float _3988 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1922 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1923 = dot(vec3(_522, _523, _524), vec3(_1915, _1916, _1917));
    float _4010 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1915, _1916, _1917));
    float _4021 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1907 * _1907;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1943 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
    float _1944 = 0.959999978542327880859375 - _671;
    float _1946 = 0.959999978542327880859375 - _672;
    float _1947 = 0.959999978542327880859375 - _673;
    float _1954 = 1.0 - _1907;
    float _1965 = (0.5 / (((_1922 * ((_1921 * _1954) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _1954) + _1907) * _1921))) * _1921;
    float _4032 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    uint _1981 = _1754 + 9u;
    float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _525) * 0.949999988079071044921875);
    float _1993 = _1992 * _1992;
    float _1994 = cbLight._m0[_1794].x + _602;
    float _1995 = cbLight._m0[_1794].y + _603;
    float _1996 = cbLight._m0[_1794].z + _604;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2001 = _2000 * _1994;
    float _2002 = _2000 * _1995;
    float _2003 = _2000 * _1996;
    float _2004 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1794].xyz));
    float _4043 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2008 = dot(vec3(_522, _523, _524), vec3(_2001, _2002, _2003));
    float _4054 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_2001, _2002, _2003));
    float _4065 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1993 * _1993;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
    float _2034 = 1.0 - _1993;
    float _2044 = (0.5 / (((_1922 * ((_2007 * _2034) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2034) + _1993) * _2007))) * _2007;
    float _4076 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    float _2056 = (((((_2027 * _1944) + _674) * cbLight._m0[_1981].x) * _2046) * _1777) + ((((cbLight._m0[_1893].x * _1746) * ((_1943 * _1944) + _674)) * _1967) * _1790);
    float _2057 = (((((_2027 * _1946) + _676) * cbLight._m0[_1981].y) * _2046) * _1777) + ((((cbLight._m0[_1893].y * _1747) * ((_1943 * _1946) + _676)) * _1967) * _1790);
    float _2058 = (((((_2027 * _1947) + _677) * cbLight._m0[_1981].z) * _2046) * _1777) + ((((cbLight._m0[_1893].z * _1748) * ((_1943 * _1947) + _677)) * _1967) * _1790);
    float _2120;
    float _2122;
    float _2124;
    if (_1830)
    {
        _2120 = _2056;
        _2122 = _2057;
        _2124 = _2058;
    }
    else
    {
        uint _2126 = _1754 + 2u;
        uint _2130 = _1754 + 10u;
        float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _525) * 0.949999988079071044921875);
        float _2145 = _2144 * _2144;
        float _2146 = cbLight._m0[_2126].x + _602;
        float _2147 = cbLight._m0[_2126].y + _603;
        float _2148 = cbLight._m0[_2126].z + _604;
        float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
        float _2153 = _2152 * _2146;
        float _2154 = _2152 * _2147;
        float _2155 = _2152 * _2148;
        float _2156 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2126].xyz));
        float _4087 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2160 = dot(vec3(_522, _523, _524), vec3(_2153, _2154, _2155));
        float _4098 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2164 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2153, _2154, _2155));
        float _4109 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2168 = _2145 * _2145;
        float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
        float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
        float _2186 = 1.0 - _2145;
        float _2196 = (0.5 / (((_1922 * ((_2159 * _2186) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2186) + _2145) * _2159))) * _2159;
        float _4120 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2198 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
        float _2199 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2120 = (((((_2179 * _1944) + _674) * cbLight._m0[_2130].x) * _2198) * _2199) + _2056;
        _2122 = (((((_2179 * _1946) + _676) * cbLight._m0[_2130].y) * _2198) * _2199) + _2057;
        _2124 = (((((_2179 * _1947) + _677) * cbLight._m0[_2130].z) * _2198) * _2199) + _2058;
    }
    float _2234;
    float _2236;
    float _2238;
    if (_1848)
    {
        _2234 = _2120;
        _2236 = _2122;
        _2238 = _2124;
    }
    else
    {
        uint _2245 = _1754 + 3u;
        uint _2249 = _1754 + 11u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _525) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _602;
        float _2266 = cbLight._m0[_2245].y + _603;
        float _2267 = cbLight._m0[_2245].z + _604;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2245].xyz));
        float _4136 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2279 = dot(vec3(_522, _523, _524), vec3(_2272, _2273, _2274));
        float _4147 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4158 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
        float _2305 = 1.0 - _2264;
        float _2315 = (0.5 / (((_1922 * ((_2278 * _2305) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2305) + _2264) * _2278))) * _2278;
        float _4169 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2234 = (((((_2298 * _1944) + _674) * cbLight._m0[_2249].x) * _2317) * _2318) + _2120;
        _2236 = (((((_2298 * _1946) + _676) * cbLight._m0[_2249].y) * _2317) * _2318) + _2122;
        _2238 = (((((_2298 * _1947) + _677) * cbLight._m0[_2249].z) * _2317) * _2318) + _2124;
    }
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_1752.y == 0u)
    {
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2393;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2393;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2393;
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.x;
        uint _2420 = uint((float(_2408.y) * floor(float(uint(cbSceneParam._m0[85u].y * _611) / _2409))) + floor(float(uint(cbSceneParam._m0[85u].x * _610) / _2409)));
        float _2430 = (log2(_2396 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2431 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        uint _2434 = uint(isnan(14.0) ? _2431 : (isnan(_2431) ? 14.0 : min(_2431, 14.0)));
        uvec4 _2439 = texelFetch(g_lightClusterGridBuffer, int(((_2434 << 2u) + (_2420 << 6u)) >> 2u));
        uint _2440 = _2439.x;
        uint _2441 = _2408.z;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((((1u << ((_2441 >> 4u) & 15u)) + 4294967295u) & _2440) == 0u) || ((_2441 & 240u) == 0u))
        {
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
        }
        else
        {
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            uint _2690 = 0u;
            uint _2699;
            bool _2700;
            for (;;)
            {
                _2699 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                _2700 = _2699 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2700)
                {
                    frontier_phi_63_pred = _2689;
                    frontier_phi_63_pred_1 = _2688;
                    frontier_phi_63_pred_2 = _2687;
                    frontier_phi_63_pred_3 = _2686;
                    frontier_phi_63_pred_4 = _2685;
                    frontier_phi_63_pred_5 = _2684;
                }
                else
                {
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    uint _2814;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2699;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    for (;;)
                    {
                        uint _2818 = uint(findLSB(_2814)) + (_2690 << 5u);
                        uint _2815 = (_2814 + 4294967295u) & _2814;
                        uint _2820 = _2818 * 48u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2840 = (_2818 * 48u) + 4u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2859 = (_2818 * 48u) + 8u;
                        vec3 _2870 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x));
                        float _2874 = _2834.x - _2394;
                        float _2875 = _2834.y - _2395;
                        float _2876 = _2834.z - _2396;
                        float _2877 = dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876));
                        float _2880 = inversesqrt(_2877);
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2884 = dot(vec3(_630, _633, _636), vec3(_2881, _2882, _2883));
                        float _2889 = 1.0 - (_2877 * _2834.w);
                        float _4195 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2891 = sqrt(_2877) * _2853.w;
                        float _2894 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                        float _2895 = _2894 * _2894;
                        float _2898 = ((1.0 - _2895) * _2884) + _2895;
                        float _2901 = _2891 * _2891;
                        float _2905 = ((isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))) * _2890) / ((_2901 * 0.699999988079071044921875) + 1.0);
                        float _2909 = (-0.0) - _2394;
                        float _2910 = (-0.0) - _2395;
                        float _2911 = (-0.0) - _2396;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2926 = exp2(log2(1.0 / ((_2901 * 3.5) + 5.0)) * 0.25);
                        float _2927 = 1.0 - _705;
                        float _2934 = sqrt(1.0 - ((1.0 - (_2927 * _2927)) * (1.0 - (_2926 * _2926))));
                        float _2935 = _2934 * _2934;
                        float _2936 = _2935 * _2935;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2939 = _2918 + _2883;
                        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
                        float _2947 = dot(vec3(_630, _633, _636), vec3(_2916, _2917, _2918));
                        float _4211 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2951 = dot(vec3(_630, _633, _636), vec3(_2943 * _2937, _2943 * _2938, _2943 * _2939));
                        float _4222 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2958 = ((_2954 * _2954) * (_2936 + (-1.0))) + 1.0;
                        float _2959 = _2894 * _2935;
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2884) + _2960;
                        float _4233 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2965 = 1.0 - _2935;
                        float _2975 = (0.5 / (((_2964 * ((_2950 * _2965) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2964 * _2965) + _2935) * _2950))) * _2964;
                        float _4244 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2986 = (((_2936 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_2958 * _2958) * ((_2901 * 2.1991131305694580078125) + 3.141590118408203125))) * _2890;
                        _2743 = (_2905 * _2853.x) + _2811;
                        _2744 = (_2905 * _2853.y) + _2812;
                        _2745 = (_2905 * _2853.z) + _2813;
                        _2740 = (_2986 * _2870.x) + _2808;
                        _2741 = (_2986 * _2870.y) + _2809;
                        _2742 = (_2986 * _2870.z) + _2810;
                        if (_2815 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2815;
                        }
                    }
                    frontier_phi_63_pred = _2745;
                    frontier_phi_63_pred_1 = _2744;
                    frontier_phi_63_pred_2 = _2743;
                    frontier_phi_63_pred_3 = _2742;
                    frontier_phi_63_pred_4 = _2741;
                    frontier_phi_63_pred_5 = _2740;
                }
                _2551 = frontier_phi_63_pred;
                _2549 = frontier_phi_63_pred_1;
                _2547 = frontier_phi_63_pred_2;
                _2545 = frontier_phi_63_pred_3;
                _2543 = frontier_phi_63_pred_4;
                _2541 = frontier_phi_63_pred_5;
                uint _2691 = _2690 + 1u;
                if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2684 = _2541;
                    _2685 = _2543;
                    _2686 = _2545;
                    _2687 = _2547;
                    _2688 = _2549;
                    _2689 = _2551;
                    _2690 = _2691;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
        }
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.z;
        uint _2557 = (_2555 >> 8u) & 15u;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((4294967295u << _2557) & _2440) == 0u)
        {
            _2652 = _2540;
            _2654 = _2542;
            _2656 = _2544;
            _2658 = _2546;
            _2660 = _2548;
            _2662 = _2550;
        }
        else
        {
            float _2677 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
            float _2678 = _2677 * _2394;
            float _2679 = _2677 * _2395;
            float _2680 = _2677 * _2396;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2557 < ((_2555 >> 12u) & 15u))
            {
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2791 = _2540;
                float _2792 = _2542;
                float _2793 = _2544;
                float _2794 = _2546;
                float _2795 = _2548;
                float _2796 = _2550;
                uint _2797 = _2557;
                uint _2806;
                bool _2807;
                for (;;)
                {
                    _2806 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                    _2807 = _2806 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2807)
                    {
                        frontier_phi_69_pred = _2796;
                        frontier_phi_69_pred_1 = _2795;
                        frontier_phi_69_pred_2 = _2794;
                        frontier_phi_69_pred_3 = _2793;
                        frontier_phi_69_pred_4 = _2792;
                        frontier_phi_69_pred_5 = _2791;
                    }
                    else
                    {
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        uint _3010 = _2806;
                        uint _3011;
                        vec4 _3036;
                        float _3037;
                        vec4 _3052;
                        vec3 _3064;
                        vec4 _3080;
                        vec4 _3096;
                        float _3143;
                        bool _3144;
                        for (;;)
                        {
                            uint _3021 = ((_2797 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3010));
                            _3011 = (_3010 + 4294967295u) & _3010;
                            uint _3023 = _3021 * 40u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3037 = _3036.w;
                            uint _3039 = (_3021 * 40u) + 4u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3054 = (_3021 * 40u) + 8u;
                            _3064 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x));
                            uint _3067 = (_3021 * 40u) + 16u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3083 = (_3021 * 40u) + 20u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3021 * 40u) + 24u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3118 = (_3021 * 40u) + 28u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3143 = fma(_2396, _3131.z, fma(_2395, _3131.y, _3131.x * _2394)) + _3131.w;
                            _3144 = !((fma(_2396, _3112.z, fma(_2395, _3112.y, _3112.x * _2394)) + _3112.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3144)
                            {
                                float _3171 = _3036.x - _2394;
                                float _3172 = _3036.y - _2395;
                                float _3173 = _3036.z - _2396;
                                float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                                float _3177 = inversesqrt(_3174);
                                float _3178 = _3177 * _3171;
                                float _3179 = _3177 * _3172;
                                float _3180 = _3177 * _3173;
                                float _3184 = 1.0 - (_3174 / (_3037 * _3037));
                                float _4255 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3189 = sqrt(_3174) * _3052.w;
                                float _3191 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                                float _3192 = _3191 * _3191;
                                float _3195 = ((1.0 - _3192) * dot(vec3(_3178, _3179, _3180), vec3(_630, _633, _636))) + _3192;
                                float _3198 = _3189 * _3189;
                                float _3202 = (fma(_2396, _3080.z, fma(_2395, _3080.y, _3080.x * _2394)) + _3080.w) / _3143;
                                float _3203 = (fma(_2396, _3096.z, fma(_2395, _3096.y, _3096.x * _2394)) + _3096.w) / _3143;
                                float _3207 = 1.0 - dot(vec2(_3202, _3203), vec2(_3202, _3203));
                                float _4271 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3209 = _3208 * (((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3185) / ((_3198 * 0.699999988079071044921875) + 1.0));
                                float _3221 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                                float _3222 = 1.0 - _705;
                                float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                                float _3230 = _3229 * _3229;
                                float _3231 = _3230 * _3230;
                                float _3232 = _3178 - _2678;
                                float _3233 = _3179 - _2679;
                                float _3234 = _3180 - _2680;
                                float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                                float _3242 = dot(vec3(_630, _633, _636), vec3((-0.0) - _2678, (-0.0) - _2679, (-0.0) - _2680));
                                float _4282 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3246 = dot(vec3(_630, _633, _636), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                                float _4293 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                                float _3254 = _3191 * _3230;
                                float _3255 = _3254 * _3254;
                                float _3261 = ((1.0 - _3255) * dot(vec3(_630, _633, _636), vec3(_3178, _3179, _3180))) + _3255;
                                float _4304 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3263 = 1.0 - _3230;
                                float _3273 = (0.5 / (((_3262 * ((_3245 * _3263) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3230) * _3245))) * _3262;
                                float _4315 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3283 = (_3208 * _3185) * (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3253 * _3253) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3209 * _3052.z;
                                frontier_phi_75_pred_1 = _3209 * _3052.y;
                                frontier_phi_75_pred_2 = _3209 * _3052.x;
                                frontier_phi_75_pred_3 = _3283 * _3064.z;
                                frontier_phi_75_pred_4 = _3283 * _3064.y;
                                frontier_phi_75_pred_5 = _3283 * _3064.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_75_pred;
                            _3291 = frontier_phi_75_pred_1;
                            _3290 = frontier_phi_75_pred_2;
                            _3289 = frontier_phi_75_pred_3;
                            _3288 = frontier_phi_75_pred_4;
                            _3287 = frontier_phi_75_pred_5;
                            _2994 = _3290 + _3007;
                            _2995 = _3291 + _3008;
                            _2996 = _3292 + _3009;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            _2993 = _3289 + _3006;
                            if (_3011 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _3011;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2996;
                        frontier_phi_69_pred_1 = _2995;
                        frontier_phi_69_pred_2 = _2994;
                        frontier_phi_69_pred_3 = _2993;
                        frontier_phi_69_pred_4 = _2992;
                        frontier_phi_69_pred_5 = _2991;
                    }
                    _2663 = frontier_phi_69_pred;
                    _2661 = frontier_phi_69_pred_1;
                    _2659 = frontier_phi_69_pred_2;
                    _2657 = frontier_phi_69_pred_3;
                    _2655 = frontier_phi_69_pred_4;
                    _2653 = frontier_phi_69_pred_5;
                    uint _2798 = _2797 + 1u;
                    if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2791 = _2653;
                        _2792 = _2655;
                        _2793 = _2657;
                        _2794 = _2659;
                        _2795 = _2661;
                        _2796 = _2663;
                        _2797 = _2798;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2663;
                frontier_phi_57_58_ladder_1 = _2661;
                frontier_phi_57_58_ladder_2 = _2659;
                frontier_phi_57_58_ladder_3 = _2657;
                frontier_phi_57_58_ladder_4 = _2655;
                frontier_phi_57_58_ladder_5 = _2653;
            }
            else
            {
                frontier_phi_57_58_ladder = _2550;
                frontier_phi_57_58_ladder_1 = _2548;
                frontier_phi_57_58_ladder_2 = _2546;
                frontier_phi_57_58_ladder_3 = _2544;
                frontier_phi_57_58_ladder_4 = _2542;
                frontier_phi_57_58_ladder_5 = _2540;
            }
            _2652 = frontier_phi_57_58_ladder_5;
            _2654 = frontier_phi_57_58_ladder_4;
            _2656 = frontier_phi_57_58_ladder_3;
            _2658 = frontier_phi_57_58_ladder_2;
            _2660 = frontier_phi_57_58_ladder_1;
            _2662 = frontier_phi_57_58_ladder;
        }
        float _2667 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
        _2452 = (_2667 * _2658) + _1886;
        _2454 = (_2667 * _2660) + _1888;
        _2456 = (_2667 * _2662) + _1890;
        _2458 = ((_2652 * _674) * _2667) + _2234;
        _2460 = ((_2654 * _676) * _2667) + _2236;
        _2462 = ((_2656 * _677) * _2667) + _2238;
    }
    else
    {
        _2452 = _1886;
        _2454 = _1888;
        _2456 = _1890;
        _2458 = _2234;
        _2460 = _2236;
        _2462 = _2238;
    }
    float _4331 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4342 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4353 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    uint _2482 = _649 + 6u;
    float _2490 = _610 / cbSceneParam._m0[86u].x;
    float _2491 = _611 / cbSceneParam._m0[86u].y;
    vec4 _2505 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2507 = _2505.x;
    float _2508 = _2505.y;
    float _2509 = _2505.z;
    float _2510 = _2505.w;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2565 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2566 = _2565 / _545;
        float _2577 = _2566 * _595;
        float _2578 = _596 * _2566;
        float _2579 = (-0.0) - _2578;
        float _2580 = _2566 * _597;
        float _2582 = (cbSceneParam._m0[77u].w * _2579) / _2565;
        float _2583 = _2582 + cbSceneParam._m0[79u].w;
        float _2584 = cbSceneParam._m0[79u].w - _2578;
        float _2590 = sqrt(((_2577 * _2577) + (_2578 * _2578)) + (_2580 * _2580));
        float _2593 = (1.0 - (cbSceneParam._m0[77u].w / _2565)) * _2590;
        float _2598 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2600 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2753;
        if (abs((_2579 - _2582) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2753 = ((((_2583 > 0.0) ? exp2(_2598 * _2583) : (2.0 - exp2(_2600 * _2583))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2593;
        }
        else
        {
            float _2713 = 1.0 / cbSceneParam._m0[80u].x;
            float _2714 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : max(_2583, _2584));
            float _2715 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : min(_2583, _2584));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            float _2725 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : min(_2715, 0.0));
            _2753 = ((abs(_2590 / _2579) * cbSceneParam._m0[80u].y) * ((((_2724 - _2725) * 2.0) - ((exp2(_2598 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)))) - exp2(_2598 * (isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))))) * _2713)) - ((exp2(_2600 * _2724) - exp2(_2600 * _2725)) * _2713))) + (_2593 * cbSceneParam._m0[80u].z);
        }
        vec4 _2755 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, 1.0), 0.0);
        float _2764 = exp2((_2753 * (-1.44269502162933349609375)) * (1.0 - _2755.w));
        float _2765 = log2(_2764);
        float _2781 = log2(_2510);
        _2602 = (exp2(_2781 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].x)) * _2755.x) / cbSceneParam._m0[78u].x)) + _2507;
        _2604 = (exp2(_2781 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].y)) * _2755.y) / cbSceneParam._m0[78u].y)) + _2508;
        _2606 = (exp2(_2781 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].z)) * _2755.z) / cbSceneParam._m0[78u].z)) + _2509;
        _2608 = _2764 * _2510;
    }
    else
    {
        _2602 = _2507;
        _2604 = _2508;
        _2606 = _2509;
        _2608 = _2510;
    }
    float _2620 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2621 = _2620 == 3.0;
    float _2622 = log2(_2608);
    float _2629 = exp2(_2622 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2452 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _689))) + ((_2458 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1499)) * cbPerFrame._m0[3u].x));
    float _2630 = exp2(_2622 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2454 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _689))) + ((_2460 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1499)) * cbPerFrame._m0[3u].x));
    float _2631 = exp2(_2622 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2456 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _689))) + ((_2462 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1499)) * cbPerFrame._m0[3u].x));
    float _2640 = (_2620 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2640 * (_2621 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.y = _2640 * (_2621 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.z = _2640 * (_2621 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.w = cbInstanceData._m0[_2482].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2482].w;
}


