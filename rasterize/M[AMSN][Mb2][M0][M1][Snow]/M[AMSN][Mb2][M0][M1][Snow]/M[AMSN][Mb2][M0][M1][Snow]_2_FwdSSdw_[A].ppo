#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1070;
float _3462;
float _3463;
float _3464;
float _3465;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _250.x;
    float _254 = _250.y;
    float _255 = _250.z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _300 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3474 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _310 = ((_287.z - _255) * _301) + _255;
    float _314 = ((((_287.x - _253) * _301) + _253) * 2.0) + (-1.0);
    float _316 = ((((_287.y - _254) * _301) + _254) * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3485 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))));
    float _325 = fma(_322, _234, fma(_316, _227, _314 * _213));
    float _328 = fma(_322, _235, fma(_316, _228, _314 * _214));
    float _331 = fma(_322, _236, fma(_316, _229, _314 * _215));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    vec4 _363 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _367 = (cbMtdParam._m0[11u].z + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_363.x * cbMtdParam._m0[11u].w);
    float _3496 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _390 = _385.x * cbMtdParam._m0[9u].x;
    float _391 = _385.y * cbMtdParam._m0[9u].y;
    float _392 = _385.z * cbMtdParam._m0[9u].z;
    vec4 _411 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _425 = (((_411.x * cbMtdParam._m0[10u].x) - _390) * _301) + _390;
    float _426 = (((_411.y * cbMtdParam._m0[10u].y) - _391) * _301) + _391;
    float _427 = (((_411.z * cbMtdParam._m0[10u].z) - _392) * _301) + _392;
    vec4 _440 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _451 = ((_440.x - _425) * _368) + _425;
    float _452 = ((_440.y - _426) * _368) + _426;
    float _453 = ((_440.z - _427) * _368) + _427;
    vec4 _466 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _473 = (_466.x * 2.0) + (-1.0);
    float _474 = (_466.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3507 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _483 = ((_466.z - _310) * _368) + _310;
    float _490 = ((_473 - _314) * _368) + _314;
    float _491 = ((_474 - _316) * _368) + _316;
    float _492 = ((sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) - _322) * _368) + _322;
    float _495 = fma(_492, _234, fma(_491, _227, _490 * _213));
    float _498 = fma(_492, _235, fma(_491, _228, _490 * _214));
    float _501 = fma(_492, _236, fma(_491, _229, _490 * _215));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _3518 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _509 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3540 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3551 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _528 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _578 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _568);
    float _579 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _568);
    float _580 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _568);
    float _584 = inversesqrt(dot(vec3(_578, _579, _580), vec3(_578, _579, _580)));
    float _585 = _578 * _584;
    float _586 = _579 * _584;
    float _587 = _580 * _584;
    vec4 _592 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _594 = _592.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _750 = sqrt(((_578 * _578) + (_579 * _579)) + (_580 * _580));
        float _756 = (cbMatDynParam._m0[5u].x * _750) + cbMatDynParam._m0[5u].y;
        float _3562 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _761 = (cbMatDynParam._m0[5u].z * _750) + cbMatDynParam._m0[5u].w;
        float _3573 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) - _757)) + _757) < ((_594 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _606 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _607 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _626 = fma(_508, cbSceneParam._m0[5u].z, fma(_507, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _506));
    float _629 = fma(_508, cbSceneParam._m0[6u].z, fma(_507, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _506));
    float _632 = fma(_508, cbSceneParam._m0[7u].z, fma(_507, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _506));
    uint _645 = uint(roundEven(NORMAL.w)) * 13u;
    uint _646 = _645 + 9u;
    uint _647 = _646 + uint(cbMatDynParam._m0[0u].w);
    float _653 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_647].x;
    float _654 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_647].y;
    float _655 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_647].z;
    float _3584 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _606, cbSceneParam._m0[86u].y * _607));
    float _670 = _667.x * TEXCOORD_9.w;
    float _671 = dot(vec3(_506, _507, _508), vec3(_585, _586, _587));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _506) - _585;
    float _679 = (_674 * _507) - _586;
    float _680 = (_674 * _508) - _587;
    float _684 = abs(dot(vec3(_585, _586, _587), vec3(_506, _507, _508)));
    float _3617 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _686 = sqrt(_509);
    float _699 = exp2((_686 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_686 * 3.0));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1069;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _794 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _798 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _802 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _827 = _731 + _506;
        float _828 = _735 + _507;
        float _829 = _739 + _508;
        float _839 = fma(_829, cbModelParam._m0[26u].z, fma(_828, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827)) - _794;
        float _840 = fma(_829, cbModelParam._m0[27u].z, fma(_828, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827)) - _798;
        float _841 = fma(_829, cbModelParam._m0[28u].z, fma(_828, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827)) - _802;
        float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
        float _858 = ((_845 * _839) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_794 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_845 * _840) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_798 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_845 * _841) / cbModelParam._m0[34u].z) + ((((((_802 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        float _897 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_863.x + (-0.5));
        float _899 = _897 * (_863.y + (-0.5));
        float _900 = _897 * (_863.z + (-0.5));
        float _907 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_870.x + (-0.5));
        float _909 = _907 * (_870.y + (-0.5));
        float _910 = _907 * (_870.z + (-0.5));
        float _917 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_877.x + (-0.5));
        float _919 = _917 * (_877.y + (-0.5));
        float _920 = _917 * (_877.z + (-0.5));
        float _927 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_884.x + (-0.5));
        float _929 = _927 * (_884.y + (-0.5));
        float _930 = _927 * (_884.z + (-0.5));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = _898 * 0.5;
        float _935 = _908 * 0.5;
        float _936 = _918 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _951 = (dot(vec3(_506, _507, _508), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _961 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3665 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_963 + 1.0))) + _968) * _931;
        float _978 = _899 * 0.5;
        float _979 = _909 * 0.5;
        float _980 = _919 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_506, _507, _508), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3698 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1005 + 1.0))) + _1010) * _932;
        float _1020 = _900 * 0.5;
        float _1021 = _910 * 0.5;
        float _1022 = _920 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_506, _507, _508), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3731 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1047 + 1.0))) + _1052) * _933;
        _1069 = _900;
        _1071 = _899;
        _1072 = _898;
        _1073 = _910;
        _1074 = _909;
        _1075 = _908;
        _1076 = _920;
        _1077 = _919;
        _1078 = _918;
        _1079 = _933;
        _1080 = _932;
        _1081 = _931;
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
    }
    else
    {
        _1069 = _1070;
        _1071 = _1070;
        _1072 = _1070;
        _1073 = _1070;
        _1074 = _1070;
        _1075 = _1070;
        _1076 = _1070;
        _1077 = _1070;
        _1078 = _1070;
        _1079 = _1070;
        _1080 = _1070;
        _1081 = _1070;
        _1082 = 0.0;
        _1083 = 0.0;
        _1084 = 0.0;
    }
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1113 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1117 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1121 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1144 = _731 + _506;
        float _1145 = _735 + _507;
        float _1146 = _739 + _508;
        float _1156 = fma(_1146, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144)) - _1113;
        float _1157 = fma(_1146, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144)) - _1117;
        float _1158 = fma(_1146, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144)) - _1121;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1113 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1117 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[35u].z) + ((((((_1121 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1212 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1179.x + (-0.5));
        float _1214 = _1212 * (_1179.y + (-0.5));
        float _1215 = _1212 * (_1179.z + (-0.5));
        float _1222 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1186.x + (-0.5));
        float _1224 = _1222 * (_1186.y + (-0.5));
        float _1225 = _1222 * (_1186.z + (-0.5));
        float _1232 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1193.x + (-0.5));
        float _1234 = _1232 * (_1193.y + (-0.5));
        float _1235 = _1232 * (_1193.z + (-0.5));
        float _1242 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1200.x + (-0.5));
        float _1244 = _1242 * (_1200.y + (-0.5));
        float _1245 = _1242 * (_1200.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_506, _507, _508), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3794 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1276 + 1.0))) + _1281) * _1246;
        float _1291 = _1214 * 0.5;
        float _1292 = _1224 * 0.5;
        float _1293 = _1234 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_506, _507, _508), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3827 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1318 + 1.0))) + _1323) * _1247;
        float _1333 = _1215 * 0.5;
        float _1334 = _1225 * 0.5;
        float _1335 = _1235 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_506, _507, _508), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3860 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1360 + 1.0))) + _1365) * _1248;
        _1382 = _1215;
        _1383 = _1214;
        _1384 = _1213;
        _1385 = _1225;
        _1386 = _1224;
        _1387 = _1223;
        _1388 = _1235;
        _1389 = _1234;
        _1390 = _1233;
        _1391 = _1248;
        _1392 = _1247;
        _1393 = _1246;
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1070;
        _1383 = _1070;
        _1384 = _1070;
        _1385 = _1070;
        _1386 = _1070;
        _1387 = _1070;
        _1388 = _1070;
        _1389 = _1070;
        _1390 = _1070;
        _1391 = _1070;
        _1392 = _1070;
        _1393 = _1070;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1082)) + _1082;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1084)) + _1084;
    float _1429 = fma(_1408, cbSceneParam._m0[89u].z, fma(_1407, cbSceneParam._m0[89u].y, _1406 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1408, cbSceneParam._m0[90u].z, fma(_1407, cbSceneParam._m0[90u].y, _1406 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1408, cbSceneParam._m0[91u].z, fma(_1407, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1406));
    float _1450 = _678 * 0.5;
    float _1451 = _679 * 0.5;
    float _1452 = _680 * 0.5;
    float _1453 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1456 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1459 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1493;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1466 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1069, _1073, _1076, _1079));
        float _1470 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1474 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1481 = dot(vec4(cbModelParam._m0[39u]), vec4(_1450, _1451, _1452, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1504;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1495 = dot(vec4(cbModelParam._m0[40u]), vec4(_1450, _1451, _1452, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1508 = (_1504 * cbModelParam._m0[1u].x) + (_1493 * (1.0 - cbModelParam._m0[1u].x));
    float _1518 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _509);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1518 : min(cbModelParam._m0[25u].z, _1518));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1568 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1572 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1576 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1579 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1582 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1585 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1613;
        if (_1579 > 0.0)
        {
            _1613 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1613 = frontier_phi_19_17_ladder;
        }
        float _1838;
        if (_1582 > 0.0)
        {
            _1838 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1838 = frontier_phi_28_24_ladder;
        }
        float _2084;
        if (_1585 > 0.0)
        {
            _2084 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2084 = frontier_phi_40_35_ladder;
        }
        float _2086 = isnan(_1838) ? _1613 : (isnan(_1613) ? _1838 : min(_1613, _1838));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1579) + _1568;
        float _2092 = (_2087 * _1582) + _1572;
        float _2093 = (_2087 * _1585) + _1576;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2094;
        float _2098 = _2094 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 > _2098) || ((_2092 < _2096) || ((_2091 < _2096) || (_2091 > _2098))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2093, cbModelParam._m0[9u].z, fma(_2092, cbModelParam._m0[9u].y, _2091 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2093, cbModelParam._m0[10u].z, fma(_2092, cbModelParam._m0[10u].y, _2091 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2093, cbModelParam._m0[11u].z, fma(_2092, cbModelParam._m0[11u].y, _2091 * cbModelParam._m0[11u].x))), _1519);
            frontier_phi_18_40_ladder = _2217.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2217.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2217.x * cbModelParam._m0[1u].y;
        }
        _1601 = frontier_phi_18_40_ladder_2;
        _1603 = frontier_phi_18_40_ladder_1;
        _1605 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1519);
        _1601 = _1589.x * cbModelParam._m0[1u].y;
        _1603 = _1589.y * cbModelParam._m0[1u].y;
        _1605 = _1589.z * cbModelParam._m0[1u].y;
    }
    float _1609 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _509);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1609 : min(cbModelParam._m0[25u].w, _1609));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1667 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1671 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1675 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1678 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1681 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1684 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1843;
        if (_1678 > 0.0)
        {
            _1843 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1843 = frontier_phi_30_26_ladder;
        }
        float _2111;
        if (_1681 > 0.0)
        {
            _2111 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2111 = frontier_phi_42_37_ladder;
        }
        float _2316;
        if (_1684 > 0.0)
        {
            _2316 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2316 = frontier_phi_51_48_ladder;
        }
        float _2318 = isnan(_2111) ? _1843 : (isnan(_1843) ? _2111 : min(_1843, _2111));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1678) + _1667;
        float _2324 = (_2319 * _1681) + _1671;
        float _2325 = (_2319 * _1684) + _1675;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2326;
        float _2329 = _2326 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2325 > _2329) || ((_2325 < _2327) || ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 < _2327) || (_2323 > _2329))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2325, cbModelParam._m0[17u].z, fma(_2324, cbModelParam._m0[17u].y, _2323 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2325, cbModelParam._m0[18u].z, fma(_2324, cbModelParam._m0[18u].y, _2323 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2325, cbModelParam._m0[19u].z, fma(_2324, cbModelParam._m0[19u].y, _2323 * cbModelParam._m0[19u].x))), _1610);
            frontier_phi_27_51_ladder = _2523.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2523.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2523.x * cbModelParam._m0[1u].z;
        }
        _1703 = frontier_phi_27_51_ladder_2;
        _1705 = frontier_phi_27_51_ladder_1;
        _1707 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1610);
        _1703 = _1687.x * cbModelParam._m0[1u].z;
        _1705 = _1687.y * cbModelParam._m0[1u].z;
        _1707 = _1687.z * cbModelParam._m0[1u].z;
    }
    float _1719 = ((((1.0 - _699) * ((_686 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_699 * _686)) * _670;
    float _1720 = _1719 * ((cbModelParam._m0[1u].w * (_1703 - _1601)) + _1601);
    float _1721 = _1719 * ((cbModelParam._m0[1u].w * (_1705 - _1603)) + _1603);
    float _1722 = _1719 * ((cbModelParam._m0[1u].w * (_1707 - _1605)) + _1605);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    vec4 _1739 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_606, _607));
    float _1741 = _1739.w;
    float _1753 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1741);
    float _1754 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1741);
    float _1755 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1741);
    uvec4 _1759 = floatBitsToUint(cbInstanceData._m0[_645 + 5u]);
    uint _1761 = _1759.x * 14u;
    uint _1762 = _1761 + 13u;
    float _1769 = _670 + (-1.0);
    float _1774 = (cbLight._m0[_1762].x * _1769) + 1.0;
    float _1775 = (cbLight._m0[_1762].y * _1769) + 1.0;
    float _1776 = (cbLight._m0[_1762].z * _1769) + 1.0;
    float _1777 = (cbLight._m0[_1762].w * _1769) + 1.0;
    uint _1778 = _1761 + 5u;
    float _1784 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
    uint _1788 = _1761 + 4u;
    float _1797 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1801 = _1761 | 1u;
    float _1812 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_506, _507, _508));
    float _1815 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_506, _507, _508));
    float _3996 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _4007 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1820 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.3183098733425140380859375;
    float _1822 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.3183098733425140380859375;
    float _1829 = ((cbLight._m0[_1778].x * _1784) * _1822) + (((cbLight._m0[_1788].x * _1753) * _1797) * _1820);
    float _1830 = ((_1784 * cbLight._m0[_1778].y) * _1822) + (((cbLight._m0[_1788].y * _1754) * _1797) * _1820);
    float _1831 = ((_1784 * cbLight._m0[_1778].z) * _1822) + (((cbLight._m0[_1788].z * _1755) * _1797) * _1820);
    uvec4 _1835 = floatBitsToUint(cbLight._m0[_1761 + 12u]);
    bool _1837 = _1835.x == 0u;
    float _1848;
    float _1850;
    float _1852;
    if (_1837)
    {
        _1848 = _1829;
        _1850 = _1830;
        _1852 = _1831;
    }
    else
    {
        uint _1856 = _1761 + 6u;
        float _1872 = (dot(vec3(cbLight._m0[_1761 + 2u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _1873 = _1872 * _1872;
        float _4018 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1875 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1848 = (((cbLight._m0[_1856].x * 0.3183098733425140380859375) * _1874) * _1875) + _1829;
        _1850 = (((cbLight._m0[_1856].y * 0.3183098733425140380859375) * _1874) * _1875) + _1830;
        _1852 = (((cbLight._m0[_1856].z * 0.3183098733425140380859375) * _1874) * _1875) + _1831;
    }
    bool _1855 = _1835.y == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1855)
    {
        _1893 = _1848;
        _1895 = _1850;
        _1897 = _1852;
    }
    else
    {
        uint _2055 = _1761 + 7u;
        float _2071 = (dot(vec3(cbLight._m0[_1761 + 3u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4034 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2074 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _1893 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _1848;
        _1895 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _1850;
        _1897 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _1852;
    }
    uint _1900 = _1761 + 8u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _509) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1761].x + _585;
    float _1916 = cbLight._m0[_1761].y + _586;
    float _1917 = cbLight._m0[_1761].z + _587;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1761].xyz));
    float _4050 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _1929 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1930 = dot(vec3(_506, _507, _508), vec3(_1922, _1923, _1924));
    float _4072 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1922, _1923, _1924));
    float _4083 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1914 * _1914;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1914;
    float _1965 = (0.5 / (((_1929 * ((_1928 * _1954) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _1954) + _1914) * _1928))) * _1928;
    float _4094 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    uint _1981 = _1761 + 9u;
    float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _509) * 0.949999988079071044921875);
    float _1993 = _1992 * _1992;
    float _1994 = cbLight._m0[_1801].x + _585;
    float _1995 = cbLight._m0[_1801].y + _586;
    float _1996 = cbLight._m0[_1801].z + _587;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2001 = _2000 * _1994;
    float _2002 = _2000 * _1995;
    float _2003 = _2000 * _1996;
    float _2004 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1801].xyz));
    float _4105 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2008 = dot(vec3(_506, _507, _508), vec3(_2001, _2002, _2003));
    float _4116 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_2001, _2002, _2003));
    float _4127 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1993 * _1993;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2030 = 1.0 - _1993;
    float _2040 = (0.5 / (((_1929 * ((_2007 * _2030) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2030) + _1993) * _2007))) * _2007;
    float _4138 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    float _2052 = (((_2029 * cbLight._m0[_1981].x) * _2042) * _1784) + ((((cbLight._m0[_1900].x * _1753) * _1953) * _1967) * _1797);
    float _2053 = (((_2029 * cbLight._m0[_1981].y) * _2042) * _1784) + ((((cbLight._m0[_1900].y * _1754) * _1953) * _1967) * _1797);
    float _2054 = (((_2029 * cbLight._m0[_1981].z) * _2042) * _1784) + ((((cbLight._m0[_1900].z * _1755) * _1953) * _1967) * _1797);
    float _2116;
    float _2118;
    float _2120;
    if (_1837)
    {
        _2116 = _2052;
        _2118 = _2053;
        _2120 = _2054;
    }
    else
    {
        uint _2122 = _1761 + 2u;
        uint _2126 = _1761 + 10u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _509) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _585;
        float _2143 = cbLight._m0[_2122].y + _586;
        float _2144 = cbLight._m0[_2122].z + _587;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2122].xyz));
        float _4149 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2156 = dot(vec3(_506, _507, _508), vec3(_2149, _2150, _2151));
        float _4160 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4171 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2177 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2178 = 1.0 - _2141;
        float _2188 = (0.5 / (((_1929 * ((_2155 * _2178) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2178) + _2141) * _2155))) * _2155;
        float _4182 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2116 = (((_2177 * cbLight._m0[_2126].x) * _2190) * _2191) + _2052;
        _2118 = (((_2177 * cbLight._m0[_2126].y) * _2190) * _2191) + _2053;
        _2120 = (((_2177 * cbLight._m0[_2126].z) * _2190) * _2191) + _2054;
    }
    float _2226;
    float _2228;
    float _2230;
    if (_1855)
    {
        _2226 = _2116;
        _2228 = _2118;
        _2230 = _2120;
    }
    else
    {
        uint _2237 = _1761 + 3u;
        uint _2241 = _1761 + 11u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _509) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _585;
        float _2258 = cbLight._m0[_2237].y + _586;
        float _2259 = cbLight._m0[_2237].z + _587;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2237].xyz));
        float _4198 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2271 = dot(vec3(_506, _507, _508), vec3(_2264, _2265, _2266));
        float _4209 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4220 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2293 = 1.0 - _2256;
        float _2303 = (0.5 / (((_1929 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2293) + _2256) * _2270))) * _2270;
        float _4231 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2305 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2306 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _2226 = (((_2292 * cbLight._m0[_2241].x) * _2305) * _2306) + _2116;
        _2228 = (((_2292 * cbLight._m0[_2241].y) * _2305) * _2306) + _2118;
        _2230 = (((_2292 * cbLight._m0[_2241].z) * _2305) * _2306) + _2120;
    }
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_1759.y == 0u)
    {
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2381;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2381;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2381;
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.x;
        uint _2408 = uint((float(_2396.y) * floor(float(uint(cbSceneParam._m0[85u].y * _607) / _2397))) + floor(float(uint(cbSceneParam._m0[85u].x * _606) / _2397)));
        float _2418 = (log2(_2384 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2419 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        uint _2422 = uint(isnan(14.0) ? _2419 : (isnan(_2419) ? 14.0 : min(_2419, 14.0)));
        uvec4 _2427 = texelFetch(g_lightClusterGridBuffer, int(((_2422 << 2u) + (_2408 << 6u)) >> 2u));
        uint _2428 = _2427.x;
        uint _2429 = _2396.z;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        if (((((1u << ((_2429 >> 4u) & 15u)) + 4294967295u) & _2428) == 0u) || ((_2429 & 240u) == 0u))
        {
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
        }
        else
        {
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2539;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            uint _2686 = 0u;
            uint _2695;
            bool _2696;
            for (;;)
            {
                _2695 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                _2696 = _2695 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2696)
                {
                    frontier_phi_68_pred = _2682;
                    frontier_phi_68_pred_1 = _2685;
                    frontier_phi_68_pred_2 = _2684;
                    frontier_phi_68_pred_3 = _2683;
                    frontier_phi_68_pred_4 = _2681;
                    frontier_phi_68_pred_5 = _2680;
                }
                else
                {
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    uint _2831;
                    _2825 = _2680;
                    _2826 = _2681;
                    _2827 = _2682;
                    _2828 = _2683;
                    _2829 = _2684;
                    _2830 = _2685;
                    _2831 = _2695;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    for (;;)
                    {
                        uint _2835 = uint(findLSB(_2831)) + (_2686 << 5u);
                        uint _2832 = (_2831 + 4294967295u) & _2831;
                        uint _2837 = _2835 * 48u;
                        vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        uint _2857 = (_2835 * 48u) + 4u;
                        vec4 _2870 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 3u)).x));
                        uint _2876 = (_2835 * 48u) + 8u;
                        vec3 _2887 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x));
                        float _2891 = _2851.x - _2382;
                        float _2892 = _2851.y - _2383;
                        float _2893 = _2851.z - _2384;
                        float _2894 = dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893));
                        float _2897 = inversesqrt(_2894);
                        float _2898 = _2897 * _2891;
                        float _2899 = _2897 * _2892;
                        float _2900 = _2897 * _2893;
                        float _2901 = dot(vec3(_626, _629, _632), vec3(_2898, _2899, _2900));
                        float _2906 = 1.0 - (_2894 * _2851.w);
                        float _4257 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2907 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2908 = sqrt(_2894) * _2870.w;
                        float _2911 = 1.39999997615814208984375 / (_2908 + 1.39999997615814208984375);
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2901) + _2912;
                        float _2918 = _2908 * _2908;
                        float _2922 = ((isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))) * _2907) / ((_2918 * 0.699999988079071044921875) + 1.0);
                        float _2926 = (-0.0) - _2382;
                        float _2927 = (-0.0) - _2383;
                        float _2928 = (-0.0) - _2384;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2943 = exp2(log2(1.0 / ((_2918 * 3.5) + 5.0)) * 0.25);
                        float _2944 = 1.0 - _686;
                        float _2951 = sqrt(1.0 - ((1.0 - (_2944 * _2944)) * (1.0 - (_2943 * _2943))));
                        float _2952 = _2951 * _2951;
                        float _2953 = _2952 * _2952;
                        float _2954 = _2933 + _2898;
                        float _2955 = _2934 + _2899;
                        float _2956 = _2935 + _2900;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2964 = dot(vec3(_626, _629, _632), vec3(_2933, _2934, _2935));
                        float _4273 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2967 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2968 = dot(vec3(_626, _629, _632), vec3(_2960 * _2954, _2960 * _2955, _2960 * _2956));
                        float _4284 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2971 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2975 = ((_2971 * _2971) * (_2953 + (-1.0))) + 1.0;
                        float _2976 = _2911 * _2952;
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2901) + _2977;
                        float _4295 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2982 = 1.0 - _2952;
                        float _2992 = (0.5 / (((_2981 * ((_2967 * _2982) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2981 * _2982) + _2952) * _2967))) * _2981;
                        float _4306 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _3003 = (((_2953 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_2975 * _2975) * ((_2918 * 2.1991131305694580078125) + 3.141590118408203125))) * _2907;
                        _2755 = (_2922 * _2870.x) + _2828;
                        _2756 = (_2922 * _2870.y) + _2829;
                        _2757 = (_2922 * _2870.z) + _2830;
                        _2752 = (_3003 * _2887.x) + _2825;
                        _2753 = (_3003 * _2887.y) + _2826;
                        _2754 = (_3003 * _2887.z) + _2827;
                        if (_2832 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2825 = _2752;
                            _2826 = _2753;
                            _2827 = _2754;
                            _2828 = _2755;
                            _2829 = _2756;
                            _2830 = _2757;
                            _2831 = _2832;
                        }
                    }
                    frontier_phi_68_pred = _2754;
                    frontier_phi_68_pred_1 = _2757;
                    frontier_phi_68_pred_2 = _2756;
                    frontier_phi_68_pred_3 = _2755;
                    frontier_phi_68_pred_4 = _2753;
                    frontier_phi_68_pred_5 = _2752;
                }
                _2533 = frontier_phi_68_pred;
                _2539 = frontier_phi_68_pred_1;
                _2537 = frontier_phi_68_pred_2;
                _2535 = frontier_phi_68_pred_3;
                _2531 = frontier_phi_68_pred_4;
                _2529 = frontier_phi_68_pred_5;
                uint _2687 = _2686 + 1u;
                if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2680 = _2529;
                    _2681 = _2531;
                    _2682 = _2533;
                    _2683 = _2535;
                    _2684 = _2537;
                    _2685 = _2539;
                    _2686 = _2687;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
        }
        uvec4 _2542 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2543 = _2542.z;
        uint _2545 = (_2543 >> 8u) & 15u;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        if (((4294967295u << _2545) & _2428) == 0u)
        {
            _2648 = _2528;
            _2650 = _2530;
            _2652 = _2532;
            _2654 = _2534;
            _2656 = _2536;
            _2658 = _2538;
        }
        else
        {
            float _2673 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
            float _2674 = _2673 * _2382;
            float _2675 = _2673 * _2383;
            float _2676 = _2673 * _2384;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2545 < ((_2543 >> 12u) & 15u))
            {
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2808 = _2528;
                float _2809 = _2530;
                float _2810 = _2532;
                float _2811 = _2534;
                float _2812 = _2536;
                float _2813 = _2538;
                uint _2814 = _2545;
                uint _2823;
                bool _2824;
                for (;;)
                {
                    _2823 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2814 << 2u)) >> 2u)).x;
                    _2824 = _2823 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2824)
                    {
                        frontier_phi_79_pred = _2813;
                        frontier_phi_79_pred_1 = _2812;
                        frontier_phi_79_pred_2 = _2811;
                        frontier_phi_79_pred_3 = _2810;
                        frontier_phi_79_pred_4 = _2809;
                        frontier_phi_79_pred_5 = _2808;
                    }
                    else
                    {
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3030 = _2808;
                        float _3031 = _2809;
                        float _3032 = _2810;
                        float _3033 = _2811;
                        float _3034 = _2812;
                        float _3035 = _2813;
                        uint _3036 = _2823;
                        uint _3037;
                        vec4 _3062;
                        float _3063;
                        vec4 _3078;
                        vec3 _3090;
                        vec4 _3106;
                        vec4 _3122;
                        float _3169;
                        bool _3170;
                        for (;;)
                        {
                            uint _3047 = ((_2814 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3036));
                            _3037 = (_3036 + 4294967295u) & _3036;
                            uint _3049 = _3047 * 40u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3063 = _3062.w;
                            uint _3065 = (_3047 * 40u) + 4u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3080 = (_3047 * 40u) + 8u;
                            _3090 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x));
                            uint _3093 = (_3047 * 40u) + 16u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3109 = (_3047 * 40u) + 20u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3047 * 40u) + 24u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3144 = (_3047 * 40u) + 28u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3169 = fma(_2384, _3157.z, fma(_2383, _3157.y, _3157.x * _2382)) + _3157.w;
                            _3170 = !((fma(_2384, _3138.z, fma(_2383, _3138.y, _3138.x * _2382)) + _3138.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3170)
                            {
                                float _3197 = _3062.x - _2382;
                                float _3198 = _3062.y - _2383;
                                float _3199 = _3062.z - _2384;
                                float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                                float _3203 = inversesqrt(_3200);
                                float _3204 = _3203 * _3197;
                                float _3205 = _3203 * _3198;
                                float _3206 = _3203 * _3199;
                                float _3210 = 1.0 - (_3200 / (_3063 * _3063));
                                float _4317 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3215 = sqrt(_3200) * _3078.w;
                                float _3217 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                                float _3218 = _3217 * _3217;
                                float _3221 = ((1.0 - _3218) * dot(vec3(_3204, _3205, _3206), vec3(_626, _629, _632))) + _3218;
                                float _3224 = _3215 * _3215;
                                float _3228 = (fma(_2384, _3106.z, fma(_2383, _3106.y, _3106.x * _2382)) + _3106.w) / _3169;
                                float _3229 = (fma(_2384, _3122.z, fma(_2383, _3122.y, _3122.x * _2382)) + _3122.w) / _3169;
                                float _3233 = 1.0 - dot(vec2(_3228, _3229), vec2(_3228, _3229));
                                float _4333 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3235 = _3234 * (((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3211) / ((_3224 * 0.699999988079071044921875) + 1.0));
                                float _3247 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                                float _3248 = 1.0 - _686;
                                float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                                float _3256 = _3255 * _3255;
                                float _3257 = _3256 * _3256;
                                float _3258 = _3204 - _2674;
                                float _3259 = _3205 - _2675;
                                float _3260 = _3206 - _2676;
                                float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                                float _3268 = dot(vec3(_626, _629, _632), vec3((-0.0) - _2674, (-0.0) - _2675, (-0.0) - _2676));
                                float _4344 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3271 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3272 = dot(vec3(_626, _629, _632), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                                float _4355 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                                float _3280 = _3217 * _3256;
                                float _3281 = _3280 * _3280;
                                float _3287 = ((1.0 - _3281) * dot(vec3(_626, _629, _632), vec3(_3204, _3205, _3206))) + _3281;
                                float _4366 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3289 = 1.0 - _3256;
                                float _3299 = (0.5 / (((_3288 * ((_3271 * _3289) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3256) * _3271))) * _3288;
                                float _4377 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3309 = (_3234 * _3211) * (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3279 * _3279) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3235 * _3078.z;
                                frontier_phi_85_pred_1 = _3235 * _3078.y;
                                frontier_phi_85_pred_2 = _3235 * _3078.x;
                                frontier_phi_85_pred_3 = _3309 * _3090.z;
                                frontier_phi_85_pred_4 = _3309 * _3090.y;
                                frontier_phi_85_pred_5 = _3309 * _3090.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3318 = frontier_phi_85_pred;
                            _3317 = frontier_phi_85_pred_1;
                            _3316 = frontier_phi_85_pred_2;
                            _3315 = frontier_phi_85_pred_3;
                            _3314 = frontier_phi_85_pred_4;
                            _3313 = frontier_phi_85_pred_5;
                            _3020 = _3316 + _3033;
                            _3021 = _3317 + _3034;
                            _3022 = _3318 + _3035;
                            _3017 = _3313 + _3030;
                            _3018 = _3314 + _3031;
                            _3019 = _3315 + _3032;
                            if (_3037 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3037;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3022;
                        frontier_phi_79_pred_1 = _3021;
                        frontier_phi_79_pred_2 = _3020;
                        frontier_phi_79_pred_3 = _3019;
                        frontier_phi_79_pred_4 = _3018;
                        frontier_phi_79_pred_5 = _3017;
                    }
                    _2659 = frontier_phi_79_pred;
                    _2657 = frontier_phi_79_pred_1;
                    _2655 = frontier_phi_79_pred_2;
                    _2653 = frontier_phi_79_pred_3;
                    _2651 = frontier_phi_79_pred_4;
                    _2649 = frontier_phi_79_pred_5;
                    uint _2815 = _2814 + 1u;
                    if (_2815 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2808 = _2649;
                        _2809 = _2651;
                        _2810 = _2653;
                        _2811 = _2655;
                        _2812 = _2657;
                        _2813 = _2659;
                        _2814 = _2815;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2655;
                frontier_phi_60_61_ladder_1 = _2659;
                frontier_phi_60_61_ladder_2 = _2657;
                frontier_phi_60_61_ladder_3 = _2653;
                frontier_phi_60_61_ladder_4 = _2651;
                frontier_phi_60_61_ladder_5 = _2649;
            }
            else
            {
                frontier_phi_60_61_ladder = _2534;
                frontier_phi_60_61_ladder_1 = _2538;
                frontier_phi_60_61_ladder_2 = _2536;
                frontier_phi_60_61_ladder_3 = _2532;
                frontier_phi_60_61_ladder_4 = _2530;
                frontier_phi_60_61_ladder_5 = _2528;
            }
            _2648 = frontier_phi_60_61_ladder_5;
            _2650 = frontier_phi_60_61_ladder_4;
            _2652 = frontier_phi_60_61_ladder_3;
            _2654 = frontier_phi_60_61_ladder;
            _2656 = frontier_phi_60_61_ladder_2;
            _2658 = frontier_phi_60_61_ladder_1;
        }
        float _2663 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2440 = (_2663 * _2654) + _1893;
        _2442 = (_2663 * _2656) + _1895;
        _2444 = (_2663 * _2658) + _1897;
        _2446 = ((_2648 * 0.039999999105930328369140625) * _2663) + _2226;
        _2448 = ((_2650 * 0.039999999105930328369140625) * _2663) + _2228;
        _2450 = ((_2652 * 0.039999999105930328369140625) * _2663) + _2230;
    }
    else
    {
        _2440 = _1893;
        _2442 = _1895;
        _2444 = _1897;
        _2446 = _2226;
        _2448 = _2228;
        _2450 = _2230;
    }
    float _4393 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4404 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4415 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2467 = ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2440 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _670))) + ((_2446 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    float _2468 = ((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2442 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _670))) + ((_2448 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    float _2469 = ((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2444 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _670))) + ((_2450 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    uint _2470 = _645 + 6u;
    float _2478 = _606 / cbSceneParam._m0[86u].x;
    float _2479 = _607 / cbSceneParam._m0[86u].y;
    vec4 _2493 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2478, _2479, (log2((isnan(cbSceneParam._m0[77u].w) ? _528 : (isnan(_528) ? cbSceneParam._m0[77u].w : min(_528, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2495 = _2493.x;
    float _2496 = _2493.y;
    float _2497 = _2493.z;
    float _2498 = _2493.w;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_528 > cbSceneParam._m0[78u].w)
    {
        float _2553 = isnan(_528) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _528 : min(cbSceneParam._m0[80u].w, _528));
        float _2554 = _2553 / _528;
        float _2565 = _2554 * _578;
        float _2566 = _579 * _2554;
        float _2567 = (-0.0) - _2566;
        float _2568 = _2554 * _580;
        float _2570 = (cbSceneParam._m0[77u].w * _2567) / _2553;
        float _2571 = _2570 + cbSceneParam._m0[79u].w;
        float _2572 = cbSceneParam._m0[79u].w - _2566;
        float _2578 = sqrt(((_2565 * _2565) + (_2566 * _2566)) + (_2568 * _2568));
        float _2581 = (1.0 - (cbSceneParam._m0[77u].w / _2553)) * _2578;
        float _2586 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2588 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2765;
        if (abs((_2567 - _2570) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2765 = ((((_2571 > 0.0) ? exp2(_2586 * _2571) : (2.0 - exp2(_2588 * _2571))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2581;
        }
        else
        {
            float _2709 = 1.0 / cbSceneParam._m0[80u].x;
            float _2710 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : max(_2571, _2572));
            float _2711 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : min(_2571, _2572));
            float _2720 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : min(_2710, 0.0));
            float _2721 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : min(_2711, 0.0));
            _2765 = ((abs(_2578 / _2567) * cbSceneParam._m0[80u].y) * ((((_2720 - _2721) * 2.0) - ((exp2(_2586 * (isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0)))) - exp2(_2586 * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0))))) * _2709)) - ((exp2(_2588 * _2720) - exp2(_2588 * _2721)) * _2709))) + (_2581 * cbSceneParam._m0[80u].z);
        }
        vec4 _2767 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2478, _2479, 1.0), 0.0);
        float _2776 = exp2((_2765 * (-1.44269502162933349609375)) * (1.0 - _2767.w));
        float _2777 = log2(_2776);
        float _2793 = log2(_2498);
        _2590 = (exp2(_2793 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].x)) * _2767.x) / cbSceneParam._m0[78u].x)) + _2495;
        _2592 = (exp2(_2793 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].y)) * _2767.y) / cbSceneParam._m0[78u].y)) + _2496;
        _2594 = (exp2(_2793 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].z)) * _2767.z) / cbSceneParam._m0[78u].z)) + _2497;
        _2596 = _2776 * _2498;
    }
    else
    {
        _2590 = _2495;
        _2592 = _2496;
        _2594 = _2497;
        _2596 = _2498;
    }
    bool _2803;
    vec4 _2606;
    vec4 _2628;
    float _2630;
    float _2634;
    float _2635;
    float _2636;
    float _2637;
    bool _2647;
    for (;;)
    {
        _2606 = cbMatDynParam._m0[0u];
        float _2608 = roundEven(_2606.y);
        bool _2609 = _2608 == 3.0;
        float _2610 = log2(_2596);
        float _2617 = exp2(_2610 * cbSceneParam._m0[78u].x) * _2467;
        float _2618 = exp2(_2610 * cbSceneParam._m0[78u].y) * _2468;
        float _2619 = exp2(_2610 * cbSceneParam._m0[78u].z) * _2469;
        float _2626 = _594 + (-0.5);
        _2628 = cbMtdParam._m0[1u];
        _2630 = _2628.y * _2626;
        float _2633 = (_2608 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2634 = _2633 * (_2609 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2590)));
        _2635 = _2633 * (_2609 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2592)));
        _2636 = _2633 * (_2609 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2594)));
        _2637 = _2626 * 0.999000012874603271484375;
        _2647 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2647)
        {
            if ((cbInstanceData._m0[_645 + 7u].x + _2637) < 0.5)
            {
                _2803 = true;
                break;
            }
        }
        uint _2744 = _646 + uint(_2606.w);
        if ((cbInstanceData._m0[_2744].w < 1.0) && ((cbInstanceData._m0[_2744].w + _2637) < 0.5))
        {
            _2803 = true;
            break;
        }
        if ((_2630 + 1.0) < _2628.x)
        {
            _2803 = true;
            break;
        }
        _2803 = false;
        break;
    }
    float _3008;
    if (_2803)
    {
        discard_state = true;
        _3008 = 0.0;
    }
    else
    {
        _3008 = cbInstanceData._m0[_2470].w;
    }
    SV_Target.x = _2634;
    SV_Target.y = _2635;
    SV_Target.z = _2636;
    SV_Target.w = _3008;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2470].w;
    discard_exit();
}


