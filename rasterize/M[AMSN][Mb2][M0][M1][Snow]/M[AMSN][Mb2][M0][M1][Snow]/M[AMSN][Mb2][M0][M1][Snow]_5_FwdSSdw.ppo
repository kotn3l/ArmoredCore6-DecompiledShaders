#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1007;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _244.x;
    float _248 = _244.y;
    float _249 = _244.z;
    vec4 _281 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _294 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3345 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _304 = ((_281.z - _249) * _295) + _249;
    float _308 = ((((_281.x - _247) * _295) + _247) * 2.0) + (-1.0);
    float _310 = ((((_281.y - _248) * _295) + _248) * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3356 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))));
    float _319 = fma(_316, _228, fma(_310, _221, _308 * _207));
    float _322 = fma(_316, _229, fma(_310, _222, _308 * _208));
    float _325 = fma(_316, _230, fma(_310, _223, _308 * _209));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _343 = cbMtdParam._m0[11u].z + dot(vec4(_329 * _319, _329 * _322, _329 * _325, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _3367 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _367 = _362.x * cbMtdParam._m0[9u].x;
    float _368 = _362.y * cbMtdParam._m0[9u].y;
    float _369 = _362.z * cbMtdParam._m0[9u].z;
    vec4 _388 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _402 = (((_388.x * cbMtdParam._m0[10u].x) - _367) * _295) + _367;
    float _403 = (((_388.y * cbMtdParam._m0[10u].y) - _368) * _295) + _368;
    float _404 = (((_388.z * cbMtdParam._m0[10u].z) - _369) * _295) + _369;
    vec4 _417 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _428 = ((_417.x - _402) * _344) + _402;
    float _429 = ((_417.y - _403) * _344) + _403;
    float _430 = ((_417.z - _404) * _344) + _404;
    vec4 _443 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _450 = (_443.x * 2.0) + (-1.0);
    float _451 = (_443.y * 2.0) + (-1.0);
    float _452 = dot(vec2(_450, _451), vec2(_450, _451));
    float _3378 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _460 = ((_443.z - _304) * _344) + _304;
    float _467 = ((_450 - _308) * _344) + _308;
    float _468 = ((_451 - _310) * _344) + _310;
    float _469 = ((sqrt(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) - _316) * _344) + _316;
    float _472 = fma(_469, _228, fma(_468, _221, _467 * _207));
    float _475 = fma(_469, _229, fma(_468, _222, _467 * _208));
    float _478 = fma(_469, _230, fma(_468, _223, _467 * _209));
    float _482 = inversesqrt(dot(vec3(_472, _475, _478), vec3(_472, _475, _478)));
    float _483 = _482 * _472;
    float _484 = _482 * _475;
    float _485 = _482 * _478;
    float _3389 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _486 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3411 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3422 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _505 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _555 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _545);
    float _556 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _545);
    float _557 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _545);
    float _561 = inversesqrt(dot(vec3(_555, _556, _557), vec3(_555, _556, _557)));
    float _562 = _555 * _561;
    float _563 = _556 * _561;
    float _564 = _557 * _561;
    float _570 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _571 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _591 = fma(_485, cbSceneParam._m0[5u].z, fma(_484, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _483));
    float _594 = fma(_485, cbSceneParam._m0[6u].z, fma(_484, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _483));
    float _597 = fma(_485, cbSceneParam._m0[7u].z, fma(_484, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _483));
    uint _610 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = (_610 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3433 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _570, cbSceneParam._m0[86u].y * _571));
    float _635 = _632.x * TEXCOORD_9.w;
    float _636 = dot(vec3(_483, _484, _485), vec3(_562, _563, _564));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _483) - _562;
    float _644 = (_639 * _484) - _563;
    float _645 = (_639 * _485) - _564;
    float _649 = abs(dot(vec3(_562, _563, _564), vec3(_483, _484, _485)));
    float _3466 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_486);
    float _664 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1006;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _731 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _735 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _739 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _764 = _696 + _483;
        float _765 = _700 + _484;
        float _766 = _704 + _485;
        float _776 = fma(_766, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764)) - _731;
        float _777 = fma(_766, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764)) - _735;
        float _778 = fma(_766, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764)) - _739;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_731 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_735 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[34u].z) + ((((((_739 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _834 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_800.x + (-0.5));
        float _836 = _834 * (_800.y + (-0.5));
        float _837 = _834 * (_800.z + (-0.5));
        float _844 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_807.x + (-0.5));
        float _846 = _844 * (_807.y + (-0.5));
        float _847 = _844 * (_807.z + (-0.5));
        float _854 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_814.x + (-0.5));
        float _856 = _854 * (_814.y + (-0.5));
        float _857 = _854 * (_814.z + (-0.5));
        float _864 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_821.x + (-0.5));
        float _866 = _864 * (_821.y + (-0.5));
        float _867 = _864 * (_821.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _888 = (dot(vec3(_483, _484, _485), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _898 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3514 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_900 + 1.0))) + _905) * _868;
        float _915 = _836 * 0.5;
        float _916 = _846 * 0.5;
        float _917 = _856 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_483, _484, _485), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3547 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_942 + 1.0))) + _947) * _869;
        float _957 = _837 * 0.5;
        float _958 = _847 * 0.5;
        float _959 = _857 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_483, _484, _485), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3580 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_984 + 1.0))) + _989) * _870;
        _1006 = _837;
        _1008 = _836;
        _1009 = _835;
        _1010 = _847;
        _1011 = _846;
        _1012 = _845;
        _1013 = _857;
        _1014 = _856;
        _1015 = _855;
        _1016 = _870;
        _1017 = _869;
        _1018 = _868;
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _1007;
        _1008 = _1007;
        _1009 = _1007;
        _1010 = _1007;
        _1011 = _1007;
        _1012 = _1007;
        _1013 = _1007;
        _1014 = _1007;
        _1015 = _1007;
        _1016 = _1007;
        _1017 = _1007;
        _1018 = _1007;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1051 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1055 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1078 = _696 + _483;
        float _1079 = _700 + _484;
        float _1080 = _704 + _485;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_483, _484, _485), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3643 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_483, _484, _485), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3676 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_483, _484, _485), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3709 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1007;
        _1317 = _1007;
        _1318 = _1007;
        _1319 = _1007;
        _1320 = _1007;
        _1321 = _1007;
        _1322 = _1007;
        _1323 = _1007;
        _1324 = _1007;
        _1325 = _1007;
        _1326 = _1007;
        _1327 = _1007;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _643 * 0.5;
    float _1385 = _644 * 0.5;
    float _1386 = _645 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1010, _1013, _1016));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _486);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1502 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1506 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1510 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1513 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1516 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1519 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1547;
        if (_1513 > 0.0)
        {
            _1547 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1547 = frontier_phi_16_14_ladder;
        }
        float _1772;
        if (_1516 > 0.0)
        {
            _1772 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1772 = frontier_phi_25_21_ladder;
        }
        float _2018;
        if (_1519 > 0.0)
        {
            _2018 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2018 = frontier_phi_37_32_ladder;
        }
        float _2020 = isnan(_1772) ? _1547 : (isnan(_1547) ? _1772 : min(_1547, _1772));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1513) + _1502;
        float _2026 = (_2021 * _1516) + _1506;
        float _2027 = (_2021 * _1519) + _1510;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2151 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_15_37_ladder = _2151.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2151.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2151.x * cbModelParam._m0[1u].y;
        }
        _1535 = frontier_phi_15_37_ladder_2;
        _1537 = frontier_phi_15_37_ladder_1;
        _1539 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1453);
        _1535 = _1523.x * cbModelParam._m0[1u].y;
        _1537 = _1523.y * cbModelParam._m0[1u].y;
        _1539 = _1523.z * cbModelParam._m0[1u].y;
    }
    float _1543 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _486);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1543 : min(cbModelParam._m0[25u].w, _1543));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1601 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1605 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1609 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1612 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1615 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1618 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1777;
        if (_1612 > 0.0)
        {
            _1777 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1777 = frontier_phi_27_23_ladder;
        }
        float _2045;
        if (_1615 > 0.0)
        {
            _2045 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2045 = frontier_phi_39_34_ladder;
        }
        float _2250;
        if (_1618 > 0.0)
        {
            _2250 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2250 = frontier_phi_48_45_ladder;
        }
        float _2252 = isnan(_2045) ? _1777 : (isnan(_1777) ? _2045 : min(_1777, _2045));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1612) + _1601;
        float _2258 = (_2253 * _1615) + _1605;
        float _2259 = (_2253 * _1618) + _1609;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2261 = (-1.0) - _2260;
        float _2263 = _2260 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2259 > _2263) || ((_2259 < _2261) || ((_2258 > _2263) || ((_2258 < _2261) || ((_2257 < _2261) || (_2257 > _2263))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2259, cbModelParam._m0[17u].z, fma(_2258, cbModelParam._m0[17u].y, _2257 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2259, cbModelParam._m0[18u].z, fma(_2258, cbModelParam._m0[18u].y, _2257 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2259, cbModelParam._m0[19u].z, fma(_2258, cbModelParam._m0[19u].y, _2257 * cbModelParam._m0[19u].x))), _1544);
            frontier_phi_24_48_ladder = _2457.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2457.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2457.x * cbModelParam._m0[1u].z;
        }
        _1637 = frontier_phi_24_48_ladder_2;
        _1639 = frontier_phi_24_48_ladder_1;
        _1641 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1544);
        _1637 = _1621.x * cbModelParam._m0[1u].z;
        _1639 = _1621.y * cbModelParam._m0[1u].z;
        _1641 = _1621.z * cbModelParam._m0[1u].z;
    }
    float _1653 = ((((1.0 - _664) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_664 * _651)) * _635;
    float _1654 = _1653 * ((cbModelParam._m0[1u].w * (_1637 - _1535)) + _1535);
    float _1655 = _1653 * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1656 = _1653 * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1659 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, _1654 * cbSceneParam._m0[91u].x));
    vec4 _1673 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_570, _571));
    float _1675 = _1673.w;
    float _1687 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1675);
    float _1688 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1675);
    float _1689 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1675);
    uvec4 _1693 = floatBitsToUint(cbInstanceData._m0[_610 + 5u]);
    uint _1695 = _1693.x * 14u;
    uint _1696 = _1695 + 13u;
    float _1703 = _635 + (-1.0);
    float _1708 = (cbLight._m0[_1696].x * _1703) + 1.0;
    float _1709 = (cbLight._m0[_1696].y * _1703) + 1.0;
    float _1710 = (cbLight._m0[_1696].z * _1703) + 1.0;
    float _1711 = (cbLight._m0[_1696].w * _1703) + 1.0;
    uint _1712 = _1695 + 5u;
    float _1718 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    uint _1722 = _1695 + 4u;
    float _1731 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1735 = _1695 | 1u;
    float _1746 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_483, _484, _485));
    float _1749 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_483, _484, _485));
    float _3845 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _3856 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1754 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1756 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1763 = ((cbLight._m0[_1712].x * _1718) * _1756) + (((cbLight._m0[_1722].x * _1687) * _1731) * _1754);
    float _1764 = ((_1718 * cbLight._m0[_1712].y) * _1756) + (((cbLight._m0[_1722].y * _1688) * _1731) * _1754);
    float _1765 = ((_1718 * cbLight._m0[_1712].z) * _1756) + (((cbLight._m0[_1722].z * _1689) * _1731) * _1754);
    uvec4 _1769 = floatBitsToUint(cbLight._m0[_1695 + 12u]);
    bool _1771 = _1769.x == 0u;
    float _1782;
    float _1784;
    float _1786;
    if (_1771)
    {
        _1782 = _1763;
        _1784 = _1764;
        _1786 = _1765;
    }
    else
    {
        uint _1790 = _1695 + 6u;
        float _1806 = (dot(vec3(cbLight._m0[_1695 + 2u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _1807 = _1806 * _1806;
        float _3867 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1809 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _1782 = (((cbLight._m0[_1790].x * 0.3183098733425140380859375) * _1808) * _1809) + _1763;
        _1784 = (((cbLight._m0[_1790].y * 0.3183098733425140380859375) * _1808) * _1809) + _1764;
        _1786 = (((cbLight._m0[_1790].z * 0.3183098733425140380859375) * _1808) * _1809) + _1765;
    }
    bool _1789 = _1769.y == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1789)
    {
        _1827 = _1782;
        _1829 = _1784;
        _1831 = _1786;
    }
    else
    {
        uint _1989 = _1695 + 7u;
        float _2005 = (dot(vec3(cbLight._m0[_1695 + 3u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _3883 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _2008 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _1827 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1782;
        _1829 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1784;
        _1831 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1786;
    }
    uint _1834 = _1695 + 8u;
    float _1847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _486) * 0.949999988079071044921875);
    float _1848 = _1847 * _1847;
    float _1849 = cbLight._m0[_1695].x + _562;
    float _1850 = cbLight._m0[_1695].y + _563;
    float _1851 = cbLight._m0[_1695].z + _564;
    float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
    float _1856 = _1855 * _1849;
    float _1857 = _1855 * _1850;
    float _1858 = _1855 * _1851;
    float _1859 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1695].xyz));
    float _3899 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _1863 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1864 = dot(vec3(_483, _484, _485), vec3(_1856, _1857, _1858));
    float _3921 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1868 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1856, _1857, _1858));
    float _3932 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1872 = _1848 * _1848;
    float _1876 = ((_1867 * _1867) * (_1872 + (-1.0))) + 1.0;
    float _1887 = (exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1888 = 1.0 - _1848;
    float _1899 = (0.5 / (((_1863 * ((_1862 * _1888) + _1848)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1888) + _1848) * _1862))) * _1862;
    float _3943 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1872 / ((_1876 * _1876) * 3.141590118408203125));
    uint _1915 = _1695 + 9u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _486) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1735].x + _562;
    float _1929 = cbLight._m0[_1735].y + _563;
    float _1930 = cbLight._m0[_1735].z + _564;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1735].xyz));
    float _3954 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1942 = dot(vec3(_483, _484, _485), vec3(_1935, _1936, _1937));
    float _3965 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1935, _1936, _1937));
    float _3976 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1927 * _1927;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1963 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = 1.0 - _1927;
    float _1974 = (0.5 / (((_1863 * ((_1941 * _1964) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1964) + _1927) * _1941))) * _1941;
    float _3987 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    float _1986 = (((_1963 * cbLight._m0[_1915].x) * _1976) * _1718) + ((((cbLight._m0[_1834].x * _1687) * _1887) * _1901) * _1731);
    float _1987 = (((_1963 * cbLight._m0[_1915].y) * _1976) * _1718) + ((((cbLight._m0[_1834].y * _1688) * _1887) * _1901) * _1731);
    float _1988 = (((_1963 * cbLight._m0[_1915].z) * _1976) * _1718) + ((((cbLight._m0[_1834].z * _1689) * _1887) * _1901) * _1731);
    float _2050;
    float _2052;
    float _2054;
    if (_1771)
    {
        _2050 = _1986;
        _2052 = _1987;
        _2054 = _1988;
    }
    else
    {
        uint _2056 = _1695 + 2u;
        uint _2060 = _1695 + 10u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _486) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _562;
        float _2077 = cbLight._m0[_2056].y + _563;
        float _2078 = cbLight._m0[_2056].z + _564;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2056].xyz));
        float _3998 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2090 = dot(vec3(_483, _484, _485), vec3(_2083, _2084, _2085));
        float _4009 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _4020 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2112 = 1.0 - _2075;
        float _2122 = (0.5 / (((_1863 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2112) + _2075) * _2089))) * _2089;
        float _4031 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2124 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2125 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _2050 = (((_2111 * cbLight._m0[_2060].x) * _2124) * _2125) + _1986;
        _2052 = (((_2111 * cbLight._m0[_2060].y) * _2124) * _2125) + _1987;
        _2054 = (((_2111 * cbLight._m0[_2060].z) * _2124) * _2125) + _1988;
    }
    float _2160;
    float _2162;
    float _2164;
    if (_1789)
    {
        _2160 = _2050;
        _2162 = _2052;
        _2164 = _2054;
    }
    else
    {
        uint _2171 = _1695 + 3u;
        uint _2175 = _1695 + 11u;
        float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _486) * 0.949999988079071044921875);
        float _2190 = _2189 * _2189;
        float _2191 = cbLight._m0[_2171].x + _562;
        float _2192 = cbLight._m0[_2171].y + _563;
        float _2193 = cbLight._m0[_2171].z + _564;
        float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
        float _2198 = _2197 * _2191;
        float _2199 = _2197 * _2192;
        float _2200 = _2197 * _2193;
        float _2201 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2171].xyz));
        float _4047 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2205 = dot(vec3(_483, _484, _485), vec3(_2198, _2199, _2200));
        float _4058 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2209 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2198, _2199, _2200));
        float _4069 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2213 = _2190 * _2190;
        float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
        float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2227 = 1.0 - _2190;
        float _2237 = (0.5 / (((_1863 * ((_2204 * _2227) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2227) + _2190) * _2204))) * _2204;
        float _4080 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2239 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
        float _2240 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _2160 = (((_2226 * cbLight._m0[_2175].x) * _2239) * _2240) + _2050;
        _2162 = (((_2226 * cbLight._m0[_2175].y) * _2239) * _2240) + _2052;
        _2164 = (((_2226 * cbLight._m0[_2175].z) * _2239) * _2240) + _2054;
    }
    float _2374;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_1693.y == 0u)
    {
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2315;
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2315;
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2315;
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.x;
        uint _2342 = uint((float(_2330.y) * floor(float(uint(cbSceneParam._m0[85u].y * _571) / _2331))) + floor(float(uint(cbSceneParam._m0[85u].x * _570) / _2331)));
        float _2352 = (log2(_2318 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2353 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        uint _2356 = uint(isnan(14.0) ? _2353 : (isnan(_2353) ? 14.0 : min(_2353, 14.0)));
        uvec4 _2361 = texelFetch(g_lightClusterGridBuffer, int(((_2356 << 2u) + (_2342 << 6u)) >> 2u));
        uint _2362 = _2361.x;
        uint _2363 = _2330.z;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((((1u << ((_2363 >> 4u) & 15u)) + 4294967295u) & _2362) == 0u) || ((_2363 & 240u) == 0u))
        {
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
        }
        else
        {
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            uint _2612 = 0u;
            uint _2621;
            bool _2622;
            for (;;)
            {
                _2621 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                _2622 = _2621 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2622)
                {
                    frontier_phi_63_pred = _2611;
                    frontier_phi_63_pred_1 = _2610;
                    frontier_phi_63_pred_2 = _2609;
                    frontier_phi_63_pred_3 = _2608;
                    frontier_phi_63_pred_4 = _2607;
                    frontier_phi_63_pred_5 = _2606;
                }
                else
                {
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    uint _2736;
                    _2730 = _2606;
                    _2731 = _2607;
                    _2732 = _2608;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2621;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    for (;;)
                    {
                        uint _2740 = uint(findLSB(_2736)) + (_2612 << 5u);
                        uint _2737 = (_2736 + 4294967295u) & _2736;
                        uint _2742 = _2740 * 48u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2762 = (_2740 * 48u) + 4u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 3u)).x));
                        uint _2781 = (_2740 * 48u) + 8u;
                        vec3 _2792 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x));
                        float _2796 = _2756.x - _2316;
                        float _2797 = _2756.y - _2317;
                        float _2798 = _2756.z - _2318;
                        float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                        float _2802 = inversesqrt(_2799);
                        float _2803 = _2802 * _2796;
                        float _2804 = _2802 * _2797;
                        float _2805 = _2802 * _2798;
                        float _2806 = dot(vec3(_591, _594, _597), vec3(_2803, _2804, _2805));
                        float _2811 = 1.0 - (_2799 * _2756.w);
                        float _4106 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2813 = sqrt(_2799) * _2775.w;
                        float _2816 = 1.39999997615814208984375 / (_2813 + 1.39999997615814208984375);
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2806) + _2817;
                        float _2823 = _2813 * _2813;
                        float _2827 = ((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2812) / ((_2823 * 0.699999988079071044921875) + 1.0);
                        float _2831 = (-0.0) - _2316;
                        float _2832 = (-0.0) - _2317;
                        float _2833 = (-0.0) - _2318;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2838 = _2837 * _2831;
                        float _2839 = _2837 * _2832;
                        float _2840 = _2837 * _2833;
                        float _2848 = exp2(log2(1.0 / ((_2823 * 3.5) + 5.0)) * 0.25);
                        float _2849 = 1.0 - _651;
                        float _2856 = sqrt(1.0 - ((1.0 - (_2849 * _2849)) * (1.0 - (_2848 * _2848))));
                        float _2857 = _2856 * _2856;
                        float _2858 = _2857 * _2857;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2861 = _2840 + _2805;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2869 = dot(vec3(_591, _594, _597), vec3(_2838, _2839, _2840));
                        float _4122 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2873 = dot(vec3(_591, _594, _597), vec3(_2865 * _2859, _2865 * _2860, _2865 * _2861));
                        float _4133 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2880 = ((_2876 * _2876) * (_2858 + (-1.0))) + 1.0;
                        float _2881 = _2816 * _2857;
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2806) + _2882;
                        float _4144 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2887 = 1.0 - _2857;
                        float _2897 = (0.5 / (((_2886 * ((_2872 * _2887) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2886 * _2887) + _2857) * _2872))) * _2886;
                        float _4155 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2908 = (((_2858 * 3.1415927410125732421875) * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) / ((_2880 * _2880) * ((_2823 * 2.1991131305694580078125) + 3.141590118408203125))) * _2812;
                        _2665 = (_2827 * _2775.x) + _2733;
                        _2666 = (_2827 * _2775.y) + _2734;
                        _2667 = (_2827 * _2775.z) + _2735;
                        _2662 = (_2908 * _2792.x) + _2730;
                        _2663 = (_2908 * _2792.y) + _2731;
                        _2664 = (_2908 * _2792.z) + _2732;
                        if (_2737 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2730 = _2662;
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2737;
                        }
                    }
                    frontier_phi_63_pred = _2667;
                    frontier_phi_63_pred_1 = _2666;
                    frontier_phi_63_pred_2 = _2665;
                    frontier_phi_63_pred_3 = _2664;
                    frontier_phi_63_pred_4 = _2663;
                    frontier_phi_63_pred_5 = _2662;
                }
                _2473 = frontier_phi_63_pred;
                _2471 = frontier_phi_63_pred_1;
                _2469 = frontier_phi_63_pred_2;
                _2467 = frontier_phi_63_pred_3;
                _2465 = frontier_phi_63_pred_4;
                _2463 = frontier_phi_63_pred_5;
                uint _2613 = _2612 + 1u;
                if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2606 = _2463;
                    _2607 = _2465;
                    _2608 = _2467;
                    _2609 = _2469;
                    _2610 = _2471;
                    _2611 = _2473;
                    _2612 = _2613;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
        }
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.z;
        uint _2479 = (_2477 >> 8u) & 15u;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((4294967295u << _2479) & _2362) == 0u)
        {
            _2574 = _2462;
            _2576 = _2464;
            _2578 = _2466;
            _2580 = _2468;
            _2582 = _2470;
            _2584 = _2472;
        }
        else
        {
            float _2599 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
            float _2600 = _2599 * _2316;
            float _2601 = _2599 * _2317;
            float _2602 = _2599 * _2318;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2479 < ((_2477 >> 12u) & 15u))
            {
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2713 = _2462;
                float _2714 = _2464;
                float _2715 = _2466;
                float _2716 = _2468;
                float _2717 = _2470;
                float _2718 = _2472;
                uint _2719 = _2479;
                uint _2728;
                bool _2729;
                for (;;)
                {
                    _2728 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                    _2729 = _2728 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2729)
                    {
                        frontier_phi_69_pred = _2718;
                        frontier_phi_69_pred_1 = _2717;
                        frontier_phi_69_pred_2 = _2716;
                        frontier_phi_69_pred_3 = _2715;
                        frontier_phi_69_pred_4 = _2714;
                        frontier_phi_69_pred_5 = _2713;
                    }
                    else
                    {
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _2926 = _2713;
                        float _2927 = _2714;
                        float _2928 = _2715;
                        float _2929 = _2716;
                        float _2930 = _2717;
                        float _2931 = _2718;
                        uint _2932 = _2728;
                        uint _2933;
                        vec4 _2958;
                        float _2959;
                        vec4 _2974;
                        vec3 _2986;
                        vec4 _3002;
                        vec4 _3018;
                        float _3065;
                        bool _3066;
                        for (;;)
                        {
                            uint _2943 = ((_2719 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2932));
                            _2933 = (_2932 + 4294967295u) & _2932;
                            uint _2945 = _2943 * 40u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            _2959 = _2958.w;
                            uint _2961 = (_2943 * 40u) + 4u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2943 * 40u) + 8u;
                            _2986 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x));
                            uint _2989 = (_2943 * 40u) + 16u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3005 = (_2943 * 40u) + 20u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3021 = (_2943 * 40u) + 24u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3040 = (_2943 * 40u) + 28u;
                            vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            _3065 = fma(_2318, _3053.z, fma(_2317, _3053.y, _3053.x * _2316)) + _3053.w;
                            _3066 = !((fma(_2318, _3034.z, fma(_2317, _3034.y, _3034.x * _2316)) + _3034.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3066)
                            {
                                float _3093 = _2958.x - _2316;
                                float _3094 = _2958.y - _2317;
                                float _3095 = _2958.z - _2318;
                                float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                                float _3099 = inversesqrt(_3096);
                                float _3100 = _3099 * _3093;
                                float _3101 = _3099 * _3094;
                                float _3102 = _3099 * _3095;
                                float _3106 = 1.0 - (_3096 / (_2959 * _2959));
                                float _4166 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3111 = sqrt(_3096) * _2974.w;
                                float _3113 = 1.39999997615814208984375 / (_3111 + 1.39999997615814208984375);
                                float _3114 = _3113 * _3113;
                                float _3117 = ((1.0 - _3114) * dot(vec3(_3100, _3101, _3102), vec3(_591, _594, _597))) + _3114;
                                float _3120 = _3111 * _3111;
                                float _3124 = (fma(_2318, _3002.z, fma(_2317, _3002.y, _3002.x * _2316)) + _3002.w) / _3065;
                                float _3125 = (fma(_2318, _3018.z, fma(_2317, _3018.y, _3018.x * _2316)) + _3018.w) / _3065;
                                float _3129 = 1.0 - dot(vec2(_3124, _3125), vec2(_3124, _3125));
                                float _4182 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3130 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3131 = _3130 * (((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3107) / ((_3120 * 0.699999988079071044921875) + 1.0));
                                float _3143 = exp2(log2(1.0 / ((_3120 * 3.5) + 5.0)) * 0.25);
                                float _3144 = 1.0 - _651;
                                float _3151 = sqrt(1.0 - ((1.0 - (_3144 * _3144)) * (1.0 - (_3143 * _3143))));
                                float _3152 = _3151 * _3151;
                                float _3153 = _3152 * _3152;
                                float _3154 = _3100 - _2600;
                                float _3155 = _3101 - _2601;
                                float _3156 = _3102 - _2602;
                                float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                                float _3164 = dot(vec3(_591, _594, _597), vec3((-0.0) - _2600, (-0.0) - _2601, (-0.0) - _2602));
                                float _4193 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3167 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3168 = dot(vec3(_591, _594, _597), vec3(_3160 * _3154, _3160 * _3155, _3160 * _3156));
                                float _4204 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3171 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3175 = ((_3171 * _3171) * (_3153 + (-1.0))) + 1.0;
                                float _3176 = _3113 * _3152;
                                float _3177 = _3176 * _3176;
                                float _3183 = ((1.0 - _3177) * dot(vec3(_591, _594, _597), vec3(_3100, _3101, _3102))) + _3177;
                                float _4215 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3185 = 1.0 - _3152;
                                float _3195 = (0.5 / (((_3184 * ((_3167 * _3185) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3184 * _3185) + _3152) * _3167))) * _3184;
                                float _4226 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3205 = (_3130 * _3107) * (((_3153 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_3175 * _3175) * ((_3120 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3131 * _2974.z;
                                frontier_phi_75_pred_1 = _3131 * _2974.y;
                                frontier_phi_75_pred_2 = _3131 * _2974.x;
                                frontier_phi_75_pred_3 = _3205 * _2986.z;
                                frontier_phi_75_pred_4 = _3205 * _2986.y;
                                frontier_phi_75_pred_5 = _3205 * _2986.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3214 = frontier_phi_75_pred;
                            _3213 = frontier_phi_75_pred_1;
                            _3212 = frontier_phi_75_pred_2;
                            _3211 = frontier_phi_75_pred_3;
                            _3210 = frontier_phi_75_pred_4;
                            _3209 = frontier_phi_75_pred_5;
                            _2916 = _3212 + _2929;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            if (_2933 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2933;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2918;
                        frontier_phi_69_pred_1 = _2917;
                        frontier_phi_69_pred_2 = _2916;
                        frontier_phi_69_pred_3 = _2915;
                        frontier_phi_69_pred_4 = _2914;
                        frontier_phi_69_pred_5 = _2913;
                    }
                    _2585 = frontier_phi_69_pred;
                    _2583 = frontier_phi_69_pred_1;
                    _2581 = frontier_phi_69_pred_2;
                    _2579 = frontier_phi_69_pred_3;
                    _2577 = frontier_phi_69_pred_4;
                    _2575 = frontier_phi_69_pred_5;
                    uint _2720 = _2719 + 1u;
                    if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2713 = _2575;
                        _2714 = _2577;
                        _2715 = _2579;
                        _2716 = _2581;
                        _2717 = _2583;
                        _2718 = _2585;
                        _2719 = _2720;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2585;
                frontier_phi_57_58_ladder_1 = _2583;
                frontier_phi_57_58_ladder_2 = _2581;
                frontier_phi_57_58_ladder_3 = _2579;
                frontier_phi_57_58_ladder_4 = _2577;
                frontier_phi_57_58_ladder_5 = _2575;
            }
            else
            {
                frontier_phi_57_58_ladder = _2472;
                frontier_phi_57_58_ladder_1 = _2470;
                frontier_phi_57_58_ladder_2 = _2468;
                frontier_phi_57_58_ladder_3 = _2466;
                frontier_phi_57_58_ladder_4 = _2464;
                frontier_phi_57_58_ladder_5 = _2462;
            }
            _2574 = frontier_phi_57_58_ladder_5;
            _2576 = frontier_phi_57_58_ladder_4;
            _2578 = frontier_phi_57_58_ladder_3;
            _2580 = frontier_phi_57_58_ladder_2;
            _2582 = frontier_phi_57_58_ladder_1;
            _2584 = frontier_phi_57_58_ladder;
        }
        float _2589 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2374 = (_2589 * _2580) + _1827;
        _2376 = (_2589 * _2582) + _1829;
        _2378 = (_2589 * _2584) + _1831;
        _2380 = ((_2574 * 0.039999999105930328369140625) * _2589) + _2160;
        _2382 = ((_2576 * 0.039999999105930328369140625) * _2589) + _2162;
        _2384 = ((_2578 * 0.039999999105930328369140625) * _2589) + _2164;
    }
    else
    {
        _2374 = _1827;
        _2376 = _1829;
        _2378 = _1831;
        _2380 = _2160;
        _2382 = _2162;
        _2384 = _2164;
    }
    float _4242 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4253 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4264 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    uint _2404 = _610 + 6u;
    float _2412 = _570 / cbSceneParam._m0[86u].x;
    float _2413 = _571 / cbSceneParam._m0[86u].y;
    vec4 _2427 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2412, _2413, (log2((isnan(cbSceneParam._m0[77u].w) ? _505 : (isnan(_505) ? cbSceneParam._m0[77u].w : min(_505, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2429 = _2427.x;
    float _2430 = _2427.y;
    float _2431 = _2427.z;
    float _2432 = _2427.w;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    if (_505 > cbSceneParam._m0[78u].w)
    {
        float _2487 = isnan(_505) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _505 : min(cbSceneParam._m0[80u].w, _505));
        float _2488 = _2487 / _505;
        float _2499 = _2488 * _555;
        float _2500 = _556 * _2488;
        float _2501 = (-0.0) - _2500;
        float _2502 = _2488 * _557;
        float _2504 = (cbSceneParam._m0[77u].w * _2501) / _2487;
        float _2505 = _2504 + cbSceneParam._m0[79u].w;
        float _2506 = cbSceneParam._m0[79u].w - _2500;
        float _2512 = sqrt(((_2499 * _2499) + (_2500 * _2500)) + (_2502 * _2502));
        float _2515 = (1.0 - (cbSceneParam._m0[77u].w / _2487)) * _2512;
        float _2520 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2522 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2675;
        if (abs((_2501 - _2504) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2675 = ((((_2505 > 0.0) ? exp2(_2520 * _2505) : (2.0 - exp2(_2522 * _2505))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2515;
        }
        else
        {
            float _2635 = 1.0 / cbSceneParam._m0[80u].x;
            float _2636 = isnan(_2506) ? _2505 : (isnan(_2505) ? _2506 : max(_2505, _2506));
            float _2637 = isnan(_2506) ? _2505 : (isnan(_2505) ? _2506 : min(_2505, _2506));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            _2675 = ((abs(_2512 / _2501) * cbSceneParam._m0[80u].y) * ((((_2646 - _2647) * 2.0) - ((exp2(_2520 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0)))) - exp2(_2520 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0))))) * _2635)) - ((exp2(_2522 * _2646) - exp2(_2522 * _2647)) * _2635))) + (_2515 * cbSceneParam._m0[80u].z);
        }
        vec4 _2677 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2412, _2413, 1.0), 0.0);
        float _2686 = exp2((_2675 * (-1.44269502162933349609375)) * (1.0 - _2677.w));
        float _2687 = log2(_2686);
        float _2703 = log2(_2432);
        _2524 = (exp2(_2703 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].x)) * _2677.x) / cbSceneParam._m0[78u].x)) + _2429;
        _2526 = (exp2(_2703 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].y)) * _2677.y) / cbSceneParam._m0[78u].y)) + _2430;
        _2528 = (exp2(_2703 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].z)) * _2677.z) / cbSceneParam._m0[78u].z)) + _2431;
        _2530 = _2686 * _2432;
    }
    else
    {
        _2524 = _2429;
        _2526 = _2430;
        _2528 = _2431;
        _2530 = _2432;
    }
    float _2542 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2543 = _2542 == 3.0;
    float _2544 = log2(_2530);
    float _2551 = exp2(_2544 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2374 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _635))) + ((_2380 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1442)) * cbPerFrame._m0[3u].x));
    float _2552 = exp2(_2544 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2376 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _635))) + ((_2382 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1442)) * cbPerFrame._m0[3u].x));
    float _2553 = exp2(_2544 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2378 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _635))) + ((_2384 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1442)) * cbPerFrame._m0[3u].x));
    float _2562 = (_2542 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2562 * (_2543 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2524)));
    SV_Target.y = _2562 * (_2543 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2526)));
    SV_Target.z = _2562 * (_2543 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2528)));
    SV_Target.w = cbInstanceData._m0[_2404].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2404].w;
}


