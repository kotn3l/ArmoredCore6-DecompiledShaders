#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1082;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _250.x;
    float _254 = _250.y;
    float _255 = _250.z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _300 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3441 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _310 = ((_287.z - _255) * _301) + _255;
    float _314 = ((((_287.x - _253) * _301) + _253) * 2.0) + (-1.0);
    float _316 = ((((_287.y - _254) * _301) + _254) * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3452 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))));
    float _325 = fma(_322, _234, fma(_316, _227, _314 * _213));
    float _328 = fma(_322, _235, fma(_316, _228, _314 * _214));
    float _331 = fma(_322, _236, fma(_316, _229, _314 * _215));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    vec4 _363 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _367 = (cbMtdParam._m0[11u].z + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_363.x * cbMtdParam._m0[11u].w);
    float _3463 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _390 = _385.x * cbMtdParam._m0[9u].x;
    float _391 = _385.y * cbMtdParam._m0[9u].y;
    float _392 = _385.z * cbMtdParam._m0[9u].z;
    vec4 _411 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _425 = (((_411.x * cbMtdParam._m0[10u].x) - _390) * _301) + _390;
    float _426 = (((_411.y * cbMtdParam._m0[10u].y) - _391) * _301) + _391;
    float _427 = (((_411.z * cbMtdParam._m0[10u].z) - _392) * _301) + _392;
    vec4 _440 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _451 = ((_440.x - _425) * _368) + _425;
    float _452 = ((_440.y - _426) * _368) + _426;
    float _453 = ((_440.z - _427) * _368) + _427;
    vec4 _466 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _468 = _466.x;
    float _486 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _468) * _301) + _468;
    float _488 = _486 - (_486 * _368);
    vec4 _501 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _508 = (_501.x * 2.0) + (-1.0);
    float _509 = (_501.y * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3474 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _518 = ((_501.z - _310) * _368) + _310;
    float _525 = ((_508 - _314) * _368) + _314;
    float _526 = ((_509 - _316) * _368) + _316;
    float _527 = ((sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) - _322) * _368) + _322;
    float _530 = fma(_527, _234, fma(_526, _227, _525 * _213));
    float _533 = fma(_527, _235, fma(_526, _228, _525 * _214));
    float _536 = fma(_527, _236, fma(_526, _229, _525 * _215));
    float _540 = inversesqrt(dot(vec3(_530, _533, _536), vec3(_530, _533, _536)));
    float _541 = _540 * _530;
    float _542 = _540 * _533;
    float _543 = _540 * _536;
    float _3485 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _544 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3507 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3518 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3529 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _548 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _614 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _604);
    float _615 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _604);
    float _616 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _604);
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _621 = _614 * _620;
    float _622 = _615 * _620;
    float _623 = _616 * _620;
    float _629 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _630 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _648 = fma(_543, cbSceneParam._m0[5u].z, fma(_542, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _541));
    float _651 = fma(_543, cbSceneParam._m0[6u].z, fma(_542, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _541));
    float _654 = fma(_543, cbSceneParam._m0[7u].z, fma(_542, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _541));
    uint _667 = uint(roundEven(NORMAL.w)) * 13u;
    uint _669 = (_667 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _675 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_669].x;
    float _676 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_669].y;
    float _677 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_669].z;
    float _3540 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _681 = 1.0 - _548;
    float _682 = _678 * _681;
    float _683 = _679 * _681;
    float _684 = _680 * _681;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _548;
    float _690 = (_679 + (-0.039999999105930328369140625)) * _548;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _548;
    float _692 = _689 + 0.039999999105930328369140625;
    float _694 = _690 + 0.039999999105930328369140625;
    float _695 = _691 + 0.039999999105930328369140625;
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _629, cbSceneParam._m0[86u].y * _630));
    float _707 = _704.x * TEXCOORD_9.w;
    float _708 = dot(vec3(_541, _542, _543), vec3(_621, _622, _623));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _541) - _621;
    float _716 = (_711 * _542) - _622;
    float _717 = (_711 * _543) - _623;
    float _721 = abs(dot(vec3(_621, _622, _623), vec3(_541, _542, _543)));
    float _3573 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_544);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _742 = (1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _743 = _736 * _723;
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771));
        float _810 = fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771));
        float _814 = fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771));
        float _839 = _771 + _541;
        float _840 = _775 + _542;
        float _841 = _779 + _543;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _806;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _810;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _814;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_541, _542, _543), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3621 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_541, _542, _543), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3654 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_541, _542, _543), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3687 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1122 = fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771));
        float _1126 = fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771));
        float _1130 = fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771));
        float _1153 = _771 + _541;
        float _1154 = _775 + _542;
        float _1155 = _779 + _543;
        float _1165 = fma(_1155, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153)) - _1122;
        float _1166 = fma(_1155, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153)) - _1126;
        float _1167 = fma(_1155, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153)) - _1130;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1122 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1126 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[35u].z) + ((((((_1130 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1221 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1188.x + (-0.5));
        float _1223 = _1221 * (_1188.y + (-0.5));
        float _1224 = _1221 * (_1188.z + (-0.5));
        float _1231 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1195.x + (-0.5));
        float _1233 = _1231 * (_1195.y + (-0.5));
        float _1234 = _1231 * (_1195.z + (-0.5));
        float _1241 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1202.x + (-0.5));
        float _1243 = _1241 * (_1202.y + (-0.5));
        float _1244 = _1241 * (_1202.z + (-0.5));
        float _1251 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1209.x + (-0.5));
        float _1253 = _1251 * (_1209.y + (-0.5));
        float _1254 = _1251 * (_1209.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_541, _542, _543), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3750 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1285 + 1.0))) + _1290) * _1255;
        float _1300 = _1223 * 0.5;
        float _1301 = _1233 * 0.5;
        float _1302 = _1243 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_541, _542, _543), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3783 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1327 + 1.0))) + _1332) * _1256;
        float _1342 = _1224 * 0.5;
        float _1343 = _1234 * 0.5;
        float _1344 = _1244 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_541, _542, _543), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3816 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1369 + 1.0))) + _1374) * _1257;
        _1391 = _1224;
        _1392 = _1223;
        _1393 = _1222;
        _1394 = _1234;
        _1395 = _1233;
        _1396 = _1232;
        _1397 = _1244;
        _1398 = _1243;
        _1399 = _1242;
        _1400 = _1257;
        _1401 = _1256;
        _1402 = _1255;
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1082;
        _1392 = _1082;
        _1393 = _1082;
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1094)) + _1094;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1095)) + _1095;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1096)) + _1096;
    float _1438 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1441 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1444 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1415));
    float _1459 = _715 * 0.5;
    float _1460 = _716 * 0.5;
    float _1461 = _717 * 0.5;
    float _1462 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1465 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1468 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1502;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1475 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1479 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1483 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1490 = dot(vec4(cbModelParam._m0[39u]), vec4(_1459, _1460, _1461, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1513;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1504 = dot(vec4(cbModelParam._m0[40u]), vec4(_1459, _1460, _1461, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1517 = (_1513 * cbModelParam._m0[1u].x) + (_1502 * (1.0 - cbModelParam._m0[1u].x));
    float _1527 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _544);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1527 : min(cbModelParam._m0[25u].z, _1527));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1577 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1581 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1585 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1588 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1591 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1594 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1622;
        if (_1588 > 0.0)
        {
            _1622 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1622 = frontier_phi_16_14_ladder;
        }
        float _1849;
        if (_1591 > 0.0)
        {
            _1849 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1849 = frontier_phi_25_21_ladder;
        }
        float _2106;
        if (_1594 > 0.0)
        {
            _2106 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2106 = frontier_phi_37_32_ladder;
        }
        float _2108 = isnan(_1849) ? _1622 : (isnan(_1622) ? _1849 : min(_1622, _1849));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1588) + _1577;
        float _2114 = (_2109 * _1591) + _1581;
        float _2115 = (_2109 * _1594) + _1585;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2116;
        float _2120 = _2116 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 > _2120) || ((_2114 < _2118) || ((_2113 < _2118) || (_2113 > _2120))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2115, cbModelParam._m0[9u].z, fma(_2114, cbModelParam._m0[9u].y, _2113 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2115, cbModelParam._m0[10u].z, fma(_2114, cbModelParam._m0[10u].y, _2113 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2115, cbModelParam._m0[11u].z, fma(_2114, cbModelParam._m0[11u].y, _2113 * cbModelParam._m0[11u].x))), _1528);
            frontier_phi_15_37_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1610 = frontier_phi_15_37_ladder_2;
        _1612 = frontier_phi_15_37_ladder_1;
        _1614 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1528);
        _1610 = _1598.x * cbModelParam._m0[1u].y;
        _1612 = _1598.y * cbModelParam._m0[1u].y;
        _1614 = _1598.z * cbModelParam._m0[1u].y;
    }
    float _1618 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _544);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1618 : min(cbModelParam._m0[25u].w, _1618));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1676 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1680 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1684 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1687 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1690 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1693 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1854;
        if (_1687 > 0.0)
        {
            _1854 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1854 = frontier_phi_27_23_ladder;
        }
        float _2133;
        if (_1690 > 0.0)
        {
            _2133 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2133 = frontier_phi_39_34_ladder;
        }
        float _2346;
        if (_1693 > 0.0)
        {
            _2346 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2346 = frontier_phi_48_45_ladder;
        }
        float _2348 = isnan(_2133) ? _1854 : (isnan(_1854) ? _2133 : min(_1854, _2133));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1687) + _1676;
        float _2354 = (_2349 * _1690) + _1680;
        float _2355 = (_2349 * _1693) + _1684;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1619);
            frontier_phi_24_48_ladder = _2553.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2553.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2553.x * cbModelParam._m0[1u].z;
        }
        _1712 = frontier_phi_24_48_ladder_2;
        _1714 = frontier_phi_24_48_ladder_1;
        _1716 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1619);
        _1712 = _1696.x * cbModelParam._m0[1u].z;
        _1714 = _1696.y * cbModelParam._m0[1u].z;
        _1716 = _1696.z * cbModelParam._m0[1u].z;
    }
    float _1729 = (((_742 * _692) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1712 - _1610)) + _1610);
    float _1731 = (((_742 * _694) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1714 - _1612)) + _1612);
    float _1733 = (((_742 * _695) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1716 - _1614)) + _1614);
    float _1736 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, _1729 * cbSceneParam._m0[91u].x));
    vec4 _1750 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_629, _630));
    float _1752 = _1750.w;
    float _1764 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1752);
    float _1765 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1752);
    float _1766 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1752);
    uvec4 _1770 = floatBitsToUint(cbInstanceData._m0[_667 + 5u]);
    uint _1772 = _1770.x * 14u;
    uint _1773 = _1772 + 13u;
    float _1780 = _707 + (-1.0);
    float _1785 = (cbLight._m0[_1773].x * _1780) + 1.0;
    float _1786 = (cbLight._m0[_1773].y * _1780) + 1.0;
    float _1787 = (cbLight._m0[_1773].z * _1780) + 1.0;
    float _1788 = (cbLight._m0[_1773].w * _1780) + 1.0;
    uint _1789 = _1772 + 5u;
    float _1795 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1799 = _1772 + 4u;
    float _1808 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1812 = _1772 | 1u;
    float _1823 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_541, _542, _543));
    float _1826 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_541, _542, _543));
    float _3952 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _3963 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1831 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.3183098733425140380859375;
    float _1833 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
    float _1840 = ((cbLight._m0[_1789].x * _1795) * _1833) + (((cbLight._m0[_1799].x * _1764) * _1808) * _1831);
    float _1841 = ((_1795 * cbLight._m0[_1789].y) * _1833) + (((cbLight._m0[_1799].y * _1765) * _1808) * _1831);
    float _1842 = ((_1795 * cbLight._m0[_1789].z) * _1833) + (((cbLight._m0[_1799].z * _1766) * _1808) * _1831);
    uvec4 _1846 = floatBitsToUint(cbLight._m0[_1772 + 12u]);
    bool _1848 = _1846.x == 0u;
    float _1859;
    float _1861;
    float _1863;
    if (_1848)
    {
        _1859 = _1840;
        _1861 = _1841;
        _1863 = _1842;
    }
    else
    {
        uint _1867 = _1772 + 6u;
        float _1883 = (dot(vec3(cbLight._m0[_1772 + 2u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _1884 = _1883 * _1883;
        float _3974 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1886 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1859 = (((cbLight._m0[_1867].x * 0.3183098733425140380859375) * _1885) * _1886) + _1840;
        _1861 = (((cbLight._m0[_1867].y * 0.3183098733425140380859375) * _1885) * _1886) + _1841;
        _1863 = (((cbLight._m0[_1867].z * 0.3183098733425140380859375) * _1885) * _1886) + _1842;
    }
    bool _1866 = _1846.y == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1866)
    {
        _1904 = _1859;
        _1906 = _1861;
        _1908 = _1863;
    }
    else
    {
        uint _2077 = _1772 + 7u;
        float _2093 = (dot(vec3(cbLight._m0[_1772 + 3u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _3990 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2096 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1904 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _1859;
        _1906 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _1861;
        _1908 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _1863;
    }
    uint _1911 = _1772 + 8u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _544) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1772].x + _621;
    float _1927 = cbLight._m0[_1772].y + _622;
    float _1928 = cbLight._m0[_1772].z + _623;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1772].xyz));
    float _4006 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _1940 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1941 = dot(vec3(_541, _542, _543), vec3(_1933, _1934, _1935));
    float _4028 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1933, _1934, _1935));
    float _4039 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1925 * _1925;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1961 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _1962 = 0.959999978542327880859375 - _689;
    float _1964 = 0.959999978542327880859375 - _690;
    float _1965 = 0.959999978542327880859375 - _691;
    float _1972 = 1.0 - _1925;
    float _1983 = (0.5 / (((_1940 * ((_1939 * _1972) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _1972) + _1925) * _1939))) * _1939;
    float _4050 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    uint _1999 = _1772 + 9u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _544) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1812].x + _621;
    float _2013 = cbLight._m0[_1812].y + _622;
    float _2014 = cbLight._m0[_1812].z + _623;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1812].xyz));
    float _4061 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _2026 = dot(vec3(_541, _542, _543), vec3(_2019, _2020, _2021));
    float _4072 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2019, _2020, _2021));
    float _4083 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2011 * _2011;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
    float _2052 = 1.0 - _2011;
    float _2062 = (0.5 / (((_1940 * ((_2025 * _2052) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2052) + _2011) * _2025))) * _2025;
    float _4094 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    float _2074 = (((((_2045 * _1962) + _692) * cbLight._m0[_1999].x) * _2064) * _1795) + ((((cbLight._m0[_1911].x * _1764) * ((_1961 * _1962) + _692)) * _1985) * _1808);
    float _2075 = (((((_2045 * _1964) + _694) * cbLight._m0[_1999].y) * _2064) * _1795) + ((((cbLight._m0[_1911].y * _1765) * ((_1961 * _1964) + _694)) * _1985) * _1808);
    float _2076 = (((((_2045 * _1965) + _695) * cbLight._m0[_1999].z) * _2064) * _1795) + ((((cbLight._m0[_1911].z * _1766) * ((_1961 * _1965) + _695)) * _1985) * _1808);
    float _2138;
    float _2140;
    float _2142;
    if (_1848)
    {
        _2138 = _2074;
        _2140 = _2075;
        _2142 = _2076;
    }
    else
    {
        uint _2144 = _1772 + 2u;
        uint _2148 = _1772 + 10u;
        float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _544) * 0.949999988079071044921875);
        float _2163 = _2162 * _2162;
        float _2164 = cbLight._m0[_2144].x + _621;
        float _2165 = cbLight._m0[_2144].y + _622;
        float _2166 = cbLight._m0[_2144].z + _623;
        float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
        float _2171 = _2170 * _2164;
        float _2172 = _2170 * _2165;
        float _2173 = _2170 * _2166;
        float _2174 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2144].xyz));
        float _4105 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2178 = dot(vec3(_541, _542, _543), vec3(_2171, _2172, _2173));
        float _4116 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2182 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2171, _2172, _2173));
        float _4127 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2186 = _2163 * _2163;
        float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
        float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
        float _2204 = 1.0 - _2163;
        float _2214 = (0.5 / (((_1940 * ((_2177 * _2204) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2204) + _2163) * _2177))) * _2177;
        float _4138 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2138 = (((((_2197 * _1962) + _692) * cbLight._m0[_2148].x) * _2216) * _2217) + _2074;
        _2140 = (((((_2197 * _1964) + _694) * cbLight._m0[_2148].y) * _2216) * _2217) + _2075;
        _2142 = (((((_2197 * _1965) + _695) * cbLight._m0[_2148].z) * _2216) * _2217) + _2076;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1866)
    {
        _2252 = _2138;
        _2254 = _2140;
        _2256 = _2142;
    }
    else
    {
        uint _2263 = _1772 + 3u;
        uint _2267 = _1772 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _544) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _621;
        float _2284 = cbLight._m0[_2263].y + _622;
        float _2285 = cbLight._m0[_2263].z + _623;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2263].xyz));
        float _4154 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2297 = dot(vec3(_541, _542, _543), vec3(_2290, _2291, _2292));
        float _4165 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4176 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_1940 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2323) + _2282) * _2296))) * _2296;
        float _4187 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2252 = (((((_2316 * _1962) + _692) * cbLight._m0[_2267].x) * _2335) * _2336) + _2138;
        _2254 = (((((_2316 * _1964) + _694) * cbLight._m0[_2267].y) * _2335) * _2336) + _2140;
        _2256 = (((((_2316 * _1965) + _695) * cbLight._m0[_2267].z) * _2335) * _2336) + _2142;
    }
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_1770.y == 0u)
    {
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2411;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2411;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2411;
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.x;
        uint _2438 = uint((float(_2426.y) * floor(float(uint(cbSceneParam._m0[85u].y * _630) / _2427))) + floor(float(uint(cbSceneParam._m0[85u].x * _629) / _2427)));
        float _2448 = (log2(_2414 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        uint _2452 = uint(isnan(14.0) ? _2449 : (isnan(_2449) ? 14.0 : min(_2449, 14.0)));
        uvec4 _2457 = texelFetch(g_lightClusterGridBuffer, int(((_2452 << 2u) + (_2438 << 6u)) >> 2u));
        uint _2458 = _2457.x;
        uint _2459 = _2426.z;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        if (((((1u << ((_2459 >> 4u) & 15u)) + 4294967295u) & _2458) == 0u) || ((_2459 & 240u) == 0u))
        {
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
        }
        else
        {
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            uint _2708 = 0u;
            uint _2717;
            bool _2718;
            for (;;)
            {
                _2717 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                _2718 = _2717 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2718)
                {
                    frontier_phi_63_pred = _2707;
                    frontier_phi_63_pred_1 = _2706;
                    frontier_phi_63_pred_2 = _2705;
                    frontier_phi_63_pred_3 = _2704;
                    frontier_phi_63_pred_4 = _2703;
                    frontier_phi_63_pred_5 = _2702;
                }
                else
                {
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    uint _2832;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2717;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    for (;;)
                    {
                        uint _2836 = uint(findLSB(_2832)) + (_2708 << 5u);
                        uint _2833 = (_2832 + 4294967295u) & _2832;
                        uint _2838 = _2836 * 48u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 3u)).x));
                        uint _2858 = (_2836 * 48u) + 4u;
                        vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 3u)).x));
                        uint _2877 = (_2836 * 48u) + 8u;
                        vec3 _2888 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x));
                        float _2892 = _2852.x - _2412;
                        float _2893 = _2852.y - _2413;
                        float _2894 = _2852.z - _2414;
                        float _2895 = dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894));
                        float _2898 = inversesqrt(_2895);
                        float _2899 = _2898 * _2892;
                        float _2900 = _2898 * _2893;
                        float _2901 = _2898 * _2894;
                        float _2902 = dot(vec3(_648, _651, _654), vec3(_2899, _2900, _2901));
                        float _2907 = 1.0 - (_2895 * _2852.w);
                        float _4213 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2909 = sqrt(_2895) * _2871.w;
                        float _2912 = 1.39999997615814208984375 / (_2909 + 1.39999997615814208984375);
                        float _2913 = _2912 * _2912;
                        float _2916 = ((1.0 - _2913) * _2902) + _2913;
                        float _2919 = _2909 * _2909;
                        float _2923 = ((isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))) * _2908) / ((_2919 * 0.699999988079071044921875) + 1.0);
                        float _2927 = (-0.0) - _2412;
                        float _2928 = (-0.0) - _2413;
                        float _2929 = (-0.0) - _2414;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2934 = _2933 * _2927;
                        float _2935 = _2933 * _2928;
                        float _2936 = _2933 * _2929;
                        float _2944 = exp2(log2(1.0 / ((_2919 * 3.5) + 5.0)) * 0.25);
                        float _2945 = 1.0 - _723;
                        float _2952 = sqrt(1.0 - ((1.0 - (_2945 * _2945)) * (1.0 - (_2944 * _2944))));
                        float _2953 = _2952 * _2952;
                        float _2954 = _2953 * _2953;
                        float _2955 = _2934 + _2899;
                        float _2956 = _2935 + _2900;
                        float _2957 = _2936 + _2901;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2965 = dot(vec3(_648, _651, _654), vec3(_2934, _2935, _2936));
                        float _4229 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2969 = dot(vec3(_648, _651, _654), vec3(_2961 * _2955, _2961 * _2956, _2961 * _2957));
                        float _4240 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2972 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2976 = ((_2972 * _2972) * (_2954 + (-1.0))) + 1.0;
                        float _2977 = _2912 * _2953;
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2902) + _2978;
                        float _4251 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2983 = 1.0 - _2953;
                        float _2993 = (0.5 / (((_2982 * ((_2968 * _2983) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2982 * _2983) + _2953) * _2968))) * _2982;
                        float _4262 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _3004 = (((_2954 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_2976 * _2976) * ((_2919 * 2.1991131305694580078125) + 3.141590118408203125))) * _2908;
                        _2761 = (_2923 * _2871.x) + _2829;
                        _2762 = (_2923 * _2871.y) + _2830;
                        _2763 = (_2923 * _2871.z) + _2831;
                        _2758 = (_3004 * _2888.x) + _2826;
                        _2759 = (_3004 * _2888.y) + _2827;
                        _2760 = (_3004 * _2888.z) + _2828;
                        if (_2833 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2833;
                        }
                    }
                    frontier_phi_63_pred = _2763;
                    frontier_phi_63_pred_1 = _2762;
                    frontier_phi_63_pred_2 = _2761;
                    frontier_phi_63_pred_3 = _2760;
                    frontier_phi_63_pred_4 = _2759;
                    frontier_phi_63_pred_5 = _2758;
                }
                _2569 = frontier_phi_63_pred;
                _2567 = frontier_phi_63_pred_1;
                _2565 = frontier_phi_63_pred_2;
                _2563 = frontier_phi_63_pred_3;
                _2561 = frontier_phi_63_pred_4;
                _2559 = frontier_phi_63_pred_5;
                uint _2709 = _2708 + 1u;
                if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2702 = _2559;
                    _2703 = _2561;
                    _2704 = _2563;
                    _2705 = _2565;
                    _2706 = _2567;
                    _2707 = _2569;
                    _2708 = _2709;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
        }
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.z;
        uint _2575 = (_2573 >> 8u) & 15u;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((4294967295u << _2575) & _2458) == 0u)
        {
            _2670 = _2558;
            _2672 = _2560;
            _2674 = _2562;
            _2676 = _2564;
            _2678 = _2566;
            _2680 = _2568;
        }
        else
        {
            float _2695 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
            float _2696 = _2695 * _2412;
            float _2697 = _2695 * _2413;
            float _2698 = _2695 * _2414;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2575 < ((_2573 >> 12u) & 15u))
            {
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2809 = _2558;
                float _2810 = _2560;
                float _2811 = _2562;
                float _2812 = _2564;
                float _2813 = _2566;
                float _2814 = _2568;
                uint _2815 = _2575;
                uint _2824;
                bool _2825;
                for (;;)
                {
                    _2824 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                    _2825 = _2824 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2825)
                    {
                        frontier_phi_69_pred = _2814;
                        frontier_phi_69_pred_1 = _2813;
                        frontier_phi_69_pred_2 = _2812;
                        frontier_phi_69_pred_3 = _2811;
                        frontier_phi_69_pred_4 = _2810;
                        frontier_phi_69_pred_5 = _2809;
                    }
                    else
                    {
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        uint _3028 = _2824;
                        uint _3029;
                        vec4 _3054;
                        float _3055;
                        vec4 _3070;
                        vec3 _3082;
                        vec4 _3098;
                        vec4 _3114;
                        float _3161;
                        bool _3162;
                        for (;;)
                        {
                            uint _3039 = ((_2815 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3028));
                            _3029 = (_3028 + 4294967295u) & _3028;
                            uint _3041 = _3039 * 40u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3055 = _3054.w;
                            uint _3057 = (_3039 * 40u) + 4u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_3039 * 40u) + 8u;
                            _3082 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x));
                            uint _3085 = (_3039 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3101 = (_3039 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3117 = (_3039 * 40u) + 24u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3136 = (_3039 * 40u) + 28u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3161 = fma(_2414, _3149.z, fma(_2413, _3149.y, _3149.x * _2412)) + _3149.w;
                            _3162 = !((fma(_2414, _3130.z, fma(_2413, _3130.y, _3130.x * _2412)) + _3130.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3162)
                            {
                                float _3189 = _3054.x - _2412;
                                float _3190 = _3054.y - _2413;
                                float _3191 = _3054.z - _2414;
                                float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                                float _3195 = inversesqrt(_3192);
                                float _3196 = _3195 * _3189;
                                float _3197 = _3195 * _3190;
                                float _3198 = _3195 * _3191;
                                float _3202 = 1.0 - (_3192 / (_3055 * _3055));
                                float _4273 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3207 = sqrt(_3192) * _3070.w;
                                float _3209 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                                float _3210 = _3209 * _3209;
                                float _3213 = ((1.0 - _3210) * dot(vec3(_3196, _3197, _3198), vec3(_648, _651, _654))) + _3210;
                                float _3216 = _3207 * _3207;
                                float _3220 = (fma(_2414, _3098.z, fma(_2413, _3098.y, _3098.x * _2412)) + _3098.w) / _3161;
                                float _3221 = (fma(_2414, _3114.z, fma(_2413, _3114.y, _3114.x * _2412)) + _3114.w) / _3161;
                                float _3225 = 1.0 - dot(vec2(_3220, _3221), vec2(_3220, _3221));
                                float _4289 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3227 = _3226 * (((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3203) / ((_3216 * 0.699999988079071044921875) + 1.0));
                                float _3239 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                                float _3240 = 1.0 - _723;
                                float _3247 = sqrt(1.0 - ((1.0 - (_3240 * _3240)) * (1.0 - (_3239 * _3239))));
                                float _3248 = _3247 * _3247;
                                float _3249 = _3248 * _3248;
                                float _3250 = _3196 - _2696;
                                float _3251 = _3197 - _2697;
                                float _3252 = _3198 - _2698;
                                float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                                float _3260 = dot(vec3(_648, _651, _654), vec3((-0.0) - _2696, (-0.0) - _2697, (-0.0) - _2698));
                                float _4300 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3264 = dot(vec3(_648, _651, _654), vec3(_3256 * _3250, _3256 * _3251, _3256 * _3252));
                                float _4311 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3271 = ((_3267 * _3267) * (_3249 + (-1.0))) + 1.0;
                                float _3272 = _3209 * _3248;
                                float _3273 = _3272 * _3272;
                                float _3279 = ((1.0 - _3273) * dot(vec3(_648, _651, _654), vec3(_3196, _3197, _3198))) + _3273;
                                float _4322 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3281 = 1.0 - _3248;
                                float _3291 = (0.5 / (((_3280 * ((_3263 * _3281) + _3248)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3248) * _3263))) * _3280;
                                float _4333 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3301 = (_3226 * _3203) * (((_3249 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3271 * _3271) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3227 * _3070.z;
                                frontier_phi_75_pred_1 = _3227 * _3070.y;
                                frontier_phi_75_pred_2 = _3227 * _3070.x;
                                frontier_phi_75_pred_3 = _3301 * _3082.z;
                                frontier_phi_75_pred_4 = _3301 * _3082.y;
                                frontier_phi_75_pred_5 = _3301 * _3082.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_75_pred;
                            _3309 = frontier_phi_75_pred_1;
                            _3308 = frontier_phi_75_pred_2;
                            _3307 = frontier_phi_75_pred_3;
                            _3306 = frontier_phi_75_pred_4;
                            _3305 = frontier_phi_75_pred_5;
                            _3012 = _3308 + _3025;
                            _3013 = _3309 + _3026;
                            _3014 = _3310 + _3027;
                            _3009 = _3305 + _3022;
                            _3010 = _3306 + _3023;
                            _3011 = _3307 + _3024;
                            if (_3029 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3029;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3014;
                        frontier_phi_69_pred_1 = _3013;
                        frontier_phi_69_pred_2 = _3012;
                        frontier_phi_69_pred_3 = _3011;
                        frontier_phi_69_pred_4 = _3010;
                        frontier_phi_69_pred_5 = _3009;
                    }
                    _2681 = frontier_phi_69_pred;
                    _2679 = frontier_phi_69_pred_1;
                    _2677 = frontier_phi_69_pred_2;
                    _2675 = frontier_phi_69_pred_3;
                    _2673 = frontier_phi_69_pred_4;
                    _2671 = frontier_phi_69_pred_5;
                    uint _2816 = _2815 + 1u;
                    if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2809 = _2671;
                        _2810 = _2673;
                        _2811 = _2675;
                        _2812 = _2677;
                        _2813 = _2679;
                        _2814 = _2681;
                        _2815 = _2816;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2681;
                frontier_phi_57_58_ladder_1 = _2679;
                frontier_phi_57_58_ladder_2 = _2677;
                frontier_phi_57_58_ladder_3 = _2675;
                frontier_phi_57_58_ladder_4 = _2673;
                frontier_phi_57_58_ladder_5 = _2671;
            }
            else
            {
                frontier_phi_57_58_ladder = _2568;
                frontier_phi_57_58_ladder_1 = _2566;
                frontier_phi_57_58_ladder_2 = _2564;
                frontier_phi_57_58_ladder_3 = _2562;
                frontier_phi_57_58_ladder_4 = _2560;
                frontier_phi_57_58_ladder_5 = _2558;
            }
            _2670 = frontier_phi_57_58_ladder_5;
            _2672 = frontier_phi_57_58_ladder_4;
            _2674 = frontier_phi_57_58_ladder_3;
            _2676 = frontier_phi_57_58_ladder_2;
            _2678 = frontier_phi_57_58_ladder_1;
            _2680 = frontier_phi_57_58_ladder;
        }
        float _2685 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2470 = (_2685 * _2676) + _1904;
        _2472 = (_2685 * _2678) + _1906;
        _2474 = (_2685 * _2680) + _1908;
        _2476 = ((_2670 * _692) * _2685) + _2252;
        _2478 = ((_2672 * _694) * _2685) + _2254;
        _2480 = ((_2674 * _695) * _2685) + _2256;
    }
    else
    {
        _2470 = _1904;
        _2472 = _1906;
        _2474 = _1908;
        _2476 = _2252;
        _2478 = _2254;
        _2480 = _2256;
    }
    float _4349 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4360 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4371 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    uint _2500 = _667 + 6u;
    float _2508 = _629 / cbSceneParam._m0[86u].x;
    float _2509 = _630 / cbSceneParam._m0[86u].y;
    vec4 _2523 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2525 = _2523.x;
    float _2526 = _2523.y;
    float _2527 = _2523.z;
    float _2528 = _2523.w;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _2583 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _2584 = _2583 / _564;
        float _2595 = _2584 * _614;
        float _2596 = _615 * _2584;
        float _2597 = (-0.0) - _2596;
        float _2598 = _2584 * _616;
        float _2600 = (cbSceneParam._m0[77u].w * _2597) / _2583;
        float _2601 = _2600 + cbSceneParam._m0[79u].w;
        float _2602 = cbSceneParam._m0[79u].w - _2596;
        float _2608 = sqrt(((_2595 * _2595) + (_2596 * _2596)) + (_2598 * _2598));
        float _2611 = (1.0 - (cbSceneParam._m0[77u].w / _2583)) * _2608;
        float _2616 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2618 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2771;
        if (abs((_2597 - _2600) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2771 = ((((_2601 > 0.0) ? exp2(_2616 * _2601) : (2.0 - exp2(_2618 * _2601))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2611;
        }
        else
        {
            float _2731 = 1.0 / cbSceneParam._m0[80u].x;
            float _2732 = isnan(_2602) ? _2601 : (isnan(_2601) ? _2602 : max(_2601, _2602));
            float _2733 = isnan(_2602) ? _2601 : (isnan(_2601) ? _2602 : min(_2601, _2602));
            float _2742 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : min(_2732, 0.0));
            float _2743 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : min(_2733, 0.0));
            _2771 = ((abs(_2608 / _2597) * cbSceneParam._m0[80u].y) * ((((_2742 - _2743) * 2.0) - ((exp2(_2616 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0)))) - exp2(_2616 * (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))))) * _2731)) - ((exp2(_2618 * _2742) - exp2(_2618 * _2743)) * _2731))) + (_2611 * cbSceneParam._m0[80u].z);
        }
        vec4 _2773 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, 1.0), 0.0);
        float _2782 = exp2((_2771 * (-1.44269502162933349609375)) * (1.0 - _2773.w));
        float _2783 = log2(_2782);
        float _2799 = log2(_2528);
        _2620 = (exp2(_2799 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].x)) * _2773.x) / cbSceneParam._m0[78u].x)) + _2525;
        _2622 = (exp2(_2799 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].y)) * _2773.y) / cbSceneParam._m0[78u].y)) + _2526;
        _2624 = (exp2(_2799 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].z)) * _2773.z) / cbSceneParam._m0[78u].z)) + _2527;
        _2626 = _2782 * _2528;
    }
    else
    {
        _2620 = _2525;
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
    }
    float _2638 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2639 = _2638 == 3.0;
    float _2640 = log2(_2626);
    float _2647 = exp2(_2640 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2470 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _707))) + ((_2476 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1517)) * cbPerFrame._m0[3u].x));
    float _2648 = exp2(_2640 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2472 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _707))) + ((_2478 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1517)) * cbPerFrame._m0[3u].x));
    float _2649 = exp2(_2640 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2474 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _707))) + ((_2480 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1517)) * cbPerFrame._m0[3u].x));
    float _2658 = (_2638 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2658 * (_2639 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.y = _2658 * (_2639 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.z = _2658 * (_2639 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.w = cbInstanceData._m0[_2500].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2500].w;
}


