#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1011;
float _3684;
float _3685;
float _3686;
float _3687;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _240.z;
    float _249 = (_240.x * 2.0) + (-1.0);
    float _251 = (_240.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3696 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))));
    float _261 = fma(_258, _224, fma(_251, _217, _249 * _203));
    float _264 = fma(_258, _225, fma(_251, _218, _249 * _204));
    float _267 = fma(_258, _226, fma(_251, _219, _249 * _205));
    float _271 = inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267)));
    float _306 = (cbMtdParam._m0[11u].z + dot(vec4(_271 * _261, _271 * _264, _271 * _267, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3707 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    vec4 _324 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _329 = _324.x * cbMtdParam._m0[9u].x;
    float _330 = _324.y * cbMtdParam._m0[9u].y;
    float _331 = _324.z * cbMtdParam._m0[9u].z;
    vec4 _344 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _355 = ((_344.x - _329) * _307) + _329;
    float _356 = ((_344.y - _330) * _307) + _330;
    float _357 = ((_344.z - _331) * _307) + _331;
    vec4 _370 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _372 = _370.x;
    float _374 = _372 - (_372 * _307);
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _394 = (_387.x * 2.0) + (-1.0);
    float _395 = (_387.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3718 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _404 = ((_387.z - _245) * _307) + _245;
    float _411 = ((_394 - _249) * _307) + _249;
    float _412 = ((_395 - _251) * _307) + _251;
    float _413 = ((sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) - _258) * _307) + _258;
    float _416 = fma(_413, _224, fma(_412, _217, _411 * _203));
    float _419 = fma(_413, _225, fma(_412, _218, _411 * _204));
    float _422 = fma(_413, _226, fma(_412, _219, _411 * _205));
    float _426 = inversesqrt(dot(vec3(_416, _419, _422), vec3(_416, _419, _422)));
    float _427 = _426 * _416;
    float _428 = _426 * _419;
    float _429 = _426 * _422;
    float _3729 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _430 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3751 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3762 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3773 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _434 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _450 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _501 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _491);
    float _502 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _491);
    float _503 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _491);
    float _507 = inversesqrt(dot(vec3(_501, _502, _503), vec3(_501, _502, _503)));
    float _508 = _501 * _507;
    float _509 = _502 * _507;
    float _510 = _503 * _507;
    vec4 _515 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _517 = _515.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _690 = sqrt(((_501 * _501) + (_502 * _502)) + (_503 * _503));
        float _696 = (cbMatDynParam._m0[5u].x * _690) + cbMatDynParam._m0[5u].y;
        float _3784 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _701 = (cbMatDynParam._m0[5u].z * _690) + cbMatDynParam._m0[5u].w;
        float _3795 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) - _697)) + _697) < ((_517 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _529 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _530 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _548 = fma(_429, cbSceneParam._m0[5u].z, fma(_428, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _427));
    float _551 = fma(_429, cbSceneParam._m0[6u].z, fma(_428, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _427));
    float _554 = fma(_429, cbSceneParam._m0[7u].z, fma(_428, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _427));
    uint _567 = uint(roundEven(NORMAL.w)) * 13u;
    uint _568 = _567 + 9u;
    uint _569 = _568 + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_569].z;
    float _3806 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _581 = 1.0 - _434;
    float _582 = _578 * _581;
    float _583 = _579 * _581;
    float _584 = _580 * _581;
    float _589 = (_578 + (-0.039999999105930328369140625)) * _434;
    float _590 = (_579 + (-0.039999999105930328369140625)) * _434;
    float _591 = (_580 + (-0.039999999105930328369140625)) * _434;
    float _592 = _589 + 0.039999999105930328369140625;
    float _594 = _590 + 0.039999999105930328369140625;
    float _595 = _591 + 0.039999999105930328369140625;
    vec4 _604 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _529, cbSceneParam._m0[86u].y * _530));
    float _607 = _604.x * TEXCOORD_9.w;
    float _608 = dot(vec3(_427, _428, _429), vec3(_508, _509, _510));
    float _611 = _608 * 2.0;
    float _615 = (_611 * _427) - _508;
    float _616 = (_611 * _428) - _509;
    float _617 = (_611 * _429) - _510;
    float _621 = abs(dot(vec3(_508, _509, _510), vec3(_427, _428, _429)));
    float _3839 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _623 = sqrt(_430);
    float _636 = exp2((_623 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _642 = (1.0 - _636) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _643 = _636 * _623;
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1010;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _735 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _739 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _743 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _768 = _671 + _427;
        float _769 = _675 + _428;
        float _770 = _679 + _429;
        float _780 = fma(_770, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768)) - _735;
        float _781 = fma(_770, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768)) - _739;
        float _782 = fma(_770, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768)) - _743;
        float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
        float _799 = ((_786 * _780) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_735 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_786 * _781) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_739 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_786 * _782) / cbModelParam._m0[34u].z) + ((((((_743 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        float _838 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_804.x + (-0.5));
        float _840 = _838 * (_804.y + (-0.5));
        float _841 = _838 * (_804.z + (-0.5));
        float _848 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_811.x + (-0.5));
        float _850 = _848 * (_811.y + (-0.5));
        float _851 = _848 * (_811.z + (-0.5));
        float _858 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_818.x + (-0.5));
        float _860 = _858 * (_818.y + (-0.5));
        float _861 = _858 * (_818.z + (-0.5));
        float _868 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_825.x + (-0.5));
        float _870 = _868 * (_825.y + (-0.5));
        float _871 = _868 * (_825.z + (-0.5));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = _839 * 0.5;
        float _876 = _849 * 0.5;
        float _877 = _859 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _892 = (dot(vec3(_427, _428, _429), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _902 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3887 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_904 + 1.0))) + _909) * _872;
        float _919 = _840 * 0.5;
        float _920 = _850 * 0.5;
        float _921 = _860 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_427, _428, _429), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3920 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_946 + 1.0))) + _951) * _873;
        float _961 = _841 * 0.5;
        float _962 = _851 * 0.5;
        float _963 = _861 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_427, _428, _429), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3953 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_988 + 1.0))) + _993) * _874;
        _1010 = _841;
        _1012 = _840;
        _1013 = _839;
        _1014 = _851;
        _1015 = _850;
        _1016 = _849;
        _1017 = _861;
        _1018 = _860;
        _1019 = _859;
        _1020 = _874;
        _1021 = _873;
        _1022 = _872;
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
    }
    else
    {
        _1010 = _1011;
        _1012 = _1011;
        _1013 = _1011;
        _1014 = _1011;
        _1015 = _1011;
        _1016 = _1011;
        _1017 = _1011;
        _1018 = _1011;
        _1019 = _1011;
        _1020 = _1011;
        _1021 = _1011;
        _1022 = _1011;
        _1023 = 0.0;
        _1024 = 0.0;
        _1025 = 0.0;
    }
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1054 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1058 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1062 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1085 = _671 + _427;
        float _1086 = _675 + _428;
        float _1087 = _679 + _429;
        float _1097 = fma(_1087, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085)) - _1054;
        float _1098 = fma(_1087, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085)) - _1058;
        float _1099 = fma(_1087, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085)) - _1062;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1054 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1058 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[35u].z) + ((((((_1062 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1153 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1120.x + (-0.5));
        float _1155 = _1153 * (_1120.y + (-0.5));
        float _1156 = _1153 * (_1120.z + (-0.5));
        float _1163 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1127.x + (-0.5));
        float _1165 = _1163 * (_1127.y + (-0.5));
        float _1166 = _1163 * (_1127.z + (-0.5));
        float _1173 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1134.x + (-0.5));
        float _1175 = _1173 * (_1134.y + (-0.5));
        float _1176 = _1173 * (_1134.z + (-0.5));
        float _1183 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1141.x + (-0.5));
        float _1185 = _1183 * (_1141.y + (-0.5));
        float _1186 = _1183 * (_1141.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_427, _428, _429), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4016 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1217 + 1.0))) + _1222) * _1187;
        float _1232 = _1155 * 0.5;
        float _1233 = _1165 * 0.5;
        float _1234 = _1175 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_427, _428, _429), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4049 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1259 + 1.0))) + _1264) * _1188;
        float _1274 = _1156 * 0.5;
        float _1275 = _1166 * 0.5;
        float _1276 = _1176 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_427, _428, _429), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4082 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1301 + 1.0))) + _1306) * _1189;
        _1323 = _1156;
        _1324 = _1155;
        _1325 = _1154;
        _1326 = _1166;
        _1327 = _1165;
        _1328 = _1164;
        _1329 = _1176;
        _1330 = _1175;
        _1331 = _1174;
        _1332 = _1189;
        _1333 = _1188;
        _1334 = _1187;
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1011;
        _1324 = _1011;
        _1325 = _1011;
        _1326 = _1011;
        _1327 = _1011;
        _1328 = _1011;
        _1329 = _1011;
        _1330 = _1011;
        _1331 = _1011;
        _1332 = _1011;
        _1333 = _1011;
        _1334 = _1011;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1023)) + _1023;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1024)) + _1024;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1025)) + _1025;
    float _1370 = fma(_1349, cbSceneParam._m0[89u].z, fma(_1348, cbSceneParam._m0[89u].y, _1347 * cbSceneParam._m0[89u].x));
    float _1373 = fma(_1349, cbSceneParam._m0[90u].z, fma(_1348, cbSceneParam._m0[90u].y, _1347 * cbSceneParam._m0[90u].x));
    float _1376 = fma(_1349, cbSceneParam._m0[91u].z, fma(_1348, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1347));
    float _1391 = _615 * 0.5;
    float _1392 = _616 * 0.5;
    float _1393 = _617 * 0.5;
    float _1394 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1397 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1400 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1434;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1407 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1010, _1014, _1017, _1020));
        float _1411 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1415 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1422 = dot(vec4(cbModelParam._m0[39u]), vec4(_1391, _1392, _1393, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1445;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1436 = dot(vec4(cbModelParam._m0[40u]), vec4(_1391, _1392, _1393, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1449 = (_1445 * cbModelParam._m0[1u].x) + (_1434 * (1.0 - cbModelParam._m0[1u].x));
    float _1459 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _430);
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1459 : min(cbModelParam._m0[25u].z, _1459));
    float _1542;
    float _1544;
    float _1546;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1509 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1513 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1517 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1520 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1523 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1526 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1554;
        if (_1520 > 0.0)
        {
            _1554 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1554 = frontier_phi_19_17_ladder;
        }
        float _1729;
        if (_1523 > 0.0)
        {
            _1729 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1729 = frontier_phi_28_24_ladder;
        }
        float _2025;
        if (_1526 > 0.0)
        {
            _2025 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2025 = frontier_phi_40_35_ladder;
        }
        float _2027 = isnan(_1729) ? _1554 : (isnan(_1554) ? _1729 : min(_1554, _1729));
        float _2028 = isnan(_2025) ? _2027 : (isnan(_2027) ? _2025 : min(_2027, _2025));
        float _2032 = (_2028 * _1520) + _1509;
        float _2033 = (_2028 * _1523) + _1513;
        float _2034 = (_2028 * _1526) + _1517;
        float _2035 = _2028 * 9.9999997473787516355514526367188e-05;
        float _2037 = (-1.0) - _2035;
        float _2039 = _2035 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2034 > _2039) || ((_2034 < _2037) || ((_2033 > _2039) || ((_2033 < _2037) || ((_2032 < _2037) || (_2032 > _2039))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2179 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2034, cbModelParam._m0[9u].z, fma(_2033, cbModelParam._m0[9u].y, _2032 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2034, cbModelParam._m0[10u].z, fma(_2033, cbModelParam._m0[10u].y, _2032 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2034, cbModelParam._m0[11u].z, fma(_2033, cbModelParam._m0[11u].y, _2032 * cbModelParam._m0[11u].x))), _1460);
            frontier_phi_18_40_ladder = _2179.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2179.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2179.x * cbModelParam._m0[1u].y;
        }
        _1542 = frontier_phi_18_40_ladder_2;
        _1544 = frontier_phi_18_40_ladder_1;
        _1546 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1460);
        _1542 = _1530.x * cbModelParam._m0[1u].y;
        _1544 = _1530.y * cbModelParam._m0[1u].y;
        _1546 = _1530.z * cbModelParam._m0[1u].y;
    }
    float _1550 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _430);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1550 : min(cbModelParam._m0[25u].w, _1550));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1608 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1612 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1616 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1619 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1622 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1625 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1734;
        if (_1619 > 0.0)
        {
            _1734 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1734 = frontier_phi_30_26_ladder;
        }
        float _2052;
        if (_1622 > 0.0)
        {
            _2052 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2052 = frontier_phi_42_37_ladder;
        }
        float _2390;
        if (_1625 > 0.0)
        {
            _2390 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2390 = frontier_phi_52_49_ladder;
        }
        float _2392 = isnan(_2052) ? _1734 : (isnan(_1734) ? _2052 : min(_1734, _2052));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1619) + _1608;
        float _2398 = (_2393 * _1622) + _1612;
        float _2399 = (_2393 * _1625) + _1616;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1551);
            frontier_phi_27_52_ladder = _2521.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2521.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2521.x * cbModelParam._m0[1u].z;
        }
        _1644 = frontier_phi_27_52_ladder_2;
        _1646 = frontier_phi_27_52_ladder_1;
        _1648 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1551);
        _1644 = _1628.x * cbModelParam._m0[1u].z;
        _1646 = _1628.y * cbModelParam._m0[1u].z;
        _1648 = _1628.z * cbModelParam._m0[1u].z;
    }
    float _1661 = (((_642 * _592) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1644 - _1542)) + _1542);
    float _1663 = (((_642 * _594) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1646 - _1544)) + _1544);
    float _1665 = (((_642 * _595) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1648 - _1546)) + _1546);
    float _1668 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, _1661 * cbSceneParam._m0[91u].x));
    float _1708 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1712 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1721 = _1708 / _1720;
    float _1722 = _1712 / _1720;
    float _1723 = _1716 / _1720;
    float _1870;
    float _1871;
    float _1872;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1750 = ((uint(_1723 > cbSceneParam._m0[59u].y) + uint(_1723 > cbSceneParam._m0[59u].x)) + uint(_1723 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1751 = _1750 + 43u;
        uint _1759 = _1750 + 44u;
        uint _1767 = _1750 + 45u;
        uint _1775 = _1750 + 46u;
        float _1786 = fma(_1720, cbSceneParam._m0[_1751].w, fma(_1716, cbSceneParam._m0[_1751].z, fma(_1712, cbSceneParam._m0[_1751].y, _1708 * cbSceneParam._m0[_1751].x)));
        float _1790 = fma(_1720, cbSceneParam._m0[_1759].w, fma(_1716, cbSceneParam._m0[_1759].z, fma(_1712, cbSceneParam._m0[_1759].y, _1708 * cbSceneParam._m0[_1759].x)));
        float _1798 = fma(_1720, cbSceneParam._m0[_1775].w, fma(_1716, cbSceneParam._m0[_1775].z, fma(_1712, cbSceneParam._m0[_1775].y, _1708 * cbSceneParam._m0[_1775].x)));
        float _1803 = cbSceneParam._m0[33u].z * _1798;
        float _1805 = cbSceneParam._m0[33u].w * _1798;
        float _1808 = fma(_1720, cbSceneParam._m0[_1767].w, fma(_1716, cbSceneParam._m0[_1767].z, fma(_1712, cbSceneParam._m0[_1767].y, _1708 * cbSceneParam._m0[_1767].x))) / _1798;
        float _1856 = (cbSceneParam._m0[33u].x - sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723))) * cbSceneParam._m0[33u].y;
        float _4208 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1863 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1803 + _1786) / _1798, (_1805 + _1790) / _1798), _1808), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1805 + _1786) / _1798, (_1790 - _1803) / _1798), _1808), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1786 - _1803) / _1798, (_1790 - _1805) / _1798), _1808), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1786 - _1805) / _1798, (_1803 + _1790) / _1798), _1808), 0.0)).x), vec4(0.25)));
        _1870 = 1.0 - (_1863 * cbSceneParam._m0[34u].x);
        _1871 = 1.0 - (_1863 * cbSceneParam._m0[34u].y);
        _1872 = 1.0 - (_1863 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1870 = 1.0;
        _1871 = 1.0;
        _1872 = 1.0;
    }
    float _1936;
    float _1938;
    float _1940;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1924 = fma(_1720, cbSceneParam._m0[63u].w, fma(_1716, cbSceneParam._m0[63u].z, fma(_1712, cbSceneParam._m0[63u].y, _1708 * cbSceneParam._m0[63u].x)));
        float _1925 = fma(_1720, cbSceneParam._m0[60u].w, fma(_1716, cbSceneParam._m0[60u].z, fma(_1712, cbSceneParam._m0[60u].y, _1708 * cbSceneParam._m0[60u].x))) / _1924;
        float _1926 = fma(_1720, cbSceneParam._m0[61u].w, fma(_1716, cbSceneParam._m0[61u].z, fma(_1712, cbSceneParam._m0[61u].y, _1708 * cbSceneParam._m0[61u].x))) / _1924;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1925 >= cbSceneParam._m0[64u].x) && (_1926 >= cbSceneParam._m0[64u].y)) && (_1925 <= cbSceneParam._m0[64u].z)) && (_1926 <= cbSceneParam._m0[64u].w))
        {
            float _2065 = fma(_1720, cbSceneParam._m0[62u].w, fma(_1716, cbSceneParam._m0[62u].z, fma(_1712, cbSceneParam._m0[62u].y, _1708 * cbSceneParam._m0[62u].x))) / _1924;
            float _2069 = isnan(cbSceneParam._m0[41u].w) ? _2065 : (isnan(_2065) ? cbSceneParam._m0[41u].w : max(_2065, cbSceneParam._m0[41u].w));
            float _2112 = (cbSceneParam._m0[33u].x - sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723))) * cbSceneParam._m0[33u].y;
            float _4224 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
            float _2119 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1925, cbSceneParam._m0[33u].w + _1926), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1925, _1926 - cbSceneParam._m0[33u].z), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1925 - cbSceneParam._m0[33u].z, _1926 - cbSceneParam._m0[33u].w), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1925 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1926), _2069), 0.0)).x), vec4(0.25)));
            float _2123 = 1.0 - (_2119 * cbSceneParam._m0[34u].x);
            float _2124 = 1.0 - (_2119 * cbSceneParam._m0[34u].y);
            float _2125 = 1.0 - (_2119 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2124) ? _1871 : (isnan(_1871) ? _2124 : min(_1871, _2124));
            frontier_phi_39_38_ladder_1 = isnan(_2123) ? _1870 : (isnan(_1870) ? _2123 : min(_1870, _2123));
            frontier_phi_39_38_ladder_2 = isnan(_2125) ? _1872 : (isnan(_1872) ? _2125 : min(_1872, _2125));
        }
        else
        {
            frontier_phi_39_38_ladder = _1871;
            frontier_phi_39_38_ladder_1 = _1870;
            frontier_phi_39_38_ladder_2 = _1872;
        }
        _1936 = frontier_phi_39_38_ladder_1;
        _1938 = frontier_phi_39_38_ladder;
        _1940 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1936 = _1870;
        _1938 = _1871;
        _1940 = _1872;
    }
    uvec4 _1945 = floatBitsToUint(cbInstanceData._m0[_567 + 5u]);
    uint _1947 = _1945.x * 14u;
    uint _1948 = _1947 + 13u;
    float _1955 = _607 + (-1.0);
    float _1960 = (cbLight._m0[_1948].x * _1955) + 1.0;
    float _1961 = (cbLight._m0[_1948].y * _1955) + 1.0;
    float _1962 = (cbLight._m0[_1948].z * _1955) + 1.0;
    float _1963 = (cbLight._m0[_1948].w * _1955) + 1.0;
    uint _1964 = _1947 + 5u;
    float _1970 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1974 = _1947 + 4u;
    float _1984 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1988 = _1947 | 1u;
    float _1999 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_427, _428, _429));
    float _2002 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_427, _428, _429));
    float _4260 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _4271 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2007 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2009 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2016 = ((cbLight._m0[_1964].x * _1970) * _2009) + (((cbLight._m0[_1974].x * _1936) * _1984) * _2007);
    float _2017 = ((_1970 * cbLight._m0[_1964].y) * _2009) + (((cbLight._m0[_1974].y * _1938) * _1984) * _2007);
    float _2018 = ((_1970 * cbLight._m0[_1964].z) * _2009) + (((cbLight._m0[_1974].z * _1940) * _1984) * _2007);
    uvec4 _2022 = floatBitsToUint(cbLight._m0[_1947 + 12u]);
    bool _2024 = _2022.x == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2024)
    {
        _2126 = _2016;
        _2128 = _2017;
        _2130 = _2018;
    }
    else
    {
        uint _2134 = _1947 + 6u;
        float _2150 = (dot(vec3(cbLight._m0[_1947 + 2u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4282 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2153 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2126 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _2016;
        _2128 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _2017;
        _2130 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _2018;
    }
    bool _2133 = _2022.y == 0u;
    float _2188;
    float _2190;
    float _2192;
    if (_2133)
    {
        _2188 = _2126;
        _2190 = _2128;
        _2192 = _2130;
    }
    else
    {
        uint _2361 = _1947 + 7u;
        float _2377 = (dot(vec3(cbLight._m0[_1947 + 3u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4298 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2380 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2188 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2126;
        _2190 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2128;
        _2192 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2130;
    }
    uint _2195 = _1947 + 8u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _430) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_1947].x + _508;
    float _2211 = cbLight._m0[_1947].y + _509;
    float _2212 = cbLight._m0[_1947].z + _510;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1947].xyz));
    float _4314 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2224 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2225 = dot(vec3(_427, _428, _429), vec3(_2217, _2218, _2219));
    float _4336 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2217, _2218, _2219));
    float _4347 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2209 * _2209;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
    float _2246 = 0.959999978542327880859375 - _589;
    float _2248 = 0.959999978542327880859375 - _590;
    float _2249 = 0.959999978542327880859375 - _591;
    float _2256 = 1.0 - _2209;
    float _2267 = (0.5 / (((_2224 * ((_2223 * _2256) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2256) + _2209) * _2223))) * _2223;
    float _4358 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    uint _2283 = _1947 + 9u;
    float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _430) * 0.949999988079071044921875);
    float _2295 = _2294 * _2294;
    float _2296 = cbLight._m0[_1988].x + _508;
    float _2297 = cbLight._m0[_1988].y + _509;
    float _2298 = cbLight._m0[_1988].z + _510;
    float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
    float _2303 = _2302 * _2296;
    float _2304 = _2302 * _2297;
    float _2305 = _2302 * _2298;
    float _2306 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1988].xyz));
    float _4369 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2310 = dot(vec3(_427, _428, _429), vec3(_2303, _2304, _2305));
    float _4380 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2303, _2304, _2305));
    float _4391 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2295 * _2295;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
    float _2336 = 1.0 - _2295;
    float _2346 = (0.5 / (((_2224 * ((_2309 * _2336) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2336) + _2295) * _2309))) * _2309;
    float _4402 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    float _2358 = (((((_2329 * _2246) + _592) * cbLight._m0[_2283].x) * _2348) * _1970) + ((((cbLight._m0[_2195].x * _1936) * ((_2245 * _2246) + _592)) * _2269) * _1984);
    float _2359 = (((((_2329 * _2248) + _594) * cbLight._m0[_2283].y) * _2348) * _1970) + ((((cbLight._m0[_2195].y * _1938) * ((_2245 * _2248) + _594)) * _2269) * _1984);
    float _2360 = (((((_2329 * _2249) + _595) * cbLight._m0[_2283].z) * _2348) * _1970) + ((((cbLight._m0[_2195].z * _1940) * ((_2245 * _2249) + _595)) * _2269) * _1984);
    float _2416;
    float _2418;
    float _2420;
    if (_2024)
    {
        _2416 = _2358;
        _2418 = _2359;
        _2420 = _2360;
    }
    else
    {
        uint _2422 = _1947 + 2u;
        uint _2426 = _1947 + 10u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _430) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _508;
        float _2443 = cbLight._m0[_2422].y + _509;
        float _2444 = cbLight._m0[_2422].z + _510;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2422].xyz));
        float _4413 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2456 = dot(vec3(_427, _428, _429), vec3(_2449, _2450, _2451));
        float _4424 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4435 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2475 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
        float _2482 = 1.0 - _2441;
        float _2492 = (0.5 / (((_2224 * ((_2455 * _2482) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2482) + _2441) * _2455))) * _2455;
        float _4446 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2416 = (((((_2475 * _2246) + _592) * cbLight._m0[_2426].x) * _2494) * _2495) + _2358;
        _2418 = (((((_2475 * _2248) + _594) * cbLight._m0[_2426].y) * _2494) * _2495) + _2359;
        _2420 = (((((_2475 * _2249) + _595) * cbLight._m0[_2426].z) * _2494) * _2495) + _2360;
    }
    float _2526;
    float _2528;
    float _2530;
    if (_2133)
    {
        _2526 = _2416;
        _2528 = _2418;
        _2530 = _2420;
    }
    else
    {
        uint _2537 = _1947 + 3u;
        uint _2541 = _1947 + 11u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _430) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _508;
        float _2558 = cbLight._m0[_2537].y + _509;
        float _2559 = cbLight._m0[_2537].z + _510;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2537].xyz));
        float _4462 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2571 = dot(vec3(_427, _428, _429), vec3(_2564, _2565, _2566));
        float _4473 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4484 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
        float _2597 = 1.0 - _2556;
        float _2607 = (0.5 / (((_2224 * ((_2570 * _2597) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2597) + _2556) * _2570))) * _2570;
        float _4495 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2609 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2610 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2526 = (((((_2590 * _2246) + _592) * cbLight._m0[_2541].x) * _2609) * _2610) + _2416;
        _2528 = (((((_2590 * _2248) + _594) * cbLight._m0[_2541].y) * _2609) * _2610) + _2418;
        _2530 = (((((_2590 * _2249) + _595) * cbLight._m0[_2541].z) * _2609) * _2610) + _2420;
    }
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_1945.y == 0u)
    {
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _530) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _529) / _2632)));
        float _2653 = (log2(_1723 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
        }
        else
        {
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            uint _2900 = 0u;
            uint _2909;
            bool _2910;
            for (;;)
            {
                _2909 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                _2910 = _2909 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2910)
                {
                    frontier_phi_73_pred = _2899;
                    frontier_phi_73_pred_1 = _2898;
                    frontier_phi_73_pred_2 = _2897;
                    frontier_phi_73_pred_3 = _2896;
                    frontier_phi_73_pred_4 = _2895;
                    frontier_phi_73_pred_5 = _2894;
                }
                else
                {
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    uint _3045;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2909;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3049 = uint(findLSB(_3045)) + (_2900 << 5u);
                        uint _3046 = (_3045 + 4294967295u) & _3045;
                        uint _3051 = _3049 * 48u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3071 = (_3049 * 48u) + 4u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3090 = (_3049 * 48u) + 8u;
                        vec3 _3101 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x));
                        float _3105 = _3065.x - _1721;
                        float _3106 = _3065.y - _1722;
                        float _3107 = _3065.z - _1723;
                        float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                        float _3111 = inversesqrt(_3108);
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3115 = dot(vec3(_548, _551, _554), vec3(_3112, _3113, _3114));
                        float _3120 = 1.0 - (_3108 * _3065.w);
                        float _4521 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3122 = sqrt(_3108) * _3084.w;
                        float _3125 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3115) + _3126;
                        float _3132 = _3122 * _3122;
                        float _3136 = ((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3121) / ((_3132 * 0.699999988079071044921875) + 1.0);
                        float _3140 = (-0.0) - _1721;
                        float _3141 = (-0.0) - _1722;
                        float _3142 = (-0.0) - _1723;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3156 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                        float _3157 = 1.0 - _623;
                        float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                        float _3165 = _3164 * _3164;
                        float _3166 = _3165 * _3165;
                        float _3167 = _3147 + _3112;
                        float _3168 = _3148 + _3113;
                        float _3169 = _3149 + _3114;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3177 = dot(vec3(_548, _551, _554), vec3(_3147, _3148, _3149));
                        float _4537 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3181 = dot(vec3(_548, _551, _554), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                        float _4548 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                        float _3189 = _3125 * _3165;
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3115) + _3190;
                        float _4559 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3195 = 1.0 - _3165;
                        float _3205 = (0.5 / (((_3194 * ((_3180 * _3195) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3165) * _3180))) * _3194;
                        float _4570 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3216 = (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3188 * _3188) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125))) * _3121;
                        _2969 = (_3136 * _3084.x) + _3042;
                        _2970 = (_3136 * _3084.y) + _3043;
                        _2971 = (_3136 * _3084.z) + _3044;
                        _2966 = (_3216 * _3101.x) + _3039;
                        _2967 = (_3216 * _3101.y) + _3040;
                        _2968 = (_3216 * _3101.z) + _3041;
                        if (_3046 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _3046;
                        }
                    }
                    frontier_phi_73_pred = _2971;
                    frontier_phi_73_pred_1 = _2970;
                    frontier_phi_73_pred_2 = _2969;
                    frontier_phi_73_pred_3 = _2968;
                    frontier_phi_73_pred_4 = _2967;
                    frontier_phi_73_pred_5 = _2966;
                }
                _2753 = frontier_phi_73_pred;
                _2751 = frontier_phi_73_pred_1;
                _2749 = frontier_phi_73_pred_2;
                _2747 = frontier_phi_73_pred_3;
                _2745 = frontier_phi_73_pred_4;
                _2743 = frontier_phi_73_pred_5;
                uint _2901 = _2900 + 1u;
                if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2894 = _2743;
                    _2895 = _2745;
                    _2896 = _2747;
                    _2897 = _2749;
                    _2898 = _2751;
                    _2899 = _2753;
                    _2900 = _2901;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
        }
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.z;
        uint _2759 = (_2757 >> 8u) & 15u;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((4294967295u << _2759) & _2663) == 0u)
        {
            _2862 = _2742;
            _2864 = _2744;
            _2866 = _2746;
            _2868 = _2748;
            _2870 = _2750;
            _2872 = _2752;
        }
        else
        {
            float _2887 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
            float _2888 = _2887 * _1721;
            float _2889 = _2887 * _1722;
            float _2890 = _2887 * _1723;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2759 < ((_2757 >> 12u) & 15u))
            {
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _3022 = _2742;
                float _3023 = _2744;
                float _3024 = _2746;
                float _3025 = _2748;
                float _3026 = _2750;
                float _3027 = _2752;
                uint _3028 = _2759;
                uint _3037;
                bool _3038;
                for (;;)
                {
                    _3037 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                    _3038 = _3037 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3038)
                    {
                        frontier_phi_84_pred = _3026;
                        frontier_phi_84_pred_1 = _3025;
                        frontier_phi_84_pred_2 = _3024;
                        frontier_phi_84_pred_3 = _3023;
                        frontier_phi_84_pred_4 = _3022;
                        frontier_phi_84_pred_5 = _3027;
                    }
                    else
                    {
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3243 = _3022;
                        float _3244 = _3023;
                        float _3245 = _3024;
                        float _3246 = _3025;
                        float _3247 = _3026;
                        float _3248 = _3027;
                        uint _3249 = _3037;
                        uint _3250;
                        vec4 _3275;
                        float _3276;
                        vec4 _3291;
                        vec3 _3303;
                        vec4 _3319;
                        vec4 _3335;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3260 = ((_3028 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3249));
                            _3250 = (_3249 + 4294967295u) & _3249;
                            uint _3262 = _3260 * 40u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3276 = _3275.w;
                            uint _3278 = (_3260 * 40u) + 4u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3260 * 40u) + 8u;
                            _3303 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x));
                            uint _3306 = (_3260 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3260 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3338 = (_3260 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3260 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_1723, _3370.z, fma(_1722, _3370.y, _3370.x * _1721)) + _3370.w;
                            _3383 = !((fma(_1723, _3351.z, fma(_1722, _3351.y, _3351.x * _1721)) + _3351.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3275.x - _1721;
                                float _3411 = _3275.y - _1722;
                                float _3412 = _3275.z - _1723;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3276 * _3276));
                                float _4581 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3428 = sqrt(_3413) * _3291.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_548, _551, _554))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_1723, _3319.z, fma(_1722, _3319.y, _3319.x * _1721)) + _3319.w) / _3382;
                                float _3442 = (fma(_1723, _3335.z, fma(_1722, _3335.y, _3335.x * _1721)) + _3335.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4597 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _623;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2888;
                                float _3472 = _3418 - _2889;
                                float _3473 = _3419 - _2890;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_548, _551, _554), vec3((-0.0) - _2888, (-0.0) - _2889, (-0.0) - _2890));
                                float _4608 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3485 = dot(vec3(_548, _551, _554), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4619 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_548, _551, _554), vec3(_3417, _3418, _3419))) + _3494;
                                float _4630 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4641 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3448 * _3291.y;
                                frontier_phi_90_pred_1 = _3448 * _3291.x;
                                frontier_phi_90_pred_2 = _3522 * _3303.z;
                                frontier_phi_90_pred_3 = _3522 * _3303.y;
                                frontier_phi_90_pred_4 = _3522 * _3303.x;
                                frontier_phi_90_pred_5 = _3448 * _3291.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3530 = frontier_phi_90_pred;
                            _3529 = frontier_phi_90_pred_1;
                            _3528 = frontier_phi_90_pred_2;
                            _3527 = frontier_phi_90_pred_3;
                            _3526 = frontier_phi_90_pred_4;
                            _3531 = frontier_phi_90_pred_5;
                            _3233 = _3529 + _3246;
                            _3234 = _3530 + _3247;
                            _3235 = _3531 + _3248;
                            _3230 = _3526 + _3243;
                            _3231 = _3527 + _3244;
                            _3232 = _3528 + _3245;
                            if (_3250 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3250;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3234;
                        frontier_phi_84_pred_1 = _3233;
                        frontier_phi_84_pred_2 = _3232;
                        frontier_phi_84_pred_3 = _3231;
                        frontier_phi_84_pred_4 = _3230;
                        frontier_phi_84_pred_5 = _3235;
                    }
                    _2871 = frontier_phi_84_pred;
                    _2869 = frontier_phi_84_pred_1;
                    _2867 = frontier_phi_84_pred_2;
                    _2865 = frontier_phi_84_pred_3;
                    _2863 = frontier_phi_84_pred_4;
                    _2873 = frontier_phi_84_pred_5;
                    uint _3029 = _3028 + 1u;
                    if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3022 = _2863;
                        _3023 = _2865;
                        _3024 = _2867;
                        _3025 = _2869;
                        _3026 = _2871;
                        _3027 = _2873;
                        _3028 = _3029;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2873;
                frontier_phi_65_66_ladder_1 = _2869;
                frontier_phi_65_66_ladder_2 = _2871;
                frontier_phi_65_66_ladder_3 = _2865;
                frontier_phi_65_66_ladder_4 = _2863;
                frontier_phi_65_66_ladder_5 = _2867;
            }
            else
            {
                frontier_phi_65_66_ladder = _2752;
                frontier_phi_65_66_ladder_1 = _2748;
                frontier_phi_65_66_ladder_2 = _2750;
                frontier_phi_65_66_ladder_3 = _2744;
                frontier_phi_65_66_ladder_4 = _2742;
                frontier_phi_65_66_ladder_5 = _2746;
            }
            _2862 = frontier_phi_65_66_ladder_4;
            _2864 = frontier_phi_65_66_ladder_3;
            _2866 = frontier_phi_65_66_ladder_5;
            _2868 = frontier_phi_65_66_ladder_1;
            _2870 = frontier_phi_65_66_ladder_2;
            _2872 = frontier_phi_65_66_ladder;
        }
        float _2877 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
        _2675 = (_2877 * _2868) + _2188;
        _2677 = (_2877 * _2870) + _2190;
        _2679 = (_2877 * _2872) + _2192;
        _2681 = ((_2862 * _592) * _2877) + _2526;
        _2683 = ((_2864 * _594) * _2877) + _2528;
        _2685 = ((_2866 * _595) * _2877) + _2530;
    }
    else
    {
        _2675 = _2188;
        _2677 = _2190;
        _2679 = _2192;
        _2681 = _2526;
        _2683 = _2528;
        _2685 = _2530;
    }
    float _4657 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4668 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4679 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _2702 = ((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2675 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _607))) + ((_2681 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1449)) * cbPerFrame._m0[3u].x);
    float _2703 = ((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2677 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _607))) + ((_2683 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1449)) * cbPerFrame._m0[3u].x);
    float _2704 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2679 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _607))) + ((_2685 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1449)) * cbPerFrame._m0[3u].x);
    uint _2705 = _567 + 6u;
    float _2713 = _529 / cbSceneParam._m0[86u].x;
    float _2714 = _530 / cbSceneParam._m0[86u].y;
    vec4 _2728 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2713, _2714, (log2((isnan(cbSceneParam._m0[77u].w) ? _450 : (isnan(_450) ? cbSceneParam._m0[77u].w : min(_450, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2730 = _2728.x;
    float _2731 = _2728.y;
    float _2732 = _2728.z;
    float _2733 = _2728.w;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_450 > cbSceneParam._m0[78u].w)
    {
        float _2767 = isnan(_450) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _450 : min(cbSceneParam._m0[80u].w, _450));
        float _2768 = _2767 / _450;
        float _2779 = _2768 * _501;
        float _2780 = _502 * _2768;
        float _2781 = (-0.0) - _2780;
        float _2782 = _2768 * _503;
        float _2784 = (cbSceneParam._m0[77u].w * _2781) / _2767;
        float _2785 = _2784 + cbSceneParam._m0[79u].w;
        float _2786 = cbSceneParam._m0[79u].w - _2780;
        float _2792 = sqrt(((_2779 * _2779) + (_2780 * _2780)) + (_2782 * _2782));
        float _2795 = (1.0 - (cbSceneParam._m0[77u].w / _2767)) * _2792;
        float _2800 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2802 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2781 - _2784) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2785 > 0.0) ? exp2(_2800 * _2785) : (2.0 - exp2(_2802 * _2785))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2795;
        }
        else
        {
            float _2923 = 1.0 / cbSceneParam._m0[80u].x;
            float _2924 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : max(_2785, _2786));
            float _2925 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : min(_2785, _2786));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            _2979 = ((abs(_2792 / _2781) * cbSceneParam._m0[80u].y) * ((((_2934 - _2935) * 2.0) - ((exp2(_2800 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)))) - exp2(_2800 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))))) * _2923)) - ((exp2(_2802 * _2934) - exp2(_2802 * _2935)) * _2923))) + (_2795 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2713, _2714, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2733);
        _2804 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2730;
        _2806 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2731;
        _2808 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2732;
        _2810 = _2990 * _2733;
    }
    else
    {
        _2804 = _2730;
        _2806 = _2731;
        _2808 = _2732;
        _2810 = _2733;
    }
    bool _3017;
    vec4 _2820;
    vec4 _2842;
    float _2844;
    float _2848;
    float _2849;
    float _2850;
    float _2851;
    bool _2861;
    for (;;)
    {
        _2820 = cbMatDynParam._m0[0u];
        float _2822 = roundEven(_2820.y);
        bool _2823 = _2822 == 3.0;
        float _2824 = log2(_2810);
        float _2831 = exp2(_2824 * cbSceneParam._m0[78u].x) * _2702;
        float _2832 = exp2(_2824 * cbSceneParam._m0[78u].y) * _2703;
        float _2833 = exp2(_2824 * cbSceneParam._m0[78u].z) * _2704;
        float _2840 = _517 + (-0.5);
        _2842 = cbMtdParam._m0[1u];
        _2844 = _2842.y * _2840;
        float _2847 = (_2822 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2848 = _2847 * (_2823 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2804)));
        _2849 = _2847 * (_2823 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2806)));
        _2850 = _2847 * (_2823 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2808)));
        _2851 = _2840 * 0.999000012874603271484375;
        _2861 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2861)
        {
            if ((cbInstanceData._m0[_567 + 7u].x + _2851) < 0.5)
            {
                _3017 = true;
                break;
            }
        }
        uint _2958 = _568 + uint(_2820.w);
        if ((cbInstanceData._m0[_2958].w < 1.0) && ((cbInstanceData._m0[_2958].w + _2851) < 0.5))
        {
            _3017 = true;
            break;
        }
        if ((_2844 + 1.0) < _2842.x)
        {
            _3017 = true;
            break;
        }
        _3017 = false;
        break;
    }
    float _3221;
    if (_3017)
    {
        discard_state = true;
        _3221 = 0.0;
    }
    else
    {
        _3221 = cbInstanceData._m0[_2705].w;
    }
    SV_Target.x = _2848;
    SV_Target.y = _2849;
    SV_Target.z = _2850;
    SV_Target.w = _3221;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2705].w;
    discard_exit();
}


