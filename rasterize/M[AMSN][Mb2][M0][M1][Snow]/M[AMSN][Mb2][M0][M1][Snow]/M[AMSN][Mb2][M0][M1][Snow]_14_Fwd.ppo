#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _809;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    vec4 _224 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _229 = _224.z;
    float _233 = (_224.x * 2.0) + (-1.0);
    float _235 = (_224.y * 2.0) + (-1.0);
    float _236 = dot(vec2(_233, _235), vec2(_233, _235));
    float _3125 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _242 = sqrt(1.0 - (isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))));
    vec4 _260 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _260.x * cbMtdParam._m0[9u].x;
    float _266 = _260.y * cbMtdParam._m0[9u].y;
    float _267 = _260.z * cbMtdParam._m0[9u].z;
    float _270 = fma(_242, _208, fma(_235, _200 * TANGENT.x, (_186 * _178) * _233));
    float _273 = fma(_242, _209, fma(_235, _200 * TANGENT.y, (_186 * _179) * _233));
    float _276 = fma(_242, _210, fma(_235, _200 * TANGENT.z, (_186 * _180) * _233));
    float _280 = inversesqrt(dot(vec3(_270, _273, _276), vec3(_270, _273, _276)));
    float _281 = _280 * _270;
    float _282 = _280 * _273;
    float _283 = _280 * _276;
    float _3136 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _284 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
    float _3147 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3158 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3169 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _303 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _346 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _356 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _346);
    float _357 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _346);
    float _358 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _346);
    float _362 = inversesqrt(dot(vec3(_356, _357, _358), vec3(_356, _357, _358)));
    float _363 = _356 * _362;
    float _364 = _357 * _362;
    float _365 = _358 * _362;
    float _371 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _372 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _393 = fma(_283, cbSceneParam._m0[5u].z, fma(_282, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _281));
    float _396 = fma(_283, cbSceneParam._m0[6u].z, fma(_282, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _281));
    float _399 = fma(_283, cbSceneParam._m0[7u].z, fma(_282, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _281));
    uint _412 = uint(roundEven(NORMAL.w)) * 13u;
    uint _414 = (_412 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _420 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0)))) * cbInstanceData._m0[_414].x;
    float _421 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0)))) * cbInstanceData._m0[_414].y;
    float _422 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0)))) * cbInstanceData._m0[_414].z;
    float _3180 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
    float _3191 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _3202 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    vec4 _434 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _371, cbSceneParam._m0[86u].y * _372));
    float _437 = _434.x * TEXCOORD_9.w;
    float _438 = dot(vec3(_281, _282, _283), vec3(_363, _364, _365));
    float _441 = _438 * 2.0;
    float _445 = (_441 * _281) - _363;
    float _446 = (_441 * _282) - _364;
    float _447 = (_441 * _283) - _365;
    float _451 = abs(dot(vec3(_363, _364, _365), vec3(_281, _282, _283)));
    float _3213 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _453 = sqrt(_284);
    float _466 = exp2((_453 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_453 * 3.0));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _808;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _533 = fma(_506, cbModelParam._m0[26u].z, fma(_502, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _498));
        float _537 = fma(_506, cbModelParam._m0[27u].z, fma(_502, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _498));
        float _541 = fma(_506, cbModelParam._m0[28u].z, fma(_502, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _498));
        float _566 = _498 + _281;
        float _567 = _502 + _282;
        float _568 = _506 + _283;
        float _578 = fma(_568, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566)) - _533;
        float _579 = fma(_568, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566)) - _537;
        float _580 = fma(_568, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566)) - _541;
        float _584 = inversesqrt(dot(vec3(_578, _579, _580), vec3(_578, _579, _580)));
        float _597 = ((_584 * _578) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_533 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _598 = ((_584 * _579) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_537 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _599 = ((_584 * _580) / cbModelParam._m0[34u].z) + ((((((_541 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _609 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        float _636 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_602.x + (-0.5));
        float _638 = _636 * (_602.y + (-0.5));
        float _639 = _636 * (_602.z + (-0.5));
        float _646 = exp2((_609.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_609.x + (-0.5));
        float _648 = _646 * (_609.y + (-0.5));
        float _649 = _646 * (_609.z + (-0.5));
        float _656 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_616.x + (-0.5));
        float _658 = _656 * (_616.y + (-0.5));
        float _659 = _656 * (_616.z + (-0.5));
        float _666 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_623.x + (-0.5));
        float _668 = _666 * (_623.y + (-0.5));
        float _669 = _666 * (_623.z + (-0.5));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = _637 * 0.5;
        float _674 = _647 * 0.5;
        float _675 = _657 * 0.5;
        float _676 = dot(vec3(_673, _674, _675), vec3(_673, _674, _675));
        float _681 = (_676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_676);
        float _690 = (dot(vec3(_281, _282, _283), vec3(_681 * _673, _681 * _674, _681 * _675)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _700 = sqrt(((_674 * _674) + (_673 * _673)) + (_675 * _675)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _702 = _701 * 2.0;
        float _706 = (1.0 - _701) / (_701 + 1.0);
        float _3261 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _716 = ((((1.0 - _707) * (_702 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_702 + 1.0))) + _707) * _670;
        float _717 = _638 * 0.5;
        float _718 = _648 * 0.5;
        float _719 = _658 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _733 = (dot(vec3(_281, _282, _283), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _742 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3294 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_744 + 1.0))) + _749) * _671;
        float _759 = _639 * 0.5;
        float _760 = _649 * 0.5;
        float _761 = _659 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_281, _282, _283), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3327 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_786 + 1.0))) + _791) * _672;
        _808 = _639;
        _810 = _638;
        _811 = _637;
        _812 = _649;
        _813 = _648;
        _814 = _647;
        _815 = _659;
        _816 = _658;
        _817 = _657;
        _818 = _672;
        _819 = _671;
        _820 = _670;
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)));
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
    }
    else
    {
        _808 = _809;
        _810 = _809;
        _811 = _809;
        _812 = _809;
        _813 = _809;
        _814 = _809;
        _815 = _809;
        _816 = _809;
        _817 = _809;
        _818 = _809;
        _819 = _809;
        _820 = _809;
        _821 = 0.0;
        _822 = 0.0;
        _823 = 0.0;
    }
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _849 = fma(_506, cbModelParam._m0[30u].z, fma(_502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _498));
        float _853 = fma(_506, cbModelParam._m0[31u].z, fma(_502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _498));
        float _857 = fma(_506, cbModelParam._m0[32u].z, fma(_502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _498));
        float _880 = _498 + _281;
        float _881 = _502 + _282;
        float _882 = _506 + _283;
        float _892 = fma(_882, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880)) - _849;
        float _893 = fma(_882, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880)) - _853;
        float _894 = fma(_882, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880)) - _857;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_849 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_853 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[35u].z) + ((((((_857 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _948 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_915.x + (-0.5));
        float _950 = _948 * (_915.y + (-0.5));
        float _951 = _948 * (_915.z + (-0.5));
        float _958 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_922.x + (-0.5));
        float _960 = _958 * (_922.y + (-0.5));
        float _961 = _958 * (_922.z + (-0.5));
        float _968 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_929.x + (-0.5));
        float _970 = _968 * (_929.y + (-0.5));
        float _971 = _968 * (_929.z + (-0.5));
        float _978 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_936.x + (-0.5));
        float _980 = _978 * (_936.y + (-0.5));
        float _981 = _978 * (_936.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_281, _282, _283), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3390 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_1012 + 1.0))) + _1017) * _982;
        float _1027 = _950 * 0.5;
        float _1028 = _960 * 0.5;
        float _1029 = _970 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_281, _282, _283), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3423 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_1054 + 1.0))) + _1059) * _983;
        float _1069 = _951 * 0.5;
        float _1070 = _961 * 0.5;
        float _1071 = _971 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_281, _282, _283), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3456 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_1096 + 1.0))) + _1101) * _984;
        _1118 = _951;
        _1119 = _950;
        _1120 = _949;
        _1121 = _961;
        _1122 = _960;
        _1123 = _959;
        _1124 = _971;
        _1125 = _970;
        _1126 = _969;
        _1127 = _984;
        _1128 = _983;
        _1129 = _982;
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _809;
        _1119 = _809;
        _1120 = _809;
        _1121 = _809;
        _1122 = _809;
        _1123 = _809;
        _1124 = _809;
        _1125 = _809;
        _1126 = _809;
        _1127 = _809;
        _1128 = _809;
        _1129 = _809;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _822)) + _822;
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1165 = fma(_1144, cbSceneParam._m0[89u].z, fma(_1143, cbSceneParam._m0[89u].y, _1142 * cbSceneParam._m0[89u].x));
    float _1168 = fma(_1144, cbSceneParam._m0[90u].z, fma(_1143, cbSceneParam._m0[90u].y, _1142 * cbSceneParam._m0[90u].x));
    float _1171 = fma(_1144, cbSceneParam._m0[91u].z, fma(_1143, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1142));
    float _1186 = _445 * 0.5;
    float _1187 = _446 * 0.5;
    float _1188 = _447 * 0.5;
    float _1189 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1192 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1195 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1229;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1202 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_808, _812, _815, _818));
        float _1206 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_810, _813, _816, _819));
        float _1210 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_811, _814, _817, _820));
        float _1217 = dot(vec4(cbModelParam._m0[39u]), vec4(_1186, _1187, _1188, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1217) ? 0.0 : (isnan(0.0) ? _1217 : max(0.0, _1217))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1240;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1231 = dot(vec4(cbModelParam._m0[40u]), vec4(_1186, _1187, _1188, 1.0));
        _1240 = dot(vec3(isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1231) ? 0.0 : (isnan(0.0) ? _1231 : max(0.0, _1231))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1240 = 1.0;
    }
    float _1244 = (_1240 * cbModelParam._m0[1u].x) + (_1229 * (1.0 - cbModelParam._m0[1u].x));
    float _1254 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _284);
    float _1255 = isnan(_1254) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1254 : min(cbModelParam._m0[25u].z, _1254));
    float _1337;
    float _1339;
    float _1341;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1304 = fma(_506, cbModelParam._m0[13u].z, fma(_502, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498)) + cbModelParam._m0[13u].w;
        float _1308 = fma(_506, cbModelParam._m0[14u].z, fma(_502, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498)) + cbModelParam._m0[14u].w;
        float _1312 = fma(_506, cbModelParam._m0[15u].z, fma(_502, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498)) + cbModelParam._m0[15u].w;
        float _1315 = fma(_447, cbModelParam._m0[13u].z, fma(_446, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _445));
        float _1318 = fma(_447, cbModelParam._m0[14u].z, fma(_446, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _445));
        float _1321 = fma(_447, cbModelParam._m0[15u].z, fma(_446, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _445));
        float _1349;
        if (_1315 > 0.0)
        {
            _1349 = abs((1.0 - _1304) / _1315);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1304 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1349 = frontier_phi_16_14_ladder;
        }
        float _1555;
        if (_1318 > 0.0)
        {
            _1555 = abs((1.0 - _1308) / _1318);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1308 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1555 = frontier_phi_25_21_ladder;
        }
        float _1798;
        if (_1321 > 0.0)
        {
            _1798 = abs((1.0 - _1312) / _1321);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1312 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1798 = frontier_phi_37_32_ladder;
        }
        float _1800 = isnan(_1555) ? _1349 : (isnan(_1349) ? _1555 : min(_1349, _1555));
        float _1801 = isnan(_1798) ? _1800 : (isnan(_1800) ? _1798 : min(_1800, _1798));
        float _1805 = (_1801 * _1315) + _1304;
        float _1806 = (_1801 * _1318) + _1308;
        float _1807 = (_1801 * _1321) + _1312;
        float _1808 = _1801 * 9.9999997473787516355514526367188e-05;
        float _1810 = (-1.0) - _1808;
        float _1812 = _1808 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1807 > _1812) || ((_1807 < _1810) || ((_1806 > _1812) || ((_1806 < _1810) || ((_1805 < _1810) || (_1805 > _1812))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1931 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1807, cbModelParam._m0[9u].z, fma(_1806, cbModelParam._m0[9u].y, _1805 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1807, cbModelParam._m0[10u].z, fma(_1806, cbModelParam._m0[10u].y, _1805 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1807, cbModelParam._m0[11u].z, fma(_1806, cbModelParam._m0[11u].y, _1805 * cbModelParam._m0[11u].x))), _1255);
            frontier_phi_15_37_ladder = _1931.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1931.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1931.x * cbModelParam._m0[1u].y;
        }
        _1337 = frontier_phi_15_37_ladder_2;
        _1339 = frontier_phi_15_37_ladder_1;
        _1341 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_445, _446, _447), _1255);
        _1337 = _1325.x * cbModelParam._m0[1u].y;
        _1339 = _1325.y * cbModelParam._m0[1u].y;
        _1341 = _1325.z * cbModelParam._m0[1u].y;
    }
    float _1345 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _284);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1345 : min(cbModelParam._m0[25u].w, _1345));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1403 = fma(_506, cbModelParam._m0[21u].z, fma(_502, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498)) + cbModelParam._m0[21u].w;
        float _1407 = fma(_506, cbModelParam._m0[22u].z, fma(_502, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498)) + cbModelParam._m0[22u].w;
        float _1411 = fma(_506, cbModelParam._m0[23u].z, fma(_502, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498)) + cbModelParam._m0[23u].w;
        float _1414 = fma(_447, cbModelParam._m0[21u].z, fma(_446, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _445));
        float _1417 = fma(_447, cbModelParam._m0[22u].z, fma(_446, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _445));
        float _1420 = fma(_447, cbModelParam._m0[23u].z, fma(_446, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _445));
        float _1560;
        if (_1414 > 0.0)
        {
            _1560 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1560 = frontier_phi_27_23_ladder;
        }
        float _1825;
        if (_1417 > 0.0)
        {
            _1825 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1825 = frontier_phi_39_34_ladder;
        }
        float _2030;
        if (_1420 > 0.0)
        {
            _2030 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2030 = frontier_phi_48_45_ladder;
        }
        float _2032 = isnan(_1825) ? _1560 : (isnan(_1560) ? _1825 : min(_1560, _1825));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1414) + _1403;
        float _2038 = (_2033 * _1417) + _1407;
        float _2039 = (_2033 * _1420) + _1411;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2040;
        float _2043 = _2040 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2039 > _2043) || ((_2039 < _2041) || ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 < _2041) || (_2037 > _2043))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2039, cbModelParam._m0[17u].z, fma(_2038, cbModelParam._m0[17u].y, _2037 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2039, cbModelParam._m0[18u].z, fma(_2038, cbModelParam._m0[18u].y, _2037 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2039, cbModelParam._m0[19u].z, fma(_2038, cbModelParam._m0[19u].y, _2037 * cbModelParam._m0[19u].x))), _1346);
            frontier_phi_24_48_ladder = _2237.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2237.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2237.x * cbModelParam._m0[1u].z;
        }
        _1439 = frontier_phi_24_48_ladder_2;
        _1441 = frontier_phi_24_48_ladder_1;
        _1443 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_445, _446, _447), _1346);
        _1439 = _1423.x * cbModelParam._m0[1u].z;
        _1441 = _1423.y * cbModelParam._m0[1u].z;
        _1443 = _1423.z * cbModelParam._m0[1u].z;
    }
    float _1455 = ((((1.0 - _466) * ((_453 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_466 * _453)) * _437;
    float _1456 = _1455 * ((cbModelParam._m0[1u].w * (_1439 - _1337)) + _1337);
    float _1457 = _1455 * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1458 = _1455 * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1461 = fma(_1458, cbSceneParam._m0[89u].z, fma(_1457, cbSceneParam._m0[89u].y, _1456 * cbSceneParam._m0[89u].x));
    float _1464 = fma(_1458, cbSceneParam._m0[90u].z, fma(_1457, cbSceneParam._m0[90u].y, _1456 * cbSceneParam._m0[90u].x));
    float _1467 = fma(_1458, cbSceneParam._m0[91u].z, fma(_1457, cbSceneParam._m0[91u].y, _1456 * cbSceneParam._m0[91u].x));
    uvec4 _1477 = floatBitsToUint(cbInstanceData._m0[_412 + 5u]);
    uint _1479 = _1477.x * 14u;
    uint _1480 = _1479 + 13u;
    float _1487 = _437 + (-1.0);
    float _1492 = (cbLight._m0[_1480].x * _1487) + 1.0;
    float _1493 = (cbLight._m0[_1480].y * _1487) + 1.0;
    float _1494 = (cbLight._m0[_1480].z * _1487) + 1.0;
    float _1495 = (cbLight._m0[_1480].w * _1487) + 1.0;
    uint _1496 = _1479 + 5u;
    float _1502 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
    uint _1506 = _1479 + 4u;
    float _1513 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
    uint _1517 = _1479 | 1u;
    float _1528 = dot(vec3(cbLight._m0[_1479].xyz), vec3(_281, _282, _283));
    float _1531 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_281, _282, _283));
    float _3592 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _3603 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
    float _1536 = (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.3183098733425140380859375;
    float _1538 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.3183098733425140380859375;
    float _1545 = ((cbLight._m0[_1496].x * _1502) * _1538) + ((cbLight._m0[_1506].x * _1513) * _1536);
    float _1546 = ((_1502 * cbLight._m0[_1496].y) * _1538) + ((_1513 * cbLight._m0[_1506].y) * _1536);
    float _1547 = ((_1502 * cbLight._m0[_1496].z) * _1538) + ((_1513 * cbLight._m0[_1506].z) * _1536);
    uvec4 _1552 = floatBitsToUint(cbLight._m0[_1479 + 12u]);
    bool _1554 = _1552.x == 0u;
    float _1565;
    float _1567;
    float _1569;
    if (_1554)
    {
        _1565 = _1545;
        _1567 = _1546;
        _1569 = _1547;
    }
    else
    {
        uint _1573 = _1479 + 6u;
        float _1589 = (dot(vec3(cbLight._m0[_1479 + 2u].xyz), vec3(_281, _282, _283)) * 0.5) + 0.5;
        float _1590 = _1589 * _1589;
        float _3614 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1592 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
        _1565 = (((cbLight._m0[_1573].x * 0.3183098733425140380859375) * _1591) * _1592) + _1545;
        _1567 = (((cbLight._m0[_1573].y * 0.3183098733425140380859375) * _1591) * _1592) + _1546;
        _1569 = (((cbLight._m0[_1573].z * 0.3183098733425140380859375) * _1591) * _1592) + _1547;
    }
    bool _1572 = _1552.y == 0u;
    float _1610;
    float _1612;
    float _1614;
    if (_1572)
    {
        _1610 = _1565;
        _1612 = _1567;
        _1614 = _1569;
    }
    else
    {
        uint _1769 = _1479 + 7u;
        float _1785 = (dot(vec3(cbLight._m0[_1479 + 3u].xyz), vec3(_281, _282, _283)) * 0.5) + 0.5;
        float _1786 = _1785 * _1785;
        float _3630 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1788 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
        _1610 = (((cbLight._m0[_1769].x * 0.3183098733425140380859375) * _1787) * _1788) + _1565;
        _1612 = (((cbLight._m0[_1769].y * 0.3183098733425140380859375) * _1787) * _1788) + _1567;
        _1614 = (((cbLight._m0[_1769].z * 0.3183098733425140380859375) * _1787) * _1788) + _1569;
    }
    uint _1617 = _1479 + 8u;
    float _1630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1479].w)) * _284) * 0.949999988079071044921875);
    float _1631 = _1630 * _1630;
    float _1632 = cbLight._m0[_1479].x + _363;
    float _1633 = cbLight._m0[_1479].y + _364;
    float _1634 = cbLight._m0[_1479].z + _365;
    float _1638 = inversesqrt(dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634)));
    float _1639 = _1638 * _1632;
    float _1640 = _1638 * _1633;
    float _1641 = _1638 * _1634;
    float _1642 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1479].xyz));
    float _3646 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1645 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _1646 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _1647 = dot(vec3(_281, _282, _283), vec3(_1639, _1640, _1641));
    float _3668 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1650 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _1651 = dot(vec3(cbLight._m0[_1479].xyz), vec3(_1639, _1640, _1641));
    float _3679 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1655 = _1631 * _1631;
    float _1659 = ((_1650 * _1650) * (_1655 + (-1.0))) + 1.0;
    float _1670 = (exp2(log2(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1671 = 1.0 - _1631;
    float _1682 = (0.5 / (((_1646 * ((_1645 * _1671) + _1631)) + 9.9999999392252902907785028219223e-09) + (((_1646 * _1671) + _1631) * _1645))) * _1645;
    float _3690 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1684 = (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1655 / ((_1659 * _1659) * 3.141590118408203125));
    uint _1695 = _1479 + 9u;
    float _1706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1517].w)) * _284) * 0.949999988079071044921875);
    float _1707 = _1706 * _1706;
    float _1708 = cbLight._m0[_1517].x + _363;
    float _1709 = cbLight._m0[_1517].y + _364;
    float _1710 = cbLight._m0[_1517].z + _365;
    float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
    float _1715 = _1714 * _1708;
    float _1716 = _1714 * _1709;
    float _1717 = _1714 * _1710;
    float _1718 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1517].xyz));
    float _3701 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _1722 = dot(vec3(_281, _282, _283), vec3(_1715, _1716, _1717));
    float _3712 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _1726 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_1715, _1716, _1717));
    float _3723 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1730 = _1707 * _1707;
    float _1734 = ((_1725 * _1725) * (_1730 + (-1.0))) + 1.0;
    float _1743 = (exp2(log2(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1744 = 1.0 - _1707;
    float _1754 = (0.5 / (((_1646 * ((_1721 * _1744) + _1707)) + 9.9999999392252902907785028219223e-09) + (((_1646 * _1744) + _1707) * _1721))) * _1721;
    float _3734 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1756 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1730 / ((_1734 * _1734) * 3.141590118408203125));
    float _1766 = (((_1743 * cbLight._m0[_1695].x) * _1756) * _1502) + (((_1670 * cbLight._m0[_1617].x) * _1684) * _1513);
    float _1767 = (((_1743 * cbLight._m0[_1695].y) * _1756) * _1502) + (((_1670 * cbLight._m0[_1617].y) * _1684) * _1513);
    float _1768 = (((_1743 * cbLight._m0[_1695].z) * _1756) * _1502) + (((_1670 * cbLight._m0[_1617].z) * _1684) * _1513);
    float _1830;
    float _1832;
    float _1834;
    if (_1554)
    {
        _1830 = _1766;
        _1832 = _1767;
        _1834 = _1768;
    }
    else
    {
        uint _1836 = _1479 + 2u;
        uint _1840 = _1479 + 10u;
        float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _284) * 0.949999988079071044921875);
        float _1855 = _1854 * _1854;
        float _1856 = cbLight._m0[_1836].x + _363;
        float _1857 = cbLight._m0[_1836].y + _364;
        float _1858 = cbLight._m0[_1836].z + _365;
        float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
        float _1863 = _1862 * _1856;
        float _1864 = _1862 * _1857;
        float _1865 = _1862 * _1858;
        float _1866 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1836].xyz));
        float _3745 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1869 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1870 = dot(vec3(_281, _282, _283), vec3(_1863, _1864, _1865));
        float _3756 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1873 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1874 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1863, _1864, _1865));
        float _3767 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1878 = _1855 * _1855;
        float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
        float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1892 = 1.0 - _1855;
        float _1902 = (0.5 / (((_1646 * ((_1869 * _1892) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1646 * _1892) + _1855) * _1869))) * _1869;
        float _3778 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1904 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
        float _1905 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
        _1830 = (((_1891 * cbLight._m0[_1840].x) * _1904) * _1905) + _1766;
        _1832 = (((_1891 * cbLight._m0[_1840].y) * _1904) * _1905) + _1767;
        _1834 = (((_1891 * cbLight._m0[_1840].z) * _1904) * _1905) + _1768;
    }
    float _1940;
    float _1942;
    float _1944;
    if (_1572)
    {
        _1940 = _1830;
        _1942 = _1832;
        _1944 = _1834;
    }
    else
    {
        uint _1951 = _1479 + 3u;
        uint _1955 = _1479 + 11u;
        float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _284) * 0.949999988079071044921875);
        float _1970 = _1969 * _1969;
        float _1971 = cbLight._m0[_1951].x + _363;
        float _1972 = cbLight._m0[_1951].y + _364;
        float _1973 = cbLight._m0[_1951].z + _365;
        float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
        float _1978 = _1977 * _1971;
        float _1979 = _1977 * _1972;
        float _1980 = _1977 * _1973;
        float _1981 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1951].xyz));
        float _3794 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1985 = dot(vec3(_281, _282, _283), vec3(_1978, _1979, _1980));
        float _3805 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1989 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_1978, _1979, _1980));
        float _3816 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1993 = _1970 * _1970;
        float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
        float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2007 = 1.0 - _1970;
        float _2017 = (0.5 / (((_1646 * ((_1984 * _2007) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1646 * _2007) + _1970) * _1984))) * _1984;
        float _3827 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2019 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
        float _2020 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
        _1940 = (((_2006 * cbLight._m0[_1955].x) * _2019) * _2020) + _1830;
        _1942 = (((_2006 * cbLight._m0[_1955].y) * _2019) * _2020) + _1832;
        _1944 = (((_2006 * cbLight._m0[_1955].z) * _2019) * _2020) + _1834;
    }
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    if (_1477.y == 0u)
    {
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2095;
        float _2097 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2095;
        float _2098 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2095;
        uvec4 _2110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2111 = _2110.x;
        uint _2122 = uint((float(_2110.y) * floor(float(uint(cbSceneParam._m0[85u].y * _372) / _2111))) + floor(float(uint(cbSceneParam._m0[85u].x * _371) / _2111)));
        float _2132 = (log2(_2098 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2133 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        uint _2136 = uint(isnan(14.0) ? _2133 : (isnan(_2133) ? 14.0 : min(_2133, 14.0)));
        uvec4 _2141 = texelFetch(g_lightClusterGridBuffer, int(((_2136 << 2u) + (_2122 << 6u)) >> 2u));
        uint _2142 = _2141.x;
        uint _2143 = _2110.z;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        if (((((1u << ((_2143 >> 4u) & 15u)) + 4294967295u) & _2142) == 0u) || ((_2143 & 240u) == 0u))
        {
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
            _2248 = 0.0;
            _2250 = 0.0;
            _2252 = 0.0;
        }
        else
        {
            float _2243;
            float _2245;
            float _2247;
            float _2249;
            float _2251;
            float _2253;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            uint _2392 = 0u;
            uint _2401;
            bool _2402;
            for (;;)
            {
                _2401 = texelFetch(g_lightClassification, int((((_2136 << 5u) + (_2122 << 9u)) + (_2392 << 2u)) >> 2u)).x;
                _2402 = _2401 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2402)
                {
                    frontier_phi_63_pred = _2391;
                    frontier_phi_63_pred_1 = _2390;
                    frontier_phi_63_pred_2 = _2389;
                    frontier_phi_63_pred_3 = _2388;
                    frontier_phi_63_pred_4 = _2387;
                    frontier_phi_63_pred_5 = _2386;
                }
                else
                {
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    uint _2516;
                    _2510 = _2386;
                    _2511 = _2387;
                    _2512 = _2388;
                    _2513 = _2389;
                    _2514 = _2390;
                    _2515 = _2391;
                    _2516 = _2401;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    float _2447;
                    for (;;)
                    {
                        uint _2520 = uint(findLSB(_2516)) + (_2392 << 5u);
                        uint _2517 = (_2516 + 4294967295u) & _2516;
                        uint _2522 = _2520 * 48u;
                        vec4 _2536 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2522)).x, texelFetch(g_PointLightRenderingBuffer, int(_2522 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2522 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2522 + 3u)).x));
                        uint _2542 = (_2520 * 48u) + 4u;
                        vec4 _2555 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2542)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 3u)).x));
                        uint _2561 = (_2520 * 48u) + 8u;
                        vec3 _2572 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2561)).x, texelFetch(g_PointLightRenderingBuffer, int(_2561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2561 + 2u)).x));
                        float _2576 = _2536.x - _2096;
                        float _2577 = _2536.y - _2097;
                        float _2578 = _2536.z - _2098;
                        float _2579 = dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578));
                        float _2582 = inversesqrt(_2579);
                        float _2583 = _2582 * _2576;
                        float _2584 = _2582 * _2577;
                        float _2585 = _2582 * _2578;
                        float _2586 = dot(vec3(_393, _396, _399), vec3(_2583, _2584, _2585));
                        float _2591 = 1.0 - (_2579 * _2536.w);
                        float _3853 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2592 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                        float _2593 = sqrt(_2579) * _2555.w;
                        float _2596 = 1.39999997615814208984375 / (_2593 + 1.39999997615814208984375);
                        float _2597 = _2596 * _2596;
                        float _2600 = ((1.0 - _2597) * _2586) + _2597;
                        float _2603 = _2593 * _2593;
                        float _2607 = ((isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))) * _2592) / ((_2603 * 0.699999988079071044921875) + 1.0);
                        float _2611 = (-0.0) - _2096;
                        float _2612 = (-0.0) - _2097;
                        float _2613 = (-0.0) - _2098;
                        float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
                        float _2618 = _2617 * _2611;
                        float _2619 = _2617 * _2612;
                        float _2620 = _2617 * _2613;
                        float _2628 = exp2(log2(1.0 / ((_2603 * 3.5) + 5.0)) * 0.25);
                        float _2629 = 1.0 - _453;
                        float _2636 = sqrt(1.0 - ((1.0 - (_2629 * _2629)) * (1.0 - (_2628 * _2628))));
                        float _2637 = _2636 * _2636;
                        float _2638 = _2637 * _2637;
                        float _2639 = _2618 + _2583;
                        float _2640 = _2619 + _2584;
                        float _2641 = _2620 + _2585;
                        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
                        float _2649 = dot(vec3(_393, _396, _399), vec3(_2618, _2619, _2620));
                        float _3869 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
                        float _2652 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                        float _2653 = dot(vec3(_393, _396, _399), vec3(_2645 * _2639, _2645 * _2640, _2645 * _2641));
                        float _3880 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2656 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
                        float _2660 = ((_2656 * _2656) * (_2638 + (-1.0))) + 1.0;
                        float _2661 = _2596 * _2637;
                        float _2662 = _2661 * _2661;
                        float _2665 = ((1.0 - _2662) * _2586) + _2662;
                        float _3891 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2666 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                        float _2667 = 1.0 - _2637;
                        float _2677 = (0.5 / (((_2666 * ((_2652 * _2667) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2666 * _2667) + _2637) * _2652))) * _2666;
                        float _3902 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2688 = (((_2638 * 3.1415927410125732421875) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) / ((_2660 * _2660) * ((_2603 * 2.1991131305694580078125) + 3.141590118408203125))) * _2592;
                        _2445 = (_2607 * _2555.x) + _2513;
                        _2446 = (_2607 * _2555.y) + _2514;
                        _2447 = (_2607 * _2555.z) + _2515;
                        _2442 = (_2688 * _2572.x) + _2510;
                        _2443 = (_2688 * _2572.y) + _2511;
                        _2444 = (_2688 * _2572.z) + _2512;
                        if (_2517 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2510 = _2442;
                            _2511 = _2443;
                            _2512 = _2444;
                            _2513 = _2445;
                            _2514 = _2446;
                            _2515 = _2447;
                            _2516 = _2517;
                        }
                    }
                    frontier_phi_63_pred = _2447;
                    frontier_phi_63_pred_1 = _2446;
                    frontier_phi_63_pred_2 = _2445;
                    frontier_phi_63_pred_3 = _2444;
                    frontier_phi_63_pred_4 = _2443;
                    frontier_phi_63_pred_5 = _2442;
                }
                _2253 = frontier_phi_63_pred;
                _2251 = frontier_phi_63_pred_1;
                _2249 = frontier_phi_63_pred_2;
                _2247 = frontier_phi_63_pred_3;
                _2245 = frontier_phi_63_pred_4;
                _2243 = frontier_phi_63_pred_5;
                uint _2393 = _2392 + 1u;
                if (_2393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2386 = _2243;
                    _2387 = _2245;
                    _2388 = _2247;
                    _2389 = _2249;
                    _2390 = _2251;
                    _2391 = _2253;
                    _2392 = _2393;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
            _2248 = _2249;
            _2250 = _2251;
            _2252 = _2253;
        }
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.z;
        uint _2259 = (_2257 >> 8u) & 15u;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        if (((4294967295u << _2259) & _2142) == 0u)
        {
            _2354 = _2242;
            _2356 = _2244;
            _2358 = _2246;
            _2360 = _2248;
            _2362 = _2250;
            _2364 = _2252;
        }
        else
        {
            float _2379 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
            float _2380 = _2379 * _2096;
            float _2381 = _2379 * _2097;
            float _2382 = _2379 * _2098;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2259 < ((_2257 >> 12u) & 15u))
            {
                float _2355;
                float _2357;
                float _2359;
                float _2361;
                float _2363;
                float _2365;
                float _2493 = _2242;
                float _2494 = _2244;
                float _2495 = _2246;
                float _2496 = _2248;
                float _2497 = _2250;
                float _2498 = _2252;
                uint _2499 = _2259;
                uint _2508;
                bool _2509;
                for (;;)
                {
                    _2508 = texelFetch(g_lightClassification, int((((_2136 << 5u) + (_2122 << 9u)) + (_2499 << 2u)) >> 2u)).x;
                    _2509 = _2508 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2509)
                    {
                        frontier_phi_69_pred = _2498;
                        frontier_phi_69_pred_1 = _2497;
                        frontier_phi_69_pred_2 = _2496;
                        frontier_phi_69_pred_3 = _2495;
                        frontier_phi_69_pred_4 = _2494;
                        frontier_phi_69_pred_5 = _2493;
                    }
                    else
                    {
                        float _2693;
                        float _2694;
                        float _2695;
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2706 = _2493;
                        float _2707 = _2494;
                        float _2708 = _2495;
                        float _2709 = _2496;
                        float _2710 = _2497;
                        float _2711 = _2498;
                        uint _2712 = _2508;
                        uint _2713;
                        vec4 _2738;
                        float _2739;
                        vec4 _2754;
                        vec3 _2766;
                        vec4 _2782;
                        vec4 _2798;
                        float _2845;
                        bool _2846;
                        for (;;)
                        {
                            uint _2723 = ((_2499 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2712));
                            _2713 = (_2712 + 4294967295u) & _2712;
                            uint _2725 = _2723 * 40u;
                            _2738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 3u)).x));
                            _2739 = _2738.w;
                            uint _2741 = (_2723 * 40u) + 4u;
                            _2754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 3u)).x));
                            uint _2756 = (_2723 * 40u) + 8u;
                            _2766 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x));
                            uint _2769 = (_2723 * 40u) + 16u;
                            _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            uint _2785 = (_2723 * 40u) + 20u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            uint _2801 = (_2723 * 40u) + 24u;
                            vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2820 = (_2723 * 40u) + 28u;
                            vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            _2845 = fma(_2098, _2833.z, fma(_2097, _2833.y, _2833.x * _2096)) + _2833.w;
                            _2846 = !((fma(_2098, _2814.z, fma(_2097, _2814.y, _2814.x * _2096)) + _2814.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2846)
                            {
                                float _2873 = _2738.x - _2096;
                                float _2874 = _2738.y - _2097;
                                float _2875 = _2738.z - _2098;
                                float _2876 = dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875));
                                float _2879 = inversesqrt(_2876);
                                float _2880 = _2879 * _2873;
                                float _2881 = _2879 * _2874;
                                float _2882 = _2879 * _2875;
                                float _2886 = 1.0 - (_2876 / (_2739 * _2739));
                                float _3913 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2887 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
                                float _2891 = sqrt(_2876) * _2754.w;
                                float _2893 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                                float _2894 = _2893 * _2893;
                                float _2897 = ((1.0 - _2894) * dot(vec3(_2880, _2881, _2882), vec3(_393, _396, _399))) + _2894;
                                float _2900 = _2891 * _2891;
                                float _2904 = (fma(_2098, _2782.z, fma(_2097, _2782.y, _2782.x * _2096)) + _2782.w) / _2845;
                                float _2905 = (fma(_2098, _2798.z, fma(_2097, _2798.y, _2798.x * _2096)) + _2798.w) / _2845;
                                float _2909 = 1.0 - dot(vec2(_2904, _2905), vec2(_2904, _2905));
                                float _3929 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2910 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                                float _2911 = _2910 * (((isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))) * _2887) / ((_2900 * 0.699999988079071044921875) + 1.0));
                                float _2923 = exp2(log2(1.0 / ((_2900 * 3.5) + 5.0)) * 0.25);
                                float _2924 = 1.0 - _453;
                                float _2931 = sqrt(1.0 - ((1.0 - (_2924 * _2924)) * (1.0 - (_2923 * _2923))));
                                float _2932 = _2931 * _2931;
                                float _2933 = _2932 * _2932;
                                float _2934 = _2880 - _2380;
                                float _2935 = _2881 - _2381;
                                float _2936 = _2882 - _2382;
                                float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                                float _2944 = dot(vec3(_393, _396, _399), vec3((-0.0) - _2380, (-0.0) - _2381, (-0.0) - _2382));
                                float _3940 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2947 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                                float _2948 = dot(vec3(_393, _396, _399), vec3(_2940 * _2934, _2940 * _2935, _2940 * _2936));
                                float _3951 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2951 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                                float _2955 = ((_2951 * _2951) * (_2933 + (-1.0))) + 1.0;
                                float _2956 = _2893 * _2932;
                                float _2957 = _2956 * _2956;
                                float _2963 = ((1.0 - _2957) * dot(vec3(_393, _396, _399), vec3(_2880, _2881, _2882))) + _2957;
                                float _3962 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2964 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                                float _2965 = 1.0 - _2932;
                                float _2975 = (0.5 / (((_2964 * ((_2947 * _2965) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2964 * _2965) + _2932) * _2947))) * _2964;
                                float _3973 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2985 = (_2910 * _2887) * (((_2933 * 3.1415927410125732421875) * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) / ((_2955 * _2955) * ((_2900 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2911 * _2754.z;
                                frontier_phi_75_pred_1 = _2911 * _2754.y;
                                frontier_phi_75_pred_2 = _2911 * _2754.x;
                                frontier_phi_75_pred_3 = _2985 * _2766.z;
                                frontier_phi_75_pred_4 = _2985 * _2766.y;
                                frontier_phi_75_pred_5 = _2985 * _2766.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2994 = frontier_phi_75_pred;
                            _2993 = frontier_phi_75_pred_1;
                            _2992 = frontier_phi_75_pred_2;
                            _2991 = frontier_phi_75_pred_3;
                            _2990 = frontier_phi_75_pred_4;
                            _2989 = frontier_phi_75_pred_5;
                            _2696 = _2992 + _2709;
                            _2697 = _2993 + _2710;
                            _2698 = _2994 + _2711;
                            _2693 = _2989 + _2706;
                            _2694 = _2990 + _2707;
                            _2695 = _2991 + _2708;
                            if (_2713 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2696;
                                _2710 = _2697;
                                _2711 = _2698;
                                _2712 = _2713;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2698;
                        frontier_phi_69_pred_1 = _2697;
                        frontier_phi_69_pred_2 = _2696;
                        frontier_phi_69_pred_3 = _2695;
                        frontier_phi_69_pred_4 = _2694;
                        frontier_phi_69_pred_5 = _2693;
                    }
                    _2365 = frontier_phi_69_pred;
                    _2363 = frontier_phi_69_pred_1;
                    _2361 = frontier_phi_69_pred_2;
                    _2359 = frontier_phi_69_pred_3;
                    _2357 = frontier_phi_69_pred_4;
                    _2355 = frontier_phi_69_pred_5;
                    uint _2500 = _2499 + 1u;
                    if (_2500 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2493 = _2355;
                        _2494 = _2357;
                        _2495 = _2359;
                        _2496 = _2361;
                        _2497 = _2363;
                        _2498 = _2365;
                        _2499 = _2500;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2365;
                frontier_phi_57_58_ladder_1 = _2363;
                frontier_phi_57_58_ladder_2 = _2361;
                frontier_phi_57_58_ladder_3 = _2359;
                frontier_phi_57_58_ladder_4 = _2357;
                frontier_phi_57_58_ladder_5 = _2355;
            }
            else
            {
                frontier_phi_57_58_ladder = _2252;
                frontier_phi_57_58_ladder_1 = _2250;
                frontier_phi_57_58_ladder_2 = _2248;
                frontier_phi_57_58_ladder_3 = _2246;
                frontier_phi_57_58_ladder_4 = _2244;
                frontier_phi_57_58_ladder_5 = _2242;
            }
            _2354 = frontier_phi_57_58_ladder_5;
            _2356 = frontier_phi_57_58_ladder_4;
            _2358 = frontier_phi_57_58_ladder_3;
            _2360 = frontier_phi_57_58_ladder_2;
            _2362 = frontier_phi_57_58_ladder_1;
            _2364 = frontier_phi_57_58_ladder;
        }
        float _2369 = isnan(1.0) ? _437 : (isnan(_437) ? 1.0 : min(_437, 1.0));
        _2154 = (_2369 * _2360) + _1610;
        _2156 = (_2369 * _2362) + _1612;
        _2158 = (_2369 * _2364) + _1614;
        _2160 = ((_2354 * 0.039999999105930328369140625) * _2369) + _1940;
        _2162 = ((_2356 * 0.039999999105930328369140625) * _2369) + _1942;
        _2164 = ((_2358 * 0.039999999105930328369140625) * _2369) + _1944;
    }
    else
    {
        _2154 = _1610;
        _2156 = _1612;
        _2158 = _1614;
        _2160 = _1940;
        _2162 = _1942;
        _2164 = _1944;
    }
    float _3989 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _4000 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _4011 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    uint _2184 = _412 + 6u;
    float _2192 = _371 / cbSceneParam._m0[86u].x;
    float _2193 = _372 / cbSceneParam._m0[86u].y;
    vec4 _2207 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2192, _2193, (log2((isnan(cbSceneParam._m0[77u].w) ? _303 : (isnan(_303) ? cbSceneParam._m0[77u].w : min(_303, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2209 = _2207.x;
    float _2210 = _2207.y;
    float _2211 = _2207.z;
    float _2212 = _2207.w;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    if (_303 > cbSceneParam._m0[78u].w)
    {
        float _2267 = isnan(_303) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _303 : min(cbSceneParam._m0[80u].w, _303));
        float _2268 = _2267 / _303;
        float _2279 = _2268 * _356;
        float _2280 = _357 * _2268;
        float _2281 = (-0.0) - _2280;
        float _2282 = _2268 * _358;
        float _2284 = (cbSceneParam._m0[77u].w * _2281) / _2267;
        float _2285 = _2284 + cbSceneParam._m0[79u].w;
        float _2286 = cbSceneParam._m0[79u].w - _2280;
        float _2292 = sqrt(((_2279 * _2279) + (_2280 * _2280)) + (_2282 * _2282));
        float _2295 = (1.0 - (cbSceneParam._m0[77u].w / _2267)) * _2292;
        float _2300 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2302 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2455;
        if (abs((_2281 - _2284) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2455 = ((((_2285 > 0.0) ? exp2(_2300 * _2285) : (2.0 - exp2(_2302 * _2285))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2295;
        }
        else
        {
            float _2415 = 1.0 / cbSceneParam._m0[80u].x;
            float _2416 = isnan(_2286) ? _2285 : (isnan(_2285) ? _2286 : max(_2285, _2286));
            float _2417 = isnan(_2286) ? _2285 : (isnan(_2285) ? _2286 : min(_2285, _2286));
            float _2426 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : min(_2416, 0.0));
            float _2427 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : min(_2417, 0.0));
            _2455 = ((abs(_2292 / _2281) * cbSceneParam._m0[80u].y) * ((((_2426 - _2427) * 2.0) - ((exp2(_2300 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0)))) - exp2(_2300 * (isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0))))) * _2415)) - ((exp2(_2302 * _2426) - exp2(_2302 * _2427)) * _2415))) + (_2295 * cbSceneParam._m0[80u].z);
        }
        vec4 _2457 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2192, _2193, 1.0), 0.0);
        float _2466 = exp2((_2455 * (-1.44269502162933349609375)) * (1.0 - _2457.w));
        float _2467 = log2(_2466);
        float _2483 = log2(_2212);
        _2304 = (exp2(_2483 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2467 * cbSceneParam._m0[78u].x)) * _2457.x) / cbSceneParam._m0[78u].x)) + _2209;
        _2306 = (exp2(_2483 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2467 * cbSceneParam._m0[78u].y)) * _2457.y) / cbSceneParam._m0[78u].y)) + _2210;
        _2308 = (exp2(_2483 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2467 * cbSceneParam._m0[78u].z)) * _2457.z) / cbSceneParam._m0[78u].z)) + _2211;
        _2310 = _2466 * _2212;
    }
    else
    {
        _2304 = _2209;
        _2306 = _2210;
        _2308 = _2211;
        _2310 = _2212;
    }
    float _2322 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2323 = _2322 == 3.0;
    float _2324 = log2(_2310);
    float _2331 = exp2(_2324 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2154 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _437))) + ((_2160 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2332 = exp2(_2324 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2156 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _437))) + ((_2162 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2333 = exp2(_2324 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_2158 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _437))) + ((_2164 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2342 = (_2322 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2342 * (_2323 ? _2331 : (_2331 + (cbSceneParam._m0[72u].w * _2304)));
    SV_Target.y = _2342 * (_2323 ? _2332 : (_2332 + (cbSceneParam._m0[72u].w * _2306)));
    SV_Target.z = _2342 * (_2323 ? _2333 : (_2333 + (cbSceneParam._m0[72u].w * _2308)));
    SV_Target.w = cbInstanceData._m0[_2184].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2184].w;
}


