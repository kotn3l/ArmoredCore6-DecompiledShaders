#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _946;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _243 = _240.x;
    float _244 = _240.y;
    float _245 = _240.z;
    vec4 _277 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _290 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3282 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _291 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _300 = ((_277.z - _245) * _291) + _245;
    float _304 = ((((_277.x - _243) * _291) + _243) * 2.0) + (-1.0);
    float _306 = ((((_277.y - _244) * _291) + _244) * 2.0) + (-1.0);
    float _307 = dot(vec2(_304, _306), vec2(_304, _306));
    float _3293 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _312 = sqrt(1.0 - (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))));
    vec4 _330 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _335 = _330.x * cbMtdParam._m0[9u].x;
    float _336 = _330.y * cbMtdParam._m0[9u].y;
    float _337 = _330.z * cbMtdParam._m0[9u].z;
    vec4 _356 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _370 = (((_356.x * cbMtdParam._m0[10u].x) - _335) * _291) + _335;
    float _371 = (((_356.y * cbMtdParam._m0[10u].y) - _336) * _291) + _336;
    float _372 = (((_356.z * cbMtdParam._m0[10u].z) - _337) * _291) + _337;
    float _388 = _291 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _391 = fma(_312, _224, fma(_306, _216 * TANGENT.x, (_202 * _194) * _304));
    float _394 = fma(_312, _225, fma(_306, _216 * TANGENT.y, (_202 * _195) * _304));
    float _397 = fma(_312, _226, fma(_306, _216 * TANGENT.z, (_202 * _196) * _304));
    float _401 = inversesqrt(dot(vec3(_391, _394, _397), vec3(_391, _394, _397)));
    float _402 = _401 * _391;
    float _403 = _401 * _394;
    float _404 = _401 * _397;
    float _3304 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _405 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3326 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3337 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3348 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _409 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _425 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _466 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _476 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _466);
    float _477 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _466);
    float _478 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _466);
    float _482 = inversesqrt(dot(vec3(_476, _477, _478), vec3(_476, _477, _478)));
    float _483 = _476 * _482;
    float _484 = _477 * _482;
    float _485 = _478 * _482;
    float _491 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _492 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _512 = fma(_404, cbSceneParam._m0[5u].z, fma(_403, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _402));
    float _515 = fma(_404, cbSceneParam._m0[6u].z, fma(_403, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _402));
    float _518 = fma(_404, cbSceneParam._m0[7u].z, fma(_403, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _402));
    uint _531 = uint(roundEven(NORMAL.w)) * 13u;
    uint _533 = (_531 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _539 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_533].x;
    float _540 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_533].y;
    float _541 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_533].z;
    float _3359 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _3370 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _545 = 1.0 - _409;
    float _546 = _542 * _545;
    float _547 = _543 * _545;
    float _548 = _544 * _545;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _409;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _409;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _409;
    float _556 = _553 + 0.039999999105930328369140625;
    float _558 = _554 + 0.039999999105930328369140625;
    float _559 = _555 + 0.039999999105930328369140625;
    vec4 _568 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _491, cbSceneParam._m0[86u].y * _492));
    float _571 = _568.x * TEXCOORD_9.w;
    float _572 = dot(vec3(_402, _403, _404), vec3(_483, _484, _485));
    float _575 = _572 * 2.0;
    float _579 = (_575 * _402) - _483;
    float _580 = (_575 * _403) - _484;
    float _581 = (_575 * _404) - _485;
    float _585 = abs(dot(vec3(_483, _484, _485), vec3(_402, _403, _404)));
    float _3392 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _587 = sqrt(_405);
    float _600 = exp2((_587 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_587 * 3.0));
    float _606 = (1.0 - _600) * ((_587 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _607 = _600 * _587;
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _945;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _670 = fma(_643, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _635));
        float _674 = fma(_643, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _635));
        float _678 = fma(_643, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _635));
        float _703 = _635 + _402;
        float _704 = _639 + _403;
        float _705 = _643 + _404;
        float _715 = fma(_705, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703)) - _670;
        float _716 = fma(_705, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703)) - _674;
        float _717 = fma(_705, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703)) - _678;
        float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
        float _734 = ((_721 * _715) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_670 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _735 = ((_721 * _716) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_674 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_721 * _717) / cbModelParam._m0[34u].z) + ((((((_678 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        float _773 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_739.x + (-0.5));
        float _775 = _773 * (_739.y + (-0.5));
        float _776 = _773 * (_739.z + (-0.5));
        float _783 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_746.x + (-0.5));
        float _785 = _783 * (_746.y + (-0.5));
        float _786 = _783 * (_746.z + (-0.5));
        float _793 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_753.x + (-0.5));
        float _795 = _793 * (_753.y + (-0.5));
        float _796 = _793 * (_753.z + (-0.5));
        float _803 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_760.x + (-0.5));
        float _805 = _803 * (_760.y + (-0.5));
        float _806 = _803 * (_760.z + (-0.5));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = _774 * 0.5;
        float _811 = _784 * 0.5;
        float _812 = _794 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _827 = (dot(vec3(_402, _403, _404), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _837 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3440 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_839 + 1.0))) + _844) * _807;
        float _854 = _775 * 0.5;
        float _855 = _785 * 0.5;
        float _856 = _795 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_402, _403, _404), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3473 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_881 + 1.0))) + _886) * _808;
        float _896 = _776 * 0.5;
        float _897 = _786 * 0.5;
        float _898 = _796 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_402, _403, _404), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3506 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_923 + 1.0))) + _928) * _809;
        _945 = _776;
        _947 = _775;
        _948 = _774;
        _949 = _786;
        _950 = _785;
        _951 = _784;
        _952 = _796;
        _953 = _795;
        _954 = _794;
        _955 = _809;
        _956 = _808;
        _957 = _807;
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
    }
    else
    {
        _945 = _946;
        _947 = _946;
        _948 = _946;
        _949 = _946;
        _950 = _946;
        _951 = _946;
        _952 = _946;
        _953 = _946;
        _954 = _946;
        _955 = _946;
        _956 = _946;
        _957 = _946;
        _958 = 0.0;
        _959 = 0.0;
        _960 = 0.0;
    }
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _986 = fma(_643, cbModelParam._m0[30u].z, fma(_639, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _635));
        float _990 = fma(_643, cbModelParam._m0[31u].z, fma(_639, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _635));
        float _994 = fma(_643, cbModelParam._m0[32u].z, fma(_639, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _635));
        float _1017 = _635 + _402;
        float _1018 = _639 + _403;
        float _1019 = _643 + _404;
        float _1029 = fma(_1019, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017)) - _986;
        float _1030 = fma(_1019, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017)) - _990;
        float _1031 = fma(_1019, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017)) - _994;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_986 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_990 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[35u].z) + ((((((_994 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1085 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1052.x + (-0.5));
        float _1087 = _1085 * (_1052.y + (-0.5));
        float _1088 = _1085 * (_1052.z + (-0.5));
        float _1095 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1059.x + (-0.5));
        float _1097 = _1095 * (_1059.y + (-0.5));
        float _1098 = _1095 * (_1059.z + (-0.5));
        float _1105 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1066.x + (-0.5));
        float _1107 = _1105 * (_1066.y + (-0.5));
        float _1108 = _1105 * (_1066.z + (-0.5));
        float _1115 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1073.x + (-0.5));
        float _1117 = _1115 * (_1073.y + (-0.5));
        float _1118 = _1115 * (_1073.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_402, _403, _404), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3569 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1149 + 1.0))) + _1154) * _1119;
        float _1164 = _1087 * 0.5;
        float _1165 = _1097 * 0.5;
        float _1166 = _1107 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_402, _403, _404), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3602 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1191 + 1.0))) + _1196) * _1120;
        float _1206 = _1088 * 0.5;
        float _1207 = _1098 * 0.5;
        float _1208 = _1108 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_402, _403, _404), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3635 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1233 + 1.0))) + _1238) * _1121;
        _1255 = _1088;
        _1256 = _1087;
        _1257 = _1086;
        _1258 = _1098;
        _1259 = _1097;
        _1260 = _1096;
        _1261 = _1108;
        _1262 = _1107;
        _1263 = _1106;
        _1264 = _1121;
        _1265 = _1120;
        _1266 = _1119;
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _946;
        _1256 = _946;
        _1257 = _946;
        _1258 = _946;
        _1259 = _946;
        _1260 = _946;
        _1261 = _946;
        _1262 = _946;
        _1263 = _946;
        _1264 = _946;
        _1265 = _946;
        _1266 = _946;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _958)) + _958;
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _959)) + _959;
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1302 = fma(_1281, cbSceneParam._m0[89u].z, fma(_1280, cbSceneParam._m0[89u].y, _1279 * cbSceneParam._m0[89u].x));
    float _1305 = fma(_1281, cbSceneParam._m0[90u].z, fma(_1280, cbSceneParam._m0[90u].y, _1279 * cbSceneParam._m0[90u].x));
    float _1308 = fma(_1281, cbSceneParam._m0[91u].z, fma(_1280, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1279));
    float _1323 = _579 * 0.5;
    float _1324 = _580 * 0.5;
    float _1325 = _581 * 0.5;
    float _1326 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1329 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1332 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1366;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1339 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_945, _949, _952, _955));
        float _1343 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_947, _950, _953, _956));
        float _1347 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_948, _951, _954, _957));
        float _1354 = dot(vec4(cbModelParam._m0[39u]), vec4(_1323, _1324, _1325, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1377;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1368 = dot(vec4(cbModelParam._m0[40u]), vec4(_1323, _1324, _1325, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1381 = (_1377 * cbModelParam._m0[1u].x) + (_1366 * (1.0 - cbModelParam._m0[1u].x));
    float _1391 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _405);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1391 : min(cbModelParam._m0[25u].z, _1391));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1441 = fma(_643, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635)) + cbModelParam._m0[13u].w;
        float _1445 = fma(_643, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635)) + cbModelParam._m0[14u].w;
        float _1449 = fma(_643, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635)) + cbModelParam._m0[15u].w;
        float _1452 = fma(_581, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579));
        float _1455 = fma(_581, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579));
        float _1458 = fma(_581, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579));
        float _1486;
        if (_1452 > 0.0)
        {
            _1486 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1486 = frontier_phi_16_14_ladder;
        }
        float _1693;
        if (_1455 > 0.0)
        {
            _1693 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1693 = frontier_phi_25_21_ladder;
        }
        float _1947;
        if (_1458 > 0.0)
        {
            _1947 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1947 = frontier_phi_37_32_ladder;
        }
        float _1949 = isnan(_1693) ? _1486 : (isnan(_1486) ? _1693 : min(_1486, _1693));
        float _1950 = isnan(_1947) ? _1949 : (isnan(_1949) ? _1947 : min(_1949, _1947));
        float _1954 = (_1950 * _1452) + _1441;
        float _1955 = (_1950 * _1455) + _1445;
        float _1956 = (_1950 * _1458) + _1449;
        float _1957 = _1950 * 9.9999997473787516355514526367188e-05;
        float _1959 = (-1.0) - _1957;
        float _1961 = _1957 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1956 > _1961) || ((_1956 < _1959) || ((_1955 > _1961) || ((_1955 < _1959) || ((_1954 < _1959) || (_1954 > _1961))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1956, cbModelParam._m0[9u].z, fma(_1955, cbModelParam._m0[9u].y, _1954 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1956, cbModelParam._m0[10u].z, fma(_1955, cbModelParam._m0[10u].y, _1954 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1956, cbModelParam._m0[11u].z, fma(_1955, cbModelParam._m0[11u].y, _1954 * cbModelParam._m0[11u].x))), _1392);
            frontier_phi_15_37_ladder = _2084.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2084.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2084.x * cbModelParam._m0[1u].y;
        }
        _1474 = frontier_phi_15_37_ladder_2;
        _1476 = frontier_phi_15_37_ladder_1;
        _1478 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_579, _580, _581), _1392);
        _1474 = _1462.x * cbModelParam._m0[1u].y;
        _1476 = _1462.y * cbModelParam._m0[1u].y;
        _1478 = _1462.z * cbModelParam._m0[1u].y;
    }
    float _1482 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _405);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1482 : min(cbModelParam._m0[25u].w, _1482));
    float _1576;
    float _1578;
    float _1580;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1540 = fma(_643, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635)) + cbModelParam._m0[21u].w;
        float _1544 = fma(_643, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635)) + cbModelParam._m0[22u].w;
        float _1548 = fma(_643, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635)) + cbModelParam._m0[23u].w;
        float _1551 = fma(_581, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579));
        float _1554 = fma(_581, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579));
        float _1557 = fma(_581, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579));
        float _1698;
        if (_1551 > 0.0)
        {
            _1698 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1698 = frontier_phi_27_23_ladder;
        }
        float _1974;
        if (_1554 > 0.0)
        {
            _1974 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1974 = frontier_phi_39_34_ladder;
        }
        float _2187;
        if (_1557 > 0.0)
        {
            _2187 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2187 = frontier_phi_48_45_ladder;
        }
        float _2189 = isnan(_1974) ? _1698 : (isnan(_1698) ? _1974 : min(_1698, _1974));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1551) + _1540;
        float _2195 = (_2190 * _1554) + _1544;
        float _2196 = (_2190 * _1557) + _1548;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2196, cbModelParam._m0[17u].z, fma(_2195, cbModelParam._m0[17u].y, _2194 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2196, cbModelParam._m0[18u].z, fma(_2195, cbModelParam._m0[18u].y, _2194 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2196, cbModelParam._m0[19u].z, fma(_2195, cbModelParam._m0[19u].y, _2194 * cbModelParam._m0[19u].x))), _1483);
            frontier_phi_24_48_ladder = _2394.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2394.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2394.x * cbModelParam._m0[1u].z;
        }
        _1576 = frontier_phi_24_48_ladder_2;
        _1578 = frontier_phi_24_48_ladder_1;
        _1580 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_579, _580, _581), _1483);
        _1576 = _1560.x * cbModelParam._m0[1u].z;
        _1578 = _1560.y * cbModelParam._m0[1u].z;
        _1580 = _1560.z * cbModelParam._m0[1u].z;
    }
    float _1593 = (((_606 * _556) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1576 - _1474)) + _1474);
    float _1595 = (((_606 * _558) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1597 = (((_606 * _559) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1600 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, _1593 * cbSceneParam._m0[91u].x));
    uvec4 _1616 = floatBitsToUint(cbInstanceData._m0[_531 + 5u]);
    uint _1618 = _1616.x * 14u;
    uint _1619 = _1618 + 13u;
    float _1626 = _571 + (-1.0);
    float _1631 = (cbLight._m0[_1619].x * _1626) + 1.0;
    float _1632 = (cbLight._m0[_1619].y * _1626) + 1.0;
    float _1633 = (cbLight._m0[_1619].z * _1626) + 1.0;
    float _1634 = (cbLight._m0[_1619].w * _1626) + 1.0;
    uint _1635 = _1618 + 5u;
    float _1641 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1645 = _1618 + 4u;
    float _1651 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
    uint _1655 = _1618 | 1u;
    float _1666 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_402, _403, _404));
    float _1669 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_402, _403, _404));
    float _3771 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _3782 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1674 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.3183098733425140380859375;
    float _1676 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.3183098733425140380859375;
    float _1683 = ((cbLight._m0[_1635].x * _1641) * _1676) + ((cbLight._m0[_1645].x * _1651) * _1674);
    float _1684 = ((_1641 * cbLight._m0[_1635].y) * _1676) + ((_1651 * cbLight._m0[_1645].y) * _1674);
    float _1685 = ((_1641 * cbLight._m0[_1635].z) * _1676) + ((_1651 * cbLight._m0[_1645].z) * _1674);
    uvec4 _1690 = floatBitsToUint(cbLight._m0[_1618 + 12u]);
    bool _1692 = _1690.x == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1692)
    {
        _1703 = _1683;
        _1705 = _1684;
        _1707 = _1685;
    }
    else
    {
        uint _1711 = _1618 + 6u;
        float _1727 = (dot(vec3(cbLight._m0[_1618 + 2u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1728 = _1727 * _1727;
        float _3793 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1730 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1703 = (((cbLight._m0[_1711].x * 0.3183098733425140380859375) * _1729) * _1730) + _1683;
        _1705 = (((cbLight._m0[_1711].y * 0.3183098733425140380859375) * _1729) * _1730) + _1684;
        _1707 = (((cbLight._m0[_1711].z * 0.3183098733425140380859375) * _1729) * _1730) + _1685;
    }
    bool _1710 = _1690.y == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1710)
    {
        _1748 = _1703;
        _1750 = _1705;
        _1752 = _1707;
    }
    else
    {
        uint _1918 = _1618 + 7u;
        float _1934 = (dot(vec3(cbLight._m0[_1618 + 3u].xyz), vec3(_402, _403, _404)) * 0.5) + 0.5;
        float _1935 = _1934 * _1934;
        float _3809 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1937 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1748 = (((cbLight._m0[_1918].x * 0.3183098733425140380859375) * _1936) * _1937) + _1703;
        _1750 = (((cbLight._m0[_1918].y * 0.3183098733425140380859375) * _1936) * _1937) + _1705;
        _1752 = (((cbLight._m0[_1918].z * 0.3183098733425140380859375) * _1936) * _1937) + _1707;
    }
    uint _1755 = _1618 + 8u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _405) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1618].x + _483;
    float _1771 = cbLight._m0[_1618].y + _484;
    float _1772 = cbLight._m0[_1618].z + _485;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1618].xyz));
    float _3825 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _1784 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _1785 = dot(vec3(_402, _403, _404), vec3(_1777, _1778, _1779));
    float _3847 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1777, _1778, _1779));
    float _3858 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1769 * _1769;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1805 = exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0);
    float _1806 = 0.959999978542327880859375 - _553;
    float _1808 = 0.959999978542327880859375 - _554;
    float _1809 = 0.959999978542327880859375 - _555;
    float _1816 = 1.0 - _1769;
    float _1827 = (0.5 / (((_1784 * ((_1783 * _1816) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1816) + _1769) * _1783))) * _1783;
    float _3869 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    uint _1840 = _1618 + 9u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1655].w)) * _405) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1655].x + _483;
    float _1854 = cbLight._m0[_1655].y + _484;
    float _1855 = cbLight._m0[_1655].z + _485;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1655].xyz));
    float _3880 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1867 = dot(vec3(_402, _403, _404), vec3(_1860, _1861, _1862));
    float _3891 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_1860, _1861, _1862));
    float _3902 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1852 * _1852;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1886 = exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0);
    float _1893 = 1.0 - _1852;
    float _1903 = (0.5 / (((_1784 * ((_1866 * _1893) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1893) + _1852) * _1866))) * _1866;
    float _3913 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    float _1915 = (((((_1886 * _1806) + _556) * cbLight._m0[_1840].x) * _1905) * _1641) + (((((_1805 * _1806) + _556) * cbLight._m0[_1755].x) * _1829) * _1651);
    float _1916 = (((((_1886 * _1808) + _558) * cbLight._m0[_1840].y) * _1905) * _1641) + (((((_1805 * _1808) + _558) * cbLight._m0[_1755].y) * _1829) * _1651);
    float _1917 = (((((_1886 * _1809) + _559) * cbLight._m0[_1840].z) * _1905) * _1641) + (((((_1805 * _1809) + _559) * cbLight._m0[_1755].z) * _1829) * _1651);
    float _1979;
    float _1981;
    float _1983;
    if (_1692)
    {
        _1979 = _1915;
        _1981 = _1916;
        _1983 = _1917;
    }
    else
    {
        uint _1985 = _1618 + 2u;
        uint _1989 = _1618 + 10u;
        float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _405) * 0.949999988079071044921875);
        float _2004 = _2003 * _2003;
        float _2005 = cbLight._m0[_1985].x + _483;
        float _2006 = cbLight._m0[_1985].y + _484;
        float _2007 = cbLight._m0[_1985].z + _485;
        float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
        float _2012 = _2011 * _2005;
        float _2013 = _2011 * _2006;
        float _2014 = _2011 * _2007;
        float _2015 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_1985].xyz));
        float _3924 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2019 = dot(vec3(_402, _403, _404), vec3(_2012, _2013, _2014));
        float _3935 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2023 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2012, _2013, _2014));
        float _3946 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = _2004 * _2004;
        float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
        float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0);
        float _2045 = 1.0 - _2004;
        float _2055 = (0.5 / (((_1784 * ((_2018 * _2045) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2045) + _2004) * _2018))) * _2018;
        float _3957 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2057 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
        float _2058 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1979 = (((((_2038 * _1806) + _556) * cbLight._m0[_1989].x) * _2057) * _2058) + _1915;
        _1981 = (((((_2038 * _1808) + _558) * cbLight._m0[_1989].y) * _2057) * _2058) + _1916;
        _1983 = (((((_2038 * _1809) + _559) * cbLight._m0[_1989].z) * _2057) * _2058) + _1917;
    }
    float _2093;
    float _2095;
    float _2097;
    if (_1710)
    {
        _2093 = _1979;
        _2095 = _1981;
        _2097 = _1983;
    }
    else
    {
        uint _2104 = _1618 + 3u;
        uint _2108 = _1618 + 11u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _405) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _483;
        float _2125 = cbLight._m0[_2104].y + _484;
        float _2126 = cbLight._m0[_2104].z + _485;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_402, _403, _404), vec3(cbLight._m0[_2104].xyz));
        float _3973 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2138 = dot(vec3(_402, _403, _404), vec3(_2131, _2132, _2133));
        float _3984 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _3995 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
        float _2164 = 1.0 - _2123;
        float _2174 = (0.5 / (((_1784 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2164) + _2123) * _2137))) * _2137;
        float _4006 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _2093 = (((((_2157 * _1806) + _556) * cbLight._m0[_2108].x) * _2176) * _2177) + _1979;
        _2095 = (((((_2157 * _1808) + _558) * cbLight._m0[_2108].y) * _2176) * _2177) + _1981;
        _2097 = (((((_2157 * _1809) + _559) * cbLight._m0[_2108].z) * _2176) * _2177) + _1983;
    }
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    if (_1616.y == 0u)
    {
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2252;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2252;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2252;
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.x;
        uint _2279 = uint((float(_2267.y) * floor(float(uint(cbSceneParam._m0[85u].y * _492) / _2268))) + floor(float(uint(cbSceneParam._m0[85u].x * _491) / _2268)));
        float _2289 = (log2(_2255 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        uint _2293 = uint(isnan(14.0) ? _2290 : (isnan(_2290) ? 14.0 : min(_2290, 14.0)));
        uvec4 _2298 = texelFetch(g_lightClusterGridBuffer, int(((_2293 << 2u) + (_2279 << 6u)) >> 2u));
        uint _2299 = _2298.x;
        uint _2300 = _2267.z;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        if (((((1u << ((_2300 >> 4u) & 15u)) + 4294967295u) & _2299) == 0u) || ((_2300 & 240u) == 0u))
        {
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
        }
        else
        {
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2559)
                {
                    frontier_phi_63_pred = _2548;
                    frontier_phi_63_pred_1 = _2547;
                    frontier_phi_63_pred_2 = _2546;
                    frontier_phi_63_pred_3 = _2545;
                    frontier_phi_63_pred_4 = _2544;
                    frontier_phi_63_pred_5 = _2543;
                }
                else
                {
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    uint _2673;
                    _2667 = _2543;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2558;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    for (;;)
                    {
                        uint _2677 = uint(findLSB(_2673)) + (_2549 << 5u);
                        uint _2674 = (_2673 + 4294967295u) & _2673;
                        uint _2679 = _2677 * 48u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2699 = (_2677 * 48u) + 4u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2718 = (_2677 * 48u) + 8u;
                        vec3 _2729 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x));
                        float _2733 = _2693.x - _2253;
                        float _2734 = _2693.y - _2254;
                        float _2735 = _2693.z - _2255;
                        float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                        float _2739 = inversesqrt(_2736);
                        float _2740 = _2739 * _2733;
                        float _2741 = _2739 * _2734;
                        float _2742 = _2739 * _2735;
                        float _2743 = dot(vec3(_512, _515, _518), vec3(_2740, _2741, _2742));
                        float _2748 = 1.0 - (_2736 * _2693.w);
                        float _4032 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2750 = sqrt(_2736) * _2712.w;
                        float _2753 = 1.39999997615814208984375 / (_2750 + 1.39999997615814208984375);
                        float _2754 = _2753 * _2753;
                        float _2757 = ((1.0 - _2754) * _2743) + _2754;
                        float _2760 = _2750 * _2750;
                        float _2764 = ((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2749) / ((_2760 * 0.699999988079071044921875) + 1.0);
                        float _2768 = (-0.0) - _2253;
                        float _2769 = (-0.0) - _2254;
                        float _2770 = (-0.0) - _2255;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2785 = exp2(log2(1.0 / ((_2760 * 3.5) + 5.0)) * 0.25);
                        float _2786 = 1.0 - _587;
                        float _2793 = sqrt(1.0 - ((1.0 - (_2786 * _2786)) * (1.0 - (_2785 * _2785))));
                        float _2794 = _2793 * _2793;
                        float _2795 = _2794 * _2794;
                        float _2796 = _2775 + _2740;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
                        float _2806 = dot(vec3(_512, _515, _518), vec3(_2775, _2776, _2777));
                        float _4048 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2810 = dot(vec3(_512, _515, _518), vec3(_2802 * _2796, _2802 * _2797, _2802 * _2798));
                        float _4059 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2817 = ((_2813 * _2813) * (_2795 + (-1.0))) + 1.0;
                        float _2818 = _2753 * _2794;
                        float _2819 = _2818 * _2818;
                        float _2822 = ((1.0 - _2819) * _2743) + _2819;
                        float _4070 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2823 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2824 = 1.0 - _2794;
                        float _2834 = (0.5 / (((_2823 * ((_2809 * _2824) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2823 * _2824) + _2794) * _2809))) * _2823;
                        float _4081 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2845 = (((_2795 * 3.1415927410125732421875) * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) / ((_2817 * _2817) * ((_2760 * 2.1991131305694580078125) + 3.141590118408203125))) * _2749;
                        _2602 = (_2764 * _2712.x) + _2670;
                        _2603 = (_2764 * _2712.y) + _2671;
                        _2604 = (_2764 * _2712.z) + _2672;
                        _2599 = (_2845 * _2729.x) + _2667;
                        _2600 = (_2845 * _2729.y) + _2668;
                        _2601 = (_2845 * _2729.z) + _2669;
                        if (_2674 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2674;
                        }
                    }
                    frontier_phi_63_pred = _2604;
                    frontier_phi_63_pred_1 = _2603;
                    frontier_phi_63_pred_2 = _2602;
                    frontier_phi_63_pred_3 = _2601;
                    frontier_phi_63_pred_4 = _2600;
                    frontier_phi_63_pred_5 = _2599;
                }
                _2410 = frontier_phi_63_pred;
                _2408 = frontier_phi_63_pred_1;
                _2406 = frontier_phi_63_pred_2;
                _2404 = frontier_phi_63_pred_3;
                _2402 = frontier_phi_63_pred_4;
                _2400 = frontier_phi_63_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2400;
                    _2544 = _2402;
                    _2545 = _2404;
                    _2546 = _2406;
                    _2547 = _2408;
                    _2548 = _2410;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
        }
        uvec4 _2413 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2414 = _2413.z;
        uint _2416 = (_2414 >> 8u) & 15u;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((4294967295u << _2416) & _2299) == 0u)
        {
            _2511 = _2399;
            _2513 = _2401;
            _2515 = _2403;
            _2517 = _2405;
            _2519 = _2407;
            _2521 = _2409;
        }
        else
        {
            float _2536 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
            float _2537 = _2536 * _2253;
            float _2538 = _2536 * _2254;
            float _2539 = _2536 * _2255;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2416 < ((_2414 >> 12u) & 15u))
            {
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2650 = _2399;
                float _2651 = _2401;
                float _2652 = _2403;
                float _2653 = _2405;
                float _2654 = _2407;
                float _2655 = _2409;
                uint _2656 = _2416;
                uint _2665;
                bool _2666;
                for (;;)
                {
                    _2665 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                    _2666 = _2665 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2666)
                    {
                        frontier_phi_69_pred = _2655;
                        frontier_phi_69_pred_1 = _2654;
                        frontier_phi_69_pred_2 = _2653;
                        frontier_phi_69_pred_3 = _2652;
                        frontier_phi_69_pred_4 = _2651;
                        frontier_phi_69_pred_5 = _2650;
                    }
                    else
                    {
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _2863 = _2650;
                        float _2864 = _2651;
                        float _2865 = _2652;
                        float _2866 = _2653;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        uint _2869 = _2665;
                        uint _2870;
                        vec4 _2895;
                        float _2896;
                        vec4 _2911;
                        vec3 _2923;
                        vec4 _2939;
                        vec4 _2955;
                        float _3002;
                        bool _3003;
                        for (;;)
                        {
                            uint _2880 = ((_2656 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2869));
                            _2870 = (_2869 + 4294967295u) & _2869;
                            uint _2882 = _2880 * 40u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2896 = _2895.w;
                            uint _2898 = (_2880 * 40u) + 4u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2913 = (_2880 * 40u) + 8u;
                            _2923 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x));
                            uint _2926 = (_2880 * 40u) + 16u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2880 * 40u) + 20u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2880 * 40u) + 24u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2977 = (_2880 * 40u) + 28u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _3002 = fma(_2255, _2990.z, fma(_2254, _2990.y, _2990.x * _2253)) + _2990.w;
                            _3003 = !((fma(_2255, _2971.z, fma(_2254, _2971.y, _2971.x * _2253)) + _2971.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3003)
                            {
                                float _3030 = _2895.x - _2253;
                                float _3031 = _2895.y - _2254;
                                float _3032 = _2895.z - _2255;
                                float _3033 = dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032));
                                float _3036 = inversesqrt(_3033);
                                float _3037 = _3036 * _3030;
                                float _3038 = _3036 * _3031;
                                float _3039 = _3036 * _3032;
                                float _3043 = 1.0 - (_3033 / (_2896 * _2896));
                                float _4092 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3048 = sqrt(_3033) * _2911.w;
                                float _3050 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                                float _3051 = _3050 * _3050;
                                float _3054 = ((1.0 - _3051) * dot(vec3(_3037, _3038, _3039), vec3(_512, _515, _518))) + _3051;
                                float _3057 = _3048 * _3048;
                                float _3061 = (fma(_2255, _2939.z, fma(_2254, _2939.y, _2939.x * _2253)) + _2939.w) / _3002;
                                float _3062 = (fma(_2255, _2955.z, fma(_2254, _2955.y, _2955.x * _2253)) + _2955.w) / _3002;
                                float _3066 = 1.0 - dot(vec2(_3061, _3062), vec2(_3061, _3062));
                                float _4108 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3068 = _3067 * (((isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))) * _3044) / ((_3057 * 0.699999988079071044921875) + 1.0));
                                float _3080 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                                float _3081 = 1.0 - _587;
                                float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                                float _3089 = _3088 * _3088;
                                float _3090 = _3089 * _3089;
                                float _3091 = _3037 - _2537;
                                float _3092 = _3038 - _2538;
                                float _3093 = _3039 - _2539;
                                float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                                float _3101 = dot(vec3(_512, _515, _518), vec3((-0.0) - _2537, (-0.0) - _2538, (-0.0) - _2539));
                                float _4119 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3105 = dot(vec3(_512, _515, _518), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                                float _4130 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                                float _3113 = _3050 * _3089;
                                float _3114 = _3113 * _3113;
                                float _3120 = ((1.0 - _3114) * dot(vec3(_512, _515, _518), vec3(_3037, _3038, _3039))) + _3114;
                                float _4141 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3122 = 1.0 - _3089;
                                float _3132 = (0.5 / (((_3121 * ((_3104 * _3122) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3089) * _3104))) * _3121;
                                float _4152 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3142 = (_3067 * _3044) * (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) / ((_3112 * _3112) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3068 * _2911.z;
                                frontier_phi_75_pred_1 = _3068 * _2911.y;
                                frontier_phi_75_pred_2 = _3068 * _2911.x;
                                frontier_phi_75_pred_3 = _3142 * _2923.z;
                                frontier_phi_75_pred_4 = _3142 * _2923.y;
                                frontier_phi_75_pred_5 = _3142 * _2923.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3151 = frontier_phi_75_pred;
                            _3150 = frontier_phi_75_pred_1;
                            _3149 = frontier_phi_75_pred_2;
                            _3148 = frontier_phi_75_pred_3;
                            _3147 = frontier_phi_75_pred_4;
                            _3146 = frontier_phi_75_pred_5;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            if (_2870 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2870;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2855;
                        frontier_phi_69_pred_1 = _2854;
                        frontier_phi_69_pred_2 = _2853;
                        frontier_phi_69_pred_3 = _2852;
                        frontier_phi_69_pred_4 = _2851;
                        frontier_phi_69_pred_5 = _2850;
                    }
                    _2522 = frontier_phi_69_pred;
                    _2520 = frontier_phi_69_pred_1;
                    _2518 = frontier_phi_69_pred_2;
                    _2516 = frontier_phi_69_pred_3;
                    _2514 = frontier_phi_69_pred_4;
                    _2512 = frontier_phi_69_pred_5;
                    uint _2657 = _2656 + 1u;
                    if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2650 = _2512;
                        _2651 = _2514;
                        _2652 = _2516;
                        _2653 = _2518;
                        _2654 = _2520;
                        _2655 = _2522;
                        _2656 = _2657;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2522;
                frontier_phi_57_58_ladder_1 = _2520;
                frontier_phi_57_58_ladder_2 = _2518;
                frontier_phi_57_58_ladder_3 = _2516;
                frontier_phi_57_58_ladder_4 = _2514;
                frontier_phi_57_58_ladder_5 = _2512;
            }
            else
            {
                frontier_phi_57_58_ladder = _2409;
                frontier_phi_57_58_ladder_1 = _2407;
                frontier_phi_57_58_ladder_2 = _2405;
                frontier_phi_57_58_ladder_3 = _2403;
                frontier_phi_57_58_ladder_4 = _2401;
                frontier_phi_57_58_ladder_5 = _2399;
            }
            _2511 = frontier_phi_57_58_ladder_5;
            _2513 = frontier_phi_57_58_ladder_4;
            _2515 = frontier_phi_57_58_ladder_3;
            _2517 = frontier_phi_57_58_ladder_2;
            _2519 = frontier_phi_57_58_ladder_1;
            _2521 = frontier_phi_57_58_ladder;
        }
        float _2526 = isnan(1.0) ? _571 : (isnan(_571) ? 1.0 : min(_571, 1.0));
        _2311 = (_2526 * _2517) + _1748;
        _2313 = (_2526 * _2519) + _1750;
        _2315 = (_2526 * _2521) + _1752;
        _2317 = ((_2511 * _556) * _2526) + _2093;
        _2319 = ((_2513 * _558) * _2526) + _2095;
        _2321 = ((_2515 * _559) * _2526) + _2097;
    }
    else
    {
        _2311 = _1748;
        _2313 = _1750;
        _2315 = _1752;
        _2317 = _2093;
        _2319 = _2095;
        _2321 = _2097;
    }
    float _4168 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4179 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4190 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    uint _2341 = _531 + 6u;
    float _2349 = _491 / cbSceneParam._m0[86u].x;
    float _2350 = _492 / cbSceneParam._m0[86u].y;
    vec4 _2364 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, (log2((isnan(cbSceneParam._m0[77u].w) ? _425 : (isnan(_425) ? cbSceneParam._m0[77u].w : min(_425, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2366 = _2364.x;
    float _2367 = _2364.y;
    float _2368 = _2364.z;
    float _2369 = _2364.w;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_425 > cbSceneParam._m0[78u].w)
    {
        float _2424 = isnan(_425) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _425 : min(cbSceneParam._m0[80u].w, _425));
        float _2425 = _2424 / _425;
        float _2436 = _2425 * _476;
        float _2437 = _477 * _2425;
        float _2438 = (-0.0) - _2437;
        float _2439 = _2425 * _478;
        float _2441 = (cbSceneParam._m0[77u].w * _2438) / _2424;
        float _2442 = _2441 + cbSceneParam._m0[79u].w;
        float _2443 = cbSceneParam._m0[79u].w - _2437;
        float _2449 = sqrt(((_2436 * _2436) + (_2437 * _2437)) + (_2439 * _2439));
        float _2452 = (1.0 - (cbSceneParam._m0[77u].w / _2424)) * _2449;
        float _2457 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2459 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2612;
        if (abs((_2438 - _2441) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2612 = ((((_2442 > 0.0) ? exp2(_2457 * _2442) : (2.0 - exp2(_2459 * _2442))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2452;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : max(_2442, _2443));
            float _2574 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : min(_2442, _2443));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2612 = ((abs(_2449 / _2438) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2457 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2457 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2459 * _2583) - exp2(_2459 * _2584)) * _2572))) + (_2452 * cbSceneParam._m0[80u].z);
        }
        vec4 _2614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, 1.0), 0.0);
        float _2623 = exp2((_2612 * (-1.44269502162933349609375)) * (1.0 - _2614.w));
        float _2624 = log2(_2623);
        float _2640 = log2(_2369);
        _2461 = (exp2(_2640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].x)) * _2614.x) / cbSceneParam._m0[78u].x)) + _2366;
        _2463 = (exp2(_2640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].y)) * _2614.y) / cbSceneParam._m0[78u].y)) + _2367;
        _2465 = (exp2(_2640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].z)) * _2614.z) / cbSceneParam._m0[78u].z)) + _2368;
        _2467 = _2623 * _2369;
    }
    else
    {
        _2461 = _2366;
        _2463 = _2367;
        _2465 = _2368;
        _2467 = _2369;
    }
    float _2479 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2480 = _2479 == 3.0;
    float _2481 = log2(_2467);
    float _2488 = exp2(_2481 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2311 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _571))) + ((_2317 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1381)) * cbPerFrame._m0[3u].x));
    float _2489 = exp2(_2481 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2313 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _571))) + ((_2319 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1381)) * cbPerFrame._m0[3u].x));
    float _2490 = exp2(_2481 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2315 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _571))) + ((_2321 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1381)) * cbPerFrame._m0[3u].x));
    float _2499 = (_2479 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2499 * (_2480 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2461)));
    SV_Target.y = _2499 * (_2480 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2463)));
    SV_Target.z = _2499 * (_2480 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2465)));
    SV_Target.w = cbInstanceData._m0[_2341].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2341].w;
}


