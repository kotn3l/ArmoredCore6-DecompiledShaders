#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1072;
float _3723;
float _3724;
float _3725;
float _3726;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _252.x;
    float _256 = _252.y;
    float _257 = _252.z;
    vec4 _289 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _302 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3735 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _312 = ((_289.z - _257) * _303) + _257;
    float _316 = ((((_289.x - _255) * _303) + _255) * 2.0) + (-1.0);
    float _318 = ((((_289.y - _256) * _303) + _256) * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3746 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))));
    float _327 = fma(_324, _236, fma(_318, _229, _316 * _215));
    float _330 = fma(_324, _237, fma(_318, _230, _316 * _216));
    float _333 = fma(_324, _238, fma(_318, _231, _316 * _217));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    vec4 _365 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _369 = (cbMtdParam._m0[11u].z + dot(vec4(_337 * _327, _337 * _330, _337 * _333, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_365.x * cbMtdParam._m0[11u].w);
    float _3757 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _392 = _387.x * cbMtdParam._m0[9u].x;
    float _393 = _387.y * cbMtdParam._m0[9u].y;
    float _394 = _387.z * cbMtdParam._m0[9u].z;
    vec4 _413 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _427 = (((_413.x * cbMtdParam._m0[10u].x) - _392) * _303) + _392;
    float _428 = (((_413.y * cbMtdParam._m0[10u].y) - _393) * _303) + _393;
    float _429 = (((_413.z * cbMtdParam._m0[10u].z) - _394) * _303) + _394;
    vec4 _442 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _453 = ((_442.x - _427) * _370) + _427;
    float _454 = ((_442.y - _428) * _370) + _428;
    float _455 = ((_442.z - _429) * _370) + _429;
    vec4 _468 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _475 = (_468.x * 2.0) + (-1.0);
    float _476 = (_468.y * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3768 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _485 = ((_468.z - _312) * _370) + _312;
    float _492 = ((_475 - _316) * _370) + _316;
    float _493 = ((_476 - _318) * _370) + _318;
    float _494 = ((sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) - _324) * _370) + _324;
    float _497 = fma(_494, _236, fma(_493, _229, _492 * _215));
    float _500 = fma(_494, _237, fma(_493, _230, _492 * _216));
    float _503 = fma(_494, _238, fma(_493, _231, _492 * _217));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3779 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _511 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3801 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3812 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _530 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _580 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _570);
    float _581 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _570);
    float _582 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _570);
    float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
    float _587 = _580 * _586;
    float _588 = _581 * _586;
    float _589 = _582 * _586;
    vec4 _594 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _596 = _594.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _752 = sqrt(((_580 * _580) + (_581 * _581)) + (_582 * _582));
        float _758 = (cbMatDynParam._m0[5u].x * _752) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _763 = (cbMatDynParam._m0[5u].z * _752) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _759)) + _759) < ((_596 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _628 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _631 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _634 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    uint _647 = uint(roundEven(NORMAL.w)) * 13u;
    uint _648 = _647 + 9u;
    uint _649 = _648 + uint(cbMatDynParam._m0[0u].w);
    float _655 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_649].x;
    float _656 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_649].y;
    float _657 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_649].z;
    float _3845 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    vec4 _669 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _672 = _669.x * TEXCOORD_9.w;
    float _673 = dot(vec3(_508, _509, _510), vec3(_587, _588, _589));
    float _676 = _673 * 2.0;
    float _680 = (_676 * _508) - _587;
    float _681 = (_676 * _509) - _588;
    float _682 = (_676 * _510) - _589;
    float _686 = abs(dot(vec3(_587, _588, _589), vec3(_508, _509, _510)));
    float _3878 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _688 = sqrt(_511);
    float _701 = exp2((_688 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_688 * 3.0));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1071;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _796 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _800 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _804 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _829 = _733 + _508;
        float _830 = _737 + _509;
        float _831 = _741 + _510;
        float _841 = fma(_831, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829)) - _796;
        float _842 = fma(_831, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829)) - _800;
        float _843 = fma(_831, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829)) - _804;
        float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
        float _860 = ((_847 * _841) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_796 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_847 * _842) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_800 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_847 * _843) / cbModelParam._m0[34u].z) + ((((((_804 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        float _899 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_865.x + (-0.5));
        float _901 = _899 * (_865.y + (-0.5));
        float _902 = _899 * (_865.z + (-0.5));
        float _909 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_872.x + (-0.5));
        float _911 = _909 * (_872.y + (-0.5));
        float _912 = _909 * (_872.z + (-0.5));
        float _919 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_879.x + (-0.5));
        float _921 = _919 * (_879.y + (-0.5));
        float _922 = _919 * (_879.z + (-0.5));
        float _929 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_886.x + (-0.5));
        float _931 = _929 * (_886.y + (-0.5));
        float _932 = _929 * (_886.z + (-0.5));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = _900 * 0.5;
        float _937 = _910 * 0.5;
        float _938 = _920 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _953 = (dot(vec3(_508, _509, _510), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _963 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3926 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_965 + 1.0))) + _970) * _933;
        float _980 = _901 * 0.5;
        float _981 = _911 * 0.5;
        float _982 = _921 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_508, _509, _510), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3959 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1007 + 1.0))) + _1012) * _934;
        float _1022 = _902 * 0.5;
        float _1023 = _912 * 0.5;
        float _1024 = _922 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_508, _509, _510), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3992 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1049 + 1.0))) + _1054) * _935;
        _1071 = _902;
        _1073 = _901;
        _1074 = _900;
        _1075 = _912;
        _1076 = _911;
        _1077 = _910;
        _1078 = _922;
        _1079 = _921;
        _1080 = _920;
        _1081 = _935;
        _1082 = _934;
        _1083 = _933;
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
    }
    else
    {
        _1071 = _1072;
        _1073 = _1072;
        _1074 = _1072;
        _1075 = _1072;
        _1076 = _1072;
        _1077 = _1072;
        _1078 = _1072;
        _1079 = _1072;
        _1080 = _1072;
        _1081 = _1072;
        _1082 = _1072;
        _1083 = _1072;
        _1084 = 0.0;
        _1085 = 0.0;
        _1086 = 0.0;
    }
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1115 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1119 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1123 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1146 = _733 + _508;
        float _1147 = _737 + _509;
        float _1148 = _741 + _510;
        float _1158 = fma(_1148, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146)) - _1115;
        float _1159 = fma(_1148, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146)) - _1119;
        float _1160 = fma(_1148, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146)) - _1123;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1115 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1119 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[35u].z) + ((((((_1123 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1214 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1181.x + (-0.5));
        float _1216 = _1214 * (_1181.y + (-0.5));
        float _1217 = _1214 * (_1181.z + (-0.5));
        float _1224 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1188.x + (-0.5));
        float _1226 = _1224 * (_1188.y + (-0.5));
        float _1227 = _1224 * (_1188.z + (-0.5));
        float _1234 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1195.x + (-0.5));
        float _1236 = _1234 * (_1195.y + (-0.5));
        float _1237 = _1234 * (_1195.z + (-0.5));
        float _1244 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1202.x + (-0.5));
        float _1246 = _1244 * (_1202.y + (-0.5));
        float _1247 = _1244 * (_1202.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_508, _509, _510), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4055 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1278 + 1.0))) + _1283) * _1248;
        float _1293 = _1216 * 0.5;
        float _1294 = _1226 * 0.5;
        float _1295 = _1236 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_508, _509, _510), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4088 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1320 + 1.0))) + _1325) * _1249;
        float _1335 = _1217 * 0.5;
        float _1336 = _1227 * 0.5;
        float _1337 = _1237 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_508, _509, _510), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4121 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1362 + 1.0))) + _1367) * _1250;
        _1384 = _1217;
        _1385 = _1216;
        _1386 = _1215;
        _1387 = _1227;
        _1388 = _1226;
        _1389 = _1225;
        _1390 = _1237;
        _1391 = _1236;
        _1392 = _1235;
        _1393 = _1250;
        _1394 = _1249;
        _1395 = _1248;
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1072;
        _1385 = _1072;
        _1386 = _1072;
        _1387 = _1072;
        _1388 = _1072;
        _1389 = _1072;
        _1390 = _1072;
        _1391 = _1072;
        _1392 = _1072;
        _1393 = _1072;
        _1394 = _1072;
        _1395 = _1072;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1084)) + _1084;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1086)) + _1086;
    float _1431 = fma(_1410, cbSceneParam._m0[89u].z, fma(_1409, cbSceneParam._m0[89u].y, _1408 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1410, cbSceneParam._m0[90u].z, fma(_1409, cbSceneParam._m0[90u].y, _1408 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1410, cbSceneParam._m0[91u].z, fma(_1409, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1408));
    float _1452 = _680 * 0.5;
    float _1453 = _681 * 0.5;
    float _1454 = _682 * 0.5;
    float _1455 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1458 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1461 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1495;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1468 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1071, _1075, _1078, _1081));
        float _1472 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1476 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1483 = dot(vec4(cbModelParam._m0[39u]), vec4(_1452, _1453, _1454, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1506;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1497 = dot(vec4(cbModelParam._m0[40u]), vec4(_1452, _1453, _1454, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1510 = (_1506 * cbModelParam._m0[1u].x) + (_1495 * (1.0 - cbModelParam._m0[1u].x));
    float _1520 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _511);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1520 : min(cbModelParam._m0[25u].z, _1520));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1570 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1574 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1578 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1581 = fma(_682, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680));
        float _1584 = fma(_682, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680));
        float _1587 = fma(_682, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680));
        float _1615;
        if (_1581 > 0.0)
        {
            _1615 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1615 = frontier_phi_19_17_ladder;
        }
        float _1788;
        if (_1584 > 0.0)
        {
            _1788 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1788 = frontier_phi_28_24_ladder;
        }
        float _2083;
        if (_1587 > 0.0)
        {
            _2083 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2083 = frontier_phi_40_35_ladder;
        }
        float _2085 = isnan(_1788) ? _1615 : (isnan(_1615) ? _1788 : min(_1615, _1788));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1581) + _1570;
        float _2091 = (_2086 * _1584) + _1574;
        float _2092 = (_2086 * _1587) + _1578;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2093;
        float _2097 = _2093 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 > _2097) || ((_2091 < _2095) || ((_2090 < _2095) || (_2090 > _2097))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2092, cbModelParam._m0[9u].z, fma(_2091, cbModelParam._m0[9u].y, _2090 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2092, cbModelParam._m0[10u].z, fma(_2091, cbModelParam._m0[10u].y, _2090 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2092, cbModelParam._m0[11u].z, fma(_2091, cbModelParam._m0[11u].y, _2090 * cbModelParam._m0[11u].x))), _1521);
            frontier_phi_18_40_ladder = _2237.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2237.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2237.x * cbModelParam._m0[1u].y;
        }
        _1603 = frontier_phi_18_40_ladder_2;
        _1605 = frontier_phi_18_40_ladder_1;
        _1607 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_680, _681, _682), _1521);
        _1603 = _1591.x * cbModelParam._m0[1u].y;
        _1605 = _1591.y * cbModelParam._m0[1u].y;
        _1607 = _1591.z * cbModelParam._m0[1u].y;
    }
    float _1611 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _511);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1611 : min(cbModelParam._m0[25u].w, _1611));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_682, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680));
        float _1683 = fma(_682, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680));
        float _1686 = fma(_682, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680));
        float _1793;
        if (_1680 > 0.0)
        {
            _1793 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1793 = frontier_phi_30_26_ladder;
        }
        float _2110;
        if (_1683 > 0.0)
        {
            _2110 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2110 = frontier_phi_42_37_ladder;
        }
        float _2437;
        if (_1686 > 0.0)
        {
            _2437 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2437 = frontier_phi_52_49_ladder;
        }
        float _2439 = isnan(_2110) ? _1793 : (isnan(_1793) ? _2110 : min(_1793, _2110));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1680) + _1669;
        float _2445 = (_2440 * _1683) + _1673;
        float _2446 = (_2440 * _1686) + _1677;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2447;
        float _2450 = _2447 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2446 > _2450) || ((_2446 < _2448) || ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 < _2448) || (_2444 > _2450))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2446, cbModelParam._m0[17u].z, fma(_2445, cbModelParam._m0[17u].y, _2444 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2446, cbModelParam._m0[18u].z, fma(_2445, cbModelParam._m0[18u].y, _2444 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2446, cbModelParam._m0[19u].z, fma(_2445, cbModelParam._m0[19u].y, _2444 * cbModelParam._m0[19u].x))), _1612);
            frontier_phi_27_52_ladder = _2564.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2564.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2564.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_27_52_ladder_2;
        _1707 = frontier_phi_27_52_ladder_1;
        _1709 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_680, _681, _682), _1612);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1721 = ((((1.0 - _701) * ((_688 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_701 * _688)) * _672;
    float _1722 = _1721 * ((cbModelParam._m0[1u].w * (_1705 - _1603)) + _1603);
    float _1723 = _1721 * ((cbModelParam._m0[1u].w * (_1707 - _1605)) + _1605);
    float _1724 = _1721 * ((cbModelParam._m0[1u].w * (_1709 - _1607)) + _1607);
    float _1727 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    float _1767 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1771 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1775 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1780 = _1767 / _1779;
    float _1781 = _1771 / _1779;
    float _1782 = _1775 / _1779;
    float _1929;
    float _1930;
    float _1931;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1809 = ((uint(_1782 > cbSceneParam._m0[59u].y) + uint(_1782 > cbSceneParam._m0[59u].x)) + uint(_1782 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1810 = _1809 + 43u;
        uint _1818 = _1809 + 44u;
        uint _1826 = _1809 + 45u;
        uint _1834 = _1809 + 46u;
        float _1845 = fma(_1779, cbSceneParam._m0[_1810].w, fma(_1775, cbSceneParam._m0[_1810].z, fma(_1771, cbSceneParam._m0[_1810].y, _1767 * cbSceneParam._m0[_1810].x)));
        float _1849 = fma(_1779, cbSceneParam._m0[_1818].w, fma(_1775, cbSceneParam._m0[_1818].z, fma(_1771, cbSceneParam._m0[_1818].y, _1767 * cbSceneParam._m0[_1818].x)));
        float _1857 = fma(_1779, cbSceneParam._m0[_1834].w, fma(_1775, cbSceneParam._m0[_1834].z, fma(_1771, cbSceneParam._m0[_1834].y, _1767 * cbSceneParam._m0[_1834].x)));
        float _1862 = cbSceneParam._m0[33u].z * _1857;
        float _1864 = cbSceneParam._m0[33u].w * _1857;
        float _1867 = fma(_1779, cbSceneParam._m0[_1826].w, fma(_1775, cbSceneParam._m0[_1826].z, fma(_1771, cbSceneParam._m0[_1826].y, _1767 * cbSceneParam._m0[_1826].x))) / _1857;
        float _1915 = (cbSceneParam._m0[33u].x - sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782))) * cbSceneParam._m0[33u].y;
        float _4247 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1922 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 + _1845) / _1857, (_1864 + _1849) / _1857), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 + _1845) / _1857, (_1849 - _1862) / _1857), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 - _1862) / _1857, (_1849 - _1864) / _1857), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 - _1864) / _1857, (_1862 + _1849) / _1857), _1867), 0.0)).x), vec4(0.25)));
        _1929 = 1.0 - (_1922 * cbSceneParam._m0[34u].x);
        _1930 = 1.0 - (_1922 * cbSceneParam._m0[34u].y);
        _1931 = 1.0 - (_1922 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1929 = 1.0;
        _1930 = 1.0;
        _1931 = 1.0;
    }
    float _1995;
    float _1997;
    float _1999;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1983 = fma(_1779, cbSceneParam._m0[63u].w, fma(_1775, cbSceneParam._m0[63u].z, fma(_1771, cbSceneParam._m0[63u].y, _1767 * cbSceneParam._m0[63u].x)));
        float _1984 = fma(_1779, cbSceneParam._m0[60u].w, fma(_1775, cbSceneParam._m0[60u].z, fma(_1771, cbSceneParam._m0[60u].y, _1767 * cbSceneParam._m0[60u].x))) / _1983;
        float _1985 = fma(_1779, cbSceneParam._m0[61u].w, fma(_1775, cbSceneParam._m0[61u].z, fma(_1771, cbSceneParam._m0[61u].y, _1767 * cbSceneParam._m0[61u].x))) / _1983;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1984 >= cbSceneParam._m0[64u].x) && (_1985 >= cbSceneParam._m0[64u].y)) && (_1984 <= cbSceneParam._m0[64u].z)) && (_1985 <= cbSceneParam._m0[64u].w))
        {
            float _2123 = fma(_1779, cbSceneParam._m0[62u].w, fma(_1775, cbSceneParam._m0[62u].z, fma(_1771, cbSceneParam._m0[62u].y, _1767 * cbSceneParam._m0[62u].x))) / _1983;
            float _2127 = isnan(cbSceneParam._m0[41u].w) ? _2123 : (isnan(_2123) ? cbSceneParam._m0[41u].w : max(_2123, cbSceneParam._m0[41u].w));
            float _2170 = (cbSceneParam._m0[33u].x - sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782))) * cbSceneParam._m0[33u].y;
            float _4263 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
            float _2177 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1984, cbSceneParam._m0[33u].w + _1985), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1984, _1985 - cbSceneParam._m0[33u].z), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1984 - cbSceneParam._m0[33u].z, _1985 - cbSceneParam._m0[33u].w), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1984 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1985), _2127), 0.0)).x), vec4(0.25)));
            float _2181 = 1.0 - (_2177 * cbSceneParam._m0[34u].x);
            float _2182 = 1.0 - (_2177 * cbSceneParam._m0[34u].y);
            float _2183 = 1.0 - (_2177 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2182) ? _1930 : (isnan(_1930) ? _2182 : min(_1930, _2182));
            frontier_phi_39_38_ladder_1 = isnan(_2181) ? _1929 : (isnan(_1929) ? _2181 : min(_1929, _2181));
            frontier_phi_39_38_ladder_2 = isnan(_2183) ? _1931 : (isnan(_1931) ? _2183 : min(_1931, _2183));
        }
        else
        {
            frontier_phi_39_38_ladder = _1930;
            frontier_phi_39_38_ladder_1 = _1929;
            frontier_phi_39_38_ladder_2 = _1931;
        }
        _1995 = frontier_phi_39_38_ladder_1;
        _1997 = frontier_phi_39_38_ladder;
        _1999 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1995 = _1929;
        _1997 = _1930;
        _1999 = _1931;
    }
    uvec4 _2004 = floatBitsToUint(cbInstanceData._m0[_647 + 5u]);
    uint _2006 = _2004.x * 14u;
    uint _2007 = _2006 + 13u;
    float _2014 = _672 + (-1.0);
    float _2019 = (cbLight._m0[_2007].x * _2014) + 1.0;
    float _2020 = (cbLight._m0[_2007].y * _2014) + 1.0;
    float _2021 = (cbLight._m0[_2007].z * _2014) + 1.0;
    float _2022 = (cbLight._m0[_2007].w * _2014) + 1.0;
    uint _2023 = _2006 + 5u;
    float _2029 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
    uint _2033 = _2006 + 4u;
    float _2042 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2046 = _2006 | 1u;
    float _2057 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_508, _509, _510));
    float _2060 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_508, _509, _510));
    float _4299 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _4310 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2065 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2067 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 0.3183098733425140380859375;
    float _2074 = ((cbLight._m0[_2023].x * _2029) * _2067) + (((cbLight._m0[_2033].x * _1995) * _2042) * _2065);
    float _2075 = ((_2029 * cbLight._m0[_2023].y) * _2067) + (((cbLight._m0[_2033].y * _1997) * _2042) * _2065);
    float _2076 = ((_2029 * cbLight._m0[_2023].z) * _2067) + (((cbLight._m0[_2033].z * _1999) * _2042) * _2065);
    uvec4 _2080 = floatBitsToUint(cbLight._m0[_2006 + 12u]);
    bool _2082 = _2080.x == 0u;
    float _2184;
    float _2186;
    float _2188;
    if (_2082)
    {
        _2184 = _2074;
        _2186 = _2075;
        _2188 = _2076;
    }
    else
    {
        uint _2192 = _2006 + 6u;
        float _2208 = (dot(vec3(cbLight._m0[_2006 + 2u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2209 = _2208 * _2208;
        float _4321 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2210 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2211 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2184 = (((cbLight._m0[_2192].x * 0.3183098733425140380859375) * _2210) * _2211) + _2074;
        _2186 = (((cbLight._m0[_2192].y * 0.3183098733425140380859375) * _2210) * _2211) + _2075;
        _2188 = (((cbLight._m0[_2192].z * 0.3183098733425140380859375) * _2210) * _2211) + _2076;
    }
    bool _2191 = _2080.y == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2191)
    {
        _2246 = _2184;
        _2248 = _2186;
        _2250 = _2188;
    }
    else
    {
        uint _2408 = _2006 + 7u;
        float _2424 = (dot(vec3(cbLight._m0[_2006 + 3u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2425 = _2424 * _2424;
        float _4337 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2426 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2427 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2246 = (((cbLight._m0[_2408].x * 0.3183098733425140380859375) * _2426) * _2427) + _2184;
        _2248 = (((cbLight._m0[_2408].y * 0.3183098733425140380859375) * _2426) * _2427) + _2186;
        _2250 = (((cbLight._m0[_2408].z * 0.3183098733425140380859375) * _2426) * _2427) + _2188;
    }
    uint _2253 = _2006 + 8u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _511) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2006].x + _587;
    float _2269 = cbLight._m0[_2006].y + _588;
    float _2270 = cbLight._m0[_2006].z + _589;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2006].xyz));
    float _4353 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _4364 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _2282 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2283 = dot(vec3(_508, _509, _510), vec3(_2275, _2276, _2277));
    float _4375 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2275, _2276, _2277));
    float _4386 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2267 * _2267;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2307 = 1.0 - _2267;
    float _2318 = (0.5 / (((_2282 * ((_2281 * _2307) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2307) + _2267) * _2281))) * _2281;
    float _4397 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    uint _2334 = _2006 + 9u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _511) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2046].x + _587;
    float _2348 = cbLight._m0[_2046].y + _588;
    float _2349 = cbLight._m0[_2046].z + _589;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2046].xyz));
    float _4408 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2361 = dot(vec3(_508, _509, _510), vec3(_2354, _2355, _2356));
    float _4419 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2354, _2355, _2356));
    float _4430 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2346 * _2346;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2383 = 1.0 - _2346;
    float _2393 = (0.5 / (((_2282 * ((_2360 * _2383) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2383) + _2346) * _2360))) * _2360;
    float _4441 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2395 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    float _2405 = (((_2382 * cbLight._m0[_2334].x) * _2395) * _2029) + ((((cbLight._m0[_2253].x * _1995) * _2306) * _2320) * _2042);
    float _2406 = (((_2382 * cbLight._m0[_2334].y) * _2395) * _2029) + ((((cbLight._m0[_2253].y * _1997) * _2306) * _2320) * _2042);
    float _2407 = (((_2382 * cbLight._m0[_2334].z) * _2395) * _2029) + ((((cbLight._m0[_2253].z * _1999) * _2306) * _2320) * _2042);
    float _2463;
    float _2465;
    float _2467;
    if (_2082)
    {
        _2463 = _2405;
        _2465 = _2406;
        _2467 = _2407;
    }
    else
    {
        uint _2469 = _2006 + 2u;
        uint _2473 = _2006 + 10u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _511) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _587;
        float _2490 = cbLight._m0[_2469].y + _588;
        float _2491 = cbLight._m0[_2469].z + _589;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2469].xyz));
        float _4452 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2503 = dot(vec3(_508, _509, _510), vec3(_2496, _2497, _2498));
        float _4463 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4474 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2524 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2525 = 1.0 - _2488;
        float _2535 = (0.5 / (((_2282 * ((_2502 * _2525) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2525) + _2488) * _2502))) * _2502;
        float _4485 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2463 = (((_2524 * cbLight._m0[_2473].x) * _2537) * _2538) + _2405;
        _2465 = (((_2524 * cbLight._m0[_2473].y) * _2537) * _2538) + _2406;
        _2467 = (((_2524 * cbLight._m0[_2473].z) * _2537) * _2538) + _2407;
    }
    float _2569;
    float _2571;
    float _2573;
    if (_2191)
    {
        _2569 = _2463;
        _2571 = _2465;
        _2573 = _2467;
    }
    else
    {
        uint _2580 = _2006 + 3u;
        uint _2584 = _2006 + 11u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _511) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _587;
        float _2601 = cbLight._m0[_2580].y + _588;
        float _2602 = cbLight._m0[_2580].z + _589;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2580].xyz));
        float _4501 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2614 = dot(vec3(_508, _509, _510), vec3(_2607, _2608, _2609));
        float _4512 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4523 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2636 = 1.0 - _2599;
        float _2646 = (0.5 / (((_2282 * ((_2613 * _2636) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2636) + _2599) * _2613))) * _2613;
        float _4534 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2569 = (((_2635 * cbLight._m0[_2584].x) * _2648) * _2649) + _2463;
        _2571 = (((_2635 * cbLight._m0[_2584].y) * _2648) * _2649) + _2465;
        _2573 = (((_2635 * cbLight._m0[_2584].z) * _2648) * _2649) + _2467;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2004.y == 0u)
    {
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.x;
        uint _2682 = uint((float(_2670.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2671))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2671)));
        float _2692 = (log2(_1782 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2693 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        uint _2696 = uint(isnan(14.0) ? _2693 : (isnan(_2693) ? 14.0 : min(_2693, 14.0)));
        uvec4 _2701 = texelFetch(g_lightClusterGridBuffer, int(((_2696 << 2u) + (_2682 << 6u)) >> 2u));
        uint _2702 = _2701.x;
        uint _2703 = _2670.z;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((((1u << ((_2703 >> 4u) & 15u)) + 4294967295u) & _2702) == 0u) || ((_2703 & 240u) == 0u))
        {
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
        }
        else
        {
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            uint _2939 = 0u;
            uint _2948;
            bool _2949;
            for (;;)
            {
                _2948 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                _2949 = _2948 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2949)
                {
                    frontier_phi_73_pred = _2938;
                    frontier_phi_73_pred_1 = _2937;
                    frontier_phi_73_pred_2 = _2936;
                    frontier_phi_73_pred_3 = _2935;
                    frontier_phi_73_pred_4 = _2934;
                    frontier_phi_73_pred_5 = _2933;
                }
                else
                {
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    uint _3084;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2948;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    for (;;)
                    {
                        uint _3088 = uint(findLSB(_3084)) + (_2939 << 5u);
                        uint _3085 = (_3084 + 4294967295u) & _3084;
                        uint _3090 = _3088 * 48u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3110 = (_3088 * 48u) + 4u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3129 = (_3088 * 48u) + 8u;
                        vec3 _3140 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x));
                        float _3144 = _3104.x - _1780;
                        float _3145 = _3104.y - _1781;
                        float _3146 = _3104.z - _1782;
                        float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                        float _3150 = inversesqrt(_3147);
                        float _3151 = _3150 * _3144;
                        float _3152 = _3150 * _3145;
                        float _3153 = _3150 * _3146;
                        float _3154 = dot(vec3(_628, _631, _634), vec3(_3151, _3152, _3153));
                        float _3159 = 1.0 - (_3147 * _3104.w);
                        float _4560 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3161 = sqrt(_3147) * _3123.w;
                        float _3164 = 1.39999997615814208984375 / (_3161 + 1.39999997615814208984375);
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3154) + _3165;
                        float _3171 = _3161 * _3161;
                        float _3175 = ((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3160) / ((_3171 * 0.699999988079071044921875) + 1.0);
                        float _3179 = (-0.0) - _1780;
                        float _3180 = (-0.0) - _1781;
                        float _3181 = (-0.0) - _1782;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3186 = _3185 * _3179;
                        float _3187 = _3185 * _3180;
                        float _3188 = _3185 * _3181;
                        float _3195 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                        float _3196 = 1.0 - _688;
                        float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                        float _3204 = _3203 * _3203;
                        float _3205 = _3204 * _3204;
                        float _3206 = _3186 + _3151;
                        float _3207 = _3187 + _3152;
                        float _3208 = _3188 + _3153;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3216 = dot(vec3(_628, _631, _634), vec3(_3186, _3187, _3188));
                        float _4576 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3220 = dot(vec3(_628, _631, _634), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                        float _4587 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                        float _3228 = _3164 * _3204;
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3154) + _3229;
                        float _4598 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3234 = 1.0 - _3204;
                        float _3244 = (0.5 / (((_3233 * ((_3219 * _3234) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3204) * _3219))) * _3233;
                        float _4609 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3255 = (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3227 * _3227) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125))) * _3160;
                        _3008 = (_3175 * _3123.x) + _3081;
                        _3009 = (_3175 * _3123.y) + _3082;
                        _3010 = (_3175 * _3123.z) + _3083;
                        _3005 = (_3255 * _3140.x) + _3078;
                        _3006 = (_3255 * _3140.y) + _3079;
                        _3007 = (_3255 * _3140.z) + _3080;
                        if (_3085 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3085;
                        }
                    }
                    frontier_phi_73_pred = _3010;
                    frontier_phi_73_pred_1 = _3009;
                    frontier_phi_73_pred_2 = _3008;
                    frontier_phi_73_pred_3 = _3007;
                    frontier_phi_73_pred_4 = _3006;
                    frontier_phi_73_pred_5 = _3005;
                }
                _2792 = frontier_phi_73_pred;
                _2790 = frontier_phi_73_pred_1;
                _2788 = frontier_phi_73_pred_2;
                _2786 = frontier_phi_73_pred_3;
                _2784 = frontier_phi_73_pred_4;
                _2782 = frontier_phi_73_pred_5;
                uint _2940 = _2939 + 1u;
                if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2933 = _2782;
                    _2934 = _2784;
                    _2935 = _2786;
                    _2936 = _2788;
                    _2937 = _2790;
                    _2938 = _2792;
                    _2939 = _2940;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
        }
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.z;
        uint _2798 = (_2796 >> 8u) & 15u;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((4294967295u << _2798) & _2702) == 0u)
        {
            _2901 = _2781;
            _2903 = _2783;
            _2905 = _2785;
            _2907 = _2787;
            _2909 = _2789;
            _2911 = _2791;
        }
        else
        {
            float _2926 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
            float _2927 = _2926 * _1780;
            float _2928 = _2926 * _1781;
            float _2929 = _2926 * _1782;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2798 < ((_2796 >> 12u) & 15u))
            {
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _3061 = _2781;
                float _3062 = _2783;
                float _3063 = _2785;
                float _3064 = _2787;
                float _3065 = _2789;
                float _3066 = _2791;
                uint _3067 = _2798;
                uint _3076;
                bool _3077;
                for (;;)
                {
                    _3076 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                    _3077 = _3076 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3077)
                    {
                        frontier_phi_84_pred = _3065;
                        frontier_phi_84_pred_1 = _3064;
                        frontier_phi_84_pred_2 = _3063;
                        frontier_phi_84_pred_3 = _3062;
                        frontier_phi_84_pred_4 = _3061;
                        frontier_phi_84_pred_5 = _3066;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3282 = _3061;
                        float _3283 = _3062;
                        float _3284 = _3063;
                        float _3285 = _3064;
                        float _3286 = _3065;
                        float _3287 = _3066;
                        uint _3288 = _3076;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3358;
                        vec4 _3374;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3299 = ((_3067 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3345 = (_3299 * 40u) + 16u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3361 = (_3299 * 40u) + 20u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3377 = (_3299 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3299 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_1782, _3409.z, fma(_1781, _3409.y, _3409.x * _1780)) + _3409.w;
                            _3422 = !((fma(_1782, _3390.z, fma(_1781, _3390.y, _3390.x * _1780)) + _3390.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3314.x - _1780;
                                float _3450 = _3314.y - _1781;
                                float _3451 = _3314.z - _1782;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3315 * _3315));
                                float _4620 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3467 = sqrt(_3452) * _3330.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_628, _631, _634))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_1782, _3358.z, fma(_1781, _3358.y, _3358.x * _1780)) + _3358.w) / _3421;
                                float _3481 = (fma(_1782, _3374.z, fma(_1781, _3374.y, _3374.x * _1780)) + _3374.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4636 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _688;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2927;
                                float _3511 = _3457 - _2928;
                                float _3512 = _3458 - _2929;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_628, _631, _634), vec3((-0.0) - _2927, (-0.0) - _2928, (-0.0) - _2929));
                                float _4647 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3524 = dot(vec3(_628, _631, _634), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4658 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_628, _631, _634), vec3(_3456, _3457, _3458))) + _3533;
                                float _4669 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4680 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3487 * _3330.y;
                                frontier_phi_90_pred_1 = _3487 * _3330.x;
                                frontier_phi_90_pred_2 = _3561 * _3342.z;
                                frontier_phi_90_pred_3 = _3561 * _3342.y;
                                frontier_phi_90_pred_4 = _3561 * _3342.x;
                                frontier_phi_90_pred_5 = _3487 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3569 = frontier_phi_90_pred;
                            _3568 = frontier_phi_90_pred_1;
                            _3567 = frontier_phi_90_pred_2;
                            _3566 = frontier_phi_90_pred_3;
                            _3565 = frontier_phi_90_pred_4;
                            _3570 = frontier_phi_90_pred_5;
                            _3272 = _3568 + _3285;
                            _3273 = _3569 + _3286;
                            _3274 = _3570 + _3287;
                            _3269 = _3565 + _3282;
                            _3270 = _3566 + _3283;
                            _3271 = _3567 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3273;
                        frontier_phi_84_pred_1 = _3272;
                        frontier_phi_84_pred_2 = _3271;
                        frontier_phi_84_pred_3 = _3270;
                        frontier_phi_84_pred_4 = _3269;
                        frontier_phi_84_pred_5 = _3274;
                    }
                    _2910 = frontier_phi_84_pred;
                    _2908 = frontier_phi_84_pred_1;
                    _2906 = frontier_phi_84_pred_2;
                    _2904 = frontier_phi_84_pred_3;
                    _2902 = frontier_phi_84_pred_4;
                    _2912 = frontier_phi_84_pred_5;
                    uint _3068 = _3067 + 1u;
                    if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3061 = _2902;
                        _3062 = _2904;
                        _3063 = _2906;
                        _3064 = _2908;
                        _3065 = _2910;
                        _3066 = _2912;
                        _3067 = _3068;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2912;
                frontier_phi_65_66_ladder_1 = _2908;
                frontier_phi_65_66_ladder_2 = _2910;
                frontier_phi_65_66_ladder_3 = _2904;
                frontier_phi_65_66_ladder_4 = _2902;
                frontier_phi_65_66_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_65_66_ladder = _2791;
                frontier_phi_65_66_ladder_1 = _2787;
                frontier_phi_65_66_ladder_2 = _2789;
                frontier_phi_65_66_ladder_3 = _2783;
                frontier_phi_65_66_ladder_4 = _2781;
                frontier_phi_65_66_ladder_5 = _2785;
            }
            _2901 = frontier_phi_65_66_ladder_4;
            _2903 = frontier_phi_65_66_ladder_3;
            _2905 = frontier_phi_65_66_ladder_5;
            _2907 = frontier_phi_65_66_ladder_1;
            _2909 = frontier_phi_65_66_ladder_2;
            _2911 = frontier_phi_65_66_ladder;
        }
        float _2916 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _2714 = (_2916 * _2907) + _2246;
        _2716 = (_2916 * _2909) + _2248;
        _2718 = (_2916 * _2911) + _2250;
        _2720 = ((_2901 * 0.039999999105930328369140625) * _2916) + _2569;
        _2722 = ((_2903 * 0.039999999105930328369140625) * _2916) + _2571;
        _2724 = ((_2905 * 0.039999999105930328369140625) * _2916) + _2573;
    }
    else
    {
        _2714 = _2246;
        _2716 = _2248;
        _2718 = _2250;
        _2720 = _2569;
        _2722 = _2571;
        _2724 = _2573;
    }
    float _4696 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4707 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4718 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _2741 = ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2714 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _672))) + ((_2720 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    float _2742 = ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2716 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _672))) + ((_2722 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    float _2743 = ((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2718 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _672))) + ((_2724 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    uint _2744 = _647 + 6u;
    float _2752 = _608 / cbSceneParam._m0[86u].x;
    float _2753 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2767 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, (log2((isnan(cbSceneParam._m0[77u].w) ? _530 : (isnan(_530) ? cbSceneParam._m0[77u].w : min(_530, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2769 = _2767.x;
    float _2770 = _2767.y;
    float _2771 = _2767.z;
    float _2772 = _2767.w;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_530 > cbSceneParam._m0[78u].w)
    {
        float _2806 = isnan(_530) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _530 : min(cbSceneParam._m0[80u].w, _530));
        float _2807 = _2806 / _530;
        float _2818 = _2807 * _580;
        float _2819 = _581 * _2807;
        float _2820 = (-0.0) - _2819;
        float _2821 = _2807 * _582;
        float _2823 = (cbSceneParam._m0[77u].w * _2820) / _2806;
        float _2824 = _2823 + cbSceneParam._m0[79u].w;
        float _2825 = cbSceneParam._m0[79u].w - _2819;
        float _2831 = sqrt(((_2818 * _2818) + (_2819 * _2819)) + (_2821 * _2821));
        float _2834 = (1.0 - (cbSceneParam._m0[77u].w / _2806)) * _2831;
        float _2839 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2841 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3018;
        if (abs((_2820 - _2823) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3018 = ((((_2824 > 0.0) ? exp2(_2839 * _2824) : (2.0 - exp2(_2841 * _2824))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2834;
        }
        else
        {
            float _2962 = 1.0 / cbSceneParam._m0[80u].x;
            float _2963 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : max(_2824, _2825));
            float _2964 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : min(_2824, _2825));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            _3018 = ((abs(_2831 / _2820) * cbSceneParam._m0[80u].y) * ((((_2973 - _2974) * 2.0) - ((exp2(_2839 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0)))) - exp2(_2839 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))))) * _2962)) - ((exp2(_2841 * _2973) - exp2(_2841 * _2974)) * _2962))) + (_2834 * cbSceneParam._m0[80u].z);
        }
        vec4 _3020 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, 1.0), 0.0);
        float _3029 = exp2((_3018 * (-1.44269502162933349609375)) * (1.0 - _3020.w));
        float _3030 = log2(_3029);
        float _3046 = log2(_2772);
        _2843 = (exp2(_3046 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].x)) * _3020.x) / cbSceneParam._m0[78u].x)) + _2769;
        _2845 = (exp2(_3046 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].y)) * _3020.y) / cbSceneParam._m0[78u].y)) + _2770;
        _2847 = (exp2(_3046 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].z)) * _3020.z) / cbSceneParam._m0[78u].z)) + _2771;
        _2849 = _3029 * _2772;
    }
    else
    {
        _2843 = _2769;
        _2845 = _2770;
        _2847 = _2771;
        _2849 = _2772;
    }
    bool _3056;
    vec4 _2859;
    vec4 _2881;
    float _2883;
    float _2887;
    float _2888;
    float _2889;
    float _2890;
    bool _2900;
    for (;;)
    {
        _2859 = cbMatDynParam._m0[0u];
        float _2861 = roundEven(_2859.y);
        bool _2862 = _2861 == 3.0;
        float _2863 = log2(_2849);
        float _2870 = exp2(_2863 * cbSceneParam._m0[78u].x) * _2741;
        float _2871 = exp2(_2863 * cbSceneParam._m0[78u].y) * _2742;
        float _2872 = exp2(_2863 * cbSceneParam._m0[78u].z) * _2743;
        float _2879 = _596 + (-0.5);
        _2881 = cbMtdParam._m0[1u];
        _2883 = _2881.y * _2879;
        float _2886 = (_2861 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2887 = _2886 * (_2862 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2843)));
        _2888 = _2886 * (_2862 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2845)));
        _2889 = _2886 * (_2862 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2847)));
        _2890 = _2879 * 0.999000012874603271484375;
        _2900 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2900)
        {
            if ((cbInstanceData._m0[_647 + 7u].x + _2890) < 0.5)
            {
                _3056 = true;
                break;
            }
        }
        uint _2997 = _648 + uint(_2859.w);
        if ((cbInstanceData._m0[_2997].w < 1.0) && ((cbInstanceData._m0[_2997].w + _2890) < 0.5))
        {
            _3056 = true;
            break;
        }
        if ((_2883 + 1.0) < _2881.x)
        {
            _3056 = true;
            break;
        }
        _3056 = false;
        break;
    }
    float _3260;
    if (_3056)
    {
        discard_state = true;
        _3260 = 0.0;
    }
    else
    {
        _3260 = cbInstanceData._m0[_2744].w;
    }
    SV_Target.x = _2887;
    SV_Target.y = _2888;
    SV_Target.z = _2889;
    SV_Target.w = _3260;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2744].w;
    discard_exit();
}


