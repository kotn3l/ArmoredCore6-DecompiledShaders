#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _811;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _226 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _231 = _226.z;
    float _235 = (_226.x * 2.0) + (-1.0);
    float _237 = (_226.y * 2.0) + (-1.0);
    float _238 = dot(vec2(_235, _237), vec2(_235, _237));
    float _3151 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _244 = sqrt(1.0 - (isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0))));
    vec4 _262 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _262.x * cbMtdParam._m0[9u].x;
    float _268 = _262.y * cbMtdParam._m0[9u].y;
    float _269 = _262.z * cbMtdParam._m0[9u].z;
    float _272 = fma(_244, _210, fma(_237, _202 * TANGENT.x, (_188 * _180) * _235));
    float _275 = fma(_244, _211, fma(_237, _202 * TANGENT.y, (_188 * _181) * _235));
    float _278 = fma(_244, _212, fma(_237, _202 * TANGENT.z, (_188 * _182) * _235));
    float _282 = inversesqrt(dot(vec3(_272, _275, _278), vec3(_272, _275, _278)));
    float _283 = _282 * _272;
    float _284 = _282 * _275;
    float _285 = _282 * _278;
    float _3162 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _286 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
    float _3173 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3184 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3195 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _305 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _395 = fma(_285, cbSceneParam._m0[5u].z, fma(_284, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _283));
    float _398 = fma(_285, cbSceneParam._m0[6u].z, fma(_284, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _283));
    float _401 = fma(_285, cbSceneParam._m0[7u].z, fma(_284, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _283));
    uint _414 = uint(roundEven(NORMAL.w)) * 13u;
    uint _416 = (_414 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _422 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0)))) * cbInstanceData._m0[_416].x;
    float _423 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0)))) * cbInstanceData._m0[_416].y;
    float _424 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0)))) * cbInstanceData._m0[_416].z;
    float _3206 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
    float _3217 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _3228 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    vec4 _436 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _439 = _436.x * TEXCOORD_9.w;
    float _440 = dot(vec3(_283, _284, _285), vec3(_365, _366, _367));
    float _443 = _440 * 2.0;
    float _447 = (_443 * _283) - _365;
    float _448 = (_443 * _284) - _366;
    float _449 = (_443 * _285) - _367;
    float _453 = abs(dot(vec3(_365, _366, _367), vec3(_283, _284, _285)));
    float _3239 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _455 = sqrt(_286);
    float _468 = exp2((_455 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_455 * 3.0));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _810;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _535 = fma(_508, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _500));
        float _539 = fma(_508, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _500));
        float _543 = fma(_508, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _500));
        float _568 = _500 + _283;
        float _569 = _504 + _284;
        float _570 = _508 + _285;
        float _580 = fma(_570, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568)) - _535;
        float _581 = fma(_570, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568)) - _539;
        float _582 = fma(_570, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568)) - _543;
        float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
        float _599 = ((_586 * _580) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_535 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _600 = ((_586 * _581) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_539 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _601 = ((_586 * _582) / cbModelParam._m0[34u].z) + ((((((_543 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        float _638 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_604.x + (-0.5));
        float _640 = _638 * (_604.y + (-0.5));
        float _641 = _638 * (_604.z + (-0.5));
        float _648 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_611.x + (-0.5));
        float _650 = _648 * (_611.y + (-0.5));
        float _651 = _648 * (_611.z + (-0.5));
        float _658 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_618.x + (-0.5));
        float _660 = _658 * (_618.y + (-0.5));
        float _661 = _658 * (_618.z + (-0.5));
        float _668 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_625.x + (-0.5));
        float _670 = _668 * (_625.y + (-0.5));
        float _671 = _668 * (_625.z + (-0.5));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = _639 * 0.5;
        float _676 = _649 * 0.5;
        float _677 = _659 * 0.5;
        float _678 = dot(vec3(_675, _676, _677), vec3(_675, _676, _677));
        float _683 = (_678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_678);
        float _692 = (dot(vec3(_283, _284, _285), vec3(_683 * _675, _683 * _676, _683 * _677)) + 1.0) * 0.5;
        float _3265 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _702 = sqrt(((_676 * _676) + (_675 * _675)) + (_677 * _677)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3276 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3287 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) * (_704 + 1.0))) + _709) * _672;
        float _719 = _640 * 0.5;
        float _720 = _650 * 0.5;
        float _721 = _660 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_283, _284, _285), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3298 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3309 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3320 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * (_746 + 1.0))) + _751) * _673;
        float _761 = _641 * 0.5;
        float _762 = _651 * 0.5;
        float _763 = _661 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_283, _284, _285), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3353 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_788 + 1.0))) + _793) * _674;
        _810 = _641;
        _812 = _640;
        _813 = _639;
        _814 = _651;
        _815 = _650;
        _816 = _649;
        _817 = _661;
        _818 = _660;
        _819 = _659;
        _820 = _674;
        _821 = _673;
        _822 = _672;
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
    }
    else
    {
        _810 = _811;
        _812 = _811;
        _813 = _811;
        _814 = _811;
        _815 = _811;
        _816 = _811;
        _817 = _811;
        _818 = _811;
        _819 = _811;
        _820 = _811;
        _821 = _811;
        _822 = _811;
        _823 = 0.0;
        _824 = 0.0;
        _825 = 0.0;
    }
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _851 = fma(_508, cbModelParam._m0[30u].z, fma(_504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _500));
        float _855 = fma(_508, cbModelParam._m0[31u].z, fma(_504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _500));
        float _859 = fma(_508, cbModelParam._m0[32u].z, fma(_504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _500));
        float _882 = _500 + _283;
        float _883 = _504 + _284;
        float _884 = _508 + _285;
        float _894 = fma(_884, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882)) - _851;
        float _895 = fma(_884, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882)) - _855;
        float _896 = fma(_884, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882)) - _859;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_851 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_855 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[35u].z) + ((((((_859 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _950 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_917.x + (-0.5));
        float _952 = _950 * (_917.y + (-0.5));
        float _953 = _950 * (_917.z + (-0.5));
        float _960 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_924.x + (-0.5));
        float _962 = _960 * (_924.y + (-0.5));
        float _963 = _960 * (_924.z + (-0.5));
        float _970 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_931.x + (-0.5));
        float _972 = _970 * (_931.y + (-0.5));
        float _973 = _970 * (_931.z + (-0.5));
        float _980 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_938.x + (-0.5));
        float _982 = _980 * (_938.y + (-0.5));
        float _983 = _980 * (_938.z + (-0.5));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = _951 * 0.5;
        float _988 = _961 * 0.5;
        float _989 = _971 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_283, _284, _285), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3416 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_1014 + 1.0))) + _1019) * _984;
        float _1029 = _952 * 0.5;
        float _1030 = _962 * 0.5;
        float _1031 = _972 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_283, _284, _285), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3449 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_1056 + 1.0))) + _1061) * _985;
        float _1071 = _953 * 0.5;
        float _1072 = _963 * 0.5;
        float _1073 = _973 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_283, _284, _285), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3482 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_1098 + 1.0))) + _1103) * _986;
        _1120 = _953;
        _1121 = _952;
        _1122 = _951;
        _1123 = _963;
        _1124 = _962;
        _1125 = _961;
        _1126 = _973;
        _1127 = _972;
        _1128 = _971;
        _1129 = _986;
        _1130 = _985;
        _1131 = _984;
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _811;
        _1121 = _811;
        _1122 = _811;
        _1123 = _811;
        _1124 = _811;
        _1125 = _811;
        _1126 = _811;
        _1127 = _811;
        _1128 = _811;
        _1129 = _811;
        _1130 = _811;
        _1131 = _811;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1167 = fma(_1146, cbSceneParam._m0[89u].z, fma(_1145, cbSceneParam._m0[89u].y, _1144 * cbSceneParam._m0[89u].x));
    float _1170 = fma(_1146, cbSceneParam._m0[90u].z, fma(_1145, cbSceneParam._m0[90u].y, _1144 * cbSceneParam._m0[90u].x));
    float _1173 = fma(_1146, cbSceneParam._m0[91u].z, fma(_1145, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1144));
    float _1188 = _447 * 0.5;
    float _1189 = _448 * 0.5;
    float _1190 = _449 * 0.5;
    float _1191 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1194 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1197 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1231;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1204 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_810, _814, _817, _820));
        float _1208 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_812, _815, _818, _821));
        float _1212 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_813, _816, _819, _822));
        float _1219 = dot(vec4(cbModelParam._m0[39u]), vec4(_1188, _1189, _1190, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1242;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1233 = dot(vec4(cbModelParam._m0[40u]), vec4(_1188, _1189, _1190, 1.0));
        _1242 = dot(vec3(isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1233) ? 0.0 : (isnan(0.0) ? _1233 : max(0.0, _1233))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1242 = 1.0;
    }
    float _1246 = (_1242 * cbModelParam._m0[1u].x) + (_1231 * (1.0 - cbModelParam._m0[1u].x));
    float _1256 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _286);
    float _1257 = isnan(_1256) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1256 : min(cbModelParam._m0[25u].z, _1256));
    float _1339;
    float _1341;
    float _1343;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1306 = fma(_508, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500)) + cbModelParam._m0[13u].w;
        float _1310 = fma(_508, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500)) + cbModelParam._m0[14u].w;
        float _1314 = fma(_508, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500)) + cbModelParam._m0[15u].w;
        float _1317 = fma(_449, cbModelParam._m0[13u].z, fma(_448, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _447));
        float _1320 = fma(_449, cbModelParam._m0[14u].z, fma(_448, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _447));
        float _1323 = fma(_449, cbModelParam._m0[15u].z, fma(_448, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _447));
        float _1351;
        if (_1317 > 0.0)
        {
            _1351 = abs((1.0 - _1306) / _1317);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1306 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1351 = frontier_phi_16_14_ladder;
        }
        float _1578;
        if (_1320 > 0.0)
        {
            _1578 = abs((1.0 - _1310) / _1320);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1310 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1578 = frontier_phi_25_21_ladder;
        }
        float _1824;
        if (_1323 > 0.0)
        {
            _1824 = abs((1.0 - _1314) / _1323);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1314 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1824 = frontier_phi_37_32_ladder;
        }
        float _1826 = isnan(_1578) ? _1351 : (isnan(_1351) ? _1578 : min(_1351, _1578));
        float _1827 = isnan(_1824) ? _1826 : (isnan(_1826) ? _1824 : min(_1826, _1824));
        float _1831 = (_1827 * _1317) + _1306;
        float _1832 = (_1827 * _1320) + _1310;
        float _1833 = (_1827 * _1323) + _1314;
        float _1834 = _1827 * 9.9999997473787516355514526367188e-05;
        float _1836 = (-1.0) - _1834;
        float _1838 = _1834 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1833 > _1838) || ((_1833 < _1836) || ((_1832 > _1838) || ((_1832 < _1836) || ((_1831 < _1836) || (_1831 > _1838))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1833, cbModelParam._m0[9u].z, fma(_1832, cbModelParam._m0[9u].y, _1831 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1833, cbModelParam._m0[10u].z, fma(_1832, cbModelParam._m0[10u].y, _1831 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1833, cbModelParam._m0[11u].z, fma(_1832, cbModelParam._m0[11u].y, _1831 * cbModelParam._m0[11u].x))), _1257);
            frontier_phi_15_37_ladder = _1957.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1957.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1957.x * cbModelParam._m0[1u].y;
        }
        _1339 = frontier_phi_15_37_ladder_2;
        _1341 = frontier_phi_15_37_ladder_1;
        _1343 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_447, _448, _449), _1257);
        _1339 = _1327.x * cbModelParam._m0[1u].y;
        _1341 = _1327.y * cbModelParam._m0[1u].y;
        _1343 = _1327.z * cbModelParam._m0[1u].y;
    }
    float _1347 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _286);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1347 : min(cbModelParam._m0[25u].w, _1347));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1405 = fma(_508, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500)) + cbModelParam._m0[21u].w;
        float _1409 = fma(_508, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500)) + cbModelParam._m0[22u].w;
        float _1413 = fma(_508, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500)) + cbModelParam._m0[23u].w;
        float _1416 = fma(_449, cbModelParam._m0[21u].z, fma(_448, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _447));
        float _1419 = fma(_449, cbModelParam._m0[22u].z, fma(_448, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _447));
        float _1422 = fma(_449, cbModelParam._m0[23u].z, fma(_448, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _447));
        float _1583;
        if (_1416 > 0.0)
        {
            _1583 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1583 = frontier_phi_27_23_ladder;
        }
        float _1851;
        if (_1419 > 0.0)
        {
            _1851 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1851 = frontier_phi_39_34_ladder;
        }
        float _2056;
        if (_1422 > 0.0)
        {
            _2056 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2056 = frontier_phi_48_45_ladder;
        }
        float _2058 = isnan(_1851) ? _1583 : (isnan(_1583) ? _1851 : min(_1583, _1851));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1416) + _1405;
        float _2064 = (_2059 * _1419) + _1409;
        float _2065 = (_2059 * _1422) + _1413;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2067 = (-1.0) - _2066;
        float _2069 = _2066 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2065 > _2069) || ((_2065 < _2067) || ((_2064 > _2069) || ((_2064 < _2067) || ((_2063 < _2067) || (_2063 > _2069))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2263 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2065, cbModelParam._m0[17u].z, fma(_2064, cbModelParam._m0[17u].y, _2063 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2065, cbModelParam._m0[18u].z, fma(_2064, cbModelParam._m0[18u].y, _2063 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2065, cbModelParam._m0[19u].z, fma(_2064, cbModelParam._m0[19u].y, _2063 * cbModelParam._m0[19u].x))), _1348);
            frontier_phi_24_48_ladder = _2263.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2263.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2263.x * cbModelParam._m0[1u].z;
        }
        _1441 = frontier_phi_24_48_ladder_2;
        _1443 = frontier_phi_24_48_ladder_1;
        _1445 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_447, _448, _449), _1348);
        _1441 = _1425.x * cbModelParam._m0[1u].z;
        _1443 = _1425.y * cbModelParam._m0[1u].z;
        _1445 = _1425.z * cbModelParam._m0[1u].z;
    }
    float _1457 = ((((1.0 - _468) * ((_455 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_468 * _455)) * _439;
    float _1458 = _1457 * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1459 = _1457 * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1460 = _1457 * ((cbModelParam._m0[1u].w * (_1445 - _1343)) + _1343);
    float _1463 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1459, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1459, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1459, cbSceneParam._m0[91u].y, _1458 * cbSceneParam._m0[91u].x));
    vec4 _1477 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_373, _374));
    float _1479 = _1477.w;
    float _1491 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1479);
    float _1492 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1479);
    float _1493 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1479);
    uvec4 _1497 = floatBitsToUint(cbInstanceData._m0[_414 + 5u]);
    uint _1499 = _1497.x * 14u;
    uint _1500 = _1499 + 13u;
    float _1507 = _439 + (-1.0);
    float _1512 = (cbLight._m0[_1500].x * _1507) + 1.0;
    float _1513 = (cbLight._m0[_1500].y * _1507) + 1.0;
    float _1514 = (cbLight._m0[_1500].z * _1507) + 1.0;
    float _1515 = (cbLight._m0[_1500].w * _1507) + 1.0;
    uint _1516 = _1499 + 5u;
    float _1522 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
    uint _1526 = _1499 + 4u;
    float _1536 = isnan(1.0) ? _1512 : (isnan(_1512) ? 1.0 : min(_1512, 1.0));
    uint _1540 = _1499 | 1u;
    float _1551 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_283, _284, _285));
    float _1554 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_283, _284, _285));
    float _3618 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
    float _3629 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _1559 = (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * 0.3183098733425140380859375;
    float _1561 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.3183098733425140380859375;
    float _1568 = ((cbLight._m0[_1516].x * _1522) * _1561) + (((cbLight._m0[_1526].x * _1491) * _1536) * _1559);
    float _1569 = ((_1522 * cbLight._m0[_1516].y) * _1561) + (((cbLight._m0[_1526].y * _1492) * _1536) * _1559);
    float _1570 = ((_1522 * cbLight._m0[_1516].z) * _1561) + (((cbLight._m0[_1526].z * _1493) * _1536) * _1559);
    uvec4 _1575 = floatBitsToUint(cbLight._m0[_1499 + 12u]);
    bool _1577 = _1575.x == 0u;
    float _1588;
    float _1590;
    float _1592;
    if (_1577)
    {
        _1588 = _1568;
        _1590 = _1569;
        _1592 = _1570;
    }
    else
    {
        uint _1596 = _1499 + 6u;
        float _1612 = (dot(vec3(cbLight._m0[_1499 + 2u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _1613 = _1612 * _1612;
        float _3640 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1615 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
        _1588 = (((cbLight._m0[_1596].x * 0.3183098733425140380859375) * _1614) * _1615) + _1568;
        _1590 = (((cbLight._m0[_1596].y * 0.3183098733425140380859375) * _1614) * _1615) + _1569;
        _1592 = (((cbLight._m0[_1596].z * 0.3183098733425140380859375) * _1614) * _1615) + _1570;
    }
    bool _1595 = _1575.y == 0u;
    float _1633;
    float _1635;
    float _1637;
    if (_1595)
    {
        _1633 = _1588;
        _1635 = _1590;
        _1637 = _1592;
    }
    else
    {
        uint _1795 = _1499 + 7u;
        float _1811 = (dot(vec3(cbLight._m0[_1499 + 3u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _1812 = _1811 * _1811;
        float _3656 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1814 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
        _1633 = (((cbLight._m0[_1795].x * 0.3183098733425140380859375) * _1813) * _1814) + _1588;
        _1635 = (((cbLight._m0[_1795].y * 0.3183098733425140380859375) * _1813) * _1814) + _1590;
        _1637 = (((cbLight._m0[_1795].z * 0.3183098733425140380859375) * _1813) * _1814) + _1592;
    }
    uint _1640 = _1499 + 8u;
    float _1653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1499].w)) * _286) * 0.949999988079071044921875);
    float _1654 = _1653 * _1653;
    float _1655 = cbLight._m0[_1499].x + _365;
    float _1656 = cbLight._m0[_1499].y + _366;
    float _1657 = cbLight._m0[_1499].z + _367;
    float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
    float _1662 = _1661 * _1655;
    float _1663 = _1661 * _1656;
    float _1664 = _1661 * _1657;
    float _1665 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1499].xyz));
    float _3672 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1668 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _1669 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _1670 = dot(vec3(_283, _284, _285), vec3(_1662, _1663, _1664));
    float _3694 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1673 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _1674 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_1662, _1663, _1664));
    float _3705 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1678 = _1654 * _1654;
    float _1682 = ((_1673 * _1673) * (_1678 + (-1.0))) + 1.0;
    float _1693 = (exp2(log2(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1694 = 1.0 - _1654;
    float _1705 = (0.5 / (((_1669 * ((_1668 * _1694) + _1654)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1694) + _1654) * _1668))) * _1668;
    float _3716 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1707 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1678 / ((_1682 * _1682) * 3.141590118408203125));
    uint _1721 = _1499 + 9u;
    float _1732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1540].w)) * _286) * 0.949999988079071044921875);
    float _1733 = _1732 * _1732;
    float _1734 = cbLight._m0[_1540].x + _365;
    float _1735 = cbLight._m0[_1540].y + _366;
    float _1736 = cbLight._m0[_1540].z + _367;
    float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
    float _1741 = _1740 * _1734;
    float _1742 = _1740 * _1735;
    float _1743 = _1740 * _1736;
    float _1744 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1540].xyz));
    float _3727 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1748 = dot(vec3(_283, _284, _285), vec3(_1741, _1742, _1743));
    float _3738 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_1741, _1742, _1743));
    float _3749 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1733 * _1733;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1769 = (exp2(log2(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1770 = 1.0 - _1733;
    float _1780 = (0.5 / (((_1669 * ((_1747 * _1770) + _1733)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1770) + _1733) * _1747))) * _1747;
    float _3760 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1782 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    float _1792 = (((_1769 * cbLight._m0[_1721].x) * _1782) * _1522) + ((((cbLight._m0[_1640].x * _1491) * _1693) * _1707) * _1536);
    float _1793 = (((_1769 * cbLight._m0[_1721].y) * _1782) * _1522) + ((((cbLight._m0[_1640].y * _1492) * _1693) * _1707) * _1536);
    float _1794 = (((_1769 * cbLight._m0[_1721].z) * _1782) * _1522) + ((((cbLight._m0[_1640].z * _1493) * _1693) * _1707) * _1536);
    float _1856;
    float _1858;
    float _1860;
    if (_1577)
    {
        _1856 = _1792;
        _1858 = _1793;
        _1860 = _1794;
    }
    else
    {
        uint _1862 = _1499 + 2u;
        uint _1866 = _1499 + 10u;
        float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _286) * 0.949999988079071044921875);
        float _1881 = _1880 * _1880;
        float _1882 = cbLight._m0[_1862].x + _365;
        float _1883 = cbLight._m0[_1862].y + _366;
        float _1884 = cbLight._m0[_1862].z + _367;
        float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
        float _1889 = _1888 * _1882;
        float _1890 = _1888 * _1883;
        float _1891 = _1888 * _1884;
        float _1892 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1862].xyz));
        float _3771 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1895 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1896 = dot(vec3(_283, _284, _285), vec3(_1889, _1890, _1891));
        float _3782 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1899 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1900 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_1889, _1890, _1891));
        float _3793 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1904 = _1881 * _1881;
        float _1908 = ((_1899 * _1899) * (_1904 + (-1.0))) + 1.0;
        float _1917 = (exp2(log2(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1918 = 1.0 - _1881;
        float _1928 = (0.5 / (((_1669 * ((_1895 * _1918) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1918) + _1881) * _1895))) * _1895;
        float _3804 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1930 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1904 / ((_1908 * _1908) * 3.141590118408203125));
        float _1931 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
        _1856 = (((_1917 * cbLight._m0[_1866].x) * _1930) * _1931) + _1792;
        _1858 = (((_1917 * cbLight._m0[_1866].y) * _1930) * _1931) + _1793;
        _1860 = (((_1917 * cbLight._m0[_1866].z) * _1930) * _1931) + _1794;
    }
    float _1966;
    float _1968;
    float _1970;
    if (_1595)
    {
        _1966 = _1856;
        _1968 = _1858;
        _1970 = _1860;
    }
    else
    {
        uint _1977 = _1499 + 3u;
        uint _1981 = _1499 + 11u;
        float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _286) * 0.949999988079071044921875);
        float _1996 = _1995 * _1995;
        float _1997 = cbLight._m0[_1977].x + _365;
        float _1998 = cbLight._m0[_1977].y + _366;
        float _1999 = cbLight._m0[_1977].z + _367;
        float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
        float _2004 = _2003 * _1997;
        float _2005 = _2003 * _1998;
        float _2006 = _2003 * _1999;
        float _2007 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1977].xyz));
        float _3820 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _2011 = dot(vec3(_283, _284, _285), vec3(_2004, _2005, _2006));
        float _3831 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _2015 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2004, _2005, _2006));
        float _3842 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2019 = _1996 * _1996;
        float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
        float _2032 = (exp2(log2(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2033 = 1.0 - _1996;
        float _2043 = (0.5 / (((_1669 * ((_2010 * _2033) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _2033) + _1996) * _2010))) * _2010;
        float _3853 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2045 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
        float _2046 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
        _1966 = (((_2032 * cbLight._m0[_1981].x) * _2045) * _2046) + _1856;
        _1968 = (((_2032 * cbLight._m0[_1981].y) * _2045) * _2046) + _1858;
        _1970 = (((_2032 * cbLight._m0[_1981].z) * _2045) * _2046) + _1860;
    }
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    float _2188;
    float _2190;
    if (_1497.y == 0u)
    {
        float _2121 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2122 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2121;
        float _2123 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2121;
        float _2124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2121;
        uvec4 _2136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2137 = _2136.x;
        uint _2148 = uint((float(_2136.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2137))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2137)));
        float _2158 = (log2(_2124 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2159 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        uint _2162 = uint(isnan(14.0) ? _2159 : (isnan(_2159) ? 14.0 : min(_2159, 14.0)));
        uvec4 _2167 = texelFetch(g_lightClusterGridBuffer, int(((_2162 << 2u) + (_2148 << 6u)) >> 2u));
        uint _2168 = _2167.x;
        uint _2169 = _2136.z;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        float _2276;
        float _2278;
        if (((((1u << ((_2169 >> 4u) & 15u)) + 4294967295u) & _2168) == 0u) || ((_2169 & 240u) == 0u))
        {
            _2268 = 0.0;
            _2270 = 0.0;
            _2272 = 0.0;
            _2274 = 0.0;
            _2276 = 0.0;
            _2278 = 0.0;
        }
        else
        {
            float _2269;
            float _2271;
            float _2273;
            float _2275;
            float _2277;
            float _2279;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            uint _2418 = 0u;
            uint _2427;
            bool _2428;
            for (;;)
            {
                _2427 = texelFetch(g_lightClassification, int((((_2162 << 5u) + (_2148 << 9u)) + (_2418 << 2u)) >> 2u)).x;
                _2428 = _2427 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2428)
                {
                    frontier_phi_63_pred = _2417;
                    frontier_phi_63_pred_1 = _2416;
                    frontier_phi_63_pred_2 = _2415;
                    frontier_phi_63_pred_3 = _2414;
                    frontier_phi_63_pred_4 = _2413;
                    frontier_phi_63_pred_5 = _2412;
                }
                else
                {
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    uint _2542;
                    _2536 = _2412;
                    _2537 = _2413;
                    _2538 = _2414;
                    _2539 = _2415;
                    _2540 = _2416;
                    _2541 = _2417;
                    _2542 = _2427;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    for (;;)
                    {
                        uint _2546 = uint(findLSB(_2542)) + (_2418 << 5u);
                        uint _2543 = (_2542 + 4294967295u) & _2542;
                        uint _2548 = _2546 * 48u;
                        vec4 _2562 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2548)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 3u)).x));
                        uint _2568 = (_2546 * 48u) + 4u;
                        vec4 _2581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2568)).x, texelFetch(g_PointLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2568 + 3u)).x));
                        uint _2587 = (_2546 * 48u) + 8u;
                        vec3 _2598 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2587)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 2u)).x));
                        float _2602 = _2562.x - _2122;
                        float _2603 = _2562.y - _2123;
                        float _2604 = _2562.z - _2124;
                        float _2605 = dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604));
                        float _2608 = inversesqrt(_2605);
                        float _2609 = _2608 * _2602;
                        float _2610 = _2608 * _2603;
                        float _2611 = _2608 * _2604;
                        float _2612 = dot(vec3(_395, _398, _401), vec3(_2609, _2610, _2611));
                        float _2617 = 1.0 - (_2605 * _2562.w);
                        float _3879 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                        float _2618 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                        float _2619 = sqrt(_2605) * _2581.w;
                        float _2622 = 1.39999997615814208984375 / (_2619 + 1.39999997615814208984375);
                        float _2623 = _2622 * _2622;
                        float _2626 = ((1.0 - _2623) * _2612) + _2623;
                        float _2629 = _2619 * _2619;
                        float _2633 = ((isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0))) * _2618) / ((_2629 * 0.699999988079071044921875) + 1.0);
                        float _2637 = (-0.0) - _2122;
                        float _2638 = (-0.0) - _2123;
                        float _2639 = (-0.0) - _2124;
                        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
                        float _2644 = _2643 * _2637;
                        float _2645 = _2643 * _2638;
                        float _2646 = _2643 * _2639;
                        float _2654 = exp2(log2(1.0 / ((_2629 * 3.5) + 5.0)) * 0.25);
                        float _2655 = 1.0 - _455;
                        float _2662 = sqrt(1.0 - ((1.0 - (_2655 * _2655)) * (1.0 - (_2654 * _2654))));
                        float _2663 = _2662 * _2662;
                        float _2664 = _2663 * _2663;
                        float _2665 = _2644 + _2609;
                        float _2666 = _2645 + _2610;
                        float _2667 = _2646 + _2611;
                        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
                        float _2675 = dot(vec3(_395, _398, _401), vec3(_2644, _2645, _2646));
                        float _3895 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                        float _2678 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                        float _2679 = dot(vec3(_395, _398, _401), vec3(_2671 * _2665, _2671 * _2666, _2671 * _2667));
                        float _3906 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2682 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                        float _2686 = ((_2682 * _2682) * (_2664 + (-1.0))) + 1.0;
                        float _2687 = _2622 * _2663;
                        float _2688 = _2687 * _2687;
                        float _2691 = ((1.0 - _2688) * _2612) + _2688;
                        float _3917 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2692 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
                        float _2693 = 1.0 - _2663;
                        float _2703 = (0.5 / (((_2692 * ((_2678 * _2693) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _2693) + _2663) * _2678))) * _2692;
                        float _3928 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                        float _2714 = (((_2664 * 3.1415927410125732421875) * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) / ((_2686 * _2686) * ((_2629 * 2.1991131305694580078125) + 3.141590118408203125))) * _2618;
                        _2471 = (_2633 * _2581.x) + _2539;
                        _2472 = (_2633 * _2581.y) + _2540;
                        _2473 = (_2633 * _2581.z) + _2541;
                        _2468 = (_2714 * _2598.x) + _2536;
                        _2469 = (_2714 * _2598.y) + _2537;
                        _2470 = (_2714 * _2598.z) + _2538;
                        if (_2543 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2536 = _2468;
                            _2537 = _2469;
                            _2538 = _2470;
                            _2539 = _2471;
                            _2540 = _2472;
                            _2541 = _2473;
                            _2542 = _2543;
                        }
                    }
                    frontier_phi_63_pred = _2473;
                    frontier_phi_63_pred_1 = _2472;
                    frontier_phi_63_pred_2 = _2471;
                    frontier_phi_63_pred_3 = _2470;
                    frontier_phi_63_pred_4 = _2469;
                    frontier_phi_63_pred_5 = _2468;
                }
                _2279 = frontier_phi_63_pred;
                _2277 = frontier_phi_63_pred_1;
                _2275 = frontier_phi_63_pred_2;
                _2273 = frontier_phi_63_pred_3;
                _2271 = frontier_phi_63_pred_4;
                _2269 = frontier_phi_63_pred_5;
                uint _2419 = _2418 + 1u;
                if (_2419 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2412 = _2269;
                    _2413 = _2271;
                    _2414 = _2273;
                    _2415 = _2275;
                    _2416 = _2277;
                    _2417 = _2279;
                    _2418 = _2419;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2268 = _2269;
            _2270 = _2271;
            _2272 = _2273;
            _2274 = _2275;
            _2276 = _2277;
            _2278 = _2279;
        }
        uvec4 _2282 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2283 = _2282.z;
        uint _2285 = (_2283 >> 8u) & 15u;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        if (((4294967295u << _2285) & _2168) == 0u)
        {
            _2380 = _2268;
            _2382 = _2270;
            _2384 = _2272;
            _2386 = _2274;
            _2388 = _2276;
            _2390 = _2278;
        }
        else
        {
            float _2405 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
            float _2406 = _2405 * _2122;
            float _2407 = _2405 * _2123;
            float _2408 = _2405 * _2124;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2285 < ((_2283 >> 12u) & 15u))
            {
                float _2381;
                float _2383;
                float _2385;
                float _2387;
                float _2389;
                float _2391;
                float _2519 = _2268;
                float _2520 = _2270;
                float _2521 = _2272;
                float _2522 = _2274;
                float _2523 = _2276;
                float _2524 = _2278;
                uint _2525 = _2285;
                uint _2534;
                bool _2535;
                for (;;)
                {
                    _2534 = texelFetch(g_lightClassification, int((((_2162 << 5u) + (_2148 << 9u)) + (_2525 << 2u)) >> 2u)).x;
                    _2535 = _2534 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2535)
                    {
                        frontier_phi_69_pred = _2524;
                        frontier_phi_69_pred_1 = _2523;
                        frontier_phi_69_pred_2 = _2522;
                        frontier_phi_69_pred_3 = _2521;
                        frontier_phi_69_pred_4 = _2520;
                        frontier_phi_69_pred_5 = _2519;
                    }
                    else
                    {
                        float _2719;
                        float _2720;
                        float _2721;
                        float _2722;
                        float _2723;
                        float _2724;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _2732 = _2519;
                        float _2733 = _2520;
                        float _2734 = _2521;
                        float _2735 = _2522;
                        float _2736 = _2523;
                        float _2737 = _2524;
                        uint _2738 = _2534;
                        uint _2739;
                        vec4 _2764;
                        float _2765;
                        vec4 _2780;
                        vec3 _2792;
                        vec4 _2808;
                        vec4 _2824;
                        float _2871;
                        bool _2872;
                        for (;;)
                        {
                            uint _2749 = ((_2525 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2738));
                            _2739 = (_2738 + 4294967295u) & _2738;
                            uint _2751 = _2749 * 40u;
                            _2764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 3u)).x));
                            _2765 = _2764.w;
                            uint _2767 = (_2749 * 40u) + 4u;
                            _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            uint _2782 = (_2749 * 40u) + 8u;
                            _2792 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 2u)).x));
                            uint _2795 = (_2749 * 40u) + 16u;
                            _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2811 = (_2749 * 40u) + 20u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            uint _2827 = (_2749 * 40u) + 24u;
                            vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2846 = (_2749 * 40u) + 28u;
                            vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            _2871 = fma(_2124, _2859.z, fma(_2123, _2859.y, _2859.x * _2122)) + _2859.w;
                            _2872 = !((fma(_2124, _2840.z, fma(_2123, _2840.y, _2840.x * _2122)) + _2840.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2872)
                            {
                                float _2899 = _2764.x - _2122;
                                float _2900 = _2764.y - _2123;
                                float _2901 = _2764.z - _2124;
                                float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                                float _2905 = inversesqrt(_2902);
                                float _2906 = _2905 * _2899;
                                float _2907 = _2905 * _2900;
                                float _2908 = _2905 * _2901;
                                float _2912 = 1.0 - (_2902 / (_2765 * _2765));
                                float _3939 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2913 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                                float _2917 = sqrt(_2902) * _2780.w;
                                float _2919 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                                float _2920 = _2919 * _2919;
                                float _2923 = ((1.0 - _2920) * dot(vec3(_2906, _2907, _2908), vec3(_395, _398, _401))) + _2920;
                                float _2926 = _2917 * _2917;
                                float _2930 = (fma(_2124, _2808.z, fma(_2123, _2808.y, _2808.x * _2122)) + _2808.w) / _2871;
                                float _2931 = (fma(_2124, _2824.z, fma(_2123, _2824.y, _2824.x * _2122)) + _2824.w) / _2871;
                                float _2935 = 1.0 - dot(vec2(_2930, _2931), vec2(_2930, _2931));
                                float _3955 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2936 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                                float _2937 = _2936 * (((isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))) * _2913) / ((_2926 * 0.699999988079071044921875) + 1.0));
                                float _2949 = exp2(log2(1.0 / ((_2926 * 3.5) + 5.0)) * 0.25);
                                float _2950 = 1.0 - _455;
                                float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                                float _2958 = _2957 * _2957;
                                float _2959 = _2958 * _2958;
                                float _2960 = _2906 - _2406;
                                float _2961 = _2907 - _2407;
                                float _2962 = _2908 - _2408;
                                float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                                float _2970 = dot(vec3(_395, _398, _401), vec3((-0.0) - _2406, (-0.0) - _2407, (-0.0) - _2408));
                                float _3966 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2973 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                                float _2974 = dot(vec3(_395, _398, _401), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                                float _3977 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2977 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                                float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                                float _2982 = _2919 * _2958;
                                float _2983 = _2982 * _2982;
                                float _2989 = ((1.0 - _2983) * dot(vec3(_395, _398, _401), vec3(_2906, _2907, _2908))) + _2983;
                                float _3988 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                                float _2991 = 1.0 - _2958;
                                float _3001 = (0.5 / (((_2990 * ((_2973 * _2991) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2958) * _2973))) * _2990;
                                float _3999 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3011 = (_2936 * _2913) * (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) / ((_2981 * _2981) * ((_2926 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2937 * _2780.z;
                                frontier_phi_75_pred_1 = _2937 * _2780.y;
                                frontier_phi_75_pred_2 = _2937 * _2780.x;
                                frontier_phi_75_pred_3 = _3011 * _2792.z;
                                frontier_phi_75_pred_4 = _3011 * _2792.y;
                                frontier_phi_75_pred_5 = _3011 * _2792.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3020 = frontier_phi_75_pred;
                            _3019 = frontier_phi_75_pred_1;
                            _3018 = frontier_phi_75_pred_2;
                            _3017 = frontier_phi_75_pred_3;
                            _3016 = frontier_phi_75_pred_4;
                            _3015 = frontier_phi_75_pred_5;
                            _2722 = _3018 + _2735;
                            _2723 = _3019 + _2736;
                            _2724 = _3020 + _2737;
                            _2719 = _3015 + _2732;
                            _2720 = _3016 + _2733;
                            _2721 = _3017 + _2734;
                            if (_2739 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2723;
                                _2737 = _2724;
                                _2738 = _2739;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2724;
                        frontier_phi_69_pred_1 = _2723;
                        frontier_phi_69_pred_2 = _2722;
                        frontier_phi_69_pred_3 = _2721;
                        frontier_phi_69_pred_4 = _2720;
                        frontier_phi_69_pred_5 = _2719;
                    }
                    _2391 = frontier_phi_69_pred;
                    _2389 = frontier_phi_69_pred_1;
                    _2387 = frontier_phi_69_pred_2;
                    _2385 = frontier_phi_69_pred_3;
                    _2383 = frontier_phi_69_pred_4;
                    _2381 = frontier_phi_69_pred_5;
                    uint _2526 = _2525 + 1u;
                    if (_2526 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2519 = _2381;
                        _2520 = _2383;
                        _2521 = _2385;
                        _2522 = _2387;
                        _2523 = _2389;
                        _2524 = _2391;
                        _2525 = _2526;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2391;
                frontier_phi_57_58_ladder_1 = _2389;
                frontier_phi_57_58_ladder_2 = _2387;
                frontier_phi_57_58_ladder_3 = _2385;
                frontier_phi_57_58_ladder_4 = _2383;
                frontier_phi_57_58_ladder_5 = _2381;
            }
            else
            {
                frontier_phi_57_58_ladder = _2278;
                frontier_phi_57_58_ladder_1 = _2276;
                frontier_phi_57_58_ladder_2 = _2274;
                frontier_phi_57_58_ladder_3 = _2272;
                frontier_phi_57_58_ladder_4 = _2270;
                frontier_phi_57_58_ladder_5 = _2268;
            }
            _2380 = frontier_phi_57_58_ladder_5;
            _2382 = frontier_phi_57_58_ladder_4;
            _2384 = frontier_phi_57_58_ladder_3;
            _2386 = frontier_phi_57_58_ladder_2;
            _2388 = frontier_phi_57_58_ladder_1;
            _2390 = frontier_phi_57_58_ladder;
        }
        float _2395 = isnan(1.0) ? _439 : (isnan(_439) ? 1.0 : min(_439, 1.0));
        _2180 = (_2395 * _2386) + _1633;
        _2182 = (_2395 * _2388) + _1635;
        _2184 = (_2395 * _2390) + _1637;
        _2186 = ((_2380 * 0.039999999105930328369140625) * _2395) + _1966;
        _2188 = ((_2382 * 0.039999999105930328369140625) * _2395) + _1968;
        _2190 = ((_2384 * 0.039999999105930328369140625) * _2395) + _1970;
    }
    else
    {
        _2180 = _1633;
        _2182 = _1635;
        _2184 = _1637;
        _2186 = _1966;
        _2188 = _1968;
        _2190 = _1970;
    }
    float _4015 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _4026 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4037 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    uint _2210 = _414 + 6u;
    float _2218 = _373 / cbSceneParam._m0[86u].x;
    float _2219 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2233 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2218, _2219, (log2((isnan(cbSceneParam._m0[77u].w) ? _305 : (isnan(_305) ? cbSceneParam._m0[77u].w : min(_305, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2235 = _2233.x;
    float _2236 = _2233.y;
    float _2237 = _2233.z;
    float _2238 = _2233.w;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    if (_305 > cbSceneParam._m0[78u].w)
    {
        float _2293 = isnan(_305) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _305 : min(cbSceneParam._m0[80u].w, _305));
        float _2294 = _2293 / _305;
        float _2305 = _2294 * _358;
        float _2306 = _359 * _2294;
        float _2307 = (-0.0) - _2306;
        float _2308 = _2294 * _360;
        float _2310 = (cbSceneParam._m0[77u].w * _2307) / _2293;
        float _2311 = _2310 + cbSceneParam._m0[79u].w;
        float _2312 = cbSceneParam._m0[79u].w - _2306;
        float _2318 = sqrt(((_2305 * _2305) + (_2306 * _2306)) + (_2308 * _2308));
        float _2321 = (1.0 - (cbSceneParam._m0[77u].w / _2293)) * _2318;
        float _2326 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2328 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2481;
        if (abs((_2307 - _2310) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2481 = ((((_2311 > 0.0) ? exp2(_2326 * _2311) : (2.0 - exp2(_2328 * _2311))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2321;
        }
        else
        {
            float _2441 = 1.0 / cbSceneParam._m0[80u].x;
            float _2442 = isnan(_2312) ? _2311 : (isnan(_2311) ? _2312 : max(_2311, _2312));
            float _2443 = isnan(_2312) ? _2311 : (isnan(_2311) ? _2312 : min(_2311, _2312));
            float _2452 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : min(_2442, 0.0));
            float _2453 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : min(_2443, 0.0));
            _2481 = ((abs(_2318 / _2307) * cbSceneParam._m0[80u].y) * ((((_2452 - _2453) * 2.0) - ((exp2(_2326 * (isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0)))) - exp2(_2326 * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0))))) * _2441)) - ((exp2(_2328 * _2452) - exp2(_2328 * _2453)) * _2441))) + (_2321 * cbSceneParam._m0[80u].z);
        }
        vec4 _2483 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2218, _2219, 1.0), 0.0);
        float _2492 = exp2((_2481 * (-1.44269502162933349609375)) * (1.0 - _2483.w));
        float _2493 = log2(_2492);
        float _2509 = log2(_2238);
        _2330 = (exp2(_2509 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].x)) * _2483.x) / cbSceneParam._m0[78u].x)) + _2235;
        _2332 = (exp2(_2509 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].y)) * _2483.y) / cbSceneParam._m0[78u].y)) + _2236;
        _2334 = (exp2(_2509 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].z)) * _2483.z) / cbSceneParam._m0[78u].z)) + _2237;
        _2336 = _2492 * _2238;
    }
    else
    {
        _2330 = _2235;
        _2332 = _2236;
        _2334 = _2237;
        _2336 = _2238;
    }
    float _2348 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2349 = _2348 == 3.0;
    float _2350 = log2(_2336);
    float _2357 = exp2(_2350 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2180 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _439))) + ((_2186 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2358 = exp2(_2350 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_2182 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _439))) + ((_2188 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2359 = exp2(_2350 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_2184 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _439))) + ((_2190 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2368 = (_2348 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2368 * (_2349 ? _2357 : (_2357 + (cbSceneParam._m0[72u].w * _2330)));
    SV_Target.y = _2368 * (_2349 ? _2358 : (_2358 + (cbSceneParam._m0[72u].w * _2332)));
    SV_Target.z = _2368 * (_2349 ? _2359 : (_2359 + (cbSceneParam._m0[72u].w * _2334)));
    SV_Target.w = cbInstanceData._m0[_2210].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2210].w;
}


