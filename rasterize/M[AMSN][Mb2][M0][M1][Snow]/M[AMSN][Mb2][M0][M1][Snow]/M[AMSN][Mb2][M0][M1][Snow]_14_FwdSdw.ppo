#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _813;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _233 = _228.z;
    float _237 = (_228.x * 2.0) + (-1.0);
    float _239 = (_228.y * 2.0) + (-1.0);
    float _240 = dot(vec2(_237, _239), vec2(_237, _239));
    float _3412 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _246 = sqrt(1.0 - (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))));
    vec4 _264 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _264.x * cbMtdParam._m0[9u].x;
    float _270 = _264.y * cbMtdParam._m0[9u].y;
    float _271 = _264.z * cbMtdParam._m0[9u].z;
    float _274 = fma(_246, _212, fma(_239, _204 * TANGENT.x, (_190 * _182) * _237));
    float _277 = fma(_246, _213, fma(_239, _204 * TANGENT.y, (_190 * _183) * _237));
    float _280 = fma(_246, _214, fma(_239, _204 * TANGENT.z, (_190 * _184) * _237));
    float _284 = inversesqrt(dot(vec3(_274, _277, _280), vec3(_274, _277, _280)));
    float _285 = _284 * _274;
    float _286 = _284 * _277;
    float _287 = _284 * _280;
    float _3423 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _288 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3445 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3456 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _307 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_287, cbSceneParam._m0[5u].z, fma(_286, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _285));
    float _400 = fma(_287, cbSceneParam._m0[6u].z, fma(_286, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _285));
    float _403 = fma(_287, cbSceneParam._m0[7u].z, fma(_286, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _285));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _418 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _424 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_418].x;
    float _425 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_418].y;
    float _426 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_418].z;
    float _3467 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    vec4 _438 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _441 = _438.x * TEXCOORD_9.w;
    float _442 = dot(vec3(_285, _286, _287), vec3(_367, _368, _369));
    float _445 = _442 * 2.0;
    float _449 = (_445 * _285) - _367;
    float _450 = (_445 * _286) - _368;
    float _451 = (_445 * _287) - _369;
    float _455 = abs(dot(vec3(_367, _368, _369), vec3(_285, _286, _287)));
    float _3500 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _457 = sqrt(_288);
    float _470 = exp2((_457 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_457 * 3.0));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _812;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _537 = fma(_510, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502));
        float _541 = fma(_510, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502));
        float _545 = fma(_510, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502));
        float _570 = _502 + _285;
        float _571 = _506 + _286;
        float _572 = _510 + _287;
        float _582 = fma(_572, cbModelParam._m0[26u].z, fma(_571, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570)) - _537;
        float _583 = fma(_572, cbModelParam._m0[27u].z, fma(_571, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570)) - _541;
        float _584 = fma(_572, cbModelParam._m0[28u].z, fma(_571, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570)) - _545;
        float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
        float _601 = ((_588 * _582) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_537 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _602 = ((_588 * _583) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_541 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _603 = ((_588 * _584) / cbModelParam._m0[34u].z) + ((((((_545 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        float _640 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_606.x + (-0.5));
        float _642 = _640 * (_606.y + (-0.5));
        float _643 = _640 * (_606.z + (-0.5));
        float _650 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_613.x + (-0.5));
        float _652 = _650 * (_613.y + (-0.5));
        float _653 = _650 * (_613.z + (-0.5));
        float _660 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_620.x + (-0.5));
        float _662 = _660 * (_620.y + (-0.5));
        float _663 = _660 * (_620.z + (-0.5));
        float _670 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_627.x + (-0.5));
        float _672 = _670 * (_627.y + (-0.5));
        float _673 = _670 * (_627.z + (-0.5));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _676 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _677 = _641 * 0.5;
        float _678 = _651 * 0.5;
        float _679 = _661 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _694 = (dot(vec3(_285, _286, _287), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _704 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3548 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_706 + 1.0))) + _711) * _674;
        float _721 = _642 * 0.5;
        float _722 = _652 * 0.5;
        float _723 = _662 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_285, _286, _287), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_675 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3581 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_748 + 1.0))) + _753) * _675;
        float _763 = _643 * 0.5;
        float _764 = _653 * 0.5;
        float _765 = _663 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_285, _286, _287), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_676 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3614 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_790 + 1.0))) + _795) * _676;
        _812 = _643;
        _814 = _642;
        _815 = _641;
        _816 = _653;
        _817 = _652;
        _818 = _651;
        _819 = _663;
        _820 = _662;
        _821 = _661;
        _822 = _676;
        _823 = _675;
        _824 = _674;
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _826 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _827 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
    }
    else
    {
        _812 = _813;
        _814 = _813;
        _815 = _813;
        _816 = _813;
        _817 = _813;
        _818 = _813;
        _819 = _813;
        _820 = _813;
        _821 = _813;
        _822 = _813;
        _823 = _813;
        _824 = _813;
        _825 = 0.0;
        _826 = 0.0;
        _827 = 0.0;
    }
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _853 = fma(_510, cbModelParam._m0[30u].z, fma(_506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _502));
        float _857 = fma(_510, cbModelParam._m0[31u].z, fma(_506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _502));
        float _861 = fma(_510, cbModelParam._m0[32u].z, fma(_506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _502));
        float _884 = _502 + _285;
        float _885 = _506 + _286;
        float _886 = _510 + _287;
        float _896 = fma(_886, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _884)) - _853;
        float _897 = fma(_886, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _884)) - _857;
        float _898 = fma(_886, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _884)) - _861;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_853 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_857 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[35u].z) + ((((((_861 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _952 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_919.x + (-0.5));
        float _954 = _952 * (_919.y + (-0.5));
        float _955 = _952 * (_919.z + (-0.5));
        float _962 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_926.x + (-0.5));
        float _964 = _962 * (_926.y + (-0.5));
        float _965 = _962 * (_926.z + (-0.5));
        float _972 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_933.x + (-0.5));
        float _974 = _972 * (_933.y + (-0.5));
        float _975 = _972 * (_933.z + (-0.5));
        float _982 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_940.x + (-0.5));
        float _984 = _982 * (_940.y + (-0.5));
        float _985 = _982 * (_940.z + (-0.5));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = _953 * 0.5;
        float _990 = _963 * 0.5;
        float _991 = _973 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_285, _286, _287), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3677 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1016 + 1.0))) + _1021) * _986;
        float _1031 = _954 * 0.5;
        float _1032 = _964 * 0.5;
        float _1033 = _974 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_285, _286, _287), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3710 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1058 + 1.0))) + _1063) * _987;
        float _1073 = _955 * 0.5;
        float _1074 = _965 * 0.5;
        float _1075 = _975 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_285, _286, _287), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3743 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1100 + 1.0))) + _1105) * _988;
        _1122 = _955;
        _1123 = _954;
        _1124 = _953;
        _1125 = _965;
        _1126 = _964;
        _1127 = _963;
        _1128 = _975;
        _1129 = _974;
        _1130 = _973;
        _1131 = _988;
        _1132 = _987;
        _1133 = _986;
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1136 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
    }
    else
    {
        _1122 = _813;
        _1123 = _813;
        _1124 = _813;
        _1125 = _813;
        _1126 = _813;
        _1127 = _813;
        _1128 = _813;
        _1129 = _813;
        _1130 = _813;
        _1131 = _813;
        _1132 = _813;
        _1133 = _813;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
    }
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _826)) + _826;
    float _1148 = (cbModelParam._m0[1u].x * (_1136 - _827)) + _827;
    float _1169 = fma(_1148, cbSceneParam._m0[89u].z, fma(_1147, cbSceneParam._m0[89u].y, _1146 * cbSceneParam._m0[89u].x));
    float _1172 = fma(_1148, cbSceneParam._m0[90u].z, fma(_1147, cbSceneParam._m0[90u].y, _1146 * cbSceneParam._m0[90u].x));
    float _1175 = fma(_1148, cbSceneParam._m0[91u].z, fma(_1147, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1146));
    float _1190 = _449 * 0.5;
    float _1191 = _450 * 0.5;
    float _1192 = _451 * 0.5;
    float _1193 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_1124, _1127, _1130, _1133));
    float _1196 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1199 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1233;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1206 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_812, _816, _819, _822));
        float _1210 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_814, _817, _820, _823));
        float _1214 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_815, _818, _821, _824));
        float _1221 = dot(vec4(cbModelParam._m0[39u]), vec4(_1190, _1191, _1192, 1.0));
        _1233 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1233 = 1.0;
    }
    float _1244;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1235 = dot(vec4(cbModelParam._m0[40u]), vec4(_1190, _1191, _1192, 1.0));
        _1244 = dot(vec3(isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1235) ? 0.0 : (isnan(0.0) ? _1235 : max(0.0, _1235))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1244 = 1.0;
    }
    float _1248 = (_1244 * cbModelParam._m0[1u].x) + (_1233 * (1.0 - cbModelParam._m0[1u].x));
    float _1258 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _288);
    float _1259 = isnan(_1258) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1258 : min(cbModelParam._m0[25u].z, _1258));
    float _1341;
    float _1343;
    float _1345;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1308 = fma(_510, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502)) + cbModelParam._m0[13u].w;
        float _1312 = fma(_510, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502)) + cbModelParam._m0[14u].w;
        float _1316 = fma(_510, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502)) + cbModelParam._m0[15u].w;
        float _1319 = fma(_451, cbModelParam._m0[13u].z, fma(_450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _449));
        float _1322 = fma(_451, cbModelParam._m0[14u].z, fma(_450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _449));
        float _1325 = fma(_451, cbModelParam._m0[15u].z, fma(_450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _449));
        float _1353;
        if (_1319 > 0.0)
        {
            _1353 = abs((1.0 - _1308) / _1319);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1308 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1353 = frontier_phi_16_14_ladder;
        }
        float _1527;
        if (_1322 > 0.0)
        {
            _1527 = abs((1.0 - _1312) / _1322);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1312 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1527 = frontier_phi_25_21_ladder;
        }
        float _1823;
        if (_1325 > 0.0)
        {
            _1823 = abs((1.0 - _1316) / _1325);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1316 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1823 = frontier_phi_37_32_ladder;
        }
        float _1825 = isnan(_1527) ? _1353 : (isnan(_1353) ? _1527 : min(_1353, _1527));
        float _1826 = isnan(_1823) ? _1825 : (isnan(_1825) ? _1823 : min(_1825, _1823));
        float _1830 = (_1826 * _1319) + _1308;
        float _1831 = (_1826 * _1322) + _1312;
        float _1832 = (_1826 * _1325) + _1316;
        float _1833 = _1826 * 9.9999997473787516355514526367188e-05;
        float _1835 = (-1.0) - _1833;
        float _1837 = _1833 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1832 > _1837) || ((_1832 < _1835) || ((_1831 > _1837) || ((_1831 < _1835) || ((_1830 < _1835) || (_1830 > _1837))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1977 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1832, cbModelParam._m0[9u].z, fma(_1831, cbModelParam._m0[9u].y, _1830 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1832, cbModelParam._m0[10u].z, fma(_1831, cbModelParam._m0[10u].y, _1830 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1832, cbModelParam._m0[11u].z, fma(_1831, cbModelParam._m0[11u].y, _1830 * cbModelParam._m0[11u].x))), _1259);
            frontier_phi_15_37_ladder = _1977.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1977.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1977.z * cbModelParam._m0[1u].y;
        }
        _1341 = frontier_phi_15_37_ladder_1;
        _1343 = frontier_phi_15_37_ladder;
        _1345 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1329 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_449, _450, _451), _1259);
        _1341 = _1329.x * cbModelParam._m0[1u].y;
        _1343 = _1329.y * cbModelParam._m0[1u].y;
        _1345 = _1329.z * cbModelParam._m0[1u].y;
    }
    float _1349 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _288);
    float _1350 = isnan(_1349) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1349 : min(cbModelParam._m0[25u].w, _1349));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1407 = fma(_510, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502)) + cbModelParam._m0[21u].w;
        float _1411 = fma(_510, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502)) + cbModelParam._m0[22u].w;
        float _1415 = fma(_510, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502)) + cbModelParam._m0[23u].w;
        float _1418 = fma(_451, cbModelParam._m0[21u].z, fma(_450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _449));
        float _1421 = fma(_451, cbModelParam._m0[22u].z, fma(_450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _449));
        float _1424 = fma(_451, cbModelParam._m0[23u].z, fma(_450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _449));
        float _1532;
        if (_1418 > 0.0)
        {
            _1532 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1532 = frontier_phi_27_23_ladder;
        }
        float _1850;
        if (_1421 > 0.0)
        {
            _1850 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1850 = frontier_phi_39_34_ladder;
        }
        float _2177;
        if (_1424 > 0.0)
        {
            _2177 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2177 = frontier_phi_49_46_ladder;
        }
        float _2179 = isnan(_1850) ? _1532 : (isnan(_1532) ? _1850 : min(_1532, _1850));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1418) + _1407;
        float _2185 = (_2180 * _1421) + _1411;
        float _2186 = (_2180 * _1424) + _1415;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2186, cbModelParam._m0[17u].z, fma(_2185, cbModelParam._m0[17u].y, _2184 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2186, cbModelParam._m0[18u].z, fma(_2185, cbModelParam._m0[18u].y, _2184 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2186, cbModelParam._m0[19u].z, fma(_2185, cbModelParam._m0[19u].y, _2184 * cbModelParam._m0[19u].x))), _1350);
            frontier_phi_24_49_ladder = _2304.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2304.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2304.x * cbModelParam._m0[1u].z;
        }
        _1443 = frontier_phi_24_49_ladder_2;
        _1445 = frontier_phi_24_49_ladder_1;
        _1447 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_449, _450, _451), _1350);
        _1443 = _1427.x * cbModelParam._m0[1u].z;
        _1445 = _1427.y * cbModelParam._m0[1u].z;
        _1447 = _1427.z * cbModelParam._m0[1u].z;
    }
    float _1459 = ((((1.0 - _470) * ((_457 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_470 * _457)) * _441;
    float _1460 = _1459 * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1461 = _1459 * ((cbModelParam._m0[1u].w * (_1445 - _1343)) + _1343);
    float _1462 = _1459 * ((cbModelParam._m0[1u].w * (_1447 - _1345)) + _1345);
    float _1465 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, _1460 * cbSceneParam._m0[91u].x));
    float _1506 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1510 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1514 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1518 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1519 = _1506 / _1518;
    float _1520 = _1510 / _1518;
    float _1521 = _1514 / _1518;
    float _1668;
    float _1669;
    float _1670;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1548 = ((uint(_1521 > cbSceneParam._m0[59u].y) + uint(_1521 > cbSceneParam._m0[59u].x)) + uint(_1521 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1549 = _1548 + 43u;
        uint _1557 = _1548 + 44u;
        uint _1565 = _1548 + 45u;
        uint _1573 = _1548 + 46u;
        float _1584 = fma(_1518, cbSceneParam._m0[_1549].w, fma(_1514, cbSceneParam._m0[_1549].z, fma(_1510, cbSceneParam._m0[_1549].y, _1506 * cbSceneParam._m0[_1549].x)));
        float _1588 = fma(_1518, cbSceneParam._m0[_1557].w, fma(_1514, cbSceneParam._m0[_1557].z, fma(_1510, cbSceneParam._m0[_1557].y, _1506 * cbSceneParam._m0[_1557].x)));
        float _1596 = fma(_1518, cbSceneParam._m0[_1573].w, fma(_1514, cbSceneParam._m0[_1573].z, fma(_1510, cbSceneParam._m0[_1573].y, _1506 * cbSceneParam._m0[_1573].x)));
        float _1601 = cbSceneParam._m0[33u].z * _1596;
        float _1603 = cbSceneParam._m0[33u].w * _1596;
        float _1606 = fma(_1518, cbSceneParam._m0[_1565].w, fma(_1514, cbSceneParam._m0[_1565].z, fma(_1510, cbSceneParam._m0[_1565].y, _1506 * cbSceneParam._m0[_1565].x))) / _1596;
        float _1654 = (cbSceneParam._m0[33u].x - sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521))) * cbSceneParam._m0[33u].y;
        float _3869 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1661 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1601 + _1584) / _1596, (_1603 + _1588) / _1596), _1606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1603 + _1584) / _1596, (_1588 - _1601) / _1596), _1606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1584 - _1601) / _1596, (_1588 - _1603) / _1596), _1606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1584 - _1603) / _1596, (_1601 + _1588) / _1596), _1606), 0.0)).x), vec4(0.25)));
        _1668 = 1.0 - (_1661 * cbSceneParam._m0[34u].x);
        _1669 = 1.0 - (_1661 * cbSceneParam._m0[34u].y);
        _1670 = 1.0 - (_1661 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1668 = 1.0;
        _1669 = 1.0;
        _1670 = 1.0;
    }
    float _1734;
    float _1736;
    float _1738;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1722 = fma(_1518, cbSceneParam._m0[63u].w, fma(_1514, cbSceneParam._m0[63u].z, fma(_1510, cbSceneParam._m0[63u].y, _1506 * cbSceneParam._m0[63u].x)));
        float _1723 = fma(_1518, cbSceneParam._m0[60u].w, fma(_1514, cbSceneParam._m0[60u].z, fma(_1510, cbSceneParam._m0[60u].y, _1506 * cbSceneParam._m0[60u].x))) / _1722;
        float _1724 = fma(_1518, cbSceneParam._m0[61u].w, fma(_1514, cbSceneParam._m0[61u].z, fma(_1510, cbSceneParam._m0[61u].y, _1506 * cbSceneParam._m0[61u].x))) / _1722;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1723 >= cbSceneParam._m0[64u].x) && (_1724 >= cbSceneParam._m0[64u].y)) && (_1723 <= cbSceneParam._m0[64u].z)) && (_1724 <= cbSceneParam._m0[64u].w))
        {
            float _1863 = fma(_1518, cbSceneParam._m0[62u].w, fma(_1514, cbSceneParam._m0[62u].z, fma(_1510, cbSceneParam._m0[62u].y, _1506 * cbSceneParam._m0[62u].x))) / _1722;
            float _1867 = isnan(cbSceneParam._m0[41u].w) ? _1863 : (isnan(_1863) ? cbSceneParam._m0[41u].w : max(_1863, cbSceneParam._m0[41u].w));
            float _1910 = (cbSceneParam._m0[33u].x - sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521))) * cbSceneParam._m0[33u].y;
            float _3885 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
            float _1917 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1723, cbSceneParam._m0[33u].w + _1724), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1723, _1724 - cbSceneParam._m0[33u].z), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1723 - cbSceneParam._m0[33u].z, _1724 - cbSceneParam._m0[33u].w), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1723 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1724), _1867), 0.0)).x), vec4(0.25)));
            float _1921 = 1.0 - (_1917 * cbSceneParam._m0[34u].x);
            float _1922 = 1.0 - (_1917 * cbSceneParam._m0[34u].y);
            float _1923 = 1.0 - (_1917 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1922) ? _1669 : (isnan(_1669) ? _1922 : min(_1669, _1922));
            frontier_phi_36_35_ladder_1 = isnan(_1923) ? _1670 : (isnan(_1670) ? _1923 : min(_1670, _1923));
            frontier_phi_36_35_ladder_2 = isnan(_1921) ? _1668 : (isnan(_1668) ? _1921 : min(_1668, _1921));
        }
        else
        {
            frontier_phi_36_35_ladder = _1669;
            frontier_phi_36_35_ladder_1 = _1670;
            frontier_phi_36_35_ladder_2 = _1668;
        }
        _1734 = frontier_phi_36_35_ladder_2;
        _1736 = frontier_phi_36_35_ladder;
        _1738 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1734 = _1668;
        _1736 = _1669;
        _1738 = _1670;
    }
    uvec4 _1743 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1745 = _1743.x * 14u;
    uint _1746 = _1745 + 13u;
    float _1753 = _441 + (-1.0);
    float _1758 = (cbLight._m0[_1746].x * _1753) + 1.0;
    float _1759 = (cbLight._m0[_1746].y * _1753) + 1.0;
    float _1760 = (cbLight._m0[_1746].z * _1753) + 1.0;
    float _1761 = (cbLight._m0[_1746].w * _1753) + 1.0;
    uint _1762 = _1745 + 5u;
    float _1768 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1772 = _1745 + 4u;
    float _1782 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1786 = _1745 | 1u;
    float _1797 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_285, _286, _287));
    float _1800 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_285, _286, _287));
    float _3921 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _3932 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1805 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1807 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1814 = ((cbLight._m0[_1762].x * _1768) * _1807) + (((cbLight._m0[_1772].x * _1734) * _1782) * _1805);
    float _1815 = ((_1768 * cbLight._m0[_1762].y) * _1807) + (((cbLight._m0[_1772].y * _1736) * _1782) * _1805);
    float _1816 = ((_1768 * cbLight._m0[_1762].z) * _1807) + (((cbLight._m0[_1772].z * _1738) * _1782) * _1805);
    uvec4 _1820 = floatBitsToUint(cbLight._m0[_1745 + 12u]);
    bool _1822 = _1820.x == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1822)
    {
        _1924 = _1814;
        _1926 = _1815;
        _1928 = _1816;
    }
    else
    {
        uint _1932 = _1745 + 6u;
        float _1948 = (dot(vec3(cbLight._m0[_1745 + 2u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _3943 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1951 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1924 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1814;
        _1926 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1815;
        _1928 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1816;
    }
    bool _1931 = _1820.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1931)
    {
        _1986 = _1924;
        _1988 = _1926;
        _1990 = _1928;
    }
    else
    {
        uint _2148 = _1745 + 7u;
        float _2164 = (dot(vec3(cbLight._m0[_1745 + 3u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _2165 = _2164 * _2164;
        float _3959 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2167 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1986 = (((cbLight._m0[_2148].x * 0.3183098733425140380859375) * _2166) * _2167) + _1924;
        _1988 = (((cbLight._m0[_2148].y * 0.3183098733425140380859375) * _2166) * _2167) + _1926;
        _1990 = (((cbLight._m0[_2148].z * 0.3183098733425140380859375) * _2166) * _2167) + _1928;
    }
    uint _1993 = _1745 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _288) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1745].x + _367;
    float _2009 = cbLight._m0[_1745].y + _368;
    float _2010 = cbLight._m0[_1745].z + _369;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1745].xyz));
    float _3975 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _2022 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _2023 = dot(vec3(_285, _286, _287), vec3(_2015, _2016, _2017));
    float _3997 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_2015, _2016, _2017));
    float _4008 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2007;
    float _2058 = (0.5 / (((_2022 * ((_2021 * _2047) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2047) + _2007) * _2021))) * _2021;
    float _4019 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2074 = _1745 + 9u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _288) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1786].x + _367;
    float _2088 = cbLight._m0[_1786].y + _368;
    float _2089 = cbLight._m0[_1786].z + _369;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1786].xyz));
    float _4030 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _2101 = dot(vec3(_285, _286, _287), vec3(_2094, _2095, _2096));
    float _4041 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_2094, _2095, _2096));
    float _4052 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2086 * _2086;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2086;
    float _2133 = (0.5 / (((_2022 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2123) + _2086) * _2100))) * _2100;
    float _4063 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    float _2145 = (((_2122 * cbLight._m0[_2074].x) * _2135) * _1768) + ((((cbLight._m0[_1993].x * _1734) * _2046) * _2060) * _1782);
    float _2146 = (((_2122 * cbLight._m0[_2074].y) * _2135) * _1768) + ((((cbLight._m0[_1993].y * _1736) * _2046) * _2060) * _1782);
    float _2147 = (((_2122 * cbLight._m0[_2074].z) * _2135) * _1768) + ((((cbLight._m0[_1993].z * _1738) * _2046) * _2060) * _1782);
    float _2203;
    float _2205;
    float _2207;
    if (_1822)
    {
        _2203 = _2145;
        _2205 = _2146;
        _2207 = _2147;
    }
    else
    {
        uint _2209 = _1745 + 2u;
        uint _2213 = _1745 + 10u;
        float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _288) * 0.949999988079071044921875);
        float _2228 = _2227 * _2227;
        float _2229 = cbLight._m0[_2209].x + _367;
        float _2230 = cbLight._m0[_2209].y + _368;
        float _2231 = cbLight._m0[_2209].z + _369;
        float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
        float _2236 = _2235 * _2229;
        float _2237 = _2235 * _2230;
        float _2238 = _2235 * _2231;
        float _2239 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_2209].xyz));
        float _4074 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2243 = dot(vec3(_285, _286, _287), vec3(_2236, _2237, _2238));
        float _4085 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
        float _4096 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2251 = _2228 * _2228;
        float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
        float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2265 = 1.0 - _2228;
        float _2275 = (0.5 / (((_2022 * ((_2242 * _2265) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2265) + _2228) * _2242))) * _2242;
        float _4107 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2203 = (((_2264 * cbLight._m0[_2213].x) * _2277) * _2278) + _2145;
        _2205 = (((_2264 * cbLight._m0[_2213].y) * _2277) * _2278) + _2146;
        _2207 = (((_2264 * cbLight._m0[_2213].z) * _2277) * _2278) + _2147;
    }
    float _2309;
    float _2311;
    float _2313;
    if (_1931)
    {
        _2309 = _2203;
        _2311 = _2205;
        _2313 = _2207;
    }
    else
    {
        uint _2320 = _1745 + 3u;
        uint _2324 = _1745 + 11u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _288) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _367;
        float _2341 = cbLight._m0[_2320].y + _368;
        float _2342 = cbLight._m0[_2320].z + _369;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_2320].xyz));
        float _4123 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2354 = dot(vec3(_285, _286, _287), vec3(_2347, _2348, _2349));
        float _4134 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4145 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2375 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2376 = 1.0 - _2339;
        float _2386 = (0.5 / (((_2022 * ((_2353 * _2376) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2376) + _2339) * _2353))) * _2353;
        float _4156 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2309 = (((_2375 * cbLight._m0[_2324].x) * _2388) * _2389) + _2203;
        _2311 = (((_2375 * cbLight._m0[_2324].y) * _2388) * _2389) + _2205;
        _2313 = (((_2375 * cbLight._m0[_2324].z) * _2388) * _2389) + _2207;
    }
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    if (_1743.y == 0u)
    {
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.x;
        uint _2422 = uint((float(_2410.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2411))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2411)));
        float _2432 = (log2(_1521 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2433 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        uint _2436 = uint(isnan(14.0) ? _2433 : (isnan(_2433) ? 14.0 : min(_2433, 14.0)));
        uvec4 _2441 = texelFetch(g_lightClusterGridBuffer, int(((_2436 << 2u) + (_2422 << 6u)) >> 2u));
        uint _2442 = _2441.x;
        uint _2443 = _2410.z;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((((1u << ((_2443 >> 4u) & 15u)) + 4294967295u) & _2442) == 0u) || ((_2443 & 240u) == 0u))
        {
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
        }
        else
        {
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            uint _2671 = 0u;
            uint _2680;
            bool _2681;
            for (;;)
            {
                _2680 = texelFetch(g_lightClassification, int((((_2436 << 5u) + (_2422 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                _2681 = _2680 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2681)
                {
                    frontier_phi_68_pred = _2670;
                    frontier_phi_68_pred_1 = _2669;
                    frontier_phi_68_pred_2 = _2668;
                    frontier_phi_68_pred_3 = _2666;
                    frontier_phi_68_pred_4 = _2665;
                    frontier_phi_68_pred_5 = _2667;
                }
                else
                {
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    uint _2795;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2680;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    for (;;)
                    {
                        uint _2799 = uint(findLSB(_2795)) + (_2671 << 5u);
                        uint _2796 = (_2795 + 4294967295u) & _2795;
                        uint _2801 = _2799 * 48u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2821 = (_2799 * 48u) + 4u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2840 = (_2799 * 48u) + 8u;
                        vec3 _2851 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x));
                        float _2855 = _2815.x - _1519;
                        float _2856 = _2815.y - _1520;
                        float _2857 = _2815.z - _1521;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_397, _400, _403), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2815.w);
                        float _4182 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2872 = sqrt(_2858) * _2834.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2865) + _2876;
                        float _2882 = _2872 * _2872;
                        float _2886 = ((isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))) * _2871) / ((_2882 * 0.699999988079071044921875) + 1.0);
                        float _2890 = (-0.0) - _1519;
                        float _2891 = (-0.0) - _1520;
                        float _2892 = (-0.0) - _1521;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2906 = exp2(log2(1.0 / ((_2882 * 3.5) + 5.0)) * 0.25);
                        float _2907 = 1.0 - _457;
                        float _2914 = sqrt(1.0 - ((1.0 - (_2907 * _2907)) * (1.0 - (_2906 * _2906))));
                        float _2915 = _2914 * _2914;
                        float _2916 = _2915 * _2915;
                        float _2917 = _2897 + _2862;
                        float _2918 = _2898 + _2863;
                        float _2919 = _2899 + _2864;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2927 = dot(vec3(_397, _400, _403), vec3(_2897, _2898, _2899));
                        float _4198 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2931 = dot(vec3(_397, _400, _403), vec3(_2923 * _2917, _2923 * _2918, _2923 * _2919));
                        float _4209 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2938 = ((_2934 * _2934) * (_2916 + (-1.0))) + 1.0;
                        float _2939 = _2875 * _2915;
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2865) + _2940;
                        float _4220 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2945 = 1.0 - _2915;
                        float _2955 = (0.5 / (((_2944 * ((_2930 * _2945) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2944 * _2945) + _2915) * _2930))) * _2944;
                        float _4231 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2966 = (((_2916 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2938 * _2938) * ((_2882 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2724 = (_2886 * _2834.x) + _2792;
                        _2725 = (_2886 * _2834.y) + _2793;
                        _2726 = (_2886 * _2834.z) + _2794;
                        _2721 = (_2966 * _2851.x) + _2789;
                        _2722 = (_2966 * _2851.y) + _2790;
                        _2723 = (_2966 * _2851.z) + _2791;
                        if (_2796 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2796;
                        }
                    }
                    frontier_phi_68_pred = _2726;
                    frontier_phi_68_pred_1 = _2725;
                    frontier_phi_68_pred_2 = _2724;
                    frontier_phi_68_pred_3 = _2722;
                    frontier_phi_68_pred_4 = _2721;
                    frontier_phi_68_pred_5 = _2723;
                }
                _2532 = frontier_phi_68_pred;
                _2530 = frontier_phi_68_pred_1;
                _2528 = frontier_phi_68_pred_2;
                _2524 = frontier_phi_68_pred_3;
                _2522 = frontier_phi_68_pred_4;
                _2526 = frontier_phi_68_pred_5;
                uint _2672 = _2671 + 1u;
                if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2665 = _2522;
                    _2666 = _2524;
                    _2667 = _2526;
                    _2668 = _2528;
                    _2669 = _2530;
                    _2670 = _2532;
                    _2671 = _2672;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
        }
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.z;
        uint _2538 = (_2536 >> 8u) & 15u;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((4294967295u << _2538) & _2442) == 0u)
        {
            _2633 = _2521;
            _2635 = _2523;
            _2637 = _2525;
            _2639 = _2527;
            _2641 = _2529;
            _2643 = _2531;
        }
        else
        {
            float _2658 = inversesqrt(dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521)));
            float _2659 = _2658 * _1519;
            float _2660 = _2658 * _1520;
            float _2661 = _2658 * _1521;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2538 < ((_2536 >> 12u) & 15u))
            {
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2772 = _2521;
                float _2773 = _2523;
                float _2774 = _2525;
                float _2775 = _2527;
                float _2776 = _2529;
                float _2777 = _2531;
                uint _2778 = _2538;
                uint _2787;
                bool _2788;
                for (;;)
                {
                    _2787 = texelFetch(g_lightClassification, int((((_2436 << 5u) + (_2422 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                    _2788 = _2787 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2788)
                    {
                        frontier_phi_74_pred = _2774;
                        frontier_phi_74_pred_1 = _2773;
                        frontier_phi_74_pred_2 = _2772;
                        frontier_phi_74_pred_3 = _2777;
                        frontier_phi_74_pred_4 = _2776;
                        frontier_phi_74_pred_5 = _2775;
                    }
                    else
                    {
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _2984 = _2772;
                        float _2985 = _2773;
                        float _2986 = _2774;
                        float _2987 = _2775;
                        float _2988 = _2776;
                        float _2989 = _2777;
                        uint _2990 = _2787;
                        uint _2991;
                        vec4 _3016;
                        float _3017;
                        vec4 _3032;
                        vec3 _3044;
                        vec4 _3060;
                        vec4 _3076;
                        float _3123;
                        bool _3124;
                        for (;;)
                        {
                            uint _3001 = ((_2778 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2990));
                            _2991 = (_2990 + 4294967295u) & _2990;
                            uint _3003 = _3001 * 40u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3017 = _3016.w;
                            uint _3019 = (_3001 * 40u) + 4u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3034 = (_3001 * 40u) + 8u;
                            _3044 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x));
                            uint _3047 = (_3001 * 40u) + 16u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3063 = (_3001 * 40u) + 20u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3079 = (_3001 * 40u) + 24u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3098 = (_3001 * 40u) + 28u;
                            vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3123 = fma(_1521, _3111.z, fma(_1520, _3111.y, _3111.x * _1519)) + _3111.w;
                            _3124 = !((fma(_1521, _3092.z, fma(_1520, _3092.y, _3092.x * _1519)) + _3092.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3124)
                            {
                                float _3151 = _3016.x - _1519;
                                float _3152 = _3016.y - _1520;
                                float _3153 = _3016.z - _1521;
                                float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                                float _3157 = inversesqrt(_3154);
                                float _3158 = _3157 * _3151;
                                float _3159 = _3157 * _3152;
                                float _3160 = _3157 * _3153;
                                float _3164 = 1.0 - (_3154 / (_3017 * _3017));
                                float _4242 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3169 = sqrt(_3154) * _3032.w;
                                float _3171 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                                float _3172 = _3171 * _3171;
                                float _3175 = ((1.0 - _3172) * dot(vec3(_3158, _3159, _3160), vec3(_397, _400, _403))) + _3172;
                                float _3178 = _3169 * _3169;
                                float _3182 = (fma(_1521, _3060.z, fma(_1520, _3060.y, _3060.x * _1519)) + _3060.w) / _3123;
                                float _3183 = (fma(_1521, _3076.z, fma(_1520, _3076.y, _3076.x * _1519)) + _3076.w) / _3123;
                                float _3187 = 1.0 - dot(vec2(_3182, _3183), vec2(_3182, _3183));
                                float _4258 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3189 = _3188 * (((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3165) / ((_3178 * 0.699999988079071044921875) + 1.0));
                                float _3201 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                                float _3202 = 1.0 - _457;
                                float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                                float _3210 = _3209 * _3209;
                                float _3211 = _3210 * _3210;
                                float _3212 = _3158 - _2659;
                                float _3213 = _3159 - _2660;
                                float _3214 = _3160 - _2661;
                                float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                                float _3222 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2659, (-0.0) - _2660, (-0.0) - _2661));
                                float _4269 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3225 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3226 = dot(vec3(_397, _400, _403), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                                float _4280 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3229 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                                float _3234 = _3171 * _3210;
                                float _3235 = _3234 * _3234;
                                float _3241 = ((1.0 - _3235) * dot(vec3(_397, _400, _403), vec3(_3158, _3159, _3160))) + _3235;
                                float _4291 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3243 = 1.0 - _3210;
                                float _3253 = (0.5 / (((_3242 * ((_3225 * _3243) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3210) * _3225))) * _3242;
                                float _4302 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3263 = (_3188 * _3165) * (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3233 * _3233) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3263 * _3044.z;
                                frontier_phi_80_pred_1 = _3263 * _3044.y;
                                frontier_phi_80_pred_2 = _3263 * _3044.x;
                                frontier_phi_80_pred_3 = _3189 * _3032.z;
                                frontier_phi_80_pred_4 = _3189 * _3032.y;
                                frontier_phi_80_pred_5 = _3189 * _3032.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3269 = frontier_phi_80_pred;
                            _3268 = frontier_phi_80_pred_1;
                            _3267 = frontier_phi_80_pred_2;
                            _3272 = frontier_phi_80_pred_3;
                            _3271 = frontier_phi_80_pred_4;
                            _3270 = frontier_phi_80_pred_5;
                            _2974 = _3270 + _2987;
                            _2975 = _3271 + _2988;
                            _2976 = _3272 + _2989;
                            _2971 = _3267 + _2984;
                            _2972 = _3268 + _2985;
                            _2973 = _3269 + _2986;
                            if (_2991 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2991;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2973;
                        frontier_phi_74_pred_1 = _2972;
                        frontier_phi_74_pred_2 = _2971;
                        frontier_phi_74_pred_3 = _2976;
                        frontier_phi_74_pred_4 = _2975;
                        frontier_phi_74_pred_5 = _2974;
                    }
                    _2638 = frontier_phi_74_pred;
                    _2636 = frontier_phi_74_pred_1;
                    _2634 = frontier_phi_74_pred_2;
                    _2644 = frontier_phi_74_pred_3;
                    _2642 = frontier_phi_74_pred_4;
                    _2640 = frontier_phi_74_pred_5;
                    uint _2779 = _2778 + 1u;
                    if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2772 = _2634;
                        _2773 = _2636;
                        _2774 = _2638;
                        _2775 = _2640;
                        _2776 = _2642;
                        _2777 = _2644;
                        _2778 = _2779;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2642;
                frontier_phi_62_63_ladder_1 = _2640;
                frontier_phi_62_63_ladder_2 = _2638;
                frontier_phi_62_63_ladder_3 = _2644;
                frontier_phi_62_63_ladder_4 = _2636;
                frontier_phi_62_63_ladder_5 = _2634;
            }
            else
            {
                frontier_phi_62_63_ladder = _2529;
                frontier_phi_62_63_ladder_1 = _2527;
                frontier_phi_62_63_ladder_2 = _2525;
                frontier_phi_62_63_ladder_3 = _2531;
                frontier_phi_62_63_ladder_4 = _2523;
                frontier_phi_62_63_ladder_5 = _2521;
            }
            _2633 = frontier_phi_62_63_ladder_5;
            _2635 = frontier_phi_62_63_ladder_4;
            _2637 = frontier_phi_62_63_ladder_2;
            _2639 = frontier_phi_62_63_ladder_1;
            _2641 = frontier_phi_62_63_ladder;
            _2643 = frontier_phi_62_63_ladder_3;
        }
        float _2648 = isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0));
        _2454 = (_2648 * _2639) + _1986;
        _2456 = (_2648 * _2641) + _1988;
        _2458 = (_2648 * _2643) + _1990;
        _2460 = ((_2633 * 0.039999999105930328369140625) * _2648) + _2309;
        _2462 = ((_2635 * 0.039999999105930328369140625) * _2648) + _2311;
        _2464 = ((_2637 * 0.039999999105930328369140625) * _2648) + _2313;
    }
    else
    {
        _2454 = _1986;
        _2456 = _1988;
        _2458 = _1990;
        _2460 = _2309;
        _2462 = _2311;
        _2464 = _2313;
    }
    float _4318 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4329 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4340 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    uint _2484 = _416 + 6u;
    float _2492 = _375 / cbSceneParam._m0[86u].x;
    float _2493 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2507 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, (log2((isnan(cbSceneParam._m0[77u].w) ? _307 : (isnan(_307) ? cbSceneParam._m0[77u].w : min(_307, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2509 = _2507.x;
    float _2510 = _2507.y;
    float _2511 = _2507.z;
    float _2512 = _2507.w;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_307 > cbSceneParam._m0[78u].w)
    {
        float _2546 = isnan(_307) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _307 : min(cbSceneParam._m0[80u].w, _307));
        float _2547 = _2546 / _307;
        float _2558 = _2547 * _360;
        float _2559 = _361 * _2547;
        float _2560 = (-0.0) - _2559;
        float _2561 = _2547 * _362;
        float _2563 = (cbSceneParam._m0[77u].w * _2560) / _2546;
        float _2564 = _2563 + cbSceneParam._m0[79u].w;
        float _2565 = cbSceneParam._m0[79u].w - _2559;
        float _2571 = sqrt(((_2558 * _2558) + (_2559 * _2559)) + (_2561 * _2561));
        float _2574 = (1.0 - (cbSceneParam._m0[77u].w / _2546)) * _2571;
        float _2579 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2581 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2734;
        if (abs((_2560 - _2563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2734 = ((((_2564 > 0.0) ? exp2(_2579 * _2564) : (2.0 - exp2(_2581 * _2564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2574;
        }
        else
        {
            float _2694 = 1.0 / cbSceneParam._m0[80u].x;
            float _2695 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : max(_2564, _2565));
            float _2696 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : min(_2564, _2565));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            _2734 = ((abs(_2571 / _2560) * cbSceneParam._m0[80u].y) * ((((_2705 - _2706) * 2.0) - ((exp2(_2579 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)))) - exp2(_2579 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))))) * _2694)) - ((exp2(_2581 * _2705) - exp2(_2581 * _2706)) * _2694))) + (_2574 * cbSceneParam._m0[80u].z);
        }
        vec4 _2736 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, 1.0), 0.0);
        float _2745 = exp2((_2734 * (-1.44269502162933349609375)) * (1.0 - _2736.w));
        float _2746 = log2(_2745);
        float _2762 = log2(_2512);
        _2583 = (exp2(_2762 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].x)) * _2736.x) / cbSceneParam._m0[78u].x)) + _2509;
        _2585 = (exp2(_2762 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].y)) * _2736.y) / cbSceneParam._m0[78u].y)) + _2510;
        _2587 = (exp2(_2762 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].z)) * _2736.z) / cbSceneParam._m0[78u].z)) + _2511;
        _2589 = _2745 * _2512;
    }
    else
    {
        _2583 = _2509;
        _2585 = _2510;
        _2587 = _2511;
        _2589 = _2512;
    }
    float _2601 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2602 = _2601 == 3.0;
    float _2603 = log2(_2589);
    float _2610 = exp2(_2603 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2454 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _441))) + ((_2460 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1248)) * cbPerFrame._m0[3u].x));
    float _2611 = exp2(_2603 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2456 + ((isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))) * _441))) + ((_2462 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1248)) * cbPerFrame._m0[3u].x));
    float _2612 = exp2(_2603 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2458 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _441))) + ((_2464 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _1248)) * cbPerFrame._m0[3u].x));
    float _2621 = (_2601 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2621 * (_2602 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.y = _2621 * (_2602 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.z = _2621 * (_2602 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.w = cbInstanceData._m0[_2484].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2484].w;
}


