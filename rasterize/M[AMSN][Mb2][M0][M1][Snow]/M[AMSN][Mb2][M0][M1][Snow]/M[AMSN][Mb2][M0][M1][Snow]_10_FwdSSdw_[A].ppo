#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _972;
float _3365;
float _3366;
float _3367;
float _3368;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3377 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))));
    float _257 = fma(_254, _220, fma(_247, _213, _245 * _199));
    float _260 = fma(_254, _221, fma(_247, _214, _245 * _200));
    float _263 = fma(_254, _222, fma(_247, _215, _245 * _201));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _302 = (cbMtdParam._m0[11u].z + dot(vec4(_267 * _257, _267 * _260, _267 * _263, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3388 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    vec4 _320 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _325 = _320.x * cbMtdParam._m0[9u].x;
    float _326 = _320.y * cbMtdParam._m0[9u].y;
    float _327 = _320.z * cbMtdParam._m0[9u].z;
    vec4 _340 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _351 = ((_340.x - _325) * _303) + _325;
    float _352 = ((_340.y - _326) * _303) + _326;
    float _353 = ((_340.z - _327) * _303) + _327;
    vec4 _366 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = (_366.x * 2.0) + (-1.0);
    float _374 = (_366.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_373, _374), vec2(_373, _374));
    float _3399 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _383 = ((_366.z - _241) * _303) + _241;
    float _390 = ((_373 - _245) * _303) + _245;
    float _391 = ((_374 - _247) * _303) + _247;
    float _392 = ((sqrt(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) - _254) * _303) + _254;
    float _395 = fma(_392, _220, fma(_391, _213, _390 * _199));
    float _398 = fma(_392, _221, fma(_391, _214, _390 * _200));
    float _401 = fma(_392, _222, fma(_391, _215, _390 * _201));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3410 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _409 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3432 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3443 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _428 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _469 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _479 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _469);
    float _480 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _469);
    float _481 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _469);
    float _485 = inversesqrt(dot(vec3(_479, _480, _481), vec3(_479, _480, _481)));
    float _486 = _479 * _485;
    float _487 = _480 * _485;
    float _488 = _481 * _485;
    vec4 _493 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _495 = _493.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _651 = sqrt(((_479 * _479) + (_480 * _480)) + (_481 * _481));
        float _657 = (cbMatDynParam._m0[5u].x * _651) + cbMatDynParam._m0[5u].y;
        float _3454 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _662 = (cbMatDynParam._m0[5u].z * _651) + cbMatDynParam._m0[5u].w;
        float _3465 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) - _658)) + _658) < ((_495 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _507 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _508 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _527 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _530 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _533 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _546 = uint(roundEven(NORMAL.w)) * 13u;
    uint _547 = _546 + 9u;
    uint _548 = _547 + uint(cbMatDynParam._m0[0u].w);
    float _554 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_548].x;
    float _555 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_548].y;
    float _556 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_548].z;
    float _3476 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    vec4 _568 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _507, cbSceneParam._m0[86u].y * _508));
    float _571 = _568.x * TEXCOORD_9.w;
    float _572 = dot(vec3(_406, _407, _408), vec3(_486, _487, _488));
    float _575 = _572 * 2.0;
    float _579 = (_575 * _406) - _486;
    float _580 = (_575 * _407) - _487;
    float _581 = (_575 * _408) - _488;
    float _585 = abs(dot(vec3(_486, _487, _488), vec3(_406, _407, _408)));
    float _3509 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _587 = sqrt(_409);
    float _600 = exp2((_587 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_587 * 3.0));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _971;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _696 = fma(_640, cbModelParam._m0[26u].z, fma(_636, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _632));
        float _700 = fma(_640, cbModelParam._m0[27u].z, fma(_636, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _632));
        float _704 = fma(_640, cbModelParam._m0[28u].z, fma(_636, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _632));
        float _729 = _632 + _406;
        float _730 = _636 + _407;
        float _731 = _640 + _408;
        float _741 = fma(_731, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729)) - _696;
        float _742 = fma(_731, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729)) - _700;
        float _743 = fma(_731, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729)) - _704;
        float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
        float _760 = ((_747 * _741) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_696 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_747 * _742) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_700 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_747 * _743) / cbModelParam._m0[34u].z) + ((((((_704 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        float _799 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_765.x + (-0.5));
        float _801 = _799 * (_765.y + (-0.5));
        float _802 = _799 * (_765.z + (-0.5));
        float _809 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_772.x + (-0.5));
        float _811 = _809 * (_772.y + (-0.5));
        float _812 = _809 * (_772.z + (-0.5));
        float _819 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_779.x + (-0.5));
        float _821 = _819 * (_779.y + (-0.5));
        float _822 = _819 * (_779.z + (-0.5));
        float _829 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_786.x + (-0.5));
        float _831 = _829 * (_786.y + (-0.5));
        float _832 = _829 * (_786.z + (-0.5));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = _800 * 0.5;
        float _837 = _810 * 0.5;
        float _838 = _820 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _853 = (dot(vec3(_406, _407, _408), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _863 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3557 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_865 + 1.0))) + _870) * _833;
        float _880 = _801 * 0.5;
        float _881 = _811 * 0.5;
        float _882 = _821 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_406, _407, _408), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3590 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_907 + 1.0))) + _912) * _834;
        float _922 = _802 * 0.5;
        float _923 = _812 * 0.5;
        float _924 = _822 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_406, _407, _408), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3623 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_949 + 1.0))) + _954) * _835;
        _971 = _802;
        _973 = _801;
        _974 = _800;
        _975 = _812;
        _976 = _811;
        _977 = _810;
        _978 = _822;
        _979 = _821;
        _980 = _820;
        _981 = _835;
        _982 = _834;
        _983 = _833;
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
    }
    else
    {
        _971 = _972;
        _973 = _972;
        _974 = _972;
        _975 = _972;
        _976 = _972;
        _977 = _972;
        _978 = _972;
        _979 = _972;
        _980 = _972;
        _981 = _972;
        _982 = _972;
        _983 = _972;
        _984 = 0.0;
        _985 = 0.0;
        _986 = 0.0;
    }
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1015 = fma(_640, cbModelParam._m0[30u].z, fma(_636, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _632));
        float _1019 = fma(_640, cbModelParam._m0[31u].z, fma(_636, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _632));
        float _1023 = fma(_640, cbModelParam._m0[32u].z, fma(_636, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _632));
        float _1046 = _632 + _406;
        float _1047 = _636 + _407;
        float _1048 = _640 + _408;
        float _1058 = fma(_1048, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046)) - _1015;
        float _1059 = fma(_1048, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046)) - _1019;
        float _1060 = fma(_1048, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046)) - _1023;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1015 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1019 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[35u].z) + ((((((_1023 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1114 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1081.x + (-0.5));
        float _1116 = _1114 * (_1081.y + (-0.5));
        float _1117 = _1114 * (_1081.z + (-0.5));
        float _1124 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1088.x + (-0.5));
        float _1126 = _1124 * (_1088.y + (-0.5));
        float _1127 = _1124 * (_1088.z + (-0.5));
        float _1134 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1095.x + (-0.5));
        float _1136 = _1134 * (_1095.y + (-0.5));
        float _1137 = _1134 * (_1095.z + (-0.5));
        float _1144 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1102.x + (-0.5));
        float _1146 = _1144 * (_1102.y + (-0.5));
        float _1147 = _1144 * (_1102.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_406, _407, _408), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3686 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1178 + 1.0))) + _1183) * _1148;
        float _1193 = _1116 * 0.5;
        float _1194 = _1126 * 0.5;
        float _1195 = _1136 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_406, _407, _408), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3719 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1220 + 1.0))) + _1225) * _1149;
        float _1235 = _1117 * 0.5;
        float _1236 = _1127 * 0.5;
        float _1237 = _1137 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_406, _407, _408), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3752 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1262 + 1.0))) + _1267) * _1150;
        _1284 = _1117;
        _1285 = _1116;
        _1286 = _1115;
        _1287 = _1127;
        _1288 = _1126;
        _1289 = _1125;
        _1290 = _1137;
        _1291 = _1136;
        _1292 = _1135;
        _1293 = _1150;
        _1294 = _1149;
        _1295 = _1148;
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _972;
        _1285 = _972;
        _1286 = _972;
        _1287 = _972;
        _1288 = _972;
        _1289 = _972;
        _1290 = _972;
        _1291 = _972;
        _1292 = _972;
        _1293 = _972;
        _1294 = _972;
        _1295 = _972;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _984)) + _984;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _985)) + _985;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _986)) + _986;
    float _1331 = fma(_1310, cbSceneParam._m0[89u].z, fma(_1309, cbSceneParam._m0[89u].y, _1308 * cbSceneParam._m0[89u].x));
    float _1334 = fma(_1310, cbSceneParam._m0[90u].z, fma(_1309, cbSceneParam._m0[90u].y, _1308 * cbSceneParam._m0[90u].x));
    float _1337 = fma(_1310, cbSceneParam._m0[91u].z, fma(_1309, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1308));
    float _1352 = _579 * 0.5;
    float _1353 = _580 * 0.5;
    float _1354 = _581 * 0.5;
    float _1355 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1358 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1361 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1395;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1368 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_971, _975, _978, _981));
        float _1372 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_973, _976, _979, _982));
        float _1376 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_974, _977, _980, _983));
        float _1383 = dot(vec4(cbModelParam._m0[39u]), vec4(_1352, _1353, _1354, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1406;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1397 = dot(vec4(cbModelParam._m0[40u]), vec4(_1352, _1353, _1354, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1397) ? 0.0 : (isnan(0.0) ? _1397 : max(0.0, _1397))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1410 = (_1406 * cbModelParam._m0[1u].x) + (_1395 * (1.0 - cbModelParam._m0[1u].x));
    float _1420 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _409);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1420 : min(cbModelParam._m0[25u].z, _1420));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1470 = fma(_640, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632)) + cbModelParam._m0[13u].w;
        float _1474 = fma(_640, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632)) + cbModelParam._m0[14u].w;
        float _1478 = fma(_640, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632)) + cbModelParam._m0[15u].w;
        float _1481 = fma(_581, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579));
        float _1484 = fma(_581, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579));
        float _1487 = fma(_581, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579));
        float _1515;
        if (_1481 > 0.0)
        {
            _1515 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1515 = frontier_phi_19_17_ladder;
        }
        float _1741;
        if (_1484 > 0.0)
        {
            _1741 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1741 = frontier_phi_28_24_ladder;
        }
        float _1987;
        if (_1487 > 0.0)
        {
            _1987 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1987 = frontier_phi_40_35_ladder;
        }
        float _1989 = isnan(_1741) ? _1515 : (isnan(_1515) ? _1741 : min(_1515, _1741));
        float _1990 = isnan(_1987) ? _1989 : (isnan(_1989) ? _1987 : min(_1989, _1987));
        float _1994 = (_1990 * _1481) + _1470;
        float _1995 = (_1990 * _1484) + _1474;
        float _1996 = (_1990 * _1487) + _1478;
        float _1997 = _1990 * 9.9999997473787516355514526367188e-05;
        float _1999 = (-1.0) - _1997;
        float _2001 = _1997 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1996 > _2001) || ((_1996 < _1999) || ((_1995 > _2001) || ((_1995 < _1999) || ((_1994 < _1999) || (_1994 > _2001))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2120 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1996, cbModelParam._m0[9u].z, fma(_1995, cbModelParam._m0[9u].y, _1994 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1996, cbModelParam._m0[10u].z, fma(_1995, cbModelParam._m0[10u].y, _1994 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1996, cbModelParam._m0[11u].z, fma(_1995, cbModelParam._m0[11u].y, _1994 * cbModelParam._m0[11u].x))), _1421);
            frontier_phi_18_40_ladder = _2120.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2120.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2120.x * cbModelParam._m0[1u].y;
        }
        _1503 = frontier_phi_18_40_ladder_2;
        _1505 = frontier_phi_18_40_ladder_1;
        _1507 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_579, _580, _581), _1421);
        _1503 = _1491.x * cbModelParam._m0[1u].y;
        _1505 = _1491.y * cbModelParam._m0[1u].y;
        _1507 = _1491.z * cbModelParam._m0[1u].y;
    }
    float _1511 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _409);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1511 : min(cbModelParam._m0[25u].w, _1511));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1569 = fma(_640, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632)) + cbModelParam._m0[21u].w;
        float _1573 = fma(_640, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632)) + cbModelParam._m0[22u].w;
        float _1577 = fma(_640, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632)) + cbModelParam._m0[23u].w;
        float _1580 = fma(_581, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579));
        float _1583 = fma(_581, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579));
        float _1586 = fma(_581, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579));
        float _1746;
        if (_1580 > 0.0)
        {
            _1746 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1746 = frontier_phi_30_26_ladder;
        }
        float _2014;
        if (_1583 > 0.0)
        {
            _2014 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2014 = frontier_phi_42_37_ladder;
        }
        float _2219;
        if (_1586 > 0.0)
        {
            _2219 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2219 = frontier_phi_51_48_ladder;
        }
        float _2221 = isnan(_2014) ? _1746 : (isnan(_1746) ? _2014 : min(_1746, _2014));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1580) + _1569;
        float _2227 = (_2222 * _1583) + _1573;
        float _2228 = (_2222 * _1586) + _1577;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2229;
        float _2232 = _2229 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2228 > _2232) || ((_2228 < _2230) || ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 < _2230) || (_2226 > _2232))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2228, cbModelParam._m0[17u].z, fma(_2227, cbModelParam._m0[17u].y, _2226 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2228, cbModelParam._m0[18u].z, fma(_2227, cbModelParam._m0[18u].y, _2226 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2228, cbModelParam._m0[19u].z, fma(_2227, cbModelParam._m0[19u].y, _2226 * cbModelParam._m0[19u].x))), _1512);
            frontier_phi_27_51_ladder = _2426.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2426.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2426.x * cbModelParam._m0[1u].z;
        }
        _1605 = frontier_phi_27_51_ladder_2;
        _1607 = frontier_phi_27_51_ladder_1;
        _1609 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_579, _580, _581), _1512);
        _1605 = _1589.x * cbModelParam._m0[1u].z;
        _1607 = _1589.y * cbModelParam._m0[1u].z;
        _1609 = _1589.z * cbModelParam._m0[1u].z;
    }
    float _1621 = ((((1.0 - _600) * ((_587 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_600 * _587)) * _571;
    float _1622 = _1621 * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1623 = _1621 * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1624 = _1621 * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1627 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, _1622 * cbSceneParam._m0[91u].x));
    vec4 _1641 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_507, _508));
    float _1643 = _1641.w;
    float _1655 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1643);
    float _1656 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1643);
    float _1657 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1643);
    uvec4 _1661 = floatBitsToUint(cbInstanceData._m0[_546 + 5u]);
    uint _1663 = _1661.x * 14u;
    uint _1664 = _1663 + 13u;
    float _1671 = _571 + (-1.0);
    float _1676 = (cbLight._m0[_1664].x * _1671) + 1.0;
    float _1677 = (cbLight._m0[_1664].y * _1671) + 1.0;
    float _1678 = (cbLight._m0[_1664].z * _1671) + 1.0;
    float _1679 = (cbLight._m0[_1664].w * _1671) + 1.0;
    uint _1680 = _1663 + 5u;
    float _1686 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1690 = _1663 + 4u;
    float _1700 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1704 = _1663 | 1u;
    float _1715 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_406, _407, _408));
    float _1718 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_406, _407, _408));
    float _3888 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _3899 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1723 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.3183098733425140380859375;
    float _1725 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
    float _1732 = ((cbLight._m0[_1680].x * _1686) * _1725) + (((cbLight._m0[_1690].x * _1655) * _1700) * _1723);
    float _1733 = ((_1686 * cbLight._m0[_1680].y) * _1725) + (((cbLight._m0[_1690].y * _1656) * _1700) * _1723);
    float _1734 = ((_1686 * cbLight._m0[_1680].z) * _1725) + (((cbLight._m0[_1690].z * _1657) * _1700) * _1723);
    uvec4 _1738 = floatBitsToUint(cbLight._m0[_1663 + 12u]);
    bool _1740 = _1738.x == 0u;
    float _1751;
    float _1753;
    float _1755;
    if (_1740)
    {
        _1751 = _1732;
        _1753 = _1733;
        _1755 = _1734;
    }
    else
    {
        uint _1759 = _1663 + 6u;
        float _1775 = (dot(vec3(cbLight._m0[_1663 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1776 = _1775 * _1775;
        float _3910 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1778 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1751 = (((cbLight._m0[_1759].x * 0.3183098733425140380859375) * _1777) * _1778) + _1732;
        _1753 = (((cbLight._m0[_1759].y * 0.3183098733425140380859375) * _1777) * _1778) + _1733;
        _1755 = (((cbLight._m0[_1759].z * 0.3183098733425140380859375) * _1777) * _1778) + _1734;
    }
    bool _1758 = _1738.y == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1758)
    {
        _1796 = _1751;
        _1798 = _1753;
        _1800 = _1755;
    }
    else
    {
        uint _1958 = _1663 + 7u;
        float _1974 = (dot(vec3(cbLight._m0[_1663 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1975 = _1974 * _1974;
        float _3926 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1977 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1796 = (((cbLight._m0[_1958].x * 0.3183098733425140380859375) * _1976) * _1977) + _1751;
        _1798 = (((cbLight._m0[_1958].y * 0.3183098733425140380859375) * _1976) * _1977) + _1753;
        _1800 = (((cbLight._m0[_1958].z * 0.3183098733425140380859375) * _1976) * _1977) + _1755;
    }
    uint _1803 = _1663 + 8u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _409) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1663].x + _486;
    float _1819 = cbLight._m0[_1663].y + _487;
    float _1820 = cbLight._m0[_1663].z + _488;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1663].xyz));
    float _3942 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _1832 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1833 = dot(vec3(_406, _407, _408), vec3(_1825, _1826, _1827));
    float _3964 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1825, _1826, _1827));
    float _3975 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1817 * _1817;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1857 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1832 * ((_1831 * _1857) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1857) + _1817) * _1831))) * _1831;
    float _3986 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    uint _1884 = _1663 + 9u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _409) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1704].x + _486;
    float _1898 = cbLight._m0[_1704].y + _487;
    float _1899 = cbLight._m0[_1704].z + _488;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1704].xyz));
    float _3997 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1911 = dot(vec3(_406, _407, _408), vec3(_1904, _1905, _1906));
    float _4008 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1904, _1905, _1906));
    float _4019 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1896 * _1896;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1896;
    float _1943 = (0.5 / (((_1832 * ((_1910 * _1933) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1933) + _1896) * _1910))) * _1910;
    float _4030 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    float _1955 = (((_1932 * cbLight._m0[_1884].x) * _1945) * _1686) + ((((cbLight._m0[_1803].x * _1655) * _1856) * _1870) * _1700);
    float _1956 = (((_1932 * cbLight._m0[_1884].y) * _1945) * _1686) + ((((cbLight._m0[_1803].y * _1656) * _1856) * _1870) * _1700);
    float _1957 = (((_1932 * cbLight._m0[_1884].z) * _1945) * _1686) + ((((cbLight._m0[_1803].z * _1657) * _1856) * _1870) * _1700);
    float _2019;
    float _2021;
    float _2023;
    if (_1740)
    {
        _2019 = _1955;
        _2021 = _1956;
        _2023 = _1957;
    }
    else
    {
        uint _2025 = _1663 + 2u;
        uint _2029 = _1663 + 10u;
        float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _409) * 0.949999988079071044921875);
        float _2044 = _2043 * _2043;
        float _2045 = cbLight._m0[_2025].x + _486;
        float _2046 = cbLight._m0[_2025].y + _487;
        float _2047 = cbLight._m0[_2025].z + _488;
        float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
        float _2052 = _2051 * _2045;
        float _2053 = _2051 * _2046;
        float _2054 = _2051 * _2047;
        float _2055 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2025].xyz));
        float _4041 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2059 = dot(vec3(_406, _407, _408), vec3(_2052, _2053, _2054));
        float _4052 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2063 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2052, _2053, _2054));
        float _4063 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2067 = _2044 * _2044;
        float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
        float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2081 = 1.0 - _2044;
        float _2091 = (0.5 / (((_1832 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2081) + _2044) * _2058))) * _2058;
        float _4074 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2093 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
        float _2094 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2019 = (((_2080 * cbLight._m0[_2029].x) * _2093) * _2094) + _1955;
        _2021 = (((_2080 * cbLight._m0[_2029].y) * _2093) * _2094) + _1956;
        _2023 = (((_2080 * cbLight._m0[_2029].z) * _2093) * _2094) + _1957;
    }
    float _2129;
    float _2131;
    float _2133;
    if (_1758)
    {
        _2129 = _2019;
        _2131 = _2021;
        _2133 = _2023;
    }
    else
    {
        uint _2140 = _1663 + 3u;
        uint _2144 = _1663 + 11u;
        float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _409) * 0.949999988079071044921875);
        float _2159 = _2158 * _2158;
        float _2160 = cbLight._m0[_2140].x + _486;
        float _2161 = cbLight._m0[_2140].y + _487;
        float _2162 = cbLight._m0[_2140].z + _488;
        float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
        float _2167 = _2166 * _2160;
        float _2168 = _2166 * _2161;
        float _2169 = _2166 * _2162;
        float _2170 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2140].xyz));
        float _4090 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2174 = dot(vec3(_406, _407, _408), vec3(_2167, _2168, _2169));
        float _4101 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2178 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2167, _2168, _2169));
        float _4112 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2182 = _2159 * _2159;
        float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
        float _2195 = (exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2196 = 1.0 - _2159;
        float _2206 = (0.5 / (((_1832 * ((_2173 * _2196) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2196) + _2159) * _2173))) * _2173;
        float _4123 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2129 = (((_2195 * cbLight._m0[_2144].x) * _2208) * _2209) + _2019;
        _2131 = (((_2195 * cbLight._m0[_2144].y) * _2208) * _2209) + _2021;
        _2133 = (((_2195 * cbLight._m0[_2144].z) * _2208) * _2209) + _2023;
    }
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    if (_1661.y == 0u)
    {
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2284;
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2284;
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2284;
        uvec4 _2299 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2300 = _2299.x;
        uint _2311 = uint((float(_2299.y) * floor(float(uint(cbSceneParam._m0[85u].y * _508) / _2300))) + floor(float(uint(cbSceneParam._m0[85u].x * _507) / _2300)));
        float _2321 = (log2(_2287 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2322 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        uint _2325 = uint(isnan(14.0) ? _2322 : (isnan(_2322) ? 14.0 : min(_2322, 14.0)));
        uvec4 _2330 = texelFetch(g_lightClusterGridBuffer, int(((_2325 << 2u) + (_2311 << 6u)) >> 2u));
        uint _2331 = _2330.x;
        uint _2332 = _2299.z;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((((1u << ((_2332 >> 4u) & 15u)) + 4294967295u) & _2331) == 0u) || ((_2332 & 240u) == 0u))
        {
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
        }
        else
        {
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            uint _2589 = 0u;
            uint _2598;
            bool _2599;
            for (;;)
            {
                _2598 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                _2599 = _2598 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2599)
                {
                    frontier_phi_68_pred = _2585;
                    frontier_phi_68_pred_1 = _2588;
                    frontier_phi_68_pred_2 = _2587;
                    frontier_phi_68_pred_3 = _2586;
                    frontier_phi_68_pred_4 = _2584;
                    frontier_phi_68_pred_5 = _2583;
                }
                else
                {
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    uint _2734;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2598;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2738 = uint(findLSB(_2734)) + (_2589 << 5u);
                        uint _2735 = (_2734 + 4294967295u) & _2734;
                        uint _2740 = _2738 * 48u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2760 = (_2738 * 48u) + 4u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2779 = (_2738 * 48u) + 8u;
                        vec3 _2790 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x));
                        float _2794 = _2754.x - _2285;
                        float _2795 = _2754.y - _2286;
                        float _2796 = _2754.z - _2287;
                        float _2797 = dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796));
                        float _2800 = inversesqrt(_2797);
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2804 = dot(vec3(_527, _530, _533), vec3(_2801, _2802, _2803));
                        float _2809 = 1.0 - (_2797 * _2754.w);
                        float _4149 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2811 = sqrt(_2797) * _2773.w;
                        float _2814 = 1.39999997615814208984375 / (_2811 + 1.39999997615814208984375);
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2804) + _2815;
                        float _2821 = _2811 * _2811;
                        float _2825 = ((isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))) * _2810) / ((_2821 * 0.699999988079071044921875) + 1.0);
                        float _2829 = (-0.0) - _2285;
                        float _2830 = (-0.0) - _2286;
                        float _2831 = (-0.0) - _2287;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2846 = exp2(log2(1.0 / ((_2821 * 3.5) + 5.0)) * 0.25);
                        float _2847 = 1.0 - _587;
                        float _2854 = sqrt(1.0 - ((1.0 - (_2847 * _2847)) * (1.0 - (_2846 * _2846))));
                        float _2855 = _2854 * _2854;
                        float _2856 = _2855 * _2855;
                        float _2857 = _2836 + _2801;
                        float _2858 = _2837 + _2802;
                        float _2859 = _2838 + _2803;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2867 = dot(vec3(_527, _530, _533), vec3(_2836, _2837, _2838));
                        float _4165 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2871 = dot(vec3(_527, _530, _533), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859));
                        float _4176 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2878 = ((_2874 * _2874) * (_2856 + (-1.0))) + 1.0;
                        float _2879 = _2814 * _2855;
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2804) + _2880;
                        float _4187 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2884 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2885 = 1.0 - _2855;
                        float _2895 = (0.5 / (((_2884 * ((_2870 * _2885) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2884 * _2885) + _2855) * _2870))) * _2884;
                        float _4198 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2906 = (((_2856 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_2878 * _2878) * ((_2821 * 2.1991131305694580078125) + 3.141590118408203125))) * _2810;
                        _2658 = (_2825 * _2773.x) + _2731;
                        _2659 = (_2825 * _2773.y) + _2732;
                        _2660 = (_2825 * _2773.z) + _2733;
                        _2655 = (_2906 * _2790.x) + _2728;
                        _2656 = (_2906 * _2790.y) + _2729;
                        _2657 = (_2906 * _2790.z) + _2730;
                        if (_2735 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2735;
                        }
                    }
                    frontier_phi_68_pred = _2657;
                    frontier_phi_68_pred_1 = _2660;
                    frontier_phi_68_pred_2 = _2659;
                    frontier_phi_68_pred_3 = _2658;
                    frontier_phi_68_pred_4 = _2656;
                    frontier_phi_68_pred_5 = _2655;
                }
                _2436 = frontier_phi_68_pred;
                _2442 = frontier_phi_68_pred_1;
                _2440 = frontier_phi_68_pred_2;
                _2438 = frontier_phi_68_pred_3;
                _2434 = frontier_phi_68_pred_4;
                _2432 = frontier_phi_68_pred_5;
                uint _2590 = _2589 + 1u;
                if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2583 = _2432;
                    _2584 = _2434;
                    _2585 = _2436;
                    _2586 = _2438;
                    _2587 = _2440;
                    _2588 = _2442;
                    _2589 = _2590;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
        }
        uvec4 _2445 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2446 = _2445.z;
        uint _2448 = (_2446 >> 8u) & 15u;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((4294967295u << _2448) & _2331) == 0u)
        {
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
            _2561 = _2441;
        }
        else
        {
            float _2576 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
            float _2577 = _2576 * _2285;
            float _2578 = _2576 * _2286;
            float _2579 = _2576 * _2287;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2448 < ((_2446 >> 12u) & 15u))
            {
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2711 = _2431;
                float _2712 = _2433;
                float _2713 = _2435;
                float _2714 = _2437;
                float _2715 = _2439;
                float _2716 = _2441;
                uint _2717 = _2448;
                uint _2726;
                bool _2727;
                for (;;)
                {
                    _2726 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                    _2727 = _2726 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2727)
                    {
                        frontier_phi_79_pred = _2716;
                        frontier_phi_79_pred_1 = _2715;
                        frontier_phi_79_pred_2 = _2714;
                        frontier_phi_79_pred_3 = _2713;
                        frontier_phi_79_pred_4 = _2712;
                        frontier_phi_79_pred_5 = _2711;
                    }
                    else
                    {
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        uint _2939 = _2726;
                        uint _2940;
                        vec4 _2965;
                        float _2966;
                        vec4 _2981;
                        vec3 _2993;
                        vec4 _3009;
                        vec4 _3025;
                        float _3072;
                        bool _3073;
                        for (;;)
                        {
                            uint _2950 = ((_2717 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2939));
                            _2940 = (_2939 + 4294967295u) & _2939;
                            uint _2952 = _2950 * 40u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2966 = _2965.w;
                            uint _2968 = (_2950 * 40u) + 4u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2950 * 40u) + 8u;
                            _2993 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x));
                            uint _2996 = (_2950 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2950 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3028 = (_2950 * 40u) + 24u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3047 = (_2950 * 40u) + 28u;
                            vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3072 = fma(_2287, _3060.z, fma(_2286, _3060.y, _3060.x * _2285)) + _3060.w;
                            _3073 = !((fma(_2287, _3041.z, fma(_2286, _3041.y, _3041.x * _2285)) + _3041.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3073)
                            {
                                float _3100 = _2965.x - _2285;
                                float _3101 = _2965.y - _2286;
                                float _3102 = _2965.z - _2287;
                                float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                                float _3106 = inversesqrt(_3103);
                                float _3107 = _3106 * _3100;
                                float _3108 = _3106 * _3101;
                                float _3109 = _3106 * _3102;
                                float _3113 = 1.0 - (_3103 / (_2966 * _2966));
                                float _4209 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3118 = sqrt(_3103) * _2981.w;
                                float _3120 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                                float _3121 = _3120 * _3120;
                                float _3124 = ((1.0 - _3121) * dot(vec3(_3107, _3108, _3109), vec3(_527, _530, _533))) + _3121;
                                float _3127 = _3118 * _3118;
                                float _3131 = (fma(_2287, _3009.z, fma(_2286, _3009.y, _3009.x * _2285)) + _3009.w) / _3072;
                                float _3132 = (fma(_2287, _3025.z, fma(_2286, _3025.y, _3025.x * _2285)) + _3025.w) / _3072;
                                float _3136 = 1.0 - dot(vec2(_3131, _3132), vec2(_3131, _3132));
                                float _4225 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3138 = _3137 * (((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3114) / ((_3127 * 0.699999988079071044921875) + 1.0));
                                float _3150 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                                float _3151 = 1.0 - _587;
                                float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                                float _3159 = _3158 * _3158;
                                float _3160 = _3159 * _3159;
                                float _3161 = _3107 - _2577;
                                float _3162 = _3108 - _2578;
                                float _3163 = _3109 - _2579;
                                float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                                float _3171 = dot(vec3(_527, _530, _533), vec3((-0.0) - _2577, (-0.0) - _2578, (-0.0) - _2579));
                                float _4236 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3175 = dot(vec3(_527, _530, _533), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                                float _4247 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                                float _3183 = _3120 * _3159;
                                float _3184 = _3183 * _3183;
                                float _3190 = ((1.0 - _3184) * dot(vec3(_527, _530, _533), vec3(_3107, _3108, _3109))) + _3184;
                                float _4258 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3192 = 1.0 - _3159;
                                float _3202 = (0.5 / (((_3191 * ((_3174 * _3192) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3159) * _3174))) * _3191;
                                float _4269 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3212 = (_3137 * _3114) * (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) / ((_3182 * _3182) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3138 * _2981.z;
                                frontier_phi_85_pred_1 = _3138 * _2981.y;
                                frontier_phi_85_pred_2 = _3138 * _2981.x;
                                frontier_phi_85_pred_3 = _3212 * _2993.z;
                                frontier_phi_85_pred_4 = _3212 * _2993.y;
                                frontier_phi_85_pred_5 = _3212 * _2993.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3221 = frontier_phi_85_pred;
                            _3220 = frontier_phi_85_pred_1;
                            _3219 = frontier_phi_85_pred_2;
                            _3218 = frontier_phi_85_pred_3;
                            _3217 = frontier_phi_85_pred_4;
                            _3216 = frontier_phi_85_pred_5;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            if (_2940 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2940;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2925;
                        frontier_phi_79_pred_1 = _2924;
                        frontier_phi_79_pred_2 = _2923;
                        frontier_phi_79_pred_3 = _2922;
                        frontier_phi_79_pred_4 = _2921;
                        frontier_phi_79_pred_5 = _2920;
                    }
                    _2562 = frontier_phi_79_pred;
                    _2560 = frontier_phi_79_pred_1;
                    _2558 = frontier_phi_79_pred_2;
                    _2556 = frontier_phi_79_pred_3;
                    _2554 = frontier_phi_79_pred_4;
                    _2552 = frontier_phi_79_pred_5;
                    uint _2718 = _2717 + 1u;
                    if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2711 = _2552;
                        _2712 = _2554;
                        _2713 = _2556;
                        _2714 = _2558;
                        _2715 = _2560;
                        _2716 = _2562;
                        _2717 = _2718;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2558;
                frontier_phi_60_61_ladder_1 = _2562;
                frontier_phi_60_61_ladder_2 = _2560;
                frontier_phi_60_61_ladder_3 = _2556;
                frontier_phi_60_61_ladder_4 = _2554;
                frontier_phi_60_61_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_60_61_ladder = _2437;
                frontier_phi_60_61_ladder_1 = _2441;
                frontier_phi_60_61_ladder_2 = _2439;
                frontier_phi_60_61_ladder_3 = _2435;
                frontier_phi_60_61_ladder_4 = _2433;
                frontier_phi_60_61_ladder_5 = _2431;
            }
            _2551 = frontier_phi_60_61_ladder_5;
            _2553 = frontier_phi_60_61_ladder_4;
            _2555 = frontier_phi_60_61_ladder_3;
            _2557 = frontier_phi_60_61_ladder;
            _2559 = frontier_phi_60_61_ladder_2;
            _2561 = frontier_phi_60_61_ladder_1;
        }
        float _2566 = isnan(1.0) ? _571 : (isnan(_571) ? 1.0 : min(_571, 1.0));
        _2343 = (_2566 * _2557) + _1796;
        _2345 = (_2566 * _2559) + _1798;
        _2347 = (_2566 * _2561) + _1800;
        _2349 = ((_2551 * 0.039999999105930328369140625) * _2566) + _2129;
        _2351 = ((_2553 * 0.039999999105930328369140625) * _2566) + _2131;
        _2353 = ((_2555 * 0.039999999105930328369140625) * _2566) + _2133;
    }
    else
    {
        _2343 = _1796;
        _2345 = _1798;
        _2347 = _1800;
        _2349 = _2129;
        _2351 = _2131;
        _2353 = _2133;
    }
    float _4285 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4296 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4307 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _2370 = ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2343 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _571))) + ((_2349 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    float _2371 = ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2345 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _571))) + ((_2351 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    float _2372 = ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2347 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _571))) + ((_2353 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    uint _2373 = _546 + 6u;
    float _2381 = _507 / cbSceneParam._m0[86u].x;
    float _2382 = _508 / cbSceneParam._m0[86u].y;
    vec4 _2396 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, (log2((isnan(cbSceneParam._m0[77u].w) ? _428 : (isnan(_428) ? cbSceneParam._m0[77u].w : min(_428, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2398 = _2396.x;
    float _2399 = _2396.y;
    float _2400 = _2396.z;
    float _2401 = _2396.w;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_428 > cbSceneParam._m0[78u].w)
    {
        float _2456 = isnan(_428) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _428 : min(cbSceneParam._m0[80u].w, _428));
        float _2457 = _2456 / _428;
        float _2468 = _2457 * _479;
        float _2469 = _480 * _2457;
        float _2470 = (-0.0) - _2469;
        float _2471 = _2457 * _481;
        float _2473 = (cbSceneParam._m0[77u].w * _2470) / _2456;
        float _2474 = _2473 + cbSceneParam._m0[79u].w;
        float _2475 = cbSceneParam._m0[79u].w - _2469;
        float _2481 = sqrt(((_2468 * _2468) + (_2469 * _2469)) + (_2471 * _2471));
        float _2484 = (1.0 - (cbSceneParam._m0[77u].w / _2456)) * _2481;
        float _2489 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2491 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2470 - _2473) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2474 > 0.0) ? exp2(_2489 * _2474) : (2.0 - exp2(_2491 * _2474))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2484;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : max(_2474, _2475));
            float _2614 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : min(_2474, _2475));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2668 = ((abs(_2481 / _2470) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2489 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2489 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2491 * _2623) - exp2(_2491 * _2624)) * _2612))) + (_2484 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2401);
        _2493 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2398;
        _2495 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2399;
        _2497 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2400;
        _2499 = _2679 * _2401;
    }
    else
    {
        _2493 = _2398;
        _2495 = _2399;
        _2497 = _2400;
        _2499 = _2401;
    }
    bool _2706;
    vec4 _2509;
    vec4 _2531;
    float _2533;
    float _2537;
    float _2538;
    float _2539;
    float _2540;
    bool _2550;
    for (;;)
    {
        _2509 = cbMatDynParam._m0[0u];
        float _2511 = roundEven(_2509.y);
        bool _2512 = _2511 == 3.0;
        float _2513 = log2(_2499);
        float _2520 = exp2(_2513 * cbSceneParam._m0[78u].x) * _2370;
        float _2521 = exp2(_2513 * cbSceneParam._m0[78u].y) * _2371;
        float _2522 = exp2(_2513 * cbSceneParam._m0[78u].z) * _2372;
        float _2529 = _495 + (-0.5);
        _2531 = cbMtdParam._m0[1u];
        _2533 = _2531.y * _2529;
        float _2536 = (_2511 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2537 = _2536 * (_2512 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2493)));
        _2538 = _2536 * (_2512 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2495)));
        _2539 = _2536 * (_2512 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2497)));
        _2540 = _2529 * 0.999000012874603271484375;
        _2550 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2550)
        {
            if ((cbInstanceData._m0[_546 + 7u].x + _2540) < 0.5)
            {
                _2706 = true;
                break;
            }
        }
        uint _2647 = _547 + uint(_2509.w);
        if ((cbInstanceData._m0[_2647].w < 1.0) && ((cbInstanceData._m0[_2647].w + _2540) < 0.5))
        {
            _2706 = true;
            break;
        }
        if ((_2533 + 1.0) < _2531.x)
        {
            _2706 = true;
            break;
        }
        _2706 = false;
        break;
    }
    float _2911;
    if (_2706)
    {
        discard_state = true;
        _2911 = 0.0;
    }
    else
    {
        _2911 = cbInstanceData._m0[_2373].w;
    }
    SV_Target.x = _2537;
    SV_Target.y = _2538;
    SV_Target.z = _2539;
    SV_Target.w = _2911;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2373].w;
    discard_exit();
}


