#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec4 TEXCOORD;
layout(location = 4) in vec4 TEXCOORD_4;
layout(location = 5) in vec4 TEXCOORD_9;
layout(location = 6) in float TEXCOORD_17;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _137 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _138 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _139 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _145 = inversesqrt(dot(vec3(_137, _138, _139), vec3(_137, _138, _139)));
    float _146 = _145 * _137;
    float _147 = _145 * _138;
    float _148 = _145 * _139;
    float _152 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _153 = _152 * NORMAL.x;
    float _154 = _152 * NORMAL.y;
    float _155 = _152 * NORMAL.z;
    float _159 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _160 = _159 * TANGENT.x;
    float _161 = _159 * TANGENT.y;
    float _162 = _159 * TANGENT.z;
    float _167;
    float _168;
    float _169;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _167 = (-0.0) - _153;
        _168 = (-0.0) - _154;
        _169 = (-0.0) - _155;
    }
    else
    {
        _167 = _153;
        _168 = _154;
        _169 = _155;
    }
    vec4 _183 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _188 = _183.z;
    float _192 = (_183.x * 2.0) + (-1.0);
    float _194 = (_183.y * 2.0) + (-1.0);
    float _195 = dot(vec2(_192, _194), vec2(_192, _194));
    float _518 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _201 = sqrt(1.0 - (isnan(1.0) ? _518 : (isnan(_518) ? 1.0 : min(_518, 1.0))));
    float _204 = fma(_201, _167, fma(_194, _160, _192 * _146));
    float _207 = fma(_201, _168, fma(_194, _161, _192 * _147));
    float _210 = fma(_201, _169, fma(_194, _162, _192 * _148));
    float _214 = inversesqrt(dot(vec3(_204, _207, _210), vec3(_204, _207, _210)));
    float _231 = cbMtdParam._m0[11u].z + dot(vec4(_214 * _204, _214 * _207, _214 * _210, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0));
    float _529 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _232 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
    vec4 _250 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _250.x * cbMtdParam._m0[9u].x;
    float _256 = _250.y * cbMtdParam._m0[9u].y;
    float _257 = _250.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _281 = ((_270.x - _255) * _232) + _255;
    float _282 = ((_270.y - _256) * _232) + _256;
    float _283 = ((_270.z - _257) * _232) + _257;
    vec4 _296 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = (_296.x * 2.0) + (-1.0);
    float _304 = (_296.y * 2.0) + (-1.0);
    float _305 = dot(vec2(_303, _304), vec2(_303, _304));
    float _540 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _313 = ((_296.z - _188) * _232) + _188;
    float _320 = ((_303 - _192) * _232) + _192;
    float _321 = ((_304 - _194) * _232) + _194;
    float _322 = ((sqrt(1.0 - (isnan(1.0) ? _540 : (isnan(_540) ? 1.0 : min(_540, 1.0)))) - _201) * _232) + _201;
    float _325 = fma(_322, _167, fma(_321, _160, _320 * _146));
    float _328 = fma(_322, _168, fma(_321, _161, _320 * _147));
    float _331 = fma(_322, _169, fma(_321, _162, _320 * _148));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    float _551 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _562 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _337 = isnan(1.0) ? _562 : (isnan(_562) ? 1.0 : min(_562, 1.0));
    float _573 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _338 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
    float _584 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _339 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
    uint _341 = uint(roundEven(NORMAL.w));
    vec4 _346 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _348 = _346.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _410 = (cbMatDynParam._m0[5u].x * TEXCOORD_17) + cbMatDynParam._m0[5u].y;
        float _595 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
        float _411 = isnan(1.0) ? _595 : (isnan(_595) ? 1.0 : min(_595, 1.0));
        float _415 = (cbMatDynParam._m0[5u].z * TEXCOORD_17) + cbMatDynParam._m0[5u].w;
        float _606 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _606 : (isnan(_606) ? 1.0 : min(_606, 1.0))) - _411)) + _411) < ((_348 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _443;
    uint _368;
    vec4 _372;
    float _379;
    float _380;
    float _381;
    float _385;
    vec4 _389;
    float _391;
    float _392;
    bool _403;
    for (;;)
    {
        _368 = _341 * 13u;
        _372 = cbInstanceData._m0[(_368 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _376 = (cbMtdParam._m0[0u].x * _337) * _372.x;
        float _377 = (cbMtdParam._m0[0u].y * _338) * _372.y;
        float _378 = (cbMtdParam._m0[0u].z * _339) * _372.z;
        float _617 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
        _379 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        float _628 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
        _380 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        float _639 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
        _381 = isnan(1.0) ? _639 : (isnan(_639) ? 1.0 : min(_639, 1.0));
        _385 = cbInstanceData._m0[_368 + 6u].w;
        float _386 = _348 + (-0.5);
        _389 = cbMtdParam._m0[1u];
        _391 = _389.y * _386;
        _392 = _386 * 0.999000012874603271484375;
        _403 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_403)
        {
            if ((cbInstanceData._m0[_368 + 7u].x + _392) < 0.5)
            {
                _443 = true;
                break;
            }
        }
        if ((_372.w < 1.0) && ((_372.w + _392) < 0.5))
        {
            _443 = true;
            break;
        }
        if ((_391 + 1.0) < _389.x)
        {
            _443 = true;
            break;
        }
        _443 = false;
        break;
    }
    if (_443)
    {
        discard_state = true;
    }
    bool _469 = cbMtdParam._m0[1u].z != 0.0;
    float _470 = _469 ? _385 : 0.0;
    SV_Target.x = ((_325 * 0.5) * _335) + 0.500488758087158203125;
    SV_Target.y = ((_328 * 0.5) * _335) + 0.500488758087158203125;
    SV_Target.z = ((_331 * 0.5) * _335) + 0.500488758087158203125;
    SV_Target.w = _470;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = isnan(1.0) ? _551 : (isnan(_551) ? 1.0 : min(_551, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _469 ? _385 : TEXCOORD_9.w;
    SV_Target_2.x = _379;
    SV_Target_2.y = _380;
    SV_Target_2.z = _381;
    SV_Target_2.w = _469 ? _385 : (float(floatBitsToUint(cbInstanceData._m0[_368 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _470;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _470;
    discard_exit();
}


