#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _962;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _237 = _232.z;
    float _241 = (_232.x * 2.0) + (-1.0);
    float _243 = (_232.y * 2.0) + (-1.0);
    float _244 = dot(vec2(_241, _243), vec2(_241, _243));
    float _3298 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _250 = sqrt(1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))));
    float _253 = fma(_250, _216, fma(_243, _209, _241 * _195));
    float _256 = fma(_250, _217, fma(_243, _210, _241 * _196));
    float _259 = fma(_250, _218, fma(_243, _211, _241 * _197));
    float _263 = inversesqrt(dot(vec3(_253, _256, _259), vec3(_253, _256, _259)));
    float _298 = (cbMtdParam._m0[11u].z + dot(vec4(_263 * _253, _263 * _256, _263 * _259, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[11u].w);
    float _3309 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    vec4 _316 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _321 = _316.x * cbMtdParam._m0[9u].x;
    float _322 = _316.y * cbMtdParam._m0[9u].y;
    float _323 = _316.z * cbMtdParam._m0[9u].z;
    vec4 _336 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _347 = ((_336.x - _321) * _299) + _321;
    float _348 = ((_336.y - _322) * _299) + _322;
    float _349 = ((_336.z - _323) * _299) + _323;
    vec4 _362 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _364 = _362.x;
    float _366 = _364 - (_364 * _299);
    vec4 _379 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _386 = (_379.x * 2.0) + (-1.0);
    float _387 = (_379.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3320 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _396 = ((_379.z - _237) * _299) + _237;
    float _403 = ((_386 - _241) * _299) + _241;
    float _404 = ((_387 - _243) * _299) + _243;
    float _405 = ((sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) - _250) * _299) + _250;
    float _408 = fma(_405, _216, fma(_404, _209, _403 * _195));
    float _411 = fma(_405, _217, fma(_404, _210, _403 * _196));
    float _414 = fma(_405, _218, fma(_404, _211, _403 * _197));
    float _418 = inversesqrt(dot(vec3(_408, _411, _414), vec3(_408, _411, _414)));
    float _419 = _418 * _408;
    float _420 = _418 * _411;
    float _421 = _418 * _414;
    float _3331 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _422 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3353 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3364 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3375 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _426 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _442 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _493 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _483);
    float _494 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _483);
    float _495 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _483);
    float _499 = inversesqrt(dot(vec3(_493, _494, _495), vec3(_493, _494, _495)));
    float _500 = _493 * _499;
    float _501 = _494 * _499;
    float _502 = _495 * _499;
    float _508 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _509 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _528 = fma(_421, cbSceneParam._m0[5u].z, fma(_420, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _419));
    float _531 = fma(_421, cbSceneParam._m0[6u].z, fma(_420, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _419));
    float _534 = fma(_421, cbSceneParam._m0[7u].z, fma(_420, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _419));
    uint _547 = uint(roundEven(NORMAL.w)) * 13u;
    uint _549 = (_547 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _555 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_549].x;
    float _556 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_549].y;
    float _557 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_549].z;
    float _3386 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _561 = 1.0 - _426;
    float _562 = _558 * _561;
    float _563 = _559 * _561;
    float _564 = _560 * _561;
    float _569 = (_558 + (-0.039999999105930328369140625)) * _426;
    float _570 = (_559 + (-0.039999999105930328369140625)) * _426;
    float _571 = (_560 + (-0.039999999105930328369140625)) * _426;
    float _572 = _569 + 0.039999999105930328369140625;
    float _574 = _570 + 0.039999999105930328369140625;
    float _575 = _571 + 0.039999999105930328369140625;
    vec4 _584 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _508, cbSceneParam._m0[86u].y * _509));
    float _587 = _584.x * TEXCOORD_9.w;
    float _588 = dot(vec3(_419, _420, _421), vec3(_500, _501, _502));
    float _591 = _588 * 2.0;
    float _595 = (_591 * _419) - _500;
    float _596 = (_591 * _420) - _501;
    float _597 = (_591 * _421) - _502;
    float _601 = abs(dot(vec3(_500, _501, _502), vec3(_419, _420, _421)));
    float _3419 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _603 = sqrt(_422);
    float _616 = exp2((_603 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_603 * 3.0));
    float _622 = (1.0 - _616) * ((_603 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _623 = _616 * _603;
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _961;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _686 = fma(_659, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _651));
        float _690 = fma(_659, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _651));
        float _694 = fma(_659, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _651));
        float _719 = _651 + _419;
        float _720 = _655 + _420;
        float _721 = _659 + _421;
        float _731 = fma(_721, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719)) - _686;
        float _732 = fma(_721, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719)) - _690;
        float _733 = fma(_721, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719)) - _694;
        float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
        float _750 = ((_737 * _731) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_686 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _751 = ((_737 * _732) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_690 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _752 = ((_737 * _733) / cbModelParam._m0[34u].z) + ((((((_694 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        float _789 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_755.x + (-0.5));
        float _791 = _789 * (_755.y + (-0.5));
        float _792 = _789 * (_755.z + (-0.5));
        float _799 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_762.x + (-0.5));
        float _801 = _799 * (_762.y + (-0.5));
        float _802 = _799 * (_762.z + (-0.5));
        float _809 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_769.x + (-0.5));
        float _811 = _809 * (_769.y + (-0.5));
        float _812 = _809 * (_769.z + (-0.5));
        float _819 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_776.x + (-0.5));
        float _821 = _819 * (_776.y + (-0.5));
        float _822 = _819 * (_776.z + (-0.5));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = _790 * 0.5;
        float _827 = _800 * 0.5;
        float _828 = _810 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _843 = (dot(vec3(_419, _420, _421), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _853 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3467 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_855 + 1.0))) + _860) * _823;
        float _870 = _791 * 0.5;
        float _871 = _801 * 0.5;
        float _872 = _811 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_419, _420, _421), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3500 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_897 + 1.0))) + _902) * _824;
        float _912 = _792 * 0.5;
        float _913 = _802 * 0.5;
        float _914 = _812 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_419, _420, _421), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3533 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_939 + 1.0))) + _944) * _825;
        _961 = _792;
        _963 = _791;
        _964 = _790;
        _965 = _802;
        _966 = _801;
        _967 = _800;
        _968 = _812;
        _969 = _811;
        _970 = _810;
        _971 = _825;
        _972 = _824;
        _973 = _823;
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
    }
    else
    {
        _961 = _962;
        _963 = _962;
        _964 = _962;
        _965 = _962;
        _966 = _962;
        _967 = _962;
        _968 = _962;
        _969 = _962;
        _970 = _962;
        _971 = _962;
        _972 = _962;
        _973 = _962;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
    }
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1002 = fma(_659, cbModelParam._m0[30u].z, fma(_655, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _651));
        float _1006 = fma(_659, cbModelParam._m0[31u].z, fma(_655, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _651));
        float _1010 = fma(_659, cbModelParam._m0[32u].z, fma(_655, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _651));
        float _1033 = _651 + _419;
        float _1034 = _655 + _420;
        float _1035 = _659 + _421;
        float _1045 = fma(_1035, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033)) - _1002;
        float _1046 = fma(_1035, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033)) - _1006;
        float _1047 = fma(_1035, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033)) - _1010;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1002 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1006 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[35u].z) + ((((((_1010 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1101 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1068.x + (-0.5));
        float _1103 = _1101 * (_1068.y + (-0.5));
        float _1104 = _1101 * (_1068.z + (-0.5));
        float _1111 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1075.x + (-0.5));
        float _1113 = _1111 * (_1075.y + (-0.5));
        float _1114 = _1111 * (_1075.z + (-0.5));
        float _1121 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1082.x + (-0.5));
        float _1123 = _1121 * (_1082.y + (-0.5));
        float _1124 = _1121 * (_1082.z + (-0.5));
        float _1131 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1089.x + (-0.5));
        float _1133 = _1131 * (_1089.y + (-0.5));
        float _1134 = _1131 * (_1089.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_419, _420, _421), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3596 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1165 + 1.0))) + _1170) * _1135;
        float _1180 = _1103 * 0.5;
        float _1181 = _1113 * 0.5;
        float _1182 = _1123 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_419, _420, _421), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3629 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1207 + 1.0))) + _1212) * _1136;
        float _1222 = _1104 * 0.5;
        float _1223 = _1114 * 0.5;
        float _1224 = _1124 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_419, _420, _421), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3662 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1249 + 1.0))) + _1254) * _1137;
        _1271 = _1104;
        _1272 = _1103;
        _1273 = _1102;
        _1274 = _1114;
        _1275 = _1113;
        _1276 = _1112;
        _1277 = _1124;
        _1278 = _1123;
        _1279 = _1122;
        _1280 = _1137;
        _1281 = _1136;
        _1282 = _1135;
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _962;
        _1272 = _962;
        _1273 = _962;
        _1274 = _962;
        _1275 = _962;
        _1276 = _962;
        _1277 = _962;
        _1278 = _962;
        _1279 = _962;
        _1280 = _962;
        _1281 = _962;
        _1282 = _962;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _974)) + _974;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _975)) + _975;
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _976)) + _976;
    float _1318 = fma(_1297, cbSceneParam._m0[89u].z, fma(_1296, cbSceneParam._m0[89u].y, _1295 * cbSceneParam._m0[89u].x));
    float _1321 = fma(_1297, cbSceneParam._m0[90u].z, fma(_1296, cbSceneParam._m0[90u].y, _1295 * cbSceneParam._m0[90u].x));
    float _1324 = fma(_1297, cbSceneParam._m0[91u].z, fma(_1296, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1295));
    float _1339 = _595 * 0.5;
    float _1340 = _596 * 0.5;
    float _1341 = _597 * 0.5;
    float _1342 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1345 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1348 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1382;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1355 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_961, _965, _968, _971));
        float _1359 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_963, _966, _969, _972));
        float _1363 = dot(vec4(_1339, _1340, _1341, 1.0), vec4(_964, _967, _970, _973));
        float _1370 = dot(vec4(cbModelParam._m0[39u]), vec4(_1339, _1340, _1341, 1.0));
        _1382 = dot(vec3(isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1370) ? 0.0 : (isnan(0.0) ? _1370 : max(0.0, _1370))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1382 = 1.0;
    }
    float _1393;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1384 = dot(vec4(cbModelParam._m0[40u]), vec4(_1339, _1340, _1341, 1.0));
        _1393 = dot(vec3(isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1384) ? 0.0 : (isnan(0.0) ? _1384 : max(0.0, _1384))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1393 = 1.0;
    }
    float _1397 = (_1393 * cbModelParam._m0[1u].x) + (_1382 * (1.0 - cbModelParam._m0[1u].x));
    float _1407 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _422);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1407 : min(cbModelParam._m0[25u].z, _1407));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1457 = fma(_659, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651)) + cbModelParam._m0[13u].w;
        float _1461 = fma(_659, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651)) + cbModelParam._m0[14u].w;
        float _1465 = fma(_659, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651)) + cbModelParam._m0[15u].w;
        float _1468 = fma(_597, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _595));
        float _1471 = fma(_597, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _595));
        float _1474 = fma(_597, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _595));
        float _1502;
        if (_1468 > 0.0)
        {
            _1502 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1502 = frontier_phi_16_14_ladder;
        }
        float _1709;
        if (_1471 > 0.0)
        {
            _1709 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1709 = frontier_phi_25_21_ladder;
        }
        float _1963;
        if (_1474 > 0.0)
        {
            _1963 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1963 = frontier_phi_37_32_ladder;
        }
        float _1965 = isnan(_1709) ? _1502 : (isnan(_1502) ? _1709 : min(_1502, _1709));
        float _1966 = isnan(_1963) ? _1965 : (isnan(_1965) ? _1963 : min(_1965, _1963));
        float _1970 = (_1966 * _1468) + _1457;
        float _1971 = (_1966 * _1471) + _1461;
        float _1972 = (_1966 * _1474) + _1465;
        float _1973 = _1966 * 9.9999997473787516355514526367188e-05;
        float _1975 = (-1.0) - _1973;
        float _1977 = _1973 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1972 > _1977) || ((_1972 < _1975) || ((_1971 > _1977) || ((_1971 < _1975) || ((_1970 < _1975) || (_1970 > _1977))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1972, cbModelParam._m0[9u].z, fma(_1971, cbModelParam._m0[9u].y, _1970 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1972, cbModelParam._m0[10u].z, fma(_1971, cbModelParam._m0[10u].y, _1970 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1972, cbModelParam._m0[11u].z, fma(_1971, cbModelParam._m0[11u].y, _1970 * cbModelParam._m0[11u].x))), _1408);
            frontier_phi_15_37_ladder = _2100.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2100.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2100.x * cbModelParam._m0[1u].y;
        }
        _1490 = frontier_phi_15_37_ladder_2;
        _1492 = frontier_phi_15_37_ladder_1;
        _1494 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_595, _596, _597), _1408);
        _1490 = _1478.x * cbModelParam._m0[1u].y;
        _1492 = _1478.y * cbModelParam._m0[1u].y;
        _1494 = _1478.z * cbModelParam._m0[1u].y;
    }
    float _1498 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _422);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1498 : min(cbModelParam._m0[25u].w, _1498));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1556 = fma(_659, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651)) + cbModelParam._m0[21u].w;
        float _1560 = fma(_659, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651)) + cbModelParam._m0[22u].w;
        float _1564 = fma(_659, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651)) + cbModelParam._m0[23u].w;
        float _1567 = fma(_597, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _595));
        float _1570 = fma(_597, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _595));
        float _1573 = fma(_597, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _595));
        float _1714;
        if (_1567 > 0.0)
        {
            _1714 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1714 = frontier_phi_27_23_ladder;
        }
        float _1990;
        if (_1570 > 0.0)
        {
            _1990 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1990 = frontier_phi_39_34_ladder;
        }
        float _2203;
        if (_1573 > 0.0)
        {
            _2203 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2203 = frontier_phi_48_45_ladder;
        }
        float _2205 = isnan(_1990) ? _1714 : (isnan(_1714) ? _1990 : min(_1714, _1990));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1567) + _1556;
        float _2211 = (_2206 * _1570) + _1560;
        float _2212 = (_2206 * _1573) + _1564;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2212, cbModelParam._m0[17u].z, fma(_2211, cbModelParam._m0[17u].y, _2210 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2212, cbModelParam._m0[18u].z, fma(_2211, cbModelParam._m0[18u].y, _2210 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2212, cbModelParam._m0[19u].z, fma(_2211, cbModelParam._m0[19u].y, _2210 * cbModelParam._m0[19u].x))), _1499);
            frontier_phi_24_48_ladder = _2410.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2410.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2410.x * cbModelParam._m0[1u].z;
        }
        _1592 = frontier_phi_24_48_ladder_2;
        _1594 = frontier_phi_24_48_ladder_1;
        _1596 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_595, _596, _597), _1499);
        _1592 = _1576.x * cbModelParam._m0[1u].z;
        _1594 = _1576.y * cbModelParam._m0[1u].z;
        _1596 = _1576.z * cbModelParam._m0[1u].z;
    }
    float _1609 = (((_622 * _572) + _623) * _587) * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1611 = (((_622 * _574) + _623) * _587) * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1613 = (((_622 * _575) + _623) * _587) * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1616 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, _1609 * cbSceneParam._m0[91u].x));
    uvec4 _1632 = floatBitsToUint(cbInstanceData._m0[_547 + 5u]);
    uint _1634 = _1632.x * 14u;
    uint _1635 = _1634 + 13u;
    float _1642 = _587 + (-1.0);
    float _1647 = (cbLight._m0[_1635].x * _1642) + 1.0;
    float _1648 = (cbLight._m0[_1635].y * _1642) + 1.0;
    float _1649 = (cbLight._m0[_1635].z * _1642) + 1.0;
    float _1650 = (cbLight._m0[_1635].w * _1642) + 1.0;
    uint _1651 = _1634 + 5u;
    float _1657 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
    uint _1661 = _1634 + 4u;
    float _1668 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
    uint _1672 = _1634 | 1u;
    float _1683 = dot(vec3(cbLight._m0[_1634].xyz), vec3(_419, _420, _421));
    float _1686 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_419, _420, _421));
    float _3798 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _3809 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1691 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1693 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1700 = ((cbLight._m0[_1651].x * _1657) * _1693) + ((cbLight._m0[_1661].x * _1668) * _1691);
    float _1701 = ((_1657 * cbLight._m0[_1651].y) * _1693) + ((_1668 * cbLight._m0[_1661].y) * _1691);
    float _1702 = ((_1657 * cbLight._m0[_1651].z) * _1693) + ((_1668 * cbLight._m0[_1661].z) * _1691);
    uvec4 _1706 = floatBitsToUint(cbLight._m0[_1634 + 12u]);
    bool _1708 = _1706.x == 0u;
    float _1719;
    float _1721;
    float _1723;
    if (_1708)
    {
        _1719 = _1700;
        _1721 = _1701;
        _1723 = _1702;
    }
    else
    {
        uint _1727 = _1634 + 6u;
        float _1743 = (dot(vec3(cbLight._m0[_1634 + 2u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _1744 = _1743 * _1743;
        float _3820 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1746 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
        _1719 = (((cbLight._m0[_1727].x * 0.3183098733425140380859375) * _1745) * _1746) + _1700;
        _1721 = (((cbLight._m0[_1727].y * 0.3183098733425140380859375) * _1745) * _1746) + _1701;
        _1723 = (((cbLight._m0[_1727].z * 0.3183098733425140380859375) * _1745) * _1746) + _1702;
    }
    bool _1726 = _1706.y == 0u;
    float _1764;
    float _1766;
    float _1768;
    if (_1726)
    {
        _1764 = _1719;
        _1766 = _1721;
        _1768 = _1723;
    }
    else
    {
        uint _1934 = _1634 + 7u;
        float _1950 = (dot(vec3(cbLight._m0[_1634 + 3u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _3836 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1953 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1764 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1719;
        _1766 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1721;
        _1768 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1723;
    }
    uint _1771 = _1634 + 8u;
    float _1784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1634].w)) * _422) * 0.949999988079071044921875);
    float _1785 = _1784 * _1784;
    float _1786 = cbLight._m0[_1634].x + _500;
    float _1787 = cbLight._m0[_1634].y + _501;
    float _1788 = cbLight._m0[_1634].z + _502;
    float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
    float _1793 = _1792 * _1786;
    float _1794 = _1792 * _1787;
    float _1795 = _1792 * _1788;
    float _1796 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1634].xyz));
    float _3852 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _1800 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1801 = dot(vec3(_419, _420, _421), vec3(_1793, _1794, _1795));
    float _3874 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1634].xyz), vec3(_1793, _1794, _1795));
    float _3885 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1809 = _1785 * _1785;
    float _1813 = ((_1804 * _1804) * (_1809 + (-1.0))) + 1.0;
    float _1821 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
    float _1822 = 0.959999978542327880859375 - _569;
    float _1824 = 0.959999978542327880859375 - _570;
    float _1825 = 0.959999978542327880859375 - _571;
    float _1832 = 1.0 - _1785;
    float _1843 = (0.5 / (((_1800 * ((_1799 * _1832) + _1785)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _1832) + _1785) * _1799))) * _1799;
    float _3896 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1809 / ((_1813 * _1813) * 3.141590118408203125));
    uint _1856 = _1634 + 9u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1672].w)) * _422) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1672].x + _500;
    float _1870 = cbLight._m0[_1672].y + _501;
    float _1871 = cbLight._m0[_1672].z + _502;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1672].xyz));
    float _3907 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1883 = dot(vec3(_419, _420, _421), vec3(_1876, _1877, _1878));
    float _3918 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_1876, _1877, _1878));
    float _3929 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1868 * _1868;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1902 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
    float _1909 = 1.0 - _1868;
    float _1919 = (0.5 / (((_1800 * ((_1882 * _1909) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _1909) + _1868) * _1882))) * _1882;
    float _3940 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    float _1931 = (((((_1902 * _1822) + _572) * cbLight._m0[_1856].x) * _1921) * _1657) + (((((_1821 * _1822) + _572) * cbLight._m0[_1771].x) * _1845) * _1668);
    float _1932 = (((((_1902 * _1824) + _574) * cbLight._m0[_1856].y) * _1921) * _1657) + (((((_1821 * _1824) + _574) * cbLight._m0[_1771].y) * _1845) * _1668);
    float _1933 = (((((_1902 * _1825) + _575) * cbLight._m0[_1856].z) * _1921) * _1657) + (((((_1821 * _1825) + _575) * cbLight._m0[_1771].z) * _1845) * _1668);
    float _1995;
    float _1997;
    float _1999;
    if (_1708)
    {
        _1995 = _1931;
        _1997 = _1932;
        _1999 = _1933;
    }
    else
    {
        uint _2001 = _1634 + 2u;
        uint _2005 = _1634 + 10u;
        float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _422) * 0.949999988079071044921875);
        float _2020 = _2019 * _2019;
        float _2021 = cbLight._m0[_2001].x + _500;
        float _2022 = cbLight._m0[_2001].y + _501;
        float _2023 = cbLight._m0[_2001].z + _502;
        float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
        float _2028 = _2027 * _2021;
        float _2029 = _2027 * _2022;
        float _2030 = _2027 * _2023;
        float _2031 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2001].xyz));
        float _3951 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2035 = dot(vec3(_419, _420, _421), vec3(_2028, _2029, _2030));
        float _3962 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2039 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2028, _2029, _2030));
        float _3973 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2043 = _2020 * _2020;
        float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
        float _2054 = exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0);
        float _2061 = 1.0 - _2020;
        float _2071 = (0.5 / (((_1800 * ((_2034 * _2061) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _2061) + _2020) * _2034))) * _2034;
        float _3984 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2073 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
        float _2074 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
        _1995 = (((((_2054 * _1822) + _572) * cbLight._m0[_2005].x) * _2073) * _2074) + _1931;
        _1997 = (((((_2054 * _1824) + _574) * cbLight._m0[_2005].y) * _2073) * _2074) + _1932;
        _1999 = (((((_2054 * _1825) + _575) * cbLight._m0[_2005].z) * _2073) * _2074) + _1933;
    }
    float _2109;
    float _2111;
    float _2113;
    if (_1726)
    {
        _2109 = _1995;
        _2111 = _1997;
        _2113 = _1999;
    }
    else
    {
        uint _2120 = _1634 + 3u;
        uint _2124 = _1634 + 11u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _422) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _500;
        float _2141 = cbLight._m0[_2120].y + _501;
        float _2142 = cbLight._m0[_2120].z + _502;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2120].xyz));
        float _4000 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2154 = dot(vec3(_419, _420, _421), vec3(_2147, _2148, _2149));
        float _4011 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4022 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
        float _2180 = 1.0 - _2139;
        float _2190 = (0.5 / (((_1800 * ((_2153 * _2180) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _2180) + _2139) * _2153))) * _2153;
        float _4033 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _2109 = (((((_2173 * _1822) + _572) * cbLight._m0[_2124].x) * _2192) * _2193) + _1995;
        _2111 = (((((_2173 * _1824) + _574) * cbLight._m0[_2124].y) * _2192) * _2193) + _1997;
        _2113 = (((((_2173 * _1825) + _575) * cbLight._m0[_2124].z) * _2192) * _2193) + _1999;
    }
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    if (_1632.y == 0u)
    {
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2268;
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2268;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2268;
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _509) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _508) / _2284)));
        float _2305 = (log2(_2271 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
        }
        else
        {
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            uint _2565 = 0u;
            uint _2574;
            bool _2575;
            for (;;)
            {
                _2574 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                _2575 = _2574 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2575)
                {
                    frontier_phi_63_pred = _2564;
                    frontier_phi_63_pred_1 = _2563;
                    frontier_phi_63_pred_2 = _2562;
                    frontier_phi_63_pred_3 = _2561;
                    frontier_phi_63_pred_4 = _2560;
                    frontier_phi_63_pred_5 = _2559;
                }
                else
                {
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    uint _2689;
                    _2683 = _2559;
                    _2684 = _2560;
                    _2685 = _2561;
                    _2686 = _2562;
                    _2687 = _2563;
                    _2688 = _2564;
                    _2689 = _2574;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    for (;;)
                    {
                        uint _2693 = uint(findLSB(_2689)) + (_2565 << 5u);
                        uint _2690 = (_2689 + 4294967295u) & _2689;
                        uint _2695 = _2693 * 48u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2715 = (_2693 * 48u) + 4u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2734 = (_2693 * 48u) + 8u;
                        vec3 _2745 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x));
                        float _2749 = _2709.x - _2269;
                        float _2750 = _2709.y - _2270;
                        float _2751 = _2709.z - _2271;
                        float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                        float _2755 = inversesqrt(_2752);
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2759 = dot(vec3(_528, _531, _534), vec3(_2756, _2757, _2758));
                        float _2764 = 1.0 - (_2752 * _2709.w);
                        float _4059 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2766 = sqrt(_2752) * _2728.w;
                        float _2769 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2759) + _2770;
                        float _2776 = _2766 * _2766;
                        float _2780 = ((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2765) / ((_2776 * 0.699999988079071044921875) + 1.0);
                        float _2784 = (-0.0) - _2269;
                        float _2785 = (-0.0) - _2270;
                        float _2786 = (-0.0) - _2271;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2801 = exp2(log2(1.0 / ((_2776 * 3.5) + 5.0)) * 0.25);
                        float _2802 = 1.0 - _603;
                        float _2809 = sqrt(1.0 - ((1.0 - (_2802 * _2802)) * (1.0 - (_2801 * _2801))));
                        float _2810 = _2809 * _2809;
                        float _2811 = _2810 * _2810;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(_528, _531, _534), vec3(_2791, _2792, _2793));
                        float _4075 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2826 = dot(vec3(_528, _531, _534), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _4086 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2833 = ((_2829 * _2829) * (_2811 + (-1.0))) + 1.0;
                        float _2834 = _2769 * _2810;
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2759) + _2835;
                        float _4097 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2840 = 1.0 - _2810;
                        float _2850 = (0.5 / (((_2839 * ((_2825 * _2840) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2839 * _2840) + _2810) * _2825))) * _2839;
                        float _4108 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2861 = (((_2811 * 3.1415927410125732421875) * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) / ((_2833 * _2833) * ((_2776 * 2.1991131305694580078125) + 3.141590118408203125))) * _2765;
                        _2618 = (_2780 * _2728.x) + _2686;
                        _2619 = (_2780 * _2728.y) + _2687;
                        _2620 = (_2780 * _2728.z) + _2688;
                        _2615 = (_2861 * _2745.x) + _2683;
                        _2616 = (_2861 * _2745.y) + _2684;
                        _2617 = (_2861 * _2745.z) + _2685;
                        if (_2690 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2617;
                            _2686 = _2618;
                            _2687 = _2619;
                            _2688 = _2620;
                            _2689 = _2690;
                        }
                    }
                    frontier_phi_63_pred = _2620;
                    frontier_phi_63_pred_1 = _2619;
                    frontier_phi_63_pred_2 = _2618;
                    frontier_phi_63_pred_3 = _2617;
                    frontier_phi_63_pred_4 = _2616;
                    frontier_phi_63_pred_5 = _2615;
                }
                _2426 = frontier_phi_63_pred;
                _2424 = frontier_phi_63_pred_1;
                _2422 = frontier_phi_63_pred_2;
                _2420 = frontier_phi_63_pred_3;
                _2418 = frontier_phi_63_pred_4;
                _2416 = frontier_phi_63_pred_5;
                uint _2566 = _2565 + 1u;
                if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2559 = _2416;
                    _2560 = _2418;
                    _2561 = _2420;
                    _2562 = _2422;
                    _2563 = _2424;
                    _2564 = _2426;
                    _2565 = _2566;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
        }
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.z;
        uint _2432 = (_2430 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2432) & _2315) == 0u)
        {
            _2527 = _2415;
            _2529 = _2417;
            _2531 = _2419;
            _2533 = _2421;
            _2535 = _2423;
            _2537 = _2425;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
            float _2553 = _2552 * _2269;
            float _2554 = _2552 * _2270;
            float _2555 = _2552 * _2271;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2432 < ((_2430 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2666 = _2415;
                float _2667 = _2417;
                float _2668 = _2419;
                float _2669 = _2421;
                float _2670 = _2423;
                float _2671 = _2425;
                uint _2672 = _2432;
                uint _2681;
                bool _2682;
                for (;;)
                {
                    _2681 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                    _2682 = _2681 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2682)
                    {
                        frontier_phi_69_pred = _2671;
                        frontier_phi_69_pred_1 = _2670;
                        frontier_phi_69_pred_2 = _2669;
                        frontier_phi_69_pred_3 = _2668;
                        frontier_phi_69_pred_4 = _2667;
                        frontier_phi_69_pred_5 = _2666;
                    }
                    else
                    {
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _2879 = _2666;
                        float _2880 = _2667;
                        float _2881 = _2668;
                        float _2882 = _2669;
                        float _2883 = _2670;
                        float _2884 = _2671;
                        uint _2885 = _2681;
                        uint _2886;
                        vec4 _2911;
                        float _2912;
                        vec4 _2927;
                        vec3 _2939;
                        vec4 _2955;
                        vec4 _2971;
                        float _3018;
                        bool _3019;
                        for (;;)
                        {
                            uint _2896 = ((_2672 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2885));
                            _2886 = (_2885 + 4294967295u) & _2885;
                            uint _2898 = _2896 * 40u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2912 = _2911.w;
                            uint _2914 = (_2896 * 40u) + 4u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2929 = (_2896 * 40u) + 8u;
                            _2939 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x));
                            uint _2942 = (_2896 * 40u) + 16u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2896 * 40u) + 20u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2896 * 40u) + 24u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2993 = (_2896 * 40u) + 28u;
                            vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3018 = fma(_2271, _3006.z, fma(_2270, _3006.y, _3006.x * _2269)) + _3006.w;
                            _3019 = !((fma(_2271, _2987.z, fma(_2270, _2987.y, _2987.x * _2269)) + _2987.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3019)
                            {
                                float _3046 = _2911.x - _2269;
                                float _3047 = _2911.y - _2270;
                                float _3048 = _2911.z - _2271;
                                float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                                float _3052 = inversesqrt(_3049);
                                float _3053 = _3052 * _3046;
                                float _3054 = _3052 * _3047;
                                float _3055 = _3052 * _3048;
                                float _3059 = 1.0 - (_3049 / (_2912 * _2912));
                                float _4119 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3064 = sqrt(_3049) * _2927.w;
                                float _3066 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                                float _3067 = _3066 * _3066;
                                float _3070 = ((1.0 - _3067) * dot(vec3(_3053, _3054, _3055), vec3(_528, _531, _534))) + _3067;
                                float _3073 = _3064 * _3064;
                                float _3077 = (fma(_2271, _2955.z, fma(_2270, _2955.y, _2955.x * _2269)) + _2955.w) / _3018;
                                float _3078 = (fma(_2271, _2971.z, fma(_2270, _2971.y, _2971.x * _2269)) + _2971.w) / _3018;
                                float _3082 = 1.0 - dot(vec2(_3077, _3078), vec2(_3077, _3078));
                                float _4135 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3084 = _3083 * (((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3060) / ((_3073 * 0.699999988079071044921875) + 1.0));
                                float _3096 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                                float _3097 = 1.0 - _603;
                                float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                                float _3105 = _3104 * _3104;
                                float _3106 = _3105 * _3105;
                                float _3107 = _3053 - _2553;
                                float _3108 = _3054 - _2554;
                                float _3109 = _3055 - _2555;
                                float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                                float _3117 = dot(vec3(_528, _531, _534), vec3((-0.0) - _2553, (-0.0) - _2554, (-0.0) - _2555));
                                float _4146 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3121 = dot(vec3(_528, _531, _534), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                                float _4157 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                                float _3129 = _3066 * _3105;
                                float _3130 = _3129 * _3129;
                                float _3136 = ((1.0 - _3130) * dot(vec3(_528, _531, _534), vec3(_3053, _3054, _3055))) + _3130;
                                float _4168 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3138 = 1.0 - _3105;
                                float _3148 = (0.5 / (((_3137 * ((_3120 * _3138) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3105) * _3120))) * _3137;
                                float _4179 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3158 = (_3083 * _3060) * (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_3128 * _3128) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3084 * _2927.z;
                                frontier_phi_75_pred_1 = _3084 * _2927.y;
                                frontier_phi_75_pred_2 = _3084 * _2927.x;
                                frontier_phi_75_pred_3 = _3158 * _2939.z;
                                frontier_phi_75_pred_4 = _3158 * _2939.y;
                                frontier_phi_75_pred_5 = _3158 * _2939.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_75_pred;
                            _3166 = frontier_phi_75_pred_1;
                            _3165 = frontier_phi_75_pred_2;
                            _3164 = frontier_phi_75_pred_3;
                            _3163 = frontier_phi_75_pred_4;
                            _3162 = frontier_phi_75_pred_5;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            if (_2886 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2886;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2871;
                        frontier_phi_69_pred_1 = _2870;
                        frontier_phi_69_pred_2 = _2869;
                        frontier_phi_69_pred_3 = _2868;
                        frontier_phi_69_pred_4 = _2867;
                        frontier_phi_69_pred_5 = _2866;
                    }
                    _2538 = frontier_phi_69_pred;
                    _2536 = frontier_phi_69_pred_1;
                    _2534 = frontier_phi_69_pred_2;
                    _2532 = frontier_phi_69_pred_3;
                    _2530 = frontier_phi_69_pred_4;
                    _2528 = frontier_phi_69_pred_5;
                    uint _2673 = _2672 + 1u;
                    if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2666 = _2528;
                        _2667 = _2530;
                        _2668 = _2532;
                        _2669 = _2534;
                        _2670 = _2536;
                        _2671 = _2538;
                        _2672 = _2673;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2538;
                frontier_phi_57_58_ladder_1 = _2536;
                frontier_phi_57_58_ladder_2 = _2534;
                frontier_phi_57_58_ladder_3 = _2532;
                frontier_phi_57_58_ladder_4 = _2530;
                frontier_phi_57_58_ladder_5 = _2528;
            }
            else
            {
                frontier_phi_57_58_ladder = _2425;
                frontier_phi_57_58_ladder_1 = _2423;
                frontier_phi_57_58_ladder_2 = _2421;
                frontier_phi_57_58_ladder_3 = _2419;
                frontier_phi_57_58_ladder_4 = _2417;
                frontier_phi_57_58_ladder_5 = _2415;
            }
            _2527 = frontier_phi_57_58_ladder_5;
            _2529 = frontier_phi_57_58_ladder_4;
            _2531 = frontier_phi_57_58_ladder_3;
            _2533 = frontier_phi_57_58_ladder_2;
            _2535 = frontier_phi_57_58_ladder_1;
            _2537 = frontier_phi_57_58_ladder;
        }
        float _2542 = isnan(1.0) ? _587 : (isnan(_587) ? 1.0 : min(_587, 1.0));
        _2327 = (_2542 * _2533) + _1764;
        _2329 = (_2542 * _2535) + _1766;
        _2331 = (_2542 * _2537) + _1768;
        _2333 = ((_2527 * _572) * _2542) + _2109;
        _2335 = ((_2529 * _574) * _2542) + _2111;
        _2337 = ((_2531 * _575) * _2542) + _2113;
    }
    else
    {
        _2327 = _1764;
        _2329 = _1766;
        _2331 = _1768;
        _2333 = _2109;
        _2335 = _2111;
        _2337 = _2113;
    }
    float _4195 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4206 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4217 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    uint _2357 = _547 + 6u;
    float _2365 = _508 / cbSceneParam._m0[86u].x;
    float _2366 = _509 / cbSceneParam._m0[86u].y;
    vec4 _2380 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, (log2((isnan(cbSceneParam._m0[77u].w) ? _442 : (isnan(_442) ? cbSceneParam._m0[77u].w : min(_442, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2382 = _2380.x;
    float _2383 = _2380.y;
    float _2384 = _2380.z;
    float _2385 = _2380.w;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_442 > cbSceneParam._m0[78u].w)
    {
        float _2440 = isnan(_442) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _442 : min(cbSceneParam._m0[80u].w, _442));
        float _2441 = _2440 / _442;
        float _2452 = _2441 * _493;
        float _2453 = _494 * _2441;
        float _2454 = (-0.0) - _2453;
        float _2455 = _2441 * _495;
        float _2457 = (cbSceneParam._m0[77u].w * _2454) / _2440;
        float _2458 = _2457 + cbSceneParam._m0[79u].w;
        float _2459 = cbSceneParam._m0[79u].w - _2453;
        float _2465 = sqrt(((_2452 * _2452) + (_2453 * _2453)) + (_2455 * _2455));
        float _2468 = (1.0 - (cbSceneParam._m0[77u].w / _2440)) * _2465;
        float _2473 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2475 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2628;
        if (abs((_2454 - _2457) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2628 = ((((_2458 > 0.0) ? exp2(_2473 * _2458) : (2.0 - exp2(_2475 * _2458))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2468;
        }
        else
        {
            float _2588 = 1.0 / cbSceneParam._m0[80u].x;
            float _2589 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : max(_2458, _2459));
            float _2590 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : min(_2458, _2459));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            _2628 = ((abs(_2465 / _2454) * cbSceneParam._m0[80u].y) * ((((_2599 - _2600) * 2.0) - ((exp2(_2473 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)))) - exp2(_2473 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))))) * _2588)) - ((exp2(_2475 * _2599) - exp2(_2475 * _2600)) * _2588))) + (_2468 * cbSceneParam._m0[80u].z);
        }
        vec4 _2630 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, 1.0), 0.0);
        float _2639 = exp2((_2628 * (-1.44269502162933349609375)) * (1.0 - _2630.w));
        float _2640 = log2(_2639);
        float _2656 = log2(_2385);
        _2477 = (exp2(_2656 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].x)) * _2630.x) / cbSceneParam._m0[78u].x)) + _2382;
        _2479 = (exp2(_2656 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].y)) * _2630.y) / cbSceneParam._m0[78u].y)) + _2383;
        _2481 = (exp2(_2656 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].z)) * _2630.z) / cbSceneParam._m0[78u].z)) + _2384;
        _2483 = _2639 * _2385;
    }
    else
    {
        _2477 = _2382;
        _2479 = _2383;
        _2481 = _2384;
        _2483 = _2385;
    }
    float _2495 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2496 = _2495 == 3.0;
    float _2497 = log2(_2483);
    float _2504 = exp2(_2497 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2327 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _587))) + ((_2333 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1397)) * cbPerFrame._m0[3u].x));
    float _2505 = exp2(_2497 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2329 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _587))) + ((_2335 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1397)) * cbPerFrame._m0[3u].x));
    float _2506 = exp2(_2497 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2331 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _587))) + ((_2337 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1397)) * cbPerFrame._m0[3u].x));
    float _2515 = (_2495 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2515 * (_2496 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2477)));
    SV_Target.y = _2515 * (_2496 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2479)));
    SV_Target.z = _2515 * (_2496 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2481)));
    SV_Target.w = cbInstanceData._m0[_2357].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2357].w;
}


