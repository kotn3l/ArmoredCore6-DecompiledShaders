#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _872;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = cbMtdParam._m0[11u].x + _253.x;
    vec4 _272 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3252 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))));
    vec4 _308 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _315 = fma(_289, _211, fma(_282, _203 * TANGENT.x, (_189 * _182) * _280));
    float _318 = fma(_289, _212, fma(_282, _203 * TANGENT.y, (_189 * _183) * _280));
    float _321 = fma(_289, _213, fma(_282, _203 * TANGENT.z, (_189 * _184) * _280));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _3263 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _329 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3285 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3296 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3307 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _333 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _349 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _400 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _390);
    float _401 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _390);
    float _402 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _390);
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _400 * _406;
    float _408 = _401 * _406;
    float _409 = _402 * _406;
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _437 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _440 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _443 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    uint _456 = uint(roundEven(NORMAL.w)) * 13u;
    uint _458 = _456 + 9u;
    uint _459 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _465 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_459].x;
    float _466 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_459].y;
    float _467 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_459].z;
    float _3318 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _471 = 1.0 - _333;
    float _472 = _468 * _471;
    float _473 = _469 * _471;
    float _474 = _470 * _471;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _333;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _333;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _333;
    float _482 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    vec4 _494 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _497 = _494.x * TEXCOORD.z;
    float _498 = dot(vec3(_326, _327, _328), vec3(_407, _408, _409));
    float _501 = _498 * 2.0;
    float _505 = (_501 * _326) - _407;
    float _506 = (_501 * _327) - _408;
    float _507 = (_501 * _328) - _409;
    float _511 = abs(dot(vec3(_407, _408, _409), vec3(_326, _327, _328)));
    float _3351 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _513 = sqrt(_329);
    float _526 = exp2((_513 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_513 * 3.0));
    float _532 = (1.0 - _526) * ((_513 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _533 = _526 * _513;
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _871;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _596 = fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561));
        float _600 = fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561));
        float _604 = fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561));
        float _629 = _561 + _326;
        float _630 = _565 + _327;
        float _631 = _569 + _328;
        float _641 = fma(_631, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629)) - _596;
        float _642 = fma(_631, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629)) - _600;
        float _643 = fma(_631, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629)) - _604;
        float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
        float _660 = ((_647 * _641) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_596 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_647 * _642) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_600 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_647 * _643) / cbModelParam._m0[34u].z) + ((((((_604 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        float _699 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_665.x + (-0.5));
        float _701 = _699 * (_665.y + (-0.5));
        float _702 = _699 * (_665.z + (-0.5));
        float _709 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_672.x + (-0.5));
        float _711 = _709 * (_672.y + (-0.5));
        float _712 = _709 * (_672.z + (-0.5));
        float _719 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_679.x + (-0.5));
        float _721 = _719 * (_679.y + (-0.5));
        float _722 = _719 * (_679.z + (-0.5));
        float _729 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_686.x + (-0.5));
        float _731 = _729 * (_686.y + (-0.5));
        float _732 = _729 * (_686.z + (-0.5));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = _700 * 0.5;
        float _737 = _710 * 0.5;
        float _738 = _720 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _753 = (dot(vec3(_326, _327, _328), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _763 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3399 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_765 + 1.0))) + _770) * _733;
        float _780 = _701 * 0.5;
        float _781 = _711 * 0.5;
        float _782 = _721 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _796 = (dot(vec3(_326, _327, _328), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _805 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3432 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_807 + 1.0))) + _812) * _734;
        float _822 = _702 * 0.5;
        float _823 = _712 * 0.5;
        float _824 = _722 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_326, _327, _328), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3465 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_849 + 1.0))) + _854) * _735;
        _871 = _702;
        _873 = _701;
        _874 = _700;
        _875 = _712;
        _876 = _711;
        _877 = _710;
        _878 = _722;
        _879 = _721;
        _880 = _720;
        _881 = _735;
        _882 = _734;
        _883 = _733;
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
    }
    else
    {
        _871 = _872;
        _873 = _872;
        _874 = _872;
        _875 = _872;
        _876 = _872;
        _877 = _872;
        _878 = _872;
        _879 = _872;
        _880 = _872;
        _881 = _872;
        _882 = _872;
        _883 = _872;
        _884 = 0.0;
        _885 = 0.0;
        _886 = 0.0;
    }
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _912 = fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561));
        float _916 = fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561));
        float _920 = fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561));
        float _943 = _561 + _326;
        float _944 = _565 + _327;
        float _945 = _569 + _328;
        float _955 = fma(_945, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943)) - _912;
        float _956 = fma(_945, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943)) - _916;
        float _957 = fma(_945, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943)) - _920;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_912 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_916 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[35u].z) + ((((((_920 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1011 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_978.x + (-0.5));
        float _1013 = _1011 * (_978.y + (-0.5));
        float _1014 = _1011 * (_978.z + (-0.5));
        float _1021 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_985.x + (-0.5));
        float _1023 = _1021 * (_985.y + (-0.5));
        float _1024 = _1021 * (_985.z + (-0.5));
        float _1031 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_992.x + (-0.5));
        float _1033 = _1031 * (_992.y + (-0.5));
        float _1034 = _1031 * (_992.z + (-0.5));
        float _1041 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_999.x + (-0.5));
        float _1043 = _1041 * (_999.y + (-0.5));
        float _1044 = _1041 * (_999.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_326, _327, _328), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3528 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1075 + 1.0))) + _1080) * _1045;
        float _1090 = _1013 * 0.5;
        float _1091 = _1023 * 0.5;
        float _1092 = _1033 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_326, _327, _328), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3561 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1117 + 1.0))) + _1122) * _1046;
        float _1132 = _1014 * 0.5;
        float _1133 = _1024 * 0.5;
        float _1134 = _1034 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_326, _327, _328), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3594 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1159 + 1.0))) + _1164) * _1047;
        _1181 = _1014;
        _1182 = _1013;
        _1183 = _1012;
        _1184 = _1024;
        _1185 = _1023;
        _1186 = _1022;
        _1187 = _1034;
        _1188 = _1033;
        _1189 = _1032;
        _1190 = _1047;
        _1191 = _1046;
        _1192 = _1045;
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _872;
        _1182 = _872;
        _1183 = _872;
        _1184 = _872;
        _1185 = _872;
        _1186 = _872;
        _1187 = _872;
        _1188 = _872;
        _1189 = _872;
        _1190 = _872;
        _1191 = _872;
        _1192 = _872;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1228 = fma(_1207, cbSceneParam._m0[89u].z, fma(_1206, cbSceneParam._m0[89u].y, _1205 * cbSceneParam._m0[89u].x));
    float _1231 = fma(_1207, cbSceneParam._m0[90u].z, fma(_1206, cbSceneParam._m0[90u].y, _1205 * cbSceneParam._m0[90u].x));
    float _1234 = fma(_1207, cbSceneParam._m0[91u].z, fma(_1206, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1205));
    float _1249 = _505 * 0.5;
    float _1250 = _506 * 0.5;
    float _1251 = _507 * 0.5;
    float _1252 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1255 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1258 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1292;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1265 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_871, _875, _878, _881));
        float _1269 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_873, _876, _879, _882));
        float _1273 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_874, _877, _880, _883));
        float _1280 = dot(vec4(cbModelParam._m0[39u]), vec4(_1249, _1250, _1251, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1303;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1294 = dot(vec4(cbModelParam._m0[40u]), vec4(_1249, _1250, _1251, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1307 = (_1303 * cbModelParam._m0[1u].x) + (_1292 * (1.0 - cbModelParam._m0[1u].x));
    float _1317 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _329);
    float _1318 = isnan(_1317) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1317 : min(cbModelParam._m0[25u].z, _1317));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1367 = fma(_569, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561)) + cbModelParam._m0[13u].w;
        float _1371 = fma(_569, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561)) + cbModelParam._m0[14u].w;
        float _1375 = fma(_569, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561)) + cbModelParam._m0[15u].w;
        float _1378 = fma(_507, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505));
        float _1381 = fma(_507, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505));
        float _1384 = fma(_507, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505));
        float _1412;
        if (_1378 > 0.0)
        {
            _1412 = abs((1.0 - _1367) / _1378);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1367 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1412 = frontier_phi_16_14_ladder;
        }
        float _1619;
        if (_1381 > 0.0)
        {
            _1619 = abs((1.0 - _1371) / _1381);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1371 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1619 = frontier_phi_25_21_ladder;
        }
        float _1873;
        if (_1384 > 0.0)
        {
            _1873 = abs((1.0 - _1375) / _1384);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1375 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1873 = frontier_phi_37_32_ladder;
        }
        float _1875 = isnan(_1619) ? _1412 : (isnan(_1412) ? _1619 : min(_1412, _1619));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1378) + _1367;
        float _1881 = (_1876 * _1381) + _1371;
        float _1882 = (_1876 * _1384) + _1375;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1318);
            frontier_phi_15_37_ladder = _2010.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2010.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2010.x * cbModelParam._m0[1u].y;
        }
        _1400 = frontier_phi_15_37_ladder_2;
        _1402 = frontier_phi_15_37_ladder_1;
        _1404 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_505, _506, _507), _1318);
        _1400 = _1388.x * cbModelParam._m0[1u].y;
        _1402 = _1388.y * cbModelParam._m0[1u].y;
        _1404 = _1388.z * cbModelParam._m0[1u].y;
    }
    float _1408 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _329);
    float _1409 = isnan(_1408) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1408 : min(cbModelParam._m0[25u].w, _1408));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1466 = fma(_569, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561)) + cbModelParam._m0[21u].w;
        float _1470 = fma(_569, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561)) + cbModelParam._m0[22u].w;
        float _1474 = fma(_569, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561)) + cbModelParam._m0[23u].w;
        float _1477 = fma(_507, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505));
        float _1480 = fma(_507, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505));
        float _1483 = fma(_507, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505));
        float _1624;
        if (_1477 > 0.0)
        {
            _1624 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1624 = frontier_phi_27_23_ladder;
        }
        float _1900;
        if (_1480 > 0.0)
        {
            _1900 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1900 = frontier_phi_39_34_ladder;
        }
        float _2113;
        if (_1483 > 0.0)
        {
            _2113 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2113 = frontier_phi_48_45_ladder;
        }
        float _2115 = isnan(_1900) ? _1624 : (isnan(_1624) ? _1900 : min(_1624, _1900));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1477) + _1466;
        float _2121 = (_2116 * _1480) + _1470;
        float _2122 = (_2116 * _1483) + _1474;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2123;
        float _2126 = _2123 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2122 > _2126) || ((_2122 < _2124) || ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 < _2124) || (_2120 > _2126))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2122, cbModelParam._m0[17u].z, fma(_2121, cbModelParam._m0[17u].y, _2120 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2122, cbModelParam._m0[18u].z, fma(_2121, cbModelParam._m0[18u].y, _2120 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2122, cbModelParam._m0[19u].z, fma(_2121, cbModelParam._m0[19u].y, _2120 * cbModelParam._m0[19u].x))), _1409);
            frontier_phi_24_48_ladder = _2355.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2355.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2355.x * cbModelParam._m0[1u].z;
        }
        _1502 = frontier_phi_24_48_ladder_2;
        _1504 = frontier_phi_24_48_ladder_1;
        _1506 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_505, _506, _507), _1409);
        _1502 = _1486.x * cbModelParam._m0[1u].z;
        _1504 = _1486.y * cbModelParam._m0[1u].z;
        _1506 = _1486.z * cbModelParam._m0[1u].z;
    }
    float _1519 = (((_532 * _482) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1521 = (((_532 * _484) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1523 = (((_532 * _485) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1526 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, _1519 * cbSceneParam._m0[91u].x));
    uvec4 _1542 = floatBitsToUint(cbInstanceData._m0[_456 + 5u]);
    uint _1544 = _1542.x * 14u;
    uint _1545 = _1544 + 13u;
    float _1552 = _497 + (-1.0);
    float _1557 = (cbLight._m0[_1545].x * _1552) + 1.0;
    float _1558 = (cbLight._m0[_1545].y * _1552) + 1.0;
    float _1559 = (cbLight._m0[_1545].z * _1552) + 1.0;
    float _1560 = (cbLight._m0[_1545].w * _1552) + 1.0;
    uint _1561 = _1544 + 5u;
    float _1567 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    uint _1571 = _1544 + 4u;
    float _1578 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
    uint _1582 = _1544 | 1u;
    float _1593 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_326, _327, _328));
    float _1596 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_326, _327, _328));
    float _3730 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _3741 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1601 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1603 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.3183098733425140380859375;
    float _1610 = ((cbLight._m0[_1561].x * _1567) * _1603) + ((cbLight._m0[_1571].x * _1578) * _1601);
    float _1611 = ((_1567 * cbLight._m0[_1561].y) * _1603) + ((_1578 * cbLight._m0[_1571].y) * _1601);
    float _1612 = ((_1567 * cbLight._m0[_1561].z) * _1603) + ((_1578 * cbLight._m0[_1571].z) * _1601);
    uvec4 _1616 = floatBitsToUint(cbLight._m0[_1544 + 12u]);
    bool _1618 = _1616.x == 0u;
    float _1629;
    float _1631;
    float _1633;
    if (_1618)
    {
        _1629 = _1610;
        _1631 = _1611;
        _1633 = _1612;
    }
    else
    {
        uint _1637 = _1544 + 6u;
        float _1653 = (dot(vec3(cbLight._m0[_1544 + 2u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1654 = _1653 * _1653;
        float _3752 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1656 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1629 = (((cbLight._m0[_1637].x * 0.3183098733425140380859375) * _1655) * _1656) + _1610;
        _1631 = (((cbLight._m0[_1637].y * 0.3183098733425140380859375) * _1655) * _1656) + _1611;
        _1633 = (((cbLight._m0[_1637].z * 0.3183098733425140380859375) * _1655) * _1656) + _1612;
    }
    bool _1636 = _1616.y == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1636)
    {
        _1674 = _1629;
        _1676 = _1631;
        _1678 = _1633;
    }
    else
    {
        uint _1844 = _1544 + 7u;
        float _1860 = (dot(vec3(cbLight._m0[_1544 + 3u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _3768 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1863 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1674 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1629;
        _1676 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1631;
        _1678 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1633;
    }
    uint _1681 = _1544 + 8u;
    float _1694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1544].w)) * _329) * 0.949999988079071044921875);
    float _1695 = _1694 * _1694;
    float _1696 = cbLight._m0[_1544].x + _407;
    float _1697 = cbLight._m0[_1544].y + _408;
    float _1698 = cbLight._m0[_1544].z + _409;
    float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
    float _1703 = _1702 * _1696;
    float _1704 = _1702 * _1697;
    float _1705 = _1702 * _1698;
    float _1706 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1544].xyz));
    float _3784 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _1710 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1711 = dot(vec3(_326, _327, _328), vec3(_1703, _1704, _1705));
    float _3806 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_1703, _1704, _1705));
    float _3817 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1719 = _1695 * _1695;
    float _1723 = ((_1714 * _1714) * (_1719 + (-1.0))) + 1.0;
    float _1731 = exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0);
    float _1732 = 0.959999978542327880859375 - _479;
    float _1734 = 0.959999978542327880859375 - _480;
    float _1735 = 0.959999978542327880859375 - _481;
    float _1742 = 1.0 - _1695;
    float _1753 = (0.5 / (((_1710 * ((_1709 * _1742) + _1695)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1742) + _1695) * _1709))) * _1709;
    float _3828 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1719 / ((_1723 * _1723) * 3.141590118408203125));
    uint _1766 = _1544 + 9u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1582].w)) * _329) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1582].x + _407;
    float _1780 = cbLight._m0[_1582].y + _408;
    float _1781 = cbLight._m0[_1582].z + _409;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1582].xyz));
    float _3839 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1793 = dot(vec3(_326, _327, _328), vec3(_1786, _1787, _1788));
    float _3850 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_1786, _1787, _1788));
    float _3861 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1778 * _1778;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1812 = exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0);
    float _1819 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1710 * ((_1792 * _1819) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1819) + _1778) * _1792))) * _1792;
    float _3872 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    float _1841 = (((((_1812 * _1732) + _482) * cbLight._m0[_1766].x) * _1831) * _1567) + (((((_1731 * _1732) + _482) * cbLight._m0[_1681].x) * _1755) * _1578);
    float _1842 = (((((_1812 * _1734) + _484) * cbLight._m0[_1766].y) * _1831) * _1567) + (((((_1731 * _1734) + _484) * cbLight._m0[_1681].y) * _1755) * _1578);
    float _1843 = (((((_1812 * _1735) + _485) * cbLight._m0[_1766].z) * _1831) * _1567) + (((((_1731 * _1735) + _485) * cbLight._m0[_1681].z) * _1755) * _1578);
    float _1905;
    float _1907;
    float _1909;
    if (_1618)
    {
        _1905 = _1841;
        _1907 = _1842;
        _1909 = _1843;
    }
    else
    {
        uint _1911 = _1544 + 2u;
        uint _1915 = _1544 + 10u;
        float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _329) * 0.949999988079071044921875);
        float _1930 = _1929 * _1929;
        float _1931 = cbLight._m0[_1911].x + _407;
        float _1932 = cbLight._m0[_1911].y + _408;
        float _1933 = cbLight._m0[_1911].z + _409;
        float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
        float _1938 = _1937 * _1931;
        float _1939 = _1937 * _1932;
        float _1940 = _1937 * _1933;
        float _1941 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1911].xyz));
        float _3883 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1945 = dot(vec3(_326, _327, _328), vec3(_1938, _1939, _1940));
        float _3894 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1948 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1949 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_1938, _1939, _1940));
        float _3905 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1953 = _1930 * _1930;
        float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
        float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0);
        float _1971 = 1.0 - _1930;
        float _1981 = (0.5 / (((_1710 * ((_1944 * _1971) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1971) + _1930) * _1944))) * _1944;
        float _3916 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1983 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
        float _1984 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1905 = (((((_1964 * _1732) + _482) * cbLight._m0[_1915].x) * _1983) * _1984) + _1841;
        _1907 = (((((_1964 * _1734) + _484) * cbLight._m0[_1915].y) * _1983) * _1984) + _1842;
        _1909 = (((((_1964 * _1735) + _485) * cbLight._m0[_1915].z) * _1983) * _1984) + _1843;
    }
    float _2019;
    float _2021;
    float _2023;
    if (_1636)
    {
        _2019 = _1905;
        _2021 = _1907;
        _2023 = _1909;
    }
    else
    {
        uint _2030 = _1544 + 3u;
        uint _2034 = _1544 + 11u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _329) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _407;
        float _2051 = cbLight._m0[_2030].y + _408;
        float _2052 = cbLight._m0[_2030].z + _409;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_2030].xyz));
        float _3932 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2064 = dot(vec3(_326, _327, _328), vec3(_2057, _2058, _2059));
        float _3943 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _3954 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
        float _2090 = 1.0 - _2049;
        float _2100 = (0.5 / (((_1710 * ((_2063 * _2090) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _2090) + _2049) * _2063))) * _2063;
        float _3965 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2102 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2103 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _2019 = (((((_2083 * _1732) + _482) * cbLight._m0[_2034].x) * _2102) * _2103) + _1905;
        _2021 = (((((_2083 * _1734) + _484) * cbLight._m0[_2034].y) * _2102) * _2103) + _1907;
        _2023 = (((((_2083 * _1735) + _485) * cbLight._m0[_2034].z) * _2102) * _2103) + _1909;
    }
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1542.y == 0u)
    {
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2178;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2178;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2178;
        uvec4 _2193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2194 = _2193.x;
        uint _2205 = uint((float(_2193.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2194))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2194)));
        float _2215 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2216 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        uint _2219 = uint(isnan(14.0) ? _2216 : (isnan(_2216) ? 14.0 : min(_2216, 14.0)));
        uvec4 _2224 = texelFetch(g_lightClusterGridBuffer, int(((_2219 << 2u) + (_2205 << 6u)) >> 2u));
        uint _2225 = _2224.x;
        uint _2226 = _2193.z;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        if (((((1u << ((_2226 >> 4u) & 15u)) + 4294967295u) & _2225) == 0u) || ((_2226 & 240u) == 0u))
        {
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
        }
        else
        {
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            uint _2519 = 0u;
            uint _2528;
            bool _2529;
            for (;;)
            {
                _2528 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2519 << 2u)) >> 2u)).x;
                _2529 = _2528 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2529)
                {
                    frontier_phi_63_pred = _2518;
                    frontier_phi_63_pred_1 = _2517;
                    frontier_phi_63_pred_2 = _2516;
                    frontier_phi_63_pred_3 = _2515;
                    frontier_phi_63_pred_4 = _2514;
                    frontier_phi_63_pred_5 = _2513;
                }
                else
                {
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    uint _2643;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2528;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    for (;;)
                    {
                        uint _2647 = uint(findLSB(_2643)) + (_2519 << 5u);
                        uint _2644 = (_2643 + 4294967295u) & _2643;
                        uint _2649 = _2647 * 48u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2669 = (_2647 * 48u) + 4u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2688 = (_2647 * 48u) + 8u;
                        vec3 _2699 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x));
                        float _2703 = _2663.x - _2179;
                        float _2704 = _2663.y - _2180;
                        float _2705 = _2663.z - _2181;
                        float _2706 = dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705));
                        float _2709 = inversesqrt(_2706);
                        float _2710 = _2709 * _2703;
                        float _2711 = _2709 * _2704;
                        float _2712 = _2709 * _2705;
                        float _2713 = dot(vec3(_437, _440, _443), vec3(_2710, _2711, _2712));
                        float _2718 = 1.0 - (_2706 * _2663.w);
                        float _3991 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2719 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2720 = sqrt(_2706) * _2682.w;
                        float _2723 = 1.39999997615814208984375 / (_2720 + 1.39999997615814208984375);
                        float _2724 = _2723 * _2723;
                        float _2727 = ((1.0 - _2724) * _2713) + _2724;
                        float _2730 = _2720 * _2720;
                        float _2734 = ((isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))) * _2719) / ((_2730 * 0.699999988079071044921875) + 1.0);
                        float _2738 = (-0.0) - _2179;
                        float _2739 = (-0.0) - _2180;
                        float _2740 = (-0.0) - _2181;
                        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2755 = exp2(log2(1.0 / ((_2730 * 3.5) + 5.0)) * 0.25);
                        float _2756 = 1.0 - _513;
                        float _2763 = sqrt(1.0 - ((1.0 - (_2756 * _2756)) * (1.0 - (_2755 * _2755))));
                        float _2764 = _2763 * _2763;
                        float _2765 = _2764 * _2764;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2768 = _2747 + _2712;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2776 = dot(vec3(_437, _440, _443), vec3(_2745, _2746, _2747));
                        float _4007 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2780 = dot(vec3(_437, _440, _443), vec3(_2772 * _2766, _2772 * _2767, _2772 * _2768));
                        float _4018 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2787 = ((_2783 * _2783) * (_2765 + (-1.0))) + 1.0;
                        float _2788 = _2723 * _2764;
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2713) + _2789;
                        float _4029 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2794 = 1.0 - _2764;
                        float _2804 = (0.5 / (((_2793 * ((_2779 * _2794) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2793 * _2794) + _2764) * _2779))) * _2793;
                        float _4040 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2815 = (((_2765 * 3.1415927410125732421875) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) / ((_2787 * _2787) * ((_2730 * 2.1991131305694580078125) + 3.141590118408203125))) * _2719;
                        _2572 = (_2734 * _2682.x) + _2640;
                        _2573 = (_2734 * _2682.y) + _2641;
                        _2574 = (_2734 * _2682.z) + _2642;
                        _2569 = (_2815 * _2699.x) + _2637;
                        _2570 = (_2815 * _2699.y) + _2638;
                        _2571 = (_2815 * _2699.z) + _2639;
                        if (_2644 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2644;
                        }
                    }
                    frontier_phi_63_pred = _2574;
                    frontier_phi_63_pred_1 = _2573;
                    frontier_phi_63_pred_2 = _2572;
                    frontier_phi_63_pred_3 = _2571;
                    frontier_phi_63_pred_4 = _2570;
                    frontier_phi_63_pred_5 = _2569;
                }
                _2371 = frontier_phi_63_pred;
                _2369 = frontier_phi_63_pred_1;
                _2367 = frontier_phi_63_pred_2;
                _2365 = frontier_phi_63_pred_3;
                _2363 = frontier_phi_63_pred_4;
                _2361 = frontier_phi_63_pred_5;
                uint _2520 = _2519 + 1u;
                if (_2520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2513 = _2361;
                    _2514 = _2363;
                    _2515 = _2365;
                    _2516 = _2367;
                    _2517 = _2369;
                    _2518 = _2371;
                    _2519 = _2520;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
        }
        uvec4 _2374 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2375 = _2374.z;
        uint _2377 = (_2375 >> 8u) & 15u;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((4294967295u << _2377) & _2225) == 0u)
        {
            _2481 = _2360;
            _2483 = _2362;
            _2485 = _2364;
            _2487 = _2366;
            _2489 = _2368;
            _2491 = _2370;
        }
        else
        {
            float _2506 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _2507 = _2506 * _2179;
            float _2508 = _2506 * _2180;
            float _2509 = _2506 * _2181;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2377 < ((_2375 >> 12u) & 15u))
            {
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2620 = _2360;
                float _2621 = _2362;
                float _2622 = _2364;
                float _2623 = _2366;
                float _2624 = _2368;
                float _2625 = _2370;
                uint _2626 = _2377;
                uint _2635;
                bool _2636;
                for (;;)
                {
                    _2635 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                    _2636 = _2635 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2636)
                    {
                        frontier_phi_69_pred = _2625;
                        frontier_phi_69_pred_1 = _2624;
                        frontier_phi_69_pred_2 = _2623;
                        frontier_phi_69_pred_3 = _2622;
                        frontier_phi_69_pred_4 = _2621;
                        frontier_phi_69_pred_5 = _2620;
                    }
                    else
                    {
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        float _2837 = _2624;
                        float _2838 = _2625;
                        uint _2839 = _2635;
                        uint _2840;
                        vec4 _2865;
                        float _2866;
                        vec4 _2881;
                        vec3 _2893;
                        vec4 _2909;
                        vec4 _2925;
                        float _2972;
                        bool _2973;
                        for (;;)
                        {
                            uint _2850 = ((_2626 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2839));
                            _2840 = (_2839 + 4294967295u) & _2839;
                            uint _2852 = _2850 * 40u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            _2866 = _2865.w;
                            uint _2868 = (_2850 * 40u) + 4u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2883 = (_2850 * 40u) + 8u;
                            _2893 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x));
                            uint _2896 = (_2850 * 40u) + 16u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2912 = (_2850 * 40u) + 20u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2850 * 40u) + 24u;
                            vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2947 = (_2850 * 40u) + 28u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2972 = fma(_2181, _2960.z, fma(_2180, _2960.y, _2960.x * _2179)) + _2960.w;
                            _2973 = !((fma(_2181, _2941.z, fma(_2180, _2941.y, _2941.x * _2179)) + _2941.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2973)
                            {
                                float _3000 = _2865.x - _2179;
                                float _3001 = _2865.y - _2180;
                                float _3002 = _2865.z - _2181;
                                float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                                float _3006 = inversesqrt(_3003);
                                float _3007 = _3006 * _3000;
                                float _3008 = _3006 * _3001;
                                float _3009 = _3006 * _3002;
                                float _3013 = 1.0 - (_3003 / (_2866 * _2866));
                                float _4051 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3018 = sqrt(_3003) * _2881.w;
                                float _3020 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                                float _3021 = _3020 * _3020;
                                float _3024 = ((1.0 - _3021) * dot(vec3(_3007, _3008, _3009), vec3(_437, _440, _443))) + _3021;
                                float _3027 = _3018 * _3018;
                                float _3031 = (fma(_2181, _2909.z, fma(_2180, _2909.y, _2909.x * _2179)) + _2909.w) / _2972;
                                float _3032 = (fma(_2181, _2925.z, fma(_2180, _2925.y, _2925.x * _2179)) + _2925.w) / _2972;
                                float _3036 = 1.0 - dot(vec2(_3031, _3032), vec2(_3031, _3032));
                                float _4067 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3038 = _3037 * (((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3014) / ((_3027 * 0.699999988079071044921875) + 1.0));
                                float _3050 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                                float _3051 = 1.0 - _513;
                                float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                                float _3059 = _3058 * _3058;
                                float _3060 = _3059 * _3059;
                                float _3061 = _3007 - _2507;
                                float _3062 = _3008 - _2508;
                                float _3063 = _3009 - _2509;
                                float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                                float _3071 = dot(vec3(_437, _440, _443), vec3((-0.0) - _2507, (-0.0) - _2508, (-0.0) - _2509));
                                float _4078 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3074 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3075 = dot(vec3(_437, _440, _443), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                                float _4089 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                                float _3083 = _3020 * _3059;
                                float _3084 = _3083 * _3083;
                                float _3090 = ((1.0 - _3084) * dot(vec3(_437, _440, _443), vec3(_3007, _3008, _3009))) + _3084;
                                float _4100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3092 = 1.0 - _3059;
                                float _3102 = (0.5 / (((_3091 * ((_3074 * _3092) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3059) * _3074))) * _3091;
                                float _4111 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3112 = (_3037 * _3014) * (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) / ((_3082 * _3082) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3038 * _2881.z;
                                frontier_phi_75_pred_1 = _3038 * _2881.y;
                                frontier_phi_75_pred_2 = _3038 * _2881.x;
                                frontier_phi_75_pred_3 = _3112 * _2893.z;
                                frontier_phi_75_pred_4 = _3112 * _2893.y;
                                frontier_phi_75_pred_5 = _3112 * _2893.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3121 = frontier_phi_75_pred;
                            _3120 = frontier_phi_75_pred_1;
                            _3119 = frontier_phi_75_pred_2;
                            _3118 = frontier_phi_75_pred_3;
                            _3117 = frontier_phi_75_pred_4;
                            _3116 = frontier_phi_75_pred_5;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            if (_2840 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2840;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2825;
                        frontier_phi_69_pred_1 = _2824;
                        frontier_phi_69_pred_2 = _2823;
                        frontier_phi_69_pred_3 = _2822;
                        frontier_phi_69_pred_4 = _2821;
                        frontier_phi_69_pred_5 = _2820;
                    }
                    _2492 = frontier_phi_69_pred;
                    _2490 = frontier_phi_69_pred_1;
                    _2488 = frontier_phi_69_pred_2;
                    _2486 = frontier_phi_69_pred_3;
                    _2484 = frontier_phi_69_pred_4;
                    _2482 = frontier_phi_69_pred_5;
                    uint _2627 = _2626 + 1u;
                    if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2620 = _2482;
                        _2621 = _2484;
                        _2622 = _2486;
                        _2623 = _2488;
                        _2624 = _2490;
                        _2625 = _2492;
                        _2626 = _2627;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2492;
                frontier_phi_57_58_ladder_1 = _2490;
                frontier_phi_57_58_ladder_2 = _2488;
                frontier_phi_57_58_ladder_3 = _2486;
                frontier_phi_57_58_ladder_4 = _2484;
                frontier_phi_57_58_ladder_5 = _2482;
            }
            else
            {
                frontier_phi_57_58_ladder = _2370;
                frontier_phi_57_58_ladder_1 = _2368;
                frontier_phi_57_58_ladder_2 = _2366;
                frontier_phi_57_58_ladder_3 = _2364;
                frontier_phi_57_58_ladder_4 = _2362;
                frontier_phi_57_58_ladder_5 = _2360;
            }
            _2481 = frontier_phi_57_58_ladder_5;
            _2483 = frontier_phi_57_58_ladder_4;
            _2485 = frontier_phi_57_58_ladder_3;
            _2487 = frontier_phi_57_58_ladder_2;
            _2489 = frontier_phi_57_58_ladder_1;
            _2491 = frontier_phi_57_58_ladder;
        }
        float _2496 = isnan(1.0) ? _497 : (isnan(_497) ? 1.0 : min(_497, 1.0));
        _2237 = (_2496 * _2487) + _1674;
        _2239 = (_2496 * _2489) + _1676;
        _2241 = (_2496 * _2491) + _1678;
        _2243 = ((_2481 * _482) * _2496) + _2019;
        _2245 = ((_2483 * _484) * _2496) + _2021;
        _2247 = ((_2485 * _485) * _2496) + _2023;
    }
    else
    {
        _2237 = _1674;
        _2239 = _1676;
        _2241 = _1678;
        _2243 = _2019;
        _2245 = _2021;
        _2247 = _2023;
    }
    uint _2253 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _2261 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _308.x) * cbInstanceData._m0[_2253].x;
    float _2264 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _308.y) * cbInstanceData._m0[_2253].y;
    float _2267 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _308.z) * cbInstanceData._m0[_2253].z;
    float _4127 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4138 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4149 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2284 = (((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2237 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _497))) + ((_2243 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + _2261;
    float _2286 = (_2264 + ((_2245 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2239 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _497)));
    float _2288 = (_2267 + ((_2247 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2241 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _497)));
    float _4175 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2301 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    uint _2302 = _456 + 6u;
    float _2310 = _415 / cbSceneParam._m0[86u].x;
    float _2311 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2325 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2310, _2311, (log2((isnan(cbSceneParam._m0[77u].w) ? _349 : (isnan(_349) ? cbSceneParam._m0[77u].w : min(_349, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2327 = _2325.x;
    float _2328 = _2325.y;
    float _2329 = _2325.z;
    float _2330 = _2325.w;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_349 > cbSceneParam._m0[78u].w)
    {
        float _2385 = isnan(_349) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _349 : min(cbSceneParam._m0[80u].w, _349));
        float _2386 = _2385 / _349;
        float _2397 = _2386 * _400;
        float _2398 = _401 * _2386;
        float _2399 = (-0.0) - _2398;
        float _2400 = _2386 * _402;
        float _2402 = (cbSceneParam._m0[77u].w * _2399) / _2385;
        float _2403 = _2402 + cbSceneParam._m0[79u].w;
        float _2404 = cbSceneParam._m0[79u].w - _2398;
        float _2410 = sqrt(((_2397 * _2397) + (_2398 * _2398)) + (_2400 * _2400));
        float _2413 = (1.0 - (cbSceneParam._m0[77u].w / _2385)) * _2410;
        float _2418 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2420 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2582;
        if (abs((_2399 - _2402) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2582 = ((((_2403 > 0.0) ? exp2(_2418 * _2403) : (2.0 - exp2(_2420 * _2403))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2413;
        }
        else
        {
            float _2542 = 1.0 / cbSceneParam._m0[80u].x;
            float _2543 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : max(_2403, _2404));
            float _2544 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : min(_2403, _2404));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            float _2554 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : min(_2544, 0.0));
            _2582 = ((abs(_2410 / _2399) * cbSceneParam._m0[80u].y) * ((((_2553 - _2554) * 2.0) - ((exp2(_2418 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)))) - exp2(_2418 * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0))))) * _2542)) - ((exp2(_2420 * _2553) - exp2(_2420 * _2554)) * _2542))) + (_2413 * cbSceneParam._m0[80u].z);
        }
        vec4 _2584 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2310, _2311, 1.0), 0.0);
        float _2593 = exp2((_2582 * (-1.44269502162933349609375)) * (1.0 - _2584.w));
        float _2594 = log2(_2593);
        float _2610 = log2(_2330);
        _2422 = (exp2(_2610 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].x)) * _2584.x) / cbSceneParam._m0[78u].x)) + _2327;
        _2424 = (exp2(_2610 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].y)) * _2584.y) / cbSceneParam._m0[78u].y)) + _2328;
        _2426 = (exp2(_2610 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].z)) * _2584.z) / cbSceneParam._m0[78u].z)) + _2329;
        _2428 = _2593 * _2330;
    }
    else
    {
        _2422 = _2327;
        _2424 = _2328;
        _2426 = _2329;
        _2428 = _2330;
    }
    float _2440 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2441 = _2440 == 3.0;
    float _2442 = log2(_2428);
    float _2446 = exp2(_2442 * cbSceneParam._m0[78u].x);
    float _2447 = exp2(_2442 * cbSceneParam._m0[78u].y);
    float _2448 = exp2(_2442 * cbSceneParam._m0[78u].z);
    float _2449 = _2446 * (isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0)));
    float _2450 = _2447 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)));
    float _2451 = _2448 * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2460 = (_2440 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2460 * (_2441 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2422)));
    SV_Target.y = _2460 * (_2441 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2424)));
    SV_Target.z = _2460 * (_2441 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2426)));
    SV_Target.w = cbInstanceData._m0[_2302].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2261) * _2301) * _2446) * _2460;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2264) * _2301) * _2447) * _2460;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2267) * _2301) * _2448) * _2460;
    SV_Target_1.w = cbInstanceData._m0[_2302].w;
}


