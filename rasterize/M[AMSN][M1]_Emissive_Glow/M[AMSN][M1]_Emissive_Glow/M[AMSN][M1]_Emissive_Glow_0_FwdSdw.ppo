#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _876;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _264 = cbMtdParam._m0[11u].x + _257.x;
    vec4 _276 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _276.z;
    float _284 = (_276.x * 2.0) + (-1.0);
    float _286 = (_276.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_284, _286), vec2(_284, _286));
    float _3539 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))));
    vec4 _312 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _319 = fma(_293, _215, fma(_286, _207 * TANGENT.x, (_193 * _186) * _284));
    float _322 = fma(_293, _216, fma(_286, _207 * TANGENT.y, (_193 * _187) * _284));
    float _325 = fma(_293, _217, fma(_286, _207 * TANGENT.z, (_193 * _188) * _284));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _330 = _329 * _319;
    float _331 = _329 * _322;
    float _332 = _329 * _325;
    float _3550 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _333 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3572 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3583 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3594 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _337 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _353 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _394 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _404 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _394);
    float _405 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _394);
    float _406 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _394);
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _404 * _410;
    float _412 = _405 * _410;
    float _413 = _406 * _410;
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _441 = fma(_332, cbSceneParam._m0[5u].z, fma(_331, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _330));
    float _444 = fma(_332, cbSceneParam._m0[6u].z, fma(_331, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _330));
    float _447 = fma(_332, cbSceneParam._m0[7u].z, fma(_331, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _330));
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _460 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3605 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _475 = 1.0 - _337;
    float _476 = _472 * _475;
    float _477 = _473 * _475;
    float _478 = _474 * _475;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _337;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _337;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _337;
    float _486 = _483 + 0.039999999105930328369140625;
    float _488 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    vec4 _498 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _501 = _498.x * TEXCOORD.z;
    float _502 = dot(vec3(_330, _331, _332), vec3(_411, _412, _413));
    float _505 = _502 * 2.0;
    float _509 = (_505 * _330) - _411;
    float _510 = (_505 * _331) - _412;
    float _511 = (_505 * _332) - _413;
    float _515 = abs(dot(vec3(_411, _412, _413), vec3(_330, _331, _332)));
    float _3638 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _517 = sqrt(_333);
    float _530 = exp2((_517 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_517 * 3.0));
    float _536 = (1.0 - _530) * ((_517 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _537 = _530 * _517;
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _875;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _600 = fma(_573, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565));
        float _604 = fma(_573, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565));
        float _608 = fma(_573, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565));
        float _633 = _565 + _330;
        float _634 = _569 + _331;
        float _635 = _573 + _332;
        float _645 = fma(_635, cbModelParam._m0[26u].z, fma(_634, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _633)) - _600;
        float _646 = fma(_635, cbModelParam._m0[27u].z, fma(_634, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _633)) - _604;
        float _647 = fma(_635, cbModelParam._m0[28u].z, fma(_634, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _633)) - _608;
        float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
        float _664 = ((_651 * _645) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_600 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_651 * _646) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_604 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_651 * _647) / cbModelParam._m0[34u].z) + ((((((_608 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        float _703 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_669.x + (-0.5));
        float _705 = _703 * (_669.y + (-0.5));
        float _706 = _703 * (_669.z + (-0.5));
        float _713 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_676.x + (-0.5));
        float _715 = _713 * (_676.y + (-0.5));
        float _716 = _713 * (_676.z + (-0.5));
        float _723 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_683.x + (-0.5));
        float _725 = _723 * (_683.y + (-0.5));
        float _726 = _723 * (_683.z + (-0.5));
        float _733 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_690.x + (-0.5));
        float _735 = _733 * (_690.y + (-0.5));
        float _736 = _733 * (_690.z + (-0.5));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = _704 * 0.5;
        float _741 = _714 * 0.5;
        float _742 = _724 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _757 = (dot(vec3(_330, _331, _332), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _767 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3686 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_769 + 1.0))) + _774) * _737;
        float _784 = _705 * 0.5;
        float _785 = _715 * 0.5;
        float _786 = _725 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_330, _331, _332), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3719 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_811 + 1.0))) + _816) * _738;
        float _826 = _706 * 0.5;
        float _827 = _716 * 0.5;
        float _828 = _726 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _842 = (dot(vec3(_330, _331, _332), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _851 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3752 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_853 + 1.0))) + _858) * _739;
        _875 = _706;
        _877 = _705;
        _878 = _704;
        _879 = _716;
        _880 = _715;
        _881 = _714;
        _882 = _726;
        _883 = _725;
        _884 = _724;
        _885 = _739;
        _886 = _738;
        _887 = _737;
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
    }
    else
    {
        _875 = _876;
        _877 = _876;
        _878 = _876;
        _879 = _876;
        _880 = _876;
        _881 = _876;
        _882 = _876;
        _883 = _876;
        _884 = _876;
        _885 = _876;
        _886 = _876;
        _887 = _876;
        _888 = 0.0;
        _889 = 0.0;
        _890 = 0.0;
    }
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _916 = fma(_573, cbModelParam._m0[30u].z, fma(_569, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _565));
        float _920 = fma(_573, cbModelParam._m0[31u].z, fma(_569, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _565));
        float _924 = fma(_573, cbModelParam._m0[32u].z, fma(_569, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _565));
        float _947 = _565 + _330;
        float _948 = _569 + _331;
        float _949 = _573 + _332;
        float _959 = fma(_949, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947)) - _916;
        float _960 = fma(_949, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947)) - _920;
        float _961 = fma(_949, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947)) - _924;
        float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
        float _978 = ((_965 * _959) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_916 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_965 * _960) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_920 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_965 * _961) / cbModelParam._m0[35u].z) + ((((((_924 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1015 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_982.x + (-0.5));
        float _1017 = _1015 * (_982.y + (-0.5));
        float _1018 = _1015 * (_982.z + (-0.5));
        float _1025 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_989.x + (-0.5));
        float _1027 = _1025 * (_989.y + (-0.5));
        float _1028 = _1025 * (_989.z + (-0.5));
        float _1035 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_996.x + (-0.5));
        float _1037 = _1035 * (_996.y + (-0.5));
        float _1038 = _1035 * (_996.z + (-0.5));
        float _1045 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1003.x + (-0.5));
        float _1047 = _1045 * (_1003.y + (-0.5));
        float _1048 = _1045 * (_1003.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_330, _331, _332), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3815 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1079 + 1.0))) + _1084) * _1049;
        float _1094 = _1017 * 0.5;
        float _1095 = _1027 * 0.5;
        float _1096 = _1037 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_330, _331, _332), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3848 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1121 + 1.0))) + _1126) * _1050;
        float _1136 = _1018 * 0.5;
        float _1137 = _1028 * 0.5;
        float _1138 = _1038 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_330, _331, _332), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3881 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1163 + 1.0))) + _1168) * _1051;
        _1185 = _1018;
        _1186 = _1017;
        _1187 = _1016;
        _1188 = _1028;
        _1189 = _1027;
        _1190 = _1026;
        _1191 = _1038;
        _1192 = _1037;
        _1193 = _1036;
        _1194 = _1051;
        _1195 = _1050;
        _1196 = _1049;
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _876;
        _1186 = _876;
        _1187 = _876;
        _1188 = _876;
        _1189 = _876;
        _1190 = _876;
        _1191 = _876;
        _1192 = _876;
        _1193 = _876;
        _1194 = _876;
        _1195 = _876;
        _1196 = _876;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _888)) + _888;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _889)) + _889;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _890)) + _890;
    float _1232 = fma(_1211, cbSceneParam._m0[89u].z, fma(_1210, cbSceneParam._m0[89u].y, _1209 * cbSceneParam._m0[89u].x));
    float _1235 = fma(_1211, cbSceneParam._m0[90u].z, fma(_1210, cbSceneParam._m0[90u].y, _1209 * cbSceneParam._m0[90u].x));
    float _1238 = fma(_1211, cbSceneParam._m0[91u].z, fma(_1210, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1209));
    float _1253 = _509 * 0.5;
    float _1254 = _510 * 0.5;
    float _1255 = _511 * 0.5;
    float _1256 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1259 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1262 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1296;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1269 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_875, _879, _882, _885));
        float _1273 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_877, _880, _883, _886));
        float _1277 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_878, _881, _884, _887));
        float _1284 = dot(vec4(cbModelParam._m0[39u]), vec4(_1253, _1254, _1255, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1307;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1298 = dot(vec4(cbModelParam._m0[40u]), vec4(_1253, _1254, _1255, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1311 = (_1307 * cbModelParam._m0[1u].x) + (_1296 * (1.0 - cbModelParam._m0[1u].x));
    float _1321 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _333);
    float _1322 = isnan(_1321) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1321 : min(cbModelParam._m0[25u].z, _1321));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1371 = fma(_573, cbModelParam._m0[13u].z, fma(_569, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565)) + cbModelParam._m0[13u].w;
        float _1375 = fma(_573, cbModelParam._m0[14u].z, fma(_569, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565)) + cbModelParam._m0[14u].w;
        float _1379 = fma(_573, cbModelParam._m0[15u].z, fma(_569, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565)) + cbModelParam._m0[15u].w;
        float _1382 = fma(_511, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509));
        float _1385 = fma(_511, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509));
        float _1388 = fma(_511, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509));
        float _1416;
        if (_1382 > 0.0)
        {
            _1416 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1416 = frontier_phi_16_14_ladder;
        }
        float _1591;
        if (_1385 > 0.0)
        {
            _1591 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1591 = frontier_phi_25_21_ladder;
        }
        float _1887;
        if (_1388 > 0.0)
        {
            _1887 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1887 = frontier_phi_37_32_ladder;
        }
        float _1889 = isnan(_1591) ? _1416 : (isnan(_1416) ? _1591 : min(_1416, _1591));
        float _1890 = isnan(_1887) ? _1889 : (isnan(_1889) ? _1887 : min(_1889, _1887));
        float _1894 = (_1890 * _1382) + _1371;
        float _1895 = (_1890 * _1385) + _1375;
        float _1896 = (_1890 * _1388) + _1379;
        float _1897 = _1890 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1897;
        float _1901 = _1897 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 > _1901) || ((_1895 < _1899) || ((_1894 < _1899) || (_1894 > _1901))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1896, cbModelParam._m0[9u].z, fma(_1895, cbModelParam._m0[9u].y, _1894 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1896, cbModelParam._m0[10u].z, fma(_1895, cbModelParam._m0[10u].y, _1894 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1896, cbModelParam._m0[11u].z, fma(_1895, cbModelParam._m0[11u].y, _1894 * cbModelParam._m0[11u].x))), _1322);
            frontier_phi_15_37_ladder = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2041.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2041.z * cbModelParam._m0[1u].y;
        }
        _1404 = frontier_phi_15_37_ladder_1;
        _1406 = frontier_phi_15_37_ladder;
        _1408 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_509, _510, _511), _1322);
        _1404 = _1392.x * cbModelParam._m0[1u].y;
        _1406 = _1392.y * cbModelParam._m0[1u].y;
        _1408 = _1392.z * cbModelParam._m0[1u].y;
    }
    float _1412 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _333);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1412 : min(cbModelParam._m0[25u].w, _1412));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1470 = fma(_573, cbModelParam._m0[21u].z, fma(_569, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565)) + cbModelParam._m0[21u].w;
        float _1474 = fma(_573, cbModelParam._m0[22u].z, fma(_569, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565)) + cbModelParam._m0[22u].w;
        float _1478 = fma(_573, cbModelParam._m0[23u].z, fma(_569, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565)) + cbModelParam._m0[23u].w;
        float _1481 = fma(_511, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509));
        float _1484 = fma(_511, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509));
        float _1487 = fma(_511, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509));
        float _1596;
        if (_1481 > 0.0)
        {
            _1596 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1596 = frontier_phi_27_23_ladder;
        }
        float _1914;
        if (_1484 > 0.0)
        {
            _1914 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1914 = frontier_phi_39_34_ladder;
        }
        float _2252;
        if (_1487 > 0.0)
        {
            _2252 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2252 = frontier_phi_49_46_ladder;
        }
        float _2254 = isnan(_1914) ? _1596 : (isnan(_1596) ? _1914 : min(_1596, _1914));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1481) + _1470;
        float _2260 = (_2255 * _1484) + _1474;
        float _2261 = (_2255 * _1487) + _1478;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1413);
            frontier_phi_24_49_ladder = _2383.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2383.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2383.x * cbModelParam._m0[1u].z;
        }
        _1506 = frontier_phi_24_49_ladder_2;
        _1508 = frontier_phi_24_49_ladder_1;
        _1510 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_509, _510, _511), _1413);
        _1506 = _1490.x * cbModelParam._m0[1u].z;
        _1508 = _1490.y * cbModelParam._m0[1u].z;
        _1510 = _1490.z * cbModelParam._m0[1u].z;
    }
    float _1523 = (((_536 * _486) + _537) * _501) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1525 = (((_536 * _488) + _537) * _501) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1527 = (((_536 * _489) + _537) * _501) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1530 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, _1523 * cbSceneParam._m0[91u].x));
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1574 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1582 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1583 = _1570 / _1582;
    float _1584 = _1574 / _1582;
    float _1585 = _1578 / _1582;
    float _1732;
    float _1733;
    float _1734;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1612 = ((uint(_1585 > cbSceneParam._m0[59u].y) + uint(_1585 > cbSceneParam._m0[59u].x)) + uint(_1585 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1613 = _1612 + 43u;
        uint _1621 = _1612 + 44u;
        uint _1629 = _1612 + 45u;
        uint _1637 = _1612 + 46u;
        float _1648 = fma(_1582, cbSceneParam._m0[_1613].w, fma(_1578, cbSceneParam._m0[_1613].z, fma(_1574, cbSceneParam._m0[_1613].y, _1570 * cbSceneParam._m0[_1613].x)));
        float _1652 = fma(_1582, cbSceneParam._m0[_1621].w, fma(_1578, cbSceneParam._m0[_1621].z, fma(_1574, cbSceneParam._m0[_1621].y, _1570 * cbSceneParam._m0[_1621].x)));
        float _1660 = fma(_1582, cbSceneParam._m0[_1637].w, fma(_1578, cbSceneParam._m0[_1637].z, fma(_1574, cbSceneParam._m0[_1637].y, _1570 * cbSceneParam._m0[_1637].x)));
        float _1665 = cbSceneParam._m0[33u].z * _1660;
        float _1667 = cbSceneParam._m0[33u].w * _1660;
        float _1670 = fma(_1582, cbSceneParam._m0[_1629].w, fma(_1578, cbSceneParam._m0[_1629].z, fma(_1574, cbSceneParam._m0[_1629].y, _1570 * cbSceneParam._m0[_1629].x))) / _1660;
        float _1718 = (cbSceneParam._m0[33u].x - sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585))) * cbSceneParam._m0[33u].y;
        float _4007 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1725 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 + _1648) / _1660, (_1667 + _1652) / _1660), _1670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1667 + _1648) / _1660, (_1652 - _1665) / _1660), _1670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 - _1665) / _1660, (_1652 - _1667) / _1660), _1670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 - _1667) / _1660, (_1665 + _1652) / _1660), _1670), 0.0)).x), vec4(0.25)));
        _1732 = 1.0 - (_1725 * cbSceneParam._m0[34u].x);
        _1733 = 1.0 - (_1725 * cbSceneParam._m0[34u].y);
        _1734 = 1.0 - (_1725 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1732 = 1.0;
        _1733 = 1.0;
        _1734 = 1.0;
    }
    float _1798;
    float _1800;
    float _1802;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1786 = fma(_1582, cbSceneParam._m0[63u].w, fma(_1578, cbSceneParam._m0[63u].z, fma(_1574, cbSceneParam._m0[63u].y, _1570 * cbSceneParam._m0[63u].x)));
        float _1787 = fma(_1582, cbSceneParam._m0[60u].w, fma(_1578, cbSceneParam._m0[60u].z, fma(_1574, cbSceneParam._m0[60u].y, _1570 * cbSceneParam._m0[60u].x))) / _1786;
        float _1788 = fma(_1582, cbSceneParam._m0[61u].w, fma(_1578, cbSceneParam._m0[61u].z, fma(_1574, cbSceneParam._m0[61u].y, _1570 * cbSceneParam._m0[61u].x))) / _1786;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1787 >= cbSceneParam._m0[64u].x) && (_1788 >= cbSceneParam._m0[64u].y)) && (_1787 <= cbSceneParam._m0[64u].z)) && (_1788 <= cbSceneParam._m0[64u].w))
        {
            float _1927 = fma(_1582, cbSceneParam._m0[62u].w, fma(_1578, cbSceneParam._m0[62u].z, fma(_1574, cbSceneParam._m0[62u].y, _1570 * cbSceneParam._m0[62u].x))) / _1786;
            float _1931 = isnan(cbSceneParam._m0[41u].w) ? _1927 : (isnan(_1927) ? cbSceneParam._m0[41u].w : max(_1927, cbSceneParam._m0[41u].w));
            float _1974 = (cbSceneParam._m0[33u].x - sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585))) * cbSceneParam._m0[33u].y;
            float _4023 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
            float _1981 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1787, cbSceneParam._m0[33u].w + _1788), _1931), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1787, _1788 - cbSceneParam._m0[33u].z), _1931), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1787 - cbSceneParam._m0[33u].z, _1788 - cbSceneParam._m0[33u].w), _1931), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1787 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1788), _1931), 0.0)).x), vec4(0.25)));
            float _1985 = 1.0 - (_1981 * cbSceneParam._m0[34u].x);
            float _1986 = 1.0 - (_1981 * cbSceneParam._m0[34u].y);
            float _1987 = 1.0 - (_1981 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1986) ? _1733 : (isnan(_1733) ? _1986 : min(_1733, _1986));
            frontier_phi_36_35_ladder_1 = isnan(_1987) ? _1734 : (isnan(_1734) ? _1987 : min(_1734, _1987));
            frontier_phi_36_35_ladder_2 = isnan(_1985) ? _1732 : (isnan(_1732) ? _1985 : min(_1732, _1985));
        }
        else
        {
            frontier_phi_36_35_ladder = _1733;
            frontier_phi_36_35_ladder_1 = _1734;
            frontier_phi_36_35_ladder_2 = _1732;
        }
        _1798 = frontier_phi_36_35_ladder_2;
        _1800 = frontier_phi_36_35_ladder;
        _1802 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1798 = _1732;
        _1800 = _1733;
        _1802 = _1734;
    }
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1817 = _501 + (-1.0);
    float _1822 = (cbLight._m0[_1810].x * _1817) + 1.0;
    float _1823 = (cbLight._m0[_1810].y * _1817) + 1.0;
    float _1824 = (cbLight._m0[_1810].z * _1817) + 1.0;
    float _1825 = (cbLight._m0[_1810].w * _1817) + 1.0;
    uint _1826 = _1809 + 5u;
    float _1832 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
    uint _1836 = _1809 + 4u;
    float _1846 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1850 = _1809 | 1u;
    float _1861 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_330, _331, _332));
    float _1864 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_330, _331, _332));
    float _4059 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _4070 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1869 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1871 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1878 = ((cbLight._m0[_1826].x * _1832) * _1871) + (((cbLight._m0[_1836].x * _1798) * _1846) * _1869);
    float _1879 = ((_1832 * cbLight._m0[_1826].y) * _1871) + (((cbLight._m0[_1836].y * _1800) * _1846) * _1869);
    float _1880 = ((_1832 * cbLight._m0[_1826].z) * _1871) + (((cbLight._m0[_1836].z * _1802) * _1846) * _1869);
    uvec4 _1884 = floatBitsToUint(cbLight._m0[_1809 + 12u]);
    bool _1886 = _1884.x == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1886)
    {
        _1988 = _1878;
        _1990 = _1879;
        _1992 = _1880;
    }
    else
    {
        uint _1996 = _1809 + 6u;
        float _2012 = (dot(vec3(cbLight._m0[_1809 + 2u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _4081 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2015 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1988 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1878;
        _1990 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1879;
        _1992 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1880;
    }
    bool _1995 = _1884.y == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_1995)
    {
        _2050 = _1988;
        _2052 = _1990;
        _2054 = _1992;
    }
    else
    {
        uint _2223 = _1809 + 7u;
        float _2239 = (dot(vec3(cbLight._m0[_1809 + 3u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4097 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2242 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2050 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _1988;
        _2052 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _1990;
        _2054 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _1992;
    }
    uint _2057 = _1809 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _333) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1809].x + _411;
    float _2073 = cbLight._m0[_1809].y + _412;
    float _2074 = cbLight._m0[_1809].z + _413;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1809].xyz));
    float _4113 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _2086 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2087 = dot(vec3(_330, _331, _332), vec3(_2079, _2080, _2081));
    float _4135 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_2079, _2080, _2081));
    float _4146 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2107 = exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0);
    float _2108 = 0.959999978542327880859375 - _483;
    float _2110 = 0.959999978542327880859375 - _484;
    float _2111 = 0.959999978542327880859375 - _485;
    float _2118 = 1.0 - _2071;
    float _2129 = (0.5 / (((_2086 * ((_2085 * _2118) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2118) + _2071) * _2085))) * _2085;
    float _4157 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2145 = _1809 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _333) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1850].x + _411;
    float _2159 = cbLight._m0[_1850].y + _412;
    float _2160 = cbLight._m0[_1850].z + _413;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1850].xyz));
    float _4168 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2172 = dot(vec3(_330, _331, _332), vec3(_2165, _2166, _2167));
    float _4179 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2165, _2166, _2167));
    float _4190 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
    float _2198 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2086 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2198) + _2157) * _2171))) * _2171;
    float _4201 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2220 = (((((_2191 * _2108) + _486) * cbLight._m0[_2145].x) * _2210) * _1832) + ((((cbLight._m0[_2057].x * _1798) * ((_2107 * _2108) + _486)) * _2131) * _1846);
    float _2221 = (((((_2191 * _2110) + _488) * cbLight._m0[_2145].y) * _2210) * _1832) + ((((cbLight._m0[_2057].y * _1800) * ((_2107 * _2110) + _488)) * _2131) * _1846);
    float _2222 = (((((_2191 * _2111) + _489) * cbLight._m0[_2145].z) * _2210) * _1832) + ((((cbLight._m0[_2057].z * _1802) * ((_2107 * _2111) + _489)) * _2131) * _1846);
    float _2278;
    float _2280;
    float _2282;
    if (_1886)
    {
        _2278 = _2220;
        _2280 = _2221;
        _2282 = _2222;
    }
    else
    {
        uint _2284 = _1809 + 2u;
        uint _2288 = _1809 + 10u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _333) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _411;
        float _2305 = cbLight._m0[_2284].y + _412;
        float _2306 = cbLight._m0[_2284].z + _413;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2284].xyz));
        float _4212 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2318 = dot(vec3(_330, _331, _332), vec3(_2311, _2312, _2313));
        float _4223 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4234 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0);
        float _2344 = 1.0 - _2303;
        float _2354 = (0.5 / (((_2086 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2344) + _2303) * _2317))) * _2317;
        float _4245 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2278 = (((((_2337 * _2108) + _486) * cbLight._m0[_2288].x) * _2356) * _2357) + _2220;
        _2280 = (((((_2337 * _2110) + _488) * cbLight._m0[_2288].y) * _2356) * _2357) + _2221;
        _2282 = (((((_2337 * _2111) + _489) * cbLight._m0[_2288].z) * _2356) * _2357) + _2222;
    }
    float _2388;
    float _2390;
    float _2392;
    if (_1995)
    {
        _2388 = _2278;
        _2390 = _2280;
        _2392 = _2282;
    }
    else
    {
        uint _2399 = _1809 + 3u;
        uint _2403 = _1809 + 11u;
        float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _333) * 0.949999988079071044921875);
        float _2418 = _2417 * _2417;
        float _2419 = cbLight._m0[_2399].x + _411;
        float _2420 = cbLight._m0[_2399].y + _412;
        float _2421 = cbLight._m0[_2399].z + _413;
        float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
        float _2426 = _2425 * _2419;
        float _2427 = _2425 * _2420;
        float _2428 = _2425 * _2421;
        float _2429 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2399].xyz));
        float _4261 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2433 = dot(vec3(_330, _331, _332), vec3(_2426, _2427, _2428));
        float _4272 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2437 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2426, _2427, _2428));
        float _4283 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2441 = _2418 * _2418;
        float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
        float _2452 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
        float _2459 = 1.0 - _2418;
        float _2469 = (0.5 / (((_2086 * ((_2432 * _2459) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2459) + _2418) * _2432))) * _2432;
        float _4294 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2388 = (((((_2452 * _2108) + _486) * cbLight._m0[_2403].x) * _2471) * _2472) + _2278;
        _2390 = (((((_2452 * _2110) + _488) * cbLight._m0[_2403].y) * _2471) * _2472) + _2280;
        _2392 = (((((_2452 * _2111) + _489) * cbLight._m0[_2403].z) * _2471) * _2472) + _2282;
    }
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_1807.y == 0u)
    {
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2494)));
        float _2515 = (log2(_1585 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
        }
        else
        {
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            uint _2798 = 0u;
            uint _2807;
            bool _2808;
            for (;;)
            {
                _2807 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                _2808 = _2807 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2808)
                {
                    frontier_phi_68_pred = _2797;
                    frontier_phi_68_pred_1 = _2796;
                    frontier_phi_68_pred_2 = _2795;
                    frontier_phi_68_pred_3 = _2793;
                    frontier_phi_68_pred_4 = _2792;
                    frontier_phi_68_pred_5 = _2794;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2807;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2798 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _1583;
                        float _2983 = _2942.y - _1584;
                        float _2984 = _2942.z - _1585;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_441, _444, _447), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4320 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _1583;
                        float _3018 = (-0.0) - _1584;
                        float _3019 = (-0.0) - _1585;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3033 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3034 = 1.0 - _517;
                        float _3041 = sqrt(1.0 - ((1.0 - (_3034 * _3034)) * (1.0 - (_3033 * _3033))));
                        float _3042 = _3041 * _3041;
                        float _3043 = _3042 * _3042;
                        float _3044 = _3024 + _2989;
                        float _3045 = _3025 + _2990;
                        float _3046 = _3026 + _2991;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3054 = dot(vec3(_441, _444, _447), vec3(_3024, _3025, _3026));
                        float _4336 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3058 = dot(vec3(_441, _444, _447), vec3(_3050 * _3044, _3050 * _3045, _3050 * _3046));
                        float _4347 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3061 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3065 = ((_3061 * _3061) * (_3043 + (-1.0))) + 1.0;
                        float _3066 = _3002 * _3042;
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _2992) + _3067;
                        float _4358 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3072 = 1.0 - _3042;
                        float _3082 = (0.5 / (((_3071 * ((_3057 * _3072) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_3071 * _3072) + _3042) * _3057))) * _3071;
                        float _4369 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3093 = (((_3043 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3065 * _3065) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2851 = (_3013 * _2961.x) + _2919;
                        _2852 = (_3013 * _2961.y) + _2920;
                        _2853 = (_3013 * _2961.z) + _2921;
                        _2848 = (_3093 * _2978.x) + _2916;
                        _2849 = (_3093 * _2978.y) + _2917;
                        _2850 = (_3093 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_68_pred = _2853;
                    frontier_phi_68_pred_1 = _2852;
                    frontier_phi_68_pred_2 = _2851;
                    frontier_phi_68_pred_3 = _2849;
                    frontier_phi_68_pred_4 = _2848;
                    frontier_phi_68_pred_5 = _2850;
                }
                _2650 = frontier_phi_68_pred;
                _2648 = frontier_phi_68_pred_1;
                _2646 = frontier_phi_68_pred_2;
                _2642 = frontier_phi_68_pred_3;
                _2640 = frontier_phi_68_pred_4;
                _2644 = frontier_phi_68_pred_5;
                uint _2799 = _2798 + 1u;
                if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2792 = _2640;
                    _2793 = _2642;
                    _2794 = _2644;
                    _2795 = _2646;
                    _2796 = _2648;
                    _2797 = _2650;
                    _2798 = _2799;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
        }
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.z;
        uint _2656 = (_2654 >> 8u) & 15u;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((4294967295u << _2656) & _2525) == 0u)
        {
            _2760 = _2639;
            _2762 = _2641;
            _2764 = _2643;
            _2766 = _2645;
            _2768 = _2647;
            _2770 = _2649;
        }
        else
        {
            float _2785 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
            float _2786 = _2785 * _1583;
            float _2787 = _2785 * _1584;
            float _2788 = _2785 * _1585;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2656 < ((_2654 >> 12u) & 15u))
            {
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2899 = _2639;
                float _2900 = _2641;
                float _2901 = _2643;
                float _2902 = _2645;
                float _2903 = _2647;
                float _2904 = _2649;
                uint _2905 = _2656;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2915)
                    {
                        frontier_phi_74_pred = _2901;
                        frontier_phi_74_pred_1 = _2900;
                        frontier_phi_74_pred_2 = _2899;
                        frontier_phi_74_pred_3 = _2904;
                        frontier_phi_74_pred_4 = _2903;
                        frontier_phi_74_pred_5 = _2902;
                    }
                    else
                    {
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3111 = _2899;
                        float _3112 = _2900;
                        float _3113 = _2901;
                        float _3114 = _2902;
                        float _3115 = _2903;
                        float _3116 = _2904;
                        uint _3117 = _2914;
                        uint _3118;
                        vec4 _3143;
                        float _3144;
                        vec4 _3159;
                        vec3 _3171;
                        vec4 _3187;
                        vec4 _3203;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3128 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3117));
                            _3118 = (_3117 + 4294967295u) & _3117;
                            uint _3130 = _3128 * 40u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3144 = _3143.w;
                            uint _3146 = (_3128 * 40u) + 4u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3161 = (_3128 * 40u) + 8u;
                            _3171 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x));
                            uint _3174 = (_3128 * 40u) + 16u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3128 * 40u) + 20u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3206 = (_3128 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3128 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_1585, _3238.z, fma(_1584, _3238.y, _3238.x * _1583)) + _3238.w;
                            _3251 = !((fma(_1585, _3219.z, fma(_1584, _3219.y, _3219.x * _1583)) + _3219.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3143.x - _1583;
                                float _3279 = _3143.y - _1584;
                                float _3280 = _3143.z - _1585;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3144 * _3144));
                                float _4380 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3296 = sqrt(_3281) * _3159.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_441, _444, _447))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_1585, _3187.z, fma(_1584, _3187.y, _3187.x * _1583)) + _3187.w) / _3250;
                                float _3310 = (fma(_1585, _3203.z, fma(_1584, _3203.y, _3203.x * _1583)) + _3203.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4396 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _517;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2786;
                                float _3340 = _3286 - _2787;
                                float _3341 = _3287 - _2788;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_441, _444, _447), vec3((-0.0) - _2786, (-0.0) - _2787, (-0.0) - _2788));
                                float _4407 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3353 = dot(vec3(_441, _444, _447), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4418 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_441, _444, _447), vec3(_3285, _3286, _3287))) + _3362;
                                float _4429 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4440 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3390 * _3171.z;
                                frontier_phi_80_pred_1 = _3390 * _3171.y;
                                frontier_phi_80_pred_2 = _3390 * _3171.x;
                                frontier_phi_80_pred_3 = _3316 * _3159.z;
                                frontier_phi_80_pred_4 = _3316 * _3159.y;
                                frontier_phi_80_pred_5 = _3316 * _3159.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3396 = frontier_phi_80_pred;
                            _3395 = frontier_phi_80_pred_1;
                            _3394 = frontier_phi_80_pred_2;
                            _3399 = frontier_phi_80_pred_3;
                            _3398 = frontier_phi_80_pred_4;
                            _3397 = frontier_phi_80_pred_5;
                            _3101 = _3397 + _3114;
                            _3102 = _3398 + _3115;
                            _3103 = _3399 + _3116;
                            _3098 = _3394 + _3111;
                            _3099 = _3395 + _3112;
                            _3100 = _3396 + _3113;
                            if (_3118 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3118;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3100;
                        frontier_phi_74_pred_1 = _3099;
                        frontier_phi_74_pred_2 = _3098;
                        frontier_phi_74_pred_3 = _3103;
                        frontier_phi_74_pred_4 = _3102;
                        frontier_phi_74_pred_5 = _3101;
                    }
                    _2765 = frontier_phi_74_pred;
                    _2763 = frontier_phi_74_pred_1;
                    _2761 = frontier_phi_74_pred_2;
                    _2771 = frontier_phi_74_pred_3;
                    _2769 = frontier_phi_74_pred_4;
                    _2767 = frontier_phi_74_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2761;
                        _2900 = _2763;
                        _2901 = _2765;
                        _2902 = _2767;
                        _2903 = _2769;
                        _2904 = _2771;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2769;
                frontier_phi_62_63_ladder_1 = _2767;
                frontier_phi_62_63_ladder_2 = _2765;
                frontier_phi_62_63_ladder_3 = _2771;
                frontier_phi_62_63_ladder_4 = _2763;
                frontier_phi_62_63_ladder_5 = _2761;
            }
            else
            {
                frontier_phi_62_63_ladder = _2647;
                frontier_phi_62_63_ladder_1 = _2645;
                frontier_phi_62_63_ladder_2 = _2643;
                frontier_phi_62_63_ladder_3 = _2649;
                frontier_phi_62_63_ladder_4 = _2641;
                frontier_phi_62_63_ladder_5 = _2639;
            }
            _2760 = frontier_phi_62_63_ladder_5;
            _2762 = frontier_phi_62_63_ladder_4;
            _2764 = frontier_phi_62_63_ladder_2;
            _2766 = frontier_phi_62_63_ladder_1;
            _2768 = frontier_phi_62_63_ladder;
            _2770 = frontier_phi_62_63_ladder_3;
        }
        float _2775 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
        _2537 = (_2775 * _2766) + _2050;
        _2539 = (_2775 * _2768) + _2052;
        _2541 = (_2775 * _2770) + _2054;
        _2543 = ((_2760 * _486) * _2775) + _2388;
        _2545 = ((_2762 * _488) * _2775) + _2390;
        _2547 = ((_2764 * _489) * _2775) + _2392;
    }
    else
    {
        _2537 = _2050;
        _2539 = _2052;
        _2541 = _2054;
        _2543 = _2388;
        _2545 = _2390;
        _2547 = _2392;
    }
    uint _2553 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _2561 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _312.x) * cbInstanceData._m0[_2553].x;
    float _2564 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _312.y) * cbInstanceData._m0[_2553].y;
    float _2567 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _312.z) * cbInstanceData._m0[_2553].z;
    float _4456 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4467 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4478 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _2584 = (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2537 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _501))) + ((_2543 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1311)) * cbPerFrame._m0[3u].x)) + _2561;
    float _2586 = (_2564 + ((_2545 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1311)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2539 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _501)));
    float _2588 = (_2567 + ((_2547 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1311)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2541 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _501)));
    float _4504 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2601 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    uint _2602 = _460 + 6u;
    float _2610 = _419 / cbSceneParam._m0[86u].x;
    float _2611 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2625 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, (log2((isnan(cbSceneParam._m0[77u].w) ? _353 : (isnan(_353) ? cbSceneParam._m0[77u].w : min(_353, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2627 = _2625.x;
    float _2628 = _2625.y;
    float _2629 = _2625.z;
    float _2630 = _2625.w;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_353 > cbSceneParam._m0[78u].w)
    {
        float _2664 = isnan(_353) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _353 : min(cbSceneParam._m0[80u].w, _353));
        float _2665 = _2664 / _353;
        float _2676 = _2665 * _404;
        float _2677 = _405 * _2665;
        float _2678 = (-0.0) - _2677;
        float _2679 = _2665 * _406;
        float _2681 = (cbSceneParam._m0[77u].w * _2678) / _2664;
        float _2682 = _2681 + cbSceneParam._m0[79u].w;
        float _2683 = cbSceneParam._m0[79u].w - _2677;
        float _2689 = sqrt(((_2676 * _2676) + (_2677 * _2677)) + (_2679 * _2679));
        float _2692 = (1.0 - (cbSceneParam._m0[77u].w / _2664)) * _2689;
        float _2697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2861;
        if (abs((_2678 - _2681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2861 = ((((_2682 > 0.0) ? exp2(_2697 * _2682) : (2.0 - exp2(_2699 * _2682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2692;
        }
        else
        {
            float _2821 = 1.0 / cbSceneParam._m0[80u].x;
            float _2822 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : max(_2682, _2683));
            float _2823 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : min(_2682, _2683));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            _2861 = ((abs(_2689 / _2678) * cbSceneParam._m0[80u].y) * ((((_2832 - _2833) * 2.0) - ((exp2(_2697 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)))) - exp2(_2697 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))))) * _2821)) - ((exp2(_2699 * _2832) - exp2(_2699 * _2833)) * _2821))) + (_2692 * cbSceneParam._m0[80u].z);
        }
        vec4 _2863 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, 1.0), 0.0);
        float _2872 = exp2((_2861 * (-1.44269502162933349609375)) * (1.0 - _2863.w));
        float _2873 = log2(_2872);
        float _2889 = log2(_2630);
        _2701 = (exp2(_2889 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].x)) * _2863.x) / cbSceneParam._m0[78u].x)) + _2627;
        _2703 = (exp2(_2889 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].y)) * _2863.y) / cbSceneParam._m0[78u].y)) + _2628;
        _2705 = (exp2(_2889 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].z)) * _2863.z) / cbSceneParam._m0[78u].z)) + _2629;
        _2707 = _2872 * _2630;
    }
    else
    {
        _2701 = _2627;
        _2703 = _2628;
        _2705 = _2629;
        _2707 = _2630;
    }
    float _2719 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2720 = _2719 == 3.0;
    float _2721 = log2(_2707);
    float _2725 = exp2(_2721 * cbSceneParam._m0[78u].x);
    float _2726 = exp2(_2721 * cbSceneParam._m0[78u].y);
    float _2727 = exp2(_2721 * cbSceneParam._m0[78u].z);
    float _2728 = _2725 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0)));
    float _2729 = _2726 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0)));
    float _2730 = _2727 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0)));
    float _2739 = (_2719 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2739 * (_2720 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.y = _2739 * (_2720 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.z = _2739 * (_2720 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.w = cbInstanceData._m0[_2602].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2561) * _2601) * _2725) * _2739;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2564) * _2601) * _2726) * _2739;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2567) * _2601) * _2727) * _2739;
    SV_Target_1.w = cbInstanceData._m0[_2602].w;
}


