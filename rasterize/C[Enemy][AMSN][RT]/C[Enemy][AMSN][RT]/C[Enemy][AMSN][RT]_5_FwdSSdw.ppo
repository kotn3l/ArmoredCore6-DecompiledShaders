#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1043;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    float _254 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _256 = log2(0.0);
    bool _259 = exp2(_256 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _260;
    float _262;
    float _264;
    if (_259)
    {
        _260 = cbMtdParam._m0[18u].x;
        _262 = cbMtdParam._m0[18u].y;
        _264 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _260 = cbMtdParam._m0[17u].x;
        _262 = cbMtdParam._m0[17u].y;
        _264 = cbMtdParam._m0[17u].z;
    }
    float _269;
    if (_259)
    {
        _269 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _269 = cbMtdParam._m0[19u].z;
    }
    float _275;
    float _277;
    if (_259)
    {
        _275 = cbMtdParam._m0[26u].x;
        _277 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _275 = cbMtdParam._m0[22u].x;
        _277 = cbMtdParam._m0[22u].y;
    }
    float _279 = _275 * TEXCOORD.x;
    float _280 = _277 * TEXCOORD.y;
    float _292 = floor(_269);
    vec4 _295 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _279) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _280) + cbTextureTilingScale._m0[6u].w, _292));
    vec4 _318 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _254) + cbTextureTilingScale._m0[0u].w));
    float _327 = (((_260 * cbMtdParam._m0[19u].w) * _295.x) * cbMtdParam._m0[9u].x) * _318.x;
    float _331 = (((_262 * cbMtdParam._m0[19u].w) * _295.y) * cbMtdParam._m0[9u].y) * _318.y;
    float _335 = (((_264 * cbMtdParam._m0[19u].w) * _295.z) * cbMtdParam._m0[9u].z) * _318.z;
    vec4 _347 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _254) + cbTextureTilingScale._m0[1u].w));
    float _351 = _347.z;
    vec4 _364 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _279) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _280) + cbTextureTilingScale._m0[8u].w, _292));
    float _181[2];
    float _182[2];
    _181[0u] = cbMtdParam._m0[25u].x;
    _182[0u] = cbMtdParam._m0[25u].y;
    _181[1u] = cbMtdParam._m0[25u].z;
    _182[1u] = cbMtdParam._m0[25u].w;
    float _378 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _381 = uint(int(isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0))));
    float _386 = _182[_381] + _364.x;
    vec4 _405 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _279) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _280) + cbTextureTilingScale._m0[7u].w, _292));
    float _412 = (_405.x * 2.0) + (-1.0);
    float _413 = (_405.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_412, _413), vec2(_412, _413));
    float _3433 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _419 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _428 = (cbMtdParam._m0[20u].x * (((_351 * 2.0) * (_405.z + _181[_381])) - _351)) + _351;
    float _432 = (cbMtdParam._m0[20u].y * ((_347.x * 2.0) + (-1.0))) + _412;
    float _433 = (cbMtdParam._m0[20u].y * ((_347.y * 2.0) + (-1.0))) + _413;
    float _436 = fma(_419, _232, fma(_433, _224 * TANGENT.x, (_210 * _202) * _432));
    float _439 = fma(_419, _233, fma(_433, _224 * TANGENT.y, (_210 * _203) * _432));
    float _442 = fma(_419, _234, fma(_433, _224 * TANGENT.z, (_210 * _204) * _432));
    float _446 = inversesqrt(dot(vec3(_436, _439, _442), vec3(_436, _439, _442)));
    float _447 = _446 * _436;
    float _448 = _446 * _439;
    float _449 = _446 * _442;
    float _3444 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _450 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3466 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3477 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3488 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _454 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _540 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _542 = _540.w;
    float _561 = fma(_449, cbSceneParam._m0[5u].z, fma(_448, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _447));
    float _564 = fma(_449, cbSceneParam._m0[6u].z, fma(_448, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _447));
    float _567 = fma(_449, cbSceneParam._m0[7u].z, fma(_448, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _447));
    vec4 _569 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _580 = (((_569.y - _450) + (_569.w * _450)) * cbMtdParam._m0[3u].x) + _450;
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = (_593 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3499 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    vec4 _608 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _613 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _624 = (((_613.x - _454) + (_613.w * _454)) * cbMtdParam._m0[3u].x) + _454;
    float _637 = (cbMtdParam._m0[3u].x * (((_605 * _542) - _605) + _608.x)) + _605;
    float _638 = (cbMtdParam._m0[3u].x * (((_606 * _542) - _606) + _608.y)) + _606;
    float _639 = (cbMtdParam._m0[3u].x * (((_607 * _542) - _607) + _608.z)) + _607;
    float _640 = 1.0 - _624;
    float _641 = _640 * _637;
    float _642 = _640 * _638;
    float _643 = _640 * _639;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _624;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _624;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _624;
    float _651 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    float _654 = _650 + 0.039999999105930328369140625;
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _666 = _663.x * TEXCOORD_4;
    float _667 = dot(vec3(_447, _448, _449), vec3(_529, _530, _531));
    float _670 = _667 * 2.0;
    float _674 = (_670 * _447) - _529;
    float _675 = (_670 * _448) - _530;
    float _676 = (_670 * _449) - _531;
    float _680 = abs(dot(vec3(_529, _530, _531), vec3(_447, _448, _449)));
    float _3532 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _682 = sqrt(_580);
    float _695 = exp2((_682 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_682 * 3.0));
    float _701 = (1.0 - _695) * ((_682 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _702 = _695 * _682;
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_738, cbModelParam._m0[26u].z, fma(_734, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730));
        float _771 = fma(_738, cbModelParam._m0[27u].z, fma(_734, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730));
        float _775 = fma(_738, cbModelParam._m0[28u].z, fma(_734, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730));
        float _800 = _730 + _447;
        float _801 = _734 + _448;
        float _802 = _738 + _449;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_447, _448, _449), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3580 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_447, _448, _449), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3613 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_447, _448, _449), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3646 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_738, cbModelParam._m0[30u].z, fma(_734, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _730));
        float _1087 = fma(_738, cbModelParam._m0[31u].z, fma(_734, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _730));
        float _1091 = fma(_738, cbModelParam._m0[32u].z, fma(_734, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _730));
        float _1114 = _730 + _447;
        float _1115 = _734 + _448;
        float _1116 = _738 + _449;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_447, _448, _449), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3709 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_447, _448, _449), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3742 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_447, _448, _449), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3775 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1043;
        _1353 = _1043;
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _674 * 0.5;
    float _1421 = _675 * 0.5;
    float _1422 = _676 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_738, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_738, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_738, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_676, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674));
        float _1552 = fma(_676, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674));
        float _1555 = fma(_676, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1583 = frontier_phi_22_20_ladder;
        }
        float _1808;
        if (_1552 > 0.0)
        {
            _1808 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1808 = frontier_phi_31_27_ladder;
        }
        float _2065;
        if (_1555 > 0.0)
        {
            _2065 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2065 = frontier_phi_43_38_ladder;
        }
        float _2067 = isnan(_1808) ? _1583 : (isnan(_1583) ? _1808 : min(_1583, _1808));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1549) + _1538;
        float _2073 = (_2068 * _1552) + _1542;
        float _2074 = (_2068 * _1555) + _1546;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_21_43_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_21_43_ladder_2;
        _1573 = frontier_phi_21_43_ladder_1;
        _1575 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_674, _675, _676), _1489);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1633 = fma(_738, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730)) + cbModelParam._m0[21u].w;
        float _1637 = fma(_738, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730)) + cbModelParam._m0[22u].w;
        float _1641 = fma(_738, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730)) + cbModelParam._m0[23u].w;
        float _1644 = fma(_676, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674));
        float _1647 = fma(_676, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674));
        float _1650 = fma(_676, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674));
        float _1813;
        if (_1644 > 0.0)
        {
            _1813 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1813 = frontier_phi_33_29_ladder;
        }
        float _2092;
        if (_1647 > 0.0)
        {
            _2092 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2092 = frontier_phi_45_40_ladder;
        }
        float _2305;
        if (_1650 > 0.0)
        {
            _2305 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2305 = frontier_phi_54_51_ladder;
        }
        float _2307 = isnan(_2092) ? _1813 : (isnan(_1813) ? _2092 : min(_1813, _2092));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1644) + _1633;
        float _2313 = (_2308 * _1647) + _1637;
        float _2314 = (_2308 * _1650) + _1641;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2315;
        float _2318 = _2315 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2314 > _2318) || ((_2314 < _2316) || ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 < _2316) || (_2312 > _2318))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2314, cbModelParam._m0[17u].z, fma(_2313, cbModelParam._m0[17u].y, _2312 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2314, cbModelParam._m0[18u].z, fma(_2313, cbModelParam._m0[18u].y, _2312 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2314, cbModelParam._m0[19u].z, fma(_2313, cbModelParam._m0[19u].y, _2312 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_30_54_ladder = _2530.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2530.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2530.x * cbModelParam._m0[1u].z;
        }
        _1669 = frontier_phi_30_54_ladder_2;
        _1671 = frontier_phi_30_54_ladder;
        _1673 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_674, _675, _676), _1580);
        _1669 = _1653.x * cbModelParam._m0[1u].z;
        _1671 = _1653.y * cbModelParam._m0[1u].z;
        _1673 = _1653.z * cbModelParam._m0[1u].z;
    }
    float _1686 = (((_701 * _651) + _702) * _666) * ((cbModelParam._m0[1u].w * (_1669 - _1571)) + _1571);
    float _1688 = (((_701 * _653) + _702) * _666) * ((cbModelParam._m0[1u].w * (_1671 - _1573)) + _1573);
    float _1690 = (((_701 * _654) + _702) * _666) * ((cbModelParam._m0[1u].w * (_1673 - _1575)) + _1575);
    float _1693 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1686 * cbSceneParam._m0[91u].x));
    vec4 _1707 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_537, _538));
    float _1709 = _1707.w;
    float _1721 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1709);
    float _1722 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1709);
    float _1723 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1709);
    uvec4 _1727 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1729 = _1727.x * 14u;
    uint _1730 = _1729 + 13u;
    float _1737 = _666 + (-1.0);
    float _1742 = (cbLight._m0[_1730].x * _1737) + 1.0;
    float _1743 = (cbLight._m0[_1730].y * _1737) + 1.0;
    float _1744 = (cbLight._m0[_1730].z * _1737) + 1.0;
    float _1745 = (cbLight._m0[_1730].w * _1737) + 1.0;
    uint _1746 = _1729 + 5u;
    float _1752 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1756 = _1729 + 4u;
    float _1766 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1770 = _1729 | 1u;
    float _1781 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_447, _448, _449));
    float _1784 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_447, _448, _449));
    float _3911 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _3922 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1789 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.3183098733425140380859375;
    float _1791 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.3183098733425140380859375;
    float _1798 = ((cbLight._m0[_1746].x * _1752) * _1791) + (((cbLight._m0[_1756].x * _1721) * _1766) * _1789);
    float _1799 = ((_1752 * cbLight._m0[_1746].y) * _1791) + (((cbLight._m0[_1756].y * _1722) * _1766) * _1789);
    float _1800 = ((_1752 * cbLight._m0[_1746].z) * _1791) + (((cbLight._m0[_1756].z * _1723) * _1766) * _1789);
    uvec4 _1805 = floatBitsToUint(cbLight._m0[_1729 + 12u]);
    bool _1807 = _1805.x == 0u;
    float _1818;
    float _1820;
    float _1822;
    if (_1807)
    {
        _1818 = _1798;
        _1820 = _1799;
        _1822 = _1800;
    }
    else
    {
        uint _1826 = _1729 + 6u;
        float _1842 = (dot(vec3(cbLight._m0[_1729 + 2u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _1843 = _1842 * _1842;
        float _3933 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1845 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _1818 = (((cbLight._m0[_1826].x * 0.3183098733425140380859375) * _1844) * _1845) + _1798;
        _1820 = (((cbLight._m0[_1826].y * 0.3183098733425140380859375) * _1844) * _1845) + _1799;
        _1822 = (((cbLight._m0[_1826].z * 0.3183098733425140380859375) * _1844) * _1845) + _1800;
    }
    bool _1825 = _1805.y == 0u;
    float _1863;
    float _1865;
    float _1867;
    if (_1825)
    {
        _1863 = _1818;
        _1865 = _1820;
        _1867 = _1822;
    }
    else
    {
        uint _2036 = _1729 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1729 + 3u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _3949 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2055 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1863 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1818;
        _1865 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1820;
        _1867 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1822;
    }
    uint _1870 = _1729 + 8u;
    float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * _580) * 0.949999988079071044921875);
    float _1884 = _1883 * _1883;
    float _1885 = cbLight._m0[_1729].x + _529;
    float _1886 = cbLight._m0[_1729].y + _530;
    float _1887 = cbLight._m0[_1729].z + _531;
    float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
    float _1892 = _1891 * _1885;
    float _1893 = _1891 * _1886;
    float _1894 = _1891 * _1887;
    float _1895 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1729].xyz));
    float _3965 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _1899 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1900 = dot(vec3(_447, _448, _449), vec3(_1892, _1893, _1894));
    float _3987 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1904 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1892, _1893, _1894));
    float _3998 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1908 = _1884 * _1884;
    float _1912 = ((_1903 * _1903) * (_1908 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0);
    float _1921 = 0.959999978542327880859375 - _648;
    float _1923 = 0.959999978542327880859375 - _649;
    float _1924 = 0.959999978542327880859375 - _650;
    float _1931 = 1.0 - _1884;
    float _1942 = (0.5 / (((_1899 * ((_1898 * _1931) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _1931) + _1884) * _1898))) * _1898;
    float _4009 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1908 / ((_1912 * _1912) * 3.141590118408203125));
    uint _1958 = _1729 + 9u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _580) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1770].x + _529;
    float _1972 = cbLight._m0[_1770].y + _530;
    float _1973 = cbLight._m0[_1770].z + _531;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1770].xyz));
    float _4020 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1985 = dot(vec3(_447, _448, _449), vec3(_1978, _1979, _1980));
    float _4031 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1978, _1979, _1980));
    float _4042 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1970 * _1970;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2004 = exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0);
    float _2011 = 1.0 - _1970;
    float _2021 = (0.5 / (((_1899 * ((_1984 * _2011) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2011) + _1970) * _1984))) * _1984;
    float _4053 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    float _2033 = (((((_2004 * _1921) + _651) * cbLight._m0[_1958].x) * _2023) * _1752) + ((((cbLight._m0[_1870].x * _1721) * ((_1920 * _1921) + _651)) * _1944) * _1766);
    float _2034 = (((((_2004 * _1923) + _653) * cbLight._m0[_1958].y) * _2023) * _1752) + ((((cbLight._m0[_1870].y * _1722) * ((_1920 * _1923) + _653)) * _1944) * _1766);
    float _2035 = (((((_2004 * _1924) + _654) * cbLight._m0[_1958].z) * _2023) * _1752) + ((((cbLight._m0[_1870].z * _1723) * ((_1920 * _1924) + _654)) * _1944) * _1766);
    float _2097;
    float _2099;
    float _2101;
    if (_1807)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1729 + 2u;
        uint _2107 = _1729 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _580) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _529;
        float _2124 = cbLight._m0[_2103].y + _530;
        float _2125 = cbLight._m0[_2103].z + _531;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2103].xyz));
        float _4064 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2137 = dot(vec3(_447, _448, _449), vec3(_2130, _2131, _2132));
        float _4075 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4086 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0);
        float _2163 = 1.0 - _2122;
        float _2173 = (0.5 / (((_1899 * ((_2136 * _2163) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2163) + _2122) * _2136))) * _2136;
        float _4097 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2175 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2176 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _2097 = (((((_2156 * _1921) + _651) * cbLight._m0[_2107].x) * _2175) * _2176) + _2033;
        _2099 = (((((_2156 * _1923) + _653) * cbLight._m0[_2107].y) * _2175) * _2176) + _2034;
        _2101 = (((((_2156 * _1924) + _654) * cbLight._m0[_2107].z) * _2175) * _2176) + _2035;
    }
    float _2211;
    float _2213;
    float _2215;
    if (_1825)
    {
        _2211 = _2097;
        _2213 = _2099;
        _2215 = _2101;
    }
    else
    {
        uint _2222 = _1729 + 3u;
        uint _2226 = _1729 + 11u;
        float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _580) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2222].x + _529;
        float _2243 = cbLight._m0[_2222].y + _530;
        float _2244 = cbLight._m0[_2222].z + _531;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2222].xyz));
        float _4113 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2256 = dot(vec3(_447, _448, _449), vec3(_2249, _2250, _2251));
        float _4124 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2249, _2250, _2251));
        float _4135 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0);
        float _2282 = 1.0 - _2241;
        float _2292 = (0.5 / (((_1899 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _2282) + _2241) * _2255))) * _2255;
        float _4146 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2211 = (((((_2275 * _1921) + _651) * cbLight._m0[_2226].x) * _2294) * _2295) + _2097;
        _2213 = (((((_2275 * _1923) + _653) * cbLight._m0[_2226].y) * _2294) * _2295) + _2099;
        _2215 = (((((_2275 * _1924) + _654) * cbLight._m0[_2226].z) * _2294) * _2295) + _2101;
    }
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    if (_1727.y == 0u)
    {
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2370;
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2370;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2370;
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.x;
        uint _2397 = uint((float(_2385.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _2386))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _2386)));
        float _2407 = (log2(_2373 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2408 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        uint _2411 = uint(isnan(14.0) ? _2408 : (isnan(_2408) ? 14.0 : min(_2408, 14.0)));
        uvec4 _2416 = texelFetch(g_lightClusterGridBuffer, int(((_2411 << 2u) + (_2397 << 6u)) >> 2u));
        uint _2417 = _2416.x;
        uint _2418 = _2385.z;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        if (((((1u << ((_2418 >> 4u) & 15u)) + 4294967295u) & _2417) == 0u) || ((_2418 & 240u) == 0u))
        {
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
        }
        else
        {
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            uint _2685 = 0u;
            uint _2694;
            bool _2695;
            for (;;)
            {
                _2694 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2685 << 2u)) >> 2u)).x;
                _2695 = _2694 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2695)
                {
                    frontier_phi_69_pred = _2684;
                    frontier_phi_69_pred_1 = _2683;
                    frontier_phi_69_pred_2 = _2682;
                    frontier_phi_69_pred_3 = _2680;
                    frontier_phi_69_pred_4 = _2679;
                    frontier_phi_69_pred_5 = _2681;
                }
                else
                {
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    uint _2809;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2694;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    for (;;)
                    {
                        uint _2813 = uint(findLSB(_2809)) + (_2685 << 5u);
                        uint _2810 = (_2809 + 4294967295u) & _2809;
                        uint _2815 = _2813 * 48u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 3u)).x));
                        uint _2835 = (_2813 * 48u) + 4u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2854 = (_2813 * 48u) + 8u;
                        vec3 _2865 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x));
                        float _2869 = _2829.x - _2371;
                        float _2870 = _2829.y - _2372;
                        float _2871 = _2829.z - _2373;
                        float _2872 = dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871));
                        float _2875 = inversesqrt(_2872);
                        float _2876 = _2875 * _2869;
                        float _2877 = _2875 * _2870;
                        float _2878 = _2875 * _2871;
                        float _2879 = dot(vec3(_561, _564, _567), vec3(_2876, _2877, _2878));
                        float _2884 = 1.0 - (_2872 * _2829.w);
                        float _4172 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2886 = sqrt(_2872) * _2848.w;
                        float _2889 = 1.39999997615814208984375 / (_2886 + 1.39999997615814208984375);
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2879) + _2890;
                        float _2896 = _2886 * _2886;
                        float _2900 = ((isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))) * _2885) / ((_2896 * 0.699999988079071044921875) + 1.0);
                        float _2904 = (-0.0) - _2371;
                        float _2905 = (-0.0) - _2372;
                        float _2906 = (-0.0) - _2373;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2921 = exp2(log2(1.0 / ((_2896 * 3.5) + 5.0)) * 0.25);
                        float _2922 = 1.0 - _682;
                        float _2929 = sqrt(1.0 - ((1.0 - (_2922 * _2922)) * (1.0 - (_2921 * _2921))));
                        float _2930 = _2929 * _2929;
                        float _2931 = _2930 * _2930;
                        float _2932 = _2911 + _2876;
                        float _2933 = _2912 + _2877;
                        float _2934 = _2913 + _2878;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2942 = dot(vec3(_561, _564, _567), vec3(_2911, _2912, _2913));
                        float _4188 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2946 = dot(vec3(_561, _564, _567), vec3(_2938 * _2932, _2938 * _2933, _2938 * _2934));
                        float _4199 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2953 = ((_2949 * _2949) * (_2931 + (-1.0))) + 1.0;
                        float _2954 = _2889 * _2930;
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2879) + _2955;
                        float _4210 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2960 = 1.0 - _2930;
                        float _2970 = (0.5 / (((_2959 * ((_2945 * _2960) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2959 * _2960) + _2930) * _2945))) * _2959;
                        float _4221 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2981 = (((_2931 * 3.1415927410125732421875) * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) / ((_2953 * _2953) * ((_2896 * 2.1991131305694580078125) + 3.141590118408203125))) * _2885;
                        _2738 = (_2900 * _2848.x) + _2806;
                        _2739 = (_2900 * _2848.y) + _2807;
                        _2740 = (_2900 * _2848.z) + _2808;
                        _2735 = (_2981 * _2865.x) + _2803;
                        _2736 = (_2981 * _2865.y) + _2804;
                        _2737 = (_2981 * _2865.z) + _2805;
                        if (_2810 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2810;
                        }
                    }
                    frontier_phi_69_pred = _2740;
                    frontier_phi_69_pred_1 = _2739;
                    frontier_phi_69_pred_2 = _2738;
                    frontier_phi_69_pred_3 = _2736;
                    frontier_phi_69_pred_4 = _2735;
                    frontier_phi_69_pred_5 = _2737;
                }
                _2546 = frontier_phi_69_pred;
                _2544 = frontier_phi_69_pred_1;
                _2542 = frontier_phi_69_pred_2;
                _2538 = frontier_phi_69_pred_3;
                _2536 = frontier_phi_69_pred_4;
                _2540 = frontier_phi_69_pred_5;
                uint _2686 = _2685 + 1u;
                if (_2686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2679 = _2536;
                    _2680 = _2538;
                    _2681 = _2540;
                    _2682 = _2542;
                    _2683 = _2544;
                    _2684 = _2546;
                    _2685 = _2686;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
        }
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.z;
        uint _2552 = (_2550 >> 8u) & 15u;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((4294967295u << _2552) & _2417) == 0u)
        {
            _2647 = _2535;
            _2649 = _2537;
            _2651 = _2539;
            _2653 = _2541;
            _2655 = _2543;
            _2657 = _2545;
        }
        else
        {
            float _2672 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
            float _2673 = _2672 * _2371;
            float _2674 = _2672 * _2372;
            float _2675 = _2672 * _2373;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2552 < ((_2550 >> 12u) & 15u))
            {
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2786 = _2535;
                float _2787 = _2537;
                float _2788 = _2539;
                float _2789 = _2541;
                float _2790 = _2543;
                float _2791 = _2545;
                uint _2792 = _2552;
                uint _2801;
                bool _2802;
                for (;;)
                {
                    _2801 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                    _2802 = _2801 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2802)
                    {
                        frontier_phi_75_pred = _2788;
                        frontier_phi_75_pred_1 = _2787;
                        frontier_phi_75_pred_2 = _2786;
                        frontier_phi_75_pred_3 = _2791;
                        frontier_phi_75_pred_4 = _2790;
                        frontier_phi_75_pred_5 = _2789;
                    }
                    else
                    {
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        uint _3005 = _2801;
                        uint _3006;
                        vec4 _3031;
                        float _3032;
                        vec4 _3047;
                        vec3 _3059;
                        vec4 _3075;
                        vec4 _3090;
                        float _3137;
                        bool _3138;
                        for (;;)
                        {
                            uint _3016 = ((_2792 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3005));
                            _3006 = (_3005 + 4294967295u) & _3005;
                            uint _3018 = _3016 * 40u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            _3032 = _3031.w;
                            uint _3034 = (_3016 * 40u) + 4u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_3016 * 40u) + 8u;
                            _3059 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x));
                            uint _3062 = (_3016 * 40u) + 16u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3016 * 40u) + 20u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3093 = (_3016 * 40u) + 24u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3112 = (_3016 * 40u) + 28u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3137 = fma(_2373, _3125.z, fma(_2372, _3125.y, _3125.x * _2371)) + _3125.w;
                            _3138 = !((fma(_2373, _3106.z, fma(_2372, _3106.y, _3106.x * _2371)) + _3106.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3138)
                            {
                                float _3165 = _3031.x - _2371;
                                float _3166 = _3031.y - _2372;
                                float _3167 = _3031.z - _2373;
                                float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                                float _3171 = inversesqrt(_3168);
                                float _3172 = _3171 * _3165;
                                float _3173 = _3171 * _3166;
                                float _3174 = _3171 * _3167;
                                float _3178 = 1.0 - (_3168 / (_3032 * _3032));
                                float _4232 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3183 = sqrt(_3168) * _3047.w;
                                float _3185 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                                float _3186 = _3185 * _3185;
                                float _3189 = ((1.0 - _3186) * dot(vec3(_3172, _3173, _3174), vec3(_561, _564, _567))) + _3186;
                                float _3192 = _3183 * _3183;
                                float _3196 = (fma(_2373, _3075.z, fma(_2372, _3075.y, _3075.x * _2371)) + _3075.w) / _3137;
                                float _3197 = (fma(_2373, _3090.z, fma(_2372, _3090.y, _3090.x * _2371)) + _3090.w) / _3137;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4248 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3179) / ((_3192 * 0.699999988079071044921875) + 1.0));
                                float _3215 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3216 = 1.0 - _682;
                                float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                                float _3224 = _3223 * _3223;
                                float _3225 = _3224 * _3224;
                                float _3226 = _3172 - _2673;
                                float _3227 = _3173 - _2674;
                                float _3228 = _3174 - _2675;
                                float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                                float _3236 = dot(vec3(_561, _564, _567), vec3((-0.0) - _2673, (-0.0) - _2674, (-0.0) - _2675));
                                float _4259 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3240 = dot(vec3(_561, _564, _567), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                                float _4270 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                                float _3248 = _3185 * _3224;
                                float _3249 = _3248 * _3248;
                                float _3255 = ((1.0 - _3249) * dot(vec3(_561, _564, _567), vec3(_3172, _3173, _3174))) + _3249;
                                float _4281 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3257 = 1.0 - _3224;
                                float _3267 = (0.5 / (((_3256 * ((_3239 * _3257) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3224) * _3239))) * _3256;
                                float _4292 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3277 = (_3202 * _3179) * (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) / ((_3247 * _3247) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3277 * _3059.z;
                                frontier_phi_81_pred_1 = _3277 * _3059.y;
                                frontier_phi_81_pred_2 = _3277 * _3059.x;
                                frontier_phi_81_pred_3 = _3203 * _3047.z;
                                frontier_phi_81_pred_4 = _3203 * _3047.y;
                                frontier_phi_81_pred_5 = _3203 * _3047.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3283 = frontier_phi_81_pred;
                            _3282 = frontier_phi_81_pred_1;
                            _3281 = frontier_phi_81_pred_2;
                            _3286 = frontier_phi_81_pred_3;
                            _3285 = frontier_phi_81_pred_4;
                            _3284 = frontier_phi_81_pred_5;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            _2991 = _3286 + _3004;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            if (_3006 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _3006;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2988;
                        frontier_phi_75_pred_1 = _2987;
                        frontier_phi_75_pred_2 = _2986;
                        frontier_phi_75_pred_3 = _2991;
                        frontier_phi_75_pred_4 = _2990;
                        frontier_phi_75_pred_5 = _2989;
                    }
                    _2652 = frontier_phi_75_pred;
                    _2650 = frontier_phi_75_pred_1;
                    _2648 = frontier_phi_75_pred_2;
                    _2658 = frontier_phi_75_pred_3;
                    _2656 = frontier_phi_75_pred_4;
                    _2654 = frontier_phi_75_pred_5;
                    uint _2793 = _2792 + 1u;
                    if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2786 = _2648;
                        _2787 = _2650;
                        _2788 = _2652;
                        _2789 = _2654;
                        _2790 = _2656;
                        _2791 = _2658;
                        _2792 = _2793;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2656;
                frontier_phi_63_64_ladder_1 = _2654;
                frontier_phi_63_64_ladder_2 = _2652;
                frontier_phi_63_64_ladder_3 = _2658;
                frontier_phi_63_64_ladder_4 = _2650;
                frontier_phi_63_64_ladder_5 = _2648;
            }
            else
            {
                frontier_phi_63_64_ladder = _2543;
                frontier_phi_63_64_ladder_1 = _2541;
                frontier_phi_63_64_ladder_2 = _2539;
                frontier_phi_63_64_ladder_3 = _2545;
                frontier_phi_63_64_ladder_4 = _2537;
                frontier_phi_63_64_ladder_5 = _2535;
            }
            _2647 = frontier_phi_63_64_ladder_5;
            _2649 = frontier_phi_63_64_ladder_4;
            _2651 = frontier_phi_63_64_ladder_2;
            _2653 = frontier_phi_63_64_ladder_1;
            _2655 = frontier_phi_63_64_ladder;
            _2657 = frontier_phi_63_64_ladder_3;
        }
        float _2662 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
        _2429 = (_2662 * _2653) + _1863;
        _2431 = (_2662 * _2655) + _1865;
        _2433 = (_2662 * _2657) + _1867;
        _2435 = ((_2647 * _651) * _2662) + _2211;
        _2437 = ((_2649 * _653) * _2662) + _2213;
        _2439 = ((_2651 * _654) * _2662) + _2215;
    }
    else
    {
        _2429 = _1863;
        _2431 = _1865;
        _2433 = _1867;
        _2435 = _2211;
        _2437 = _2213;
        _2439 = _2215;
    }
    vec4 _2445 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4308 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4319 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4330 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2469 = (((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2429 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _666))) + ((_2435 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + (_2445.x * cbMtdParam._m0[3u].x);
    float _2471 = ((_2445.y * cbMtdParam._m0[3u].x) + ((_2437 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2431 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _666)));
    float _2473 = ((_2445.z * cbMtdParam._m0[3u].x) + ((_2439 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2433 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _666)));
    uint _2477 = _593 + 6u;
    float _2485 = _537 / cbSceneParam._m0[86u].x;
    float _2486 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2500 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2502 = _2500.x;
    float _2503 = _2500.y;
    float _2504 = _2500.z;
    float _2505 = _2500.w;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2560 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2561 = _2560 / _470;
        float _2572 = _2561 * _522;
        float _2573 = _523 * _2561;
        float _2574 = (-0.0) - _2573;
        float _2575 = _2561 * _524;
        float _2577 = (cbSceneParam._m0[77u].w * _2574) / _2560;
        float _2578 = _2577 + cbSceneParam._m0[79u].w;
        float _2579 = cbSceneParam._m0[79u].w - _2573;
        float _2585 = sqrt(((_2572 * _2572) + (_2573 * _2573)) + (_2575 * _2575));
        float _2588 = (1.0 - (cbSceneParam._m0[77u].w / _2560)) * _2585;
        float _2593 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2595 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2748;
        if (abs((_2574 - _2577) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2748 = ((((_2578 > 0.0) ? exp2(_2593 * _2578) : (2.0 - exp2(_2595 * _2578))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2588;
        }
        else
        {
            float _2708 = 1.0 / cbSceneParam._m0[80u].x;
            float _2709 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : max(_2578, _2579));
            float _2710 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : min(_2578, _2579));
            float _2719 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : min(_2709, 0.0));
            float _2720 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : min(_2710, 0.0));
            _2748 = ((abs(_2585 / _2574) * cbSceneParam._m0[80u].y) * ((((_2719 - _2720) * 2.0) - ((exp2(_2593 * (isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0)))) - exp2(_2593 * (isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0))))) * _2708)) - ((exp2(_2595 * _2719) - exp2(_2595 * _2720)) * _2708))) + (_2588 * cbSceneParam._m0[80u].z);
        }
        vec4 _2750 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, 1.0), 0.0);
        float _2759 = exp2((_2748 * (-1.44269502162933349609375)) * (1.0 - _2750.w));
        float _2760 = log2(_2759);
        float _2776 = log2(_2505);
        _2597 = (exp2(_2776 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].x)) * _2750.x) / cbSceneParam._m0[78u].x)) + _2502;
        _2599 = (exp2(_2776 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].y)) * _2750.y) / cbSceneParam._m0[78u].y)) + _2503;
        _2601 = (exp2(_2776 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].z)) * _2750.z) / cbSceneParam._m0[78u].z)) + _2504;
        _2603 = _2759 * _2505;
    }
    else
    {
        _2597 = _2502;
        _2599 = _2503;
        _2601 = _2504;
        _2603 = _2505;
    }
    float _2615 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2616 = _2615 == 3.0;
    float _2617 = log2(_2603);
    float _2624 = exp2(_2617 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0)));
    float _2625 = exp2(_2617 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0)));
    float _2626 = exp2(_2617 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)));
    float _2635 = (_2615 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2635 * (_2616 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2597)));
    SV_Target.y = _2635 * (_2616 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.z = _2635 * (_2616 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.w = cbInstanceData._m0[_2477].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2477].w;
}


