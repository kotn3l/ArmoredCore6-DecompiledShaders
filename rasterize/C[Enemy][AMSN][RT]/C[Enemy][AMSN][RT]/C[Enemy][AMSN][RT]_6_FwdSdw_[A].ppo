#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1104;
float _3797;
float _3798;
float _3799;
float _3800;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _270 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _281 = exp2(log2(_270.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _282;
    float _284;
    float _286;
    if (_281)
    {
        _282 = cbMtdParam._m0[18u].x;
        _284 = cbMtdParam._m0[18u].y;
        _286 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _282 = cbMtdParam._m0[17u].x;
        _284 = cbMtdParam._m0[17u].y;
        _286 = cbMtdParam._m0[17u].z;
    }
    float _291;
    if (_281)
    {
        _291 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _291 = cbMtdParam._m0[19u].z;
    }
    float _297;
    float _299;
    if (_281)
    {
        _297 = cbMtdParam._m0[26u].x;
        _299 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _297 = cbMtdParam._m0[22u].x;
        _299 = cbMtdParam._m0[22u].y;
    }
    float _301 = _297 * TEXCOORD.x;
    float _302 = _299 * TEXCOORD.y;
    float _314 = floor(_291);
    vec4 _317 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _301) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _302) + cbTextureTilingScale._m0[6u].w, _314));
    vec4 _339 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _347 = (((_282 * cbMtdParam._m0[19u].w) * _317.x) * cbMtdParam._m0[9u].x) * _339.x;
    float _351 = (((_284 * cbMtdParam._m0[19u].w) * _317.y) * cbMtdParam._m0[9u].y) * _339.y;
    float _355 = (((_286 * cbMtdParam._m0[19u].w) * _317.z) * cbMtdParam._m0[9u].z) * _339.z;
    vec4 _367 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _371 = _367.z;
    vec4 _384 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _301) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _302) + cbTextureTilingScale._m0[8u].w, _314));
    float _189[2];
    float _190[2];
    _189[0u] = cbMtdParam._m0[25u].x;
    _190[0u] = cbMtdParam._m0[25u].y;
    _189[1u] = cbMtdParam._m0[25u].z;
    _190[1u] = cbMtdParam._m0[25u].w;
    float _398 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _401 = uint(int(isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0))));
    float _406 = _190[_401] + _384.x;
    vec4 _425 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _301) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _302) + cbTextureTilingScale._m0[7u].w, _314));
    float _432 = (_425.x * 2.0) + (-1.0);
    float _433 = (_425.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3819 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    float _448 = (cbMtdParam._m0[20u].x * (((_371 * 2.0) * (_425.z + _189[_401])) - _371)) + _371;
    float _452 = (cbMtdParam._m0[20u].y * ((_367.x * 2.0) + (-1.0))) + _432;
    float _453 = (cbMtdParam._m0[20u].y * ((_367.y * 2.0) + (-1.0))) + _433;
    float _456 = fma(_439, _240, fma(_453, _232 * TANGENT.x, (_218 * _210) * _452));
    float _459 = fma(_439, _241, fma(_453, _232 * TANGENT.y, (_218 * _211) * _452));
    float _462 = fma(_439, _242, fma(_453, _232 * TANGENT.z, (_218 * _212) * _452));
    float _466 = inversesqrt(dot(vec3(_456, _459, _462), vec3(_456, _459, _462)));
    float _467 = _466 * _456;
    float _468 = _466 * _459;
    float _469 = _466 * _462;
    float _3830 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _470 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3852 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3863 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3874 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _474 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _490 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _542 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _532);
    float _543 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _532);
    float _544 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _532);
    float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
    float _549 = _542 * _548;
    float _550 = _543 * _548;
    float _551 = _544 * _548;
    vec4 _556 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _558 = _556.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _784 = sqrt(((_542 * _542) + (_543 * _543)) + (_544 * _544));
        float _790 = (cbMatDynParam._m0[5u].x * _784) + cbMatDynParam._m0[5u].y;
        float _3885 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _795 = (cbMatDynParam._m0[5u].z * _784) + cbMatDynParam._m0[5u].w;
        float _3896 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) - _791)) + _791) < ((_558 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _572 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _573 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _575 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _577 = _575.w;
    float _596 = fma(_469, cbSceneParam._m0[5u].z, fma(_468, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _467));
    float _599 = fma(_469, cbSceneParam._m0[6u].z, fma(_468, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _467));
    float _602 = fma(_469, cbSceneParam._m0[7u].z, fma(_468, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _467));
    vec4 _604 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _615 = (((_604.y - _470) + (_604.w * _470)) * cbMtdParam._m0[3u].x) + _470;
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _630 = _628 + 9u;
    uint _631 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3907 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    vec4 _643 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _648 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _659 = (((_648.x - _474) + (_648.w * _474)) * cbMtdParam._m0[3u].x) + _474;
    float _672 = (cbMtdParam._m0[3u].x * (((_640 * _577) - _640) + _643.x)) + _640;
    float _673 = (cbMtdParam._m0[3u].x * (((_641 * _577) - _641) + _643.y)) + _641;
    float _674 = (cbMtdParam._m0[3u].x * (((_642 * _577) - _642) + _643.z)) + _642;
    float _675 = 1.0 - _659;
    float _676 = _675 * _672;
    float _677 = _675 * _673;
    float _678 = _675 * _674;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _659;
    float _684 = (_673 + (-0.039999999105930328369140625)) * _659;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _659;
    float _686 = _683 + 0.039999999105930328369140625;
    float _688 = _684 + 0.039999999105930328369140625;
    float _689 = _685 + 0.039999999105930328369140625;
    vec4 _698 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _572, cbSceneParam._m0[86u].y * _573));
    float _701 = _698.x * TEXCOORD_4;
    float _702 = dot(vec3(_467, _468, _469), vec3(_549, _550, _551));
    float _705 = _702 * 2.0;
    float _709 = (_705 * _467) - _549;
    float _710 = (_705 * _468) - _550;
    float _711 = (_705 * _469) - _551;
    float _715 = abs(dot(vec3(_549, _550, _551), vec3(_467, _468, _469)));
    float _3940 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _717 = sqrt(_615);
    float _730 = exp2((_717 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_717 * 3.0));
    float _736 = (1.0 - _730) * ((_717 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _737 = _730 * _717;
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1103;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _828 = fma(_773, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765));
        float _832 = fma(_773, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765));
        float _836 = fma(_773, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765));
        float _861 = _765 + _467;
        float _862 = _769 + _468;
        float _863 = _773 + _469;
        float _873 = fma(_863, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861)) - _828;
        float _874 = fma(_863, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861)) - _832;
        float _875 = fma(_863, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861)) - _836;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_828 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_832 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[34u].z) + ((((((_836 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _931 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_897.x + (-0.5));
        float _933 = _931 * (_897.y + (-0.5));
        float _934 = _931 * (_897.z + (-0.5));
        float _941 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_904.x + (-0.5));
        float _943 = _941 * (_904.y + (-0.5));
        float _944 = _941 * (_904.z + (-0.5));
        float _951 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_911.x + (-0.5));
        float _953 = _951 * (_911.y + (-0.5));
        float _954 = _951 * (_911.z + (-0.5));
        float _961 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_918.x + (-0.5));
        float _963 = _961 * (_918.y + (-0.5));
        float _964 = _961 * (_918.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _985 = (dot(vec3(_467, _468, _469), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _995 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3988 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_997 + 1.0))) + _1002) * _965;
        float _1012 = _933 * 0.5;
        float _1013 = _943 * 0.5;
        float _1014 = _953 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_467, _468, _469), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _4021 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1039 + 1.0))) + _1044) * _966;
        float _1054 = _934 * 0.5;
        float _1055 = _944 * 0.5;
        float _1056 = _954 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_467, _468, _469), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _4054 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1081 + 1.0))) + _1086) * _967;
        _1103 = _934;
        _1105 = _933;
        _1106 = _932;
        _1107 = _944;
        _1108 = _943;
        _1109 = _942;
        _1110 = _954;
        _1111 = _953;
        _1112 = _952;
        _1113 = _967;
        _1114 = _966;
        _1115 = _965;
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _1104;
        _1105 = _1104;
        _1106 = _1104;
        _1107 = _1104;
        _1108 = _1104;
        _1109 = _1104;
        _1110 = _1104;
        _1111 = _1104;
        _1112 = _1104;
        _1113 = _1104;
        _1114 = _1104;
        _1115 = _1104;
        _1116 = 0.0;
        _1117 = 0.0;
        _1118 = 0.0;
    }
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1147 = fma(_773, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _765));
        float _1151 = fma(_773, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _765));
        float _1155 = fma(_773, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _765));
        float _1178 = _765 + _467;
        float _1179 = _769 + _468;
        float _1180 = _773 + _469;
        float _1190 = fma(_1180, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178)) - _1147;
        float _1191 = fma(_1180, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178)) - _1151;
        float _1192 = fma(_1180, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178)) - _1155;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1147 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1151 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[35u].z) + ((((((_1155 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1246 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1213.x + (-0.5));
        float _1248 = _1246 * (_1213.y + (-0.5));
        float _1249 = _1246 * (_1213.z + (-0.5));
        float _1256 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1220.x + (-0.5));
        float _1258 = _1256 * (_1220.y + (-0.5));
        float _1259 = _1256 * (_1220.z + (-0.5));
        float _1266 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1227.x + (-0.5));
        float _1268 = _1266 * (_1227.y + (-0.5));
        float _1269 = _1266 * (_1227.z + (-0.5));
        float _1276 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1234.x + (-0.5));
        float _1278 = _1276 * (_1234.y + (-0.5));
        float _1279 = _1276 * (_1234.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_467, _468, _469), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4117 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1310 + 1.0))) + _1315) * _1280;
        float _1325 = _1248 * 0.5;
        float _1326 = _1258 * 0.5;
        float _1327 = _1268 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_467, _468, _469), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4150 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1352 + 1.0))) + _1357) * _1281;
        float _1367 = _1249 * 0.5;
        float _1368 = _1259 * 0.5;
        float _1369 = _1269 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_467, _468, _469), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4183 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1394 + 1.0))) + _1399) * _1282;
        _1416 = _1249;
        _1417 = _1248;
        _1418 = _1247;
        _1419 = _1259;
        _1420 = _1258;
        _1421 = _1257;
        _1422 = _1269;
        _1423 = _1268;
        _1424 = _1267;
        _1425 = _1282;
        _1426 = _1281;
        _1427 = _1280;
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1104;
        _1417 = _1104;
        _1418 = _1104;
        _1419 = _1104;
        _1420 = _1104;
        _1421 = _1104;
        _1422 = _1104;
        _1423 = _1104;
        _1424 = _1104;
        _1425 = _1104;
        _1426 = _1104;
        _1427 = _1104;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1117)) + _1117;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1463 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1440));
    float _1484 = _709 * 0.5;
    float _1485 = _710 * 0.5;
    float _1486 = _711 * 0.5;
    float _1487 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1490 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1493 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1527;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1500 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1103, _1107, _1110, _1113));
        float _1504 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1508 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1515 = dot(vec4(cbModelParam._m0[39u]), vec4(_1484, _1485, _1486, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1538;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1529 = dot(vec4(cbModelParam._m0[40u]), vec4(_1484, _1485, _1486, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1542 = (_1538 * cbModelParam._m0[1u].x) + (_1527 * (1.0 - cbModelParam._m0[1u].x));
    float _1552 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1552 : min(cbModelParam._m0[25u].z, _1552));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1602 = fma(_773, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765)) + cbModelParam._m0[13u].w;
        float _1606 = fma(_773, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765)) + cbModelParam._m0[14u].w;
        float _1610 = fma(_773, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765)) + cbModelParam._m0[15u].w;
        float _1613 = fma(_711, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709));
        float _1616 = fma(_711, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709));
        float _1619 = fma(_711, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709));
        float _1647;
        if (_1613 > 0.0)
        {
            _1647 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1647 = frontier_phi_25_23_ladder;
        }
        float _1819;
        if (_1616 > 0.0)
        {
            _1819 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1819 = frontier_phi_34_30_ladder;
        }
        float _2115;
        if (_1619 > 0.0)
        {
            _2115 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2115 = frontier_phi_46_41_ladder;
        }
        float _2117 = isnan(_1819) ? _1647 : (isnan(_1647) ? _1819 : min(_1647, _1819));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1613) + _1602;
        float _2123 = (_2118 * _1616) + _1606;
        float _2124 = (_2118 * _1619) + _1610;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2125;
        float _2129 = _2125 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 > _2129) || ((_2123 < _2127) || ((_2122 < _2127) || (_2122 > _2129))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2124, cbModelParam._m0[9u].z, fma(_2123, cbModelParam._m0[9u].y, _2122 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2124, cbModelParam._m0[10u].z, fma(_2123, cbModelParam._m0[10u].y, _2122 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2124, cbModelParam._m0[11u].z, fma(_2123, cbModelParam._m0[11u].y, _2122 * cbModelParam._m0[11u].x))), _1553);
            frontier_phi_24_46_ladder = _2269.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2269.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2269.x * cbModelParam._m0[1u].y;
        }
        _1635 = frontier_phi_24_46_ladder_2;
        _1637 = frontier_phi_24_46_ladder_1;
        _1639 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_709, _710, _711), _1553);
        _1635 = _1623.x * cbModelParam._m0[1u].y;
        _1637 = _1623.y * cbModelParam._m0[1u].y;
        _1639 = _1623.z * cbModelParam._m0[1u].y;
    }
    float _1643 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1643 : min(cbModelParam._m0[25u].w, _1643));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_773, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_773, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_773, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_711, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709));
        float _1711 = fma(_711, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709));
        float _1714 = fma(_711, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709));
        float _1824;
        if (_1708 > 0.0)
        {
            _1824 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1824 = frontier_phi_36_32_ladder;
        }
        float _2142;
        if (_1711 > 0.0)
        {
            _2142 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2142 = frontier_phi_48_43_ladder;
        }
        float _2480;
        if (_1714 > 0.0)
        {
            _2480 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2480 = frontier_phi_58_55_ladder;
        }
        float _2482 = isnan(_2142) ? _1824 : (isnan(_1824) ? _2142 : min(_1824, _2142));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1708) + _1697;
        float _2488 = (_2483 * _1711) + _1701;
        float _2489 = (_2483 * _1714) + _1705;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1644);
            frontier_phi_33_58_ladder = _2611.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2611.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2611.x * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_33_58_ladder_2;
        _1735 = frontier_phi_33_58_ladder_1;
        _1737 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_709, _710, _711), _1644);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1750 = (((_736 * _686) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1752 = (((_736 * _688) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1754 = (((_736 * _689) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    float _1798 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1802 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1806 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1811 = _1798 / _1810;
    float _1812 = _1802 / _1810;
    float _1813 = _1806 / _1810;
    float _1960;
    float _1961;
    float _1962;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1840 = ((uint(_1813 > cbSceneParam._m0[59u].y) + uint(_1813 > cbSceneParam._m0[59u].x)) + uint(_1813 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1841 = _1840 + 43u;
        uint _1849 = _1840 + 44u;
        uint _1857 = _1840 + 45u;
        uint _1865 = _1840 + 46u;
        float _1876 = fma(_1810, cbSceneParam._m0[_1841].w, fma(_1806, cbSceneParam._m0[_1841].z, fma(_1802, cbSceneParam._m0[_1841].y, _1798 * cbSceneParam._m0[_1841].x)));
        float _1880 = fma(_1810, cbSceneParam._m0[_1849].w, fma(_1806, cbSceneParam._m0[_1849].z, fma(_1802, cbSceneParam._m0[_1849].y, _1798 * cbSceneParam._m0[_1849].x)));
        float _1888 = fma(_1810, cbSceneParam._m0[_1865].w, fma(_1806, cbSceneParam._m0[_1865].z, fma(_1802, cbSceneParam._m0[_1865].y, _1798 * cbSceneParam._m0[_1865].x)));
        float _1893 = cbSceneParam._m0[33u].z * _1888;
        float _1895 = cbSceneParam._m0[33u].w * _1888;
        float _1898 = fma(_1810, cbSceneParam._m0[_1857].w, fma(_1806, cbSceneParam._m0[_1857].z, fma(_1802, cbSceneParam._m0[_1857].y, _1798 * cbSceneParam._m0[_1857].x))) / _1888;
        float _1946 = (cbSceneParam._m0[33u].x - sqrt(((_1812 * _1812) + (_1811 * _1811)) + (_1813 * _1813))) * cbSceneParam._m0[33u].y;
        float _4309 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1953 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 + _1876) / _1888, (_1895 + _1880) / _1888), _1898), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1895 + _1876) / _1888, (_1880 - _1893) / _1888), _1898), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1876 - _1893) / _1888, (_1880 - _1895) / _1888), _1898), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1876 - _1895) / _1888, (_1893 + _1880) / _1888), _1898), 0.0)).x), vec4(0.25)));
        _1960 = 1.0 - (_1953 * cbSceneParam._m0[34u].x);
        _1961 = 1.0 - (_1953 * cbSceneParam._m0[34u].y);
        _1962 = 1.0 - (_1953 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1960 = 1.0;
        _1961 = 1.0;
        _1962 = 1.0;
    }
    float _2026;
    float _2028;
    float _2030;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2014 = fma(_1810, cbSceneParam._m0[63u].w, fma(_1806, cbSceneParam._m0[63u].z, fma(_1802, cbSceneParam._m0[63u].y, _1798 * cbSceneParam._m0[63u].x)));
        float _2015 = fma(_1810, cbSceneParam._m0[60u].w, fma(_1806, cbSceneParam._m0[60u].z, fma(_1802, cbSceneParam._m0[60u].y, _1798 * cbSceneParam._m0[60u].x))) / _2014;
        float _2016 = fma(_1810, cbSceneParam._m0[61u].w, fma(_1806, cbSceneParam._m0[61u].z, fma(_1802, cbSceneParam._m0[61u].y, _1798 * cbSceneParam._m0[61u].x))) / _2014;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_2015 >= cbSceneParam._m0[64u].x) && (_2016 >= cbSceneParam._m0[64u].y)) && (_2015 <= cbSceneParam._m0[64u].z)) && (_2016 <= cbSceneParam._m0[64u].w))
        {
            float _2155 = fma(_1810, cbSceneParam._m0[62u].w, fma(_1806, cbSceneParam._m0[62u].z, fma(_1802, cbSceneParam._m0[62u].y, _1798 * cbSceneParam._m0[62u].x))) / _2014;
            float _2159 = isnan(cbSceneParam._m0[41u].w) ? _2155 : (isnan(_2155) ? cbSceneParam._m0[41u].w : max(_2155, cbSceneParam._m0[41u].w));
            float _2202 = (cbSceneParam._m0[33u].x - sqrt(((_1812 * _1812) + (_1811 * _1811)) + (_1813 * _1813))) * cbSceneParam._m0[33u].y;
            float _4325 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
            float _2209 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2015, cbSceneParam._m0[33u].w + _2016), _2159), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2015, _2016 - cbSceneParam._m0[33u].z), _2159), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2015 - cbSceneParam._m0[33u].z, _2016 - cbSceneParam._m0[33u].w), _2159), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2015 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2016), _2159), 0.0)).x), vec4(0.25)));
            float _2213 = 1.0 - (_2209 * cbSceneParam._m0[34u].x);
            float _2214 = 1.0 - (_2209 * cbSceneParam._m0[34u].y);
            float _2215 = 1.0 - (_2209 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2215) ? _1962 : (isnan(_1962) ? _2215 : min(_1962, _2215));
            frontier_phi_45_44_ladder_1 = isnan(_2214) ? _1961 : (isnan(_1961) ? _2214 : min(_1961, _2214));
            frontier_phi_45_44_ladder_2 = isnan(_2213) ? _1960 : (isnan(_1960) ? _2213 : min(_1960, _2213));
        }
        else
        {
            frontier_phi_45_44_ladder = _1962;
            frontier_phi_45_44_ladder_1 = _1961;
            frontier_phi_45_44_ladder_2 = _1960;
        }
        _2026 = frontier_phi_45_44_ladder_2;
        _2028 = frontier_phi_45_44_ladder_1;
        _2030 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2026 = _1960;
        _2028 = _1961;
        _2030 = _1962;
    }
    uvec4 _2035 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _2037 = _2035.x * 14u;
    uint _2038 = _2037 + 13u;
    float _2045 = _701 + (-1.0);
    float _2050 = (cbLight._m0[_2038].x * _2045) + 1.0;
    float _2051 = (cbLight._m0[_2038].y * _2045) + 1.0;
    float _2052 = (cbLight._m0[_2038].z * _2045) + 1.0;
    float _2053 = (cbLight._m0[_2038].w * _2045) + 1.0;
    uint _2054 = _2037 + 5u;
    float _2060 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2064 = _2037 + 4u;
    float _2074 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2078 = _2037 | 1u;
    float _2089 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_467, _468, _469));
    float _2092 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_467, _468, _469));
    float _4361 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _4372 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2097 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2099 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2106 = ((cbLight._m0[_2054].x * _2060) * _2099) + (((cbLight._m0[_2064].x * _2026) * _2074) * _2097);
    float _2107 = ((_2060 * cbLight._m0[_2054].y) * _2099) + (((cbLight._m0[_2064].y * _2028) * _2074) * _2097);
    float _2108 = ((_2060 * cbLight._m0[_2054].z) * _2099) + (((cbLight._m0[_2064].z * _2030) * _2074) * _2097);
    uvec4 _2112 = floatBitsToUint(cbLight._m0[_2037 + 12u]);
    bool _2114 = _2112.x == 0u;
    float _2216;
    float _2218;
    float _2220;
    if (_2114)
    {
        _2216 = _2106;
        _2218 = _2107;
        _2220 = _2108;
    }
    else
    {
        uint _2224 = _2037 + 6u;
        float _2240 = (dot(vec3(cbLight._m0[_2037 + 2u].xyz), vec3(_467, _468, _469)) * 0.5) + 0.5;
        float _2241 = _2240 * _2240;
        float _4383 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2242 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2243 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2216 = (((cbLight._m0[_2224].x * 0.3183098733425140380859375) * _2242) * _2243) + _2106;
        _2218 = (((cbLight._m0[_2224].y * 0.3183098733425140380859375) * _2242) * _2243) + _2107;
        _2220 = (((cbLight._m0[_2224].z * 0.3183098733425140380859375) * _2242) * _2243) + _2108;
    }
    bool _2223 = _2112.y == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2223)
    {
        _2278 = _2216;
        _2280 = _2218;
        _2282 = _2220;
    }
    else
    {
        uint _2451 = _2037 + 7u;
        float _2467 = (dot(vec3(cbLight._m0[_2037 + 3u].xyz), vec3(_467, _468, _469)) * 0.5) + 0.5;
        float _2468 = _2467 * _2467;
        float _4399 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2469 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2470 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2278 = (((cbLight._m0[_2451].x * 0.3183098733425140380859375) * _2469) * _2470) + _2216;
        _2280 = (((cbLight._m0[_2451].y * 0.3183098733425140380859375) * _2469) * _2470) + _2218;
        _2282 = (((cbLight._m0[_2451].z * 0.3183098733425140380859375) * _2469) * _2470) + _2220;
    }
    uint _2285 = _2037 + 8u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _615) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2037].x + _549;
    float _2301 = cbLight._m0[_2037].y + _550;
    float _2302 = cbLight._m0[_2037].z + _551;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2037].xyz));
    float _4415 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _2314 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2315 = dot(vec3(_467, _468, _469), vec3(_2307, _2308, _2309));
    float _4437 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2307, _2308, _2309));
    float _4448 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2299 * _2299;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
    float _2336 = 0.959999978542327880859375 - _683;
    float _2338 = 0.959999978542327880859375 - _684;
    float _2339 = 0.959999978542327880859375 - _685;
    float _2346 = 1.0 - _2299;
    float _2357 = (0.5 / (((_2314 * ((_2313 * _2346) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2346) + _2299) * _2313))) * _2313;
    float _4459 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    uint _2373 = _2037 + 9u;
    float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _615) * 0.949999988079071044921875);
    float _2385 = _2384 * _2384;
    float _2386 = cbLight._m0[_2078].x + _549;
    float _2387 = cbLight._m0[_2078].y + _550;
    float _2388 = cbLight._m0[_2078].z + _551;
    float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
    float _2393 = _2392 * _2386;
    float _2394 = _2392 * _2387;
    float _2395 = _2392 * _2388;
    float _2396 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2078].xyz));
    float _4470 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2400 = dot(vec3(_467, _468, _469), vec3(_2393, _2394, _2395));
    float _4481 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2404 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2393, _2394, _2395));
    float _4492 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2408 = _2385 * _2385;
    float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
    float _2426 = 1.0 - _2385;
    float _2436 = (0.5 / (((_2314 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2426) + _2385) * _2399))) * _2399;
    float _4503 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2438 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
    float _2448 = (((((_2419 * _2336) + _686) * cbLight._m0[_2373].x) * _2438) * _2060) + ((((cbLight._m0[_2285].x * _2026) * ((_2335 * _2336) + _686)) * _2359) * _2074);
    float _2449 = (((((_2419 * _2338) + _688) * cbLight._m0[_2373].y) * _2438) * _2060) + ((((cbLight._m0[_2285].y * _2028) * ((_2335 * _2338) + _688)) * _2359) * _2074);
    float _2450 = (((((_2419 * _2339) + _689) * cbLight._m0[_2373].z) * _2438) * _2060) + ((((cbLight._m0[_2285].z * _2030) * ((_2335 * _2339) + _689)) * _2359) * _2074);
    float _2506;
    float _2508;
    float _2510;
    if (_2114)
    {
        _2506 = _2448;
        _2508 = _2449;
        _2510 = _2450;
    }
    else
    {
        uint _2512 = _2037 + 2u;
        uint _2516 = _2037 + 10u;
        float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _615) * 0.949999988079071044921875);
        float _2531 = _2530 * _2530;
        float _2532 = cbLight._m0[_2512].x + _549;
        float _2533 = cbLight._m0[_2512].y + _550;
        float _2534 = cbLight._m0[_2512].z + _551;
        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
        float _2539 = _2538 * _2532;
        float _2540 = _2538 * _2533;
        float _2541 = _2538 * _2534;
        float _2542 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2512].xyz));
        float _4514 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2546 = dot(vec3(_467, _468, _469), vec3(_2539, _2540, _2541));
        float _4525 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2550 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2539, _2540, _2541));
        float _4536 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2554 = _2531 * _2531;
        float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
        float _2565 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
        float _2572 = 1.0 - _2531;
        float _2582 = (0.5 / (((_2314 * ((_2545 * _2572) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2572) + _2531) * _2545))) * _2545;
        float _4547 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2506 = (((((_2565 * _2336) + _686) * cbLight._m0[_2516].x) * _2584) * _2585) + _2448;
        _2508 = (((((_2565 * _2338) + _688) * cbLight._m0[_2516].y) * _2584) * _2585) + _2449;
        _2510 = (((((_2565 * _2339) + _689) * cbLight._m0[_2516].z) * _2584) * _2585) + _2450;
    }
    float _2616;
    float _2618;
    float _2620;
    if (_2223)
    {
        _2616 = _2506;
        _2618 = _2508;
        _2620 = _2510;
    }
    else
    {
        uint _2627 = _2037 + 3u;
        uint _2631 = _2037 + 11u;
        float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2627].w)) * _615) * 0.949999988079071044921875);
        float _2646 = _2645 * _2645;
        float _2647 = cbLight._m0[_2627].x + _549;
        float _2648 = cbLight._m0[_2627].y + _550;
        float _2649 = cbLight._m0[_2627].z + _551;
        float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
        float _2654 = _2653 * _2647;
        float _2655 = _2653 * _2648;
        float _2656 = _2653 * _2649;
        float _2657 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2627].xyz));
        float _4563 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2661 = dot(vec3(_467, _468, _469), vec3(_2654, _2655, _2656));
        float _4574 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2665 = dot(vec3(cbLight._m0[_2627].xyz), vec3(_2654, _2655, _2656));
        float _4585 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2669 = _2646 * _2646;
        float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
        float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
        float _2687 = 1.0 - _2646;
        float _2697 = (0.5 / (((_2314 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2687) + _2646) * _2660))) * _2660;
        float _4596 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2699 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
        float _2700 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2616 = (((((_2680 * _2336) + _686) * cbLight._m0[_2631].x) * _2699) * _2700) + _2506;
        _2618 = (((((_2680 * _2338) + _688) * cbLight._m0[_2631].y) * _2699) * _2700) + _2508;
        _2620 = (((((_2680 * _2339) + _689) * cbLight._m0[_2631].z) * _2699) * _2700) + _2510;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2035.y == 0u)
    {
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _573) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _572) / _2722)));
        float _2743 = (log2(_1813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
        }
        else
        {
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3018)
                {
                    frontier_phi_79_pred = _3005;
                    frontier_phi_79_pred_1 = _3007;
                    frontier_phi_79_pred_2 = _3006;
                    frontier_phi_79_pred_3 = _3004;
                    frontier_phi_79_pred_4 = _3003;
                    frontier_phi_79_pred_5 = _3002;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3017;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3008 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _1811;
                        float _3214 = _3173.y - _1812;
                        float _3215 = _3173.z - _1813;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_596, _599, _602), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4622 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _1811;
                        float _3249 = (-0.0) - _1812;
                        float _3250 = (-0.0) - _1813;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3264 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _717;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3277 = _3257 + _3222;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_596, _599, _602), vec3(_3255, _3256, _3257));
                        float _4638 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3289 = dot(vec3(_596, _599, _602), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4649 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3233 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3223) + _3298;
                        float _4660 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4671 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3296 * _3296) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3077 = (_3244 * _3192.x) + _3150;
                        _3078 = (_3244 * _3192.y) + _3151;
                        _3079 = (_3244 * _3192.z) + _3152;
                        _3074 = (_3324 * _3209.x) + _3147;
                        _3075 = (_3324 * _3209.y) + _3148;
                        _3076 = (_3324 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_79_pred = _3077;
                    frontier_phi_79_pred_1 = _3079;
                    frontier_phi_79_pred_2 = _3078;
                    frontier_phi_79_pred_3 = _3076;
                    frontier_phi_79_pred_4 = _3075;
                    frontier_phi_79_pred_5 = _3074;
                }
                _2857 = frontier_phi_79_pred;
                _2861 = frontier_phi_79_pred_1;
                _2859 = frontier_phi_79_pred_2;
                _2855 = frontier_phi_79_pred_3;
                _2853 = frontier_phi_79_pred_4;
                _2851 = frontier_phi_79_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2851;
                    _3003 = _2853;
                    _3004 = _2855;
                    _3005 = _2857;
                    _3006 = _2859;
                    _3007 = _2861;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
        }
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.z;
        uint _2867 = (_2865 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2867) & _2753) == 0u)
        {
            _2970 = _2850;
            _2972 = _2852;
            _2974 = _2854;
            _2976 = _2856;
            _2978 = _2858;
            _2980 = _2860;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
            float _2996 = _2995 * _1811;
            float _2997 = _2995 * _1812;
            float _2998 = _2995 * _1813;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2867 < ((_2865 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3130 = _2850;
                float _3131 = _2852;
                float _3132 = _2854;
                float _3133 = _2856;
                float _3134 = _2858;
                float _3135 = _2860;
                uint _3136 = _2867;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3146)
                    {
                        frontier_phi_90_pred = _3132;
                        frontier_phi_90_pred_1 = _3133;
                        frontier_phi_90_pred_2 = _3135;
                        frontier_phi_90_pred_3 = _3134;
                        frontier_phi_90_pred_4 = _3131;
                        frontier_phi_90_pred_5 = _3130;
                    }
                    else
                    {
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        float _3356 = _3135;
                        uint _3357 = _3145;
                        uint _3358;
                        vec4 _3383;
                        float _3384;
                        vec4 _3399;
                        vec3 _3411;
                        vec4 _3427;
                        vec4 _3442;
                        float _3489;
                        bool _3490;
                        for (;;)
                        {
                            uint _3368 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3357));
                            _3358 = (_3357 + 4294967295u) & _3357;
                            uint _3370 = _3368 * 40u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3384 = _3383.w;
                            uint _3386 = (_3368 * 40u) + 4u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3368 * 40u) + 8u;
                            _3411 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x));
                            uint _3414 = (_3368 * 40u) + 16u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3368 * 40u) + 20u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3445 = (_3368 * 40u) + 24u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3464 = (_3368 * 40u) + 28u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3489 = fma(_1813, _3477.z, fma(_1812, _3477.y, _3477.x * _1811)) + _3477.w;
                            _3490 = !((fma(_1813, _3458.z, fma(_1812, _3458.y, _3458.x * _1811)) + _3458.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3490)
                            {
                                float _3517 = _3383.x - _1811;
                                float _3518 = _3383.y - _1812;
                                float _3519 = _3383.z - _1813;
                                float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                                float _3523 = inversesqrt(_3520);
                                float _3524 = _3523 * _3517;
                                float _3525 = _3523 * _3518;
                                float _3526 = _3523 * _3519;
                                float _3530 = 1.0 - (_3520 / (_3384 * _3384));
                                float _4682 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3535 = sqrt(_3520) * _3399.w;
                                float _3537 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                                float _3538 = _3537 * _3537;
                                float _3541 = ((1.0 - _3538) * dot(vec3(_3524, _3525, _3526), vec3(_596, _599, _602))) + _3538;
                                float _3544 = _3535 * _3535;
                                float _3548 = (fma(_1813, _3427.z, fma(_1812, _3427.y, _3427.x * _1811)) + _3427.w) / _3489;
                                float _3549 = (fma(_1813, _3442.z, fma(_1812, _3442.y, _3442.x * _1811)) + _3442.w) / _3489;
                                float _3553 = 1.0 - dot(vec2(_3548, _3549), vec2(_3548, _3549));
                                float _4698 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3555 = _3554 * (((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3531) / ((_3544 * 0.699999988079071044921875) + 1.0));
                                float _3567 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                                float _3568 = 1.0 - _717;
                                float _3575 = sqrt(1.0 - ((1.0 - (_3568 * _3568)) * (1.0 - (_3567 * _3567))));
                                float _3576 = _3575 * _3575;
                                float _3577 = _3576 * _3576;
                                float _3578 = _3524 - _2996;
                                float _3579 = _3525 - _2997;
                                float _3580 = _3526 - _2998;
                                float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                                float _3588 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4709 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3592 = dot(vec3(_596, _599, _602), vec3(_3584 * _3578, _3584 * _3579, _3584 * _3580));
                                float _4720 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3599 = ((_3595 * _3595) * (_3577 + (-1.0))) + 1.0;
                                float _3600 = _3537 * _3576;
                                float _3601 = _3600 * _3600;
                                float _3607 = ((1.0 - _3601) * dot(vec3(_596, _599, _602), vec3(_3524, _3525, _3526))) + _3601;
                                float _4731 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3609 = 1.0 - _3576;
                                float _3619 = (0.5 / (((_3608 * ((_3591 * _3609) + _3576)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3576) * _3591))) * _3608;
                                float _4742 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3629 = (_3554 * _3531) * (((_3577 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3599 * _3599) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3555 * _3399.z;
                                frontier_phi_96_pred_1 = _3555 * _3399.y;
                                frontier_phi_96_pred_2 = _3555 * _3399.x;
                                frontier_phi_96_pred_3 = _3629 * _3411.z;
                                frontier_phi_96_pred_4 = _3629 * _3411.y;
                                frontier_phi_96_pred_5 = _3629 * _3411.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3638 = frontier_phi_96_pred;
                            _3637 = frontier_phi_96_pred_1;
                            _3636 = frontier_phi_96_pred_2;
                            _3635 = frontier_phi_96_pred_3;
                            _3634 = frontier_phi_96_pred_4;
                            _3633 = frontier_phi_96_pred_5;
                            _3341 = _3636 + _3354;
                            _3342 = _3637 + _3355;
                            _3343 = _3638 + _3356;
                            _3338 = _3633 + _3351;
                            _3339 = _3634 + _3352;
                            _3340 = _3635 + _3353;
                            if (_3358 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3358;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3340;
                        frontier_phi_90_pred_1 = _3341;
                        frontier_phi_90_pred_2 = _3343;
                        frontier_phi_90_pred_3 = _3342;
                        frontier_phi_90_pred_4 = _3339;
                        frontier_phi_90_pred_5 = _3338;
                    }
                    _2975 = frontier_phi_90_pred;
                    _2977 = frontier_phi_90_pred_1;
                    _2981 = frontier_phi_90_pred_2;
                    _2979 = frontier_phi_90_pred_3;
                    _2973 = frontier_phi_90_pred_4;
                    _2971 = frontier_phi_90_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2971;
                        _3131 = _2973;
                        _3132 = _2975;
                        _3133 = _2977;
                        _3134 = _2979;
                        _3135 = _2981;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2979;
                frontier_phi_71_72_ladder_1 = _2981;
                frontier_phi_71_72_ladder_2 = _2977;
                frontier_phi_71_72_ladder_3 = _2975;
                frontier_phi_71_72_ladder_4 = _2973;
                frontier_phi_71_72_ladder_5 = _2971;
            }
            else
            {
                frontier_phi_71_72_ladder = _2858;
                frontier_phi_71_72_ladder_1 = _2860;
                frontier_phi_71_72_ladder_2 = _2856;
                frontier_phi_71_72_ladder_3 = _2854;
                frontier_phi_71_72_ladder_4 = _2852;
                frontier_phi_71_72_ladder_5 = _2850;
            }
            _2970 = frontier_phi_71_72_ladder_5;
            _2972 = frontier_phi_71_72_ladder_4;
            _2974 = frontier_phi_71_72_ladder_3;
            _2976 = frontier_phi_71_72_ladder_2;
            _2978 = frontier_phi_71_72_ladder;
            _2980 = frontier_phi_71_72_ladder_1;
        }
        float _2985 = isnan(1.0) ? _701 : (isnan(_701) ? 1.0 : min(_701, 1.0));
        _2765 = (_2985 * _2976) + _2278;
        _2767 = (_2985 * _2978) + _2280;
        _2769 = (_2985 * _2980) + _2282;
        _2771 = ((_2970 * _686) * _2985) + _2616;
        _2773 = ((_2972 * _688) * _2985) + _2618;
        _2775 = ((_2974 * _689) * _2985) + _2620;
    }
    else
    {
        _2765 = _2278;
        _2767 = _2280;
        _2769 = _2282;
        _2771 = _2616;
        _2773 = _2618;
        _2775 = _2620;
    }
    vec4 _2781 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4758 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4769 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4780 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _2805 = (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2765 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _701))) + ((_2771 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + (_2781.x * cbMtdParam._m0[3u].x);
    float _2807 = ((_2781.y * cbMtdParam._m0[3u].x) + ((_2773 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2767 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _701)));
    float _2809 = ((_2781.z * cbMtdParam._m0[3u].x) + ((_2775 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2769 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _701)));
    float _2810 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2811 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2812 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    uint _2813 = _628 + 6u;
    float _2821 = _572 / cbSceneParam._m0[86u].x;
    float _2822 = _573 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _490 : (isnan(_490) ? cbSceneParam._m0[77u].w : min(_490, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_490 > cbSceneParam._m0[78u].w)
    {
        float _2875 = isnan(_490) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _490 : min(cbSceneParam._m0[80u].w, _490));
        float _2876 = _2875 / _490;
        float _2887 = _2876 * _542;
        float _2888 = _543 * _2876;
        float _2889 = (-0.0) - _2888;
        float _2890 = _2876 * _544;
        float _2892 = (cbSceneParam._m0[77u].w * _2889) / _2875;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2888;
        float _2900 = sqrt(((_2887 * _2887) + (_2888 * _2888)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2875)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3087;
        if (abs((_2889 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3087 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3033 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3087 = ((abs(_2900 / _2889) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2910 * _3042) - exp2(_2910 * _3043)) * _3031))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3089 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3098 = exp2((_3087 * (-1.44269502162933349609375)) * (1.0 - _3089.w));
        float _3099 = log2(_3098);
        float _3115 = log2(_2841);
        _2912 = (exp2(_3115 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].x)) * _3089.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2914 = (exp2(_3115 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].y)) * _3089.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2916 = (exp2(_3115 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].z)) * _3089.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2918 = _3098 * _2841;
    }
    else
    {
        _2912 = _2838;
        _2914 = _2839;
        _2916 = _2840;
        _2918 = _2841;
    }
    bool _3125;
    vec4 _2928;
    vec4 _2950;
    float _2952;
    float _2956;
    float _2957;
    float _2958;
    float _2959;
    bool _2969;
    for (;;)
    {
        _2928 = cbMatDynParam._m0[0u];
        float _2930 = roundEven(_2928.y);
        bool _2931 = _2930 == 3.0;
        float _2932 = log2(_2918);
        float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * _2810;
        float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * _2811;
        float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * _2812;
        float _2948 = _558 + (-0.5);
        _2950 = cbMtdParam._m0[1u];
        _2952 = _2950.y * _2948;
        float _2955 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2956 = _2955 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
        _2957 = _2955 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
        _2958 = _2955 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
        _2959 = _2948 * 0.999000012874603271484375;
        _2969 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2969)
        {
            if ((cbInstanceData._m0[_628 + 7u].x + _2959) < 0.5)
            {
                _3125 = true;
                break;
            }
        }
        uint _3066 = _630 + uint(_2928.w);
        if ((cbInstanceData._m0[_3066].w < 1.0) && ((cbInstanceData._m0[_3066].w + _2959) < 0.5))
        {
            _3125 = true;
            break;
        }
        if ((_2952 + 1.0) < _2950.x)
        {
            _3125 = true;
            break;
        }
        _3125 = false;
        break;
    }
    float _3329;
    if (_3125)
    {
        discard_state = true;
        _3329 = 0.0;
    }
    else
    {
        _3329 = cbInstanceData._m0[_2813].w;
    }
    SV_Target.x = _2956;
    SV_Target.y = _2957;
    SV_Target.z = _2958;
    SV_Target.w = _3329;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
    discard_exit();
}


