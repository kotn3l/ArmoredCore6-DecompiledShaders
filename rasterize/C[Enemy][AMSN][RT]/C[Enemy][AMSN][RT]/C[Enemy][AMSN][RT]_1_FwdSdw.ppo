#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1153;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _265 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _267 = log2(0.0);
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[14u].x;
    _192[0u] = cbMtdParam._m0[14u].y;
    _193[0u] = cbMtdParam._m0[14u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[16u].x;
    _192[2u] = cbMtdParam._m0[16u].y;
    _193[2u] = cbMtdParam._m0[16u].z;
    _191[3u] = cbMtdParam._m0[11u].x;
    _192[3u] = cbMtdParam._m0[11u].y;
    _193[3u] = cbMtdParam._m0[11u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[13u].x;
    _192[5u] = cbMtdParam._m0[13u].y;
    _193[5u] = cbMtdParam._m0[13u].z;
    vec4 _339 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _343 = _339.y;
    float _346 = (_339.x + (-0.02500000037252902984619140625)) * 8.0;
    float _348 = roundEven(_346);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    uint _352 = uint(int(isnan(5.0) ? _349 : (isnan(_349) ? 5.0 : min(_349, 5.0))));
    float _369 = roundEven(5.0 - _346);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(4.0) ? _370 : (isnan(_370) ? 4.0 : min(_370, 4.0));
    float _377;
    float _379;
    if (exp2(_267 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _377 = cbMtdParam._m0[26u].x;
        _379 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _377 = cbMtdParam._m0[22u].x;
        _379 = cbMtdParam._m0[22u].y;
    }
    float _381 = _377 * TEXCOORD.x;
    float _382 = _379 * TEXCOORD.y;
    float _393 = floor(_371);
    vec4 _396 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _381) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _382) + cbTextureTilingScale._m0[6u].w, _393));
    vec4 _418 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _426 = ((((((_191[_352] - cbMtdParam._m0[18u].x) * _343) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _396.x) * cbMtdParam._m0[9u].x) * _418.x;
    float _430 = ((((((_192[_352] - cbMtdParam._m0[18u].y) * _343) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _396.y) * cbMtdParam._m0[9u].y) * _418.y;
    float _434 = ((((((_193[_352] - cbMtdParam._m0[18u].z) * _343) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _396.z) * cbMtdParam._m0[9u].z) * _418.z;
    vec4 _446 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _450 = _446.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[22u].z;
    _187[0u] = cbMtdParam._m0[22u].w;
    _186[1u] = cbMtdParam._m0[23u].z;
    _187[1u] = cbMtdParam._m0[23u].w;
    _186[2u] = cbMtdParam._m0[24u].x;
    _187[2u] = cbMtdParam._m0[24u].y;
    _186[3u] = cbMtdParam._m0[24u].z;
    _187[3u] = cbMtdParam._m0[24u].w;
    _186[4u] = cbMtdParam._m0[23u].x;
    _187[4u] = cbMtdParam._m0[23u].y;
    float _494 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _496 = uint(int(isnan(4.0) ? _494 : (isnan(_494) ? 4.0 : min(_494, 4.0))));
    float _501 = _187[_496] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _381) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _382) + cbTextureTilingScale._m0[8u].w, _393)).x;
    vec4 _520 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _381) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _382) + cbTextureTilingScale._m0[7u].w, _393));
    float _527 = (_520.x * 2.0) + (-1.0);
    float _528 = (_520.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3812 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))));
    float _544 = (cbMtdParam._m0[20u].x * (((_450 * 2.0) * (_520.z + _186[_496])) - _450)) + _450;
    float _548 = (cbMtdParam._m0[20u].y * ((_446.x * 2.0) + (-1.0))) + _527;
    float _549 = (cbMtdParam._m0[20u].y * ((_446.y * 2.0) + (-1.0))) + _528;
    float _552 = fma(_535, _243, fma(_549, _235 * TANGENT.x, (_221 * _213) * _548));
    float _555 = fma(_535, _244, fma(_549, _235 * TANGENT.y, (_221 * _214) * _548));
    float _558 = fma(_535, _245, fma(_549, _235 * TANGENT.z, (_221 * _215) * _548));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3823 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _566 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3845 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3856 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3867 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _570 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _586 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _637 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _627);
    float _638 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _627);
    float _639 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _627);
    float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
    float _644 = _637 * _643;
    float _645 = _638 * _643;
    float _646 = _639 * _643;
    float _652 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _653 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _655 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _657 = _655.w;
    float _675 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _678 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _681 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    vec4 _683 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _694 = (((_683.y - _566) + (_683.w * _566)) * cbMtdParam._m0[3u].x) + _566;
    uint _707 = uint(roundEven(NORMAL.w)) * 13u;
    uint _709 = (_707 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _715 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_709].x;
    float _716 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_709].y;
    float _717 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_709].z;
    float _3878 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    vec4 _721 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _726 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _737 = (((_726.x - _570) + (_726.w * _570)) * cbMtdParam._m0[3u].x) + _570;
    float _750 = (cbMtdParam._m0[3u].x * (((_718 * _657) - _718) + _721.x)) + _718;
    float _751 = (cbMtdParam._m0[3u].x * (((_719 * _657) - _719) + _721.y)) + _719;
    float _752 = (cbMtdParam._m0[3u].x * (((_720 * _657) - _720) + _721.z)) + _720;
    float _753 = 1.0 - _737;
    float _754 = _753 * _750;
    float _755 = _753 * _751;
    float _756 = _753 * _752;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _737;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _737;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _737;
    float _764 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _652, cbSceneParam._m0[86u].y * _653));
    float _779 = _776.x * TEXCOORD_4;
    float _780 = dot(vec3(_563, _564, _565), vec3(_644, _645, _646));
    float _783 = _780 * 2.0;
    float _787 = (_783 * _563) - _644;
    float _788 = (_783 * _564) - _645;
    float _789 = (_783 * _565) - _646;
    float _793 = abs(dot(vec3(_644, _645, _646), vec3(_563, _564, _565)));
    float _3911 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _795 = sqrt(_694);
    float _806 = exp2((_795 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_795 * 3.0));
    float _812 = (1.0 - _806) * ((_795 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _813 = _806 * _795;
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = fma(_849, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841));
        float _881 = fma(_849, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841));
        float _885 = fma(_849, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841));
        float _910 = _841 + _563;
        float _911 = _845 + _564;
        float _912 = _849 + _565;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _877;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _881;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _885;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_877 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_881 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_885 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_563, _564, _565), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3959 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_563, _564, _565), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3992 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_563, _564, _565), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _4025 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_849, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841));
        float _1197 = fma(_849, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841));
        float _1201 = fma(_849, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841));
        float _1224 = _841 + _563;
        float _1225 = _845 + _564;
        float _1226 = _849 + _565;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_563, _564, _565), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4088 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_563, _564, _565), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4121 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_563, _564, _565), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4154 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1153;
        _1463 = _1153;
        _1464 = _1153;
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = _1153;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1165)) + _1165;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1166)) + _1166;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _787 * 0.5;
    float _1531 = _788 * 0.5;
    float _1532 = _789 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1646 = fma(_849, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841)) + cbModelParam._m0[13u].w;
        float _1650 = fma(_849, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841)) + cbModelParam._m0[14u].w;
        float _1654 = fma(_849, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841)) + cbModelParam._m0[15u].w;
        float _1657 = fma(_789, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787));
        float _1660 = fma(_789, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787));
        float _1663 = fma(_789, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787));
        float _1691;
        if (_1657 > 0.0)
        {
            _1691 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1691 = frontier_phi_18_16_ladder;
        }
        float _1862;
        if (_1660 > 0.0)
        {
            _1862 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1862 = frontier_phi_27_23_ladder;
        }
        float _2157;
        if (_1663 > 0.0)
        {
            _2157 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2157 = frontier_phi_39_34_ladder;
        }
        float _2159 = isnan(_1862) ? _1691 : (isnan(_1691) ? _1862 : min(_1691, _1862));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1657) + _1646;
        float _2165 = (_2160 * _1660) + _1650;
        float _2166 = (_2160 * _1663) + _1654;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_17_39_ladder = _2311.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2311.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2311.x * cbModelParam._m0[1u].y;
        }
        _1679 = frontier_phi_17_39_ladder_2;
        _1681 = frontier_phi_17_39_ladder_1;
        _1683 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_787, _788, _789), _1599);
        _1679 = _1667.x * cbModelParam._m0[1u].y;
        _1681 = _1667.y * cbModelParam._m0[1u].y;
        _1683 = _1667.z * cbModelParam._m0[1u].y;
    }
    float _1687 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1687 : min(cbModelParam._m0[25u].w, _1687));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1741 = fma(_849, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841)) + cbModelParam._m0[21u].w;
        float _1745 = fma(_849, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841)) + cbModelParam._m0[22u].w;
        float _1749 = fma(_849, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841)) + cbModelParam._m0[23u].w;
        float _1752 = fma(_789, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787));
        float _1755 = fma(_789, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787));
        float _1758 = fma(_789, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787));
        float _1867;
        if (_1752 > 0.0)
        {
            _1867 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1867 = frontier_phi_29_25_ladder;
        }
        float _2184;
        if (_1755 > 0.0)
        {
            _2184 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2184 = frontier_phi_41_36_ladder;
        }
        float _2522;
        if (_1758 > 0.0)
        {
            _2522 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2522 = frontier_phi_51_48_ladder;
        }
        float _2524 = isnan(_2184) ? _1867 : (isnan(_1867) ? _2184 : min(_1867, _2184));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _1752) + _1741;
        float _2530 = (_2525 * _1755) + _1745;
        float _2531 = (_2525 * _1758) + _1749;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2532;
        float _2535 = _2532 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2531 > _2535) || ((_2531 < _2533) || ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 < _2533) || (_2529 > _2535))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2531, cbModelParam._m0[17u].z, fma(_2530, cbModelParam._m0[17u].y, _2529 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2531, cbModelParam._m0[18u].z, fma(_2530, cbModelParam._m0[18u].y, _2529 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2531, cbModelParam._m0[19u].z, fma(_2530, cbModelParam._m0[19u].y, _2529 * cbModelParam._m0[19u].x))), _1688);
            frontier_phi_26_51_ladder = _2653.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2653.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2653.x * cbModelParam._m0[1u].z;
        }
        _1777 = frontier_phi_26_51_ladder_2;
        _1779 = frontier_phi_26_51_ladder_1;
        _1781 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_787, _788, _789), _1688);
        _1777 = _1761.x * cbModelParam._m0[1u].z;
        _1779 = _1761.y * cbModelParam._m0[1u].z;
        _1781 = _1761.z * cbModelParam._m0[1u].z;
    }
    float _1794 = (((_812 * _764) + _813) * _779) * ((cbModelParam._m0[1u].w * (_1777 - _1679)) + _1679);
    float _1796 = (((_812 * _766) + _813) * _779) * ((cbModelParam._m0[1u].w * (_1779 - _1681)) + _1681);
    float _1798 = (((_812 * _767) + _813) * _779) * ((cbModelParam._m0[1u].w * (_1781 - _1683)) + _1683);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1794 * cbSceneParam._m0[91u].x));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1854 = _1841 / _1853;
    float _1855 = _1845 / _1853;
    float _1856 = _1849 / _1853;
    float _2003;
    float _2004;
    float _2005;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1883 = ((uint(_1856 > cbSceneParam._m0[59u].y) + uint(_1856 > cbSceneParam._m0[59u].x)) + uint(_1856 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1884 = _1883 + 43u;
        uint _1892 = _1883 + 44u;
        uint _1900 = _1883 + 45u;
        uint _1908 = _1883 + 46u;
        float _1919 = fma(_1853, cbSceneParam._m0[_1884].w, fma(_1849, cbSceneParam._m0[_1884].z, fma(_1845, cbSceneParam._m0[_1884].y, _1841 * cbSceneParam._m0[_1884].x)));
        float _1923 = fma(_1853, cbSceneParam._m0[_1892].w, fma(_1849, cbSceneParam._m0[_1892].z, fma(_1845, cbSceneParam._m0[_1892].y, _1841 * cbSceneParam._m0[_1892].x)));
        float _1931 = fma(_1853, cbSceneParam._m0[_1908].w, fma(_1849, cbSceneParam._m0[_1908].z, fma(_1845, cbSceneParam._m0[_1908].y, _1841 * cbSceneParam._m0[_1908].x)));
        float _1936 = cbSceneParam._m0[33u].z * _1931;
        float _1938 = cbSceneParam._m0[33u].w * _1931;
        float _1941 = fma(_1853, cbSceneParam._m0[_1900].w, fma(_1849, cbSceneParam._m0[_1900].z, fma(_1845, cbSceneParam._m0[_1900].y, _1841 * cbSceneParam._m0[_1900].x))) / _1931;
        float _1989 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
        float _4280 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1996 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1936 + _1919) / _1931, (_1938 + _1923) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 + _1919) / _1931, (_1923 - _1936) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1936) / _1931, (_1923 - _1938) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1938) / _1931, (_1936 + _1923) / _1931), _1941), 0.0)).x), vec4(0.25)));
        _2003 = 1.0 - (_1996 * cbSceneParam._m0[34u].x);
        _2004 = 1.0 - (_1996 * cbSceneParam._m0[34u].y);
        _2005 = 1.0 - (_1996 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2003 = 1.0;
        _2004 = 1.0;
        _2005 = 1.0;
    }
    float _2069;
    float _2071;
    float _2073;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2057 = fma(_1853, cbSceneParam._m0[63u].w, fma(_1849, cbSceneParam._m0[63u].z, fma(_1845, cbSceneParam._m0[63u].y, _1841 * cbSceneParam._m0[63u].x)));
        float _2058 = fma(_1853, cbSceneParam._m0[60u].w, fma(_1849, cbSceneParam._m0[60u].z, fma(_1845, cbSceneParam._m0[60u].y, _1841 * cbSceneParam._m0[60u].x))) / _2057;
        float _2059 = fma(_1853, cbSceneParam._m0[61u].w, fma(_1849, cbSceneParam._m0[61u].z, fma(_1845, cbSceneParam._m0[61u].y, _1841 * cbSceneParam._m0[61u].x))) / _2057;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_2058 >= cbSceneParam._m0[64u].x) && (_2059 >= cbSceneParam._m0[64u].y)) && (_2058 <= cbSceneParam._m0[64u].z)) && (_2059 <= cbSceneParam._m0[64u].w))
        {
            float _2197 = fma(_1853, cbSceneParam._m0[62u].w, fma(_1849, cbSceneParam._m0[62u].z, fma(_1845, cbSceneParam._m0[62u].y, _1841 * cbSceneParam._m0[62u].x))) / _2057;
            float _2201 = isnan(cbSceneParam._m0[41u].w) ? _2197 : (isnan(_2197) ? cbSceneParam._m0[41u].w : max(_2197, cbSceneParam._m0[41u].w));
            float _2244 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
            float _4296 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
            float _2251 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2058, cbSceneParam._m0[33u].w + _2059), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2058, _2059 - cbSceneParam._m0[33u].z), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].z, _2059 - cbSceneParam._m0[33u].w), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2059), _2201), 0.0)).x), vec4(0.25)));
            float _2255 = 1.0 - (_2251 * cbSceneParam._m0[34u].x);
            float _2256 = 1.0 - (_2251 * cbSceneParam._m0[34u].y);
            float _2257 = 1.0 - (_2251 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_2257) ? _2005 : (isnan(_2005) ? _2257 : min(_2005, _2257));
            frontier_phi_38_37_ladder_1 = isnan(_2256) ? _2004 : (isnan(_2004) ? _2256 : min(_2004, _2256));
            frontier_phi_38_37_ladder_2 = isnan(_2255) ? _2003 : (isnan(_2003) ? _2255 : min(_2003, _2255));
        }
        else
        {
            frontier_phi_38_37_ladder = _2005;
            frontier_phi_38_37_ladder_1 = _2004;
            frontier_phi_38_37_ladder_2 = _2003;
        }
        _2069 = frontier_phi_38_37_ladder_2;
        _2071 = frontier_phi_38_37_ladder_1;
        _2073 = frontier_phi_38_37_ladder;
    }
    else
    {
        _2069 = _2003;
        _2071 = _2004;
        _2073 = _2005;
    }
    uvec4 _2078 = floatBitsToUint(cbInstanceData._m0[_707 + 5u]);
    uint _2080 = _2078.x * 14u;
    uint _2081 = _2080 + 13u;
    float _2088 = _779 + (-1.0);
    float _2093 = (cbLight._m0[_2081].x * _2088) + 1.0;
    float _2094 = (cbLight._m0[_2081].y * _2088) + 1.0;
    float _2095 = (cbLight._m0[_2081].z * _2088) + 1.0;
    float _2096 = (cbLight._m0[_2081].w * _2088) + 1.0;
    uint _2097 = _2080 + 5u;
    float _2103 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2107 = _2080 + 4u;
    float _2116 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2120 = _2080 | 1u;
    float _2131 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_563, _564, _565));
    float _2134 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_563, _564, _565));
    float _4332 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _4343 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2139 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2141 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * 0.3183098733425140380859375;
    float _2148 = ((cbLight._m0[_2097].x * _2103) * _2141) + (((cbLight._m0[_2107].x * _2069) * _2116) * _2139);
    float _2149 = ((_2103 * cbLight._m0[_2097].y) * _2141) + (((cbLight._m0[_2107].y * _2071) * _2116) * _2139);
    float _2150 = ((_2103 * cbLight._m0[_2097].z) * _2141) + (((cbLight._m0[_2107].z * _2073) * _2116) * _2139);
    uvec4 _2154 = floatBitsToUint(cbLight._m0[_2080 + 12u]);
    bool _2156 = _2154.x == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2156)
    {
        _2258 = _2148;
        _2260 = _2149;
        _2262 = _2150;
    }
    else
    {
        uint _2266 = _2080 + 6u;
        float _2282 = (dot(vec3(cbLight._m0[_2080 + 2u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4354 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2285 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2258 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2148;
        _2260 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2149;
        _2262 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2150;
    }
    bool _2265 = _2154.y == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2265)
    {
        _2320 = _2258;
        _2322 = _2260;
        _2324 = _2262;
    }
    else
    {
        uint _2493 = _2080 + 7u;
        float _2509 = (dot(vec3(cbLight._m0[_2080 + 3u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2510 = _2509 * _2509;
        float _4370 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2511 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2512 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2320 = (((cbLight._m0[_2493].x * 0.3183098733425140380859375) * _2511) * _2512) + _2258;
        _2322 = (((cbLight._m0[_2493].y * 0.3183098733425140380859375) * _2511) * _2512) + _2260;
        _2324 = (((cbLight._m0[_2493].z * 0.3183098733425140380859375) * _2511) * _2512) + _2262;
    }
    uint _2327 = _2080 + 8u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _694) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2080].x + _644;
    float _2343 = cbLight._m0[_2080].y + _645;
    float _2344 = cbLight._m0[_2080].z + _646;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2080].xyz));
    float _4386 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _4397 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2356 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2357 = dot(vec3(_563, _564, _565), vec3(_2349, _2350, _2351));
    float _4408 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2349, _2350, _2351));
    float _4419 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2341 * _2341;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
    float _2378 = 0.959999978542327880859375 - _761;
    float _2380 = 0.959999978542327880859375 - _762;
    float _2381 = 0.959999978542327880859375 - _763;
    float _2388 = 1.0 - _2341;
    float _2399 = (0.5 / (((_2356 * ((_2355 * _2388) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2388) + _2341) * _2355))) * _2355;
    float _4430 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    uint _2415 = _2080 + 9u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _694) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2120].x + _644;
    float _2429 = cbLight._m0[_2120].y + _645;
    float _2430 = cbLight._m0[_2120].z + _646;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2120].xyz));
    float _4441 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2442 = dot(vec3(_563, _564, _565), vec3(_2435, _2436, _2437));
    float _4452 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2435, _2436, _2437));
    float _4463 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2427 * _2427;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
    float _2468 = 1.0 - _2427;
    float _2478 = (0.5 / (((_2356 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2468) + _2427) * _2441))) * _2441;
    float _4474 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    float _2490 = (((((_2461 * _2378) + _764) * cbLight._m0[_2415].x) * _2480) * _2103) + ((((cbLight._m0[_2327].x * _2069) * ((_2377 * _2378) + _764)) * _2401) * _2116);
    float _2491 = (((((_2461 * _2380) + _766) * cbLight._m0[_2415].y) * _2480) * _2103) + ((((cbLight._m0[_2327].y * _2071) * ((_2377 * _2380) + _766)) * _2401) * _2116);
    float _2492 = (((((_2461 * _2381) + _767) * cbLight._m0[_2415].z) * _2480) * _2103) + ((((cbLight._m0[_2327].z * _2073) * ((_2377 * _2381) + _767)) * _2401) * _2116);
    float _2548;
    float _2550;
    float _2552;
    if (_2156)
    {
        _2548 = _2490;
        _2550 = _2491;
        _2552 = _2492;
    }
    else
    {
        uint _2554 = _2080 + 2u;
        uint _2558 = _2080 + 10u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _694) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _644;
        float _2575 = cbLight._m0[_2554].y + _645;
        float _2576 = cbLight._m0[_2554].z + _646;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2554].xyz));
        float _4485 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2588 = dot(vec3(_563, _564, _565), vec3(_2581, _2582, _2583));
        float _4496 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4507 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
        float _2614 = 1.0 - _2573;
        float _2624 = (0.5 / (((_2356 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2614) + _2573) * _2587))) * _2587;
        float _4518 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2548 = (((((_2607 * _2378) + _764) * cbLight._m0[_2558].x) * _2626) * _2627) + _2490;
        _2550 = (((((_2607 * _2380) + _766) * cbLight._m0[_2558].y) * _2626) * _2627) + _2491;
        _2552 = (((((_2607 * _2381) + _767) * cbLight._m0[_2558].z) * _2626) * _2627) + _2492;
    }
    float _2658;
    float _2660;
    float _2662;
    if (_2265)
    {
        _2658 = _2548;
        _2660 = _2550;
        _2662 = _2552;
    }
    else
    {
        uint _2669 = _2080 + 3u;
        uint _2673 = _2080 + 11u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _694) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _644;
        float _2690 = cbLight._m0[_2669].y + _645;
        float _2691 = cbLight._m0[_2669].z + _646;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2669].xyz));
        float _4534 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2703 = dot(vec3(_563, _564, _565), vec3(_2696, _2697, _2698));
        float _4545 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4556 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2722 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
        float _2729 = 1.0 - _2688;
        float _2739 = (0.5 / (((_2356 * ((_2702 * _2729) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2729) + _2688) * _2702))) * _2702;
        float _4567 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2658 = (((((_2722 * _2378) + _764) * cbLight._m0[_2673].x) * _2741) * _2742) + _2548;
        _2660 = (((((_2722 * _2380) + _766) * cbLight._m0[_2673].y) * _2741) * _2742) + _2550;
        _2662 = (((((_2722 * _2381) + _767) * cbLight._m0[_2673].z) * _2741) * _2742) + _2552;
    }
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_2078.y == 0u)
    {
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _653) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _652) / _2764)));
        float _2785 = (log2(_1856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
        }
        else
        {
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            uint _3042 = 0u;
            uint _3051;
            bool _3052;
            for (;;)
            {
                _3051 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                _3052 = _3051 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_3052)
                {
                    frontier_phi_70_pred = _3041;
                    frontier_phi_70_pred_1 = _3040;
                    frontier_phi_70_pred_2 = _3039;
                    frontier_phi_70_pred_3 = _3037;
                    frontier_phi_70_pred_4 = _3036;
                    frontier_phi_70_pred_5 = _3038;
                }
                else
                {
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    uint _3166;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3051;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    for (;;)
                    {
                        uint _3170 = uint(findLSB(_3166)) + (_3042 << 5u);
                        uint _3167 = (_3166 + 4294967295u) & _3166;
                        uint _3172 = _3170 * 48u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3192 = (_3170 * 48u) + 4u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3211 = (_3170 * 48u) + 8u;
                        vec3 _3222 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x));
                        float _3226 = _3186.x - _1854;
                        float _3227 = _3186.y - _1855;
                        float _3228 = _3186.z - _1856;
                        float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                        float _3232 = inversesqrt(_3229);
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3236 = dot(vec3(_675, _678, _681), vec3(_3233, _3234, _3235));
                        float _3241 = 1.0 - (_3229 * _3186.w);
                        float _4593 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3243 = sqrt(_3229) * _3205.w;
                        float _3246 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3236) + _3247;
                        float _3253 = _3243 * _3243;
                        float _3257 = ((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3242) / ((_3253 * 0.699999988079071044921875) + 1.0);
                        float _3261 = (-0.0) - _1854;
                        float _3262 = (-0.0) - _1855;
                        float _3263 = (-0.0) - _1856;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3277 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                        float _3278 = 1.0 - _795;
                        float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                        float _3286 = _3285 * _3285;
                        float _3287 = _3286 * _3286;
                        float _3288 = _3268 + _3233;
                        float _3289 = _3269 + _3234;
                        float _3290 = _3270 + _3235;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3298 = dot(vec3(_675, _678, _681), vec3(_3268, _3269, _3270));
                        float _4609 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3302 = dot(vec3(_675, _678, _681), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                        float _4620 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                        float _3310 = _3246 * _3286;
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3236) + _3311;
                        float _4631 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3316 = 1.0 - _3286;
                        float _3326 = (0.5 / (((_3315 * ((_3301 * _3316) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3286) * _3301))) * _3315;
                        float _4642 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3337 = (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) / ((_3309 * _3309) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125))) * _3242;
                        _3095 = (_3257 * _3205.x) + _3163;
                        _3096 = (_3257 * _3205.y) + _3164;
                        _3097 = (_3257 * _3205.z) + _3165;
                        _3092 = (_3337 * _3222.x) + _3160;
                        _3093 = (_3337 * _3222.y) + _3161;
                        _3094 = (_3337 * _3222.z) + _3162;
                        if (_3167 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3167;
                        }
                    }
                    frontier_phi_70_pred = _3097;
                    frontier_phi_70_pred_1 = _3096;
                    frontier_phi_70_pred_2 = _3095;
                    frontier_phi_70_pred_3 = _3093;
                    frontier_phi_70_pred_4 = _3092;
                    frontier_phi_70_pred_5 = _3094;
                }
                _2903 = frontier_phi_70_pred;
                _2901 = frontier_phi_70_pred_1;
                _2899 = frontier_phi_70_pred_2;
                _2895 = frontier_phi_70_pred_3;
                _2893 = frontier_phi_70_pred_4;
                _2897 = frontier_phi_70_pred_5;
                uint _3043 = _3042 + 1u;
                if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3036 = _2893;
                    _3037 = _2895;
                    _3038 = _2897;
                    _3039 = _2899;
                    _3040 = _2901;
                    _3041 = _2903;
                    _3042 = _3043;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
        }
        uvec4 _2906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2907 = _2906.z;
        uint _2909 = (_2907 >> 8u) & 15u;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((4294967295u << _2909) & _2795) == 0u)
        {
            _3004 = _2892;
            _3006 = _2894;
            _3008 = _2896;
            _3010 = _2898;
            _3012 = _2900;
            _3014 = _2902;
        }
        else
        {
            float _3029 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
            float _3030 = _3029 * _1854;
            float _3031 = _3029 * _1855;
            float _3032 = _3029 * _1856;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2909 < ((_2907 >> 12u) & 15u))
            {
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3143 = _2892;
                float _3144 = _2894;
                float _3145 = _2896;
                float _3146 = _2898;
                float _3147 = _2900;
                float _3148 = _2902;
                uint _3149 = _2909;
                uint _3158;
                bool _3159;
                for (;;)
                {
                    _3158 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                    _3159 = _3158 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_3159)
                    {
                        frontier_phi_76_pred = _3143;
                        frontier_phi_76_pred_1 = _3148;
                        frontier_phi_76_pred_2 = _3147;
                        frontier_phi_76_pred_3 = _3146;
                        frontier_phi_76_pred_4 = _3145;
                        frontier_phi_76_pred_5 = _3144;
                    }
                    else
                    {
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3355 = _3143;
                        float _3356 = _3144;
                        float _3357 = _3145;
                        float _3358 = _3146;
                        float _3359 = _3147;
                        float _3360 = _3148;
                        uint _3361 = _3158;
                        uint _3362;
                        vec4 _3387;
                        float _3388;
                        vec4 _3403;
                        vec3 _3415;
                        vec4 _3430;
                        vec4 _3445;
                        float _3491;
                        bool _3492;
                        for (;;)
                        {
                            uint _3372 = ((_3149 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3361));
                            _3362 = (_3361 + 4294967295u) & _3361;
                            uint _3374 = _3372 * 40u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3388 = _3387.w;
                            uint _3390 = (_3372 * 40u) + 4u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3372 * 40u) + 8u;
                            _3415 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x));
                            uint _3417 = (_3372 * 40u) + 16u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3372 * 40u) + 20u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3372 * 40u) + 24u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3466 = (_3372 * 40u) + 28u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3491 = fma(_1856, _3479.z, fma(_1855, _3479.y, _3479.x * _1854)) + _3479.w;
                            _3492 = !((fma(_1856, _3460.z, fma(_1855, _3460.y, _3460.x * _1854)) + _3460.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3492)
                            {
                                float _3519 = _3387.x - _1854;
                                float _3520 = _3387.y - _1855;
                                float _3521 = _3387.z - _1856;
                                float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                                float _3525 = inversesqrt(_3522);
                                float _3526 = _3525 * _3519;
                                float _3527 = _3525 * _3520;
                                float _3528 = _3525 * _3521;
                                float _3532 = 1.0 - (_3522 / (_3388 * _3388));
                                float _4653 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3537 = sqrt(_3522) * _3403.w;
                                float _3539 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                                float _3540 = _3539 * _3539;
                                float _3543 = ((1.0 - _3540) * dot(vec3(_3526, _3527, _3528), vec3(_675, _678, _681))) + _3540;
                                float _3546 = _3537 * _3537;
                                float _3550 = (fma(_1856, _3430.z, fma(_1855, _3430.y, _3430.x * _1854)) + _3430.w) / _3491;
                                float _3551 = (fma(_1856, _3445.z, fma(_1855, _3445.y, _3445.x * _1854)) + _3445.w) / _3491;
                                float _3555 = 1.0 - dot(vec2(_3550, _3551), vec2(_3550, _3551));
                                float _4669 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3557 = _3556 * (((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3533) / ((_3546 * 0.699999988079071044921875) + 1.0));
                                float _3569 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                                float _3570 = 1.0 - _795;
                                float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                                float _3578 = _3577 * _3577;
                                float _3579 = _3578 * _3578;
                                float _3580 = _3526 - _3030;
                                float _3581 = _3527 - _3031;
                                float _3582 = _3528 - _3032;
                                float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                                float _3590 = dot(vec3(_675, _678, _681), vec3((-0.0) - _3030, (-0.0) - _3031, (-0.0) - _3032));
                                float _4680 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3594 = dot(vec3(_675, _678, _681), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                                float _4691 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                                float _3602 = _3539 * _3578;
                                float _3603 = _3602 * _3602;
                                float _3609 = ((1.0 - _3603) * dot(vec3(_675, _678, _681), vec3(_3526, _3527, _3528))) + _3603;
                                float _4702 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3611 = 1.0 - _3578;
                                float _3621 = (0.5 / (((_3610 * ((_3593 * _3611) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3578) * _3593))) * _3610;
                                float _4713 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3631 = (_3556 * _3533) * (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) / ((_3601 * _3601) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3631 * _3415.x;
                                frontier_phi_82_pred_1 = _3557 * _3403.z;
                                frontier_phi_82_pred_2 = _3557 * _3403.y;
                                frontier_phi_82_pred_3 = _3557 * _3403.x;
                                frontier_phi_82_pred_4 = _3631 * _3415.z;
                                frontier_phi_82_pred_5 = _3631 * _3415.y;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3635 = frontier_phi_82_pred;
                            _3640 = frontier_phi_82_pred_1;
                            _3639 = frontier_phi_82_pred_2;
                            _3638 = frontier_phi_82_pred_3;
                            _3637 = frontier_phi_82_pred_4;
                            _3636 = frontier_phi_82_pred_5;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            if (_3362 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3362;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3342;
                        frontier_phi_76_pred_1 = _3347;
                        frontier_phi_76_pred_2 = _3346;
                        frontier_phi_76_pred_3 = _3345;
                        frontier_phi_76_pred_4 = _3344;
                        frontier_phi_76_pred_5 = _3343;
                    }
                    _3005 = frontier_phi_76_pred;
                    _3015 = frontier_phi_76_pred_1;
                    _3013 = frontier_phi_76_pred_2;
                    _3011 = frontier_phi_76_pred_3;
                    _3009 = frontier_phi_76_pred_4;
                    _3007 = frontier_phi_76_pred_5;
                    uint _3150 = _3149 + 1u;
                    if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3143 = _3005;
                        _3144 = _3007;
                        _3145 = _3009;
                        _3146 = _3011;
                        _3147 = _3013;
                        _3148 = _3015;
                        _3149 = _3150;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _3015;
                frontier_phi_64_65_ladder_1 = _3013;
                frontier_phi_64_65_ladder_2 = _3011;
                frontier_phi_64_65_ladder_3 = _3009;
                frontier_phi_64_65_ladder_4 = _3007;
                frontier_phi_64_65_ladder_5 = _3005;
            }
            else
            {
                frontier_phi_64_65_ladder = _2902;
                frontier_phi_64_65_ladder_1 = _2900;
                frontier_phi_64_65_ladder_2 = _2898;
                frontier_phi_64_65_ladder_3 = _2896;
                frontier_phi_64_65_ladder_4 = _2894;
                frontier_phi_64_65_ladder_5 = _2892;
            }
            _3004 = frontier_phi_64_65_ladder_5;
            _3006 = frontier_phi_64_65_ladder_4;
            _3008 = frontier_phi_64_65_ladder_3;
            _3010 = frontier_phi_64_65_ladder_2;
            _3012 = frontier_phi_64_65_ladder_1;
            _3014 = frontier_phi_64_65_ladder;
        }
        float _3019 = isnan(1.0) ? _779 : (isnan(_779) ? 1.0 : min(_779, 1.0));
        _2807 = (_3019 * _3010) + _2320;
        _2809 = (_3019 * _3012) + _2322;
        _2811 = (_3019 * _3014) + _2324;
        _2813 = ((_3004 * _764) * _3019) + _2658;
        _2815 = ((_3006 * _766) * _3019) + _2660;
        _2817 = ((_3008 * _767) * _3019) + _2662;
    }
    else
    {
        _2807 = _2320;
        _2809 = _2322;
        _2811 = _2324;
        _2813 = _2658;
        _2815 = _2660;
        _2817 = _2662;
    }
    vec4 _2823 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4729 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4740 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4751 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2847 = (((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2807 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _779))) + ((_2813 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1588)) * cbPerFrame._m0[3u].x)) + (_2823.x * cbMtdParam._m0[3u].x);
    float _2849 = ((_2823.y * cbMtdParam._m0[3u].x) + ((_2815 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1588)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2809 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _779)));
    float _2851 = ((_2823.z * cbMtdParam._m0[3u].x) + ((_2817 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1588)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2811 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _779)));
    uint _2855 = _707 + 6u;
    float _2863 = _652 / cbSceneParam._m0[86u].x;
    float _2864 = _653 / cbSceneParam._m0[86u].y;
    vec4 _2878 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2863, _2864, (log2((isnan(cbSceneParam._m0[77u].w) ? _586 : (isnan(_586) ? cbSceneParam._m0[77u].w : min(_586, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2880 = _2878.x;
    float _2881 = _2878.y;
    float _2882 = _2878.z;
    float _2883 = _2878.w;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_586 > cbSceneParam._m0[78u].w)
    {
        float _2917 = isnan(_586) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _586 : min(cbSceneParam._m0[80u].w, _586));
        float _2918 = _2917 / _586;
        float _2929 = _2918 * _637;
        float _2930 = _638 * _2918;
        float _2931 = (-0.0) - _2930;
        float _2932 = _2918 * _639;
        float _2934 = (cbSceneParam._m0[77u].w * _2931) / _2917;
        float _2935 = _2934 + cbSceneParam._m0[79u].w;
        float _2936 = cbSceneParam._m0[79u].w - _2930;
        float _2942 = sqrt(((_2929 * _2929) + (_2930 * _2930)) + (_2932 * _2932));
        float _2945 = (1.0 - (cbSceneParam._m0[77u].w / _2917)) * _2942;
        float _2950 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2952 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3105;
        if (abs((_2931 - _2934) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3105 = ((((_2935 > 0.0) ? exp2(_2950 * _2935) : (2.0 - exp2(_2952 * _2935))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2945;
        }
        else
        {
            float _3065 = 1.0 / cbSceneParam._m0[80u].x;
            float _3066 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : max(_2935, _2936));
            float _3067 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : min(_2935, _2936));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            _3105 = ((abs(_2942 / _2931) * cbSceneParam._m0[80u].y) * ((((_3076 - _3077) * 2.0) - ((exp2(_2950 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0)))) - exp2(_2950 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))))) * _3065)) - ((exp2(_2952 * _3076) - exp2(_2952 * _3077)) * _3065))) + (_2945 * cbSceneParam._m0[80u].z);
        }
        vec4 _3107 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2863, _2864, 1.0), 0.0);
        float _3116 = exp2((_3105 * (-1.44269502162933349609375)) * (1.0 - _3107.w));
        float _3117 = log2(_3116);
        float _3133 = log2(_2883);
        _2954 = (exp2(_3133 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].x)) * _3107.x) / cbSceneParam._m0[78u].x)) + _2880;
        _2956 = (exp2(_3133 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].y)) * _3107.y) / cbSceneParam._m0[78u].y)) + _2881;
        _2958 = (exp2(_3133 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].z)) * _3107.z) / cbSceneParam._m0[78u].z)) + _2882;
        _2960 = _3116 * _2883;
    }
    else
    {
        _2954 = _2880;
        _2956 = _2881;
        _2958 = _2882;
        _2960 = _2883;
    }
    float _2972 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2973 = _2972 == 3.0;
    float _2974 = log2(_2960);
    float _2981 = exp2(_2974 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)));
    float _2982 = exp2(_2974 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)));
    float _2983 = exp2(_2974 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0)));
    float _2992 = (_2972 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2992 * (_2973 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2954)));
    SV_Target.y = _2992 * (_2973 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.z = _2992 * (_2973 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2958)));
    SV_Target.w = cbInstanceData._m0[_2855].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2855].w;
}


