#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1192;
float _3592;
float _3593;
float _3594;
float _3595;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _265 = log2(0.0);
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[14u].x;
    _192[0u] = cbMtdParam._m0[14u].y;
    _193[0u] = cbMtdParam._m0[14u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[16u].x;
    _192[2u] = cbMtdParam._m0[16u].y;
    _193[2u] = cbMtdParam._m0[16u].z;
    _191[3u] = cbMtdParam._m0[11u].x;
    _192[3u] = cbMtdParam._m0[11u].y;
    _193[3u] = cbMtdParam._m0[11u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[13u].x;
    _192[5u] = cbMtdParam._m0[13u].y;
    _193[5u] = cbMtdParam._m0[13u].z;
    vec4 _337 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _341 = _337.y;
    float _344 = (_337.x + (-0.02500000037252902984619140625)) * 8.0;
    float _346 = roundEven(_344);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    uint _350 = uint(int(isnan(5.0) ? _347 : (isnan(_347) ? 5.0 : min(_347, 5.0))));
    float _367 = roundEven(5.0 - _344);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(4.0) ? _368 : (isnan(_368) ? 4.0 : min(_368, 4.0));
    float _375;
    float _377;
    if (exp2(_265 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _375 = cbMtdParam._m0[26u].x;
        _377 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _375 = cbMtdParam._m0[22u].x;
        _377 = cbMtdParam._m0[22u].y;
    }
    float _379 = _375 * TEXCOORD.x;
    float _380 = _377 * TEXCOORD.y;
    float _391 = floor(_369);
    vec4 _394 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _379) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _380) + cbTextureTilingScale._m0[6u].w, _391));
    vec4 _416 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _424 = ((((((_191[_350] - cbMtdParam._m0[18u].x) * _341) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _394.x) * cbMtdParam._m0[9u].x) * _416.x;
    float _428 = ((((((_192[_350] - cbMtdParam._m0[18u].y) * _341) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _394.y) * cbMtdParam._m0[9u].y) * _416.y;
    float _432 = ((((((_193[_350] - cbMtdParam._m0[18u].z) * _341) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _394.z) * cbMtdParam._m0[9u].z) * _416.z;
    vec4 _444 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _448 = _444.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[22u].z;
    _187[0u] = cbMtdParam._m0[22u].w;
    _186[1u] = cbMtdParam._m0[23u].z;
    _187[1u] = cbMtdParam._m0[23u].w;
    _186[2u] = cbMtdParam._m0[24u].x;
    _187[2u] = cbMtdParam._m0[24u].y;
    _186[3u] = cbMtdParam._m0[24u].z;
    _187[3u] = cbMtdParam._m0[24u].w;
    _186[4u] = cbMtdParam._m0[23u].x;
    _187[4u] = cbMtdParam._m0[23u].y;
    float _492 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _494 = uint(int(isnan(4.0) ? _492 : (isnan(_492) ? 4.0 : min(_492, 4.0))));
    float _499 = _187[_494] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _379) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _380) + cbTextureTilingScale._m0[8u].w, _391)).x;
    vec4 _518 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _379) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _380) + cbTextureTilingScale._m0[7u].w, _391));
    float _525 = (_518.x * 2.0) + (-1.0);
    float _526 = (_518.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3634 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))));
    float _542 = (cbMtdParam._m0[20u].x * (((_448 * 2.0) * (_518.z + _186[_494])) - _448)) + _448;
    float _546 = (cbMtdParam._m0[20u].y * ((_444.x * 2.0) + (-1.0))) + _525;
    float _547 = (cbMtdParam._m0[20u].y * ((_444.y * 2.0) + (-1.0))) + _526;
    float _550 = fma(_533, _243, fma(_547, _235 * TANGENT.x, (_221 * _213) * _546));
    float _553 = fma(_533, _244, fma(_547, _235 * TANGENT.y, (_221 * _214) * _546));
    float _556 = fma(_533, _245, fma(_547, _235 * TANGENT.z, (_221 * _215) * _546));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _3645 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _564 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3667 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3678 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3689 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _568 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _584 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _635 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _625);
    float _636 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _625);
    float _637 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _625);
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    float _642 = _635 * _641;
    float _643 = _636 * _641;
    float _644 = _637 * _641;
    vec4 _649 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _651 = _649.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _872 = sqrt(((_635 * _635) + (_636 * _636)) + (_637 * _637));
        float _878 = (cbMatDynParam._m0[5u].x * _872) + cbMatDynParam._m0[5u].y;
        float _3700 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _883 = (cbMatDynParam._m0[5u].z * _872) + cbMatDynParam._m0[5u].w;
        float _3711 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) - _879)) + _879) < ((_651 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _667 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _669 = _667.w;
    float _687 = fma(_563, cbSceneParam._m0[5u].z, fma(_562, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _561));
    float _690 = fma(_563, cbSceneParam._m0[6u].z, fma(_562, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _561));
    float _693 = fma(_563, cbSceneParam._m0[7u].z, fma(_562, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _561));
    vec4 _695 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _706 = (((_695.y - _564) + (_695.w * _564)) * cbMtdParam._m0[3u].x) + _564;
    uint _719 = uint(roundEven(NORMAL.w)) * 13u;
    uint _720 = _719 + 9u;
    uint _721 = _720 + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_721].z;
    float _3722 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    vec4 _733 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _738 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _749 = (((_738.x - _568) + (_738.w * _568)) * cbMtdParam._m0[3u].x) + _568;
    float _762 = (cbMtdParam._m0[3u].x * (((_730 * _669) - _730) + _733.x)) + _730;
    float _763 = (cbMtdParam._m0[3u].x * (((_731 * _669) - _731) + _733.y)) + _731;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _669) - _732) + _733.z)) + _732;
    float _765 = 1.0 - _749;
    float _766 = _765 * _762;
    float _767 = _765 * _763;
    float _768 = _765 * _764;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _749;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _749;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _749;
    float _776 = _773 + 0.039999999105930328369140625;
    float _778 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    vec4 _788 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _791 = _788.x * TEXCOORD_4;
    float _792 = dot(vec3(_561, _562, _563), vec3(_642, _643, _644));
    float _795 = _792 * 2.0;
    float _799 = (_795 * _561) - _642;
    float _800 = (_795 * _562) - _643;
    float _801 = (_795 * _563) - _644;
    float _805 = abs(dot(vec3(_642, _643, _644), vec3(_561, _562, _563)));
    float _3755 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _807 = sqrt(_706);
    float _818 = exp2((_807 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_807 * 3.0));
    float _824 = (1.0 - _818) * ((_807 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _825 = _818 * _807;
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1191;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _916 = fma(_861, cbModelParam._m0[26u].z, fma(_857, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853));
        float _920 = fma(_861, cbModelParam._m0[27u].z, fma(_857, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853));
        float _924 = fma(_861, cbModelParam._m0[28u].z, fma(_857, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853));
        float _949 = _853 + _561;
        float _950 = _857 + _562;
        float _951 = _861 + _563;
        float _961 = fma(_951, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949)) - _916;
        float _962 = fma(_951, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949)) - _920;
        float _963 = fma(_951, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949)) - _924;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_916 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_920 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[34u].z) + ((((((_924 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1019 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_985.x + (-0.5));
        float _1021 = _1019 * (_985.y + (-0.5));
        float _1022 = _1019 * (_985.z + (-0.5));
        float _1029 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_992.x + (-0.5));
        float _1031 = _1029 * (_992.y + (-0.5));
        float _1032 = _1029 * (_992.z + (-0.5));
        float _1039 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_999.x + (-0.5));
        float _1041 = _1039 * (_999.y + (-0.5));
        float _1042 = _1039 * (_999.z + (-0.5));
        float _1049 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1006.x + (-0.5));
        float _1051 = _1049 * (_1006.y + (-0.5));
        float _1052 = _1049 * (_1006.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1073 = (dot(vec3(_561, _562, _563), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1083 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3803 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1085 + 1.0))) + _1090) * _1053;
        float _1100 = _1021 * 0.5;
        float _1101 = _1031 * 0.5;
        float _1102 = _1041 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_561, _562, _563), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3836 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1127 + 1.0))) + _1132) * _1054;
        float _1142 = _1022 * 0.5;
        float _1143 = _1032 * 0.5;
        float _1144 = _1042 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_561, _562, _563), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3869 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1169 + 1.0))) + _1174) * _1055;
        _1191 = _1022;
        _1193 = _1021;
        _1194 = _1020;
        _1195 = _1032;
        _1196 = _1031;
        _1197 = _1030;
        _1198 = _1042;
        _1199 = _1041;
        _1200 = _1040;
        _1201 = _1055;
        _1202 = _1054;
        _1203 = _1053;
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _1192;
        _1193 = _1192;
        _1194 = _1192;
        _1195 = _1192;
        _1196 = _1192;
        _1197 = _1192;
        _1198 = _1192;
        _1199 = _1192;
        _1200 = _1192;
        _1201 = _1192;
        _1202 = _1192;
        _1203 = _1192;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1235 = fma(_861, cbModelParam._m0[30u].z, fma(_857, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853));
        float _1239 = fma(_861, cbModelParam._m0[31u].z, fma(_857, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853));
        float _1243 = fma(_861, cbModelParam._m0[32u].z, fma(_857, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853));
        float _1266 = _853 + _561;
        float _1267 = _857 + _562;
        float _1268 = _861 + _563;
        float _1278 = fma(_1268, cbModelParam._m0[30u].z, fma(_1267, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1266)) - _1235;
        float _1279 = fma(_1268, cbModelParam._m0[31u].z, fma(_1267, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1266)) - _1239;
        float _1280 = fma(_1268, cbModelParam._m0[32u].z, fma(_1267, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1266)) - _1243;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1235 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1239 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[35u].z) + ((((((_1243 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1334 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1301.x + (-0.5));
        float _1336 = _1334 * (_1301.y + (-0.5));
        float _1337 = _1334 * (_1301.z + (-0.5));
        float _1344 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1308.x + (-0.5));
        float _1346 = _1344 * (_1308.y + (-0.5));
        float _1347 = _1344 * (_1308.z + (-0.5));
        float _1354 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1315.x + (-0.5));
        float _1356 = _1354 * (_1315.y + (-0.5));
        float _1357 = _1354 * (_1315.z + (-0.5));
        float _1364 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1322.x + (-0.5));
        float _1366 = _1364 * (_1322.y + (-0.5));
        float _1367 = _1364 * (_1322.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_561, _562, _563), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3932 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1398 + 1.0))) + _1403) * _1368;
        float _1413 = _1336 * 0.5;
        float _1414 = _1346 * 0.5;
        float _1415 = _1356 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_561, _562, _563), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3965 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1440 + 1.0))) + _1445) * _1369;
        float _1455 = _1337 * 0.5;
        float _1456 = _1347 * 0.5;
        float _1457 = _1357 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_561, _562, _563), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _3998 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1482 + 1.0))) + _1487) * _1370;
        _1504 = _1337;
        _1505 = _1336;
        _1506 = _1335;
        _1507 = _1347;
        _1508 = _1346;
        _1509 = _1345;
        _1510 = _1357;
        _1511 = _1356;
        _1512 = _1355;
        _1513 = _1370;
        _1514 = _1369;
        _1515 = _1368;
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
    }
    else
    {
        _1504 = _1192;
        _1505 = _1192;
        _1506 = _1192;
        _1507 = _1192;
        _1508 = _1192;
        _1509 = _1192;
        _1510 = _1192;
        _1511 = _1192;
        _1512 = _1192;
        _1513 = _1192;
        _1514 = _1192;
        _1515 = _1192;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1204)) + _1204;
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1205)) + _1205;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1206)) + _1206;
    float _1551 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1554 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1557 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1528));
    float _1572 = _799 * 0.5;
    float _1573 = _800 * 0.5;
    float _1574 = _801 * 0.5;
    float _1575 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1578 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1581 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1615;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1588 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1191, _1195, _1198, _1201));
        float _1592 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1596 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1603 = dot(vec4(cbModelParam._m0[39u]), vec4(_1572, _1573, _1574, 1.0));
        _1615 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1615 = 1.0;
    }
    float _1626;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1617 = dot(vec4(cbModelParam._m0[40u]), vec4(_1572, _1573, _1574, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1630 = (_1626 * cbModelParam._m0[1u].x) + (_1615 * (1.0 - cbModelParam._m0[1u].x));
    float _1640 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _706);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1640 : min(cbModelParam._m0[25u].z, _1640));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1688 = fma(_861, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853)) + cbModelParam._m0[13u].w;
        float _1692 = fma(_861, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853)) + cbModelParam._m0[14u].w;
        float _1696 = fma(_861, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853)) + cbModelParam._m0[15u].w;
        float _1699 = fma(_801, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799));
        float _1702 = fma(_801, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799));
        float _1705 = fma(_801, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799));
        float _1733;
        if (_1699 > 0.0)
        {
            _1733 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1733 = frontier_phi_21_19_ladder;
        }
        float _1935;
        if (_1702 > 0.0)
        {
            _1935 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1935 = frontier_phi_30_26_ladder;
        }
        float _2189;
        if (_1705 > 0.0)
        {
            _2189 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2189 = frontier_phi_42_37_ladder;
        }
        float _2191 = isnan(_1935) ? _1733 : (isnan(_1733) ? _1935 : min(_1733, _1935));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1699) + _1688;
        float _2197 = (_2192 * _1702) + _1692;
        float _2198 = (_2192 * _1705) + _1696;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2199;
        float _2203 = _2199 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 > _2203) || ((_2197 < _2201) || ((_2196 < _2201) || (_2196 > _2203))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2198, cbModelParam._m0[9u].z, fma(_2197, cbModelParam._m0[9u].y, _2196 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2198, cbModelParam._m0[10u].z, fma(_2197, cbModelParam._m0[10u].y, _2196 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2198, cbModelParam._m0[11u].z, fma(_2197, cbModelParam._m0[11u].y, _2196 * cbModelParam._m0[11u].x))), _1641);
            frontier_phi_20_42_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1721 = frontier_phi_20_42_ladder_2;
        _1723 = frontier_phi_20_42_ladder_1;
        _1725 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_799, _800, _801), _1641);
        _1721 = _1709.x * cbModelParam._m0[1u].y;
        _1723 = _1709.y * cbModelParam._m0[1u].y;
        _1725 = _1709.z * cbModelParam._m0[1u].y;
    }
    float _1729 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _706);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1729 : min(cbModelParam._m0[25u].w, _1729));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1783 = fma(_861, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853)) + cbModelParam._m0[21u].w;
        float _1787 = fma(_861, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853)) + cbModelParam._m0[22u].w;
        float _1791 = fma(_861, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853)) + cbModelParam._m0[23u].w;
        float _1794 = fma(_801, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799));
        float _1797 = fma(_801, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799));
        float _1800 = fma(_801, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799));
        float _1940;
        if (_1794 > 0.0)
        {
            _1940 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1940 = frontier_phi_32_28_ladder;
        }
        float _2216;
        if (_1797 > 0.0)
        {
            _2216 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2216 = frontier_phi_44_39_ladder;
        }
        float _2429;
        if (_1800 > 0.0)
        {
            _2429 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2429 = frontier_phi_53_50_ladder;
        }
        float _2431 = isnan(_2216) ? _1940 : (isnan(_1940) ? _2216 : min(_1940, _2216));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1794) + _1783;
        float _2437 = (_2432 * _1797) + _1787;
        float _2438 = (_2432 * _1800) + _1791;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2438, cbModelParam._m0[17u].z, fma(_2437, cbModelParam._m0[17u].y, _2436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2438, cbModelParam._m0[18u].z, fma(_2437, cbModelParam._m0[18u].y, _2436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2438, cbModelParam._m0[19u].z, fma(_2437, cbModelParam._m0[19u].y, _2436 * cbModelParam._m0[19u].x))), _1730);
            frontier_phi_29_53_ladder = _2654.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2654.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2654.x * cbModelParam._m0[1u].z;
        }
        _1819 = frontier_phi_29_53_ladder_2;
        _1821 = frontier_phi_29_53_ladder_1;
        _1823 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_799, _800, _801), _1730);
        _1819 = _1803.x * cbModelParam._m0[1u].z;
        _1821 = _1803.y * cbModelParam._m0[1u].z;
        _1823 = _1803.z * cbModelParam._m0[1u].z;
    }
    float _1836 = (((_824 * _776) + _825) * _791) * ((cbModelParam._m0[1u].w * (_1819 - _1721)) + _1721);
    float _1838 = (((_824 * _778) + _825) * _791) * ((cbModelParam._m0[1u].w * (_1821 - _1723)) + _1723);
    float _1840 = (((_824 * _779) + _825) * _791) * ((cbModelParam._m0[1u].w * (_1823 - _1725)) + _1725);
    float _1843 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, _1836 * cbSceneParam._m0[91u].x));
    uvec4 _1859 = floatBitsToUint(cbInstanceData._m0[_719 + 5u]);
    uint _1861 = _1859.x * 14u;
    uint _1862 = _1861 + 13u;
    float _1869 = _791 + (-1.0);
    float _1874 = (cbLight._m0[_1862].x * _1869) + 1.0;
    float _1875 = (cbLight._m0[_1862].y * _1869) + 1.0;
    float _1876 = (cbLight._m0[_1862].z * _1869) + 1.0;
    float _1877 = (cbLight._m0[_1862].w * _1869) + 1.0;
    uint _1878 = _1861 + 5u;
    float _1884 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1888 = _1861 + 4u;
    float _1894 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1898 = _1861 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_561, _562, _563));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_561, _562, _563));
    float _4134 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4145 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1878].x * _1884) * _1919) + ((cbLight._m0[_1888].x * _1894) * _1917);
    float _1927 = ((_1884 * cbLight._m0[_1878].y) * _1919) + ((_1894 * cbLight._m0[_1888].y) * _1917);
    float _1928 = ((_1884 * cbLight._m0[_1878].z) * _1919) + ((_1894 * cbLight._m0[_1888].z) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1861 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1934)
    {
        _1945 = _1926;
        _1947 = _1927;
        _1949 = _1928;
    }
    else
    {
        uint _1953 = _1861 + 6u;
        float _1969 = (dot(vec3(cbLight._m0[_1861 + 2u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _4156 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1972 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1945 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1926;
        _1947 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1927;
        _1949 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1928;
    }
    bool _1952 = _1932.y == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1952)
    {
        _1990 = _1945;
        _1992 = _1947;
        _1994 = _1949;
    }
    else
    {
        uint _2160 = _1861 + 7u;
        float _2176 = (dot(vec3(cbLight._m0[_1861 + 3u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4172 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2179 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1990 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _1945;
        _1992 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _1947;
        _1994 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _1949;
    }
    uint _1997 = _1861 + 8u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _706) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1861].x + _642;
    float _2013 = cbLight._m0[_1861].y + _643;
    float _2014 = cbLight._m0[_1861].z + _644;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1861].xyz));
    float _4188 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2026 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2027 = dot(vec3(_561, _562, _563), vec3(_2019, _2020, _2021));
    float _4210 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2019, _2020, _2021));
    float _4221 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2011 * _2011;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2047 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
    float _2048 = 0.959999978542327880859375 - _773;
    float _2050 = 0.959999978542327880859375 - _774;
    float _2051 = 0.959999978542327880859375 - _775;
    float _2058 = 1.0 - _2011;
    float _2069 = (0.5 / (((_2026 * ((_2025 * _2058) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2058) + _2011) * _2025))) * _2025;
    float _4232 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    uint _2082 = _1861 + 9u;
    float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _706) * 0.949999988079071044921875);
    float _2094 = _2093 * _2093;
    float _2095 = cbLight._m0[_1898].x + _642;
    float _2096 = cbLight._m0[_1898].y + _643;
    float _2097 = cbLight._m0[_1898].z + _644;
    float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
    float _2102 = _2101 * _2095;
    float _2103 = _2101 * _2096;
    float _2104 = _2101 * _2097;
    float _2105 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1898].xyz));
    float _4243 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2109 = dot(vec3(_561, _562, _563), vec3(_2102, _2103, _2104));
    float _4254 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2113 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2102, _2103, _2104));
    float _4265 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2117 = _2094 * _2094;
    float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
    float _2135 = 1.0 - _2094;
    float _2145 = (0.5 / (((_2026 * ((_2108 * _2135) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2135) + _2094) * _2108))) * _2108;
    float _4276 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
    float _2157 = (((((_2128 * _2048) + _776) * cbLight._m0[_2082].x) * _2147) * _1884) + (((((_2047 * _2048) + _776) * cbLight._m0[_1997].x) * _2071) * _1894);
    float _2158 = (((((_2128 * _2050) + _778) * cbLight._m0[_2082].y) * _2147) * _1884) + (((((_2047 * _2050) + _778) * cbLight._m0[_1997].y) * _2071) * _1894);
    float _2159 = (((((_2128 * _2051) + _779) * cbLight._m0[_2082].z) * _2147) * _1884) + (((((_2047 * _2051) + _779) * cbLight._m0[_1997].z) * _2071) * _1894);
    float _2221;
    float _2223;
    float _2225;
    if (_1934)
    {
        _2221 = _2157;
        _2223 = _2158;
        _2225 = _2159;
    }
    else
    {
        uint _2227 = _1861 + 2u;
        uint _2231 = _1861 + 10u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _706) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _642;
        float _2248 = cbLight._m0[_2227].y + _643;
        float _2249 = cbLight._m0[_2227].z + _644;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2227].xyz));
        float _4287 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2261 = dot(vec3(_561, _562, _563), vec3(_2254, _2255, _2256));
        float _4298 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4309 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
        float _2287 = 1.0 - _2246;
        float _2297 = (0.5 / (((_2026 * ((_2260 * _2287) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2287) + _2246) * _2260))) * _2260;
        float _4320 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2299 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2300 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2221 = (((((_2280 * _2048) + _776) * cbLight._m0[_2231].x) * _2299) * _2300) + _2157;
        _2223 = (((((_2280 * _2050) + _778) * cbLight._m0[_2231].y) * _2299) * _2300) + _2158;
        _2225 = (((((_2280 * _2051) + _779) * cbLight._m0[_2231].z) * _2299) * _2300) + _2159;
    }
    float _2335;
    float _2337;
    float _2339;
    if (_1952)
    {
        _2335 = _2221;
        _2337 = _2223;
        _2339 = _2225;
    }
    else
    {
        uint _2346 = _1861 + 3u;
        uint _2350 = _1861 + 11u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _706) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _642;
        float _2367 = cbLight._m0[_2346].y + _643;
        float _2368 = cbLight._m0[_2346].z + _644;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2346].xyz));
        float _4336 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2380 = dot(vec3(_561, _562, _563), vec3(_2373, _2374, _2375));
        float _4347 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4358 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
        float _2406 = 1.0 - _2365;
        float _2416 = (0.5 / (((_2026 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2406) + _2365) * _2379))) * _2379;
        float _4369 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2335 = (((((_2399 * _2048) + _776) * cbLight._m0[_2350].x) * _2418) * _2419) + _2221;
        _2337 = (((((_2399 * _2050) + _778) * cbLight._m0[_2350].y) * _2418) * _2419) + _2223;
        _2339 = (((((_2399 * _2051) + _779) * cbLight._m0[_2350].z) * _2418) * _2419) + _2225;
    }
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_1859.y == 0u)
    {
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2494;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2494;
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2494;
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2510)));
        float _2531 = (log2(_2497 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
        }
        else
        {
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            uint _2817 = 0u;
            uint _2826;
            bool _2827;
            for (;;)
            {
                _2826 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                _2827 = _2826 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2827)
                {
                    frontier_phi_70_pred = _2811;
                    frontier_phi_70_pred_1 = _2816;
                    frontier_phi_70_pred_2 = _2815;
                    frontier_phi_70_pred_3 = _2814;
                    frontier_phi_70_pred_4 = _2813;
                    frontier_phi_70_pred_5 = _2812;
                }
                else
                {
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    uint _2962;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2826;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    for (;;)
                    {
                        uint _2966 = uint(findLSB(_2962)) + (_2817 << 5u);
                        uint _2963 = (_2962 + 4294967295u) & _2962;
                        uint _2968 = _2966 * 48u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2988 = (_2966 * 48u) + 4u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3007 = (_2966 * 48u) + 8u;
                        vec3 _3018 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x));
                        float _3022 = _2982.x - _2495;
                        float _3023 = _2982.y - _2496;
                        float _3024 = _2982.z - _2497;
                        float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                        float _3028 = inversesqrt(_3025);
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3032 = dot(vec3(_687, _690, _693), vec3(_3029, _3030, _3031));
                        float _3037 = 1.0 - (_3025 * _2982.w);
                        float _4395 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3039 = sqrt(_3025) * _3001.w;
                        float _3042 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _3032) + _3043;
                        float _3049 = _3039 * _3039;
                        float _3053 = ((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3038) / ((_3049 * 0.699999988079071044921875) + 1.0);
                        float _3057 = (-0.0) - _2495;
                        float _3058 = (-0.0) - _2496;
                        float _3059 = (-0.0) - _2497;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3074 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                        float _3075 = 1.0 - _807;
                        float _3082 = sqrt(1.0 - ((1.0 - (_3075 * _3075)) * (1.0 - (_3074 * _3074))));
                        float _3083 = _3082 * _3082;
                        float _3084 = _3083 * _3083;
                        float _3085 = _3064 + _3029;
                        float _3086 = _3065 + _3030;
                        float _3087 = _3066 + _3031;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3095 = dot(vec3(_687, _690, _693), vec3(_3064, _3065, _3066));
                        float _4411 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3099 = dot(vec3(_687, _690, _693), vec3(_3091 * _3085, _3091 * _3086, _3091 * _3087));
                        float _4422 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3102 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3106 = ((_3102 * _3102) * (_3084 + (-1.0))) + 1.0;
                        float _3107 = _3042 * _3083;
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3032) + _3108;
                        float _4433 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3113 = 1.0 - _3083;
                        float _3123 = (0.5 / (((_3112 * ((_3098 * _3113) + _3083)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3083) * _3098))) * _3112;
                        float _4444 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3134 = (((_3084 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3106 * _3106) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125))) * _3038;
                        _2886 = (_3053 * _3001.x) + _2959;
                        _2887 = (_3053 * _3001.y) + _2960;
                        _2888 = (_3053 * _3001.z) + _2961;
                        _2883 = (_3134 * _3018.x) + _2956;
                        _2884 = (_3134 * _3018.y) + _2957;
                        _2885 = (_3134 * _3018.z) + _2958;
                        if (_2963 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2963;
                        }
                    }
                    frontier_phi_70_pred = _2883;
                    frontier_phi_70_pred_1 = _2888;
                    frontier_phi_70_pred_2 = _2887;
                    frontier_phi_70_pred_3 = _2886;
                    frontier_phi_70_pred_4 = _2885;
                    frontier_phi_70_pred_5 = _2884;
                }
                _2660 = frontier_phi_70_pred;
                _2670 = frontier_phi_70_pred_1;
                _2668 = frontier_phi_70_pred_2;
                _2666 = frontier_phi_70_pred_3;
                _2664 = frontier_phi_70_pred_4;
                _2662 = frontier_phi_70_pred_5;
                uint _2818 = _2817 + 1u;
                if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2811 = _2660;
                    _2812 = _2662;
                    _2813 = _2664;
                    _2814 = _2666;
                    _2815 = _2668;
                    _2816 = _2670;
                    _2817 = _2818;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
        }
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.z;
        uint _2676 = (_2674 >> 8u) & 15u;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((4294967295u << _2676) & _2541) == 0u)
        {
            _2779 = _2659;
            _2781 = _2661;
            _2783 = _2663;
            _2785 = _2665;
            _2787 = _2667;
            _2789 = _2669;
        }
        else
        {
            float _2804 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
            float _2805 = _2804 * _2495;
            float _2806 = _2804 * _2496;
            float _2807 = _2804 * _2497;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2676 < ((_2674 >> 12u) & 15u))
            {
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2939 = _2659;
                float _2940 = _2661;
                float _2941 = _2663;
                float _2942 = _2665;
                float _2943 = _2667;
                float _2944 = _2669;
                uint _2945 = _2676;
                uint _2954;
                bool _2955;
                for (;;)
                {
                    _2954 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                    _2955 = _2954 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2955)
                    {
                        frontier_phi_81_pred = _2944;
                        frontier_phi_81_pred_1 = _2943;
                        frontier_phi_81_pred_2 = _2942;
                        frontier_phi_81_pred_3 = _2941;
                        frontier_phi_81_pred_4 = _2940;
                        frontier_phi_81_pred_5 = _2939;
                    }
                    else
                    {
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        float _3163 = _2941;
                        float _3164 = _2942;
                        float _3165 = _2943;
                        float _3166 = _2944;
                        uint _3167 = _2954;
                        uint _3168;
                        vec4 _3193;
                        float _3194;
                        vec4 _3209;
                        vec3 _3221;
                        vec4 _3236;
                        vec4 _3251;
                        float _3297;
                        bool _3298;
                        for (;;)
                        {
                            uint _3178 = ((_2945 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3167));
                            _3168 = (_3167 + 4294967295u) & _3167;
                            uint _3180 = _3178 * 40u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3194 = _3193.w;
                            uint _3196 = (_3178 * 40u) + 4u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3178 * 40u) + 8u;
                            _3221 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x));
                            uint _3223 = (_3178 * 40u) + 16u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3178 * 40u) + 20u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3178 * 40u) + 24u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3272 = (_3178 * 40u) + 28u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3297 = fma(_2497, _3285.z, fma(_2496, _3285.y, _3285.x * _2495)) + _3285.w;
                            _3298 = !((fma(_2497, _3266.z, fma(_2496, _3266.y, _3266.x * _2495)) + _3266.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3298)
                            {
                                float _3325 = _3193.x - _2495;
                                float _3326 = _3193.y - _2496;
                                float _3327 = _3193.z - _2497;
                                float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                                float _3331 = inversesqrt(_3328);
                                float _3332 = _3331 * _3325;
                                float _3333 = _3331 * _3326;
                                float _3334 = _3331 * _3327;
                                float _3338 = 1.0 - (_3328 / (_3194 * _3194));
                                float _4455 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3343 = sqrt(_3328) * _3209.w;
                                float _3345 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                                float _3346 = _3345 * _3345;
                                float _3349 = ((1.0 - _3346) * dot(vec3(_3332, _3333, _3334), vec3(_687, _690, _693))) + _3346;
                                float _3352 = _3343 * _3343;
                                float _3356 = (fma(_2497, _3236.z, fma(_2496, _3236.y, _3236.x * _2495)) + _3236.w) / _3297;
                                float _3357 = (fma(_2497, _3251.z, fma(_2496, _3251.y, _3251.x * _2495)) + _3251.w) / _3297;
                                float _3361 = 1.0 - dot(vec2(_3356, _3357), vec2(_3356, _3357));
                                float _4471 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3363 = _3362 * (((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3339) / ((_3352 * 0.699999988079071044921875) + 1.0));
                                float _3375 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                                float _3376 = 1.0 - _807;
                                float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                                float _3384 = _3383 * _3383;
                                float _3385 = _3384 * _3384;
                                float _3386 = _3332 - _2805;
                                float _3387 = _3333 - _2806;
                                float _3388 = _3334 - _2807;
                                float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                                float _3396 = dot(vec3(_687, _690, _693), vec3((-0.0) - _2805, (-0.0) - _2806, (-0.0) - _2807));
                                float _4482 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3400 = dot(vec3(_687, _690, _693), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                                float _4493 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                                float _3408 = _3345 * _3384;
                                float _3409 = _3408 * _3408;
                                float _3415 = ((1.0 - _3409) * dot(vec3(_687, _690, _693), vec3(_3332, _3333, _3334))) + _3409;
                                float _4504 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3417 = 1.0 - _3384;
                                float _3427 = (0.5 / (((_3416 * ((_3399 * _3417) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3384) * _3399))) * _3416;
                                float _4515 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3437 = (_3362 * _3339) * (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) / ((_3407 * _3407) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3363 * _3209.z;
                                frontier_phi_87_pred_1 = _3363 * _3209.y;
                                frontier_phi_87_pred_2 = _3363 * _3209.x;
                                frontier_phi_87_pred_3 = _3437 * _3221.z;
                                frontier_phi_87_pred_4 = _3437 * _3221.y;
                                frontier_phi_87_pred_5 = _3437 * _3221.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3446 = frontier_phi_87_pred;
                            _3445 = frontier_phi_87_pred_1;
                            _3444 = frontier_phi_87_pred_2;
                            _3443 = frontier_phi_87_pred_3;
                            _3442 = frontier_phi_87_pred_4;
                            _3441 = frontier_phi_87_pred_5;
                            _3151 = _3444 + _3164;
                            _3152 = _3445 + _3165;
                            _3153 = _3446 + _3166;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3150 = _3443 + _3163;
                            if (_3168 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3168;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3153;
                        frontier_phi_81_pred_1 = _3152;
                        frontier_phi_81_pred_2 = _3151;
                        frontier_phi_81_pred_3 = _3150;
                        frontier_phi_81_pred_4 = _3149;
                        frontier_phi_81_pred_5 = _3148;
                    }
                    _2790 = frontier_phi_81_pred;
                    _2788 = frontier_phi_81_pred_1;
                    _2786 = frontier_phi_81_pred_2;
                    _2784 = frontier_phi_81_pred_3;
                    _2782 = frontier_phi_81_pred_4;
                    _2780 = frontier_phi_81_pred_5;
                    uint _2946 = _2945 + 1u;
                    if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2939 = _2780;
                        _2940 = _2782;
                        _2941 = _2784;
                        _2942 = _2786;
                        _2943 = _2788;
                        _2944 = _2790;
                        _2945 = _2946;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2786;
                frontier_phi_62_63_ladder_1 = _2790;
                frontier_phi_62_63_ladder_2 = _2788;
                frontier_phi_62_63_ladder_3 = _2784;
                frontier_phi_62_63_ladder_4 = _2782;
                frontier_phi_62_63_ladder_5 = _2780;
            }
            else
            {
                frontier_phi_62_63_ladder = _2665;
                frontier_phi_62_63_ladder_1 = _2669;
                frontier_phi_62_63_ladder_2 = _2667;
                frontier_phi_62_63_ladder_3 = _2663;
                frontier_phi_62_63_ladder_4 = _2661;
                frontier_phi_62_63_ladder_5 = _2659;
            }
            _2779 = frontier_phi_62_63_ladder_5;
            _2781 = frontier_phi_62_63_ladder_4;
            _2783 = frontier_phi_62_63_ladder_3;
            _2785 = frontier_phi_62_63_ladder;
            _2787 = frontier_phi_62_63_ladder_2;
            _2789 = frontier_phi_62_63_ladder_1;
        }
        float _2794 = isnan(1.0) ? _791 : (isnan(_791) ? 1.0 : min(_791, 1.0));
        _2553 = (_2794 * _2785) + _1990;
        _2555 = (_2794 * _2787) + _1992;
        _2557 = (_2794 * _2789) + _1994;
        _2559 = ((_2779 * _776) * _2794) + _2335;
        _2561 = ((_2781 * _778) * _2794) + _2337;
        _2563 = ((_2783 * _779) * _2794) + _2339;
    }
    else
    {
        _2553 = _1990;
        _2555 = _1992;
        _2557 = _1994;
        _2559 = _2335;
        _2561 = _2337;
        _2563 = _2339;
    }
    vec4 _2569 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4531 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4542 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4553 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2593 = (((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2553 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _791))) + ((_2559 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1630)) * cbPerFrame._m0[3u].x)) + (_2569.x * cbMtdParam._m0[3u].x);
    float _2595 = ((_2569.y * cbMtdParam._m0[3u].x) + ((_2561 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1630)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2555 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _791)));
    float _2597 = ((_2569.z * cbMtdParam._m0[3u].x) + ((_2563 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1630)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2557 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _791)));
    float _2598 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2599 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2600 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    uint _2601 = _719 + 6u;
    float _2609 = _664 / cbSceneParam._m0[86u].x;
    float _2610 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _584 : (isnan(_584) ? cbSceneParam._m0[77u].w : min(_584, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_584 > cbSceneParam._m0[78u].w)
    {
        float _2684 = isnan(_584) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _584 : min(cbSceneParam._m0[80u].w, _584));
        float _2685 = _2684 / _584;
        float _2696 = _2685 * _635;
        float _2697 = _636 * _2685;
        float _2698 = (-0.0) - _2697;
        float _2699 = _2685 * _637;
        float _2701 = (cbSceneParam._m0[77u].w * _2698) / _2684;
        float _2702 = _2701 + cbSceneParam._m0[79u].w;
        float _2703 = cbSceneParam._m0[79u].w - _2697;
        float _2709 = sqrt(((_2696 * _2696) + (_2697 * _2697)) + (_2699 * _2699));
        float _2712 = (1.0 - (cbSceneParam._m0[77u].w / _2684)) * _2709;
        float _2717 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2719 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2896;
        if (abs((_2698 - _2701) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2896 = ((((_2702 > 0.0) ? exp2(_2717 * _2702) : (2.0 - exp2(_2719 * _2702))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2712;
        }
        else
        {
            float _2840 = 1.0 / cbSceneParam._m0[80u].x;
            float _2841 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : max(_2702, _2703));
            float _2842 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : min(_2702, _2703));
            float _2851 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : min(_2841, 0.0));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            _2896 = ((abs(_2709 / _2698) * cbSceneParam._m0[80u].y) * ((((_2851 - _2852) * 2.0) - ((exp2(_2717 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0)))) - exp2(_2717 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))))) * _2840)) - ((exp2(_2719 * _2851) - exp2(_2719 * _2852)) * _2840))) + (_2712 * cbSceneParam._m0[80u].z);
        }
        vec4 _2898 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _2907 = exp2((_2896 * (-1.44269502162933349609375)) * (1.0 - _2898.w));
        float _2908 = log2(_2907);
        float _2924 = log2(_2629);
        _2721 = (exp2(_2924 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2908 * cbSceneParam._m0[78u].x)) * _2898.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2723 = (exp2(_2924 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2908 * cbSceneParam._m0[78u].y)) * _2898.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2725 = (exp2(_2924 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2908 * cbSceneParam._m0[78u].z)) * _2898.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2727 = _2907 * _2629;
    }
    else
    {
        _2721 = _2626;
        _2723 = _2627;
        _2725 = _2628;
        _2727 = _2629;
    }
    bool _2934;
    vec4 _2737;
    vec4 _2759;
    float _2761;
    float _2765;
    float _2766;
    float _2767;
    float _2768;
    bool _2778;
    for (;;)
    {
        _2737 = cbMatDynParam._m0[0u];
        float _2739 = roundEven(_2737.y);
        bool _2740 = _2739 == 3.0;
        float _2741 = log2(_2727);
        float _2748 = exp2(_2741 * cbSceneParam._m0[78u].x) * _2598;
        float _2749 = exp2(_2741 * cbSceneParam._m0[78u].y) * _2599;
        float _2750 = exp2(_2741 * cbSceneParam._m0[78u].z) * _2600;
        float _2757 = _651 + (-0.5);
        _2759 = cbMtdParam._m0[1u];
        _2761 = _2759.y * _2757;
        float _2764 = (_2739 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2765 = _2764 * (_2740 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2721)));
        _2766 = _2764 * (_2740 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2723)));
        _2767 = _2764 * (_2740 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2725)));
        _2768 = _2757 * 0.999000012874603271484375;
        _2778 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2778)
        {
            if ((cbInstanceData._m0[_719 + 7u].x + _2768) < 0.5)
            {
                _2934 = true;
                break;
            }
        }
        uint _2875 = _720 + uint(_2737.w);
        if ((cbInstanceData._m0[_2875].w < 1.0) && ((cbInstanceData._m0[_2875].w + _2768) < 0.5))
        {
            _2934 = true;
            break;
        }
        if ((_2761 + 1.0) < _2759.x)
        {
            _2934 = true;
            break;
        }
        _2934 = false;
        break;
    }
    float _3139;
    if (_2934)
    {
        discard_state = true;
        _3139 = 0.0;
    }
    else
    {
        _3139 = cbInstanceData._m0[_2601].w;
    }
    SV_Target.x = _2765;
    SV_Target.y = _2766;
    SV_Target.z = _2767;
    SV_Target.w = _3139;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2601].w;
    discard_exit();
}


