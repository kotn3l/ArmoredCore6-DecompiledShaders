#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1059;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _256 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    vec4 _269 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_256 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _277 = exp2(log2(_269.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _278;
    float _280;
    float _282;
    if (_277)
    {
        _278 = cbMtdParam._m0[18u].x;
        _280 = cbMtdParam._m0[18u].y;
        _282 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _278 = cbMtdParam._m0[17u].x;
        _280 = cbMtdParam._m0[17u].y;
        _282 = cbMtdParam._m0[17u].z;
    }
    float _287;
    if (_277)
    {
        _287 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _287 = cbMtdParam._m0[19u].z;
    }
    float _293;
    float _295;
    if (_277)
    {
        _293 = cbMtdParam._m0[26u].x;
        _295 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _293 = cbMtdParam._m0[22u].x;
        _295 = cbMtdParam._m0[22u].y;
    }
    float _297 = _293 * TEXCOORD.x;
    float _298 = _295 * TEXCOORD.y;
    float _310 = floor(_287);
    vec4 _313 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _297) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _298) + cbTextureTilingScale._m0[6u].w, _310));
    vec4 _335 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _256) + cbTextureTilingScale._m0[0u].w));
    float _343 = (((_278 * cbMtdParam._m0[19u].w) * _313.x) * cbMtdParam._m0[9u].x) * _335.x;
    float _347 = (((_280 * cbMtdParam._m0[19u].w) * _313.y) * cbMtdParam._m0[9u].y) * _335.y;
    float _351 = (((_282 * cbMtdParam._m0[19u].w) * _313.z) * cbMtdParam._m0[9u].z) * _335.z;
    vec4 _363 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _256) + cbTextureTilingScale._m0[1u].w));
    float _367 = _363.z;
    vec4 _380 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _297) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _298) + cbTextureTilingScale._m0[8u].w, _310));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[25u].x;
    _184[0u] = cbMtdParam._m0[25u].y;
    _183[1u] = cbMtdParam._m0[25u].z;
    _184[1u] = cbMtdParam._m0[25u].w;
    float _394 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _397 = uint(int(isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0))));
    float _402 = _184[_397] + _380.x;
    vec4 _421 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _297) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _298) + cbTextureTilingScale._m0[7u].w, _310));
    float _428 = (_421.x * 2.0) + (-1.0);
    float _429 = (_421.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3449 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))));
    float _444 = (cbMtdParam._m0[20u].x * (((_367 * 2.0) * (_421.z + _183[_397])) - _367)) + _367;
    float _448 = (cbMtdParam._m0[20u].y * ((_363.x * 2.0) + (-1.0))) + _428;
    float _449 = (cbMtdParam._m0[20u].y * ((_363.y * 2.0) + (-1.0))) + _429;
    float _452 = fma(_435, _234, fma(_449, _226 * TANGENT.x, (_212 * _204) * _448));
    float _455 = fma(_435, _235, fma(_449, _226 * TANGENT.y, (_212 * _205) * _448));
    float _458 = fma(_435, _236, fma(_449, _226 * TANGENT.z, (_212 * _206) * _448));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3460 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _466 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3482 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3493 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3504 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _470 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _486 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _538 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _528);
    float _539 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _528);
    float _540 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _528);
    float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
    float _545 = _538 * _544;
    float _546 = _539 * _544;
    float _547 = _540 * _544;
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _556 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _558 = _556.w;
    float _577 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _580 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _583 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    vec4 _585 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _596 = (((_585.y - _466) + (_585.w * _466)) * cbMtdParam._m0[3u].x) + _466;
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = (_609 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3515 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    vec4 _624 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _629 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _640 = (((_629.x - _470) + (_629.w * _470)) * cbMtdParam._m0[3u].x) + _470;
    float _653 = (cbMtdParam._m0[3u].x * (((_621 * _558) - _621) + _624.x)) + _621;
    float _654 = (cbMtdParam._m0[3u].x * (((_622 * _558) - _622) + _624.y)) + _622;
    float _655 = (cbMtdParam._m0[3u].x * (((_623 * _558) - _623) + _624.z)) + _623;
    float _656 = 1.0 - _640;
    float _657 = _656 * _653;
    float _658 = _656 * _654;
    float _659 = _656 * _655;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _640;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _640;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _640;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _682 = _679.x * TEXCOORD_4;
    float _683 = dot(vec3(_463, _464, _465), vec3(_545, _546, _547));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _463) - _545;
    float _691 = (_686 * _464) - _546;
    float _692 = (_686 * _465) - _547;
    float _696 = abs(dot(vec3(_545, _546, _547), vec3(_463, _464, _465)));
    float _3548 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _698 = sqrt(_596);
    float _711 = exp2((_698 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_698 * 3.0));
    float _717 = (1.0 - _711) * ((_698 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _718 = _711 * _698;
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1058;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _787 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _791 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _816 = _746 + _463;
        float _817 = _750 + _464;
        float _818 = _754 + _465;
        float _828 = fma(_818, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816)) - _783;
        float _829 = fma(_818, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816)) - _787;
        float _830 = fma(_818, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816)) - _791;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _886 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_852.x + (-0.5));
        float _888 = _886 * (_852.y + (-0.5));
        float _889 = _886 * (_852.z + (-0.5));
        float _896 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_859.x + (-0.5));
        float _898 = _896 * (_859.y + (-0.5));
        float _899 = _896 * (_859.z + (-0.5));
        float _906 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_866.x + (-0.5));
        float _908 = _906 * (_866.y + (-0.5));
        float _909 = _906 * (_866.z + (-0.5));
        float _916 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_873.x + (-0.5));
        float _918 = _916 * (_873.y + (-0.5));
        float _919 = _916 * (_873.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _940 = (dot(vec3(_463, _464, _465), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _950 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3596 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_952 + 1.0))) + _957) * _920;
        float _967 = _888 * 0.5;
        float _968 = _898 * 0.5;
        float _969 = _908 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_463, _464, _465), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3629 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_994 + 1.0))) + _999) * _921;
        float _1009 = _889 * 0.5;
        float _1010 = _899 * 0.5;
        float _1011 = _909 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_463, _464, _465), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3662 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1036 + 1.0))) + _1041) * _922;
        _1058 = _889;
        _1060 = _888;
        _1061 = _887;
        _1062 = _899;
        _1063 = _898;
        _1064 = _897;
        _1065 = _909;
        _1066 = _908;
        _1067 = _907;
        _1068 = _922;
        _1069 = _921;
        _1070 = _920;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _1059;
        _1060 = _1059;
        _1061 = _1059;
        _1062 = _1059;
        _1063 = _1059;
        _1064 = _1059;
        _1065 = _1059;
        _1066 = _1059;
        _1067 = _1059;
        _1068 = _1059;
        _1069 = _1059;
        _1070 = _1059;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1103 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1107 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1130 = _746 + _463;
        float _1131 = _750 + _464;
        float _1132 = _754 + _465;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_463, _464, _465), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3725 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_463, _464, _465), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3758 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_463, _464, _465), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3791 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1059;
        _1369 = _1059;
        _1370 = _1059;
        _1371 = _1059;
        _1372 = _1059;
        _1373 = _1059;
        _1374 = _1059;
        _1375 = _1059;
        _1376 = _1059;
        _1377 = _1059;
        _1378 = _1059;
        _1379 = _1059;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1072)) + _1072;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _690 * 0.5;
    float _1437 = _691 * 0.5;
    float _1438 = _692 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1058, _1062, _1065, _1068));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _596);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1568 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1571 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1599;
        if (_1565 > 0.0)
        {
            _1599 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1599 = frontier_phi_22_20_ladder;
        }
        float _1824;
        if (_1568 > 0.0)
        {
            _1824 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1824 = frontier_phi_31_27_ladder;
        }
        float _2081;
        if (_1571 > 0.0)
        {
            _2081 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2081 = frontier_phi_43_38_ladder;
        }
        float _2083 = isnan(_1824) ? _1599 : (isnan(_1599) ? _1824 : min(_1599, _1824));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1565) + _1554;
        float _2089 = (_2084 * _1568) + _1558;
        float _2090 = (_2084 * _1571) + _1562;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2093 = (-1.0) - _2091;
        float _2095 = _2091 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2090 > _2095) || ((_2090 < _2093) || ((_2089 > _2095) || ((_2089 < _2093) || ((_2088 < _2093) || (_2088 > _2095))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2090, cbModelParam._m0[9u].z, fma(_2089, cbModelParam._m0[9u].y, _2088 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2090, cbModelParam._m0[10u].z, fma(_2089, cbModelParam._m0[10u].y, _2088 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2090, cbModelParam._m0[11u].z, fma(_2089, cbModelParam._m0[11u].y, _2088 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_21_43_ladder = _2218.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2218.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2218.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_21_43_ladder_2;
        _1589 = frontier_phi_21_43_ladder_1;
        _1591 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1505);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1595 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _596);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1595 : min(cbModelParam._m0[25u].w, _1595));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1649 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1653 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1657 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1660 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1663 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1666 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _1829;
        if (_1660 > 0.0)
        {
            _1829 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1829 = frontier_phi_33_29_ladder;
        }
        float _2108;
        if (_1663 > 0.0)
        {
            _2108 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2108 = frontier_phi_45_40_ladder;
        }
        float _2321;
        if (_1666 > 0.0)
        {
            _2321 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2321 = frontier_phi_54_51_ladder;
        }
        float _2323 = isnan(_2108) ? _1829 : (isnan(_1829) ? _2108 : min(_1829, _2108));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1660) + _1649;
        float _2329 = (_2324 * _1663) + _1653;
        float _2330 = (_2324 * _1666) + _1657;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_30_54_ladder = _2546.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2546.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2546.x * cbModelParam._m0[1u].z;
        }
        _1685 = frontier_phi_30_54_ladder_2;
        _1687 = frontier_phi_30_54_ladder;
        _1689 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1596);
        _1685 = _1669.x * cbModelParam._m0[1u].z;
        _1687 = _1669.y * cbModelParam._m0[1u].z;
        _1689 = _1669.z * cbModelParam._m0[1u].z;
    }
    float _1702 = (((_717 * _667) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1685 - _1587)) + _1587);
    float _1704 = (((_717 * _669) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1706 = (((_717 * _670) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1689 - _1591)) + _1591);
    float _1709 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, _1702 * cbSceneParam._m0[91u].x));
    vec4 _1723 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_553, _554));
    float _1725 = _1723.w;
    float _1737 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1725);
    float _1738 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1725);
    float _1739 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1725);
    uvec4 _1743 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _1745 = _1743.x * 14u;
    uint _1746 = _1745 + 13u;
    float _1753 = _682 + (-1.0);
    float _1758 = (cbLight._m0[_1746].x * _1753) + 1.0;
    float _1759 = (cbLight._m0[_1746].y * _1753) + 1.0;
    float _1760 = (cbLight._m0[_1746].z * _1753) + 1.0;
    float _1761 = (cbLight._m0[_1746].w * _1753) + 1.0;
    uint _1762 = _1745 + 5u;
    float _1768 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1772 = _1745 + 4u;
    float _1782 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1786 = _1745 | 1u;
    float _1797 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_463, _464, _465));
    float _1800 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_463, _464, _465));
    float _3927 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _3938 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1805 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1807 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1814 = ((cbLight._m0[_1762].x * _1768) * _1807) + (((cbLight._m0[_1772].x * _1737) * _1782) * _1805);
    float _1815 = ((_1768 * cbLight._m0[_1762].y) * _1807) + (((cbLight._m0[_1772].y * _1738) * _1782) * _1805);
    float _1816 = ((_1768 * cbLight._m0[_1762].z) * _1807) + (((cbLight._m0[_1772].z * _1739) * _1782) * _1805);
    uvec4 _1821 = floatBitsToUint(cbLight._m0[_1745 + 12u]);
    bool _1823 = _1821.x == 0u;
    float _1834;
    float _1836;
    float _1838;
    if (_1823)
    {
        _1834 = _1814;
        _1836 = _1815;
        _1838 = _1816;
    }
    else
    {
        uint _1842 = _1745 + 6u;
        float _1858 = (dot(vec3(cbLight._m0[_1745 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _1859 = _1858 * _1858;
        float _3949 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1861 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1834 = (((cbLight._m0[_1842].x * 0.3183098733425140380859375) * _1860) * _1861) + _1814;
        _1836 = (((cbLight._m0[_1842].y * 0.3183098733425140380859375) * _1860) * _1861) + _1815;
        _1838 = (((cbLight._m0[_1842].z * 0.3183098733425140380859375) * _1860) * _1861) + _1816;
    }
    bool _1841 = _1821.y == 0u;
    float _1879;
    float _1881;
    float _1883;
    if (_1841)
    {
        _1879 = _1834;
        _1881 = _1836;
        _1883 = _1838;
    }
    else
    {
        uint _2052 = _1745 + 7u;
        float _2068 = (dot(vec3(cbLight._m0[_1745 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _3965 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2071 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1879 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _1834;
        _1881 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _1836;
        _1883 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _1838;
    }
    uint _1886 = _1745 + 8u;
    float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _596) * 0.949999988079071044921875);
    float _1900 = _1899 * _1899;
    float _1901 = cbLight._m0[_1745].x + _545;
    float _1902 = cbLight._m0[_1745].y + _546;
    float _1903 = cbLight._m0[_1745].z + _547;
    float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
    float _1908 = _1907 * _1901;
    float _1909 = _1907 * _1902;
    float _1910 = _1907 * _1903;
    float _1911 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1745].xyz));
    float _3981 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _1915 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1916 = dot(vec3(_463, _464, _465), vec3(_1908, _1909, _1910));
    float _4003 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1908, _1909, _1910));
    float _4014 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1900 * _1900;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
    float _1937 = 0.959999978542327880859375 - _664;
    float _1939 = 0.959999978542327880859375 - _665;
    float _1940 = 0.959999978542327880859375 - _666;
    float _1947 = 1.0 - _1900;
    float _1958 = (0.5 / (((_1915 * ((_1914 * _1947) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _1947) + _1900) * _1914))) * _1914;
    float _4025 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    uint _1974 = _1745 + 9u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _596) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1786].x + _545;
    float _1988 = cbLight._m0[_1786].y + _546;
    float _1989 = cbLight._m0[_1786].z + _547;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1786].xyz));
    float _4036 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _2001 = dot(vec3(_463, _464, _465), vec3(_1994, _1995, _1996));
    float _4047 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1994, _1995, _1996));
    float _4058 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1986 * _1986;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
    float _2027 = 1.0 - _1986;
    float _2037 = (0.5 / (((_1915 * ((_2000 * _2027) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _2027) + _1986) * _2000))) * _2000;
    float _4069 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    float _2049 = (((((_2020 * _1937) + _667) * cbLight._m0[_1974].x) * _2039) * _1768) + ((((cbLight._m0[_1886].x * _1737) * ((_1936 * _1937) + _667)) * _1960) * _1782);
    float _2050 = (((((_2020 * _1939) + _669) * cbLight._m0[_1974].y) * _2039) * _1768) + ((((cbLight._m0[_1886].y * _1738) * ((_1936 * _1939) + _669)) * _1960) * _1782);
    float _2051 = (((((_2020 * _1940) + _670) * cbLight._m0[_1974].z) * _2039) * _1768) + ((((cbLight._m0[_1886].z * _1739) * ((_1936 * _1940) + _670)) * _1960) * _1782);
    float _2113;
    float _2115;
    float _2117;
    if (_1823)
    {
        _2113 = _2049;
        _2115 = _2050;
        _2117 = _2051;
    }
    else
    {
        uint _2119 = _1745 + 2u;
        uint _2123 = _1745 + 10u;
        float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _596) * 0.949999988079071044921875);
        float _2138 = _2137 * _2137;
        float _2139 = cbLight._m0[_2119].x + _545;
        float _2140 = cbLight._m0[_2119].y + _546;
        float _2141 = cbLight._m0[_2119].z + _547;
        float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
        float _2146 = _2145 * _2139;
        float _2147 = _2145 * _2140;
        float _2148 = _2145 * _2141;
        float _2149 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2119].xyz));
        float _4080 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2153 = dot(vec3(_463, _464, _465), vec3(_2146, _2147, _2148));
        float _4091 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2157 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2146, _2147, _2148));
        float _4102 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2161 = _2138 * _2138;
        float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
        float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
        float _2179 = 1.0 - _2138;
        float _2189 = (0.5 / (((_1915 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _2179) + _2138) * _2152))) * _2152;
        float _4113 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2191 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
        float _2192 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2113 = (((((_2172 * _1937) + _667) * cbLight._m0[_2123].x) * _2191) * _2192) + _2049;
        _2115 = (((((_2172 * _1939) + _669) * cbLight._m0[_2123].y) * _2191) * _2192) + _2050;
        _2117 = (((((_2172 * _1940) + _670) * cbLight._m0[_2123].z) * _2191) * _2192) + _2051;
    }
    float _2227;
    float _2229;
    float _2231;
    if (_1841)
    {
        _2227 = _2113;
        _2229 = _2115;
        _2231 = _2117;
    }
    else
    {
        uint _2238 = _1745 + 3u;
        uint _2242 = _1745 + 11u;
        float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _596) * 0.949999988079071044921875);
        float _2257 = _2256 * _2256;
        float _2258 = cbLight._m0[_2238].x + _545;
        float _2259 = cbLight._m0[_2238].y + _546;
        float _2260 = cbLight._m0[_2238].z + _547;
        float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
        float _2265 = _2264 * _2258;
        float _2266 = _2264 * _2259;
        float _2267 = _2264 * _2260;
        float _2268 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2238].xyz));
        float _4129 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2272 = dot(vec3(_463, _464, _465), vec3(_2265, _2266, _2267));
        float _4140 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2276 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2265, _2266, _2267));
        float _4151 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2280 = _2257 * _2257;
        float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
        float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
        float _2298 = 1.0 - _2257;
        float _2308 = (0.5 / (((_1915 * ((_2271 * _2298) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _2298) + _2257) * _2271))) * _2271;
        float _4162 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2227 = (((((_2291 * _1937) + _667) * cbLight._m0[_2242].x) * _2310) * _2311) + _2113;
        _2229 = (((((_2291 * _1939) + _669) * cbLight._m0[_2242].y) * _2310) * _2311) + _2115;
        _2231 = (((((_2291 * _1940) + _670) * cbLight._m0[_2242].z) * _2310) * _2311) + _2117;
    }
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_1743.y == 0u)
    {
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2386;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2386;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2386;
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.x;
        uint _2413 = uint((float(_2401.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2402))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2402)));
        float _2423 = (log2(_2389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2424 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        uint _2427 = uint(isnan(14.0) ? _2424 : (isnan(_2424) ? 14.0 : min(_2424, 14.0)));
        uvec4 _2432 = texelFetch(g_lightClusterGridBuffer, int(((_2427 << 2u) + (_2413 << 6u)) >> 2u));
        uint _2433 = _2432.x;
        uint _2434 = _2401.z;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((((1u << ((_2434 >> 4u) & 15u)) + 4294967295u) & _2433) == 0u) || ((_2434 & 240u) == 0u))
        {
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
        }
        else
        {
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            uint _2701 = 0u;
            uint _2710;
            bool _2711;
            for (;;)
            {
                _2710 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2701 << 2u)) >> 2u)).x;
                _2711 = _2710 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2711)
                {
                    frontier_phi_69_pred = _2700;
                    frontier_phi_69_pred_1 = _2699;
                    frontier_phi_69_pred_2 = _2698;
                    frontier_phi_69_pred_3 = _2696;
                    frontier_phi_69_pred_4 = _2695;
                    frontier_phi_69_pred_5 = _2697;
                }
                else
                {
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    uint _2825;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2710;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    for (;;)
                    {
                        uint _2829 = uint(findLSB(_2825)) + (_2701 << 5u);
                        uint _2826 = (_2825 + 4294967295u) & _2825;
                        uint _2831 = _2829 * 48u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2851 = (_2829 * 48u) + 4u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2870 = (_2829 * 48u) + 8u;
                        vec3 _2881 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x));
                        float _2885 = _2845.x - _2387;
                        float _2886 = _2845.y - _2388;
                        float _2887 = _2845.z - _2389;
                        float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                        float _2891 = inversesqrt(_2888);
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2895 = dot(vec3(_577, _580, _583), vec3(_2892, _2893, _2894));
                        float _2900 = 1.0 - (_2888 * _2845.w);
                        float _4188 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2902 = sqrt(_2888) * _2864.w;
                        float _2905 = 1.39999997615814208984375 / (_2902 + 1.39999997615814208984375);
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2895) + _2906;
                        float _2912 = _2902 * _2902;
                        float _2916 = ((isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))) * _2901) / ((_2912 * 0.699999988079071044921875) + 1.0);
                        float _2920 = (-0.0) - _2387;
                        float _2921 = (-0.0) - _2388;
                        float _2922 = (-0.0) - _2389;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2937 = exp2(log2(1.0 / ((_2912 * 3.5) + 5.0)) * 0.25);
                        float _2938 = 1.0 - _698;
                        float _2945 = sqrt(1.0 - ((1.0 - (_2938 * _2938)) * (1.0 - (_2937 * _2937))));
                        float _2946 = _2945 * _2945;
                        float _2947 = _2946 * _2946;
                        float _2948 = _2927 + _2892;
                        float _2949 = _2928 + _2893;
                        float _2950 = _2929 + _2894;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2958 = dot(vec3(_577, _580, _583), vec3(_2927, _2928, _2929));
                        float _4204 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2962 = dot(vec3(_577, _580, _583), vec3(_2954 * _2948, _2954 * _2949, _2954 * _2950));
                        float _4215 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2969 = ((_2965 * _2965) * (_2947 + (-1.0))) + 1.0;
                        float _2970 = _2905 * _2946;
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2895) + _2971;
                        float _4226 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2976 = 1.0 - _2946;
                        float _2986 = (0.5 / (((_2975 * ((_2961 * _2976) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _2976) + _2946) * _2961))) * _2975;
                        float _4237 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2997 = (((_2947 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_2969 * _2969) * ((_2912 * 2.1991131305694580078125) + 3.141590118408203125))) * _2901;
                        _2754 = (_2916 * _2864.x) + _2822;
                        _2755 = (_2916 * _2864.y) + _2823;
                        _2756 = (_2916 * _2864.z) + _2824;
                        _2751 = (_2997 * _2881.x) + _2819;
                        _2752 = (_2997 * _2881.y) + _2820;
                        _2753 = (_2997 * _2881.z) + _2821;
                        if (_2826 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2826;
                        }
                    }
                    frontier_phi_69_pred = _2756;
                    frontier_phi_69_pred_1 = _2755;
                    frontier_phi_69_pred_2 = _2754;
                    frontier_phi_69_pred_3 = _2752;
                    frontier_phi_69_pred_4 = _2751;
                    frontier_phi_69_pred_5 = _2753;
                }
                _2562 = frontier_phi_69_pred;
                _2560 = frontier_phi_69_pred_1;
                _2558 = frontier_phi_69_pred_2;
                _2554 = frontier_phi_69_pred_3;
                _2552 = frontier_phi_69_pred_4;
                _2556 = frontier_phi_69_pred_5;
                uint _2702 = _2701 + 1u;
                if (_2702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2695 = _2552;
                    _2696 = _2554;
                    _2697 = _2556;
                    _2698 = _2558;
                    _2699 = _2560;
                    _2700 = _2562;
                    _2701 = _2702;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
        }
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.z;
        uint _2568 = (_2566 >> 8u) & 15u;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        if (((4294967295u << _2568) & _2433) == 0u)
        {
            _2663 = _2551;
            _2665 = _2553;
            _2667 = _2555;
            _2669 = _2557;
            _2671 = _2559;
            _2673 = _2561;
        }
        else
        {
            float _2688 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
            float _2689 = _2688 * _2387;
            float _2690 = _2688 * _2388;
            float _2691 = _2688 * _2389;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2568 < ((_2566 >> 12u) & 15u))
            {
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2802 = _2551;
                float _2803 = _2553;
                float _2804 = _2555;
                float _2805 = _2557;
                float _2806 = _2559;
                float _2807 = _2561;
                uint _2808 = _2568;
                uint _2817;
                bool _2818;
                for (;;)
                {
                    _2817 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                    _2818 = _2817 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2818)
                    {
                        frontier_phi_75_pred = _2804;
                        frontier_phi_75_pred_1 = _2803;
                        frontier_phi_75_pred_2 = _2802;
                        frontier_phi_75_pred_3 = _2807;
                        frontier_phi_75_pred_4 = _2806;
                        frontier_phi_75_pred_5 = _2805;
                    }
                    else
                    {
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        uint _3021 = _2817;
                        uint _3022;
                        vec4 _3047;
                        float _3048;
                        vec4 _3063;
                        vec3 _3075;
                        vec4 _3091;
                        vec4 _3106;
                        float _3153;
                        bool _3154;
                        for (;;)
                        {
                            uint _3032 = ((_2808 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3021));
                            _3022 = (_3021 + 4294967295u) & _3021;
                            uint _3034 = _3032 * 40u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            _3048 = _3047.w;
                            uint _3050 = (_3032 * 40u) + 4u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3065 = (_3032 * 40u) + 8u;
                            _3075 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x));
                            uint _3078 = (_3032 * 40u) + 16u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3032 * 40u) + 20u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3109 = (_3032 * 40u) + 24u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3128 = (_3032 * 40u) + 28u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3153 = fma(_2389, _3141.z, fma(_2388, _3141.y, _3141.x * _2387)) + _3141.w;
                            _3154 = !((fma(_2389, _3122.z, fma(_2388, _3122.y, _3122.x * _2387)) + _3122.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3154)
                            {
                                float _3181 = _3047.x - _2387;
                                float _3182 = _3047.y - _2388;
                                float _3183 = _3047.z - _2389;
                                float _3184 = dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183));
                                float _3187 = inversesqrt(_3184);
                                float _3188 = _3187 * _3181;
                                float _3189 = _3187 * _3182;
                                float _3190 = _3187 * _3183;
                                float _3194 = 1.0 - (_3184 / (_3048 * _3048));
                                float _4248 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3199 = sqrt(_3184) * _3063.w;
                                float _3201 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                                float _3202 = _3201 * _3201;
                                float _3205 = ((1.0 - _3202) * dot(vec3(_3188, _3189, _3190), vec3(_577, _580, _583))) + _3202;
                                float _3208 = _3199 * _3199;
                                float _3212 = (fma(_2389, _3091.z, fma(_2388, _3091.y, _3091.x * _2387)) + _3091.w) / _3153;
                                float _3213 = (fma(_2389, _3106.z, fma(_2388, _3106.y, _3106.x * _2387)) + _3106.w) / _3153;
                                float _3217 = 1.0 - dot(vec2(_3212, _3213), vec2(_3212, _3213));
                                float _4264 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3219 = _3218 * (((isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))) * _3195) / ((_3208 * 0.699999988079071044921875) + 1.0));
                                float _3231 = exp2(log2(1.0 / ((_3208 * 3.5) + 5.0)) * 0.25);
                                float _3232 = 1.0 - _698;
                                float _3239 = sqrt(1.0 - ((1.0 - (_3232 * _3232)) * (1.0 - (_3231 * _3231))));
                                float _3240 = _3239 * _3239;
                                float _3241 = _3240 * _3240;
                                float _3242 = _3188 - _2689;
                                float _3243 = _3189 - _2690;
                                float _3244 = _3190 - _2691;
                                float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                                float _3252 = dot(vec3(_577, _580, _583), vec3((-0.0) - _2689, (-0.0) - _2690, (-0.0) - _2691));
                                float _4275 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3256 = dot(vec3(_577, _580, _583), vec3(_3248 * _3242, _3248 * _3243, _3248 * _3244));
                                float _4286 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3263 = ((_3259 * _3259) * (_3241 + (-1.0))) + 1.0;
                                float _3264 = _3201 * _3240;
                                float _3265 = _3264 * _3264;
                                float _3271 = ((1.0 - _3265) * dot(vec3(_577, _580, _583), vec3(_3188, _3189, _3190))) + _3265;
                                float _4297 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3273 = 1.0 - _3240;
                                float _3283 = (0.5 / (((_3272 * ((_3255 * _3273) + _3240)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3240) * _3255))) * _3272;
                                float _4308 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3293 = (_3218 * _3195) * (((_3241 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3263 * _3263) * ((_3208 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3293 * _3075.z;
                                frontier_phi_81_pred_1 = _3293 * _3075.y;
                                frontier_phi_81_pred_2 = _3293 * _3075.x;
                                frontier_phi_81_pred_3 = _3219 * _3063.z;
                                frontier_phi_81_pred_4 = _3219 * _3063.y;
                                frontier_phi_81_pred_5 = _3219 * _3063.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3299 = frontier_phi_81_pred;
                            _3298 = frontier_phi_81_pred_1;
                            _3297 = frontier_phi_81_pred_2;
                            _3302 = frontier_phi_81_pred_3;
                            _3301 = frontier_phi_81_pred_4;
                            _3300 = frontier_phi_81_pred_5;
                            _3005 = _3300 + _3018;
                            _3006 = _3301 + _3019;
                            _3007 = _3302 + _3020;
                            _3002 = _3297 + _3015;
                            _3003 = _3298 + _3016;
                            _3004 = _3299 + _3017;
                            if (_3022 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3022;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3004;
                        frontier_phi_75_pred_1 = _3003;
                        frontier_phi_75_pred_2 = _3002;
                        frontier_phi_75_pred_3 = _3007;
                        frontier_phi_75_pred_4 = _3006;
                        frontier_phi_75_pred_5 = _3005;
                    }
                    _2668 = frontier_phi_75_pred;
                    _2666 = frontier_phi_75_pred_1;
                    _2664 = frontier_phi_75_pred_2;
                    _2674 = frontier_phi_75_pred_3;
                    _2672 = frontier_phi_75_pred_4;
                    _2670 = frontier_phi_75_pred_5;
                    uint _2809 = _2808 + 1u;
                    if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2802 = _2664;
                        _2803 = _2666;
                        _2804 = _2668;
                        _2805 = _2670;
                        _2806 = _2672;
                        _2807 = _2674;
                        _2808 = _2809;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2672;
                frontier_phi_63_64_ladder_1 = _2670;
                frontier_phi_63_64_ladder_2 = _2668;
                frontier_phi_63_64_ladder_3 = _2674;
                frontier_phi_63_64_ladder_4 = _2666;
                frontier_phi_63_64_ladder_5 = _2664;
            }
            else
            {
                frontier_phi_63_64_ladder = _2559;
                frontier_phi_63_64_ladder_1 = _2557;
                frontier_phi_63_64_ladder_2 = _2555;
                frontier_phi_63_64_ladder_3 = _2561;
                frontier_phi_63_64_ladder_4 = _2553;
                frontier_phi_63_64_ladder_5 = _2551;
            }
            _2663 = frontier_phi_63_64_ladder_5;
            _2665 = frontier_phi_63_64_ladder_4;
            _2667 = frontier_phi_63_64_ladder_2;
            _2669 = frontier_phi_63_64_ladder_1;
            _2671 = frontier_phi_63_64_ladder;
            _2673 = frontier_phi_63_64_ladder_3;
        }
        float _2678 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2445 = (_2678 * _2669) + _1879;
        _2447 = (_2678 * _2671) + _1881;
        _2449 = (_2678 * _2673) + _1883;
        _2451 = ((_2663 * _667) * _2678) + _2227;
        _2453 = ((_2665 * _669) * _2678) + _2229;
        _2455 = ((_2667 * _670) * _2678) + _2231;
    }
    else
    {
        _2445 = _1879;
        _2447 = _1881;
        _2449 = _1883;
        _2451 = _2227;
        _2453 = _2229;
        _2455 = _2231;
    }
    vec4 _2461 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4324 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4335 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4346 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _2485 = (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2445 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _682))) + ((_2451 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + (_2461.x * cbMtdParam._m0[3u].x);
    float _2487 = ((_2461.y * cbMtdParam._m0[3u].x) + ((_2453 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2447 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _682)));
    float _2489 = ((_2461.z * cbMtdParam._m0[3u].x) + ((_2455 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2449 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _682)));
    uint _2493 = _609 + 6u;
    float _2501 = _553 / cbSceneParam._m0[86u].x;
    float _2502 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2516 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2501, _2502, (log2((isnan(cbSceneParam._m0[77u].w) ? _486 : (isnan(_486) ? cbSceneParam._m0[77u].w : min(_486, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2518 = _2516.x;
    float _2519 = _2516.y;
    float _2520 = _2516.z;
    float _2521 = _2516.w;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    if (_486 > cbSceneParam._m0[78u].w)
    {
        float _2576 = isnan(_486) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _486 : min(cbSceneParam._m0[80u].w, _486));
        float _2577 = _2576 / _486;
        float _2588 = _2577 * _538;
        float _2589 = _539 * _2577;
        float _2590 = (-0.0) - _2589;
        float _2591 = _2577 * _540;
        float _2593 = (cbSceneParam._m0[77u].w * _2590) / _2576;
        float _2594 = _2593 + cbSceneParam._m0[79u].w;
        float _2595 = cbSceneParam._m0[79u].w - _2589;
        float _2601 = sqrt(((_2588 * _2588) + (_2589 * _2589)) + (_2591 * _2591));
        float _2604 = (1.0 - (cbSceneParam._m0[77u].w / _2576)) * _2601;
        float _2609 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2611 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2764;
        if (abs((_2590 - _2593) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2764 = ((((_2594 > 0.0) ? exp2(_2609 * _2594) : (2.0 - exp2(_2611 * _2594))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2604;
        }
        else
        {
            float _2724 = 1.0 / cbSceneParam._m0[80u].x;
            float _2725 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : max(_2594, _2595));
            float _2726 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : min(_2594, _2595));
            float _2735 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : min(_2725, 0.0));
            float _2736 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : min(_2726, 0.0));
            _2764 = ((abs(_2601 / _2590) * cbSceneParam._m0[80u].y) * ((((_2735 - _2736) * 2.0) - ((exp2(_2609 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0)))) - exp2(_2609 * (isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0))))) * _2724)) - ((exp2(_2611 * _2735) - exp2(_2611 * _2736)) * _2724))) + (_2604 * cbSceneParam._m0[80u].z);
        }
        vec4 _2766 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2501, _2502, 1.0), 0.0);
        float _2775 = exp2((_2764 * (-1.44269502162933349609375)) * (1.0 - _2766.w));
        float _2776 = log2(_2775);
        float _2792 = log2(_2521);
        _2613 = (exp2(_2792 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2776 * cbSceneParam._m0[78u].x)) * _2766.x) / cbSceneParam._m0[78u].x)) + _2518;
        _2615 = (exp2(_2792 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2776 * cbSceneParam._m0[78u].y)) * _2766.y) / cbSceneParam._m0[78u].y)) + _2519;
        _2617 = (exp2(_2792 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2776 * cbSceneParam._m0[78u].z)) * _2766.z) / cbSceneParam._m0[78u].z)) + _2520;
        _2619 = _2775 * _2521;
    }
    else
    {
        _2613 = _2518;
        _2615 = _2519;
        _2617 = _2520;
        _2619 = _2521;
    }
    float _2631 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2632 = _2631 == 3.0;
    float _2633 = log2(_2619);
    float _2640 = exp2(_2633 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0)));
    float _2641 = exp2(_2633 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)));
    float _2642 = exp2(_2633 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)));
    float _2651 = (_2631 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2651 * (_2632 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.y = _2651 * (_2632 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2615)));
    SV_Target.z = _2651 * (_2632 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2617)));
    SV_Target.w = cbInstanceData._m0[_2493].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2493].w;
}


