#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1061;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _258 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    vec4 _271 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_258 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _279 = exp2(log2(_271.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _280;
    float _282;
    float _284;
    if (_279)
    {
        _280 = cbMtdParam._m0[18u].x;
        _282 = cbMtdParam._m0[18u].y;
        _284 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _280 = cbMtdParam._m0[17u].x;
        _282 = cbMtdParam._m0[17u].y;
        _284 = cbMtdParam._m0[17u].z;
    }
    float _289;
    if (_279)
    {
        _289 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _289 = cbMtdParam._m0[19u].z;
    }
    float _295;
    float _297;
    if (_279)
    {
        _295 = cbMtdParam._m0[26u].x;
        _297 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _295 = cbMtdParam._m0[22u].x;
        _297 = cbMtdParam._m0[22u].y;
    }
    float _299 = _295 * TEXCOORD.x;
    float _300 = _297 * TEXCOORD.y;
    float _312 = floor(_289);
    vec4 _315 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _299) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _300) + cbTextureTilingScale._m0[6u].w, _312));
    vec4 _337 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _258) + cbTextureTilingScale._m0[0u].w));
    float _345 = (((_280 * cbMtdParam._m0[19u].w) * _315.x) * cbMtdParam._m0[9u].x) * _337.x;
    float _349 = (((_282 * cbMtdParam._m0[19u].w) * _315.y) * cbMtdParam._m0[9u].y) * _337.y;
    float _353 = (((_284 * cbMtdParam._m0[19u].w) * _315.z) * cbMtdParam._m0[9u].z) * _337.z;
    vec4 _365 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _258) + cbTextureTilingScale._m0[1u].w));
    float _369 = _365.z;
    vec4 _382 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _299) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _300) + cbTextureTilingScale._m0[8u].w, _312));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[25u].x;
    _186[0u] = cbMtdParam._m0[25u].y;
    _185[1u] = cbMtdParam._m0[25u].z;
    _186[1u] = cbMtdParam._m0[25u].w;
    float _396 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _399 = uint(int(isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0))));
    float _404 = _186[_399] + _382.x;
    vec4 _423 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _299) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _300) + cbTextureTilingScale._m0[7u].w, _312));
    float _430 = (_423.x * 2.0) + (-1.0);
    float _431 = (_423.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _3710 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))));
    float _446 = (cbMtdParam._m0[20u].x * (((_369 * 2.0) * (_423.z + _185[_399])) - _369)) + _369;
    float _450 = (cbMtdParam._m0[20u].y * ((_365.x * 2.0) + (-1.0))) + _430;
    float _451 = (cbMtdParam._m0[20u].y * ((_365.y * 2.0) + (-1.0))) + _431;
    float _454 = fma(_437, _236, fma(_451, _228 * TANGENT.x, (_214 * _206) * _450));
    float _457 = fma(_437, _237, fma(_451, _228 * TANGENT.y, (_214 * _207) * _450));
    float _460 = fma(_437, _238, fma(_451, _228 * TANGENT.z, (_214 * _208) * _450));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _3721 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _468 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3743 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3754 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3765 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _472 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _488 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _540 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _530);
    float _541 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _530);
    float _542 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _530);
    float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
    float _547 = _540 * _546;
    float _548 = _541 * _546;
    float _549 = _542 * _546;
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _558 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _560 = _558.w;
    float _579 = fma(_467, cbSceneParam._m0[5u].z, fma(_466, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _465));
    float _582 = fma(_467, cbSceneParam._m0[6u].z, fma(_466, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _465));
    float _585 = fma(_467, cbSceneParam._m0[7u].z, fma(_466, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _465));
    vec4 _587 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _598 = (((_587.y - _468) + (_587.w * _468)) * cbMtdParam._m0[3u].x) + _468;
    uint _611 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = (_611 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3776 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    vec4 _626 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _631 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _642 = (((_631.x - _472) + (_631.w * _472)) * cbMtdParam._m0[3u].x) + _472;
    float _655 = (cbMtdParam._m0[3u].x * (((_623 * _560) - _623) + _626.x)) + _623;
    float _656 = (cbMtdParam._m0[3u].x * (((_624 * _560) - _624) + _626.y)) + _624;
    float _657 = (cbMtdParam._m0[3u].x * (((_625 * _560) - _625) + _626.z)) + _625;
    float _658 = 1.0 - _642;
    float _659 = _658 * _655;
    float _660 = _658 * _656;
    float _661 = _658 * _657;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _642;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _642;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _642;
    float _669 = _666 + 0.039999999105930328369140625;
    float _671 = _667 + 0.039999999105930328369140625;
    float _672 = _668 + 0.039999999105930328369140625;
    vec4 _681 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _555, cbSceneParam._m0[86u].y * _556));
    float _684 = _681.x * TEXCOORD_4;
    float _685 = dot(vec3(_465, _466, _467), vec3(_547, _548, _549));
    float _688 = _685 * 2.0;
    float _692 = (_688 * _465) - _547;
    float _693 = (_688 * _466) - _548;
    float _694 = (_688 * _467) - _549;
    float _698 = abs(dot(vec3(_547, _548, _549), vec3(_465, _466, _467)));
    float _3809 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _700 = sqrt(_598);
    float _713 = exp2((_700 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_700 * 3.0));
    float _719 = (1.0 - _713) * ((_700 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _720 = _713 * _700;
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_756, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748));
        float _789 = fma(_756, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748));
        float _793 = fma(_756, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748));
        float _818 = _748 + _465;
        float _819 = _752 + _466;
        float _820 = _756 + _467;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _785;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _789;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _793;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_465, _466, _467), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3857 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_465, _466, _467), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3890 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_465, _466, _467), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3923 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_756, cbModelParam._m0[30u].z, fma(_752, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _748));
        float _1105 = fma(_756, cbModelParam._m0[31u].z, fma(_752, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _748));
        float _1109 = fma(_756, cbModelParam._m0[32u].z, fma(_752, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _748));
        float _1132 = _748 + _465;
        float _1133 = _752 + _466;
        float _1134 = _756 + _467;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_465, _466, _467), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3986 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_465, _466, _467), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4019 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_465, _466, _467), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4052 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1061;
        _1371 = _1061;
        _1372 = _1061;
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = _1061;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1074)) + _1074;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _692 * 0.5;
    float _1439 = _693 * 0.5;
    float _1440 = _694 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_756, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_756, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_756, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_694, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692));
        float _1570 = fma(_694, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692));
        float _1573 = fma(_694, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1601 = frontier_phi_22_20_ladder;
        }
        float _1773;
        if (_1570 > 0.0)
        {
            _1773 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1773 = frontier_phi_31_27_ladder;
        }
        float _2069;
        if (_1573 > 0.0)
        {
            _2069 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2069 = frontier_phi_43_38_ladder;
        }
        float _2071 = isnan(_1773) ? _1601 : (isnan(_1601) ? _1773 : min(_1601, _1773));
        float _2072 = isnan(_2069) ? _2071 : (isnan(_2071) ? _2069 : min(_2071, _2069));
        float _2076 = (_2072 * _1567) + _1556;
        float _2077 = (_2072 * _1570) + _1560;
        float _2078 = (_2072 * _1573) + _1564;
        float _2079 = _2072 * 9.9999997473787516355514526367188e-05;
        float _2081 = (-1.0) - _2079;
        float _2083 = _2079 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2078 > _2083) || ((_2078 < _2081) || ((_2077 > _2083) || ((_2077 < _2081) || ((_2076 < _2081) || (_2076 > _2083))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2223 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2078, cbModelParam._m0[9u].z, fma(_2077, cbModelParam._m0[9u].y, _2076 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2078, cbModelParam._m0[10u].z, fma(_2077, cbModelParam._m0[10u].y, _2076 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2078, cbModelParam._m0[11u].z, fma(_2077, cbModelParam._m0[11u].y, _2076 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_21_43_ladder = _2223.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2223.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2223.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_21_43_ladder_2;
        _1591 = frontier_phi_21_43_ladder_1;
        _1593 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_692, _693, _694), _1507);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1651 = fma(_756, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748)) + cbModelParam._m0[21u].w;
        float _1655 = fma(_756, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748)) + cbModelParam._m0[22u].w;
        float _1659 = fma(_756, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748)) + cbModelParam._m0[23u].w;
        float _1662 = fma(_694, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692));
        float _1665 = fma(_694, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692));
        float _1668 = fma(_694, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692));
        float _1778;
        if (_1662 > 0.0)
        {
            _1778 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1778 = frontier_phi_33_29_ladder;
        }
        float _2096;
        if (_1665 > 0.0)
        {
            _2096 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2096 = frontier_phi_45_40_ladder;
        }
        float _2434;
        if (_1668 > 0.0)
        {
            _2434 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2434 = frontier_phi_55_52_ladder;
        }
        float _2436 = isnan(_2096) ? _1778 : (isnan(_1778) ? _2096 : min(_1778, _2096));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1662) + _1651;
        float _2442 = (_2437 * _1665) + _1655;
        float _2443 = (_2437 * _1668) + _1659;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2444;
        float _2447 = _2444 + 1.0;
        float frontier_phi_30_55_ladder;
        float frontier_phi_30_55_ladder_1;
        float frontier_phi_30_55_ladder_2;
        if ((_2443 > _2447) || ((_2443 < _2445) || ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 < _2445) || (_2441 > _2447))))))
        {
            frontier_phi_30_55_ladder = 0.0;
            frontier_phi_30_55_ladder_1 = 0.0;
            frontier_phi_30_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2443, cbModelParam._m0[17u].z, fma(_2442, cbModelParam._m0[17u].y, _2441 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2443, cbModelParam._m0[18u].z, fma(_2442, cbModelParam._m0[18u].y, _2441 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2443, cbModelParam._m0[19u].z, fma(_2442, cbModelParam._m0[19u].y, _2441 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_30_55_ladder = _2565.z * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_1 = _2565.y * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_2 = _2565.x * cbModelParam._m0[1u].z;
        }
        _1687 = frontier_phi_30_55_ladder_2;
        _1689 = frontier_phi_30_55_ladder_1;
        _1691 = frontier_phi_30_55_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_692, _693, _694), _1598);
        _1687 = _1671.x * cbModelParam._m0[1u].z;
        _1689 = _1671.y * cbModelParam._m0[1u].z;
        _1691 = _1671.z * cbModelParam._m0[1u].z;
    }
    float _1704 = (((_719 * _669) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1706 = (((_719 * _671) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1689 - _1591)) + _1591);
    float _1708 = (((_719 * _672) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1691 - _1593)) + _1593);
    float _1711 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, _1704 * cbSceneParam._m0[91u].x));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1765 = _1752 / _1764;
    float _1766 = _1756 / _1764;
    float _1767 = _1760 / _1764;
    float _1914;
    float _1915;
    float _1916;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1794 = ((uint(_1767 > cbSceneParam._m0[59u].y) + uint(_1767 > cbSceneParam._m0[59u].x)) + uint(_1767 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1795 = _1794 + 43u;
        uint _1803 = _1794 + 44u;
        uint _1811 = _1794 + 45u;
        uint _1819 = _1794 + 46u;
        float _1830 = fma(_1764, cbSceneParam._m0[_1795].w, fma(_1760, cbSceneParam._m0[_1795].z, fma(_1756, cbSceneParam._m0[_1795].y, _1752 * cbSceneParam._m0[_1795].x)));
        float _1834 = fma(_1764, cbSceneParam._m0[_1803].w, fma(_1760, cbSceneParam._m0[_1803].z, fma(_1756, cbSceneParam._m0[_1803].y, _1752 * cbSceneParam._m0[_1803].x)));
        float _1842 = fma(_1764, cbSceneParam._m0[_1819].w, fma(_1760, cbSceneParam._m0[_1819].z, fma(_1756, cbSceneParam._m0[_1819].y, _1752 * cbSceneParam._m0[_1819].x)));
        float _1847 = cbSceneParam._m0[33u].z * _1842;
        float _1849 = cbSceneParam._m0[33u].w * _1842;
        float _1852 = fma(_1764, cbSceneParam._m0[_1811].w, fma(_1760, cbSceneParam._m0[_1811].z, fma(_1756, cbSceneParam._m0[_1811].y, _1752 * cbSceneParam._m0[_1811].x))) / _1842;
        float _1900 = (cbSceneParam._m0[33u].x - sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767))) * cbSceneParam._m0[33u].y;
        float _4178 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1907 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 + _1830) / _1842, (_1849 + _1834) / _1842), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 + _1830) / _1842, (_1834 - _1847) / _1842), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1830 - _1847) / _1842, (_1834 - _1849) / _1842), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1830 - _1849) / _1842, (_1847 + _1834) / _1842), _1852), 0.0)).x), vec4(0.25)));
        _1914 = 1.0 - (_1907 * cbSceneParam._m0[34u].x);
        _1915 = 1.0 - (_1907 * cbSceneParam._m0[34u].y);
        _1916 = 1.0 - (_1907 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1914 = 1.0;
        _1915 = 1.0;
        _1916 = 1.0;
    }
    float _1980;
    float _1982;
    float _1984;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1968 = fma(_1764, cbSceneParam._m0[63u].w, fma(_1760, cbSceneParam._m0[63u].z, fma(_1756, cbSceneParam._m0[63u].y, _1752 * cbSceneParam._m0[63u].x)));
        float _1969 = fma(_1764, cbSceneParam._m0[60u].w, fma(_1760, cbSceneParam._m0[60u].z, fma(_1756, cbSceneParam._m0[60u].y, _1752 * cbSceneParam._m0[60u].x))) / _1968;
        float _1970 = fma(_1764, cbSceneParam._m0[61u].w, fma(_1760, cbSceneParam._m0[61u].z, fma(_1756, cbSceneParam._m0[61u].y, _1752 * cbSceneParam._m0[61u].x))) / _1968;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1969 >= cbSceneParam._m0[64u].x) && (_1970 >= cbSceneParam._m0[64u].y)) && (_1969 <= cbSceneParam._m0[64u].z)) && (_1970 <= cbSceneParam._m0[64u].w))
        {
            float _2109 = fma(_1764, cbSceneParam._m0[62u].w, fma(_1760, cbSceneParam._m0[62u].z, fma(_1756, cbSceneParam._m0[62u].y, _1752 * cbSceneParam._m0[62u].x))) / _1968;
            float _2113 = isnan(cbSceneParam._m0[41u].w) ? _2109 : (isnan(_2109) ? cbSceneParam._m0[41u].w : max(_2109, cbSceneParam._m0[41u].w));
            float _2156 = (cbSceneParam._m0[33u].x - sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767))) * cbSceneParam._m0[33u].y;
            float _4194 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
            float _2163 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1969, cbSceneParam._m0[33u].w + _1970), _2113), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1969, _1970 - cbSceneParam._m0[33u].z), _2113), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1969 - cbSceneParam._m0[33u].z, _1970 - cbSceneParam._m0[33u].w), _2113), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1969 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1970), _2113), 0.0)).x), vec4(0.25)));
            float _2167 = 1.0 - (_2163 * cbSceneParam._m0[34u].x);
            float _2168 = 1.0 - (_2163 * cbSceneParam._m0[34u].y);
            float _2169 = 1.0 - (_2163 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2169) ? _1916 : (isnan(_1916) ? _2169 : min(_1916, _2169));
            frontier_phi_42_41_ladder_1 = isnan(_2168) ? _1915 : (isnan(_1915) ? _2168 : min(_1915, _2168));
            frontier_phi_42_41_ladder_2 = isnan(_2167) ? _1914 : (isnan(_1914) ? _2167 : min(_1914, _2167));
        }
        else
        {
            frontier_phi_42_41_ladder = _1916;
            frontier_phi_42_41_ladder_1 = _1915;
            frontier_phi_42_41_ladder_2 = _1914;
        }
        _1980 = frontier_phi_42_41_ladder_2;
        _1982 = frontier_phi_42_41_ladder_1;
        _1984 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1980 = _1914;
        _1982 = _1915;
        _1984 = _1916;
    }
    uvec4 _1989 = floatBitsToUint(cbInstanceData._m0[_611 + 5u]);
    uint _1991 = _1989.x * 14u;
    uint _1992 = _1991 + 13u;
    float _1999 = _684 + (-1.0);
    float _2004 = (cbLight._m0[_1992].x * _1999) + 1.0;
    float _2005 = (cbLight._m0[_1992].y * _1999) + 1.0;
    float _2006 = (cbLight._m0[_1992].z * _1999) + 1.0;
    float _2007 = (cbLight._m0[_1992].w * _1999) + 1.0;
    uint _2008 = _1991 + 5u;
    float _2014 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2018 = _1991 + 4u;
    float _2028 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
    uint _2032 = _1991 | 1u;
    float _2043 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_465, _466, _467));
    float _2046 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_465, _466, _467));
    float _4230 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _4241 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2051 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.3183098733425140380859375;
    float _2053 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2060 = ((cbLight._m0[_2008].x * _2014) * _2053) + (((cbLight._m0[_2018].x * _1980) * _2028) * _2051);
    float _2061 = ((_2014 * cbLight._m0[_2008].y) * _2053) + (((cbLight._m0[_2018].y * _1982) * _2028) * _2051);
    float _2062 = ((_2014 * cbLight._m0[_2008].z) * _2053) + (((cbLight._m0[_2018].z * _1984) * _2028) * _2051);
    uvec4 _2066 = floatBitsToUint(cbLight._m0[_1991 + 12u]);
    bool _2068 = _2066.x == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2068)
    {
        _2170 = _2060;
        _2172 = _2061;
        _2174 = _2062;
    }
    else
    {
        uint _2178 = _1991 + 6u;
        float _2194 = (dot(vec3(cbLight._m0[_1991 + 2u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4252 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2197 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2170 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _2060;
        _2172 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _2061;
        _2174 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _2062;
    }
    bool _2177 = _2066.y == 0u;
    float _2232;
    float _2234;
    float _2236;
    if (_2177)
    {
        _2232 = _2170;
        _2234 = _2172;
        _2236 = _2174;
    }
    else
    {
        uint _2405 = _1991 + 7u;
        float _2421 = (dot(vec3(cbLight._m0[_1991 + 3u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2422 = _2421 * _2421;
        float _4268 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2423 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2424 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2232 = (((cbLight._m0[_2405].x * 0.3183098733425140380859375) * _2423) * _2424) + _2170;
        _2234 = (((cbLight._m0[_2405].y * 0.3183098733425140380859375) * _2423) * _2424) + _2172;
        _2236 = (((cbLight._m0[_2405].z * 0.3183098733425140380859375) * _2423) * _2424) + _2174;
    }
    uint _2239 = _1991 + 8u;
    float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _598) * 0.949999988079071044921875);
    float _2253 = _2252 * _2252;
    float _2254 = cbLight._m0[_1991].x + _547;
    float _2255 = cbLight._m0[_1991].y + _548;
    float _2256 = cbLight._m0[_1991].z + _549;
    float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
    float _2261 = _2260 * _2254;
    float _2262 = _2260 * _2255;
    float _2263 = _2260 * _2256;
    float _2264 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1991].xyz));
    float _4284 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _2268 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2269 = dot(vec3(_465, _466, _467), vec3(_2261, _2262, _2263));
    float _4306 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2261, _2262, _2263));
    float _4317 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2253 * _2253;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
    float _2290 = 0.959999978542327880859375 - _666;
    float _2292 = 0.959999978542327880859375 - _667;
    float _2293 = 0.959999978542327880859375 - _668;
    float _2300 = 1.0 - _2253;
    float _2311 = (0.5 / (((_2268 * ((_2267 * _2300) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2300) + _2253) * _2267))) * _2267;
    float _4328 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    uint _2327 = _1991 + 9u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _598) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2032].x + _547;
    float _2341 = cbLight._m0[_2032].y + _548;
    float _2342 = cbLight._m0[_2032].z + _549;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2032].xyz));
    float _4339 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2354 = dot(vec3(_465, _466, _467), vec3(_2347, _2348, _2349));
    float _4350 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2358 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2347, _2348, _2349));
    float _4361 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2362 = _2339 * _2339;
    float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
    float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
    float _2380 = 1.0 - _2339;
    float _2390 = (0.5 / (((_2268 * ((_2353 * _2380) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2380) + _2339) * _2353))) * _2353;
    float _4372 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
    float _2402 = (((((_2373 * _2290) + _669) * cbLight._m0[_2327].x) * _2392) * _2014) + ((((cbLight._m0[_2239].x * _1980) * ((_2289 * _2290) + _669)) * _2313) * _2028);
    float _2403 = (((((_2373 * _2292) + _671) * cbLight._m0[_2327].y) * _2392) * _2014) + ((((cbLight._m0[_2239].y * _1982) * ((_2289 * _2292) + _671)) * _2313) * _2028);
    float _2404 = (((((_2373 * _2293) + _672) * cbLight._m0[_2327].z) * _2392) * _2014) + ((((cbLight._m0[_2239].z * _1984) * ((_2289 * _2293) + _672)) * _2313) * _2028);
    float _2460;
    float _2462;
    float _2464;
    if (_2068)
    {
        _2460 = _2402;
        _2462 = _2403;
        _2464 = _2404;
    }
    else
    {
        uint _2466 = _1991 + 2u;
        uint _2470 = _1991 + 10u;
        float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2466].w)) * _598) * 0.949999988079071044921875);
        float _2485 = _2484 * _2484;
        float _2486 = cbLight._m0[_2466].x + _547;
        float _2487 = cbLight._m0[_2466].y + _548;
        float _2488 = cbLight._m0[_2466].z + _549;
        float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
        float _2493 = _2492 * _2486;
        float _2494 = _2492 * _2487;
        float _2495 = _2492 * _2488;
        float _2496 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2466].xyz));
        float _4383 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2499 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2500 = dot(vec3(_465, _466, _467), vec3(_2493, _2494, _2495));
        float _4394 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2504 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_2493, _2494, _2495));
        float _4405 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2508 = _2485 * _2485;
        float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
        float _2519 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
        float _2526 = 1.0 - _2485;
        float _2536 = (0.5 / (((_2268 * ((_2499 * _2526) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2526) + _2485) * _2499))) * _2499;
        float _4416 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2538 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
        float _2539 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2460 = (((((_2519 * _2290) + _669) * cbLight._m0[_2470].x) * _2538) * _2539) + _2402;
        _2462 = (((((_2519 * _2292) + _671) * cbLight._m0[_2470].y) * _2538) * _2539) + _2403;
        _2464 = (((((_2519 * _2293) + _672) * cbLight._m0[_2470].z) * _2538) * _2539) + _2404;
    }
    float _2570;
    float _2572;
    float _2574;
    if (_2177)
    {
        _2570 = _2460;
        _2572 = _2462;
        _2574 = _2464;
    }
    else
    {
        uint _2581 = _1991 + 3u;
        uint _2585 = _1991 + 11u;
        float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2581].w)) * _598) * 0.949999988079071044921875);
        float _2600 = _2599 * _2599;
        float _2601 = cbLight._m0[_2581].x + _547;
        float _2602 = cbLight._m0[_2581].y + _548;
        float _2603 = cbLight._m0[_2581].z + _549;
        float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
        float _2608 = _2607 * _2601;
        float _2609 = _2607 * _2602;
        float _2610 = _2607 * _2603;
        float _2611 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2581].xyz));
        float _4432 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2615 = dot(vec3(_465, _466, _467), vec3(_2608, _2609, _2610));
        float _4443 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2619 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_2608, _2609, _2610));
        float _4454 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2623 = _2600 * _2600;
        float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
        float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
        float _2641 = 1.0 - _2600;
        float _2651 = (0.5 / (((_2268 * ((_2614 * _2641) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2641) + _2600) * _2614))) * _2614;
        float _4465 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2653 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
        float _2654 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2570 = (((((_2634 * _2290) + _669) * cbLight._m0[_2585].x) * _2653) * _2654) + _2460;
        _2572 = (((((_2634 * _2292) + _671) * cbLight._m0[_2585].y) * _2653) * _2654) + _2462;
        _2574 = (((((_2634 * _2293) + _672) * cbLight._m0[_2585].z) * _2653) * _2654) + _2464;
    }
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_1989.y == 0u)
    {
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.x;
        uint _2687 = uint((float(_2675.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _2676))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _2676)));
        float _2697 = (log2(_1767 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2698 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        uint _2701 = uint(isnan(14.0) ? _2698 : (isnan(_2698) ? 14.0 : min(_2698, 14.0)));
        uvec4 _2706 = texelFetch(g_lightClusterGridBuffer, int(((_2701 << 2u) + (_2687 << 6u)) >> 2u));
        uint _2707 = _2706.x;
        uint _2708 = _2675.z;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((((1u << ((_2708 >> 4u) & 15u)) + 4294967295u) & _2707) == 0u) || ((_2708 & 240u) == 0u))
        {
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
        }
        else
        {
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            uint _2954 = 0u;
            uint _2963;
            bool _2964;
            for (;;)
            {
                _2963 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_2954 << 2u)) >> 2u)).x;
                _2964 = _2963 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2964)
                {
                    frontier_phi_74_pred = _2952;
                    frontier_phi_74_pred_1 = _2953;
                    frontier_phi_74_pred_2 = _2951;
                    frontier_phi_74_pred_3 = _2950;
                    frontier_phi_74_pred_4 = _2949;
                    frontier_phi_74_pred_5 = _2948;
                }
                else
                {
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    uint _3078;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2963;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    for (;;)
                    {
                        uint _3082 = uint(findLSB(_3078)) + (_2954 << 5u);
                        uint _3079 = (_3078 + 4294967295u) & _3078;
                        uint _3084 = _3082 * 48u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3104 = (_3082 * 48u) + 4u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3123 = (_3082 * 48u) + 8u;
                        vec3 _3134 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x));
                        float _3138 = _3098.x - _1765;
                        float _3139 = _3098.y - _1766;
                        float _3140 = _3098.z - _1767;
                        float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                        float _3144 = inversesqrt(_3141);
                        float _3145 = _3144 * _3138;
                        float _3146 = _3144 * _3139;
                        float _3147 = _3144 * _3140;
                        float _3148 = dot(vec3(_579, _582, _585), vec3(_3145, _3146, _3147));
                        float _3153 = 1.0 - (_3141 * _3098.w);
                        float _4491 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3155 = sqrt(_3141) * _3117.w;
                        float _3158 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3148) + _3159;
                        float _3165 = _3155 * _3155;
                        float _3169 = ((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3154) / ((_3165 * 0.699999988079071044921875) + 1.0);
                        float _3173 = (-0.0) - _1765;
                        float _3174 = (-0.0) - _1766;
                        float _3175 = (-0.0) - _1767;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3189 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _700;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3202 = _3182 + _3147;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_579, _582, _585), vec3(_3180, _3181, _3182));
                        float _4507 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3214 = dot(vec3(_579, _582, _585), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4518 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3158 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3148) + _3223;
                        float _4529 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4540 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3221 * _3221) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125))) * _3154;
                        _3007 = (_3169 * _3117.x) + _3075;
                        _3008 = (_3169 * _3117.y) + _3076;
                        _3009 = (_3169 * _3117.z) + _3077;
                        _3004 = (_3249 * _3134.x) + _3072;
                        _3005 = (_3249 * _3134.y) + _3073;
                        _3006 = (_3249 * _3134.z) + _3074;
                        if (_3079 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3079;
                        }
                    }
                    frontier_phi_74_pred = _3008;
                    frontier_phi_74_pred_1 = _3009;
                    frontier_phi_74_pred_2 = _3007;
                    frontier_phi_74_pred_3 = _3006;
                    frontier_phi_74_pred_4 = _3005;
                    frontier_phi_74_pred_5 = _3004;
                }
                _2813 = frontier_phi_74_pred;
                _2815 = frontier_phi_74_pred_1;
                _2811 = frontier_phi_74_pred_2;
                _2809 = frontier_phi_74_pred_3;
                _2807 = frontier_phi_74_pred_4;
                _2805 = frontier_phi_74_pred_5;
                uint _2955 = _2954 + 1u;
                if (_2955 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2948 = _2805;
                    _2949 = _2807;
                    _2950 = _2809;
                    _2951 = _2811;
                    _2952 = _2813;
                    _2953 = _2815;
                    _2954 = _2955;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
        }
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.z;
        uint _2821 = (_2819 >> 8u) & 15u;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        if (((4294967295u << _2821) & _2707) == 0u)
        {
            _2916 = _2804;
            _2918 = _2806;
            _2920 = _2808;
            _2922 = _2810;
            _2924 = _2812;
            _2926 = _2814;
        }
        else
        {
            float _2941 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
            float _2942 = _2941 * _1765;
            float _2943 = _2941 * _1766;
            float _2944 = _2941 * _1767;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2821 < ((_2819 >> 12u) & 15u))
            {
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _3055 = _2804;
                float _3056 = _2806;
                float _3057 = _2808;
                float _3058 = _2810;
                float _3059 = _2812;
                float _3060 = _2814;
                uint _3061 = _2821;
                uint _3070;
                bool _3071;
                for (;;)
                {
                    _3070 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                    _3071 = _3070 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_3071)
                    {
                        frontier_phi_80_pred = _3060;
                        frontier_phi_80_pred_1 = _3059;
                        frontier_phi_80_pred_2 = _3058;
                        frontier_phi_80_pred_3 = _3057;
                        frontier_phi_80_pred_4 = _3055;
                        frontier_phi_80_pred_5 = _3056;
                    }
                    else
                    {
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3267 = _3055;
                        float _3268 = _3056;
                        float _3269 = _3057;
                        float _3270 = _3058;
                        float _3271 = _3059;
                        float _3272 = _3060;
                        uint _3273 = _3070;
                        uint _3274;
                        vec4 _3299;
                        float _3300;
                        vec4 _3315;
                        vec3 _3327;
                        vec4 _3343;
                        vec4 _3358;
                        float _3405;
                        bool _3406;
                        for (;;)
                        {
                            uint _3284 = ((_3061 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3273));
                            _3274 = (_3273 + 4294967295u) & _3273;
                            uint _3286 = _3284 * 40u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3300 = _3299.w;
                            uint _3302 = (_3284 * 40u) + 4u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3284 * 40u) + 8u;
                            _3327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x));
                            uint _3330 = (_3284 * 40u) + 16u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3284 * 40u) + 20u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3361 = (_3284 * 40u) + 24u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3380 = (_3284 * 40u) + 28u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3405 = fma(_1767, _3393.z, fma(_1766, _3393.y, _3393.x * _1765)) + _3393.w;
                            _3406 = !((fma(_1767, _3374.z, fma(_1766, _3374.y, _3374.x * _1765)) + _3374.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_3406)
                            {
                                float _3433 = _3299.x - _1765;
                                float _3434 = _3299.y - _1766;
                                float _3435 = _3299.z - _1767;
                                float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                                float _3439 = inversesqrt(_3436);
                                float _3440 = _3439 * _3433;
                                float _3441 = _3439 * _3434;
                                float _3442 = _3439 * _3435;
                                float _3446 = 1.0 - (_3436 / (_3300 * _3300));
                                float _4551 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3451 = sqrt(_3436) * _3315.w;
                                float _3453 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                                float _3454 = _3453 * _3453;
                                float _3457 = ((1.0 - _3454) * dot(vec3(_3440, _3441, _3442), vec3(_579, _582, _585))) + _3454;
                                float _3460 = _3451 * _3451;
                                float _3464 = (fma(_1767, _3343.z, fma(_1766, _3343.y, _3343.x * _1765)) + _3343.w) / _3405;
                                float _3465 = (fma(_1767, _3358.z, fma(_1766, _3358.y, _3358.x * _1765)) + _3358.w) / _3405;
                                float _3469 = 1.0 - dot(vec2(_3464, _3465), vec2(_3464, _3465));
                                float _4567 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3471 = _3470 * (((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3447) / ((_3460 * 0.699999988079071044921875) + 1.0));
                                float _3483 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                                float _3484 = 1.0 - _700;
                                float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                                float _3492 = _3491 * _3491;
                                float _3493 = _3492 * _3492;
                                float _3494 = _3440 - _2942;
                                float _3495 = _3441 - _2943;
                                float _3496 = _3442 - _2944;
                                float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                                float _3504 = dot(vec3(_579, _582, _585), vec3((-0.0) - _2942, (-0.0) - _2943, (-0.0) - _2944));
                                float _4578 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3508 = dot(vec3(_579, _582, _585), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                                float _4589 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                                float _3516 = _3453 * _3492;
                                float _3517 = _3516 * _3516;
                                float _3523 = ((1.0 - _3517) * dot(vec3(_579, _582, _585), vec3(_3440, _3441, _3442))) + _3517;
                                float _4600 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3525 = 1.0 - _3492;
                                float _3535 = (0.5 / (((_3524 * ((_3507 * _3525) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3524 * _3525) + _3492) * _3507))) * _3524;
                                float _4611 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3545 = (_3470 * _3447) * (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3515 * _3515) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _3471 * _3315.z;
                                frontier_phi_86_pred_1 = _3471 * _3315.y;
                                frontier_phi_86_pred_2 = _3471 * _3315.x;
                                frontier_phi_86_pred_3 = _3545 * _3327.z;
                                frontier_phi_86_pred_4 = _3545 * _3327.y;
                                frontier_phi_86_pred_5 = _3545 * _3327.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _3554 = frontier_phi_86_pred;
                            _3553 = frontier_phi_86_pred_1;
                            _3552 = frontier_phi_86_pred_2;
                            _3551 = frontier_phi_86_pred_3;
                            _3550 = frontier_phi_86_pred_4;
                            _3549 = frontier_phi_86_pred_5;
                            _3257 = _3552 + _3270;
                            _3258 = _3553 + _3271;
                            _3259 = _3554 + _3272;
                            _3254 = _3549 + _3267;
                            _3255 = _3550 + _3268;
                            _3256 = _3551 + _3269;
                            if (_3274 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3274;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _3259;
                        frontier_phi_80_pred_1 = _3258;
                        frontier_phi_80_pred_2 = _3257;
                        frontier_phi_80_pred_3 = _3256;
                        frontier_phi_80_pred_4 = _3254;
                        frontier_phi_80_pred_5 = _3255;
                    }
                    _2927 = frontier_phi_80_pred;
                    _2925 = frontier_phi_80_pred_1;
                    _2923 = frontier_phi_80_pred_2;
                    _2921 = frontier_phi_80_pred_3;
                    _2917 = frontier_phi_80_pred_4;
                    _2919 = frontier_phi_80_pred_5;
                    uint _3062 = _3061 + 1u;
                    if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3055 = _2917;
                        _3056 = _2919;
                        _3057 = _2921;
                        _3058 = _2923;
                        _3059 = _2925;
                        _3060 = _2927;
                        _3061 = _3062;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2927;
                frontier_phi_68_69_ladder_1 = _2925;
                frontier_phi_68_69_ladder_2 = _2923;
                frontier_phi_68_69_ladder_3 = _2921;
                frontier_phi_68_69_ladder_4 = _2919;
                frontier_phi_68_69_ladder_5 = _2917;
            }
            else
            {
                frontier_phi_68_69_ladder = _2814;
                frontier_phi_68_69_ladder_1 = _2812;
                frontier_phi_68_69_ladder_2 = _2810;
                frontier_phi_68_69_ladder_3 = _2808;
                frontier_phi_68_69_ladder_4 = _2806;
                frontier_phi_68_69_ladder_5 = _2804;
            }
            _2916 = frontier_phi_68_69_ladder_5;
            _2918 = frontier_phi_68_69_ladder_4;
            _2920 = frontier_phi_68_69_ladder_3;
            _2922 = frontier_phi_68_69_ladder_2;
            _2924 = frontier_phi_68_69_ladder_1;
            _2926 = frontier_phi_68_69_ladder;
        }
        float _2931 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
        _2719 = (_2931 * _2922) + _2232;
        _2721 = (_2931 * _2924) + _2234;
        _2723 = (_2931 * _2926) + _2236;
        _2725 = ((_2916 * _669) * _2931) + _2570;
        _2727 = ((_2918 * _671) * _2931) + _2572;
        _2729 = ((_2920 * _672) * _2931) + _2574;
    }
    else
    {
        _2719 = _2232;
        _2721 = _2234;
        _2723 = _2236;
        _2725 = _2570;
        _2727 = _2572;
        _2729 = _2574;
    }
    vec4 _2735 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4627 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4638 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4649 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _2759 = (((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2719 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _684))) + ((_2725 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + (_2735.x * cbMtdParam._m0[3u].x);
    float _2761 = ((_2735.y * cbMtdParam._m0[3u].x) + ((_2727 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2721 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _684)));
    float _2763 = ((_2735.z * cbMtdParam._m0[3u].x) + ((_2729 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2723 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _684)));
    uint _2767 = _611 + 6u;
    float _2775 = _555 / cbSceneParam._m0[86u].x;
    float _2776 = _556 / cbSceneParam._m0[86u].y;
    vec4 _2790 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, (log2((isnan(cbSceneParam._m0[77u].w) ? _488 : (isnan(_488) ? cbSceneParam._m0[77u].w : min(_488, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2792 = _2790.x;
    float _2793 = _2790.y;
    float _2794 = _2790.z;
    float _2795 = _2790.w;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_488 > cbSceneParam._m0[78u].w)
    {
        float _2829 = isnan(_488) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _488 : min(cbSceneParam._m0[80u].w, _488));
        float _2830 = _2829 / _488;
        float _2841 = _2830 * _540;
        float _2842 = _541 * _2830;
        float _2843 = (-0.0) - _2842;
        float _2844 = _2830 * _542;
        float _2846 = (cbSceneParam._m0[77u].w * _2843) / _2829;
        float _2847 = _2846 + cbSceneParam._m0[79u].w;
        float _2848 = cbSceneParam._m0[79u].w - _2842;
        float _2854 = sqrt(((_2841 * _2841) + (_2842 * _2842)) + (_2844 * _2844));
        float _2857 = (1.0 - (cbSceneParam._m0[77u].w / _2829)) * _2854;
        float _2862 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2864 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3017;
        if (abs((_2843 - _2846) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3017 = ((((_2847 > 0.0) ? exp2(_2862 * _2847) : (2.0 - exp2(_2864 * _2847))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2857;
        }
        else
        {
            float _2977 = 1.0 / cbSceneParam._m0[80u].x;
            float _2978 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : max(_2847, _2848));
            float _2979 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : min(_2847, _2848));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            _3017 = ((abs(_2854 / _2843) * cbSceneParam._m0[80u].y) * ((((_2988 - _2989) * 2.0) - ((exp2(_2862 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0)))) - exp2(_2862 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))))) * _2977)) - ((exp2(_2864 * _2988) - exp2(_2864 * _2989)) * _2977))) + (_2857 * cbSceneParam._m0[80u].z);
        }
        vec4 _3019 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, 1.0), 0.0);
        float _3028 = exp2((_3017 * (-1.44269502162933349609375)) * (1.0 - _3019.w));
        float _3029 = log2(_3028);
        float _3045 = log2(_2795);
        _2866 = (exp2(_3045 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].x)) * _3019.x) / cbSceneParam._m0[78u].x)) + _2792;
        _2868 = (exp2(_3045 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].y)) * _3019.y) / cbSceneParam._m0[78u].y)) + _2793;
        _2870 = (exp2(_3045 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].z)) * _3019.z) / cbSceneParam._m0[78u].z)) + _2794;
        _2872 = _3028 * _2795;
    }
    else
    {
        _2866 = _2792;
        _2868 = _2793;
        _2870 = _2794;
        _2872 = _2795;
    }
    float _2884 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2885 = _2884 == 3.0;
    float _2886 = log2(_2872);
    float _2893 = exp2(_2886 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)));
    float _2894 = exp2(_2886 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)));
    float _2895 = exp2(_2886 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)));
    float _2904 = (_2884 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2904 * (_2885 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.y = _2904 * (_2885 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.z = _2904 * (_2885 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.w = cbInstanceData._m0[_2767].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2767].w;
}


