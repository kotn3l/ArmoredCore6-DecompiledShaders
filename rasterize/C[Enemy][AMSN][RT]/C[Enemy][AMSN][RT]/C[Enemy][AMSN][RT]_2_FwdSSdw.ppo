#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1165;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[14u].x;
    _192[0u] = cbMtdParam._m0[14u].y;
    _193[0u] = cbMtdParam._m0[14u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[16u].x;
    _192[2u] = cbMtdParam._m0[16u].y;
    _193[2u] = cbMtdParam._m0[16u].z;
    _191[3u] = cbMtdParam._m0[11u].x;
    _192[3u] = cbMtdParam._m0[11u].y;
    _193[3u] = cbMtdParam._m0[11u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[13u].x;
    _192[5u] = cbMtdParam._m0[13u].y;
    _193[5u] = cbMtdParam._m0[13u].z;
    vec4 _352 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _355 = _352.y;
    float _358 = (_352.x + (-0.02500000037252902984619140625)) * 8.0;
    float _360 = roundEven(_358);
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    uint _364 = uint(int(isnan(5.0) ? _361 : (isnan(_361) ? 5.0 : min(_361, 5.0))));
    float _381 = roundEven(5.0 - _358);
    float _382 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _383 = isnan(4.0) ? _382 : (isnan(_382) ? 4.0 : min(_382, 4.0));
    float _389;
    float _391;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _389 = cbMtdParam._m0[26u].x;
        _391 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _389 = cbMtdParam._m0[22u].x;
        _391 = cbMtdParam._m0[22u].y;
    }
    float _393 = _389 * TEXCOORD.x;
    float _394 = _391 * TEXCOORD.y;
    float _405 = floor(_383);
    vec4 _408 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _393) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _394) + cbTextureTilingScale._m0[6u].w, _405));
    vec4 _430 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _438 = ((((((_191[_364] - cbMtdParam._m0[18u].x) * _355) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _408.x) * cbMtdParam._m0[9u].x) * _430.x;
    float _442 = ((((((_192[_364] - cbMtdParam._m0[18u].y) * _355) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _408.y) * cbMtdParam._m0[9u].y) * _430.y;
    float _446 = ((((((_193[_364] - cbMtdParam._m0[18u].z) * _355) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _408.z) * cbMtdParam._m0[9u].z) * _430.z;
    vec4 _458 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _462 = _458.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[22u].z;
    _187[0u] = cbMtdParam._m0[22u].w;
    _186[1u] = cbMtdParam._m0[23u].z;
    _187[1u] = cbMtdParam._m0[23u].w;
    _186[2u] = cbMtdParam._m0[24u].x;
    _187[2u] = cbMtdParam._m0[24u].y;
    _186[3u] = cbMtdParam._m0[24u].z;
    _187[3u] = cbMtdParam._m0[24u].w;
    _186[4u] = cbMtdParam._m0[23u].x;
    _187[4u] = cbMtdParam._m0[23u].y;
    float _506 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    uint _508 = uint(int(isnan(4.0) ? _506 : (isnan(_506) ? 4.0 : min(_506, 4.0))));
    float _513 = _187[_508] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _393) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _394) + cbTextureTilingScale._m0[8u].w, _405)).x;
    vec4 _532 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _393) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _394) + cbTextureTilingScale._m0[7u].w, _405));
    float _539 = (_532.x * 2.0) + (-1.0);
    float _540 = (_532.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3565 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))));
    float _556 = (cbMtdParam._m0[20u].x * (((_462 * 2.0) * (_532.z + _186[_508])) - _462)) + _462;
    float _560 = (cbMtdParam._m0[20u].y * ((_458.x * 2.0) + (-1.0))) + _539;
    float _561 = (cbMtdParam._m0[20u].y * ((_458.y * 2.0) + (-1.0))) + _540;
    float _564 = fma(_547, _243, fma(_561, _235 * TANGENT.x, (_221 * _213) * _560));
    float _567 = fma(_547, _244, fma(_561, _235 * TANGENT.y, (_221 * _214) * _560));
    float _570 = fma(_547, _245, fma(_561, _235 * TANGENT.z, (_221 * _215) * _560));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3576 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _578 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3598 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3609 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3620 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _582 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _667 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _669 = _667.w;
    float _687 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _690 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _693 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    vec4 _695 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _706 = (((_695.y - _578) + (_695.w * _578)) * cbMtdParam._m0[3u].x) + _578;
    uint _719 = uint(roundEven(NORMAL.w)) * 13u;
    uint _721 = (_719 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_721].z;
    float _3631 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    vec4 _733 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _738 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _749 = (((_738.x - _582) + (_738.w * _582)) * cbMtdParam._m0[3u].x) + _582;
    float _762 = (cbMtdParam._m0[3u].x * (((_730 * _669) - _730) + _733.x)) + _730;
    float _763 = (cbMtdParam._m0[3u].x * (((_731 * _669) - _731) + _733.y)) + _731;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _669) - _732) + _733.z)) + _732;
    float _765 = 1.0 - _749;
    float _766 = _765 * _762;
    float _767 = _765 * _763;
    float _768 = _765 * _764;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _749;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _749;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _749;
    float _776 = _773 + 0.039999999105930328369140625;
    float _778 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    vec4 _788 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _791 = _788.x * TEXCOORD_4;
    float _792 = dot(vec3(_575, _576, _577), vec3(_656, _657, _658));
    float _795 = _792 * 2.0;
    float _799 = (_795 * _575) - _656;
    float _800 = (_795 * _576) - _657;
    float _801 = (_795 * _577) - _658;
    float _805 = abs(dot(vec3(_656, _657, _658), vec3(_575, _576, _577)));
    float _3664 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _807 = sqrt(_706);
    float _818 = exp2((_807 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_807 * 3.0));
    float _824 = (1.0 - _818) * ((_807 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _825 = _818 * _807;
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1164;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _889 = fma(_861, cbModelParam._m0[26u].z, fma(_857, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853));
        float _893 = fma(_861, cbModelParam._m0[27u].z, fma(_857, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853));
        float _897 = fma(_861, cbModelParam._m0[28u].z, fma(_857, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853));
        float _922 = _853 + _575;
        float _923 = _857 + _576;
        float _924 = _861 + _577;
        float _934 = fma(_924, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922)) - _889;
        float _935 = fma(_924, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922)) - _893;
        float _936 = fma(_924, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922)) - _897;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_889 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_893 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[34u].z) + ((((((_897 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _992 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_958.x + (-0.5));
        float _994 = _992 * (_958.y + (-0.5));
        float _995 = _992 * (_958.z + (-0.5));
        float _1002 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_965.x + (-0.5));
        float _1004 = _1002 * (_965.y + (-0.5));
        float _1005 = _1002 * (_965.z + (-0.5));
        float _1012 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_972.x + (-0.5));
        float _1014 = _1012 * (_972.y + (-0.5));
        float _1015 = _1012 * (_972.z + (-0.5));
        float _1022 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_979.x + (-0.5));
        float _1024 = _1022 * (_979.y + (-0.5));
        float _1025 = _1022 * (_979.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1046 = (dot(vec3(_575, _576, _577), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1056 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3712 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1058 + 1.0))) + _1063) * _1026;
        float _1073 = _994 * 0.5;
        float _1074 = _1004 * 0.5;
        float _1075 = _1014 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_575, _576, _577), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3745 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1100 + 1.0))) + _1105) * _1027;
        float _1115 = _995 * 0.5;
        float _1116 = _1005 * 0.5;
        float _1117 = _1015 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_575, _576, _577), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3778 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1142 + 1.0))) + _1147) * _1028;
        _1164 = _995;
        _1166 = _994;
        _1167 = _993;
        _1168 = _1005;
        _1169 = _1004;
        _1170 = _1003;
        _1171 = _1015;
        _1172 = _1014;
        _1173 = _1013;
        _1174 = _1028;
        _1175 = _1027;
        _1176 = _1026;
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _1165;
        _1166 = _1165;
        _1167 = _1165;
        _1168 = _1165;
        _1169 = _1165;
        _1170 = _1165;
        _1171 = _1165;
        _1172 = _1165;
        _1173 = _1165;
        _1174 = _1165;
        _1175 = _1165;
        _1176 = _1165;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1205 = fma(_861, cbModelParam._m0[30u].z, fma(_857, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853));
        float _1209 = fma(_861, cbModelParam._m0[31u].z, fma(_857, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853));
        float _1213 = fma(_861, cbModelParam._m0[32u].z, fma(_857, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853));
        float _1236 = _853 + _575;
        float _1237 = _857 + _576;
        float _1238 = _861 + _577;
        float _1248 = fma(_1238, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1236)) - _1205;
        float _1249 = fma(_1238, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1236)) - _1209;
        float _1250 = fma(_1238, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1236)) - _1213;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1205 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1209 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[35u].z) + ((((((_1213 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1304 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1271.x + (-0.5));
        float _1306 = _1304 * (_1271.y + (-0.5));
        float _1307 = _1304 * (_1271.z + (-0.5));
        float _1314 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1278.x + (-0.5));
        float _1316 = _1314 * (_1278.y + (-0.5));
        float _1317 = _1314 * (_1278.z + (-0.5));
        float _1324 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1285.x + (-0.5));
        float _1326 = _1324 * (_1285.y + (-0.5));
        float _1327 = _1324 * (_1285.z + (-0.5));
        float _1334 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1292.x + (-0.5));
        float _1336 = _1334 * (_1292.y + (-0.5));
        float _1337 = _1334 * (_1292.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_575, _576, _577), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3841 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1368 + 1.0))) + _1373) * _1338;
        float _1383 = _1306 * 0.5;
        float _1384 = _1316 * 0.5;
        float _1385 = _1326 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_575, _576, _577), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3874 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1410 + 1.0))) + _1415) * _1339;
        float _1425 = _1307 * 0.5;
        float _1426 = _1317 * 0.5;
        float _1427 = _1327 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_575, _576, _577), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3907 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1452 + 1.0))) + _1457) * _1340;
        _1474 = _1307;
        _1475 = _1306;
        _1476 = _1305;
        _1477 = _1317;
        _1478 = _1316;
        _1479 = _1315;
        _1480 = _1327;
        _1481 = _1326;
        _1482 = _1325;
        _1483 = _1340;
        _1484 = _1339;
        _1485 = _1338;
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1165;
        _1475 = _1165;
        _1476 = _1165;
        _1477 = _1165;
        _1478 = _1165;
        _1479 = _1165;
        _1480 = _1165;
        _1481 = _1165;
        _1482 = _1165;
        _1483 = _1165;
        _1484 = _1165;
        _1485 = _1165;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1177)) + _1177;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1178)) + _1178;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1179)) + _1179;
    float _1521 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1498));
    float _1542 = _799 * 0.5;
    float _1543 = _800 * 0.5;
    float _1544 = _801 * 0.5;
    float _1545 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1548 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1551 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1585;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1558 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1164, _1168, _1171, _1174));
        float _1562 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1566 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1573 = dot(vec4(cbModelParam._m0[39u]), vec4(_1542, _1543, _1544, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1596;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1587 = dot(vec4(cbModelParam._m0[40u]), vec4(_1542, _1543, _1544, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1600 = (_1596 * cbModelParam._m0[1u].x) + (_1585 * (1.0 - cbModelParam._m0[1u].x));
    float _1610 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _706);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1610 : min(cbModelParam._m0[25u].z, _1610));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1658 = fma(_861, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853)) + cbModelParam._m0[13u].w;
        float _1662 = fma(_861, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853)) + cbModelParam._m0[14u].w;
        float _1666 = fma(_861, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853)) + cbModelParam._m0[15u].w;
        float _1669 = fma(_801, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799));
        float _1672 = fma(_801, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799));
        float _1675 = fma(_801, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799));
        float _1703;
        if (_1669 > 0.0)
        {
            _1703 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1703 = frontier_phi_18_16_ladder;
        }
        float _1926;
        if (_1672 > 0.0)
        {
            _1926 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1926 = frontier_phi_27_23_ladder;
        }
        float _2183;
        if (_1675 > 0.0)
        {
            _2183 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2183 = frontier_phi_39_34_ladder;
        }
        float _2185 = isnan(_1926) ? _1703 : (isnan(_1703) ? _1926 : min(_1703, _1926));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1669) + _1658;
        float _2191 = (_2186 * _1672) + _1662;
        float _2192 = (_2186 * _1675) + _1666;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1611);
            frontier_phi_17_39_ladder = _2320.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2320.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2320.x * cbModelParam._m0[1u].y;
        }
        _1691 = frontier_phi_17_39_ladder_2;
        _1693 = frontier_phi_17_39_ladder_1;
        _1695 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_799, _800, _801), _1611);
        _1691 = _1679.x * cbModelParam._m0[1u].y;
        _1693 = _1679.y * cbModelParam._m0[1u].y;
        _1695 = _1679.z * cbModelParam._m0[1u].y;
    }
    float _1699 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _706);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1699 : min(cbModelParam._m0[25u].w, _1699));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_861, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_861, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_861, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_801, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799));
        float _1767 = fma(_801, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799));
        float _1770 = fma(_801, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799));
        float _1931;
        if (_1764 > 0.0)
        {
            _1931 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1931 = frontier_phi_29_25_ladder;
        }
        float _2210;
        if (_1767 > 0.0)
        {
            _2210 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2210 = frontier_phi_41_36_ladder;
        }
        float _2423;
        if (_1770 > 0.0)
        {
            _2423 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2423 = frontier_phi_50_47_ladder;
        }
        float _2425 = isnan(_2210) ? _1931 : (isnan(_1931) ? _2210 : min(_1931, _2210));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1764) + _1753;
        float _2431 = (_2426 * _1767) + _1757;
        float _2432 = (_2426 * _1770) + _1761;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2433;
        float _2436 = _2433 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2432 > _2436) || ((_2432 < _2434) || ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 < _2434) || (_2430 > _2436))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2432, cbModelParam._m0[17u].z, fma(_2431, cbModelParam._m0[17u].y, _2430 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2432, cbModelParam._m0[18u].z, fma(_2431, cbModelParam._m0[18u].y, _2430 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2432, cbModelParam._m0[19u].z, fma(_2431, cbModelParam._m0[19u].y, _2430 * cbModelParam._m0[19u].x))), _1700);
            frontier_phi_26_50_ladder = _2648.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2648.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2648.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_26_50_ladder_2;
        _1791 = frontier_phi_26_50_ladder_1;
        _1793 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_799, _800, _801), _1700);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1806 = (((_824 * _776) + _825) * _791) * ((cbModelParam._m0[1u].w * (_1789 - _1691)) + _1691);
    float _1808 = (((_824 * _778) + _825) * _791) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1810 = (((_824 * _779) + _825) * _791) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1813 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    vec4 _1827 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_664, _665));
    float _1829 = _1827.w;
    float _1841 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1829);
    float _1842 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1829);
    float _1843 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1829);
    uvec4 _1847 = floatBitsToUint(cbInstanceData._m0[_719 + 5u]);
    uint _1849 = _1847.x * 14u;
    uint _1850 = _1849 + 13u;
    float _1857 = _791 + (-1.0);
    float _1862 = (cbLight._m0[_1850].x * _1857) + 1.0;
    float _1863 = (cbLight._m0[_1850].y * _1857) + 1.0;
    float _1864 = (cbLight._m0[_1850].z * _1857) + 1.0;
    float _1865 = (cbLight._m0[_1850].w * _1857) + 1.0;
    uint _1866 = _1849 + 5u;
    float _1872 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1876 = _1849 + 4u;
    float _1885 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1889 = _1849 | 1u;
    float _1900 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_575, _576, _577));
    float _1903 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_575, _576, _577));
    float _4043 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _4054 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1908 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1910 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1917 = ((cbLight._m0[_1866].x * _1872) * _1910) + (((cbLight._m0[_1876].x * _1841) * _1885) * _1908);
    float _1918 = ((_1872 * cbLight._m0[_1866].y) * _1910) + (((cbLight._m0[_1876].y * _1842) * _1885) * _1908);
    float _1919 = ((_1872 * cbLight._m0[_1866].z) * _1910) + (((cbLight._m0[_1876].z * _1843) * _1885) * _1908);
    uvec4 _1923 = floatBitsToUint(cbLight._m0[_1849 + 12u]);
    bool _1925 = _1923.x == 0u;
    float _1936;
    float _1938;
    float _1940;
    if (_1925)
    {
        _1936 = _1917;
        _1938 = _1918;
        _1940 = _1919;
    }
    else
    {
        uint _1944 = _1849 + 6u;
        float _1960 = (dot(vec3(cbLight._m0[_1849 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _1961 = _1960 * _1960;
        float _4065 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1963 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _1936 = (((cbLight._m0[_1944].x * 0.3183098733425140380859375) * _1962) * _1963) + _1917;
        _1938 = (((cbLight._m0[_1944].y * 0.3183098733425140380859375) * _1962) * _1963) + _1918;
        _1940 = (((cbLight._m0[_1944].z * 0.3183098733425140380859375) * _1962) * _1963) + _1919;
    }
    bool _1943 = _1923.y == 0u;
    float _1981;
    float _1983;
    float _1985;
    if (_1943)
    {
        _1981 = _1936;
        _1983 = _1938;
        _1985 = _1940;
    }
    else
    {
        uint _2154 = _1849 + 7u;
        float _2170 = (dot(vec3(cbLight._m0[_1849 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _4081 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2173 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1981 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _1936;
        _1983 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _1938;
        _1985 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _1940;
    }
    uint _1988 = _1849 + 8u;
    float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _706) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1849].x + _656;
    float _2004 = cbLight._m0[_1849].y + _657;
    float _2005 = cbLight._m0[_1849].z + _658;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1849].xyz));
    float _4097 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2017 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2018 = dot(vec3(_575, _576, _577), vec3(_2010, _2011, _2012));
    float _4119 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2010, _2011, _2012));
    float _4130 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2002 * _2002;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
    float _2039 = 0.959999978542327880859375 - _773;
    float _2041 = 0.959999978542327880859375 - _774;
    float _2042 = 0.959999978542327880859375 - _775;
    float _2049 = 1.0 - _2002;
    float _2060 = (0.5 / (((_2017 * ((_2016 * _2049) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2049) + _2002) * _2016))) * _2016;
    float _4141 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    uint _2076 = _1849 + 9u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _706) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1889].x + _656;
    float _2090 = cbLight._m0[_1889].y + _657;
    float _2091 = cbLight._m0[_1889].z + _658;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1889].xyz));
    float _4152 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2103 = dot(vec3(_575, _576, _577), vec3(_2096, _2097, _2098));
    float _4163 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2096, _2097, _2098));
    float _4174 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2088 * _2088;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _2129 = 1.0 - _2088;
    float _2139 = (0.5 / (((_2017 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2129) + _2088) * _2102))) * _2102;
    float _4185 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    float _2151 = (((((_2122 * _2039) + _776) * cbLight._m0[_2076].x) * _2141) * _1872) + ((((cbLight._m0[_1988].x * _1841) * ((_2038 * _2039) + _776)) * _2062) * _1885);
    float _2152 = (((((_2122 * _2041) + _778) * cbLight._m0[_2076].y) * _2141) * _1872) + ((((cbLight._m0[_1988].y * _1842) * ((_2038 * _2041) + _778)) * _2062) * _1885);
    float _2153 = (((((_2122 * _2042) + _779) * cbLight._m0[_2076].z) * _2141) * _1872) + ((((cbLight._m0[_1988].z * _1843) * ((_2038 * _2042) + _779)) * _2062) * _1885);
    float _2215;
    float _2217;
    float _2219;
    if (_1925)
    {
        _2215 = _2151;
        _2217 = _2152;
        _2219 = _2153;
    }
    else
    {
        uint _2221 = _1849 + 2u;
        uint _2225 = _1849 + 10u;
        float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _706) * 0.949999988079071044921875);
        float _2240 = _2239 * _2239;
        float _2241 = cbLight._m0[_2221].x + _656;
        float _2242 = cbLight._m0[_2221].y + _657;
        float _2243 = cbLight._m0[_2221].z + _658;
        float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
        float _2248 = _2247 * _2241;
        float _2249 = _2247 * _2242;
        float _2250 = _2247 * _2243;
        float _2251 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2221].xyz));
        float _4196 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2255 = dot(vec3(_575, _576, _577), vec3(_2248, _2249, _2250));
        float _4207 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2259 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2248, _2249, _2250));
        float _4218 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2263 = _2240 * _2240;
        float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
        float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
        float _2281 = 1.0 - _2240;
        float _2291 = (0.5 / (((_2017 * ((_2254 * _2281) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2281) + _2240) * _2254))) * _2254;
        float _4229 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2293 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
        float _2294 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2215 = (((((_2274 * _2039) + _776) * cbLight._m0[_2225].x) * _2293) * _2294) + _2151;
        _2217 = (((((_2274 * _2041) + _778) * cbLight._m0[_2225].y) * _2293) * _2294) + _2152;
        _2219 = (((((_2274 * _2042) + _779) * cbLight._m0[_2225].z) * _2293) * _2294) + _2153;
    }
    float _2329;
    float _2331;
    float _2333;
    if (_1943)
    {
        _2329 = _2215;
        _2331 = _2217;
        _2333 = _2219;
    }
    else
    {
        uint _2340 = _1849 + 3u;
        uint _2344 = _1849 + 11u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _706) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _656;
        float _2361 = cbLight._m0[_2340].y + _657;
        float _2362 = cbLight._m0[_2340].z + _658;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2340].xyz));
        float _4245 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2374 = dot(vec3(_575, _576, _577), vec3(_2367, _2368, _2369));
        float _4256 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4267 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
        float _2400 = 1.0 - _2359;
        float _2410 = (0.5 / (((_2017 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2400) + _2359) * _2373))) * _2373;
        float _4278 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2329 = (((((_2393 * _2039) + _776) * cbLight._m0[_2344].x) * _2412) * _2413) + _2215;
        _2331 = (((((_2393 * _2041) + _778) * cbLight._m0[_2344].y) * _2412) * _2413) + _2217;
        _2333 = (((((_2393 * _2042) + _779) * cbLight._m0[_2344].z) * _2412) * _2413) + _2219;
    }
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_1847.y == 0u)
    {
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2488;
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2488;
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2488;
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.x;
        uint _2515 = uint((float(_2503.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2504))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2504)));
        float _2525 = (log2(_2491 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        uint _2529 = uint(isnan(14.0) ? _2526 : (isnan(_2526) ? 14.0 : min(_2526, 14.0)));
        uvec4 _2534 = texelFetch(g_lightClusterGridBuffer, int(((_2529 << 2u) + (_2515 << 6u)) >> 2u));
        uint _2535 = _2534.x;
        uint _2536 = _2503.z;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        if (((((1u << ((_2536 >> 4u) & 15u)) + 4294967295u) & _2535) == 0u) || ((_2536 & 240u) == 0u))
        {
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
        }
        else
        {
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            uint _2803 = 0u;
            uint _2812;
            bool _2813;
            for (;;)
            {
                _2812 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                _2813 = _2812 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2813)
                {
                    frontier_phi_65_pred = _2802;
                    frontier_phi_65_pred_1 = _2801;
                    frontier_phi_65_pred_2 = _2800;
                    frontier_phi_65_pred_3 = _2799;
                    frontier_phi_65_pred_4 = _2798;
                    frontier_phi_65_pred_5 = _2797;
                }
                else
                {
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    uint _2927;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2812;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2931 = uint(findLSB(_2927)) + (_2803 << 5u);
                        uint _2928 = (_2927 + 4294967295u) & _2927;
                        uint _2933 = _2931 * 48u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2953 = (_2931 * 48u) + 4u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2972 = (_2931 * 48u) + 8u;
                        vec3 _2983 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x));
                        float _2987 = _2947.x - _2489;
                        float _2988 = _2947.y - _2490;
                        float _2989 = _2947.z - _2491;
                        float _2990 = dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989));
                        float _2993 = inversesqrt(_2990);
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _2997 = dot(vec3(_687, _690, _693), vec3(_2994, _2995, _2996));
                        float _3002 = 1.0 - (_2990 * _2947.w);
                        float _4304 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3004 = sqrt(_2990) * _2966.w;
                        float _3007 = 1.39999997615814208984375 / (_3004 + 1.39999997615814208984375);
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2997) + _3008;
                        float _3014 = _3004 * _3004;
                        float _3018 = ((isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))) * _3003) / ((_3014 * 0.699999988079071044921875) + 1.0);
                        float _3022 = (-0.0) - _2489;
                        float _3023 = (-0.0) - _2490;
                        float _3024 = (-0.0) - _2491;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3039 = exp2(log2(1.0 / ((_3014 * 3.5) + 5.0)) * 0.25);
                        float _3040 = 1.0 - _807;
                        float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                        float _3048 = _3047 * _3047;
                        float _3049 = _3048 * _3048;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3052 = _3031 + _2996;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3060 = dot(vec3(_687, _690, _693), vec3(_3029, _3030, _3031));
                        float _4320 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3064 = dot(vec3(_687, _690, _693), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                        float _4331 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                        float _3072 = _3007 * _3048;
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _2997) + _3073;
                        float _4342 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3078 = 1.0 - _3048;
                        float _3088 = (0.5 / (((_3077 * ((_3063 * _3078) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3077 * _3078) + _3048) * _3063))) * _3077;
                        float _4353 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3099 = (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3071 * _3071) * ((_3014 * 2.1991131305694580078125) + 3.141590118408203125))) * _3003;
                        _2856 = (_3018 * _2966.x) + _2924;
                        _2857 = (_3018 * _2966.y) + _2925;
                        _2858 = (_3018 * _2966.z) + _2926;
                        _2853 = (_3099 * _2983.x) + _2921;
                        _2854 = (_3099 * _2983.y) + _2922;
                        _2855 = (_3099 * _2983.z) + _2923;
                        if (_2928 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2928;
                        }
                    }
                    frontier_phi_65_pred = _2858;
                    frontier_phi_65_pred_1 = _2857;
                    frontier_phi_65_pred_2 = _2856;
                    frontier_phi_65_pred_3 = _2855;
                    frontier_phi_65_pred_4 = _2854;
                    frontier_phi_65_pred_5 = _2853;
                }
                _2664 = frontier_phi_65_pred;
                _2662 = frontier_phi_65_pred_1;
                _2660 = frontier_phi_65_pred_2;
                _2658 = frontier_phi_65_pred_3;
                _2656 = frontier_phi_65_pred_4;
                _2654 = frontier_phi_65_pred_5;
                uint _2804 = _2803 + 1u;
                if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2797 = _2654;
                    _2798 = _2656;
                    _2799 = _2658;
                    _2800 = _2660;
                    _2801 = _2662;
                    _2802 = _2664;
                    _2803 = _2804;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
        }
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.z;
        uint _2670 = (_2668 >> 8u) & 15u;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((4294967295u << _2670) & _2535) == 0u)
        {
            _2765 = _2653;
            _2767 = _2655;
            _2769 = _2657;
            _2771 = _2659;
            _2773 = _2661;
            _2775 = _2663;
        }
        else
        {
            float _2790 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
            float _2791 = _2790 * _2489;
            float _2792 = _2790 * _2490;
            float _2793 = _2790 * _2491;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2670 < ((_2668 >> 12u) & 15u))
            {
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2904 = _2653;
                float _2905 = _2655;
                float _2906 = _2657;
                float _2907 = _2659;
                float _2908 = _2661;
                float _2909 = _2663;
                uint _2910 = _2670;
                uint _2919;
                bool _2920;
                for (;;)
                {
                    _2919 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                    _2920 = _2919 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2920)
                    {
                        frontier_phi_71_pred = _2909;
                        frontier_phi_71_pred_1 = _2908;
                        frontier_phi_71_pred_2 = _2907;
                        frontier_phi_71_pred_3 = _2906;
                        frontier_phi_71_pred_4 = _2905;
                        frontier_phi_71_pred_5 = _2904;
                    }
                    else
                    {
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3117 = _2904;
                        float _3118 = _2905;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        uint _3123 = _2919;
                        uint _3124;
                        vec4 _3149;
                        float _3150;
                        vec4 _3165;
                        vec3 _3177;
                        vec4 _3192;
                        vec4 _3207;
                        float _3253;
                        bool _3254;
                        for (;;)
                        {
                            uint _3134 = ((_2910 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3123));
                            _3124 = (_3123 + 4294967295u) & _3123;
                            uint _3136 = _3134 * 40u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3150 = _3149.w;
                            uint _3152 = (_3134 * 40u) + 4u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3134 * 40u) + 8u;
                            _3177 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x));
                            uint _3179 = (_3134 * 40u) + 16u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3194 = (_3134 * 40u) + 20u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3134 * 40u) + 24u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3228 = (_3134 * 40u) + 28u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3253 = fma(_2491, _3241.z, fma(_2490, _3241.y, _3241.x * _2489)) + _3241.w;
                            _3254 = !((fma(_2491, _3222.z, fma(_2490, _3222.y, _3222.x * _2489)) + _3222.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3254)
                            {
                                float _3281 = _3149.x - _2489;
                                float _3282 = _3149.y - _2490;
                                float _3283 = _3149.z - _2491;
                                float _3284 = dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283));
                                float _3287 = inversesqrt(_3284);
                                float _3288 = _3287 * _3281;
                                float _3289 = _3287 * _3282;
                                float _3290 = _3287 * _3283;
                                float _3294 = 1.0 - (_3284 / (_3150 * _3150));
                                float _4364 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3299 = sqrt(_3284) * _3165.w;
                                float _3301 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                                float _3302 = _3301 * _3301;
                                float _3305 = ((1.0 - _3302) * dot(vec3(_3288, _3289, _3290), vec3(_687, _690, _693))) + _3302;
                                float _3308 = _3299 * _3299;
                                float _3312 = (fma(_2491, _3192.z, fma(_2490, _3192.y, _3192.x * _2489)) + _3192.w) / _3253;
                                float _3313 = (fma(_2491, _3207.z, fma(_2490, _3207.y, _3207.x * _2489)) + _3207.w) / _3253;
                                float _3317 = 1.0 - dot(vec2(_3312, _3313), vec2(_3312, _3313));
                                float _4380 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3319 = _3318 * (((isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))) * _3295) / ((_3308 * 0.699999988079071044921875) + 1.0));
                                float _3331 = exp2(log2(1.0 / ((_3308 * 3.5) + 5.0)) * 0.25);
                                float _3332 = 1.0 - _807;
                                float _3339 = sqrt(1.0 - ((1.0 - (_3332 * _3332)) * (1.0 - (_3331 * _3331))));
                                float _3340 = _3339 * _3339;
                                float _3341 = _3340 * _3340;
                                float _3342 = _3288 - _2791;
                                float _3343 = _3289 - _2792;
                                float _3344 = _3290 - _2793;
                                float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                                float _3352 = dot(vec3(_687, _690, _693), vec3((-0.0) - _2791, (-0.0) - _2792, (-0.0) - _2793));
                                float _4391 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3356 = dot(vec3(_687, _690, _693), vec3(_3348 * _3342, _3348 * _3343, _3348 * _3344));
                                float _4402 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3359 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3363 = ((_3359 * _3359) * (_3341 + (-1.0))) + 1.0;
                                float _3364 = _3301 * _3340;
                                float _3365 = _3364 * _3364;
                                float _3371 = ((1.0 - _3365) * dot(vec3(_687, _690, _693), vec3(_3288, _3289, _3290))) + _3365;
                                float _4413 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3373 = 1.0 - _3340;
                                float _3383 = (0.5 / (((_3372 * ((_3355 * _3373) + _3340)) + 9.9999999392252902907785028219223e-09) + (((_3372 * _3373) + _3340) * _3355))) * _3372;
                                float _4424 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3393 = (_3318 * _3295) * (((_3341 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3363 * _3363) * ((_3308 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3319 * _3165.z;
                                frontier_phi_77_pred_1 = _3319 * _3165.y;
                                frontier_phi_77_pred_2 = _3319 * _3165.x;
                                frontier_phi_77_pred_3 = _3393 * _3177.z;
                                frontier_phi_77_pred_4 = _3393 * _3177.y;
                                frontier_phi_77_pred_5 = _3393 * _3177.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_77_pred;
                            _3401 = frontier_phi_77_pred_1;
                            _3400 = frontier_phi_77_pred_2;
                            _3399 = frontier_phi_77_pred_3;
                            _3398 = frontier_phi_77_pred_4;
                            _3397 = frontier_phi_77_pred_5;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            _3104 = _3397 + _3117;
                            _3105 = _3398 + _3118;
                            _3106 = _3399 + _3119;
                            if (_3124 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3124;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3109;
                        frontier_phi_71_pred_1 = _3108;
                        frontier_phi_71_pred_2 = _3107;
                        frontier_phi_71_pred_3 = _3106;
                        frontier_phi_71_pred_4 = _3105;
                        frontier_phi_71_pred_5 = _3104;
                    }
                    _2776 = frontier_phi_71_pred;
                    _2774 = frontier_phi_71_pred_1;
                    _2772 = frontier_phi_71_pred_2;
                    _2770 = frontier_phi_71_pred_3;
                    _2768 = frontier_phi_71_pred_4;
                    _2766 = frontier_phi_71_pred_5;
                    uint _2911 = _2910 + 1u;
                    if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2904 = _2766;
                        _2905 = _2768;
                        _2906 = _2770;
                        _2907 = _2772;
                        _2908 = _2774;
                        _2909 = _2776;
                        _2910 = _2911;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2776;
                frontier_phi_59_60_ladder_1 = _2774;
                frontier_phi_59_60_ladder_2 = _2772;
                frontier_phi_59_60_ladder_3 = _2770;
                frontier_phi_59_60_ladder_4 = _2768;
                frontier_phi_59_60_ladder_5 = _2766;
            }
            else
            {
                frontier_phi_59_60_ladder = _2663;
                frontier_phi_59_60_ladder_1 = _2661;
                frontier_phi_59_60_ladder_2 = _2659;
                frontier_phi_59_60_ladder_3 = _2657;
                frontier_phi_59_60_ladder_4 = _2655;
                frontier_phi_59_60_ladder_5 = _2653;
            }
            _2765 = frontier_phi_59_60_ladder_5;
            _2767 = frontier_phi_59_60_ladder_4;
            _2769 = frontier_phi_59_60_ladder_3;
            _2771 = frontier_phi_59_60_ladder_2;
            _2773 = frontier_phi_59_60_ladder_1;
            _2775 = frontier_phi_59_60_ladder;
        }
        float _2780 = isnan(1.0) ? _791 : (isnan(_791) ? 1.0 : min(_791, 1.0));
        _2547 = (_2780 * _2771) + _1981;
        _2549 = (_2780 * _2773) + _1983;
        _2551 = (_2780 * _2775) + _1985;
        _2553 = ((_2765 * _776) * _2780) + _2329;
        _2555 = ((_2767 * _778) * _2780) + _2331;
        _2557 = ((_2769 * _779) * _2780) + _2333;
    }
    else
    {
        _2547 = _1981;
        _2549 = _1983;
        _2551 = _1985;
        _2553 = _2329;
        _2555 = _2331;
        _2557 = _2333;
    }
    vec4 _2563 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4440 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4451 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4462 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2587 = (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2547 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _791))) + ((_2553 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1600)) * cbPerFrame._m0[3u].x)) + (_2563.x * cbMtdParam._m0[3u].x);
    float _2589 = ((_2563.y * cbMtdParam._m0[3u].x) + ((_2555 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1600)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2549 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _791)));
    float _2591 = ((_2563.z * cbMtdParam._m0[3u].x) + ((_2557 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1600)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2551 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _791)));
    uint _2595 = _719 + 6u;
    float _2603 = _664 / cbSceneParam._m0[86u].x;
    float _2604 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2618 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2620 = _2618.x;
    float _2621 = _2618.y;
    float _2622 = _2618.z;
    float _2623 = _2618.w;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2678 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2679 = _2678 / _598;
        float _2690 = _2679 * _649;
        float _2691 = _650 * _2679;
        float _2692 = (-0.0) - _2691;
        float _2693 = _2679 * _651;
        float _2695 = (cbSceneParam._m0[77u].w * _2692) / _2678;
        float _2696 = _2695 + cbSceneParam._m0[79u].w;
        float _2697 = cbSceneParam._m0[79u].w - _2691;
        float _2703 = sqrt(((_2690 * _2690) + (_2691 * _2691)) + (_2693 * _2693));
        float _2706 = (1.0 - (cbSceneParam._m0[77u].w / _2678)) * _2703;
        float _2711 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2713 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2692 - _2695) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2696 > 0.0) ? exp2(_2711 * _2696) : (2.0 - exp2(_2713 * _2696))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2706;
        }
        else
        {
            float _2826 = 1.0 / cbSceneParam._m0[80u].x;
            float _2827 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : max(_2696, _2697));
            float _2828 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : min(_2696, _2697));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            _2866 = ((abs(_2703 / _2692) * cbSceneParam._m0[80u].y) * ((((_2837 - _2838) * 2.0) - ((exp2(_2711 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0)))) - exp2(_2711 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))))) * _2826)) - ((exp2(_2713 * _2837) - exp2(_2713 * _2838)) * _2826))) + (_2706 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2623);
        _2715 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2620;
        _2717 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2621;
        _2719 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2622;
        _2721 = _2877 * _2623;
    }
    else
    {
        _2715 = _2620;
        _2717 = _2621;
        _2719 = _2622;
        _2721 = _2623;
    }
    float _2733 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2734 = _2733 == 3.0;
    float _2735 = log2(_2721);
    float _2742 = exp2(_2735 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0)));
    float _2743 = exp2(_2735 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)));
    float _2744 = exp2(_2735 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)));
    float _2753 = (_2733 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2753 * (_2734 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.y = _2753 * (_2734 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.z = _2753 * (_2734 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.w = cbInstanceData._m0[_2595].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2595].w;
}


