#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1167;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _265 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[14u].x;
    _192[0u] = cbMtdParam._m0[14u].y;
    _193[0u] = cbMtdParam._m0[14u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[16u].x;
    _192[2u] = cbMtdParam._m0[16u].y;
    _193[2u] = cbMtdParam._m0[16u].z;
    _191[3u] = cbMtdParam._m0[11u].x;
    _192[3u] = cbMtdParam._m0[11u].y;
    _193[3u] = cbMtdParam._m0[11u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[13u].x;
    _192[5u] = cbMtdParam._m0[13u].y;
    _193[5u] = cbMtdParam._m0[13u].z;
    vec4 _354 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _357 = _354.y;
    float _360 = (_354.x + (-0.02500000037252902984619140625)) * 8.0;
    float _362 = roundEven(_360);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    uint _366 = uint(int(isnan(5.0) ? _363 : (isnan(_363) ? 5.0 : min(_363, 5.0))));
    float _383 = roundEven(5.0 - _360);
    float _384 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = isnan(4.0) ? _384 : (isnan(_384) ? 4.0 : min(_384, 4.0));
    float _391;
    float _393;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_265 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _391 = cbMtdParam._m0[26u].x;
        _393 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _391 = cbMtdParam._m0[22u].x;
        _393 = cbMtdParam._m0[22u].y;
    }
    float _395 = _391 * TEXCOORD.x;
    float _396 = _393 * TEXCOORD.y;
    float _407 = floor(_385);
    vec4 _410 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _395) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _396) + cbTextureTilingScale._m0[6u].w, _407));
    vec4 _432 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _440 = ((((((_191[_366] - cbMtdParam._m0[18u].x) * _357) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _410.x) * cbMtdParam._m0[9u].x) * _432.x;
    float _444 = ((((((_192[_366] - cbMtdParam._m0[18u].y) * _357) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _410.y) * cbMtdParam._m0[9u].y) * _432.y;
    float _448 = ((((((_193[_366] - cbMtdParam._m0[18u].z) * _357) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _410.z) * cbMtdParam._m0[9u].z) * _432.z;
    vec4 _460 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _464 = _460.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[22u].z;
    _187[0u] = cbMtdParam._m0[22u].w;
    _186[1u] = cbMtdParam._m0[23u].z;
    _187[1u] = cbMtdParam._m0[23u].w;
    _186[2u] = cbMtdParam._m0[24u].x;
    _187[2u] = cbMtdParam._m0[24u].y;
    _186[3u] = cbMtdParam._m0[24u].z;
    _187[3u] = cbMtdParam._m0[24u].w;
    _186[4u] = cbMtdParam._m0[23u].x;
    _187[4u] = cbMtdParam._m0[23u].y;
    float _508 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    uint _510 = uint(int(isnan(4.0) ? _508 : (isnan(_508) ? 4.0 : min(_508, 4.0))));
    float _515 = _187[_510] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _395) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _396) + cbTextureTilingScale._m0[8u].w, _407)).x;
    vec4 _534 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _395) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _396) + cbTextureTilingScale._m0[7u].w, _407));
    float _541 = (_534.x * 2.0) + (-1.0);
    float _542 = (_534.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3567 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))));
    float _558 = (cbMtdParam._m0[20u].x * (((_464 * 2.0) * (_534.z + _186[_510])) - _464)) + _464;
    float _562 = (cbMtdParam._m0[20u].y * ((_460.x * 2.0) + (-1.0))) + _541;
    float _563 = (cbMtdParam._m0[20u].y * ((_460.y * 2.0) + (-1.0))) + _542;
    float _566 = fma(_549, _243, fma(_563, _235 * TANGENT.x, (_221 * _213) * _562));
    float _569 = fma(_549, _244, fma(_563, _235 * TANGENT.y, (_221 * _214) * _562));
    float _572 = fma(_549, _245, fma(_563, _235 * TANGENT.z, (_221 * _215) * _562));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3578 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _580 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3600 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3611 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3622 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _584 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _669 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _671 = _669.w;
    float _689 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _692 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _695 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    vec4 _697 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = (((_697.y - _580) + (_697.w * _580)) * cbMtdParam._m0[3u].x) + _580;
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _723 = (_721 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3633 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    vec4 _735 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _740 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = (((_740.x - _584) + (_740.w * _584)) * cbMtdParam._m0[3u].x) + _584;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _671) - _732) + _735.x)) + _732;
    float _765 = (cbMtdParam._m0[3u].x * (((_733 * _671) - _733) + _735.y)) + _733;
    float _766 = (cbMtdParam._m0[3u].x * (((_734 * _671) - _734) + _735.z)) + _734;
    float _767 = 1.0 - _751;
    float _768 = _767 * _764;
    float _769 = _767 * _765;
    float _770 = _767 * _766;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _751;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _751;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _751;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _793 = _790.x * TEXCOORD_4;
    float _794 = dot(vec3(_577, _578, _579), vec3(_658, _659, _660));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _577) - _658;
    float _802 = (_797 * _578) - _659;
    float _803 = (_797 * _579) - _660;
    float _807 = abs(dot(vec3(_658, _659, _660), vec3(_577, _578, _579)));
    float _3666 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_708);
    float _820 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _826 = (1.0 - _820) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _827 = _820 * _809;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _895 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _899 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _924 = _855 + _577;
        float _925 = _859 + _578;
        float _926 = _863 + _579;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_577, _578, _579), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3714 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_577, _578, _579), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3747 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_577, _578, _579), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3780 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1211 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1215 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1238 = _855 + _577;
        float _1239 = _859 + _578;
        float _1240 = _863 + _579;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_577, _578, _579), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3843 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_577, _578, _579), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3876 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_577, _578, _579), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3909 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1167;
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1179)) + _1179;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1180)) + _1180;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1181)) + _1181;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _801 * 0.5;
    float _1545 = _802 * 0.5;
    float _1546 = _803 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1660 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1664 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1668 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1671 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1674 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1677 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1705;
        if (_1671 > 0.0)
        {
            _1705 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1705 = frontier_phi_18_16_ladder;
        }
        float _1928;
        if (_1674 > 0.0)
        {
            _1928 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1928 = frontier_phi_27_23_ladder;
        }
        float _2185;
        if (_1677 > 0.0)
        {
            _2185 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2185 = frontier_phi_39_34_ladder;
        }
        float _2187 = isnan(_1928) ? _1705 : (isnan(_1705) ? _1928 : min(_1705, _1928));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1671) + _1660;
        float _2193 = (_2188 * _1674) + _1664;
        float _2194 = (_2188 * _1677) + _1668;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2197 = (-1.0) - _2195;
        float _2199 = _2195 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2194 > _2199) || ((_2194 < _2197) || ((_2193 > _2199) || ((_2193 < _2197) || ((_2192 < _2197) || (_2192 > _2199))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2194, cbModelParam._m0[9u].z, fma(_2193, cbModelParam._m0[9u].y, _2192 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2194, cbModelParam._m0[10u].z, fma(_2193, cbModelParam._m0[10u].y, _2192 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2194, cbModelParam._m0[11u].z, fma(_2193, cbModelParam._m0[11u].y, _2192 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_17_39_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1693 = frontier_phi_17_39_ladder_2;
        _1695 = frontier_phi_17_39_ladder_1;
        _1697 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1613);
        _1693 = _1681.x * cbModelParam._m0[1u].y;
        _1695 = _1681.y * cbModelParam._m0[1u].y;
        _1697 = _1681.z * cbModelParam._m0[1u].y;
    }
    float _1701 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1701 : min(cbModelParam._m0[25u].w, _1701));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1755 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1759 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1763 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1766 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1769 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1772 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1933;
        if (_1766 > 0.0)
        {
            _1933 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1933 = frontier_phi_29_25_ladder;
        }
        float _2212;
        if (_1769 > 0.0)
        {
            _2212 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2212 = frontier_phi_41_36_ladder;
        }
        float _2425;
        if (_1772 > 0.0)
        {
            _2425 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2425 = frontier_phi_50_47_ladder;
        }
        float _2427 = isnan(_2212) ? _1933 : (isnan(_1933) ? _2212 : min(_1933, _2212));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1766) + _1755;
        float _2433 = (_2428 * _1769) + _1759;
        float _2434 = (_2428 * _1772) + _1763;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2435;
        float _2438 = _2435 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2434 > _2438) || ((_2434 < _2436) || ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 < _2436) || (_2432 > _2438))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2434, cbModelParam._m0[17u].z, fma(_2433, cbModelParam._m0[17u].y, _2432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2434, cbModelParam._m0[18u].z, fma(_2433, cbModelParam._m0[18u].y, _2432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2434, cbModelParam._m0[19u].z, fma(_2433, cbModelParam._m0[19u].y, _2432 * cbModelParam._m0[19u].x))), _1702);
            frontier_phi_26_50_ladder = _2650.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2650.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2650.x * cbModelParam._m0[1u].z;
        }
        _1791 = frontier_phi_26_50_ladder_2;
        _1793 = frontier_phi_26_50_ladder_1;
        _1795 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1702);
        _1791 = _1775.x * cbModelParam._m0[1u].z;
        _1793 = _1775.y * cbModelParam._m0[1u].z;
        _1795 = _1775.z * cbModelParam._m0[1u].z;
    }
    float _1808 = (((_826 * _778) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1810 = (((_826 * _780) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1812 = (((_826 * _781) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1795 - _1697)) + _1697);
    float _1815 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1808 * cbSceneParam._m0[91u].x));
    vec4 _1829 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_666, _667));
    float _1831 = _1829.w;
    float _1843 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1831);
    float _1844 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1831);
    float _1845 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1831);
    uvec4 _1849 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _1851 = _1849.x * 14u;
    uint _1852 = _1851 + 13u;
    float _1859 = _793 + (-1.0);
    float _1864 = (cbLight._m0[_1852].x * _1859) + 1.0;
    float _1865 = (cbLight._m0[_1852].y * _1859) + 1.0;
    float _1866 = (cbLight._m0[_1852].z * _1859) + 1.0;
    float _1867 = (cbLight._m0[_1852].w * _1859) + 1.0;
    uint _1868 = _1851 + 5u;
    float _1874 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1878 = _1851 + 4u;
    float _1887 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1891 = _1851 | 1u;
    float _1902 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_577, _578, _579));
    float _1905 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_577, _578, _579));
    float _4045 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _4056 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1910 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1912 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1919 = ((cbLight._m0[_1868].x * _1874) * _1912) + (((cbLight._m0[_1878].x * _1843) * _1887) * _1910);
    float _1920 = ((_1874 * cbLight._m0[_1868].y) * _1912) + (((cbLight._m0[_1878].y * _1844) * _1887) * _1910);
    float _1921 = ((_1874 * cbLight._m0[_1868].z) * _1912) + (((cbLight._m0[_1878].z * _1845) * _1887) * _1910);
    uvec4 _1925 = floatBitsToUint(cbLight._m0[_1851 + 12u]);
    bool _1927 = _1925.x == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1927)
    {
        _1938 = _1919;
        _1940 = _1920;
        _1942 = _1921;
    }
    else
    {
        uint _1946 = _1851 + 6u;
        float _1962 = (dot(vec3(cbLight._m0[_1851 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _4067 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1965 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _1938 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1919;
        _1940 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1920;
        _1942 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1921;
    }
    bool _1945 = _1925.y == 0u;
    float _1983;
    float _1985;
    float _1987;
    if (_1945)
    {
        _1983 = _1938;
        _1985 = _1940;
        _1987 = _1942;
    }
    else
    {
        uint _2156 = _1851 + 7u;
        float _2172 = (dot(vec3(cbLight._m0[_1851 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4083 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2175 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _1983 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _1938;
        _1985 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _1940;
        _1987 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _1942;
    }
    uint _1990 = _1851 + 8u;
    float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1851].w)) * _708) * 0.949999988079071044921875);
    float _2004 = _2003 * _2003;
    float _2005 = cbLight._m0[_1851].x + _658;
    float _2006 = cbLight._m0[_1851].y + _659;
    float _2007 = cbLight._m0[_1851].z + _660;
    float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
    float _2012 = _2011 * _2005;
    float _2013 = _2011 * _2006;
    float _2014 = _2011 * _2007;
    float _2015 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1851].xyz));
    float _4099 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2019 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2020 = dot(vec3(_577, _578, _579), vec3(_2012, _2013, _2014));
    float _4121 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_2012, _2013, _2014));
    float _4132 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2004 * _2004;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2040 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
    float _2041 = 0.959999978542327880859375 - _775;
    float _2043 = 0.959999978542327880859375 - _776;
    float _2044 = 0.959999978542327880859375 - _777;
    float _2051 = 1.0 - _2004;
    float _2062 = (0.5 / (((_2019 * ((_2018 * _2051) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2051) + _2004) * _2018))) * _2018;
    float _4143 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    uint _2078 = _1851 + 9u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _708) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1891].x + _658;
    float _2092 = cbLight._m0[_1891].y + _659;
    float _2093 = cbLight._m0[_1891].z + _660;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1891].xyz));
    float _4154 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2105 = dot(vec3(_577, _578, _579), vec3(_2098, _2099, _2100));
    float _4165 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2098, _2099, _2100));
    float _4176 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2090 * _2090;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2124 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
    float _2131 = 1.0 - _2090;
    float _2141 = (0.5 / (((_2019 * ((_2104 * _2131) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2131) + _2090) * _2104))) * _2104;
    float _4187 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    float _2153 = (((((_2124 * _2041) + _778) * cbLight._m0[_2078].x) * _2143) * _1874) + ((((cbLight._m0[_1990].x * _1843) * ((_2040 * _2041) + _778)) * _2064) * _1887);
    float _2154 = (((((_2124 * _2043) + _780) * cbLight._m0[_2078].y) * _2143) * _1874) + ((((cbLight._m0[_1990].y * _1844) * ((_2040 * _2043) + _780)) * _2064) * _1887);
    float _2155 = (((((_2124 * _2044) + _781) * cbLight._m0[_2078].z) * _2143) * _1874) + ((((cbLight._m0[_1990].z * _1845) * ((_2040 * _2044) + _781)) * _2064) * _1887);
    float _2217;
    float _2219;
    float _2221;
    if (_1927)
    {
        _2217 = _2153;
        _2219 = _2154;
        _2221 = _2155;
    }
    else
    {
        uint _2223 = _1851 + 2u;
        uint _2227 = _1851 + 10u;
        float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _708) * 0.949999988079071044921875);
        float _2242 = _2241 * _2241;
        float _2243 = cbLight._m0[_2223].x + _658;
        float _2244 = cbLight._m0[_2223].y + _659;
        float _2245 = cbLight._m0[_2223].z + _660;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2250 = _2249 * _2243;
        float _2251 = _2249 * _2244;
        float _2252 = _2249 * _2245;
        float _2253 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2223].xyz));
        float _4198 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2257 = dot(vec3(_577, _578, _579), vec3(_2250, _2251, _2252));
        float _4209 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2261 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2250, _2251, _2252));
        float _4220 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2265 = _2242 * _2242;
        float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
        float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0);
        float _2283 = 1.0 - _2242;
        float _2293 = (0.5 / (((_2019 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2283) + _2242) * _2256))) * _2256;
        float _4231 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2217 = (((((_2276 * _2041) + _778) * cbLight._m0[_2227].x) * _2295) * _2296) + _2153;
        _2219 = (((((_2276 * _2043) + _780) * cbLight._m0[_2227].y) * _2295) * _2296) + _2154;
        _2221 = (((((_2276 * _2044) + _781) * cbLight._m0[_2227].z) * _2295) * _2296) + _2155;
    }
    float _2331;
    float _2333;
    float _2335;
    if (_1945)
    {
        _2331 = _2217;
        _2333 = _2219;
        _2335 = _2221;
    }
    else
    {
        uint _2342 = _1851 + 3u;
        uint _2346 = _1851 + 11u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _708) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _658;
        float _2363 = cbLight._m0[_2342].y + _659;
        float _2364 = cbLight._m0[_2342].z + _660;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2342].xyz));
        float _4247 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2376 = dot(vec3(_577, _578, _579), vec3(_2369, _2370, _2371));
        float _4258 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4269 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
        float _2402 = 1.0 - _2361;
        float _2412 = (0.5 / (((_2019 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2402) + _2361) * _2375))) * _2375;
        float _4280 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2331 = (((((_2395 * _2041) + _778) * cbLight._m0[_2346].x) * _2414) * _2415) + _2217;
        _2333 = (((((_2395 * _2043) + _780) * cbLight._m0[_2346].y) * _2414) * _2415) + _2219;
        _2335 = (((((_2395 * _2044) + _781) * cbLight._m0[_2346].z) * _2414) * _2415) + _2221;
    }
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_1849.y == 0u)
    {
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2490;
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2490;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2490;
        uvec4 _2505 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2506 = _2505.x;
        uint _2517 = uint((float(_2505.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2506))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2506)));
        float _2527 = (log2(_2493 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2528 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        uint _2531 = uint(isnan(14.0) ? _2528 : (isnan(_2528) ? 14.0 : min(_2528, 14.0)));
        uvec4 _2536 = texelFetch(g_lightClusterGridBuffer, int(((_2531 << 2u) + (_2517 << 6u)) >> 2u));
        uint _2537 = _2536.x;
        uint _2538 = _2505.z;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((((1u << ((_2538 >> 4u) & 15u)) + 4294967295u) & _2537) == 0u) || ((_2538 & 240u) == 0u))
        {
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
        }
        else
        {
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            uint _2805 = 0u;
            uint _2814;
            bool _2815;
            for (;;)
            {
                _2814 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                _2815 = _2814 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2815)
                {
                    frontier_phi_65_pred = _2804;
                    frontier_phi_65_pred_1 = _2803;
                    frontier_phi_65_pred_2 = _2802;
                    frontier_phi_65_pred_3 = _2801;
                    frontier_phi_65_pred_4 = _2800;
                    frontier_phi_65_pred_5 = _2799;
                }
                else
                {
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    uint _2929;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2814;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    for (;;)
                    {
                        uint _2933 = uint(findLSB(_2929)) + (_2805 << 5u);
                        uint _2930 = (_2929 + 4294967295u) & _2929;
                        uint _2935 = _2933 * 48u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2955 = (_2933 * 48u) + 4u;
                        vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2974 = (_2933 * 48u) + 8u;
                        vec3 _2985 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x));
                        float _2989 = _2949.x - _2491;
                        float _2990 = _2949.y - _2492;
                        float _2991 = _2949.z - _2493;
                        float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                        float _2995 = inversesqrt(_2992);
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _2999 = dot(vec3(_689, _692, _695), vec3(_2996, _2997, _2998));
                        float _3004 = 1.0 - (_2992 * _2949.w);
                        float _4306 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3005 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3006 = sqrt(_2992) * _2968.w;
                        float _3009 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2999) + _3010;
                        float _3016 = _3006 * _3006;
                        float _3020 = ((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3005) / ((_3016 * 0.699999988079071044921875) + 1.0);
                        float _3024 = (-0.0) - _2491;
                        float _3025 = (-0.0) - _2492;
                        float _3026 = (-0.0) - _2493;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3041 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                        float _3042 = 1.0 - _809;
                        float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                        float _3050 = _3049 * _3049;
                        float _3051 = _3050 * _3050;
                        float _3052 = _3031 + _2996;
                        float _3053 = _3032 + _2997;
                        float _3054 = _3033 + _2998;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3062 = dot(vec3(_689, _692, _695), vec3(_3031, _3032, _3033));
                        float _4322 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3066 = dot(vec3(_689, _692, _695), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                        float _4333 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                        float _3074 = _3009 * _3050;
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _2999) + _3075;
                        float _4344 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3080 = 1.0 - _3050;
                        float _3090 = (0.5 / (((_3079 * ((_3065 * _3080) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3050) * _3065))) * _3079;
                        float _4355 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3101 = (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3073 * _3073) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125))) * _3005;
                        _2858 = (_3020 * _2968.x) + _2926;
                        _2859 = (_3020 * _2968.y) + _2927;
                        _2860 = (_3020 * _2968.z) + _2928;
                        _2855 = (_3101 * _2985.x) + _2923;
                        _2856 = (_3101 * _2985.y) + _2924;
                        _2857 = (_3101 * _2985.z) + _2925;
                        if (_2930 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2930;
                        }
                    }
                    frontier_phi_65_pred = _2860;
                    frontier_phi_65_pred_1 = _2859;
                    frontier_phi_65_pred_2 = _2858;
                    frontier_phi_65_pred_3 = _2857;
                    frontier_phi_65_pred_4 = _2856;
                    frontier_phi_65_pred_5 = _2855;
                }
                _2666 = frontier_phi_65_pred;
                _2664 = frontier_phi_65_pred_1;
                _2662 = frontier_phi_65_pred_2;
                _2660 = frontier_phi_65_pred_3;
                _2658 = frontier_phi_65_pred_4;
                _2656 = frontier_phi_65_pred_5;
                uint _2806 = _2805 + 1u;
                if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2799 = _2656;
                    _2800 = _2658;
                    _2801 = _2660;
                    _2802 = _2662;
                    _2803 = _2664;
                    _2804 = _2666;
                    _2805 = _2806;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
        }
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.z;
        uint _2672 = (_2670 >> 8u) & 15u;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((4294967295u << _2672) & _2537) == 0u)
        {
            _2767 = _2655;
            _2769 = _2657;
            _2771 = _2659;
            _2773 = _2661;
            _2775 = _2663;
            _2777 = _2665;
        }
        else
        {
            float _2792 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
            float _2793 = _2792 * _2491;
            float _2794 = _2792 * _2492;
            float _2795 = _2792 * _2493;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2672 < ((_2670 >> 12u) & 15u))
            {
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2906 = _2655;
                float _2907 = _2657;
                float _2908 = _2659;
                float _2909 = _2661;
                float _2910 = _2663;
                float _2911 = _2665;
                uint _2912 = _2672;
                uint _2921;
                bool _2922;
                for (;;)
                {
                    _2921 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_2912 << 2u)) >> 2u)).x;
                    _2922 = _2921 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2922)
                    {
                        frontier_phi_71_pred = _2911;
                        frontier_phi_71_pred_1 = _2910;
                        frontier_phi_71_pred_2 = _2909;
                        frontier_phi_71_pred_3 = _2908;
                        frontier_phi_71_pred_4 = _2907;
                        frontier_phi_71_pred_5 = _2906;
                    }
                    else
                    {
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        uint _3125 = _2921;
                        uint _3126;
                        vec4 _3151;
                        float _3152;
                        vec4 _3167;
                        vec3 _3179;
                        vec4 _3194;
                        vec4 _3209;
                        float _3255;
                        bool _3256;
                        for (;;)
                        {
                            uint _3136 = ((_2912 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3125));
                            _3126 = (_3125 + 4294967295u) & _3125;
                            uint _3138 = _3136 * 40u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3152 = _3151.w;
                            uint _3154 = (_3136 * 40u) + 4u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3136 * 40u) + 8u;
                            _3179 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x));
                            uint _3181 = (_3136 * 40u) + 16u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3136 * 40u) + 20u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3136 * 40u) + 24u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3230 = (_3136 * 40u) + 28u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3255 = fma(_2493, _3243.z, fma(_2492, _3243.y, _3243.x * _2491)) + _3243.w;
                            _3256 = !((fma(_2493, _3224.z, fma(_2492, _3224.y, _3224.x * _2491)) + _3224.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3256)
                            {
                                float _3283 = _3151.x - _2491;
                                float _3284 = _3151.y - _2492;
                                float _3285 = _3151.z - _2493;
                                float _3286 = dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285));
                                float _3289 = inversesqrt(_3286);
                                float _3290 = _3289 * _3283;
                                float _3291 = _3289 * _3284;
                                float _3292 = _3289 * _3285;
                                float _3296 = 1.0 - (_3286 / (_3152 * _3152));
                                float _4366 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3301 = sqrt(_3286) * _3167.w;
                                float _3303 = 1.39999997615814208984375 / (_3301 + 1.39999997615814208984375);
                                float _3304 = _3303 * _3303;
                                float _3307 = ((1.0 - _3304) * dot(vec3(_3290, _3291, _3292), vec3(_689, _692, _695))) + _3304;
                                float _3310 = _3301 * _3301;
                                float _3314 = (fma(_2493, _3194.z, fma(_2492, _3194.y, _3194.x * _2491)) + _3194.w) / _3255;
                                float _3315 = (fma(_2493, _3209.z, fma(_2492, _3209.y, _3209.x * _2491)) + _3209.w) / _3255;
                                float _3319 = 1.0 - dot(vec2(_3314, _3315), vec2(_3314, _3315));
                                float _4382 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3321 = _3320 * (((isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))) * _3297) / ((_3310 * 0.699999988079071044921875) + 1.0));
                                float _3333 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                                float _3334 = 1.0 - _809;
                                float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                                float _3342 = _3341 * _3341;
                                float _3343 = _3342 * _3342;
                                float _3344 = _3290 - _2793;
                                float _3345 = _3291 - _2794;
                                float _3346 = _3292 - _2795;
                                float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                                float _3354 = dot(vec3(_689, _692, _695), vec3((-0.0) - _2793, (-0.0) - _2794, (-0.0) - _2795));
                                float _4393 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3358 = dot(vec3(_689, _692, _695), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                                float _4404 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                                float _3366 = _3303 * _3342;
                                float _3367 = _3366 * _3366;
                                float _3373 = ((1.0 - _3367) * dot(vec3(_689, _692, _695), vec3(_3290, _3291, _3292))) + _3367;
                                float _4415 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3375 = 1.0 - _3342;
                                float _3385 = (0.5 / (((_3374 * ((_3357 * _3375) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3342) * _3357))) * _3374;
                                float _4426 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3395 = (_3320 * _3297) * (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3365 * _3365) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3321 * _3167.z;
                                frontier_phi_77_pred_1 = _3321 * _3167.y;
                                frontier_phi_77_pred_2 = _3321 * _3167.x;
                                frontier_phi_77_pred_3 = _3395 * _3179.z;
                                frontier_phi_77_pred_4 = _3395 * _3179.y;
                                frontier_phi_77_pred_5 = _3395 * _3179.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_77_pred;
                            _3403 = frontier_phi_77_pred_1;
                            _3402 = frontier_phi_77_pred_2;
                            _3401 = frontier_phi_77_pred_3;
                            _3400 = frontier_phi_77_pred_4;
                            _3399 = frontier_phi_77_pred_5;
                            _3109 = _3402 + _3122;
                            _3110 = _3403 + _3123;
                            _3111 = _3404 + _3124;
                            _3106 = _3399 + _3119;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            if (_3126 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3126;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3111;
                        frontier_phi_71_pred_1 = _3110;
                        frontier_phi_71_pred_2 = _3109;
                        frontier_phi_71_pred_3 = _3108;
                        frontier_phi_71_pred_4 = _3107;
                        frontier_phi_71_pred_5 = _3106;
                    }
                    _2778 = frontier_phi_71_pred;
                    _2776 = frontier_phi_71_pred_1;
                    _2774 = frontier_phi_71_pred_2;
                    _2772 = frontier_phi_71_pred_3;
                    _2770 = frontier_phi_71_pred_4;
                    _2768 = frontier_phi_71_pred_5;
                    uint _2913 = _2912 + 1u;
                    if (_2913 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2906 = _2768;
                        _2907 = _2770;
                        _2908 = _2772;
                        _2909 = _2774;
                        _2910 = _2776;
                        _2911 = _2778;
                        _2912 = _2913;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2778;
                frontier_phi_59_60_ladder_1 = _2776;
                frontier_phi_59_60_ladder_2 = _2774;
                frontier_phi_59_60_ladder_3 = _2772;
                frontier_phi_59_60_ladder_4 = _2770;
                frontier_phi_59_60_ladder_5 = _2768;
            }
            else
            {
                frontier_phi_59_60_ladder = _2665;
                frontier_phi_59_60_ladder_1 = _2663;
                frontier_phi_59_60_ladder_2 = _2661;
                frontier_phi_59_60_ladder_3 = _2659;
                frontier_phi_59_60_ladder_4 = _2657;
                frontier_phi_59_60_ladder_5 = _2655;
            }
            _2767 = frontier_phi_59_60_ladder_5;
            _2769 = frontier_phi_59_60_ladder_4;
            _2771 = frontier_phi_59_60_ladder_3;
            _2773 = frontier_phi_59_60_ladder_2;
            _2775 = frontier_phi_59_60_ladder_1;
            _2777 = frontier_phi_59_60_ladder;
        }
        float _2782 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2549 = (_2782 * _2773) + _1983;
        _2551 = (_2782 * _2775) + _1985;
        _2553 = (_2782 * _2777) + _1987;
        _2555 = ((_2767 * _778) * _2782) + _2331;
        _2557 = ((_2769 * _780) * _2782) + _2333;
        _2559 = ((_2771 * _781) * _2782) + _2335;
    }
    else
    {
        _2549 = _1983;
        _2551 = _1985;
        _2553 = _1987;
        _2555 = _2331;
        _2557 = _2333;
        _2559 = _2335;
    }
    vec4 _2565 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4442 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4453 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4464 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2589 = (((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2549 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _793))) + ((_2555 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + (_2565.x * cbMtdParam._m0[3u].x);
    float _2591 = ((_2565.y * cbMtdParam._m0[3u].x) + ((_2557 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2551 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _793)));
    float _2593 = ((_2565.z * cbMtdParam._m0[3u].x) + ((_2559 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2553 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _793)));
    uint _2597 = _721 + 6u;
    float _2605 = _666 / cbSceneParam._m0[86u].x;
    float _2606 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2620 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2622 = _2620.x;
    float _2623 = _2620.y;
    float _2624 = _2620.z;
    float _2625 = _2620.w;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2680 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2681 = _2680 / _600;
        float _2692 = _2681 * _651;
        float _2693 = _652 * _2681;
        float _2694 = (-0.0) - _2693;
        float _2695 = _2681 * _653;
        float _2697 = (cbSceneParam._m0[77u].w * _2694) / _2680;
        float _2698 = _2697 + cbSceneParam._m0[79u].w;
        float _2699 = cbSceneParam._m0[79u].w - _2693;
        float _2705 = sqrt(((_2692 * _2692) + (_2693 * _2693)) + (_2695 * _2695));
        float _2708 = (1.0 - (cbSceneParam._m0[77u].w / _2680)) * _2705;
        float _2713 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2715 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2694 - _2697) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2698 > 0.0) ? exp2(_2713 * _2698) : (2.0 - exp2(_2715 * _2698))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2708;
        }
        else
        {
            float _2828 = 1.0 / cbSceneParam._m0[80u].x;
            float _2829 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : max(_2698, _2699));
            float _2830 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : min(_2698, _2699));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            _2868 = ((abs(_2705 / _2694) * cbSceneParam._m0[80u].y) * ((((_2839 - _2840) * 2.0) - ((exp2(_2713 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0)))) - exp2(_2713 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))))) * _2828)) - ((exp2(_2715 * _2839) - exp2(_2715 * _2840)) * _2828))) + (_2708 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2625);
        _2717 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2622;
        _2719 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2623;
        _2721 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2624;
        _2723 = _2879 * _2625;
    }
    else
    {
        _2717 = _2622;
        _2719 = _2623;
        _2721 = _2624;
        _2723 = _2625;
    }
    float _2735 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2736 = _2735 == 3.0;
    float _2737 = log2(_2723);
    float _2744 = exp2(_2737 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)));
    float _2745 = exp2(_2737 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)));
    float _2746 = exp2(_2737 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0)));
    float _2755 = (_2735 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2755 * (_2736 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.y = _2755 * (_2736 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.z = _2755 * (_2736 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.w = cbInstanceData._m0[_2597].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2597].w;
}


