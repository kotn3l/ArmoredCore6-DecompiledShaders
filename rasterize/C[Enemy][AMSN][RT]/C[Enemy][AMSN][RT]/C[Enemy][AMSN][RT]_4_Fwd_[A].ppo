#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3512;
float _3513;
float _3514;
float _3515;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _258 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    vec4 _271 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_258 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _279 = exp2(log2(_271.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _280;
    float _282;
    float _284;
    if (_279)
    {
        _280 = cbMtdParam._m0[18u].x;
        _282 = cbMtdParam._m0[18u].y;
        _284 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _280 = cbMtdParam._m0[17u].x;
        _282 = cbMtdParam._m0[17u].y;
        _284 = cbMtdParam._m0[17u].z;
    }
    float _289;
    if (_279)
    {
        _289 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _289 = cbMtdParam._m0[19u].z;
    }
    float _295;
    float _297;
    if (_279)
    {
        _295 = cbMtdParam._m0[26u].x;
        _297 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _295 = cbMtdParam._m0[22u].x;
        _297 = cbMtdParam._m0[22u].y;
    }
    float _299 = _295 * TEXCOORD.x;
    float _300 = _297 * TEXCOORD.y;
    float _312 = floor(_289);
    vec4 _315 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _299) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _300) + cbTextureTilingScale._m0[6u].w, _312));
    vec4 _337 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _258) + cbTextureTilingScale._m0[0u].w));
    float _345 = (((_280 * cbMtdParam._m0[19u].w) * _315.x) * cbMtdParam._m0[9u].x) * _337.x;
    float _349 = (((_282 * cbMtdParam._m0[19u].w) * _315.y) * cbMtdParam._m0[9u].y) * _337.y;
    float _353 = (((_284 * cbMtdParam._m0[19u].w) * _315.z) * cbMtdParam._m0[9u].z) * _337.z;
    vec4 _365 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _258) + cbTextureTilingScale._m0[1u].w));
    float _369 = _365.z;
    vec4 _382 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _299) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _300) + cbTextureTilingScale._m0[8u].w, _312));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[25u].x;
    _186[0u] = cbMtdParam._m0[25u].y;
    _185[1u] = cbMtdParam._m0[25u].z;
    _186[1u] = cbMtdParam._m0[25u].w;
    float _396 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _399 = uint(int(isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0))));
    float _404 = _186[_399] + _382.x;
    vec4 _423 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _299) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _300) + cbTextureTilingScale._m0[7u].w, _312));
    float _430 = (_423.x * 2.0) + (-1.0);
    float _431 = (_423.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _3534 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))));
    float _446 = (cbMtdParam._m0[20u].x * (((_369 * 2.0) * (_423.z + _185[_399])) - _369)) + _369;
    float _450 = (cbMtdParam._m0[20u].y * ((_365.x * 2.0) + (-1.0))) + _430;
    float _451 = (cbMtdParam._m0[20u].y * ((_365.y * 2.0) + (-1.0))) + _431;
    float _454 = fma(_437, _236, fma(_451, _228 * TANGENT.x, (_214 * _206) * _450));
    float _457 = fma(_437, _237, fma(_451, _228 * TANGENT.y, (_214 * _207) * _450));
    float _460 = fma(_437, _238, fma(_451, _228 * TANGENT.z, (_214 * _208) * _450));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _3545 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _468 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3567 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3578 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3589 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _472 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _488 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _540 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _530);
    float _541 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _530);
    float _542 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _530);
    float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
    float _547 = _540 * _546;
    float _548 = _541 * _546;
    float _549 = _542 * _546;
    vec4 _554 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _556 = _554.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _782 = sqrt(((_540 * _540) + (_541 * _541)) + (_542 * _542));
        float _788 = (cbMatDynParam._m0[5u].x * _782) + cbMatDynParam._m0[5u].y;
        float _3600 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _793 = (cbMatDynParam._m0[5u].z * _782) + cbMatDynParam._m0[5u].w;
        float _3611 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) - _789)) + _789) < ((_556 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _570 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _571 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _573 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _575 = _573.w;
    float _594 = fma(_467, cbSceneParam._m0[5u].z, fma(_466, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _465));
    float _597 = fma(_467, cbSceneParam._m0[6u].z, fma(_466, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _465));
    float _600 = fma(_467, cbSceneParam._m0[7u].z, fma(_466, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _465));
    vec4 _602 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _613 = (((_602.y - _468) + (_602.w * _468)) * cbMtdParam._m0[3u].x) + _468;
    uint _626 = uint(roundEven(NORMAL.w)) * 13u;
    uint _628 = _626 + 9u;
    uint _629 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3622 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    vec4 _641 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _646 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _657 = (((_646.x - _472) + (_646.w * _472)) * cbMtdParam._m0[3u].x) + _472;
    float _670 = (cbMtdParam._m0[3u].x * (((_638 * _575) - _638) + _641.x)) + _638;
    float _671 = (cbMtdParam._m0[3u].x * (((_639 * _575) - _639) + _641.y)) + _639;
    float _672 = (cbMtdParam._m0[3u].x * (((_640 * _575) - _640) + _641.z)) + _640;
    float _673 = 1.0 - _657;
    float _674 = _673 * _670;
    float _675 = _673 * _671;
    float _676 = _673 * _672;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _657;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _657;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _657;
    float _684 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    float _687 = _683 + 0.039999999105930328369140625;
    vec4 _696 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _570, cbSceneParam._m0[86u].y * _571));
    float _699 = _696.x * TEXCOORD_4;
    float _700 = dot(vec3(_465, _466, _467), vec3(_547, _548, _549));
    float _703 = _700 * 2.0;
    float _707 = (_703 * _465) - _547;
    float _708 = (_703 * _466) - _548;
    float _709 = (_703 * _467) - _549;
    float _713 = abs(dot(vec3(_547, _548, _549), vec3(_465, _466, _467)));
    float _3655 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _715 = sqrt(_613);
    float _728 = exp2((_715 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _734 = (1.0 - _728) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _715;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _830 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _834 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _859 = _763 + _465;
        float _860 = _767 + _466;
        float _861 = _771 + _467;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_465, _466, _467), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3703 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_465, _466, _467), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3736 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_465, _466, _467), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3769 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1145 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1149 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1153 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1176 = _763 + _465;
        float _1177 = _767 + _466;
        float _1178 = _771 + _467;
        float _1188 = fma(_1178, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176)) - _1145;
        float _1189 = fma(_1178, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176)) - _1149;
        float _1190 = fma(_1178, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176)) - _1153;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1145 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1149 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[35u].z) + ((((((_1153 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1244 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1211.x + (-0.5));
        float _1246 = _1244 * (_1211.y + (-0.5));
        float _1247 = _1244 * (_1211.z + (-0.5));
        float _1254 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1218.x + (-0.5));
        float _1256 = _1254 * (_1218.y + (-0.5));
        float _1257 = _1254 * (_1218.z + (-0.5));
        float _1264 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1225.x + (-0.5));
        float _1266 = _1264 * (_1225.y + (-0.5));
        float _1267 = _1264 * (_1225.z + (-0.5));
        float _1274 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1232.x + (-0.5));
        float _1276 = _1274 * (_1232.y + (-0.5));
        float _1277 = _1274 * (_1232.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_465, _466, _467), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3832 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1308 + 1.0))) + _1313) * _1278;
        float _1323 = _1246 * 0.5;
        float _1324 = _1256 * 0.5;
        float _1325 = _1266 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_465, _466, _467), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3865 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1350 + 1.0))) + _1355) * _1279;
        float _1365 = _1247 * 0.5;
        float _1366 = _1257 * 0.5;
        float _1367 = _1267 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_465, _466, _467), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3898 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1392 + 1.0))) + _1397) * _1280;
        _1414 = _1247;
        _1415 = _1246;
        _1416 = _1245;
        _1417 = _1257;
        _1418 = _1256;
        _1419 = _1255;
        _1420 = _1267;
        _1421 = _1266;
        _1422 = _1265;
        _1423 = _1280;
        _1424 = _1279;
        _1425 = _1278;
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = _1102;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1115)) + _1115;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1461 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1464 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1467 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1438));
    float _1482 = _707 * 0.5;
    float _1483 = _708 * 0.5;
    float _1484 = _709 * 0.5;
    float _1485 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1488 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1491 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1525;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1498 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1502 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1506 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1513 = dot(vec4(cbModelParam._m0[39u]), vec4(_1482, _1483, _1484, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1536;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1527 = dot(vec4(cbModelParam._m0[40u]), vec4(_1482, _1483, _1484, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1540 = (_1536 * cbModelParam._m0[1u].x) + (_1525 * (1.0 - cbModelParam._m0[1u].x));
    float _1550 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1550 : min(cbModelParam._m0[25u].z, _1550));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1600 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1604 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1608 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1611 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1614 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1617 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1645;
        if (_1611 > 0.0)
        {
            _1645 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1645 = frontier_phi_25_23_ladder;
        }
        float _1849;
        if (_1614 > 0.0)
        {
            _1849 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1849 = frontier_phi_34_30_ladder;
        }
        float _2103;
        if (_1617 > 0.0)
        {
            _2103 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2103 = frontier_phi_46_41_ladder;
        }
        float _2105 = isnan(_1849) ? _1645 : (isnan(_1645) ? _1849 : min(_1645, _1849));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1611) + _1600;
        float _2111 = (_2106 * _1614) + _1604;
        float _2112 = (_2106 * _1617) + _1608;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2113;
        float _2117 = _2113 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 > _2117) || ((_2111 < _2115) || ((_2110 < _2115) || (_2110 > _2117))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2112, cbModelParam._m0[9u].z, fma(_2111, cbModelParam._m0[9u].y, _2110 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2112, cbModelParam._m0[10u].z, fma(_2111, cbModelParam._m0[10u].y, _2110 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2112, cbModelParam._m0[11u].z, fma(_2111, cbModelParam._m0[11u].y, _2110 * cbModelParam._m0[11u].x))), _1551);
            frontier_phi_24_46_ladder = _2240.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2240.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2240.x * cbModelParam._m0[1u].y;
        }
        _1633 = frontier_phi_24_46_ladder_2;
        _1635 = frontier_phi_24_46_ladder_1;
        _1637 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1551);
        _1633 = _1621.x * cbModelParam._m0[1u].y;
        _1635 = _1621.y * cbModelParam._m0[1u].y;
        _1637 = _1621.z * cbModelParam._m0[1u].y;
    }
    float _1641 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1641 : min(cbModelParam._m0[25u].w, _1641));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1695 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1699 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1703 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1706 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1709 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1712 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1854;
        if (_1706 > 0.0)
        {
            _1854 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1854 = frontier_phi_36_32_ladder;
        }
        float _2130;
        if (_1709 > 0.0)
        {
            _2130 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2130 = frontier_phi_48_43_ladder;
        }
        float _2343;
        if (_1712 > 0.0)
        {
            _2343 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2343 = frontier_phi_57_54_ladder;
        }
        float _2345 = isnan(_2130) ? _1854 : (isnan(_1854) ? _2130 : min(_1854, _2130));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1706) + _1695;
        float _2351 = (_2346 * _1709) + _1699;
        float _2352 = (_2346 * _1712) + _1703;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2353;
        float _2356 = _2353 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2352 > _2356) || ((_2352 < _2354) || ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 < _2354) || (_2350 > _2356))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2352, cbModelParam._m0[17u].z, fma(_2351, cbModelParam._m0[17u].y, _2350 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2352, cbModelParam._m0[18u].z, fma(_2351, cbModelParam._m0[18u].y, _2350 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2352, cbModelParam._m0[19u].z, fma(_2351, cbModelParam._m0[19u].y, _2350 * cbModelParam._m0[19u].x))), _1642);
            frontier_phi_33_57_ladder = _2568.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2568.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2568.z * cbModelParam._m0[1u].z;
        }
        _1731 = frontier_phi_33_57_ladder_1;
        _1733 = frontier_phi_33_57_ladder;
        _1735 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1642);
        _1731 = _1715.x * cbModelParam._m0[1u].z;
        _1733 = _1715.y * cbModelParam._m0[1u].z;
        _1735 = _1715.z * cbModelParam._m0[1u].z;
    }
    float _1748 = (((_734 * _684) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1731 - _1633)) + _1633);
    float _1750 = (((_734 * _686) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1752 = (((_734 * _687) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1748 * cbSceneParam._m0[91u].x));
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_626 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1781 = _699 + (-1.0);
    float _1786 = (cbLight._m0[_1774].x * _1781) + 1.0;
    float _1787 = (cbLight._m0[_1774].y * _1781) + 1.0;
    float _1788 = (cbLight._m0[_1774].z * _1781) + 1.0;
    float _1789 = (cbLight._m0[_1774].w * _1781) + 1.0;
    uint _1790 = _1773 + 5u;
    float _1796 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1800 = _1773 + 4u;
    float _1807 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1811 = _1773 | 1u;
    float _1822 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_465, _466, _467));
    float _1825 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_465, _466, _467));
    float _4034 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _4045 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1830 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1832 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1839 = ((cbLight._m0[_1790].x * _1796) * _1832) + ((cbLight._m0[_1800].x * _1807) * _1830);
    float _1840 = ((_1796 * cbLight._m0[_1790].y) * _1832) + ((_1807 * cbLight._m0[_1800].y) * _1830);
    float _1841 = ((_1796 * cbLight._m0[_1790].z) * _1832) + ((_1807 * cbLight._m0[_1800].z) * _1830);
    uvec4 _1846 = floatBitsToUint(cbLight._m0[_1773 + 12u]);
    bool _1848 = _1846.x == 0u;
    float _1859;
    float _1861;
    float _1863;
    if (_1848)
    {
        _1859 = _1839;
        _1861 = _1840;
        _1863 = _1841;
    }
    else
    {
        uint _1867 = _1773 + 6u;
        float _1883 = (dot(vec3(cbLight._m0[_1773 + 2u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _1884 = _1883 * _1883;
        float _4056 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1886 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1859 = (((cbLight._m0[_1867].x * 0.3183098733425140380859375) * _1885) * _1886) + _1839;
        _1861 = (((cbLight._m0[_1867].y * 0.3183098733425140380859375) * _1885) * _1886) + _1840;
        _1863 = (((cbLight._m0[_1867].z * 0.3183098733425140380859375) * _1885) * _1886) + _1841;
    }
    bool _1866 = _1846.y == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1866)
    {
        _1904 = _1859;
        _1906 = _1861;
        _1908 = _1863;
    }
    else
    {
        uint _2074 = _1773 + 7u;
        float _2090 = (dot(vec3(cbLight._m0[_1773 + 3u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _4072 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2093 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1904 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _1859;
        _1906 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _1861;
        _1908 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _1863;
    }
    uint _1911 = _1773 + 8u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _613) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1773].x + _547;
    float _1927 = cbLight._m0[_1773].y + _548;
    float _1928 = cbLight._m0[_1773].z + _549;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1773].xyz));
    float _4088 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _1940 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1941 = dot(vec3(_465, _466, _467), vec3(_1933, _1934, _1935));
    float _4110 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1933, _1934, _1935));
    float _4121 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1925 * _1925;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1961 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
    float _1962 = 0.959999978542327880859375 - _681;
    float _1964 = 0.959999978542327880859375 - _682;
    float _1965 = 0.959999978542327880859375 - _683;
    float _1972 = 1.0 - _1925;
    float _1983 = (0.5 / (((_1940 * ((_1939 * _1972) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _1972) + _1925) * _1939))) * _1939;
    float _4132 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    uint _1996 = _1773 + 9u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _613) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1811].x + _547;
    float _2010 = cbLight._m0[_1811].y + _548;
    float _2011 = cbLight._m0[_1811].z + _549;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1811].xyz));
    float _4143 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2023 = dot(vec3(_465, _466, _467), vec3(_2016, _2017, _2018));
    float _4154 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_2016, _2017, _2018));
    float _4165 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2008 * _2008;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2042 = exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0);
    float _2049 = 1.0 - _2008;
    float _2059 = (0.5 / (((_1940 * ((_2022 * _2049) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2049) + _2008) * _2022))) * _2022;
    float _4176 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    float _2071 = (((((_2042 * _1962) + _684) * cbLight._m0[_1996].x) * _2061) * _1796) + (((((_1961 * _1962) + _684) * cbLight._m0[_1911].x) * _1985) * _1807);
    float _2072 = (((((_2042 * _1964) + _686) * cbLight._m0[_1996].y) * _2061) * _1796) + (((((_1961 * _1964) + _686) * cbLight._m0[_1911].y) * _1985) * _1807);
    float _2073 = (((((_2042 * _1965) + _687) * cbLight._m0[_1996].z) * _2061) * _1796) + (((((_1961 * _1965) + _687) * cbLight._m0[_1911].z) * _1985) * _1807);
    float _2135;
    float _2137;
    float _2139;
    if (_1848)
    {
        _2135 = _2071;
        _2137 = _2072;
        _2139 = _2073;
    }
    else
    {
        uint _2141 = _1773 + 2u;
        uint _2145 = _1773 + 10u;
        float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _613) * 0.949999988079071044921875);
        float _2160 = _2159 * _2159;
        float _2161 = cbLight._m0[_2141].x + _547;
        float _2162 = cbLight._m0[_2141].y + _548;
        float _2163 = cbLight._m0[_2141].z + _549;
        float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
        float _2168 = _2167 * _2161;
        float _2169 = _2167 * _2162;
        float _2170 = _2167 * _2163;
        float _2171 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2141].xyz));
        float _4187 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2175 = dot(vec3(_465, _466, _467), vec3(_2168, _2169, _2170));
        float _4198 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2179 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2168, _2169, _2170));
        float _4209 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2183 = _2160 * _2160;
        float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
        float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
        float _2201 = 1.0 - _2160;
        float _2211 = (0.5 / (((_1940 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2201) + _2160) * _2174))) * _2174;
        float _4220 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2213 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
        float _2214 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2135 = (((((_2194 * _1962) + _684) * cbLight._m0[_2145].x) * _2213) * _2214) + _2071;
        _2137 = (((((_2194 * _1964) + _686) * cbLight._m0[_2145].y) * _2213) * _2214) + _2072;
        _2139 = (((((_2194 * _1965) + _687) * cbLight._m0[_2145].z) * _2213) * _2214) + _2073;
    }
    float _2249;
    float _2251;
    float _2253;
    if (_1866)
    {
        _2249 = _2135;
        _2251 = _2137;
        _2253 = _2139;
    }
    else
    {
        uint _2260 = _1773 + 3u;
        uint _2264 = _1773 + 11u;
        float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _613) * 0.949999988079071044921875);
        float _2279 = _2278 * _2278;
        float _2280 = cbLight._m0[_2260].x + _547;
        float _2281 = cbLight._m0[_2260].y + _548;
        float _2282 = cbLight._m0[_2260].z + _549;
        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
        float _2287 = _2286 * _2280;
        float _2288 = _2286 * _2281;
        float _2289 = _2286 * _2282;
        float _2290 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2260].xyz));
        float _4236 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2294 = dot(vec3(_465, _466, _467), vec3(_2287, _2288, _2289));
        float _4247 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2287, _2288, _2289));
        float _4258 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _2279 * _2279;
        float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
        float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
        float _2320 = 1.0 - _2279;
        float _2330 = (0.5 / (((_1940 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2320) + _2279) * _2293))) * _2293;
        float _4269 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2332 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
        float _2333 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2249 = (((((_2313 * _1962) + _684) * cbLight._m0[_2264].x) * _2332) * _2333) + _2135;
        _2251 = (((((_2313 * _1964) + _686) * cbLight._m0[_2264].y) * _2332) * _2333) + _2137;
        _2253 = (((((_2313 * _1965) + _687) * cbLight._m0[_2264].z) * _2332) * _2333) + _2139;
    }
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_1771.y == 0u)
    {
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2408;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2408;
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2408;
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.x;
        uint _2435 = uint((float(_2423.y) * floor(float(uint(cbSceneParam._m0[85u].y * _571) / _2424))) + floor(float(uint(cbSceneParam._m0[85u].x * _570) / _2424)));
        float _2445 = (log2(_2411 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2446 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        uint _2449 = uint(isnan(14.0) ? _2446 : (isnan(_2446) ? 14.0 : min(_2446, 14.0)));
        uvec4 _2454 = texelFetch(g_lightClusterGridBuffer, int(((_2449 << 2u) + (_2435 << 6u)) >> 2u));
        uint _2455 = _2454.x;
        uint _2456 = _2423.z;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((((1u << ((_2456 >> 4u) & 15u)) + 4294967295u) & _2455) == 0u) || ((_2456 & 240u) == 0u))
        {
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
        }
        else
        {
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2449 << 5u) + (_2435 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2741)
                {
                    frontier_phi_74_pred = _2730;
                    frontier_phi_74_pred_1 = _2729;
                    frontier_phi_74_pred_2 = _2728;
                    frontier_phi_74_pred_3 = _2727;
                    frontier_phi_74_pred_4 = _2726;
                    frontier_phi_74_pred_5 = _2725;
                }
                else
                {
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    uint _2876;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2740;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    for (;;)
                    {
                        uint _2880 = uint(findLSB(_2876)) + (_2731 << 5u);
                        uint _2877 = (_2876 + 4294967295u) & _2876;
                        uint _2882 = _2880 * 48u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2902 = (_2880 * 48u) + 4u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2921 = (_2880 * 48u) + 8u;
                        vec3 _2932 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x));
                        float _2936 = _2896.x - _2409;
                        float _2937 = _2896.y - _2410;
                        float _2938 = _2896.z - _2411;
                        float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                        float _2942 = inversesqrt(_2939);
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2946 = dot(vec3(_594, _597, _600), vec3(_2943, _2944, _2945));
                        float _2951 = 1.0 - (_2939 * _2896.w);
                        float _4295 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2953 = sqrt(_2939) * _2915.w;
                        float _2956 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2946) + _2957;
                        float _2963 = _2953 * _2953;
                        float _2967 = ((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2952) / ((_2963 * 0.699999988079071044921875) + 1.0);
                        float _2971 = (-0.0) - _2409;
                        float _2972 = (-0.0) - _2410;
                        float _2973 = (-0.0) - _2411;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2988 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                        float _2989 = 1.0 - _715;
                        float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                        float _2997 = _2996 * _2996;
                        float _2998 = _2997 * _2997;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3009 = dot(vec3(_594, _597, _600), vec3(_2978, _2979, _2980));
                        float _4311 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3013 = dot(vec3(_594, _597, _600), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                        float _4322 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                        float _3021 = _2956 * _2997;
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _2946) + _3022;
                        float _4333 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3027 = 1.0 - _2997;
                        float _3037 = (0.5 / (((_3026 * ((_3012 * _3027) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2997) * _3012))) * _3026;
                        float _4344 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3048 = (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) / ((_3020 * _3020) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125))) * _2952;
                        _2800 = (_2967 * _2915.x) + _2873;
                        _2801 = (_2967 * _2915.y) + _2874;
                        _2802 = (_2967 * _2915.z) + _2875;
                        _2797 = (_3048 * _2932.x) + _2870;
                        _2798 = (_3048 * _2932.y) + _2871;
                        _2799 = (_3048 * _2932.z) + _2872;
                        if (_2877 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2877;
                        }
                    }
                    frontier_phi_74_pred = _2802;
                    frontier_phi_74_pred_1 = _2801;
                    frontier_phi_74_pred_2 = _2800;
                    frontier_phi_74_pred_3 = _2799;
                    frontier_phi_74_pred_4 = _2798;
                    frontier_phi_74_pred_5 = _2797;
                }
                _2584 = frontier_phi_74_pred;
                _2582 = frontier_phi_74_pred_1;
                _2580 = frontier_phi_74_pred_2;
                _2578 = frontier_phi_74_pred_3;
                _2576 = frontier_phi_74_pred_4;
                _2574 = frontier_phi_74_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2574;
                    _2726 = _2576;
                    _2727 = _2578;
                    _2728 = _2580;
                    _2729 = _2582;
                    _2730 = _2584;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
        }
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.z;
        uint _2590 = (_2588 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2590) & _2455) == 0u)
        {
            _2693 = _2573;
            _2695 = _2575;
            _2697 = _2577;
            _2699 = _2579;
            _2701 = _2581;
            _2703 = _2583;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
            float _2719 = _2718 * _2409;
            float _2720 = _2718 * _2410;
            float _2721 = _2718 * _2411;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2590 < ((_2588 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2853 = _2573;
                float _2854 = _2575;
                float _2855 = _2577;
                float _2856 = _2579;
                float _2857 = _2581;
                float _2858 = _2583;
                uint _2859 = _2590;
                uint _2868;
                bool _2869;
                for (;;)
                {
                    _2868 = texelFetch(g_lightClassification, int((((_2449 << 5u) + (_2435 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                    _2869 = _2868 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2869)
                    {
                        frontier_phi_85_pred = _2857;
                        frontier_phi_85_pred_1 = _2856;
                        frontier_phi_85_pred_2 = _2855;
                        frontier_phi_85_pred_3 = _2854;
                        frontier_phi_85_pred_4 = _2853;
                        frontier_phi_85_pred_5 = _2858;
                    }
                    else
                    {
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        uint _3081 = _2868;
                        uint _3082;
                        vec4 _3107;
                        float _3108;
                        vec4 _3123;
                        vec3 _3135;
                        vec4 _3151;
                        vec4 _3166;
                        float _3213;
                        bool _3214;
                        for (;;)
                        {
                            uint _3092 = ((_2859 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3081));
                            _3082 = (_3081 + 4294967295u) & _3081;
                            uint _3094 = _3092 * 40u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3108 = _3107.w;
                            uint _3110 = (_3092 * 40u) + 4u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3092 * 40u) + 8u;
                            _3135 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x));
                            uint _3138 = (_3092 * 40u) + 16u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3092 * 40u) + 20u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3169 = (_3092 * 40u) + 24u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3188 = (_3092 * 40u) + 28u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3213 = fma(_2411, _3201.z, fma(_2410, _3201.y, _3201.x * _2409)) + _3201.w;
                            _3214 = !((fma(_2411, _3182.z, fma(_2410, _3182.y, _3182.x * _2409)) + _3182.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3214)
                            {
                                float _3241 = _3107.x - _2409;
                                float _3242 = _3107.y - _2410;
                                float _3243 = _3107.z - _2411;
                                float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                                float _3247 = inversesqrt(_3244);
                                float _3248 = _3247 * _3241;
                                float _3249 = _3247 * _3242;
                                float _3250 = _3247 * _3243;
                                float _3254 = 1.0 - (_3244 / (_3108 * _3108));
                                float _4355 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3259 = sqrt(_3244) * _3123.w;
                                float _3261 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                                float _3262 = _3261 * _3261;
                                float _3265 = ((1.0 - _3262) * dot(vec3(_3248, _3249, _3250), vec3(_594, _597, _600))) + _3262;
                                float _3268 = _3259 * _3259;
                                float _3272 = (fma(_2411, _3151.z, fma(_2410, _3151.y, _3151.x * _2409)) + _3151.w) / _3213;
                                float _3273 = (fma(_2411, _3166.z, fma(_2410, _3166.y, _3166.x * _2409)) + _3166.w) / _3213;
                                float _3277 = 1.0 - dot(vec2(_3272, _3273), vec2(_3272, _3273));
                                float _4371 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3279 = _3278 * (((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3255) / ((_3268 * 0.699999988079071044921875) + 1.0));
                                float _3291 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                                float _3292 = 1.0 - _715;
                                float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                                float _3300 = _3299 * _3299;
                                float _3301 = _3300 * _3300;
                                float _3302 = _3248 - _2719;
                                float _3303 = _3249 - _2720;
                                float _3304 = _3250 - _2721;
                                float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                                float _3312 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4382 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3316 = dot(vec3(_594, _597, _600), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                                float _4393 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                                float _3324 = _3261 * _3300;
                                float _3325 = _3324 * _3324;
                                float _3331 = ((1.0 - _3325) * dot(vec3(_594, _597, _600), vec3(_3248, _3249, _3250))) + _3325;
                                float _4404 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3333 = 1.0 - _3300;
                                float _3343 = (0.5 / (((_3332 * ((_3315 * _3333) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3300) * _3315))) * _3332;
                                float _4415 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3353 = (_3278 * _3255) * (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) / ((_3323 * _3323) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3279 * _3123.y;
                                frontier_phi_91_pred_1 = _3279 * _3123.x;
                                frontier_phi_91_pred_2 = _3353 * _3135.z;
                                frontier_phi_91_pred_3 = _3353 * _3135.y;
                                frontier_phi_91_pred_4 = _3353 * _3135.x;
                                frontier_phi_91_pred_5 = _3279 * _3123.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3361 = frontier_phi_91_pred;
                            _3360 = frontier_phi_91_pred_1;
                            _3359 = frontier_phi_91_pred_2;
                            _3358 = frontier_phi_91_pred_3;
                            _3357 = frontier_phi_91_pred_4;
                            _3362 = frontier_phi_91_pred_5;
                            _3065 = _3360 + _3078;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            _3062 = _3357 + _3075;
                            _3063 = _3358 + _3076;
                            _3064 = _3359 + _3077;
                            if (_3082 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3082;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3066;
                        frontier_phi_85_pred_1 = _3065;
                        frontier_phi_85_pred_2 = _3064;
                        frontier_phi_85_pred_3 = _3063;
                        frontier_phi_85_pred_4 = _3062;
                        frontier_phi_85_pred_5 = _3067;
                    }
                    _2702 = frontier_phi_85_pred;
                    _2700 = frontier_phi_85_pred_1;
                    _2698 = frontier_phi_85_pred_2;
                    _2696 = frontier_phi_85_pred_3;
                    _2694 = frontier_phi_85_pred_4;
                    _2704 = frontier_phi_85_pred_5;
                    uint _2860 = _2859 + 1u;
                    if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2853 = _2694;
                        _2854 = _2696;
                        _2855 = _2698;
                        _2856 = _2700;
                        _2857 = _2702;
                        _2858 = _2704;
                        _2859 = _2860;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2704;
                frontier_phi_66_67_ladder_1 = _2700;
                frontier_phi_66_67_ladder_2 = _2702;
                frontier_phi_66_67_ladder_3 = _2696;
                frontier_phi_66_67_ladder_4 = _2694;
                frontier_phi_66_67_ladder_5 = _2698;
            }
            else
            {
                frontier_phi_66_67_ladder = _2583;
                frontier_phi_66_67_ladder_1 = _2579;
                frontier_phi_66_67_ladder_2 = _2581;
                frontier_phi_66_67_ladder_3 = _2575;
                frontier_phi_66_67_ladder_4 = _2573;
                frontier_phi_66_67_ladder_5 = _2577;
            }
            _2693 = frontier_phi_66_67_ladder_4;
            _2695 = frontier_phi_66_67_ladder_3;
            _2697 = frontier_phi_66_67_ladder_5;
            _2699 = frontier_phi_66_67_ladder_1;
            _2701 = frontier_phi_66_67_ladder_2;
            _2703 = frontier_phi_66_67_ladder;
        }
        float _2708 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _2467 = (_2708 * _2699) + _1904;
        _2469 = (_2708 * _2701) + _1906;
        _2471 = (_2708 * _2703) + _1908;
        _2473 = ((_2693 * _684) * _2708) + _2249;
        _2475 = ((_2695 * _686) * _2708) + _2251;
        _2477 = ((_2697 * _687) * _2708) + _2253;
    }
    else
    {
        _2467 = _1904;
        _2469 = _1906;
        _2471 = _1908;
        _2473 = _2249;
        _2475 = _2251;
        _2477 = _2253;
    }
    vec4 _2483 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4431 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4442 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4453 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _2507 = (((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2467 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _699))) + ((_2473 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + (_2483.x * cbMtdParam._m0[3u].x);
    float _2509 = ((_2483.y * cbMtdParam._m0[3u].x) + ((_2475 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2469 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _699)));
    float _2511 = ((_2483.z * cbMtdParam._m0[3u].x) + ((_2477 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2471 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _699)));
    float _2512 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2513 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2514 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    uint _2515 = _626 + 6u;
    float _2523 = _570 / cbSceneParam._m0[86u].x;
    float _2524 = _571 / cbSceneParam._m0[86u].y;
    vec4 _2538 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2523, _2524, (log2((isnan(cbSceneParam._m0[77u].w) ? _488 : (isnan(_488) ? cbSceneParam._m0[77u].w : min(_488, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2540 = _2538.x;
    float _2541 = _2538.y;
    float _2542 = _2538.z;
    float _2543 = _2538.w;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_488 > cbSceneParam._m0[78u].w)
    {
        float _2598 = isnan(_488) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _488 : min(cbSceneParam._m0[80u].w, _488));
        float _2599 = _2598 / _488;
        float _2610 = _2599 * _540;
        float _2611 = _541 * _2599;
        float _2612 = (-0.0) - _2611;
        float _2613 = _2599 * _542;
        float _2615 = (cbSceneParam._m0[77u].w * _2612) / _2598;
        float _2616 = _2615 + cbSceneParam._m0[79u].w;
        float _2617 = cbSceneParam._m0[79u].w - _2611;
        float _2623 = sqrt(((_2610 * _2610) + (_2611 * _2611)) + (_2613 * _2613));
        float _2626 = (1.0 - (cbSceneParam._m0[77u].w / _2598)) * _2623;
        float _2631 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2633 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2810;
        if (abs((_2612 - _2615) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2810 = ((((_2616 > 0.0) ? exp2(_2631 * _2616) : (2.0 - exp2(_2633 * _2616))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2626;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : max(_2616, _2617));
            float _2756 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : min(_2616, _2617));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2810 = ((abs(_2623 / _2612) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2631 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2631 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2633 * _2765) - exp2(_2633 * _2766)) * _2754))) + (_2626 * cbSceneParam._m0[80u].z);
        }
        vec4 _2812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2523, _2524, 1.0), 0.0);
        float _2821 = exp2((_2810 * (-1.44269502162933349609375)) * (1.0 - _2812.w));
        float _2822 = log2(_2821);
        float _2838 = log2(_2543);
        _2635 = (exp2(_2838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].x)) * _2812.x) / cbSceneParam._m0[78u].x)) + _2540;
        _2637 = (exp2(_2838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].y)) * _2812.y) / cbSceneParam._m0[78u].y)) + _2541;
        _2639 = (exp2(_2838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].z)) * _2812.z) / cbSceneParam._m0[78u].z)) + _2542;
        _2641 = _2821 * _2543;
    }
    else
    {
        _2635 = _2540;
        _2637 = _2541;
        _2639 = _2542;
        _2641 = _2543;
    }
    bool _2848;
    vec4 _2651;
    vec4 _2673;
    float _2675;
    float _2679;
    float _2680;
    float _2681;
    float _2682;
    bool _2692;
    for (;;)
    {
        _2651 = cbMatDynParam._m0[0u];
        float _2653 = roundEven(_2651.y);
        bool _2654 = _2653 == 3.0;
        float _2655 = log2(_2641);
        float _2662 = exp2(_2655 * cbSceneParam._m0[78u].x) * _2512;
        float _2663 = exp2(_2655 * cbSceneParam._m0[78u].y) * _2513;
        float _2664 = exp2(_2655 * cbSceneParam._m0[78u].z) * _2514;
        float _2671 = _556 + (-0.5);
        _2673 = cbMtdParam._m0[1u];
        _2675 = _2673.y * _2671;
        float _2678 = (_2653 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2679 = _2678 * (_2654 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2635)));
        _2680 = _2678 * (_2654 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2637)));
        _2681 = _2678 * (_2654 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2639)));
        _2682 = _2671 * 0.999000012874603271484375;
        _2692 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2692)
        {
            if ((cbInstanceData._m0[_626 + 7u].x + _2682) < 0.5)
            {
                _2848 = true;
                break;
            }
        }
        uint _2789 = _628 + uint(_2651.w);
        if ((cbInstanceData._m0[_2789].w < 1.0) && ((cbInstanceData._m0[_2789].w + _2682) < 0.5))
        {
            _2848 = true;
            break;
        }
        if ((_2675 + 1.0) < _2673.x)
        {
            _2848 = true;
            break;
        }
        _2848 = false;
        break;
    }
    float _3053;
    if (_2848)
    {
        discard_state = true;
        _3053 = 0.0;
    }
    else
    {
        _3053 = cbInstanceData._m0[_2515].w;
    }
    SV_Target.x = _2679;
    SV_Target.y = _2680;
    SV_Target.z = _2681;
    SV_Target.w = _3053;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2515].w;
    discard_exit();
}


