#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1084;
float _3494;
float _3495;
float _3496;
float _3497;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _256 = log2(0.0);
    bool _259 = exp2(_256 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _260;
    float _262;
    float _264;
    if (_259)
    {
        _260 = cbMtdParam._m0[18u].x;
        _262 = cbMtdParam._m0[18u].y;
        _264 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _260 = cbMtdParam._m0[17u].x;
        _262 = cbMtdParam._m0[17u].y;
        _264 = cbMtdParam._m0[17u].z;
    }
    float _269;
    if (_259)
    {
        _269 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _269 = cbMtdParam._m0[19u].z;
    }
    float _275;
    float _277;
    if (_259)
    {
        _275 = cbMtdParam._m0[26u].x;
        _277 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _275 = cbMtdParam._m0[22u].x;
        _277 = cbMtdParam._m0[22u].y;
    }
    float _279 = _275 * TEXCOORD.x;
    float _280 = _277 * TEXCOORD.y;
    float _292 = floor(_269);
    vec4 _295 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _279) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _280) + cbTextureTilingScale._m0[6u].w, _292));
    vec4 _318 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = (((_260 * cbMtdParam._m0[19u].w) * _295.x) * cbMtdParam._m0[9u].x) * _318.x;
    float _331 = (((_262 * cbMtdParam._m0[19u].w) * _295.y) * cbMtdParam._m0[9u].y) * _318.y;
    float _335 = (((_264 * cbMtdParam._m0[19u].w) * _295.z) * cbMtdParam._m0[9u].z) * _318.z;
    vec4 _347 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _351 = _347.z;
    vec4 _364 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _279) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _280) + cbTextureTilingScale._m0[8u].w, _292));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[25u].x;
    _184[0u] = cbMtdParam._m0[25u].y;
    _183[1u] = cbMtdParam._m0[25u].z;
    _184[1u] = cbMtdParam._m0[25u].w;
    float _378 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _381 = uint(int(isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0))));
    float _386 = _184[_381] + _364.x;
    vec4 _405 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _279) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _280) + cbTextureTilingScale._m0[7u].w, _292));
    float _412 = (_405.x * 2.0) + (-1.0);
    float _413 = (_405.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_412, _413), vec2(_412, _413));
    float _3516 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _419 = sqrt(1.0 - (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))));
    float _428 = (cbMtdParam._m0[20u].x * (((_351 * 2.0) * (_405.z + _183[_381])) - _351)) + _351;
    float _432 = (cbMtdParam._m0[20u].y * ((_347.x * 2.0) + (-1.0))) + _412;
    float _433 = (cbMtdParam._m0[20u].y * ((_347.y * 2.0) + (-1.0))) + _413;
    float _436 = fma(_419, _234, fma(_433, _226 * TANGENT.x, (_212 * _204) * _432));
    float _439 = fma(_419, _235, fma(_433, _226 * TANGENT.y, (_212 * _205) * _432));
    float _442 = fma(_419, _236, fma(_433, _226 * TANGENT.z, (_212 * _206) * _432));
    float _446 = inversesqrt(dot(vec3(_436, _439, _442), vec3(_436, _439, _442)));
    float _447 = _446 * _436;
    float _448 = _446 * _439;
    float _449 = _446 * _442;
    float _3527 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _450 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3549 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3560 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3571 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _454 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    vec4 _536 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _538 = _536.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _764 = sqrt(((_522 * _522) + (_523 * _523)) + (_524 * _524));
        float _770 = (cbMatDynParam._m0[5u].x * _764) + cbMatDynParam._m0[5u].y;
        float _3582 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _775 = (cbMatDynParam._m0[5u].z * _764) + cbMatDynParam._m0[5u].w;
        float _3593 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) - _771)) + _771) < ((_538 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _555 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _557 = _555.w;
    float _576 = fma(_449, cbSceneParam._m0[5u].z, fma(_448, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _447));
    float _579 = fma(_449, cbSceneParam._m0[6u].z, fma(_448, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _447));
    float _582 = fma(_449, cbSceneParam._m0[7u].z, fma(_448, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _447));
    vec4 _584 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _595 = (((_584.y - _450) + (_584.w * _450)) * cbMtdParam._m0[3u].x) + _450;
    uint _608 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = _608 + 9u;
    uint _611 = _610 + uint(cbMatDynParam._m0[0u].w);
    float _617 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_611].x;
    float _618 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_611].y;
    float _619 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_611].z;
    float _3604 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    vec4 _623 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _628 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _639 = (((_628.x - _454) + (_628.w * _454)) * cbMtdParam._m0[3u].x) + _454;
    float _652 = (cbMtdParam._m0[3u].x * (((_620 * _557) - _620) + _623.x)) + _620;
    float _653 = (cbMtdParam._m0[3u].x * (((_621 * _557) - _621) + _623.y)) + _621;
    float _654 = (cbMtdParam._m0[3u].x * (((_622 * _557) - _622) + _623.z)) + _622;
    float _655 = 1.0 - _639;
    float _656 = _655 * _652;
    float _657 = _655 * _653;
    float _658 = _655 * _654;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _639;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _639;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _639;
    float _666 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _681 = _678.x * TEXCOORD_4;
    float _682 = dot(vec3(_447, _448, _449), vec3(_529, _530, _531));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _447) - _529;
    float _690 = (_685 * _448) - _530;
    float _691 = (_685 * _449) - _531;
    float _695 = abs(dot(vec3(_529, _530, _531), vec3(_447, _448, _449)));
    float _3637 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_595);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _716 = (1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _717 = _710 * _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1083;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _812 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _816 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _841 = _745 + _447;
        float _842 = _749 + _448;
        float _843 = _753 + _449;
        float _853 = fma(_843, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841)) - _808;
        float _854 = fma(_843, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841)) - _812;
        float _855 = fma(_843, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841)) - _816;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _911 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_877.x + (-0.5));
        float _913 = _911 * (_877.y + (-0.5));
        float _914 = _911 * (_877.z + (-0.5));
        float _921 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_884.x + (-0.5));
        float _923 = _921 * (_884.y + (-0.5));
        float _924 = _921 * (_884.z + (-0.5));
        float _931 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_891.x + (-0.5));
        float _933 = _931 * (_891.y + (-0.5));
        float _934 = _931 * (_891.z + (-0.5));
        float _941 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_898.x + (-0.5));
        float _943 = _941 * (_898.y + (-0.5));
        float _944 = _941 * (_898.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _965 = (dot(vec3(_447, _448, _449), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _975 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3685 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_977 + 1.0))) + _982) * _945;
        float _992 = _913 * 0.5;
        float _993 = _923 * 0.5;
        float _994 = _933 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_447, _448, _449), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3718 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1019 + 1.0))) + _1024) * _946;
        float _1034 = _914 * 0.5;
        float _1035 = _924 * 0.5;
        float _1036 = _934 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_447, _448, _449), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3751 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1061 + 1.0))) + _1066) * _947;
        _1083 = _914;
        _1085 = _913;
        _1086 = _912;
        _1087 = _924;
        _1088 = _923;
        _1089 = _922;
        _1090 = _934;
        _1091 = _933;
        _1092 = _932;
        _1093 = _947;
        _1094 = _946;
        _1095 = _945;
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _1084;
        _1085 = _1084;
        _1086 = _1084;
        _1087 = _1084;
        _1088 = _1084;
        _1089 = _1084;
        _1090 = _1084;
        _1091 = _1084;
        _1092 = _1084;
        _1093 = _1084;
        _1094 = _1084;
        _1095 = _1084;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1127 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1131 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1135 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1158 = _745 + _447;
        float _1159 = _749 + _448;
        float _1160 = _753 + _449;
        float _1170 = fma(_1160, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158)) - _1127;
        float _1171 = fma(_1160, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158)) - _1131;
        float _1172 = fma(_1160, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158)) - _1135;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1127 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1131 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[35u].z) + ((((((_1135 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1226 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1193.x + (-0.5));
        float _1228 = _1226 * (_1193.y + (-0.5));
        float _1229 = _1226 * (_1193.z + (-0.5));
        float _1236 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1200.x + (-0.5));
        float _1238 = _1236 * (_1200.y + (-0.5));
        float _1239 = _1236 * (_1200.z + (-0.5));
        float _1246 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1207.x + (-0.5));
        float _1248 = _1246 * (_1207.y + (-0.5));
        float _1249 = _1246 * (_1207.z + (-0.5));
        float _1256 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1214.x + (-0.5));
        float _1258 = _1256 * (_1214.y + (-0.5));
        float _1259 = _1256 * (_1214.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_447, _448, _449), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3814 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1290 + 1.0))) + _1295) * _1260;
        float _1305 = _1228 * 0.5;
        float _1306 = _1238 * 0.5;
        float _1307 = _1248 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_447, _448, _449), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3847 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1332 + 1.0))) + _1337) * _1261;
        float _1347 = _1229 * 0.5;
        float _1348 = _1239 * 0.5;
        float _1349 = _1249 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_447, _448, _449), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3880 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1374 + 1.0))) + _1379) * _1262;
        _1396 = _1229;
        _1397 = _1228;
        _1398 = _1227;
        _1399 = _1239;
        _1400 = _1238;
        _1401 = _1237;
        _1402 = _1249;
        _1403 = _1248;
        _1404 = _1247;
        _1405 = _1262;
        _1406 = _1261;
        _1407 = _1260;
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1084;
        _1397 = _1084;
        _1398 = _1084;
        _1399 = _1084;
        _1400 = _1084;
        _1401 = _1084;
        _1402 = _1084;
        _1403 = _1084;
        _1404 = _1084;
        _1405 = _1084;
        _1406 = _1084;
        _1407 = _1084;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1097)) + _1097;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1098)) + _1098;
    float _1443 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1420));
    float _1464 = _689 * 0.5;
    float _1465 = _690 * 0.5;
    float _1466 = _691 * 0.5;
    float _1467 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1470 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1473 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1480 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1083, _1087, _1090, _1093));
        float _1484 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1488 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1495 = dot(vec4(cbModelParam._m0[39u]), vec4(_1464, _1465, _1466, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1464, _1465, _1466, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1596 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1599 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1627 = frontier_phi_25_23_ladder;
        }
        float _1831;
        if (_1596 > 0.0)
        {
            _1831 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1831 = frontier_phi_34_30_ladder;
        }
        float _2085;
        if (_1599 > 0.0)
        {
            _2085 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2085 = frontier_phi_46_41_ladder;
        }
        float _2087 = isnan(_1831) ? _1627 : (isnan(_1627) ? _1831 : min(_1627, _1831));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1593) + _1582;
        float _2093 = (_2088 * _1596) + _1586;
        float _2094 = (_2088 * _1599) + _1590;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2095;
        float _2099 = _2095 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 > _2099) || ((_2093 < _2097) || ((_2092 < _2097) || (_2092 > _2099))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2094, cbModelParam._m0[9u].z, fma(_2093, cbModelParam._m0[9u].y, _2092 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2094, cbModelParam._m0[10u].z, fma(_2093, cbModelParam._m0[10u].y, _2092 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2094, cbModelParam._m0[11u].z, fma(_2093, cbModelParam._m0[11u].y, _2092 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_24_46_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_24_46_ladder_2;
        _1617 = frontier_phi_24_46_ladder_1;
        _1619 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1533);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1691 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1694 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1836;
        if (_1688 > 0.0)
        {
            _1836 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1836 = frontier_phi_36_32_ladder;
        }
        float _2112;
        if (_1691 > 0.0)
        {
            _2112 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2112 = frontier_phi_48_43_ladder;
        }
        float _2325;
        if (_1694 > 0.0)
        {
            _2325 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2325 = frontier_phi_57_54_ladder;
        }
        float _2327 = isnan(_2112) ? _1836 : (isnan(_1836) ? _2112 : min(_1836, _2112));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1688) + _1677;
        float _2333 = (_2328 * _1691) + _1681;
        float _2334 = (_2328 * _1694) + _1685;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2335;
        float _2338 = _2335 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2334 > _2338) || ((_2334 < _2336) || ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 < _2336) || (_2332 > _2338))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2334, cbModelParam._m0[17u].z, fma(_2333, cbModelParam._m0[17u].y, _2332 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2334, cbModelParam._m0[18u].z, fma(_2333, cbModelParam._m0[18u].y, _2332 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2334, cbModelParam._m0[19u].z, fma(_2333, cbModelParam._m0[19u].y, _2332 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_33_57_ladder = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2550.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2550.z * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_33_57_ladder_1;
        _1715 = frontier_phi_33_57_ladder;
        _1717 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1624);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1730 = (((_716 * _666) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1713 - _1615)) + _1615);
    float _1732 = (((_716 * _668) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1715 - _1617)) + _1617);
    float _1734 = (((_716 * _669) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1717 - _1619)) + _1619);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    uvec4 _1753 = floatBitsToUint(cbInstanceData._m0[_608 + 5u]);
    uint _1755 = _1753.x * 14u;
    uint _1756 = _1755 + 13u;
    float _1763 = _681 + (-1.0);
    float _1768 = (cbLight._m0[_1756].x * _1763) + 1.0;
    float _1769 = (cbLight._m0[_1756].y * _1763) + 1.0;
    float _1770 = (cbLight._m0[_1756].z * _1763) + 1.0;
    float _1771 = (cbLight._m0[_1756].w * _1763) + 1.0;
    uint _1772 = _1755 + 5u;
    float _1778 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1782 = _1755 + 4u;
    float _1789 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1793 = _1755 | 1u;
    float _1804 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_447, _448, _449));
    float _1807 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_447, _448, _449));
    float _4016 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _4027 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1812 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1814 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _1821 = ((cbLight._m0[_1772].x * _1778) * _1814) + ((cbLight._m0[_1782].x * _1789) * _1812);
    float _1822 = ((_1778 * cbLight._m0[_1772].y) * _1814) + ((_1789 * cbLight._m0[_1782].y) * _1812);
    float _1823 = ((_1778 * cbLight._m0[_1772].z) * _1814) + ((_1789 * cbLight._m0[_1782].z) * _1812);
    uvec4 _1828 = floatBitsToUint(cbLight._m0[_1755 + 12u]);
    bool _1830 = _1828.x == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1830)
    {
        _1841 = _1821;
        _1843 = _1822;
        _1845 = _1823;
    }
    else
    {
        uint _1849 = _1755 + 6u;
        float _1865 = (dot(vec3(cbLight._m0[_1755 + 2u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _1866 = _1865 * _1865;
        float _4038 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1868 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _1841 = (((cbLight._m0[_1849].x * 0.3183098733425140380859375) * _1867) * _1868) + _1821;
        _1843 = (((cbLight._m0[_1849].y * 0.3183098733425140380859375) * _1867) * _1868) + _1822;
        _1845 = (((cbLight._m0[_1849].z * 0.3183098733425140380859375) * _1867) * _1868) + _1823;
    }
    bool _1848 = _1828.y == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1848)
    {
        _1886 = _1841;
        _1888 = _1843;
        _1890 = _1845;
    }
    else
    {
        uint _2056 = _1755 + 7u;
        float _2072 = (dot(vec3(cbLight._m0[_1755 + 3u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4054 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2075 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _1886 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _1841;
        _1888 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _1843;
        _1890 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _1845;
    }
    uint _1893 = _1755 + 8u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _595) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1755].x + _529;
    float _1909 = cbLight._m0[_1755].y + _530;
    float _1910 = cbLight._m0[_1755].z + _531;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1755].xyz));
    float _4070 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1922 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1923 = dot(vec3(_447, _448, _449), vec3(_1915, _1916, _1917));
    float _4092 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1915, _1916, _1917));
    float _4103 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1907 * _1907;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1943 = exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0);
    float _1944 = 0.959999978542327880859375 - _663;
    float _1946 = 0.959999978542327880859375 - _664;
    float _1947 = 0.959999978542327880859375 - _665;
    float _1954 = 1.0 - _1907;
    float _1965 = (0.5 / (((_1922 * ((_1921 * _1954) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _1954) + _1907) * _1921))) * _1921;
    float _4114 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    uint _1978 = _1755 + 9u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _595) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1793].x + _529;
    float _1992 = cbLight._m0[_1793].y + _530;
    float _1993 = cbLight._m0[_1793].z + _531;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_1793].xyz));
    float _4125 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2005 = dot(vec3(_447, _448, _449), vec3(_1998, _1999, _2000));
    float _4136 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1998, _1999, _2000));
    float _4147 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1990 * _1990;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2024 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _2031 = 1.0 - _1990;
    float _2041 = (0.5 / (((_1922 * ((_2004 * _2031) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2031) + _1990) * _2004))) * _2004;
    float _4158 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2043 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    float _2053 = (((((_2024 * _1944) + _666) * cbLight._m0[_1978].x) * _2043) * _1778) + (((((_1943 * _1944) + _666) * cbLight._m0[_1893].x) * _1967) * _1789);
    float _2054 = (((((_2024 * _1946) + _668) * cbLight._m0[_1978].y) * _2043) * _1778) + (((((_1943 * _1946) + _668) * cbLight._m0[_1893].y) * _1967) * _1789);
    float _2055 = (((((_2024 * _1947) + _669) * cbLight._m0[_1978].z) * _2043) * _1778) + (((((_1943 * _1947) + _669) * cbLight._m0[_1893].z) * _1967) * _1789);
    float _2117;
    float _2119;
    float _2121;
    if (_1830)
    {
        _2117 = _2053;
        _2119 = _2054;
        _2121 = _2055;
    }
    else
    {
        uint _2123 = _1755 + 2u;
        uint _2127 = _1755 + 10u;
        float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _595) * 0.949999988079071044921875);
        float _2142 = _2141 * _2141;
        float _2143 = cbLight._m0[_2123].x + _529;
        float _2144 = cbLight._m0[_2123].y + _530;
        float _2145 = cbLight._m0[_2123].z + _531;
        float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
        float _2150 = _2149 * _2143;
        float _2151 = _2149 * _2144;
        float _2152 = _2149 * _2145;
        float _2153 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2123].xyz));
        float _4169 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2157 = dot(vec3(_447, _448, _449), vec3(_2150, _2151, _2152));
        float _4180 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2161 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2150, _2151, _2152));
        float _4191 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2165 = _2142 * _2142;
        float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
        float _2176 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
        float _2183 = 1.0 - _2142;
        float _2193 = (0.5 / (((_1922 * ((_2156 * _2183) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2183) + _2142) * _2156))) * _2156;
        float _4202 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2117 = (((((_2176 * _1944) + _666) * cbLight._m0[_2127].x) * _2195) * _2196) + _2053;
        _2119 = (((((_2176 * _1946) + _668) * cbLight._m0[_2127].y) * _2195) * _2196) + _2054;
        _2121 = (((((_2176 * _1947) + _669) * cbLight._m0[_2127].z) * _2195) * _2196) + _2055;
    }
    float _2231;
    float _2233;
    float _2235;
    if (_1848)
    {
        _2231 = _2117;
        _2233 = _2119;
        _2235 = _2121;
    }
    else
    {
        uint _2242 = _1755 + 3u;
        uint _2246 = _1755 + 11u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _595) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _529;
        float _2263 = cbLight._m0[_2242].y + _530;
        float _2264 = cbLight._m0[_2242].z + _531;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2242].xyz));
        float _4218 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2276 = dot(vec3(_447, _448, _449), vec3(_2269, _2270, _2271));
        float _4229 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4240 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
        float _2302 = 1.0 - _2261;
        float _2312 = (0.5 / (((_1922 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2302) + _2261) * _2275))) * _2275;
        float _4251 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2231 = (((((_2295 * _1944) + _666) * cbLight._m0[_2246].x) * _2314) * _2315) + _2117;
        _2233 = (((((_2295 * _1946) + _668) * cbLight._m0[_2246].y) * _2314) * _2315) + _2119;
        _2235 = (((((_2295 * _1947) + _669) * cbLight._m0[_2246].z) * _2314) * _2315) + _2121;
    }
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_1753.y == 0u)
    {
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2390;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2390;
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2390;
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.x;
        uint _2417 = uint((float(_2405.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2406))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2406)));
        float _2427 = (log2(_2393 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2428 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        uint _2431 = uint(isnan(14.0) ? _2428 : (isnan(_2428) ? 14.0 : min(_2428, 14.0)));
        uvec4 _2436 = texelFetch(g_lightClusterGridBuffer, int(((_2431 << 2u) + (_2417 << 6u)) >> 2u));
        uint _2437 = _2436.x;
        uint _2438 = _2405.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2438 >> 4u) & 15u)) + 4294967295u) & _2437) == 0u) || ((_2438 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            uint _2713 = 0u;
            uint _2722;
            bool _2723;
            for (;;)
            {
                _2722 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                _2723 = _2722 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2723)
                {
                    frontier_phi_74_pred = _2712;
                    frontier_phi_74_pred_1 = _2711;
                    frontier_phi_74_pred_2 = _2710;
                    frontier_phi_74_pred_3 = _2709;
                    frontier_phi_74_pred_4 = _2708;
                    frontier_phi_74_pred_5 = _2707;
                }
                else
                {
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    uint _2858;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2722;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    for (;;)
                    {
                        uint _2862 = uint(findLSB(_2858)) + (_2713 << 5u);
                        uint _2859 = (_2858 + 4294967295u) & _2858;
                        uint _2864 = _2862 * 48u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2884 = (_2862 * 48u) + 4u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2903 = (_2862 * 48u) + 8u;
                        vec3 _2914 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x));
                        float _2918 = _2878.x - _2391;
                        float _2919 = _2878.y - _2392;
                        float _2920 = _2878.z - _2393;
                        float _2921 = dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920));
                        float _2924 = inversesqrt(_2921);
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2928 = dot(vec3(_576, _579, _582), vec3(_2925, _2926, _2927));
                        float _2933 = 1.0 - (_2921 * _2878.w);
                        float _4277 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2935 = sqrt(_2921) * _2897.w;
                        float _2938 = 1.39999997615814208984375 / (_2935 + 1.39999997615814208984375);
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2928) + _2939;
                        float _2945 = _2935 * _2935;
                        float _2949 = ((isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))) * _2934) / ((_2945 * 0.699999988079071044921875) + 1.0);
                        float _2953 = (-0.0) - _2391;
                        float _2954 = (-0.0) - _2392;
                        float _2955 = (-0.0) - _2393;
                        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2970 = exp2(log2(1.0 / ((_2945 * 3.5) + 5.0)) * 0.25);
                        float _2971 = 1.0 - _697;
                        float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                        float _2979 = _2978 * _2978;
                        float _2980 = _2979 * _2979;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                        float _2991 = dot(vec3(_576, _579, _582), vec3(_2960, _2961, _2962));
                        float _4293 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2995 = dot(vec3(_576, _579, _582), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                        float _4304 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                        float _3003 = _2938 * _2979;
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2928) + _3004;
                        float _4315 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3009 = 1.0 - _2979;
                        float _3019 = (0.5 / (((_3008 * ((_2994 * _3009) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3008 * _3009) + _2979) * _2994))) * _3008;
                        float _4326 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3030 = (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3002 * _3002) * ((_2945 * 2.1991131305694580078125) + 3.141590118408203125))) * _2934;
                        _2782 = (_2949 * _2897.x) + _2855;
                        _2783 = (_2949 * _2897.y) + _2856;
                        _2784 = (_2949 * _2897.z) + _2857;
                        _2779 = (_3030 * _2914.x) + _2852;
                        _2780 = (_3030 * _2914.y) + _2853;
                        _2781 = (_3030 * _2914.z) + _2854;
                        if (_2859 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2859;
                        }
                    }
                    frontier_phi_74_pred = _2784;
                    frontier_phi_74_pred_1 = _2783;
                    frontier_phi_74_pred_2 = _2782;
                    frontier_phi_74_pred_3 = _2781;
                    frontier_phi_74_pred_4 = _2780;
                    frontier_phi_74_pred_5 = _2779;
                }
                _2566 = frontier_phi_74_pred;
                _2564 = frontier_phi_74_pred_1;
                _2562 = frontier_phi_74_pred_2;
                _2560 = frontier_phi_74_pred_3;
                _2558 = frontier_phi_74_pred_4;
                _2556 = frontier_phi_74_pred_5;
                uint _2714 = _2713 + 1u;
                if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2707 = _2556;
                    _2708 = _2558;
                    _2709 = _2560;
                    _2710 = _2562;
                    _2711 = _2564;
                    _2712 = _2566;
                    _2713 = _2714;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((4294967295u << _2572) & _2437) == 0u)
        {
            _2675 = _2555;
            _2677 = _2557;
            _2679 = _2559;
            _2681 = _2561;
            _2683 = _2563;
            _2685 = _2565;
        }
        else
        {
            float _2700 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
            float _2701 = _2700 * _2391;
            float _2702 = _2700 * _2392;
            float _2703 = _2700 * _2393;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2835 = _2555;
                float _2836 = _2557;
                float _2837 = _2559;
                float _2838 = _2561;
                float _2839 = _2563;
                float _2840 = _2565;
                uint _2841 = _2572;
                uint _2850;
                bool _2851;
                for (;;)
                {
                    _2850 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                    _2851 = _2850 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2851)
                    {
                        frontier_phi_85_pred = _2839;
                        frontier_phi_85_pred_1 = _2838;
                        frontier_phi_85_pred_2 = _2837;
                        frontier_phi_85_pred_3 = _2836;
                        frontier_phi_85_pred_4 = _2835;
                        frontier_phi_85_pred_5 = _2840;
                    }
                    else
                    {
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        uint _3063 = _2850;
                        uint _3064;
                        vec4 _3089;
                        float _3090;
                        vec4 _3105;
                        vec3 _3117;
                        vec4 _3133;
                        vec4 _3148;
                        float _3195;
                        bool _3196;
                        for (;;)
                        {
                            uint _3074 = ((_2841 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3063));
                            _3064 = (_3063 + 4294967295u) & _3063;
                            uint _3076 = _3074 * 40u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3090 = _3089.w;
                            uint _3092 = (_3074 * 40u) + 4u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3074 * 40u) + 8u;
                            _3117 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x));
                            uint _3120 = (_3074 * 40u) + 16u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3135 = (_3074 * 40u) + 20u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3151 = (_3074 * 40u) + 24u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3170 = (_3074 * 40u) + 28u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3195 = fma(_2393, _3183.z, fma(_2392, _3183.y, _3183.x * _2391)) + _3183.w;
                            _3196 = !((fma(_2393, _3164.z, fma(_2392, _3164.y, _3164.x * _2391)) + _3164.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3196)
                            {
                                float _3223 = _3089.x - _2391;
                                float _3224 = _3089.y - _2392;
                                float _3225 = _3089.z - _2393;
                                float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                                float _3229 = inversesqrt(_3226);
                                float _3230 = _3229 * _3223;
                                float _3231 = _3229 * _3224;
                                float _3232 = _3229 * _3225;
                                float _3236 = 1.0 - (_3226 / (_3090 * _3090));
                                float _4337 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3241 = sqrt(_3226) * _3105.w;
                                float _3243 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                                float _3244 = _3243 * _3243;
                                float _3247 = ((1.0 - _3244) * dot(vec3(_3230, _3231, _3232), vec3(_576, _579, _582))) + _3244;
                                float _3250 = _3241 * _3241;
                                float _3254 = (fma(_2393, _3133.z, fma(_2392, _3133.y, _3133.x * _2391)) + _3133.w) / _3195;
                                float _3255 = (fma(_2393, _3148.z, fma(_2392, _3148.y, _3148.x * _2391)) + _3148.w) / _3195;
                                float _3259 = 1.0 - dot(vec2(_3254, _3255), vec2(_3254, _3255));
                                float _4353 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3261 = _3260 * (((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3237) / ((_3250 * 0.699999988079071044921875) + 1.0));
                                float _3273 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                                float _3274 = 1.0 - _697;
                                float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                                float _3282 = _3281 * _3281;
                                float _3283 = _3282 * _3282;
                                float _3284 = _3230 - _2701;
                                float _3285 = _3231 - _2702;
                                float _3286 = _3232 - _2703;
                                float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                                float _3294 = dot(vec3(_576, _579, _582), vec3((-0.0) - _2701, (-0.0) - _2702, (-0.0) - _2703));
                                float _4364 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3298 = dot(vec3(_576, _579, _582), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                                float _4375 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                                float _3306 = _3243 * _3282;
                                float _3307 = _3306 * _3306;
                                float _3313 = ((1.0 - _3307) * dot(vec3(_576, _579, _582), vec3(_3230, _3231, _3232))) + _3307;
                                float _4386 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3315 = 1.0 - _3282;
                                float _3325 = (0.5 / (((_3314 * ((_3297 * _3315) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3282) * _3297))) * _3314;
                                float _4397 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3335 = (_3260 * _3237) * (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3305 * _3305) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3261 * _3105.y;
                                frontier_phi_91_pred_1 = _3261 * _3105.x;
                                frontier_phi_91_pred_2 = _3335 * _3117.z;
                                frontier_phi_91_pred_3 = _3335 * _3117.y;
                                frontier_phi_91_pred_4 = _3335 * _3117.x;
                                frontier_phi_91_pred_5 = _3261 * _3105.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3343 = frontier_phi_91_pred;
                            _3342 = frontier_phi_91_pred_1;
                            _3341 = frontier_phi_91_pred_2;
                            _3340 = frontier_phi_91_pred_3;
                            _3339 = frontier_phi_91_pred_4;
                            _3344 = frontier_phi_91_pred_5;
                            _3047 = _3342 + _3060;
                            _3048 = _3343 + _3061;
                            _3049 = _3344 + _3062;
                            _3044 = _3339 + _3057;
                            _3045 = _3340 + _3058;
                            _3046 = _3341 + _3059;
                            if (_3064 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3064;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3048;
                        frontier_phi_85_pred_1 = _3047;
                        frontier_phi_85_pred_2 = _3046;
                        frontier_phi_85_pred_3 = _3045;
                        frontier_phi_85_pred_4 = _3044;
                        frontier_phi_85_pred_5 = _3049;
                    }
                    _2684 = frontier_phi_85_pred;
                    _2682 = frontier_phi_85_pred_1;
                    _2680 = frontier_phi_85_pred_2;
                    _2678 = frontier_phi_85_pred_3;
                    _2676 = frontier_phi_85_pred_4;
                    _2686 = frontier_phi_85_pred_5;
                    uint _2842 = _2841 + 1u;
                    if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2835 = _2676;
                        _2836 = _2678;
                        _2837 = _2680;
                        _2838 = _2682;
                        _2839 = _2684;
                        _2840 = _2686;
                        _2841 = _2842;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2686;
                frontier_phi_66_67_ladder_1 = _2682;
                frontier_phi_66_67_ladder_2 = _2684;
                frontier_phi_66_67_ladder_3 = _2678;
                frontier_phi_66_67_ladder_4 = _2676;
                frontier_phi_66_67_ladder_5 = _2680;
            }
            else
            {
                frontier_phi_66_67_ladder = _2565;
                frontier_phi_66_67_ladder_1 = _2561;
                frontier_phi_66_67_ladder_2 = _2563;
                frontier_phi_66_67_ladder_3 = _2557;
                frontier_phi_66_67_ladder_4 = _2555;
                frontier_phi_66_67_ladder_5 = _2559;
            }
            _2675 = frontier_phi_66_67_ladder_4;
            _2677 = frontier_phi_66_67_ladder_3;
            _2679 = frontier_phi_66_67_ladder_5;
            _2681 = frontier_phi_66_67_ladder_1;
            _2683 = frontier_phi_66_67_ladder_2;
            _2685 = frontier_phi_66_67_ladder;
        }
        float _2690 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2449 = (_2690 * _2681) + _1886;
        _2451 = (_2690 * _2683) + _1888;
        _2453 = (_2690 * _2685) + _1890;
        _2455 = ((_2675 * _666) * _2690) + _2231;
        _2457 = ((_2677 * _668) * _2690) + _2233;
        _2459 = ((_2679 * _669) * _2690) + _2235;
    }
    else
    {
        _2449 = _1886;
        _2451 = _1888;
        _2453 = _1890;
        _2455 = _2231;
        _2457 = _2233;
        _2459 = _2235;
    }
    vec4 _2465 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4413 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4424 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4435 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2489 = (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2449 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _681))) + ((_2455 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + (_2465.x * cbMtdParam._m0[3u].x);
    float _2491 = ((_2465.y * cbMtdParam._m0[3u].x) + ((_2457 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2451 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _681)));
    float _2493 = ((_2465.z * cbMtdParam._m0[3u].x) + ((_2459 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2453 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _681)));
    float _2494 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2495 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2496 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    uint _2497 = _608 + 6u;
    float _2505 = _552 / cbSceneParam._m0[86u].x;
    float _2506 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2520 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2522 = _2520.x;
    float _2523 = _2520.y;
    float _2524 = _2520.z;
    float _2525 = _2520.w;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2581 = _2580 / _470;
        float _2592 = _2581 * _522;
        float _2593 = _523 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2595 = _2581 * _524;
        float _2597 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2598 = _2597 + cbSceneParam._m0[79u].w;
        float _2599 = cbSceneParam._m0[79u].w - _2593;
        float _2605 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2595 * _2595));
        float _2608 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2605;
        float _2613 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2615 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2792;
        if (abs((_2594 - _2597) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2792 = ((((_2598 > 0.0) ? exp2(_2613 * _2598) : (2.0 - exp2(_2615 * _2598))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2608;
        }
        else
        {
            float _2736 = 1.0 / cbSceneParam._m0[80u].x;
            float _2737 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : max(_2598, _2599));
            float _2738 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : min(_2598, _2599));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            _2792 = ((abs(_2605 / _2594) * cbSceneParam._m0[80u].y) * ((((_2747 - _2748) * 2.0) - ((exp2(_2613 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0)))) - exp2(_2613 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))))) * _2736)) - ((exp2(_2615 * _2747) - exp2(_2615 * _2748)) * _2736))) + (_2608 * cbSceneParam._m0[80u].z);
        }
        vec4 _2794 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, 1.0), 0.0);
        float _2803 = exp2((_2792 * (-1.44269502162933349609375)) * (1.0 - _2794.w));
        float _2804 = log2(_2803);
        float _2820 = log2(_2525);
        _2617 = (exp2(_2820 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].x)) * _2794.x) / cbSceneParam._m0[78u].x)) + _2522;
        _2619 = (exp2(_2820 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].y)) * _2794.y) / cbSceneParam._m0[78u].y)) + _2523;
        _2621 = (exp2(_2820 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].z)) * _2794.z) / cbSceneParam._m0[78u].z)) + _2524;
        _2623 = _2803 * _2525;
    }
    else
    {
        _2617 = _2522;
        _2619 = _2523;
        _2621 = _2524;
        _2623 = _2525;
    }
    bool _2830;
    vec4 _2633;
    vec4 _2655;
    float _2657;
    float _2661;
    float _2662;
    float _2663;
    float _2664;
    bool _2674;
    for (;;)
    {
        _2633 = cbMatDynParam._m0[0u];
        float _2635 = roundEven(_2633.y);
        bool _2636 = _2635 == 3.0;
        float _2637 = log2(_2623);
        float _2644 = exp2(_2637 * cbSceneParam._m0[78u].x) * _2494;
        float _2645 = exp2(_2637 * cbSceneParam._m0[78u].y) * _2495;
        float _2646 = exp2(_2637 * cbSceneParam._m0[78u].z) * _2496;
        float _2653 = _538 + (-0.5);
        _2655 = cbMtdParam._m0[1u];
        _2657 = _2655.y * _2653;
        float _2660 = (_2635 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2661 = _2660 * (_2636 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2617)));
        _2662 = _2660 * (_2636 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2619)));
        _2663 = _2660 * (_2636 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2621)));
        _2664 = _2653 * 0.999000012874603271484375;
        _2674 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2674)
        {
            if ((cbInstanceData._m0[_608 + 7u].x + _2664) < 0.5)
            {
                _2830 = true;
                break;
            }
        }
        uint _2771 = _610 + uint(_2633.w);
        if ((cbInstanceData._m0[_2771].w < 1.0) && ((cbInstanceData._m0[_2771].w + _2664) < 0.5))
        {
            _2830 = true;
            break;
        }
        if ((_2657 + 1.0) < _2655.x)
        {
            _2830 = true;
            break;
        }
        _2830 = false;
        break;
    }
    float _3035;
    if (_2830)
    {
        discard_state = true;
        _3035 = 0.0;
    }
    else
    {
        _3035 = cbInstanceData._m0[_2497].w;
    }
    SV_Target.x = _2661;
    SV_Target.y = _2662;
    SV_Target.z = _2663;
    SV_Target.w = _3035;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2497].w;
    discard_exit();
}


