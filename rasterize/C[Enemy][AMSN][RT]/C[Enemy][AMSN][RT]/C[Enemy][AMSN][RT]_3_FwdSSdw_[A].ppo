#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1194;
float _3618;
float _3619;
float _3620;
float _3621;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _267 = log2(0.0);
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[14u].x;
    _194[0u] = cbMtdParam._m0[14u].y;
    _195[0u] = cbMtdParam._m0[14u].z;
    _193[1u] = cbMtdParam._m0[15u].x;
    _194[1u] = cbMtdParam._m0[15u].y;
    _195[1u] = cbMtdParam._m0[15u].z;
    _193[2u] = cbMtdParam._m0[16u].x;
    _194[2u] = cbMtdParam._m0[16u].y;
    _195[2u] = cbMtdParam._m0[16u].z;
    _193[3u] = cbMtdParam._m0[11u].x;
    _194[3u] = cbMtdParam._m0[11u].y;
    _195[3u] = cbMtdParam._m0[11u].z;
    _193[4u] = cbMtdParam._m0[12u].x;
    _194[4u] = cbMtdParam._m0[12u].y;
    _195[4u] = cbMtdParam._m0[12u].z;
    _193[5u] = cbMtdParam._m0[13u].x;
    _194[5u] = cbMtdParam._m0[13u].y;
    _195[5u] = cbMtdParam._m0[13u].z;
    vec4 _339 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _343 = _339.y;
    float _346 = (_339.x + (-0.02500000037252902984619140625)) * 8.0;
    float _348 = roundEven(_346);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    uint _352 = uint(int(isnan(5.0) ? _349 : (isnan(_349) ? 5.0 : min(_349, 5.0))));
    float _369 = roundEven(5.0 - _346);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(4.0) ? _370 : (isnan(_370) ? 4.0 : min(_370, 4.0));
    float _377;
    float _379;
    if (exp2(_267 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _377 = cbMtdParam._m0[26u].x;
        _379 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _377 = cbMtdParam._m0[22u].x;
        _379 = cbMtdParam._m0[22u].y;
    }
    float _381 = _377 * TEXCOORD.x;
    float _382 = _379 * TEXCOORD.y;
    float _393 = floor(_371);
    vec4 _396 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _381) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _382) + cbTextureTilingScale._m0[6u].w, _393));
    vec4 _418 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _426 = ((((((_193[_352] - cbMtdParam._m0[18u].x) * _343) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _396.x) * cbMtdParam._m0[9u].x) * _418.x;
    float _430 = ((((((_194[_352] - cbMtdParam._m0[18u].y) * _343) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _396.y) * cbMtdParam._m0[9u].y) * _418.y;
    float _434 = ((((((_195[_352] - cbMtdParam._m0[18u].z) * _343) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _396.z) * cbMtdParam._m0[9u].z) * _418.z;
    vec4 _446 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _450 = _446.z;
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[22u].z;
    _189[0u] = cbMtdParam._m0[22u].w;
    _188[1u] = cbMtdParam._m0[23u].z;
    _189[1u] = cbMtdParam._m0[23u].w;
    _188[2u] = cbMtdParam._m0[24u].x;
    _189[2u] = cbMtdParam._m0[24u].y;
    _188[3u] = cbMtdParam._m0[24u].z;
    _189[3u] = cbMtdParam._m0[24u].w;
    _188[4u] = cbMtdParam._m0[23u].x;
    _189[4u] = cbMtdParam._m0[23u].y;
    float _494 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _496 = uint(int(isnan(4.0) ? _494 : (isnan(_494) ? 4.0 : min(_494, 4.0))));
    float _501 = _189[_496] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _381) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _382) + cbTextureTilingScale._m0[8u].w, _393)).x;
    vec4 _520 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _381) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _382) + cbTextureTilingScale._m0[7u].w, _393));
    float _527 = (_520.x * 2.0) + (-1.0);
    float _528 = (_520.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3660 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))));
    float _544 = (cbMtdParam._m0[20u].x * (((_450 * 2.0) * (_520.z + _188[_496])) - _450)) + _450;
    float _548 = (cbMtdParam._m0[20u].y * ((_446.x * 2.0) + (-1.0))) + _527;
    float _549 = (cbMtdParam._m0[20u].y * ((_446.y * 2.0) + (-1.0))) + _528;
    float _552 = fma(_535, _245, fma(_549, _237 * TANGENT.x, (_223 * _215) * _548));
    float _555 = fma(_535, _246, fma(_549, _237 * TANGENT.y, (_223 * _216) * _548));
    float _558 = fma(_535, _247, fma(_549, _237 * TANGENT.z, (_223 * _217) * _548));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3671 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _566 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3693 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3704 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3715 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _570 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _586 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _637 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _627);
    float _638 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _627);
    float _639 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _627);
    float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
    float _644 = _637 * _643;
    float _645 = _638 * _643;
    float _646 = _639 * _643;
    vec4 _651 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _653 = _651.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _874 = sqrt(((_637 * _637) + (_638 * _638)) + (_639 * _639));
        float _880 = (cbMatDynParam._m0[5u].x * _874) + cbMatDynParam._m0[5u].y;
        float _3726 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _885 = (cbMatDynParam._m0[5u].z * _874) + cbMatDynParam._m0[5u].w;
        float _3737 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) - _881)) + _881) < ((_653 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _669 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _671 = _669.w;
    float _689 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _692 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _695 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    vec4 _697 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = (((_697.y - _566) + (_697.w * _566)) * cbMtdParam._m0[3u].x) + _566;
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _722 = _721 + 9u;
    uint _723 = _722 + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3748 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    vec4 _735 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _740 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = (((_740.x - _570) + (_740.w * _570)) * cbMtdParam._m0[3u].x) + _570;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _671) - _732) + _735.x)) + _732;
    float _765 = (cbMtdParam._m0[3u].x * (((_733 * _671) - _733) + _735.y)) + _733;
    float _766 = (cbMtdParam._m0[3u].x * (((_734 * _671) - _734) + _735.z)) + _734;
    float _767 = 1.0 - _751;
    float _768 = _767 * _764;
    float _769 = _767 * _765;
    float _770 = _767 * _766;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _751;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _751;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _751;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _793 = _790.x * TEXCOORD_4;
    float _794 = dot(vec3(_563, _564, _565), vec3(_644, _645, _646));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _563) - _644;
    float _802 = (_797 * _564) - _645;
    float _803 = (_797 * _565) - _646;
    float _807 = abs(dot(vec3(_644, _645, _646), vec3(_563, _564, _565)));
    float _3781 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_708);
    float _820 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _826 = (1.0 - _820) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _827 = _820 * _809;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1193;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _918 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _922 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _926 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _951 = _855 + _563;
        float _952 = _859 + _564;
        float _953 = _863 + _565;
        float _963 = fma(_953, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951)) - _918;
        float _964 = fma(_953, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951)) - _922;
        float _965 = fma(_953, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951)) - _926;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_918 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_922 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[34u].z) + ((((((_926 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1021 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_987.x + (-0.5));
        float _1023 = _1021 * (_987.y + (-0.5));
        float _1024 = _1021 * (_987.z + (-0.5));
        float _1031 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_994.x + (-0.5));
        float _1033 = _1031 * (_994.y + (-0.5));
        float _1034 = _1031 * (_994.z + (-0.5));
        float _1041 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1001.x + (-0.5));
        float _1043 = _1041 * (_1001.y + (-0.5));
        float _1044 = _1041 * (_1001.z + (-0.5));
        float _1051 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1008.x + (-0.5));
        float _1053 = _1051 * (_1008.y + (-0.5));
        float _1054 = _1051 * (_1008.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1075 = (dot(vec3(_563, _564, _565), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1085 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3829 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1087 + 1.0))) + _1092) * _1055;
        float _1102 = _1023 * 0.5;
        float _1103 = _1033 * 0.5;
        float _1104 = _1043 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_563, _564, _565), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3862 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1129 + 1.0))) + _1134) * _1056;
        float _1144 = _1024 * 0.5;
        float _1145 = _1034 * 0.5;
        float _1146 = _1044 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_563, _564, _565), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3895 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1171 + 1.0))) + _1176) * _1057;
        _1193 = _1024;
        _1195 = _1023;
        _1196 = _1022;
        _1197 = _1034;
        _1198 = _1033;
        _1199 = _1032;
        _1200 = _1044;
        _1201 = _1043;
        _1202 = _1042;
        _1203 = _1057;
        _1204 = _1056;
        _1205 = _1055;
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _1194;
        _1195 = _1194;
        _1196 = _1194;
        _1197 = _1194;
        _1198 = _1194;
        _1199 = _1194;
        _1200 = _1194;
        _1201 = _1194;
        _1202 = _1194;
        _1203 = _1194;
        _1204 = _1194;
        _1205 = _1194;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1237 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1241 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1245 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1268 = _855 + _563;
        float _1269 = _859 + _564;
        float _1270 = _863 + _565;
        float _1280 = fma(_1270, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268)) - _1237;
        float _1281 = fma(_1270, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268)) - _1241;
        float _1282 = fma(_1270, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268)) - _1245;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1237 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1241 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[35u].z) + ((((((_1245 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1336 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1303.x + (-0.5));
        float _1338 = _1336 * (_1303.y + (-0.5));
        float _1339 = _1336 * (_1303.z + (-0.5));
        float _1346 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1310.x + (-0.5));
        float _1348 = _1346 * (_1310.y + (-0.5));
        float _1349 = _1346 * (_1310.z + (-0.5));
        float _1356 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1317.x + (-0.5));
        float _1358 = _1356 * (_1317.y + (-0.5));
        float _1359 = _1356 * (_1317.z + (-0.5));
        float _1366 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1324.x + (-0.5));
        float _1368 = _1366 * (_1324.y + (-0.5));
        float _1369 = _1366 * (_1324.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_563, _564, _565), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3958 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1400 + 1.0))) + _1405) * _1370;
        float _1415 = _1338 * 0.5;
        float _1416 = _1348 * 0.5;
        float _1417 = _1358 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_563, _564, _565), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3991 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1442 + 1.0))) + _1447) * _1371;
        float _1457 = _1339 * 0.5;
        float _1458 = _1349 * 0.5;
        float _1459 = _1359 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_563, _564, _565), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4024 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1484 + 1.0))) + _1489) * _1372;
        _1506 = _1339;
        _1507 = _1338;
        _1508 = _1337;
        _1509 = _1349;
        _1510 = _1348;
        _1511 = _1347;
        _1512 = _1359;
        _1513 = _1358;
        _1514 = _1357;
        _1515 = _1372;
        _1516 = _1371;
        _1517 = _1370;
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1194;
        _1507 = _1194;
        _1508 = _1194;
        _1509 = _1194;
        _1510 = _1194;
        _1511 = _1194;
        _1512 = _1194;
        _1513 = _1194;
        _1514 = _1194;
        _1515 = _1194;
        _1516 = _1194;
        _1517 = _1194;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1206)) + _1206;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1207)) + _1207;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1208)) + _1208;
    float _1553 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1530));
    float _1574 = _801 * 0.5;
    float _1575 = _802 * 0.5;
    float _1576 = _803 * 0.5;
    float _1577 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1580 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1583 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1617;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1590 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1193, _1197, _1200, _1203));
        float _1594 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1598 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1605 = dot(vec4(cbModelParam._m0[39u]), vec4(_1574, _1575, _1576, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1628;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1619 = dot(vec4(cbModelParam._m0[40u]), vec4(_1574, _1575, _1576, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1632 = (_1628 * cbModelParam._m0[1u].x) + (_1617 * (1.0 - cbModelParam._m0[1u].x));
    float _1642 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1642 : min(cbModelParam._m0[25u].z, _1642));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1704 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1707 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1735 = frontier_phi_21_19_ladder;
        }
        float _1958;
        if (_1704 > 0.0)
        {
            _1958 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1958 = frontier_phi_30_26_ladder;
        }
        float _2215;
        if (_1707 > 0.0)
        {
            _2215 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2215 = frontier_phi_42_37_ladder;
        }
        float _2217 = isnan(_1958) ? _1735 : (isnan(_1735) ? _1958 : min(_1735, _1958));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1701) + _1690;
        float _2223 = (_2218 * _1704) + _1694;
        float _2224 = (_2218 * _1707) + _1698;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2225;
        float _2229 = _2225 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 > _2229) || ((_2223 < _2227) || ((_2222 < _2227) || (_2222 > _2229))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1643);
            frontier_phi_20_42_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_20_42_ladder_2;
        _1725 = frontier_phi_20_42_ladder_1;
        _1727 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1643);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1785 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1789 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1793 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1796 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1799 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1802 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1963;
        if (_1796 > 0.0)
        {
            _1963 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1963 = frontier_phi_32_28_ladder;
        }
        float _2242;
        if (_1799 > 0.0)
        {
            _2242 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2242 = frontier_phi_44_39_ladder;
        }
        float _2455;
        if (_1802 > 0.0)
        {
            _2455 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2455 = frontier_phi_53_50_ladder;
        }
        float _2457 = isnan(_2242) ? _1963 : (isnan(_1963) ? _2242 : min(_1963, _2242));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1796) + _1785;
        float _2463 = (_2458 * _1799) + _1789;
        float _2464 = (_2458 * _1802) + _1793;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2465;
        float _2468 = _2465 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2464 > _2468) || ((_2464 < _2466) || ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 < _2466) || (_2462 > _2468))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2464, cbModelParam._m0[17u].z, fma(_2463, cbModelParam._m0[17u].y, _2462 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2464, cbModelParam._m0[18u].z, fma(_2463, cbModelParam._m0[18u].y, _2462 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2464, cbModelParam._m0[19u].z, fma(_2463, cbModelParam._m0[19u].y, _2462 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_29_53_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1821 = frontier_phi_29_53_ladder_2;
        _1823 = frontier_phi_29_53_ladder_1;
        _1825 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1732);
        _1821 = _1805.x * cbModelParam._m0[1u].z;
        _1823 = _1805.y * cbModelParam._m0[1u].z;
        _1825 = _1805.z * cbModelParam._m0[1u].z;
    }
    float _1838 = (((_826 * _778) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1821 - _1723)) + _1723);
    float _1840 = (((_826 * _780) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1823 - _1725)) + _1725);
    float _1842 = (((_826 * _781) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1845 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1848 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1851 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, _1838 * cbSceneParam._m0[91u].x));
    vec4 _1859 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_666, _667));
    float _1861 = _1859.w;
    float _1873 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1861);
    float _1874 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1861);
    float _1875 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1861);
    uvec4 _1879 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _1881 = _1879.x * 14u;
    uint _1882 = _1881 + 13u;
    float _1889 = _793 + (-1.0);
    float _1894 = (cbLight._m0[_1882].x * _1889) + 1.0;
    float _1895 = (cbLight._m0[_1882].y * _1889) + 1.0;
    float _1896 = (cbLight._m0[_1882].z * _1889) + 1.0;
    float _1897 = (cbLight._m0[_1882].w * _1889) + 1.0;
    uint _1898 = _1881 + 5u;
    float _1904 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1908 = _1881 + 4u;
    float _1917 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1921 = _1881 | 1u;
    float _1932 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_563, _564, _565));
    float _1935 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_563, _564, _565));
    float _4160 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _4171 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1940 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _1942 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _1949 = ((cbLight._m0[_1898].x * _1904) * _1942) + (((cbLight._m0[_1908].x * _1873) * _1917) * _1940);
    float _1950 = ((_1904 * cbLight._m0[_1898].y) * _1942) + (((cbLight._m0[_1908].y * _1874) * _1917) * _1940);
    float _1951 = ((_1904 * cbLight._m0[_1898].z) * _1942) + (((cbLight._m0[_1908].z * _1875) * _1917) * _1940);
    uvec4 _1955 = floatBitsToUint(cbLight._m0[_1881 + 12u]);
    bool _1957 = _1955.x == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1957)
    {
        _1968 = _1949;
        _1970 = _1950;
        _1972 = _1951;
    }
    else
    {
        uint _1976 = _1881 + 6u;
        float _1992 = (dot(vec3(cbLight._m0[_1881 + 2u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _4182 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1995 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _1968 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1949;
        _1970 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1950;
        _1972 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1951;
    }
    bool _1975 = _1955.y == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1975)
    {
        _2013 = _1968;
        _2015 = _1970;
        _2017 = _1972;
    }
    else
    {
        uint _2186 = _1881 + 7u;
        float _2202 = (dot(vec3(cbLight._m0[_1881 + 3u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4198 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2205 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2013 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _1968;
        _2015 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _1970;
        _2017 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _1972;
    }
    uint _2020 = _1881 + 8u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _708) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1881].x + _644;
    float _2036 = cbLight._m0[_1881].y + _645;
    float _2037 = cbLight._m0[_1881].z + _646;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1881].xyz));
    float _4214 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2049 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2050 = dot(vec3(_563, _564, _565), vec3(_2042, _2043, _2044));
    float _4236 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2042, _2043, _2044));
    float _4247 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2034 * _2034;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2070 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
    float _2071 = 0.959999978542327880859375 - _775;
    float _2073 = 0.959999978542327880859375 - _776;
    float _2074 = 0.959999978542327880859375 - _777;
    float _2081 = 1.0 - _2034;
    float _2092 = (0.5 / (((_2049 * ((_2048 * _2081) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2081) + _2034) * _2048))) * _2048;
    float _4258 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    uint _2108 = _1881 + 9u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _708) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1921].x + _644;
    float _2122 = cbLight._m0[_1921].y + _645;
    float _2123 = cbLight._m0[_1921].z + _646;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1921].xyz));
    float _4269 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2135 = dot(vec3(_563, _564, _565), vec3(_2128, _2129, _2130));
    float _4280 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2128, _2129, _2130));
    float _4291 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2120 * _2120;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2154 = exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0);
    float _2161 = 1.0 - _2120;
    float _2171 = (0.5 / (((_2049 * ((_2134 * _2161) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2161) + _2120) * _2134))) * _2134;
    float _4302 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    float _2183 = (((((_2154 * _2071) + _778) * cbLight._m0[_2108].x) * _2173) * _1904) + ((((cbLight._m0[_2020].x * _1873) * ((_2070 * _2071) + _778)) * _2094) * _1917);
    float _2184 = (((((_2154 * _2073) + _780) * cbLight._m0[_2108].y) * _2173) * _1904) + ((((cbLight._m0[_2020].y * _1874) * ((_2070 * _2073) + _780)) * _2094) * _1917);
    float _2185 = (((((_2154 * _2074) + _781) * cbLight._m0[_2108].z) * _2173) * _1904) + ((((cbLight._m0[_2020].z * _1875) * ((_2070 * _2074) + _781)) * _2094) * _1917);
    float _2247;
    float _2249;
    float _2251;
    if (_1957)
    {
        _2247 = _2183;
        _2249 = _2184;
        _2251 = _2185;
    }
    else
    {
        uint _2253 = _1881 + 2u;
        uint _2257 = _1881 + 10u;
        float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _708) * 0.949999988079071044921875);
        float _2272 = _2271 * _2271;
        float _2273 = cbLight._m0[_2253].x + _644;
        float _2274 = cbLight._m0[_2253].y + _645;
        float _2275 = cbLight._m0[_2253].z + _646;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2280 = _2279 * _2273;
        float _2281 = _2279 * _2274;
        float _2282 = _2279 * _2275;
        float _2283 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2253].xyz));
        float _4313 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2287 = dot(vec3(_563, _564, _565), vec3(_2280, _2281, _2282));
        float _4324 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2291 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2280, _2281, _2282));
        float _4335 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2295 = _2272 * _2272;
        float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
        float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0);
        float _2313 = 1.0 - _2272;
        float _2323 = (0.5 / (((_2049 * ((_2286 * _2313) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2313) + _2272) * _2286))) * _2286;
        float _4346 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2247 = (((((_2306 * _2071) + _778) * cbLight._m0[_2257].x) * _2325) * _2326) + _2183;
        _2249 = (((((_2306 * _2073) + _780) * cbLight._m0[_2257].y) * _2325) * _2326) + _2184;
        _2251 = (((((_2306 * _2074) + _781) * cbLight._m0[_2257].z) * _2325) * _2326) + _2185;
    }
    float _2361;
    float _2363;
    float _2365;
    if (_1975)
    {
        _2361 = _2247;
        _2363 = _2249;
        _2365 = _2251;
    }
    else
    {
        uint _2372 = _1881 + 3u;
        uint _2376 = _1881 + 11u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _708) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _644;
        float _2393 = cbLight._m0[_2372].y + _645;
        float _2394 = cbLight._m0[_2372].z + _646;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2372].xyz));
        float _4362 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2406 = dot(vec3(_563, _564, _565), vec3(_2399, _2400, _2401));
        float _4373 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4384 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
        float _2432 = 1.0 - _2391;
        float _2442 = (0.5 / (((_2049 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2432) + _2391) * _2405))) * _2405;
        float _4395 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2361 = (((((_2425 * _2071) + _778) * cbLight._m0[_2376].x) * _2444) * _2445) + _2247;
        _2363 = (((((_2425 * _2073) + _780) * cbLight._m0[_2376].y) * _2444) * _2445) + _2249;
        _2365 = (((((_2425 * _2074) + _781) * cbLight._m0[_2376].z) * _2444) * _2445) + _2251;
    }
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_1879.y == 0u)
    {
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2520;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2520;
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2520;
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.x;
        uint _2547 = uint((float(_2535.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2536))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2536)));
        float _2557 = (log2(_2523 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2558 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        uint _2561 = uint(isnan(14.0) ? _2558 : (isnan(_2558) ? 14.0 : min(_2558, 14.0)));
        uvec4 _2566 = texelFetch(g_lightClusterGridBuffer, int(((_2561 << 2u) + (_2547 << 6u)) >> 2u));
        uint _2567 = _2566.x;
        uint _2568 = _2535.z;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((((1u << ((_2568 >> 4u) & 15u)) + 4294967295u) & _2567) == 0u) || ((_2568 & 240u) == 0u))
        {
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
        }
        else
        {
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            uint _2843 = 0u;
            uint _2852;
            bool _2853;
            for (;;)
            {
                _2852 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                _2853 = _2852 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2853)
                {
                    frontier_phi_70_pred = _2837;
                    frontier_phi_70_pred_1 = _2842;
                    frontier_phi_70_pred_2 = _2841;
                    frontier_phi_70_pred_3 = _2840;
                    frontier_phi_70_pred_4 = _2839;
                    frontier_phi_70_pred_5 = _2838;
                }
                else
                {
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    uint _2988;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2852;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    for (;;)
                    {
                        uint _2992 = uint(findLSB(_2988)) + (_2843 << 5u);
                        uint _2989 = (_2988 + 4294967295u) & _2988;
                        uint _2994 = _2992 * 48u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3014 = (_2992 * 48u) + 4u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3033 = (_2992 * 48u) + 8u;
                        vec3 _3044 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x));
                        float _3048 = _3008.x - _2521;
                        float _3049 = _3008.y - _2522;
                        float _3050 = _3008.z - _2523;
                        float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                        float _3054 = inversesqrt(_3051);
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3058 = dot(vec3(_689, _692, _695), vec3(_3055, _3056, _3057));
                        float _3063 = 1.0 - (_3051 * _3008.w);
                        float _4421 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3065 = sqrt(_3051) * _3027.w;
                        float _3068 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _3058) + _3069;
                        float _3075 = _3065 * _3065;
                        float _3079 = ((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3064) / ((_3075 * 0.699999988079071044921875) + 1.0);
                        float _3083 = (-0.0) - _2521;
                        float _3084 = (-0.0) - _2522;
                        float _3085 = (-0.0) - _2523;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3100 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _809;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3113 = _3092 + _3057;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_689, _692, _695), vec3(_3090, _3091, _3092));
                        float _4437 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3125 = dot(vec3(_689, _692, _695), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4448 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3068 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3058) + _3134;
                        float _4459 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4470 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) / ((_3132 * _3132) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125))) * _3064;
                        _2912 = (_3079 * _3027.x) + _2985;
                        _2913 = (_3079 * _3027.y) + _2986;
                        _2914 = (_3079 * _3027.z) + _2987;
                        _2909 = (_3160 * _3044.x) + _2982;
                        _2910 = (_3160 * _3044.y) + _2983;
                        _2911 = (_3160 * _3044.z) + _2984;
                        if (_2989 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2989;
                        }
                    }
                    frontier_phi_70_pred = _2909;
                    frontier_phi_70_pred_1 = _2914;
                    frontier_phi_70_pred_2 = _2913;
                    frontier_phi_70_pred_3 = _2912;
                    frontier_phi_70_pred_4 = _2911;
                    frontier_phi_70_pred_5 = _2910;
                }
                _2686 = frontier_phi_70_pred;
                _2696 = frontier_phi_70_pred_1;
                _2694 = frontier_phi_70_pred_2;
                _2692 = frontier_phi_70_pred_3;
                _2690 = frontier_phi_70_pred_4;
                _2688 = frontier_phi_70_pred_5;
                uint _2844 = _2843 + 1u;
                if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2837 = _2686;
                    _2838 = _2688;
                    _2839 = _2690;
                    _2840 = _2692;
                    _2841 = _2694;
                    _2842 = _2696;
                    _2843 = _2844;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
        }
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.z;
        uint _2702 = (_2700 >> 8u) & 15u;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((4294967295u << _2702) & _2567) == 0u)
        {
            _2805 = _2685;
            _2807 = _2687;
            _2809 = _2689;
            _2811 = _2691;
            _2813 = _2693;
            _2815 = _2695;
        }
        else
        {
            float _2830 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
            float _2831 = _2830 * _2521;
            float _2832 = _2830 * _2522;
            float _2833 = _2830 * _2523;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2702 < ((_2700 >> 12u) & 15u))
            {
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2965 = _2685;
                float _2966 = _2687;
                float _2967 = _2689;
                float _2968 = _2691;
                float _2969 = _2693;
                float _2970 = _2695;
                uint _2971 = _2702;
                uint _2980;
                bool _2981;
                for (;;)
                {
                    _2980 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                    _2981 = _2980 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2981)
                    {
                        frontier_phi_81_pred = _2970;
                        frontier_phi_81_pred_1 = _2969;
                        frontier_phi_81_pred_2 = _2968;
                        frontier_phi_81_pred_3 = _2967;
                        frontier_phi_81_pred_4 = _2966;
                        frontier_phi_81_pred_5 = _2965;
                    }
                    else
                    {
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        float _3192 = _2970;
                        uint _3193 = _2980;
                        uint _3194;
                        vec4 _3219;
                        float _3220;
                        vec4 _3235;
                        vec3 _3247;
                        vec4 _3262;
                        vec4 _3277;
                        float _3323;
                        bool _3324;
                        for (;;)
                        {
                            uint _3204 = ((_2971 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3193));
                            _3194 = (_3193 + 4294967295u) & _3193;
                            uint _3206 = _3204 * 40u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3220 = _3219.w;
                            uint _3222 = (_3204 * 40u) + 4u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3204 * 40u) + 8u;
                            _3247 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x));
                            uint _3249 = (_3204 * 40u) + 16u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3204 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3204 * 40u) + 24u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3298 = (_3204 * 40u) + 28u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3323 = fma(_2523, _3311.z, fma(_2522, _3311.y, _3311.x * _2521)) + _3311.w;
                            _3324 = !((fma(_2523, _3292.z, fma(_2522, _3292.y, _3292.x * _2521)) + _3292.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3324)
                            {
                                float _3351 = _3219.x - _2521;
                                float _3352 = _3219.y - _2522;
                                float _3353 = _3219.z - _2523;
                                float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                                float _3357 = inversesqrt(_3354);
                                float _3358 = _3357 * _3351;
                                float _3359 = _3357 * _3352;
                                float _3360 = _3357 * _3353;
                                float _3364 = 1.0 - (_3354 / (_3220 * _3220));
                                float _4481 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3369 = sqrt(_3354) * _3235.w;
                                float _3371 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                                float _3372 = _3371 * _3371;
                                float _3375 = ((1.0 - _3372) * dot(vec3(_3358, _3359, _3360), vec3(_689, _692, _695))) + _3372;
                                float _3378 = _3369 * _3369;
                                float _3382 = (fma(_2523, _3262.z, fma(_2522, _3262.y, _3262.x * _2521)) + _3262.w) / _3323;
                                float _3383 = (fma(_2523, _3277.z, fma(_2522, _3277.y, _3277.x * _2521)) + _3277.w) / _3323;
                                float _3387 = 1.0 - dot(vec2(_3382, _3383), vec2(_3382, _3383));
                                float _4497 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3389 = _3388 * (((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3365) / ((_3378 * 0.699999988079071044921875) + 1.0));
                                float _3401 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                                float _3402 = 1.0 - _809;
                                float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                                float _3410 = _3409 * _3409;
                                float _3411 = _3410 * _3410;
                                float _3412 = _3358 - _2831;
                                float _3413 = _3359 - _2832;
                                float _3414 = _3360 - _2833;
                                float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                                float _3422 = dot(vec3(_689, _692, _695), vec3((-0.0) - _2831, (-0.0) - _2832, (-0.0) - _2833));
                                float _4508 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3426 = dot(vec3(_689, _692, _695), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                                float _4519 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                                float _3434 = _3371 * _3410;
                                float _3435 = _3434 * _3434;
                                float _3441 = ((1.0 - _3435) * dot(vec3(_689, _692, _695), vec3(_3358, _3359, _3360))) + _3435;
                                float _4530 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3443 = 1.0 - _3410;
                                float _3453 = (0.5 / (((_3442 * ((_3425 * _3443) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3410) * _3425))) * _3442;
                                float _4541 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3463 = (_3388 * _3365) * (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) / ((_3433 * _3433) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3389 * _3235.z;
                                frontier_phi_87_pred_1 = _3389 * _3235.y;
                                frontier_phi_87_pred_2 = _3389 * _3235.x;
                                frontier_phi_87_pred_3 = _3463 * _3247.z;
                                frontier_phi_87_pred_4 = _3463 * _3247.y;
                                frontier_phi_87_pred_5 = _3463 * _3247.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_87_pred;
                            _3471 = frontier_phi_87_pred_1;
                            _3470 = frontier_phi_87_pred_2;
                            _3469 = frontier_phi_87_pred_3;
                            _3468 = frontier_phi_87_pred_4;
                            _3467 = frontier_phi_87_pred_5;
                            _3177 = _3470 + _3190;
                            _3178 = _3471 + _3191;
                            _3179 = _3472 + _3192;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            if (_3194 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3194;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3179;
                        frontier_phi_81_pred_1 = _3178;
                        frontier_phi_81_pred_2 = _3177;
                        frontier_phi_81_pred_3 = _3176;
                        frontier_phi_81_pred_4 = _3175;
                        frontier_phi_81_pred_5 = _3174;
                    }
                    _2816 = frontier_phi_81_pred;
                    _2814 = frontier_phi_81_pred_1;
                    _2812 = frontier_phi_81_pred_2;
                    _2810 = frontier_phi_81_pred_3;
                    _2808 = frontier_phi_81_pred_4;
                    _2806 = frontier_phi_81_pred_5;
                    uint _2972 = _2971 + 1u;
                    if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2965 = _2806;
                        _2966 = _2808;
                        _2967 = _2810;
                        _2968 = _2812;
                        _2969 = _2814;
                        _2970 = _2816;
                        _2971 = _2972;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2812;
                frontier_phi_62_63_ladder_1 = _2816;
                frontier_phi_62_63_ladder_2 = _2814;
                frontier_phi_62_63_ladder_3 = _2810;
                frontier_phi_62_63_ladder_4 = _2808;
                frontier_phi_62_63_ladder_5 = _2806;
            }
            else
            {
                frontier_phi_62_63_ladder = _2691;
                frontier_phi_62_63_ladder_1 = _2695;
                frontier_phi_62_63_ladder_2 = _2693;
                frontier_phi_62_63_ladder_3 = _2689;
                frontier_phi_62_63_ladder_4 = _2687;
                frontier_phi_62_63_ladder_5 = _2685;
            }
            _2805 = frontier_phi_62_63_ladder_5;
            _2807 = frontier_phi_62_63_ladder_4;
            _2809 = frontier_phi_62_63_ladder_3;
            _2811 = frontier_phi_62_63_ladder;
            _2813 = frontier_phi_62_63_ladder_2;
            _2815 = frontier_phi_62_63_ladder_1;
        }
        float _2820 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2579 = (_2820 * _2811) + _2013;
        _2581 = (_2820 * _2813) + _2015;
        _2583 = (_2820 * _2815) + _2017;
        _2585 = ((_2805 * _778) * _2820) + _2361;
        _2587 = ((_2807 * _780) * _2820) + _2363;
        _2589 = ((_2809 * _781) * _2820) + _2365;
    }
    else
    {
        _2579 = _2013;
        _2581 = _2015;
        _2583 = _2017;
        _2585 = _2361;
        _2587 = _2363;
        _2589 = _2365;
    }
    vec4 _2595 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4557 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4568 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4579 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2619 = (((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2579 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _793))) + ((_2585 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1632)) * cbPerFrame._m0[3u].x)) + (_2595.x * cbMtdParam._m0[3u].x);
    float _2621 = ((_2595.y * cbMtdParam._m0[3u].x) + ((_2587 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1632)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2581 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _793)));
    float _2623 = ((_2595.z * cbMtdParam._m0[3u].x) + ((_2589 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1632)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2583 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _793)));
    float _2624 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2625 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2626 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    uint _2627 = _721 + 6u;
    float _2635 = _666 / cbSceneParam._m0[86u].x;
    float _2636 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2650 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, (log2((isnan(cbSceneParam._m0[77u].w) ? _586 : (isnan(_586) ? cbSceneParam._m0[77u].w : min(_586, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2652 = _2650.x;
    float _2653 = _2650.y;
    float _2654 = _2650.z;
    float _2655 = _2650.w;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    if (_586 > cbSceneParam._m0[78u].w)
    {
        float _2710 = isnan(_586) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _586 : min(cbSceneParam._m0[80u].w, _586));
        float _2711 = _2710 / _586;
        float _2722 = _2711 * _637;
        float _2723 = _638 * _2711;
        float _2724 = (-0.0) - _2723;
        float _2725 = _2711 * _639;
        float _2727 = (cbSceneParam._m0[77u].w * _2724) / _2710;
        float _2728 = _2727 + cbSceneParam._m0[79u].w;
        float _2729 = cbSceneParam._m0[79u].w - _2723;
        float _2735 = sqrt(((_2722 * _2722) + (_2723 * _2723)) + (_2725 * _2725));
        float _2738 = (1.0 - (cbSceneParam._m0[77u].w / _2710)) * _2735;
        float _2743 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2745 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2922;
        if (abs((_2724 - _2727) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2922 = ((((_2728 > 0.0) ? exp2(_2743 * _2728) : (2.0 - exp2(_2745 * _2728))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2738;
        }
        else
        {
            float _2866 = 1.0 / cbSceneParam._m0[80u].x;
            float _2867 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : max(_2728, _2729));
            float _2868 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : min(_2728, _2729));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            _2922 = ((abs(_2735 / _2724) * cbSceneParam._m0[80u].y) * ((((_2877 - _2878) * 2.0) - ((exp2(_2743 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0)))) - exp2(_2743 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))))) * _2866)) - ((exp2(_2745 * _2877) - exp2(_2745 * _2878)) * _2866))) + (_2738 * cbSceneParam._m0[80u].z);
        }
        vec4 _2924 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, 1.0), 0.0);
        float _2933 = exp2((_2922 * (-1.44269502162933349609375)) * (1.0 - _2924.w));
        float _2934 = log2(_2933);
        float _2950 = log2(_2655);
        _2747 = (exp2(_2950 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].x)) * _2924.x) / cbSceneParam._m0[78u].x)) + _2652;
        _2749 = (exp2(_2950 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].y)) * _2924.y) / cbSceneParam._m0[78u].y)) + _2653;
        _2751 = (exp2(_2950 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].z)) * _2924.z) / cbSceneParam._m0[78u].z)) + _2654;
        _2753 = _2933 * _2655;
    }
    else
    {
        _2747 = _2652;
        _2749 = _2653;
        _2751 = _2654;
        _2753 = _2655;
    }
    bool _2960;
    vec4 _2763;
    vec4 _2785;
    float _2787;
    float _2791;
    float _2792;
    float _2793;
    float _2794;
    bool _2804;
    for (;;)
    {
        _2763 = cbMatDynParam._m0[0u];
        float _2765 = roundEven(_2763.y);
        bool _2766 = _2765 == 3.0;
        float _2767 = log2(_2753);
        float _2774 = exp2(_2767 * cbSceneParam._m0[78u].x) * _2624;
        float _2775 = exp2(_2767 * cbSceneParam._m0[78u].y) * _2625;
        float _2776 = exp2(_2767 * cbSceneParam._m0[78u].z) * _2626;
        float _2783 = _653 + (-0.5);
        _2785 = cbMtdParam._m0[1u];
        _2787 = _2785.y * _2783;
        float _2790 = (_2765 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2791 = _2790 * (_2766 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2747)));
        _2792 = _2790 * (_2766 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2749)));
        _2793 = _2790 * (_2766 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2751)));
        _2794 = _2783 * 0.999000012874603271484375;
        _2804 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2804)
        {
            if ((cbInstanceData._m0[_721 + 7u].x + _2794) < 0.5)
            {
                _2960 = true;
                break;
            }
        }
        uint _2901 = _722 + uint(_2763.w);
        if ((cbInstanceData._m0[_2901].w < 1.0) && ((cbInstanceData._m0[_2901].w + _2794) < 0.5))
        {
            _2960 = true;
            break;
        }
        if ((_2787 + 1.0) < _2785.x)
        {
            _2960 = true;
            break;
        }
        _2960 = false;
        break;
    }
    float _3165;
    if (_2960)
    {
        discard_state = true;
        _3165 = 0.0;
    }
    else
    {
        _3165 = cbInstanceData._m0[_2627].w;
    }
    SV_Target.x = _2791;
    SV_Target.y = _2792;
    SV_Target.z = _2793;
    SV_Target.w = _3165;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2627].w;
    discard_exit();
}


