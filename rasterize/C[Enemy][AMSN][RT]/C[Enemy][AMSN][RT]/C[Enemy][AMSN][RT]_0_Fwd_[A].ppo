#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1210;
float _3610;
float _3611;
float _3612;
float _3613;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _267 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[14u].x;
    _194[0u] = cbMtdParam._m0[14u].y;
    _195[0u] = cbMtdParam._m0[14u].z;
    _193[1u] = cbMtdParam._m0[15u].x;
    _194[1u] = cbMtdParam._m0[15u].y;
    _195[1u] = cbMtdParam._m0[15u].z;
    _193[2u] = cbMtdParam._m0[16u].x;
    _194[2u] = cbMtdParam._m0[16u].y;
    _195[2u] = cbMtdParam._m0[16u].z;
    _193[3u] = cbMtdParam._m0[11u].x;
    _194[3u] = cbMtdParam._m0[11u].y;
    _195[3u] = cbMtdParam._m0[11u].z;
    _193[4u] = cbMtdParam._m0[12u].x;
    _194[4u] = cbMtdParam._m0[12u].y;
    _195[4u] = cbMtdParam._m0[12u].z;
    _193[5u] = cbMtdParam._m0[13u].x;
    _194[5u] = cbMtdParam._m0[13u].y;
    _195[5u] = cbMtdParam._m0[13u].z;
    vec4 _356 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _359 = _356.y;
    float _362 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _364 = roundEven(_362);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    uint _368 = uint(int(isnan(5.0) ? _365 : (isnan(_365) ? 5.0 : min(_365, 5.0))));
    float _385 = roundEven(5.0 - _362);
    float _386 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = isnan(4.0) ? _386 : (isnan(_386) ? 4.0 : min(_386, 4.0));
    float _393;
    float _395;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_267 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _393 = cbMtdParam._m0[26u].x;
        _395 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _393 = cbMtdParam._m0[22u].x;
        _395 = cbMtdParam._m0[22u].y;
    }
    float _397 = _393 * TEXCOORD.x;
    float _398 = _395 * TEXCOORD.y;
    float _409 = floor(_387);
    vec4 _412 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _397) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _398) + cbTextureTilingScale._m0[6u].w, _409));
    vec4 _434 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _267) + cbTextureTilingScale._m0[0u].w));
    float _442 = ((((((_193[_368] - cbMtdParam._m0[18u].x) * _359) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _412.x) * cbMtdParam._m0[9u].x) * _434.x;
    float _446 = ((((((_194[_368] - cbMtdParam._m0[18u].y) * _359) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _412.y) * cbMtdParam._m0[9u].y) * _434.y;
    float _450 = ((((((_195[_368] - cbMtdParam._m0[18u].z) * _359) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _412.z) * cbMtdParam._m0[9u].z) * _434.z;
    vec4 _462 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _267) + cbTextureTilingScale._m0[1u].w));
    float _466 = _462.z;
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[22u].z;
    _189[0u] = cbMtdParam._m0[22u].w;
    _188[1u] = cbMtdParam._m0[23u].z;
    _189[1u] = cbMtdParam._m0[23u].w;
    _188[2u] = cbMtdParam._m0[24u].x;
    _189[2u] = cbMtdParam._m0[24u].y;
    _188[3u] = cbMtdParam._m0[24u].z;
    _189[3u] = cbMtdParam._m0[24u].w;
    _188[4u] = cbMtdParam._m0[23u].x;
    _189[4u] = cbMtdParam._m0[23u].y;
    float _510 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    uint _512 = uint(int(isnan(4.0) ? _510 : (isnan(_510) ? 4.0 : min(_510, 4.0))));
    float _517 = _189[_512] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _397) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _398) + cbTextureTilingScale._m0[8u].w, _409)).x;
    vec4 _536 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _397) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _398) + cbTextureTilingScale._m0[7u].w, _409));
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3652 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))));
    float _560 = (cbMtdParam._m0[20u].x * (((_466 * 2.0) * (_536.z + _188[_512])) - _466)) + _466;
    float _564 = (cbMtdParam._m0[20u].y * ((_462.x * 2.0) + (-1.0))) + _543;
    float _565 = (cbMtdParam._m0[20u].y * ((_462.y * 2.0) + (-1.0))) + _544;
    float _568 = fma(_551, _245, fma(_565, _237 * TANGENT.x, (_223 * _215) * _564));
    float _571 = fma(_551, _246, fma(_565, _237 * TANGENT.y, (_223 * _216) * _564));
    float _574 = fma(_551, _247, fma(_565, _237 * TANGENT.z, (_223 * _217) * _564));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3663 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _582 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3685 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3696 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3707 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _586 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _602 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    vec4 _667 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _669 = _667.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _890 = sqrt(((_653 * _653) + (_654 * _654)) + (_655 * _655));
        float _896 = (cbMatDynParam._m0[5u].x * _890) + cbMatDynParam._m0[5u].y;
        float _3718 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _901 = (cbMatDynParam._m0[5u].z * _890) + cbMatDynParam._m0[5u].w;
        float _3729 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) - _897)) + _897) < ((_669 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _682 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _683 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _685 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _687 = _685.w;
    float _705 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _708 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _711 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    vec4 _713 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _724 = (((_713.y - _582) + (_713.w * _582)) * cbMtdParam._m0[3u].x) + _582;
    uint _737 = uint(roundEven(NORMAL.w)) * 13u;
    uint _738 = _737 + 9u;
    uint _739 = _738 + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3740 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    vec4 _751 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _756 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _767 = (((_756.x - _586) + (_756.w * _586)) * cbMtdParam._m0[3u].x) + _586;
    float _780 = (cbMtdParam._m0[3u].x * (((_748 * _687) - _748) + _751.x)) + _748;
    float _781 = (cbMtdParam._m0[3u].x * (((_749 * _687) - _749) + _751.y)) + _749;
    float _782 = (cbMtdParam._m0[3u].x * (((_750 * _687) - _750) + _751.z)) + _750;
    float _783 = 1.0 - _767;
    float _784 = _783 * _780;
    float _785 = _783 * _781;
    float _786 = _783 * _782;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _767;
    float _792 = (_781 + (-0.039999999105930328369140625)) * _767;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _767;
    float _794 = _791 + 0.039999999105930328369140625;
    float _796 = _792 + 0.039999999105930328369140625;
    float _797 = _793 + 0.039999999105930328369140625;
    vec4 _806 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _682, cbSceneParam._m0[86u].y * _683));
    float _809 = _806.x * TEXCOORD_4;
    float _810 = dot(vec3(_579, _580, _581), vec3(_660, _661, _662));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _579) - _660;
    float _818 = (_813 * _580) - _661;
    float _819 = (_813 * _581) - _662;
    float _823 = abs(dot(vec3(_660, _661, _662), vec3(_579, _580, _581)));
    float _3773 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_724);
    float _836 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _842 = (1.0 - _836) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _843 = _836 * _825;
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1209;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _934 = fma(_879, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871));
        float _938 = fma(_879, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871));
        float _942 = fma(_879, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871));
        float _967 = _871 + _579;
        float _968 = _875 + _580;
        float _969 = _879 + _581;
        float _979 = fma(_969, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967)) - _934;
        float _980 = fma(_969, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967)) - _938;
        float _981 = fma(_969, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967)) - _942;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_934 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_938 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[34u].z) + ((((((_942 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1037 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1003.x + (-0.5));
        float _1039 = _1037 * (_1003.y + (-0.5));
        float _1040 = _1037 * (_1003.z + (-0.5));
        float _1047 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1010.x + (-0.5));
        float _1049 = _1047 * (_1010.y + (-0.5));
        float _1050 = _1047 * (_1010.z + (-0.5));
        float _1057 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1017.x + (-0.5));
        float _1059 = _1057 * (_1017.y + (-0.5));
        float _1060 = _1057 * (_1017.z + (-0.5));
        float _1067 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1024.x + (-0.5));
        float _1069 = _1067 * (_1024.y + (-0.5));
        float _1070 = _1067 * (_1024.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1091 = (dot(vec3(_579, _580, _581), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1101 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3821 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1103 + 1.0))) + _1108) * _1071;
        float _1118 = _1039 * 0.5;
        float _1119 = _1049 * 0.5;
        float _1120 = _1059 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_579, _580, _581), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3854 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1145 + 1.0))) + _1150) * _1072;
        float _1160 = _1040 * 0.5;
        float _1161 = _1050 * 0.5;
        float _1162 = _1060 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_579, _580, _581), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3887 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1187 + 1.0))) + _1192) * _1073;
        _1209 = _1040;
        _1211 = _1039;
        _1212 = _1038;
        _1213 = _1050;
        _1214 = _1049;
        _1215 = _1048;
        _1216 = _1060;
        _1217 = _1059;
        _1218 = _1058;
        _1219 = _1073;
        _1220 = _1072;
        _1221 = _1071;
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _1210;
        _1211 = _1210;
        _1212 = _1210;
        _1213 = _1210;
        _1214 = _1210;
        _1215 = _1210;
        _1216 = _1210;
        _1217 = _1210;
        _1218 = _1210;
        _1219 = _1210;
        _1220 = _1210;
        _1221 = _1210;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1253 = fma(_879, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871));
        float _1257 = fma(_879, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871));
        float _1261 = fma(_879, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871));
        float _1284 = _871 + _579;
        float _1285 = _875 + _580;
        float _1286 = _879 + _581;
        float _1296 = fma(_1286, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1284)) - _1253;
        float _1297 = fma(_1286, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1284)) - _1257;
        float _1298 = fma(_1286, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1284)) - _1261;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1253 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1257 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[35u].z) + ((((((_1261 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1352 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1319.x + (-0.5));
        float _1354 = _1352 * (_1319.y + (-0.5));
        float _1355 = _1352 * (_1319.z + (-0.5));
        float _1362 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1326.x + (-0.5));
        float _1364 = _1362 * (_1326.y + (-0.5));
        float _1365 = _1362 * (_1326.z + (-0.5));
        float _1372 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1333.x + (-0.5));
        float _1374 = _1372 * (_1333.y + (-0.5));
        float _1375 = _1372 * (_1333.z + (-0.5));
        float _1382 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1340.x + (-0.5));
        float _1384 = _1382 * (_1340.y + (-0.5));
        float _1385 = _1382 * (_1340.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_579, _580, _581), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3950 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1416 + 1.0))) + _1421) * _1386;
        float _1431 = _1354 * 0.5;
        float _1432 = _1364 * 0.5;
        float _1433 = _1374 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_579, _580, _581), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3983 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1458 + 1.0))) + _1463) * _1387;
        float _1473 = _1355 * 0.5;
        float _1474 = _1365 * 0.5;
        float _1475 = _1375 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_579, _580, _581), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4016 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1500 + 1.0))) + _1505) * _1388;
        _1522 = _1355;
        _1523 = _1354;
        _1524 = _1353;
        _1525 = _1365;
        _1526 = _1364;
        _1527 = _1363;
        _1528 = _1375;
        _1529 = _1374;
        _1530 = _1373;
        _1531 = _1388;
        _1532 = _1387;
        _1533 = _1386;
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1210;
        _1523 = _1210;
        _1524 = _1210;
        _1525 = _1210;
        _1526 = _1210;
        _1527 = _1210;
        _1528 = _1210;
        _1529 = _1210;
        _1530 = _1210;
        _1531 = _1210;
        _1532 = _1210;
        _1533 = _1210;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1222)) + _1222;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1223)) + _1223;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1224)) + _1224;
    float _1569 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1546));
    float _1590 = _817 * 0.5;
    float _1591 = _818 * 0.5;
    float _1592 = _819 * 0.5;
    float _1593 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1596 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1599 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1633;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1606 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1209, _1213, _1216, _1219));
        float _1610 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1614 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1621 = dot(vec4(cbModelParam._m0[39u]), vec4(_1590, _1591, _1592, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1644;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1635 = dot(vec4(cbModelParam._m0[40u]), vec4(_1590, _1591, _1592, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1648 = (_1644 * cbModelParam._m0[1u].x) + (_1633 * (1.0 - cbModelParam._m0[1u].x));
    float _1658 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _724);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1658 : min(cbModelParam._m0[25u].z, _1658));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1706 = fma(_879, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871)) + cbModelParam._m0[13u].w;
        float _1710 = fma(_879, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871)) + cbModelParam._m0[14u].w;
        float _1714 = fma(_879, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871)) + cbModelParam._m0[15u].w;
        float _1717 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1720 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1723 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1751;
        if (_1717 > 0.0)
        {
            _1751 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1751 = frontier_phi_21_19_ladder;
        }
        float _1953;
        if (_1720 > 0.0)
        {
            _1953 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1953 = frontier_phi_30_26_ladder;
        }
        float _2207;
        if (_1723 > 0.0)
        {
            _2207 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2207 = frontier_phi_42_37_ladder;
        }
        float _2209 = isnan(_1953) ? _1751 : (isnan(_1751) ? _1953 : min(_1751, _1953));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1717) + _1706;
        float _2215 = (_2210 * _1720) + _1710;
        float _2216 = (_2210 * _1723) + _1714;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2217;
        float _2221 = _2217 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 > _2221) || ((_2215 < _2219) || ((_2214 < _2219) || (_2214 > _2221))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2216, cbModelParam._m0[9u].z, fma(_2215, cbModelParam._m0[9u].y, _2214 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2216, cbModelParam._m0[10u].z, fma(_2215, cbModelParam._m0[10u].y, _2214 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2216, cbModelParam._m0[11u].z, fma(_2215, cbModelParam._m0[11u].y, _2214 * cbModelParam._m0[11u].x))), _1659);
            frontier_phi_20_42_ladder = _2344.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2344.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2344.x * cbModelParam._m0[1u].y;
        }
        _1739 = frontier_phi_20_42_ladder_2;
        _1741 = frontier_phi_20_42_ladder_1;
        _1743 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1659);
        _1739 = _1727.x * cbModelParam._m0[1u].y;
        _1741 = _1727.y * cbModelParam._m0[1u].y;
        _1743 = _1727.z * cbModelParam._m0[1u].y;
    }
    float _1747 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _724);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1747 : min(cbModelParam._m0[25u].w, _1747));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_879, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_879, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_879, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1815 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1818 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1958;
        if (_1812 > 0.0)
        {
            _1958 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1958 = frontier_phi_32_28_ladder;
        }
        float _2234;
        if (_1815 > 0.0)
        {
            _2234 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2234 = frontier_phi_44_39_ladder;
        }
        float _2447;
        if (_1818 > 0.0)
        {
            _2447 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2447 = frontier_phi_53_50_ladder;
        }
        float _2449 = isnan(_2234) ? _1958 : (isnan(_1958) ? _2234 : min(_1958, _2234));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1812) + _1801;
        float _2455 = (_2450 * _1815) + _1805;
        float _2456 = (_2450 * _1818) + _1809;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2457;
        float _2460 = _2457 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2456 > _2460) || ((_2456 < _2458) || ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 < _2458) || (_2454 > _2460))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2456, cbModelParam._m0[17u].z, fma(_2455, cbModelParam._m0[17u].y, _2454 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2456, cbModelParam._m0[18u].z, fma(_2455, cbModelParam._m0[18u].y, _2454 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2456, cbModelParam._m0[19u].z, fma(_2455, cbModelParam._m0[19u].y, _2454 * cbModelParam._m0[19u].x))), _1748);
            frontier_phi_29_53_ladder = _2672.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2672.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2672.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_29_53_ladder_2;
        _1839 = frontier_phi_29_53_ladder_1;
        _1841 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1748);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1854 = (((_842 * _794) + _843) * _809) * ((cbModelParam._m0[1u].w * (_1837 - _1739)) + _1739);
    float _1856 = (((_842 * _796) + _843) * _809) * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1858 = (((_842 * _797) + _843) * _809) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1861 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    uvec4 _1877 = floatBitsToUint(cbInstanceData._m0[_737 + 5u]);
    uint _1879 = _1877.x * 14u;
    uint _1880 = _1879 + 13u;
    float _1887 = _809 + (-1.0);
    float _1892 = (cbLight._m0[_1880].x * _1887) + 1.0;
    float _1893 = (cbLight._m0[_1880].y * _1887) + 1.0;
    float _1894 = (cbLight._m0[_1880].z * _1887) + 1.0;
    float _1895 = (cbLight._m0[_1880].w * _1887) + 1.0;
    uint _1896 = _1879 + 5u;
    float _1902 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1906 = _1879 + 4u;
    float _1912 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1916 = _1879 | 1u;
    float _1927 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_579, _580, _581));
    float _1930 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_579, _580, _581));
    float _4152 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _4163 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1935 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.3183098733425140380859375;
    float _1937 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * 0.3183098733425140380859375;
    float _1944 = ((cbLight._m0[_1896].x * _1902) * _1937) + ((cbLight._m0[_1906].x * _1912) * _1935);
    float _1945 = ((_1902 * cbLight._m0[_1896].y) * _1937) + ((_1912 * cbLight._m0[_1906].y) * _1935);
    float _1946 = ((_1902 * cbLight._m0[_1896].z) * _1937) + ((_1912 * cbLight._m0[_1906].z) * _1935);
    uvec4 _1950 = floatBitsToUint(cbLight._m0[_1879 + 12u]);
    bool _1952 = _1950.x == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1952)
    {
        _1963 = _1944;
        _1965 = _1945;
        _1967 = _1946;
    }
    else
    {
        uint _1971 = _1879 + 6u;
        float _1987 = (dot(vec3(cbLight._m0[_1879 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _1988 = _1987 * _1987;
        float _4174 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1990 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _1963 = (((cbLight._m0[_1971].x * 0.3183098733425140380859375) * _1989) * _1990) + _1944;
        _1965 = (((cbLight._m0[_1971].y * 0.3183098733425140380859375) * _1989) * _1990) + _1945;
        _1967 = (((cbLight._m0[_1971].z * 0.3183098733425140380859375) * _1989) * _1990) + _1946;
    }
    bool _1970 = _1950.y == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1970)
    {
        _2008 = _1963;
        _2010 = _1965;
        _2012 = _1967;
    }
    else
    {
        uint _2178 = _1879 + 7u;
        float _2194 = (dot(vec3(cbLight._m0[_1879 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4190 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2197 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2008 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _1963;
        _2010 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _1965;
        _2012 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _1967;
    }
    uint _2015 = _1879 + 8u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _724) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1879].x + _660;
    float _2031 = cbLight._m0[_1879].y + _661;
    float _2032 = cbLight._m0[_1879].z + _662;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1879].xyz));
    float _4206 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2044 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2045 = dot(vec3(_579, _580, _581), vec3(_2037, _2038, _2039));
    float _4228 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2037, _2038, _2039));
    float _4239 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2053 = _2029 * _2029;
    float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
    float _2065 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
    float _2066 = 0.959999978542327880859375 - _791;
    float _2068 = 0.959999978542327880859375 - _792;
    float _2069 = 0.959999978542327880859375 - _793;
    float _2076 = 1.0 - _2029;
    float _2087 = (0.5 / (((_2044 * ((_2043 * _2076) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2076) + _2029) * _2043))) * _2043;
    float _4250 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
    uint _2100 = _1879 + 9u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _724) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1916].x + _660;
    float _2114 = cbLight._m0[_1916].y + _661;
    float _2115 = cbLight._m0[_1916].z + _662;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1916].xyz));
    float _4261 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2127 = dot(vec3(_579, _580, _581), vec3(_2120, _2121, _2122));
    float _4272 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2120, _2121, _2122));
    float _4283 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2112 * _2112;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
    float _2153 = 1.0 - _2112;
    float _2163 = (0.5 / (((_2044 * ((_2126 * _2153) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2153) + _2112) * _2126))) * _2126;
    float _4294 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    float _2175 = (((((_2146 * _2066) + _794) * cbLight._m0[_2100].x) * _2165) * _1902) + (((((_2065 * _2066) + _794) * cbLight._m0[_2015].x) * _2089) * _1912);
    float _2176 = (((((_2146 * _2068) + _796) * cbLight._m0[_2100].y) * _2165) * _1902) + (((((_2065 * _2068) + _796) * cbLight._m0[_2015].y) * _2089) * _1912);
    float _2177 = (((((_2146 * _2069) + _797) * cbLight._m0[_2100].z) * _2165) * _1902) + (((((_2065 * _2069) + _797) * cbLight._m0[_2015].z) * _2089) * _1912);
    float _2239;
    float _2241;
    float _2243;
    if (_1952)
    {
        _2239 = _2175;
        _2241 = _2176;
        _2243 = _2177;
    }
    else
    {
        uint _2245 = _1879 + 2u;
        uint _2249 = _1879 + 10u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _724) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _660;
        float _2266 = cbLight._m0[_2245].y + _661;
        float _2267 = cbLight._m0[_2245].z + _662;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2245].xyz));
        float _4305 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2279 = dot(vec3(_579, _580, _581), vec3(_2272, _2273, _2274));
        float _4316 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4327 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
        float _2305 = 1.0 - _2264;
        float _2315 = (0.5 / (((_2044 * ((_2278 * _2305) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2305) + _2264) * _2278))) * _2278;
        float _4338 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2239 = (((((_2298 * _2066) + _794) * cbLight._m0[_2249].x) * _2317) * _2318) + _2175;
        _2241 = (((((_2298 * _2068) + _796) * cbLight._m0[_2249].y) * _2317) * _2318) + _2176;
        _2243 = (((((_2298 * _2069) + _797) * cbLight._m0[_2249].z) * _2317) * _2318) + _2177;
    }
    float _2353;
    float _2355;
    float _2357;
    if (_1970)
    {
        _2353 = _2239;
        _2355 = _2241;
        _2357 = _2243;
    }
    else
    {
        uint _2364 = _1879 + 3u;
        uint _2368 = _1879 + 11u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _724) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _660;
        float _2385 = cbLight._m0[_2364].y + _661;
        float _2386 = cbLight._m0[_2364].z + _662;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2364].xyz));
        float _4354 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2398 = dot(vec3(_579, _580, _581), vec3(_2391, _2392, _2393));
        float _4365 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4376 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
        float _2424 = 1.0 - _2383;
        float _2434 = (0.5 / (((_2044 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2424) + _2383) * _2397))) * _2397;
        float _4387 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2353 = (((((_2417 * _2066) + _794) * cbLight._m0[_2368].x) * _2436) * _2437) + _2239;
        _2355 = (((((_2417 * _2068) + _796) * cbLight._m0[_2368].y) * _2436) * _2437) + _2241;
        _2357 = (((((_2417 * _2069) + _797) * cbLight._m0[_2368].z) * _2436) * _2437) + _2243;
    }
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_1877.y == 0u)
    {
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2512;
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2512;
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2512;
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.x;
        uint _2539 = uint((float(_2527.y) * floor(float(uint(cbSceneParam._m0[85u].y * _683) / _2528))) + floor(float(uint(cbSceneParam._m0[85u].x * _682) / _2528)));
        float _2549 = (log2(_2515 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2550 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        uint _2553 = uint(isnan(14.0) ? _2550 : (isnan(_2550) ? 14.0 : min(_2550, 14.0)));
        uvec4 _2558 = texelFetch(g_lightClusterGridBuffer, int(((_2553 << 2u) + (_2539 << 6u)) >> 2u));
        uint _2559 = _2558.x;
        uint _2560 = _2527.z;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        if (((((1u << ((_2560 >> 4u) & 15u)) + 4294967295u) & _2559) == 0u) || ((_2560 & 240u) == 0u))
        {
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
        }
        else
        {
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            uint _2835 = 0u;
            uint _2844;
            bool _2845;
            for (;;)
            {
                _2844 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2835 << 2u)) >> 2u)).x;
                _2845 = _2844 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2845)
                {
                    frontier_phi_70_pred = _2829;
                    frontier_phi_70_pred_1 = _2834;
                    frontier_phi_70_pred_2 = _2833;
                    frontier_phi_70_pred_3 = _2832;
                    frontier_phi_70_pred_4 = _2831;
                    frontier_phi_70_pred_5 = _2830;
                }
                else
                {
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    uint _2980;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2844;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    for (;;)
                    {
                        uint _2984 = uint(findLSB(_2980)) + (_2835 << 5u);
                        uint _2981 = (_2980 + 4294967295u) & _2980;
                        uint _2986 = _2984 * 48u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3006 = (_2984 * 48u) + 4u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3025 = (_2984 * 48u) + 8u;
                        vec3 _3036 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x));
                        float _3040 = _3000.x - _2513;
                        float _3041 = _3000.y - _2514;
                        float _3042 = _3000.z - _2515;
                        float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                        float _3046 = inversesqrt(_3043);
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3050 = dot(vec3(_705, _708, _711), vec3(_3047, _3048, _3049));
                        float _3055 = 1.0 - (_3043 * _3000.w);
                        float _4413 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3057 = sqrt(_3043) * _3019.w;
                        float _3060 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                        float _3061 = _3060 * _3060;
                        float _3064 = ((1.0 - _3061) * _3050) + _3061;
                        float _3067 = _3057 * _3057;
                        float _3071 = ((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3056) / ((_3067 * 0.699999988079071044921875) + 1.0);
                        float _3075 = (-0.0) - _2513;
                        float _3076 = (-0.0) - _2514;
                        float _3077 = (-0.0) - _2515;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3092 = exp2(log2(1.0 / ((_3067 * 3.5) + 5.0)) * 0.25);
                        float _3093 = 1.0 - _825;
                        float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                        float _3101 = _3100 * _3100;
                        float _3102 = _3101 * _3101;
                        float _3103 = _3082 + _3047;
                        float _3104 = _3083 + _3048;
                        float _3105 = _3084 + _3049;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3113 = dot(vec3(_705, _708, _711), vec3(_3082, _3083, _3084));
                        float _4429 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3117 = dot(vec3(_705, _708, _711), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                        float _4440 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                        float _3125 = _3060 * _3101;
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3050) + _3126;
                        float _4451 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3131 = 1.0 - _3101;
                        float _3141 = (0.5 / (((_3130 * ((_3116 * _3131) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3101) * _3116))) * _3130;
                        float _4462 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3152 = (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3124 * _3124) * ((_3067 * 2.1991131305694580078125) + 3.141590118408203125))) * _3056;
                        _2904 = (_3071 * _3019.x) + _2977;
                        _2905 = (_3071 * _3019.y) + _2978;
                        _2906 = (_3071 * _3019.z) + _2979;
                        _2901 = (_3152 * _3036.x) + _2974;
                        _2902 = (_3152 * _3036.y) + _2975;
                        _2903 = (_3152 * _3036.z) + _2976;
                        if (_2981 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2981;
                        }
                    }
                    frontier_phi_70_pred = _2901;
                    frontier_phi_70_pred_1 = _2906;
                    frontier_phi_70_pred_2 = _2905;
                    frontier_phi_70_pred_3 = _2904;
                    frontier_phi_70_pred_4 = _2903;
                    frontier_phi_70_pred_5 = _2902;
                }
                _2678 = frontier_phi_70_pred;
                _2688 = frontier_phi_70_pred_1;
                _2686 = frontier_phi_70_pred_2;
                _2684 = frontier_phi_70_pred_3;
                _2682 = frontier_phi_70_pred_4;
                _2680 = frontier_phi_70_pred_5;
                uint _2836 = _2835 + 1u;
                if (_2836 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2829 = _2678;
                    _2830 = _2680;
                    _2831 = _2682;
                    _2832 = _2684;
                    _2833 = _2686;
                    _2834 = _2688;
                    _2835 = _2836;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
        }
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.z;
        uint _2694 = (_2692 >> 8u) & 15u;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((4294967295u << _2694) & _2559) == 0u)
        {
            _2797 = _2677;
            _2799 = _2679;
            _2801 = _2681;
            _2803 = _2683;
            _2805 = _2685;
            _2807 = _2687;
        }
        else
        {
            float _2822 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
            float _2823 = _2822 * _2513;
            float _2824 = _2822 * _2514;
            float _2825 = _2822 * _2515;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2694 < ((_2692 >> 12u) & 15u))
            {
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2957 = _2677;
                float _2958 = _2679;
                float _2959 = _2681;
                float _2960 = _2683;
                float _2961 = _2685;
                float _2962 = _2687;
                uint _2963 = _2694;
                uint _2972;
                bool _2973;
                for (;;)
                {
                    _2972 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2963 << 2u)) >> 2u)).x;
                    _2973 = _2972 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2973)
                    {
                        frontier_phi_81_pred = _2962;
                        frontier_phi_81_pred_1 = _2961;
                        frontier_phi_81_pred_2 = _2960;
                        frontier_phi_81_pred_3 = _2959;
                        frontier_phi_81_pred_4 = _2958;
                        frontier_phi_81_pred_5 = _2957;
                    }
                    else
                    {
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        float _3182 = _2960;
                        float _3183 = _2961;
                        float _3184 = _2962;
                        uint _3185 = _2972;
                        uint _3186;
                        vec4 _3211;
                        float _3212;
                        vec4 _3227;
                        vec3 _3239;
                        vec4 _3254;
                        vec4 _3269;
                        float _3315;
                        bool _3316;
                        for (;;)
                        {
                            uint _3196 = ((_2963 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3185));
                            _3186 = (_3185 + 4294967295u) & _3185;
                            uint _3198 = _3196 * 40u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3212 = _3211.w;
                            uint _3214 = (_3196 * 40u) + 4u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3196 * 40u) + 8u;
                            _3239 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x));
                            uint _3241 = (_3196 * 40u) + 16u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3256 = (_3196 * 40u) + 20u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3196 * 40u) + 24u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3290 = (_3196 * 40u) + 28u;
                            vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3315 = fma(_2515, _3303.z, fma(_2514, _3303.y, _3303.x * _2513)) + _3303.w;
                            _3316 = !((fma(_2515, _3284.z, fma(_2514, _3284.y, _3284.x * _2513)) + _3284.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3316)
                            {
                                float _3343 = _3211.x - _2513;
                                float _3344 = _3211.y - _2514;
                                float _3345 = _3211.z - _2515;
                                float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                                float _3349 = inversesqrt(_3346);
                                float _3350 = _3349 * _3343;
                                float _3351 = _3349 * _3344;
                                float _3352 = _3349 * _3345;
                                float _3356 = 1.0 - (_3346 / (_3212 * _3212));
                                float _4473 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3361 = sqrt(_3346) * _3227.w;
                                float _3363 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                                float _3364 = _3363 * _3363;
                                float _3367 = ((1.0 - _3364) * dot(vec3(_3350, _3351, _3352), vec3(_705, _708, _711))) + _3364;
                                float _3370 = _3361 * _3361;
                                float _3374 = (fma(_2515, _3254.z, fma(_2514, _3254.y, _3254.x * _2513)) + _3254.w) / _3315;
                                float _3375 = (fma(_2515, _3269.z, fma(_2514, _3269.y, _3269.x * _2513)) + _3269.w) / _3315;
                                float _3379 = 1.0 - dot(vec2(_3374, _3375), vec2(_3374, _3375));
                                float _4489 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3381 = _3380 * (((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3357) / ((_3370 * 0.699999988079071044921875) + 1.0));
                                float _3393 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                                float _3394 = 1.0 - _825;
                                float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                                float _3402 = _3401 * _3401;
                                float _3403 = _3402 * _3402;
                                float _3404 = _3350 - _2823;
                                float _3405 = _3351 - _2824;
                                float _3406 = _3352 - _2825;
                                float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                                float _3414 = dot(vec3(_705, _708, _711), vec3((-0.0) - _2823, (-0.0) - _2824, (-0.0) - _2825));
                                float _4500 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3418 = dot(vec3(_705, _708, _711), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                                float _4511 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3421 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                                float _3426 = _3363 * _3402;
                                float _3427 = _3426 * _3426;
                                float _3433 = ((1.0 - _3427) * dot(vec3(_705, _708, _711), vec3(_3350, _3351, _3352))) + _3427;
                                float _4522 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3435 = 1.0 - _3402;
                                float _3445 = (0.5 / (((_3434 * ((_3417 * _3435) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3402) * _3417))) * _3434;
                                float _4533 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3455 = (_3380 * _3357) * (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) / ((_3425 * _3425) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3381 * _3227.z;
                                frontier_phi_87_pred_1 = _3381 * _3227.y;
                                frontier_phi_87_pred_2 = _3381 * _3227.x;
                                frontier_phi_87_pred_3 = _3455 * _3239.z;
                                frontier_phi_87_pred_4 = _3455 * _3239.y;
                                frontier_phi_87_pred_5 = _3455 * _3239.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3464 = frontier_phi_87_pred;
                            _3463 = frontier_phi_87_pred_1;
                            _3462 = frontier_phi_87_pred_2;
                            _3461 = frontier_phi_87_pred_3;
                            _3460 = frontier_phi_87_pred_4;
                            _3459 = frontier_phi_87_pred_5;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            _3171 = _3464 + _3184;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            if (_3186 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3186;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3171;
                        frontier_phi_81_pred_1 = _3170;
                        frontier_phi_81_pred_2 = _3169;
                        frontier_phi_81_pred_3 = _3168;
                        frontier_phi_81_pred_4 = _3167;
                        frontier_phi_81_pred_5 = _3166;
                    }
                    _2808 = frontier_phi_81_pred;
                    _2806 = frontier_phi_81_pred_1;
                    _2804 = frontier_phi_81_pred_2;
                    _2802 = frontier_phi_81_pred_3;
                    _2800 = frontier_phi_81_pred_4;
                    _2798 = frontier_phi_81_pred_5;
                    uint _2964 = _2963 + 1u;
                    if (_2964 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2957 = _2798;
                        _2958 = _2800;
                        _2959 = _2802;
                        _2960 = _2804;
                        _2961 = _2806;
                        _2962 = _2808;
                        _2963 = _2964;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2804;
                frontier_phi_62_63_ladder_1 = _2808;
                frontier_phi_62_63_ladder_2 = _2806;
                frontier_phi_62_63_ladder_3 = _2802;
                frontier_phi_62_63_ladder_4 = _2800;
                frontier_phi_62_63_ladder_5 = _2798;
            }
            else
            {
                frontier_phi_62_63_ladder = _2683;
                frontier_phi_62_63_ladder_1 = _2687;
                frontier_phi_62_63_ladder_2 = _2685;
                frontier_phi_62_63_ladder_3 = _2681;
                frontier_phi_62_63_ladder_4 = _2679;
                frontier_phi_62_63_ladder_5 = _2677;
            }
            _2797 = frontier_phi_62_63_ladder_5;
            _2799 = frontier_phi_62_63_ladder_4;
            _2801 = frontier_phi_62_63_ladder_3;
            _2803 = frontier_phi_62_63_ladder;
            _2805 = frontier_phi_62_63_ladder_2;
            _2807 = frontier_phi_62_63_ladder_1;
        }
        float _2812 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2571 = (_2812 * _2803) + _2008;
        _2573 = (_2812 * _2805) + _2010;
        _2575 = (_2812 * _2807) + _2012;
        _2577 = ((_2797 * _794) * _2812) + _2353;
        _2579 = ((_2799 * _796) * _2812) + _2355;
        _2581 = ((_2801 * _797) * _2812) + _2357;
    }
    else
    {
        _2571 = _2008;
        _2573 = _2010;
        _2575 = _2012;
        _2577 = _2353;
        _2579 = _2355;
        _2581 = _2357;
    }
    vec4 _2587 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4549 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4560 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4571 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2611 = (((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2571 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _809))) + ((_2577 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + (_2587.x * cbMtdParam._m0[3u].x);
    float _2613 = ((_2587.y * cbMtdParam._m0[3u].x) + ((_2579 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2573 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _809)));
    float _2615 = ((_2587.z * cbMtdParam._m0[3u].x) + ((_2581 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2575 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _809)));
    float _2616 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2617 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2618 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    uint _2619 = _737 + 6u;
    float _2627 = _682 / cbSceneParam._m0[86u].x;
    float _2628 = _683 / cbSceneParam._m0[86u].y;
    vec4 _2642 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2627, _2628, (log2((isnan(cbSceneParam._m0[77u].w) ? _602 : (isnan(_602) ? cbSceneParam._m0[77u].w : min(_602, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2644 = _2642.x;
    float _2645 = _2642.y;
    float _2646 = _2642.z;
    float _2647 = _2642.w;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    if (_602 > cbSceneParam._m0[78u].w)
    {
        float _2702 = isnan(_602) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _602 : min(cbSceneParam._m0[80u].w, _602));
        float _2703 = _2702 / _602;
        float _2714 = _2703 * _653;
        float _2715 = _654 * _2703;
        float _2716 = (-0.0) - _2715;
        float _2717 = _2703 * _655;
        float _2719 = (cbSceneParam._m0[77u].w * _2716) / _2702;
        float _2720 = _2719 + cbSceneParam._m0[79u].w;
        float _2721 = cbSceneParam._m0[79u].w - _2715;
        float _2727 = sqrt(((_2714 * _2714) + (_2715 * _2715)) + (_2717 * _2717));
        float _2730 = (1.0 - (cbSceneParam._m0[77u].w / _2702)) * _2727;
        float _2735 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2737 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2914;
        if (abs((_2716 - _2719) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2914 = ((((_2720 > 0.0) ? exp2(_2735 * _2720) : (2.0 - exp2(_2737 * _2720))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2730;
        }
        else
        {
            float _2858 = 1.0 / cbSceneParam._m0[80u].x;
            float _2859 = isnan(_2721) ? _2720 : (isnan(_2720) ? _2721 : max(_2720, _2721));
            float _2860 = isnan(_2721) ? _2720 : (isnan(_2720) ? _2721 : min(_2720, _2721));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            _2914 = ((abs(_2727 / _2716) * cbSceneParam._m0[80u].y) * ((((_2869 - _2870) * 2.0) - ((exp2(_2735 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0)))) - exp2(_2735 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))))) * _2858)) - ((exp2(_2737 * _2869) - exp2(_2737 * _2870)) * _2858))) + (_2730 * cbSceneParam._m0[80u].z);
        }
        vec4 _2916 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2627, _2628, 1.0), 0.0);
        float _2925 = exp2((_2914 * (-1.44269502162933349609375)) * (1.0 - _2916.w));
        float _2926 = log2(_2925);
        float _2942 = log2(_2647);
        _2739 = (exp2(_2942 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].x)) * _2916.x) / cbSceneParam._m0[78u].x)) + _2644;
        _2741 = (exp2(_2942 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].y)) * _2916.y) / cbSceneParam._m0[78u].y)) + _2645;
        _2743 = (exp2(_2942 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].z)) * _2916.z) / cbSceneParam._m0[78u].z)) + _2646;
        _2745 = _2925 * _2647;
    }
    else
    {
        _2739 = _2644;
        _2741 = _2645;
        _2743 = _2646;
        _2745 = _2647;
    }
    bool _2952;
    vec4 _2755;
    vec4 _2777;
    float _2779;
    float _2783;
    float _2784;
    float _2785;
    float _2786;
    bool _2796;
    for (;;)
    {
        _2755 = cbMatDynParam._m0[0u];
        float _2757 = roundEven(_2755.y);
        bool _2758 = _2757 == 3.0;
        float _2759 = log2(_2745);
        float _2766 = exp2(_2759 * cbSceneParam._m0[78u].x) * _2616;
        float _2767 = exp2(_2759 * cbSceneParam._m0[78u].y) * _2617;
        float _2768 = exp2(_2759 * cbSceneParam._m0[78u].z) * _2618;
        float _2775 = _669 + (-0.5);
        _2777 = cbMtdParam._m0[1u];
        _2779 = _2777.y * _2775;
        float _2782 = (_2757 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2783 = _2782 * (_2758 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2739)));
        _2784 = _2782 * (_2758 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2741)));
        _2785 = _2782 * (_2758 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2743)));
        _2786 = _2775 * 0.999000012874603271484375;
        _2796 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2796)
        {
            if ((cbInstanceData._m0[_737 + 7u].x + _2786) < 0.5)
            {
                _2952 = true;
                break;
            }
        }
        uint _2893 = _738 + uint(_2755.w);
        if ((cbInstanceData._m0[_2893].w < 1.0) && ((cbInstanceData._m0[_2893].w + _2786) < 0.5))
        {
            _2952 = true;
            break;
        }
        if ((_2779 + 1.0) < _2777.x)
        {
            _2952 = true;
            break;
        }
        _2952 = false;
        break;
    }
    float _3157;
    if (_2952)
    {
        discard_state = true;
        _3157 = 0.0;
    }
    else
    {
        _3157 = cbInstanceData._m0[_2619].w;
    }
    SV_Target.x = _2783;
    SV_Target.y = _2784;
    SV_Target.z = _2785;
    SV_Target.w = _3157;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2619].w;
    discard_exit();
}


