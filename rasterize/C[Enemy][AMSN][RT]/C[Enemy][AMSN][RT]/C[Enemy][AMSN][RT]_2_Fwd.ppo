#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1163;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[14u].x;
    _190[0u] = cbMtdParam._m0[14u].y;
    _191[0u] = cbMtdParam._m0[14u].z;
    _189[1u] = cbMtdParam._m0[15u].x;
    _190[1u] = cbMtdParam._m0[15u].y;
    _191[1u] = cbMtdParam._m0[15u].z;
    _189[2u] = cbMtdParam._m0[16u].x;
    _190[2u] = cbMtdParam._m0[16u].y;
    _191[2u] = cbMtdParam._m0[16u].z;
    _189[3u] = cbMtdParam._m0[11u].x;
    _190[3u] = cbMtdParam._m0[11u].y;
    _191[3u] = cbMtdParam._m0[11u].z;
    _189[4u] = cbMtdParam._m0[12u].x;
    _190[4u] = cbMtdParam._m0[12u].y;
    _191[4u] = cbMtdParam._m0[12u].z;
    _189[5u] = cbMtdParam._m0[13u].x;
    _190[5u] = cbMtdParam._m0[13u].y;
    _191[5u] = cbMtdParam._m0[13u].z;
    vec4 _350 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _353 = _350.y;
    float _356 = (_350.x + (-0.02500000037252902984619140625)) * 8.0;
    float _358 = roundEven(_356);
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    uint _362 = uint(int(isnan(5.0) ? _359 : (isnan(_359) ? 5.0 : min(_359, 5.0))));
    float _379 = roundEven(5.0 - _356);
    float _380 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = isnan(4.0) ? _380 : (isnan(_380) ? 4.0 : min(_380, 4.0));
    float _387;
    float _389;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _387 = cbMtdParam._m0[26u].x;
        _389 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _387 = cbMtdParam._m0[22u].x;
        _389 = cbMtdParam._m0[22u].y;
    }
    float _391 = _387 * TEXCOORD.x;
    float _392 = _389 * TEXCOORD.y;
    float _403 = floor(_381);
    vec4 _406 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _391) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _392) + cbTextureTilingScale._m0[6u].w, _403));
    vec4 _428 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _436 = ((((((_189[_362] - cbMtdParam._m0[18u].x) * _353) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _406.x) * cbMtdParam._m0[9u].x) * _428.x;
    float _440 = ((((((_190[_362] - cbMtdParam._m0[18u].y) * _353) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _406.y) * cbMtdParam._m0[9u].y) * _428.y;
    float _444 = ((((((_191[_362] - cbMtdParam._m0[18u].z) * _353) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _406.z) * cbMtdParam._m0[9u].z) * _428.z;
    vec4 _456 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _460 = _456.z;
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[22u].z;
    _185[0u] = cbMtdParam._m0[22u].w;
    _184[1u] = cbMtdParam._m0[23u].z;
    _185[1u] = cbMtdParam._m0[23u].w;
    _184[2u] = cbMtdParam._m0[24u].x;
    _185[2u] = cbMtdParam._m0[24u].y;
    _184[3u] = cbMtdParam._m0[24u].z;
    _185[3u] = cbMtdParam._m0[24u].w;
    _184[4u] = cbMtdParam._m0[23u].x;
    _185[4u] = cbMtdParam._m0[23u].y;
    float _504 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    uint _506 = uint(int(isnan(4.0) ? _504 : (isnan(_504) ? 4.0 : min(_504, 4.0))));
    float _511 = _185[_506] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _391) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _392) + cbTextureTilingScale._m0[8u].w, _403)).x;
    vec4 _530 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _391) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _392) + cbTextureTilingScale._m0[7u].w, _403));
    float _537 = (_530.x * 2.0) + (-1.0);
    float _538 = (_530.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3539 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))));
    float _554 = (cbMtdParam._m0[20u].x * (((_460 * 2.0) * (_530.z + _184[_506])) - _460)) + _460;
    float _558 = (cbMtdParam._m0[20u].y * ((_456.x * 2.0) + (-1.0))) + _537;
    float _559 = (cbMtdParam._m0[20u].y * ((_456.y * 2.0) + (-1.0))) + _538;
    float _562 = fma(_545, _241, fma(_559, _233 * TANGENT.x, (_219 * _211) * _558));
    float _565 = fma(_545, _242, fma(_559, _233 * TANGENT.y, (_219 * _212) * _558));
    float _568 = fma(_545, _243, fma(_559, _233 * TANGENT.z, (_219 * _213) * _558));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    float _573 = _572 * _562;
    float _574 = _572 * _565;
    float _575 = _572 * _568;
    float _3550 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _576 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3572 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3583 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3594 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _580 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _665 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _667 = _665.w;
    float _685 = fma(_575, cbSceneParam._m0[5u].z, fma(_574, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _573));
    float _688 = fma(_575, cbSceneParam._m0[6u].z, fma(_574, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _573));
    float _691 = fma(_575, cbSceneParam._m0[7u].z, fma(_574, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _573));
    vec4 _693 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _704 = (((_693.y - _576) + (_693.w * _576)) * cbMtdParam._m0[3u].x) + _576;
    uint _717 = uint(roundEven(NORMAL.w)) * 13u;
    uint _719 = (_717 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3605 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    vec4 _731 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _736 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _747 = (((_736.x - _580) + (_736.w * _580)) * cbMtdParam._m0[3u].x) + _580;
    float _760 = (cbMtdParam._m0[3u].x * (((_728 * _667) - _728) + _731.x)) + _728;
    float _761 = (cbMtdParam._m0[3u].x * (((_729 * _667) - _729) + _731.y)) + _729;
    float _762 = (cbMtdParam._m0[3u].x * (((_730 * _667) - _730) + _731.z)) + _730;
    float _763 = 1.0 - _747;
    float _764 = _763 * _760;
    float _765 = _763 * _761;
    float _766 = _763 * _762;
    float _771 = (_760 + (-0.039999999105930328369140625)) * _747;
    float _772 = (_761 + (-0.039999999105930328369140625)) * _747;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _747;
    float _774 = _771 + 0.039999999105930328369140625;
    float _776 = _772 + 0.039999999105930328369140625;
    float _777 = _773 + 0.039999999105930328369140625;
    vec4 _786 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _789 = _786.x * TEXCOORD_4;
    float _790 = dot(vec3(_573, _574, _575), vec3(_654, _655, _656));
    float _793 = _790 * 2.0;
    float _797 = (_793 * _573) - _654;
    float _798 = (_793 * _574) - _655;
    float _799 = (_793 * _575) - _656;
    float _803 = abs(dot(vec3(_654, _655, _656), vec3(_573, _574, _575)));
    float _3638 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _805 = sqrt(_704);
    float _816 = exp2((_805 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_805 * 3.0));
    float _822 = (1.0 - _816) * ((_805 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _823 = _816 * _805;
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1162;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _887 = fma(_859, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851));
        float _891 = fma(_859, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851));
        float _895 = fma(_859, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851));
        float _920 = _851 + _573;
        float _921 = _855 + _574;
        float _922 = _859 + _575;
        float _932 = fma(_922, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920)) - _887;
        float _933 = fma(_922, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920)) - _891;
        float _934 = fma(_922, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920)) - _895;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_887 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_891 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[34u].z) + ((((((_895 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _990 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_956.x + (-0.5));
        float _992 = _990 * (_956.y + (-0.5));
        float _993 = _990 * (_956.z + (-0.5));
        float _1000 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_963.x + (-0.5));
        float _1002 = _1000 * (_963.y + (-0.5));
        float _1003 = _1000 * (_963.z + (-0.5));
        float _1010 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_970.x + (-0.5));
        float _1012 = _1010 * (_970.y + (-0.5));
        float _1013 = _1010 * (_970.z + (-0.5));
        float _1020 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_977.x + (-0.5));
        float _1022 = _1020 * (_977.y + (-0.5));
        float _1023 = _1020 * (_977.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1044 = (dot(vec3(_573, _574, _575), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1054 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3686 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1056 + 1.0))) + _1061) * _1024;
        float _1071 = _992 * 0.5;
        float _1072 = _1002 * 0.5;
        float _1073 = _1012 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_573, _574, _575), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3719 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1098 + 1.0))) + _1103) * _1025;
        float _1113 = _993 * 0.5;
        float _1114 = _1003 * 0.5;
        float _1115 = _1013 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_573, _574, _575), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3752 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1140 + 1.0))) + _1145) * _1026;
        _1162 = _993;
        _1164 = _992;
        _1165 = _991;
        _1166 = _1003;
        _1167 = _1002;
        _1168 = _1001;
        _1169 = _1013;
        _1170 = _1012;
        _1171 = _1011;
        _1172 = _1026;
        _1173 = _1025;
        _1174 = _1024;
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _1163;
        _1164 = _1163;
        _1165 = _1163;
        _1166 = _1163;
        _1167 = _1163;
        _1168 = _1163;
        _1169 = _1163;
        _1170 = _1163;
        _1171 = _1163;
        _1172 = _1163;
        _1173 = _1163;
        _1174 = _1163;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1203 = fma(_859, cbModelParam._m0[30u].z, fma(_855, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851));
        float _1207 = fma(_859, cbModelParam._m0[31u].z, fma(_855, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851));
        float _1211 = fma(_859, cbModelParam._m0[32u].z, fma(_855, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851));
        float _1234 = _851 + _573;
        float _1235 = _855 + _574;
        float _1236 = _859 + _575;
        float _1246 = fma(_1236, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234)) - _1203;
        float _1247 = fma(_1236, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234)) - _1207;
        float _1248 = fma(_1236, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234)) - _1211;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1203 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1207 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[35u].z) + ((((((_1211 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1302 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1269.x + (-0.5));
        float _1304 = _1302 * (_1269.y + (-0.5));
        float _1305 = _1302 * (_1269.z + (-0.5));
        float _1312 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1276.x + (-0.5));
        float _1314 = _1312 * (_1276.y + (-0.5));
        float _1315 = _1312 * (_1276.z + (-0.5));
        float _1322 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1283.x + (-0.5));
        float _1324 = _1322 * (_1283.y + (-0.5));
        float _1325 = _1322 * (_1283.z + (-0.5));
        float _1332 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1290.x + (-0.5));
        float _1334 = _1332 * (_1290.y + (-0.5));
        float _1335 = _1332 * (_1290.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_573, _574, _575), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3815 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1366 + 1.0))) + _1371) * _1336;
        float _1381 = _1304 * 0.5;
        float _1382 = _1314 * 0.5;
        float _1383 = _1324 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_573, _574, _575), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3848 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1408 + 1.0))) + _1413) * _1337;
        float _1423 = _1305 * 0.5;
        float _1424 = _1315 * 0.5;
        float _1425 = _1325 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_573, _574, _575), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3881 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1450 + 1.0))) + _1455) * _1338;
        _1472 = _1305;
        _1473 = _1304;
        _1474 = _1303;
        _1475 = _1315;
        _1476 = _1314;
        _1477 = _1313;
        _1478 = _1325;
        _1479 = _1324;
        _1480 = _1323;
        _1481 = _1338;
        _1482 = _1337;
        _1483 = _1336;
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1163;
        _1473 = _1163;
        _1474 = _1163;
        _1475 = _1163;
        _1476 = _1163;
        _1477 = _1163;
        _1478 = _1163;
        _1479 = _1163;
        _1480 = _1163;
        _1481 = _1163;
        _1482 = _1163;
        _1483 = _1163;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1175)) + _1175;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1176)) + _1176;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1177)) + _1177;
    float _1519 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1496));
    float _1540 = _797 * 0.5;
    float _1541 = _798 * 0.5;
    float _1542 = _799 * 0.5;
    float _1543 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1546 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1549 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1583;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1556 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1162, _1166, _1169, _1172));
        float _1560 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1564 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1571 = dot(vec4(cbModelParam._m0[39u]), vec4(_1540, _1541, _1542, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1594;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1585 = dot(vec4(cbModelParam._m0[40u]), vec4(_1540, _1541, _1542, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1598 = (_1594 * cbModelParam._m0[1u].x) + (_1583 * (1.0 - cbModelParam._m0[1u].x));
    float _1608 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _704);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1608 : min(cbModelParam._m0[25u].z, _1608));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1656 = fma(_859, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _851)) + cbModelParam._m0[13u].w;
        float _1660 = fma(_859, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _851)) + cbModelParam._m0[14u].w;
        float _1664 = fma(_859, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _851)) + cbModelParam._m0[15u].w;
        float _1667 = fma(_799, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797));
        float _1670 = fma(_799, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797));
        float _1673 = fma(_799, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797));
        float _1701;
        if (_1667 > 0.0)
        {
            _1701 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1701 = frontier_phi_18_16_ladder;
        }
        float _1903;
        if (_1670 > 0.0)
        {
            _1903 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1903 = frontier_phi_27_23_ladder;
        }
        float _2157;
        if (_1673 > 0.0)
        {
            _2157 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2157 = frontier_phi_39_34_ladder;
        }
        float _2159 = isnan(_1903) ? _1701 : (isnan(_1701) ? _1903 : min(_1701, _1903));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1667) + _1656;
        float _2165 = (_2160 * _1670) + _1660;
        float _2166 = (_2160 * _1673) + _1664;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1609);
            frontier_phi_17_39_ladder = _2294.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2294.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2294.x * cbModelParam._m0[1u].y;
        }
        _1689 = frontier_phi_17_39_ladder_2;
        _1691 = frontier_phi_17_39_ladder_1;
        _1693 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_797, _798, _799), _1609);
        _1689 = _1677.x * cbModelParam._m0[1u].y;
        _1691 = _1677.y * cbModelParam._m0[1u].y;
        _1693 = _1677.z * cbModelParam._m0[1u].y;
    }
    float _1697 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _704);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1697 : min(cbModelParam._m0[25u].w, _1697));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_859, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _851)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_859, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _851)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_859, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _851)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_799, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797));
        float _1765 = fma(_799, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797));
        float _1768 = fma(_799, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797));
        float _1908;
        if (_1762 > 0.0)
        {
            _1908 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1908 = frontier_phi_29_25_ladder;
        }
        float _2184;
        if (_1765 > 0.0)
        {
            _2184 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2184 = frontier_phi_41_36_ladder;
        }
        float _2397;
        if (_1768 > 0.0)
        {
            _2397 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2397 = frontier_phi_50_47_ladder;
        }
        float _2399 = isnan(_2184) ? _1908 : (isnan(_1908) ? _2184 : min(_1908, _2184));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1762) + _1751;
        float _2405 = (_2400 * _1765) + _1755;
        float _2406 = (_2400 * _1768) + _1759;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2407;
        float _2410 = _2407 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2406 > _2410) || ((_2406 < _2408) || ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 < _2408) || (_2404 > _2410))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2622 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2406, cbModelParam._m0[17u].z, fma(_2405, cbModelParam._m0[17u].y, _2404 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2406, cbModelParam._m0[18u].z, fma(_2405, cbModelParam._m0[18u].y, _2404 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2406, cbModelParam._m0[19u].z, fma(_2405, cbModelParam._m0[19u].y, _2404 * cbModelParam._m0[19u].x))), _1698);
            frontier_phi_26_50_ladder = _2622.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2622.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2622.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_26_50_ladder_2;
        _1789 = frontier_phi_26_50_ladder_1;
        _1791 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_797, _798, _799), _1698);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1804 = (((_822 * _774) + _823) * _789) * ((cbModelParam._m0[1u].w * (_1787 - _1689)) + _1689);
    float _1806 = (((_822 * _776) + _823) * _789) * ((cbModelParam._m0[1u].w * (_1789 - _1691)) + _1691);
    float _1808 = (((_822 * _777) + _823) * _789) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    uvec4 _1827 = floatBitsToUint(cbInstanceData._m0[_717 + 5u]);
    uint _1829 = _1827.x * 14u;
    uint _1830 = _1829 + 13u;
    float _1837 = _789 + (-1.0);
    float _1842 = (cbLight._m0[_1830].x * _1837) + 1.0;
    float _1843 = (cbLight._m0[_1830].y * _1837) + 1.0;
    float _1844 = (cbLight._m0[_1830].z * _1837) + 1.0;
    float _1845 = (cbLight._m0[_1830].w * _1837) + 1.0;
    uint _1846 = _1829 + 5u;
    float _1852 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1856 = _1829 + 4u;
    float _1862 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1866 = _1829 | 1u;
    float _1877 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_573, _574, _575));
    float _1880 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_573, _574, _575));
    float _4017 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _4028 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1885 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _1887 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1894 = ((cbLight._m0[_1846].x * _1852) * _1887) + ((cbLight._m0[_1856].x * _1862) * _1885);
    float _1895 = ((_1852 * cbLight._m0[_1846].y) * _1887) + ((_1862 * cbLight._m0[_1856].y) * _1885);
    float _1896 = ((_1852 * cbLight._m0[_1846].z) * _1887) + ((_1862 * cbLight._m0[_1856].z) * _1885);
    uvec4 _1900 = floatBitsToUint(cbLight._m0[_1829 + 12u]);
    bool _1902 = _1900.x == 0u;
    float _1913;
    float _1915;
    float _1917;
    if (_1902)
    {
        _1913 = _1894;
        _1915 = _1895;
        _1917 = _1896;
    }
    else
    {
        uint _1921 = _1829 + 6u;
        float _1937 = (dot(vec3(cbLight._m0[_1829 + 2u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _1938 = _1937 * _1937;
        float _4039 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1940 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _1913 = (((cbLight._m0[_1921].x * 0.3183098733425140380859375) * _1939) * _1940) + _1894;
        _1915 = (((cbLight._m0[_1921].y * 0.3183098733425140380859375) * _1939) * _1940) + _1895;
        _1917 = (((cbLight._m0[_1921].z * 0.3183098733425140380859375) * _1939) * _1940) + _1896;
    }
    bool _1920 = _1900.y == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1920)
    {
        _1958 = _1913;
        _1960 = _1915;
        _1962 = _1917;
    }
    else
    {
        uint _2128 = _1829 + 7u;
        float _2144 = (dot(vec3(cbLight._m0[_1829 + 3u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4055 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2147 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1958 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _1913;
        _1960 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _1915;
        _1962 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _1917;
    }
    uint _1965 = _1829 + 8u;
    float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _704) * 0.949999988079071044921875);
    float _1979 = _1978 * _1978;
    float _1980 = cbLight._m0[_1829].x + _654;
    float _1981 = cbLight._m0[_1829].y + _655;
    float _1982 = cbLight._m0[_1829].z + _656;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1987 = _1986 * _1980;
    float _1988 = _1986 * _1981;
    float _1989 = _1986 * _1982;
    float _1990 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1829].xyz));
    float _4071 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _1994 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1995 = dot(vec3(_573, _574, _575), vec3(_1987, _1988, _1989));
    float _4093 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1999 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1987, _1988, _1989));
    float _4104 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2003 = _1979 * _1979;
    float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
    float _2015 = exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0);
    float _2016 = 0.959999978542327880859375 - _771;
    float _2018 = 0.959999978542327880859375 - _772;
    float _2019 = 0.959999978542327880859375 - _773;
    float _2026 = 1.0 - _1979;
    float _2037 = (0.5 / (((_1994 * ((_1993 * _2026) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2026) + _1979) * _1993))) * _1993;
    float _4115 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
    uint _2050 = _1829 + 9u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _704) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1866].x + _654;
    float _2064 = cbLight._m0[_1866].y + _655;
    float _2065 = cbLight._m0[_1866].z + _656;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1866].xyz));
    float _4126 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2077 = dot(vec3(_573, _574, _575), vec3(_2070, _2071, _2072));
    float _4137 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2070, _2071, _2072));
    float _4148 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2062 * _2062;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0);
    float _2103 = 1.0 - _2062;
    float _2113 = (0.5 / (((_1994 * ((_2076 * _2103) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2103) + _2062) * _2076))) * _2076;
    float _4159 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    float _2125 = (((((_2096 * _2016) + _774) * cbLight._m0[_2050].x) * _2115) * _1852) + (((((_2015 * _2016) + _774) * cbLight._m0[_1965].x) * _2039) * _1862);
    float _2126 = (((((_2096 * _2018) + _776) * cbLight._m0[_2050].y) * _2115) * _1852) + (((((_2015 * _2018) + _776) * cbLight._m0[_1965].y) * _2039) * _1862);
    float _2127 = (((((_2096 * _2019) + _777) * cbLight._m0[_2050].z) * _2115) * _1852) + (((((_2015 * _2019) + _777) * cbLight._m0[_1965].z) * _2039) * _1862);
    float _2189;
    float _2191;
    float _2193;
    if (_1902)
    {
        _2189 = _2125;
        _2191 = _2126;
        _2193 = _2127;
    }
    else
    {
        uint _2195 = _1829 + 2u;
        uint _2199 = _1829 + 10u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _704) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _654;
        float _2216 = cbLight._m0[_2195].y + _655;
        float _2217 = cbLight._m0[_2195].z + _656;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2195].xyz));
        float _4170 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2229 = dot(vec3(_573, _574, _575), vec3(_2222, _2223, _2224));
        float _4181 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4192 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2248 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
        float _2255 = 1.0 - _2214;
        float _2265 = (0.5 / (((_1994 * ((_2228 * _2255) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2255) + _2214) * _2228))) * _2228;
        float _4203 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2189 = (((((_2248 * _2016) + _774) * cbLight._m0[_2199].x) * _2267) * _2268) + _2125;
        _2191 = (((((_2248 * _2018) + _776) * cbLight._m0[_2199].y) * _2267) * _2268) + _2126;
        _2193 = (((((_2248 * _2019) + _777) * cbLight._m0[_2199].z) * _2267) * _2268) + _2127;
    }
    float _2303;
    float _2305;
    float _2307;
    if (_1920)
    {
        _2303 = _2189;
        _2305 = _2191;
        _2307 = _2193;
    }
    else
    {
        uint _2314 = _1829 + 3u;
        uint _2318 = _1829 + 11u;
        float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _704) * 0.949999988079071044921875);
        float _2333 = _2332 * _2332;
        float _2334 = cbLight._m0[_2314].x + _654;
        float _2335 = cbLight._m0[_2314].y + _655;
        float _2336 = cbLight._m0[_2314].z + _656;
        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
        float _2341 = _2340 * _2334;
        float _2342 = _2340 * _2335;
        float _2343 = _2340 * _2336;
        float _2344 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2314].xyz));
        float _4219 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2348 = dot(vec3(_573, _574, _575), vec3(_2341, _2342, _2343));
        float _4230 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2352 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2341, _2342, _2343));
        float _4241 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2356 = _2333 * _2333;
        float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
        float _2367 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2374 = 1.0 - _2333;
        float _2384 = (0.5 / (((_1994 * ((_2347 * _2374) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2374) + _2333) * _2347))) * _2347;
        float _4252 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2303 = (((((_2367 * _2016) + _774) * cbLight._m0[_2318].x) * _2386) * _2387) + _2189;
        _2305 = (((((_2367 * _2018) + _776) * cbLight._m0[_2318].y) * _2386) * _2387) + _2191;
        _2307 = (((((_2367 * _2019) + _777) * cbLight._m0[_2318].z) * _2386) * _2387) + _2193;
    }
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_1827.y == 0u)
    {
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2462;
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2462;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2462;
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.x;
        uint _2489 = uint((float(_2477.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2478))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2478)));
        float _2499 = (log2(_2465 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2500 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        uint _2503 = uint(isnan(14.0) ? _2500 : (isnan(_2500) ? 14.0 : min(_2500, 14.0)));
        uvec4 _2508 = texelFetch(g_lightClusterGridBuffer, int(((_2503 << 2u) + (_2489 << 6u)) >> 2u));
        uint _2509 = _2508.x;
        uint _2510 = _2477.z;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((((1u << ((_2510 >> 4u) & 15u)) + 4294967295u) & _2509) == 0u) || ((_2510 & 240u) == 0u))
        {
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
        }
        else
        {
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2787)
                {
                    frontier_phi_65_pred = _2776;
                    frontier_phi_65_pred_1 = _2775;
                    frontier_phi_65_pred_2 = _2774;
                    frontier_phi_65_pred_3 = _2773;
                    frontier_phi_65_pred_4 = _2772;
                    frontier_phi_65_pred_5 = _2771;
                }
                else
                {
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    uint _2901;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2786;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2905 = uint(findLSB(_2901)) + (_2777 << 5u);
                        uint _2902 = (_2901 + 4294967295u) & _2901;
                        uint _2907 = _2905 * 48u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2927 = (_2905 * 48u) + 4u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2946 = (_2905 * 48u) + 8u;
                        vec3 _2957 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x));
                        float _2961 = _2921.x - _2463;
                        float _2962 = _2921.y - _2464;
                        float _2963 = _2921.z - _2465;
                        float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                        float _2967 = inversesqrt(_2964);
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2971 = dot(vec3(_685, _688, _691), vec3(_2968, _2969, _2970));
                        float _2976 = 1.0 - (_2964 * _2921.w);
                        float _4278 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2978 = sqrt(_2964) * _2940.w;
                        float _2981 = 1.39999997615814208984375 / (_2978 + 1.39999997615814208984375);
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2971) + _2982;
                        float _2988 = _2978 * _2978;
                        float _2992 = ((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2977) / ((_2988 * 0.699999988079071044921875) + 1.0);
                        float _2996 = (-0.0) - _2463;
                        float _2997 = (-0.0) - _2464;
                        float _2998 = (-0.0) - _2465;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3013 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                        float _3014 = 1.0 - _805;
                        float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                        float _3022 = _3021 * _3021;
                        float _3023 = _3022 * _3022;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3026 = _3005 + _2970;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3034 = dot(vec3(_685, _688, _691), vec3(_3003, _3004, _3005));
                        float _4294 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3038 = dot(vec3(_685, _688, _691), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                        float _4305 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                        float _3046 = _2981 * _3022;
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _2971) + _3047;
                        float _4316 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3052 = 1.0 - _3022;
                        float _3062 = (0.5 / (((_3051 * ((_3037 * _3052) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3052) + _3022) * _3037))) * _3051;
                        float _4327 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3073 = (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_3045 * _3045) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125))) * _2977;
                        _2830 = (_2992 * _2940.x) + _2898;
                        _2831 = (_2992 * _2940.y) + _2899;
                        _2832 = (_2992 * _2940.z) + _2900;
                        _2827 = (_3073 * _2957.x) + _2895;
                        _2828 = (_3073 * _2957.y) + _2896;
                        _2829 = (_3073 * _2957.z) + _2897;
                        if (_2902 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2902;
                        }
                    }
                    frontier_phi_65_pred = _2832;
                    frontier_phi_65_pred_1 = _2831;
                    frontier_phi_65_pred_2 = _2830;
                    frontier_phi_65_pred_3 = _2829;
                    frontier_phi_65_pred_4 = _2828;
                    frontier_phi_65_pred_5 = _2827;
                }
                _2638 = frontier_phi_65_pred;
                _2636 = frontier_phi_65_pred_1;
                _2634 = frontier_phi_65_pred_2;
                _2632 = frontier_phi_65_pred_3;
                _2630 = frontier_phi_65_pred_4;
                _2628 = frontier_phi_65_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2628;
                    _2772 = _2630;
                    _2773 = _2632;
                    _2774 = _2634;
                    _2775 = _2636;
                    _2776 = _2638;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
        }
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.z;
        uint _2644 = (_2642 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2644) & _2509) == 0u)
        {
            _2739 = _2627;
            _2741 = _2629;
            _2743 = _2631;
            _2745 = _2633;
            _2747 = _2635;
            _2749 = _2637;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
            float _2765 = _2764 * _2463;
            float _2766 = _2764 * _2464;
            float _2767 = _2764 * _2465;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2644 < ((_2642 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2878 = _2627;
                float _2879 = _2629;
                float _2880 = _2631;
                float _2881 = _2633;
                float _2882 = _2635;
                float _2883 = _2637;
                uint _2884 = _2644;
                uint _2893;
                bool _2894;
                for (;;)
                {
                    _2893 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2884 << 2u)) >> 2u)).x;
                    _2894 = _2893 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2894)
                    {
                        frontier_phi_71_pred = _2883;
                        frontier_phi_71_pred_1 = _2882;
                        frontier_phi_71_pred_2 = _2881;
                        frontier_phi_71_pred_3 = _2880;
                        frontier_phi_71_pred_4 = _2879;
                        frontier_phi_71_pred_5 = _2878;
                    }
                    else
                    {
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        uint _3097 = _2893;
                        uint _3098;
                        vec4 _3123;
                        float _3124;
                        vec4 _3139;
                        vec3 _3151;
                        vec4 _3166;
                        vec4 _3181;
                        float _3227;
                        bool _3228;
                        for (;;)
                        {
                            uint _3108 = ((_2884 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3097));
                            _3098 = (_3097 + 4294967295u) & _3097;
                            uint _3110 = _3108 * 40u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3124 = _3123.w;
                            uint _3126 = (_3108 * 40u) + 4u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3108 * 40u) + 8u;
                            _3151 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x));
                            uint _3153 = (_3108 * 40u) + 16u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3108 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3108 * 40u) + 24u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3202 = (_3108 * 40u) + 28u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3227 = fma(_2465, _3215.z, fma(_2464, _3215.y, _3215.x * _2463)) + _3215.w;
                            _3228 = !((fma(_2465, _3196.z, fma(_2464, _3196.y, _3196.x * _2463)) + _3196.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3228)
                            {
                                float _3255 = _3123.x - _2463;
                                float _3256 = _3123.y - _2464;
                                float _3257 = _3123.z - _2465;
                                float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                                float _3261 = inversesqrt(_3258);
                                float _3262 = _3261 * _3255;
                                float _3263 = _3261 * _3256;
                                float _3264 = _3261 * _3257;
                                float _3268 = 1.0 - (_3258 / (_3124 * _3124));
                                float _4338 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3273 = sqrt(_3258) * _3139.w;
                                float _3275 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                                float _3276 = _3275 * _3275;
                                float _3279 = ((1.0 - _3276) * dot(vec3(_3262, _3263, _3264), vec3(_685, _688, _691))) + _3276;
                                float _3282 = _3273 * _3273;
                                float _3286 = (fma(_2465, _3166.z, fma(_2464, _3166.y, _3166.x * _2463)) + _3166.w) / _3227;
                                float _3287 = (fma(_2465, _3181.z, fma(_2464, _3181.y, _3181.x * _2463)) + _3181.w) / _3227;
                                float _3291 = 1.0 - dot(vec2(_3286, _3287), vec2(_3286, _3287));
                                float _4354 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3293 = _3292 * (((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3269) / ((_3282 * 0.699999988079071044921875) + 1.0));
                                float _3305 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                                float _3306 = 1.0 - _805;
                                float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                                float _3314 = _3313 * _3313;
                                float _3315 = _3314 * _3314;
                                float _3316 = _3262 - _2765;
                                float _3317 = _3263 - _2766;
                                float _3318 = _3264 - _2767;
                                float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                                float _3326 = dot(vec3(_685, _688, _691), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4365 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3330 = dot(vec3(_685, _688, _691), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                                float _4376 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                                float _3338 = _3275 * _3314;
                                float _3339 = _3338 * _3338;
                                float _3345 = ((1.0 - _3339) * dot(vec3(_685, _688, _691), vec3(_3262, _3263, _3264))) + _3339;
                                float _4387 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3347 = 1.0 - _3314;
                                float _3357 = (0.5 / (((_3346 * ((_3329 * _3347) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3314) * _3329))) * _3346;
                                float _4398 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3367 = (_3292 * _3269) * (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3337 * _3337) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3293 * _3139.z;
                                frontier_phi_77_pred_1 = _3293 * _3139.y;
                                frontier_phi_77_pred_2 = _3293 * _3139.x;
                                frontier_phi_77_pred_3 = _3367 * _3151.z;
                                frontier_phi_77_pred_4 = _3367 * _3151.y;
                                frontier_phi_77_pred_5 = _3367 * _3151.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_77_pred;
                            _3375 = frontier_phi_77_pred_1;
                            _3374 = frontier_phi_77_pred_2;
                            _3373 = frontier_phi_77_pred_3;
                            _3372 = frontier_phi_77_pred_4;
                            _3371 = frontier_phi_77_pred_5;
                            _3081 = _3374 + _3094;
                            _3082 = _3375 + _3095;
                            _3083 = _3376 + _3096;
                            _3078 = _3371 + _3091;
                            _3079 = _3372 + _3092;
                            _3080 = _3373 + _3093;
                            if (_3098 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3098;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3083;
                        frontier_phi_71_pred_1 = _3082;
                        frontier_phi_71_pred_2 = _3081;
                        frontier_phi_71_pred_3 = _3080;
                        frontier_phi_71_pred_4 = _3079;
                        frontier_phi_71_pred_5 = _3078;
                    }
                    _2750 = frontier_phi_71_pred;
                    _2748 = frontier_phi_71_pred_1;
                    _2746 = frontier_phi_71_pred_2;
                    _2744 = frontier_phi_71_pred_3;
                    _2742 = frontier_phi_71_pred_4;
                    _2740 = frontier_phi_71_pred_5;
                    uint _2885 = _2884 + 1u;
                    if (_2885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2878 = _2740;
                        _2879 = _2742;
                        _2880 = _2744;
                        _2881 = _2746;
                        _2882 = _2748;
                        _2883 = _2750;
                        _2884 = _2885;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2750;
                frontier_phi_59_60_ladder_1 = _2748;
                frontier_phi_59_60_ladder_2 = _2746;
                frontier_phi_59_60_ladder_3 = _2744;
                frontier_phi_59_60_ladder_4 = _2742;
                frontier_phi_59_60_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_59_60_ladder = _2637;
                frontier_phi_59_60_ladder_1 = _2635;
                frontier_phi_59_60_ladder_2 = _2633;
                frontier_phi_59_60_ladder_3 = _2631;
                frontier_phi_59_60_ladder_4 = _2629;
                frontier_phi_59_60_ladder_5 = _2627;
            }
            _2739 = frontier_phi_59_60_ladder_5;
            _2741 = frontier_phi_59_60_ladder_4;
            _2743 = frontier_phi_59_60_ladder_3;
            _2745 = frontier_phi_59_60_ladder_2;
            _2747 = frontier_phi_59_60_ladder_1;
            _2749 = frontier_phi_59_60_ladder;
        }
        float _2754 = isnan(1.0) ? _789 : (isnan(_789) ? 1.0 : min(_789, 1.0));
        _2521 = (_2754 * _2745) + _1958;
        _2523 = (_2754 * _2747) + _1960;
        _2525 = (_2754 * _2749) + _1962;
        _2527 = ((_2739 * _774) * _2754) + _2303;
        _2529 = ((_2741 * _776) * _2754) + _2305;
        _2531 = ((_2743 * _777) * _2754) + _2307;
    }
    else
    {
        _2521 = _1958;
        _2523 = _1960;
        _2525 = _1962;
        _2527 = _2303;
        _2529 = _2305;
        _2531 = _2307;
    }
    vec4 _2537 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4414 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4425 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4436 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _2561 = (((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2521 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _789))) + ((_2527 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1598)) * cbPerFrame._m0[3u].x)) + (_2537.x * cbMtdParam._m0[3u].x);
    float _2563 = ((_2537.y * cbMtdParam._m0[3u].x) + ((_2529 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1598)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2523 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _789)));
    float _2565 = ((_2537.z * cbMtdParam._m0[3u].x) + ((_2531 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1598)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2525 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _789)));
    uint _2569 = _717 + 6u;
    float _2577 = _662 / cbSceneParam._m0[86u].x;
    float _2578 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2592 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2577, _2578, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2594 = _2592.x;
    float _2595 = _2592.y;
    float _2596 = _2592.z;
    float _2597 = _2592.w;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2652 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2653 = _2652 / _596;
        float _2664 = _2653 * _647;
        float _2665 = _648 * _2653;
        float _2666 = (-0.0) - _2665;
        float _2667 = _2653 * _649;
        float _2669 = (cbSceneParam._m0[77u].w * _2666) / _2652;
        float _2670 = _2669 + cbSceneParam._m0[79u].w;
        float _2671 = cbSceneParam._m0[79u].w - _2665;
        float _2677 = sqrt(((_2664 * _2664) + (_2665 * _2665)) + (_2667 * _2667));
        float _2680 = (1.0 - (cbSceneParam._m0[77u].w / _2652)) * _2677;
        float _2685 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2687 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2666 - _2669) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2670 > 0.0) ? exp2(_2685 * _2670) : (2.0 - exp2(_2687 * _2670))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2680;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : max(_2670, _2671));
            float _2802 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : min(_2670, _2671));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2840 = ((abs(_2677 / _2666) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2685 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2685 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2687 * _2811) - exp2(_2687 * _2812)) * _2800))) + (_2680 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2577, _2578, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2597);
        _2689 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2594;
        _2691 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2595;
        _2693 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2596;
        _2695 = _2851 * _2597;
    }
    else
    {
        _2689 = _2594;
        _2691 = _2595;
        _2693 = _2596;
        _2695 = _2597;
    }
    float _2707 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2708 = _2707 == 3.0;
    float _2709 = log2(_2695);
    float _2716 = exp2(_2709 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0)));
    float _2717 = exp2(_2709 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)));
    float _2718 = exp2(_2709 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0)));
    float _2727 = (_2707 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2727 * (_2708 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.y = _2727 * (_2708 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.z = _2727 * (_2708 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.w = cbInstanceData._m0[_2569].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2569].w;
}


