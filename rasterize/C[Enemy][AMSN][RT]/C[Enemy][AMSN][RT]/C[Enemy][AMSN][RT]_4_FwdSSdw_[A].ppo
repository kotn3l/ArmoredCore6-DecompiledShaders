#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1104;
float _3538;
float _3539;
float _3540;
float _3541;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _260 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    vec4 _273 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_260 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _281 = exp2(log2(_273.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _282;
    float _284;
    float _286;
    if (_281)
    {
        _282 = cbMtdParam._m0[18u].x;
        _284 = cbMtdParam._m0[18u].y;
        _286 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _282 = cbMtdParam._m0[17u].x;
        _284 = cbMtdParam._m0[17u].y;
        _286 = cbMtdParam._m0[17u].z;
    }
    float _291;
    if (_281)
    {
        _291 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _291 = cbMtdParam._m0[19u].z;
    }
    float _297;
    float _299;
    if (_281)
    {
        _297 = cbMtdParam._m0[26u].x;
        _299 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _297 = cbMtdParam._m0[22u].x;
        _299 = cbMtdParam._m0[22u].y;
    }
    float _301 = _297 * TEXCOORD.x;
    float _302 = _299 * TEXCOORD.y;
    float _314 = floor(_291);
    vec4 _317 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _301) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _302) + cbTextureTilingScale._m0[6u].w, _314));
    vec4 _339 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _260) + cbTextureTilingScale._m0[0u].w));
    float _347 = (((_282 * cbMtdParam._m0[19u].w) * _317.x) * cbMtdParam._m0[9u].x) * _339.x;
    float _351 = (((_284 * cbMtdParam._m0[19u].w) * _317.y) * cbMtdParam._m0[9u].y) * _339.y;
    float _355 = (((_286 * cbMtdParam._m0[19u].w) * _317.z) * cbMtdParam._m0[9u].z) * _339.z;
    vec4 _367 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _260) + cbTextureTilingScale._m0[1u].w));
    float _371 = _367.z;
    vec4 _384 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _301) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _302) + cbTextureTilingScale._m0[8u].w, _314));
    float _187[2];
    float _188[2];
    _187[0u] = cbMtdParam._m0[25u].x;
    _188[0u] = cbMtdParam._m0[25u].y;
    _187[1u] = cbMtdParam._m0[25u].z;
    _188[1u] = cbMtdParam._m0[25u].w;
    float _398 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _401 = uint(int(isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0))));
    float _406 = _188[_401] + _384.x;
    vec4 _425 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _301) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _302) + cbTextureTilingScale._m0[7u].w, _314));
    float _432 = (_425.x * 2.0) + (-1.0);
    float _433 = (_425.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3560 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))));
    float _448 = (cbMtdParam._m0[20u].x * (((_371 * 2.0) * (_425.z + _187[_401])) - _371)) + _371;
    float _452 = (cbMtdParam._m0[20u].y * ((_367.x * 2.0) + (-1.0))) + _432;
    float _453 = (cbMtdParam._m0[20u].y * ((_367.y * 2.0) + (-1.0))) + _433;
    float _456 = fma(_439, _238, fma(_453, _230 * TANGENT.x, (_216 * _208) * _452));
    float _459 = fma(_439, _239, fma(_453, _230 * TANGENT.y, (_216 * _209) * _452));
    float _462 = fma(_439, _240, fma(_453, _230 * TANGENT.z, (_216 * _210) * _452));
    float _466 = inversesqrt(dot(vec3(_456, _459, _462), vec3(_456, _459, _462)));
    float _467 = _466 * _456;
    float _468 = _466 * _459;
    float _469 = _466 * _462;
    float _3571 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _470 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3593 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3604 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3615 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _474 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _490 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _542 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _532);
    float _543 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _532);
    float _544 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _532);
    float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
    float _549 = _542 * _548;
    float _550 = _543 * _548;
    float _551 = _544 * _548;
    vec4 _556 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _558 = _556.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _784 = sqrt(((_542 * _542) + (_543 * _543)) + (_544 * _544));
        float _790 = (cbMatDynParam._m0[5u].x * _784) + cbMatDynParam._m0[5u].y;
        float _3626 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _795 = (cbMatDynParam._m0[5u].z * _784) + cbMatDynParam._m0[5u].w;
        float _3637 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) - _791)) + _791) < ((_558 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _572 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _573 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _575 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _577 = _575.w;
    float _596 = fma(_469, cbSceneParam._m0[5u].z, fma(_468, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _467));
    float _599 = fma(_469, cbSceneParam._m0[6u].z, fma(_468, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _467));
    float _602 = fma(_469, cbSceneParam._m0[7u].z, fma(_468, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _467));
    vec4 _604 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _615 = (((_604.y - _470) + (_604.w * _470)) * cbMtdParam._m0[3u].x) + _470;
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _630 = _628 + 9u;
    uint _631 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3648 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    vec4 _643 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _648 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _659 = (((_648.x - _474) + (_648.w * _474)) * cbMtdParam._m0[3u].x) + _474;
    float _672 = (cbMtdParam._m0[3u].x * (((_640 * _577) - _640) + _643.x)) + _640;
    float _673 = (cbMtdParam._m0[3u].x * (((_641 * _577) - _641) + _643.y)) + _641;
    float _674 = (cbMtdParam._m0[3u].x * (((_642 * _577) - _642) + _643.z)) + _642;
    float _675 = 1.0 - _659;
    float _676 = _675 * _672;
    float _677 = _675 * _673;
    float _678 = _675 * _674;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _659;
    float _684 = (_673 + (-0.039999999105930328369140625)) * _659;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _659;
    float _686 = _683 + 0.039999999105930328369140625;
    float _688 = _684 + 0.039999999105930328369140625;
    float _689 = _685 + 0.039999999105930328369140625;
    vec4 _698 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _572, cbSceneParam._m0[86u].y * _573));
    float _701 = _698.x * TEXCOORD_4;
    float _702 = dot(vec3(_467, _468, _469), vec3(_549, _550, _551));
    float _705 = _702 * 2.0;
    float _709 = (_705 * _467) - _549;
    float _710 = (_705 * _468) - _550;
    float _711 = (_705 * _469) - _551;
    float _715 = abs(dot(vec3(_549, _550, _551), vec3(_467, _468, _469)));
    float _3681 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _717 = sqrt(_615);
    float _730 = exp2((_717 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_717 * 3.0));
    float _736 = (1.0 - _730) * ((_717 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _737 = _730 * _717;
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1103;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _828 = fma(_773, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765));
        float _832 = fma(_773, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765));
        float _836 = fma(_773, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765));
        float _861 = _765 + _467;
        float _862 = _769 + _468;
        float _863 = _773 + _469;
        float _873 = fma(_863, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861)) - _828;
        float _874 = fma(_863, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861)) - _832;
        float _875 = fma(_863, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861)) - _836;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_828 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_832 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[34u].z) + ((((((_836 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _931 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_897.x + (-0.5));
        float _933 = _931 * (_897.y + (-0.5));
        float _934 = _931 * (_897.z + (-0.5));
        float _941 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_904.x + (-0.5));
        float _943 = _941 * (_904.y + (-0.5));
        float _944 = _941 * (_904.z + (-0.5));
        float _951 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_911.x + (-0.5));
        float _953 = _951 * (_911.y + (-0.5));
        float _954 = _951 * (_911.z + (-0.5));
        float _961 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_918.x + (-0.5));
        float _963 = _961 * (_918.y + (-0.5));
        float _964 = _961 * (_918.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _985 = (dot(vec3(_467, _468, _469), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _995 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3729 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_997 + 1.0))) + _1002) * _965;
        float _1012 = _933 * 0.5;
        float _1013 = _943 * 0.5;
        float _1014 = _953 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_467, _468, _469), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3762 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1039 + 1.0))) + _1044) * _966;
        float _1054 = _934 * 0.5;
        float _1055 = _944 * 0.5;
        float _1056 = _954 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_467, _468, _469), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3795 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1081 + 1.0))) + _1086) * _967;
        _1103 = _934;
        _1105 = _933;
        _1106 = _932;
        _1107 = _944;
        _1108 = _943;
        _1109 = _942;
        _1110 = _954;
        _1111 = _953;
        _1112 = _952;
        _1113 = _967;
        _1114 = _966;
        _1115 = _965;
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _1104;
        _1105 = _1104;
        _1106 = _1104;
        _1107 = _1104;
        _1108 = _1104;
        _1109 = _1104;
        _1110 = _1104;
        _1111 = _1104;
        _1112 = _1104;
        _1113 = _1104;
        _1114 = _1104;
        _1115 = _1104;
        _1116 = 0.0;
        _1117 = 0.0;
        _1118 = 0.0;
    }
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1147 = fma(_773, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _765));
        float _1151 = fma(_773, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _765));
        float _1155 = fma(_773, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _765));
        float _1178 = _765 + _467;
        float _1179 = _769 + _468;
        float _1180 = _773 + _469;
        float _1190 = fma(_1180, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178)) - _1147;
        float _1191 = fma(_1180, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178)) - _1151;
        float _1192 = fma(_1180, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178)) - _1155;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1147 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1151 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[35u].z) + ((((((_1155 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1246 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1213.x + (-0.5));
        float _1248 = _1246 * (_1213.y + (-0.5));
        float _1249 = _1246 * (_1213.z + (-0.5));
        float _1256 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1220.x + (-0.5));
        float _1258 = _1256 * (_1220.y + (-0.5));
        float _1259 = _1256 * (_1220.z + (-0.5));
        float _1266 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1227.x + (-0.5));
        float _1268 = _1266 * (_1227.y + (-0.5));
        float _1269 = _1266 * (_1227.z + (-0.5));
        float _1276 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1234.x + (-0.5));
        float _1278 = _1276 * (_1234.y + (-0.5));
        float _1279 = _1276 * (_1234.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_467, _468, _469), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3858 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1310 + 1.0))) + _1315) * _1280;
        float _1325 = _1248 * 0.5;
        float _1326 = _1258 * 0.5;
        float _1327 = _1268 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_467, _468, _469), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3891 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1352 + 1.0))) + _1357) * _1281;
        float _1367 = _1249 * 0.5;
        float _1368 = _1259 * 0.5;
        float _1369 = _1269 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_467, _468, _469), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3924 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1394 + 1.0))) + _1399) * _1282;
        _1416 = _1249;
        _1417 = _1248;
        _1418 = _1247;
        _1419 = _1259;
        _1420 = _1258;
        _1421 = _1257;
        _1422 = _1269;
        _1423 = _1268;
        _1424 = _1267;
        _1425 = _1282;
        _1426 = _1281;
        _1427 = _1280;
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1104;
        _1417 = _1104;
        _1418 = _1104;
        _1419 = _1104;
        _1420 = _1104;
        _1421 = _1104;
        _1422 = _1104;
        _1423 = _1104;
        _1424 = _1104;
        _1425 = _1104;
        _1426 = _1104;
        _1427 = _1104;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1117)) + _1117;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1463 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1440));
    float _1484 = _709 * 0.5;
    float _1485 = _710 * 0.5;
    float _1486 = _711 * 0.5;
    float _1487 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1490 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1493 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1527;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1500 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1103, _1107, _1110, _1113));
        float _1504 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1508 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1515 = dot(vec4(cbModelParam._m0[39u]), vec4(_1484, _1485, _1486, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1538;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1529 = dot(vec4(cbModelParam._m0[40u]), vec4(_1484, _1485, _1486, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1542 = (_1538 * cbModelParam._m0[1u].x) + (_1527 * (1.0 - cbModelParam._m0[1u].x));
    float _1552 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1552 : min(cbModelParam._m0[25u].z, _1552));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1602 = fma(_773, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765)) + cbModelParam._m0[13u].w;
        float _1606 = fma(_773, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765)) + cbModelParam._m0[14u].w;
        float _1610 = fma(_773, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765)) + cbModelParam._m0[15u].w;
        float _1613 = fma(_711, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709));
        float _1616 = fma(_711, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709));
        float _1619 = fma(_711, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709));
        float _1647;
        if (_1613 > 0.0)
        {
            _1647 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1647 = frontier_phi_25_23_ladder;
        }
        float _1872;
        if (_1616 > 0.0)
        {
            _1872 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1872 = frontier_phi_34_30_ladder;
        }
        float _2129;
        if (_1619 > 0.0)
        {
            _2129 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2129 = frontier_phi_46_41_ladder;
        }
        float _2131 = isnan(_1872) ? _1647 : (isnan(_1647) ? _1872 : min(_1647, _1872));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1613) + _1602;
        float _2137 = (_2132 * _1616) + _1606;
        float _2138 = (_2132 * _1619) + _1610;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2139;
        float _2143 = _2139 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 > _2143) || ((_2137 < _2141) || ((_2136 < _2141) || (_2136 > _2143))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2138, cbModelParam._m0[9u].z, fma(_2137, cbModelParam._m0[9u].y, _2136 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2138, cbModelParam._m0[10u].z, fma(_2137, cbModelParam._m0[10u].y, _2136 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2138, cbModelParam._m0[11u].z, fma(_2137, cbModelParam._m0[11u].y, _2136 * cbModelParam._m0[11u].x))), _1553);
            frontier_phi_24_46_ladder = _2266.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2266.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2266.x * cbModelParam._m0[1u].y;
        }
        _1635 = frontier_phi_24_46_ladder_2;
        _1637 = frontier_phi_24_46_ladder_1;
        _1639 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_709, _710, _711), _1553);
        _1635 = _1623.x * cbModelParam._m0[1u].y;
        _1637 = _1623.y * cbModelParam._m0[1u].y;
        _1639 = _1623.z * cbModelParam._m0[1u].y;
    }
    float _1643 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1643 : min(cbModelParam._m0[25u].w, _1643));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_773, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_773, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_773, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_711, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709));
        float _1711 = fma(_711, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709));
        float _1714 = fma(_711, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709));
        float _1877;
        if (_1708 > 0.0)
        {
            _1877 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1877 = frontier_phi_36_32_ladder;
        }
        float _2156;
        if (_1711 > 0.0)
        {
            _2156 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2156 = frontier_phi_48_43_ladder;
        }
        float _2369;
        if (_1714 > 0.0)
        {
            _2369 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2369 = frontier_phi_57_54_ladder;
        }
        float _2371 = isnan(_2156) ? _1877 : (isnan(_1877) ? _2156 : min(_1877, _2156));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1708) + _1697;
        float _2377 = (_2372 * _1711) + _1701;
        float _2378 = (_2372 * _1714) + _1705;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2379;
        float _2382 = _2379 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2378 > _2382) || ((_2378 < _2380) || ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 < _2380) || (_2376 > _2382))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2378, cbModelParam._m0[17u].z, fma(_2377, cbModelParam._m0[17u].y, _2376 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2378, cbModelParam._m0[18u].z, fma(_2377, cbModelParam._m0[18u].y, _2376 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2378, cbModelParam._m0[19u].z, fma(_2377, cbModelParam._m0[19u].y, _2376 * cbModelParam._m0[19u].x))), _1644);
            frontier_phi_33_57_ladder = _2594.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2594.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2594.z * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_33_57_ladder_1;
        _1735 = frontier_phi_33_57_ladder;
        _1737 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_709, _710, _711), _1644);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1750 = (((_736 * _686) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1752 = (((_736 * _688) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1754 = (((_736 * _689) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    vec4 _1771 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_572, _573));
    float _1773 = _1771.w;
    float _1785 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1773);
    float _1786 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1773);
    float _1787 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1773);
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1801 = _701 + (-1.0);
    float _1806 = (cbLight._m0[_1794].x * _1801) + 1.0;
    float _1807 = (cbLight._m0[_1794].y * _1801) + 1.0;
    float _1808 = (cbLight._m0[_1794].z * _1801) + 1.0;
    float _1809 = (cbLight._m0[_1794].w * _1801) + 1.0;
    uint _1810 = _1793 + 5u;
    float _1816 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1820 = _1793 + 4u;
    float _1830 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1834 = _1793 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_467, _468, _469));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_467, _468, _469));
    float _4060 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _4071 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1810].x * _1816) * _1855) + (((cbLight._m0[_1820].x * _1785) * _1830) * _1853);
    float _1863 = ((_1816 * cbLight._m0[_1810].y) * _1855) + (((cbLight._m0[_1820].y * _1786) * _1830) * _1853);
    float _1864 = ((_1816 * cbLight._m0[_1810].z) * _1855) + (((cbLight._m0[_1820].z * _1787) * _1830) * _1853);
    uvec4 _1869 = floatBitsToUint(cbLight._m0[_1793 + 12u]);
    bool _1871 = _1869.x == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1871)
    {
        _1882 = _1862;
        _1884 = _1863;
        _1886 = _1864;
    }
    else
    {
        uint _1890 = _1793 + 6u;
        float _1906 = (dot(vec3(cbLight._m0[_1793 + 2u].xyz), vec3(_467, _468, _469)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _4082 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1909 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1882 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1862;
        _1884 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1863;
        _1886 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1864;
    }
    bool _1889 = _1869.y == 0u;
    float _1927;
    float _1929;
    float _1931;
    if (_1889)
    {
        _1927 = _1882;
        _1929 = _1884;
        _1931 = _1886;
    }
    else
    {
        uint _2100 = _1793 + 7u;
        float _2116 = (dot(vec3(cbLight._m0[_1793 + 3u].xyz), vec3(_467, _468, _469)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _4098 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2119 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1927 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _1882;
        _1929 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _1884;
        _1931 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _1886;
    }
    uint _1934 = _1793 + 8u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _615) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1793].x + _549;
    float _1950 = cbLight._m0[_1793].y + _550;
    float _1951 = cbLight._m0[_1793].z + _551;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_1793].xyz));
    float _4114 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _1963 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1964 = dot(vec3(_467, _468, _469), vec3(_1956, _1957, _1958));
    float _4136 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1968 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1956, _1957, _1958));
    float _4147 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1972 = _1948 * _1948;
    float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
    float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _1985 = 0.959999978542327880859375 - _683;
    float _1987 = 0.959999978542327880859375 - _684;
    float _1988 = 0.959999978542327880859375 - _685;
    float _1995 = 1.0 - _1948;
    float _2006 = (0.5 / (((_1963 * ((_1962 * _1995) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _1995) + _1948) * _1962))) * _1962;
    float _4158 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2008 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
    uint _2022 = _1793 + 9u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _615) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1834].x + _549;
    float _2036 = cbLight._m0[_1834].y + _550;
    float _2037 = cbLight._m0[_1834].z + _551;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_1834].xyz));
    float _4169 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2049 = dot(vec3(_467, _468, _469), vec3(_2042, _2043, _2044));
    float _4180 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2042, _2043, _2044));
    float _4191 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = _2034 * _2034;
    float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
    float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2075 = 1.0 - _2034;
    float _2085 = (0.5 / (((_1963 * ((_2048 * _2075) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _2075) + _2034) * _2048))) * _2048;
    float _4202 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
    float _2097 = (((((_2068 * _1985) + _686) * cbLight._m0[_2022].x) * _2087) * _1816) + ((((cbLight._m0[_1934].x * _1785) * ((_1984 * _1985) + _686)) * _2008) * _1830);
    float _2098 = (((((_2068 * _1987) + _688) * cbLight._m0[_2022].y) * _2087) * _1816) + ((((cbLight._m0[_1934].y * _1786) * ((_1984 * _1987) + _688)) * _2008) * _1830);
    float _2099 = (((((_2068 * _1988) + _689) * cbLight._m0[_2022].z) * _2087) * _1816) + ((((cbLight._m0[_1934].z * _1787) * ((_1984 * _1988) + _689)) * _2008) * _1830);
    float _2161;
    float _2163;
    float _2165;
    if (_1871)
    {
        _2161 = _2097;
        _2163 = _2098;
        _2165 = _2099;
    }
    else
    {
        uint _2167 = _1793 + 2u;
        uint _2171 = _1793 + 10u;
        float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _615) * 0.949999988079071044921875);
        float _2186 = _2185 * _2185;
        float _2187 = cbLight._m0[_2167].x + _549;
        float _2188 = cbLight._m0[_2167].y + _550;
        float _2189 = cbLight._m0[_2167].z + _551;
        float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
        float _2194 = _2193 * _2187;
        float _2195 = _2193 * _2188;
        float _2196 = _2193 * _2189;
        float _2197 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2167].xyz));
        float _4213 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2200 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2201 = dot(vec3(_467, _468, _469), vec3(_2194, _2195, _2196));
        float _4224 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2205 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2194, _2195, _2196));
        float _4235 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2209 = _2186 * _2186;
        float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
        float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
        float _2227 = 1.0 - _2186;
        float _2237 = (0.5 / (((_1963 * ((_2200 * _2227) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _2227) + _2186) * _2200))) * _2200;
        float _4246 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2239 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
        float _2240 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2161 = (((((_2220 * _1985) + _686) * cbLight._m0[_2171].x) * _2239) * _2240) + _2097;
        _2163 = (((((_2220 * _1987) + _688) * cbLight._m0[_2171].y) * _2239) * _2240) + _2098;
        _2165 = (((((_2220 * _1988) + _689) * cbLight._m0[_2171].z) * _2239) * _2240) + _2099;
    }
    float _2275;
    float _2277;
    float _2279;
    if (_1889)
    {
        _2275 = _2161;
        _2277 = _2163;
        _2279 = _2165;
    }
    else
    {
        uint _2286 = _1793 + 3u;
        uint _2290 = _1793 + 11u;
        float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _615) * 0.949999988079071044921875);
        float _2305 = _2304 * _2304;
        float _2306 = cbLight._m0[_2286].x + _549;
        float _2307 = cbLight._m0[_2286].y + _550;
        float _2308 = cbLight._m0[_2286].z + _551;
        float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
        float _2313 = _2312 * _2306;
        float _2314 = _2312 * _2307;
        float _2315 = _2312 * _2308;
        float _2316 = dot(vec3(_467, _468, _469), vec3(cbLight._m0[_2286].xyz));
        float _4262 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2320 = dot(vec3(_467, _468, _469), vec3(_2313, _2314, _2315));
        float _4273 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2324 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2313, _2314, _2315));
        float _4284 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2328 = _2305 * _2305;
        float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
        float _2339 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
        float _2346 = 1.0 - _2305;
        float _2356 = (0.5 / (((_1963 * ((_2319 * _2346) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _2346) + _2305) * _2319))) * _2319;
        float _4295 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2358 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
        float _2359 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2275 = (((((_2339 * _1985) + _686) * cbLight._m0[_2290].x) * _2358) * _2359) + _2161;
        _2277 = (((((_2339 * _1987) + _688) * cbLight._m0[_2290].y) * _2358) * _2359) + _2163;
        _2279 = (((((_2339 * _1988) + _689) * cbLight._m0[_2290].z) * _2358) * _2359) + _2165;
    }
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_1791.y == 0u)
    {
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2434;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2434;
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2434;
        uvec4 _2449 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2450 = _2449.x;
        uint _2461 = uint((float(_2449.y) * floor(float(uint(cbSceneParam._m0[85u].y * _573) / _2450))) + floor(float(uint(cbSceneParam._m0[85u].x * _572) / _2450)));
        float _2471 = (log2(_2437 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2472 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        uint _2475 = uint(isnan(14.0) ? _2472 : (isnan(_2472) ? 14.0 : min(_2472, 14.0)));
        uvec4 _2480 = texelFetch(g_lightClusterGridBuffer, int(((_2475 << 2u) + (_2461 << 6u)) >> 2u));
        uint _2481 = _2480.x;
        uint _2482 = _2449.z;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((((1u << ((_2482 >> 4u) & 15u)) + 4294967295u) & _2481) == 0u) || ((_2482 & 240u) == 0u))
        {
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
        }
        else
        {
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            uint _2757 = 0u;
            uint _2766;
            bool _2767;
            for (;;)
            {
                _2766 = texelFetch(g_lightClassification, int((((_2475 << 5u) + (_2461 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                _2767 = _2766 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2767)
                {
                    frontier_phi_74_pred = _2756;
                    frontier_phi_74_pred_1 = _2755;
                    frontier_phi_74_pred_2 = _2754;
                    frontier_phi_74_pred_3 = _2753;
                    frontier_phi_74_pred_4 = _2752;
                    frontier_phi_74_pred_5 = _2751;
                }
                else
                {
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    uint _2902;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2766;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    for (;;)
                    {
                        uint _2906 = uint(findLSB(_2902)) + (_2757 << 5u);
                        uint _2903 = (_2902 + 4294967295u) & _2902;
                        uint _2908 = _2906 * 48u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2928 = (_2906 * 48u) + 4u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2947 = (_2906 * 48u) + 8u;
                        vec3 _2958 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x));
                        float _2962 = _2922.x - _2435;
                        float _2963 = _2922.y - _2436;
                        float _2964 = _2922.z - _2437;
                        float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                        float _2968 = inversesqrt(_2965);
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2972 = dot(vec3(_596, _599, _602), vec3(_2969, _2970, _2971));
                        float _2977 = 1.0 - (_2965 * _2922.w);
                        float _4321 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2979 = sqrt(_2965) * _2941.w;
                        float _2982 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2972) + _2983;
                        float _2989 = _2979 * _2979;
                        float _2993 = ((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2978) / ((_2989 * 0.699999988079071044921875) + 1.0);
                        float _2997 = (-0.0) - _2435;
                        float _2998 = (-0.0) - _2436;
                        float _2999 = (-0.0) - _2437;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3014 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                        float _3015 = 1.0 - _717;
                        float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                        float _3023 = _3022 * _3022;
                        float _3024 = _3023 * _3023;
                        float _3025 = _3004 + _2969;
                        float _3026 = _3005 + _2970;
                        float _3027 = _3006 + _2971;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3035 = dot(vec3(_596, _599, _602), vec3(_3004, _3005, _3006));
                        float _4337 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3039 = dot(vec3(_596, _599, _602), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                        float _4348 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                        float _3047 = _2982 * _3023;
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _2972) + _3048;
                        float _4359 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3053 = 1.0 - _3023;
                        float _3063 = (0.5 / (((_3052 * ((_3038 * _3053) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3023) * _3038))) * _3052;
                        float _4370 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3074 = (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3046 * _3046) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125))) * _2978;
                        _2826 = (_2993 * _2941.x) + _2899;
                        _2827 = (_2993 * _2941.y) + _2900;
                        _2828 = (_2993 * _2941.z) + _2901;
                        _2823 = (_3074 * _2958.x) + _2896;
                        _2824 = (_3074 * _2958.y) + _2897;
                        _2825 = (_3074 * _2958.z) + _2898;
                        if (_2903 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2903;
                        }
                    }
                    frontier_phi_74_pred = _2828;
                    frontier_phi_74_pred_1 = _2827;
                    frontier_phi_74_pred_2 = _2826;
                    frontier_phi_74_pred_3 = _2825;
                    frontier_phi_74_pred_4 = _2824;
                    frontier_phi_74_pred_5 = _2823;
                }
                _2610 = frontier_phi_74_pred;
                _2608 = frontier_phi_74_pred_1;
                _2606 = frontier_phi_74_pred_2;
                _2604 = frontier_phi_74_pred_3;
                _2602 = frontier_phi_74_pred_4;
                _2600 = frontier_phi_74_pred_5;
                uint _2758 = _2757 + 1u;
                if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2751 = _2600;
                    _2752 = _2602;
                    _2753 = _2604;
                    _2754 = _2606;
                    _2755 = _2608;
                    _2756 = _2610;
                    _2757 = _2758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
        }
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.z;
        uint _2616 = (_2614 >> 8u) & 15u;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((4294967295u << _2616) & _2481) == 0u)
        {
            _2719 = _2599;
            _2721 = _2601;
            _2723 = _2603;
            _2725 = _2605;
            _2727 = _2607;
            _2729 = _2609;
        }
        else
        {
            float _2744 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
            float _2745 = _2744 * _2435;
            float _2746 = _2744 * _2436;
            float _2747 = _2744 * _2437;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2616 < ((_2614 >> 12u) & 15u))
            {
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2879 = _2599;
                float _2880 = _2601;
                float _2881 = _2603;
                float _2882 = _2605;
                float _2883 = _2607;
                float _2884 = _2609;
                uint _2885 = _2616;
                uint _2894;
                bool _2895;
                for (;;)
                {
                    _2894 = texelFetch(g_lightClassification, int((((_2475 << 5u) + (_2461 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                    _2895 = _2894 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2895)
                    {
                        frontier_phi_85_pred = _2883;
                        frontier_phi_85_pred_1 = _2882;
                        frontier_phi_85_pred_2 = _2881;
                        frontier_phi_85_pred_3 = _2880;
                        frontier_phi_85_pred_4 = _2879;
                        frontier_phi_85_pred_5 = _2884;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        uint _3107 = _2894;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        vec3 _3161;
                        vec4 _3177;
                        vec4 _3192;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3118 = ((_2885 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3118 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3164 = (_3118 * 40u) + 16u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3118 * 40u) + 20u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3118 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3118 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2437, _3227.z, fma(_2436, _3227.y, _3227.x * _2435)) + _3227.w;
                            _3240 = !((fma(_2437, _3208.z, fma(_2436, _3208.y, _3208.x * _2435)) + _3208.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3133.x - _2435;
                                float _3268 = _3133.y - _2436;
                                float _3269 = _3133.z - _2437;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3134 * _3134));
                                float _4381 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3285 = sqrt(_3270) * _3149.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_596, _599, _602))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2437, _3177.z, fma(_2436, _3177.y, _3177.x * _2435)) + _3177.w) / _3239;
                                float _3299 = (fma(_2437, _3192.z, fma(_2436, _3192.y, _3192.x * _2435)) + _3192.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4397 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _717;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2745;
                                float _3329 = _3275 - _2746;
                                float _3330 = _3276 - _2747;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2745, (-0.0) - _2746, (-0.0) - _2747));
                                float _4408 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3342 = dot(vec3(_596, _599, _602), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4419 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_596, _599, _602), vec3(_3274, _3275, _3276))) + _3351;
                                float _4430 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4441 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3305 * _3149.y;
                                frontier_phi_91_pred_1 = _3305 * _3149.x;
                                frontier_phi_91_pred_2 = _3379 * _3161.z;
                                frontier_phi_91_pred_3 = _3379 * _3161.y;
                                frontier_phi_91_pred_4 = _3379 * _3161.x;
                                frontier_phi_91_pred_5 = _3305 * _3149.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3387 = frontier_phi_91_pred;
                            _3386 = frontier_phi_91_pred_1;
                            _3385 = frontier_phi_91_pred_2;
                            _3384 = frontier_phi_91_pred_3;
                            _3383 = frontier_phi_91_pred_4;
                            _3388 = frontier_phi_91_pred_5;
                            _3091 = _3386 + _3104;
                            _3092 = _3387 + _3105;
                            _3093 = _3388 + _3106;
                            _3088 = _3383 + _3101;
                            _3089 = _3384 + _3102;
                            _3090 = _3385 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3092;
                        frontier_phi_85_pred_1 = _3091;
                        frontier_phi_85_pred_2 = _3090;
                        frontier_phi_85_pred_3 = _3089;
                        frontier_phi_85_pred_4 = _3088;
                        frontier_phi_85_pred_5 = _3093;
                    }
                    _2728 = frontier_phi_85_pred;
                    _2726 = frontier_phi_85_pred_1;
                    _2724 = frontier_phi_85_pred_2;
                    _2722 = frontier_phi_85_pred_3;
                    _2720 = frontier_phi_85_pred_4;
                    _2730 = frontier_phi_85_pred_5;
                    uint _2886 = _2885 + 1u;
                    if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2879 = _2720;
                        _2880 = _2722;
                        _2881 = _2724;
                        _2882 = _2726;
                        _2883 = _2728;
                        _2884 = _2730;
                        _2885 = _2886;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2730;
                frontier_phi_66_67_ladder_1 = _2726;
                frontier_phi_66_67_ladder_2 = _2728;
                frontier_phi_66_67_ladder_3 = _2722;
                frontier_phi_66_67_ladder_4 = _2720;
                frontier_phi_66_67_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_66_67_ladder = _2609;
                frontier_phi_66_67_ladder_1 = _2605;
                frontier_phi_66_67_ladder_2 = _2607;
                frontier_phi_66_67_ladder_3 = _2601;
                frontier_phi_66_67_ladder_4 = _2599;
                frontier_phi_66_67_ladder_5 = _2603;
            }
            _2719 = frontier_phi_66_67_ladder_4;
            _2721 = frontier_phi_66_67_ladder_3;
            _2723 = frontier_phi_66_67_ladder_5;
            _2725 = frontier_phi_66_67_ladder_1;
            _2727 = frontier_phi_66_67_ladder_2;
            _2729 = frontier_phi_66_67_ladder;
        }
        float _2734 = isnan(1.0) ? _701 : (isnan(_701) ? 1.0 : min(_701, 1.0));
        _2493 = (_2734 * _2725) + _1927;
        _2495 = (_2734 * _2727) + _1929;
        _2497 = (_2734 * _2729) + _1931;
        _2499 = ((_2719 * _686) * _2734) + _2275;
        _2501 = ((_2721 * _688) * _2734) + _2277;
        _2503 = ((_2723 * _689) * _2734) + _2279;
    }
    else
    {
        _2493 = _1927;
        _2495 = _1929;
        _2497 = _1931;
        _2499 = _2275;
        _2501 = _2277;
        _2503 = _2279;
    }
    vec4 _2509 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4457 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4468 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4479 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _2533 = (((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2493 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _701))) + ((_2499 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + (_2509.x * cbMtdParam._m0[3u].x);
    float _2535 = ((_2509.y * cbMtdParam._m0[3u].x) + ((_2501 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2495 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _701)));
    float _2537 = ((_2509.z * cbMtdParam._m0[3u].x) + ((_2503 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2497 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _701)));
    float _2538 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2539 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2540 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    uint _2541 = _628 + 6u;
    float _2549 = _572 / cbSceneParam._m0[86u].x;
    float _2550 = _573 / cbSceneParam._m0[86u].y;
    vec4 _2564 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, (log2((isnan(cbSceneParam._m0[77u].w) ? _490 : (isnan(_490) ? cbSceneParam._m0[77u].w : min(_490, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2566 = _2564.x;
    float _2567 = _2564.y;
    float _2568 = _2564.z;
    float _2569 = _2564.w;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_490 > cbSceneParam._m0[78u].w)
    {
        float _2624 = isnan(_490) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _490 : min(cbSceneParam._m0[80u].w, _490));
        float _2625 = _2624 / _490;
        float _2636 = _2625 * _542;
        float _2637 = _543 * _2625;
        float _2638 = (-0.0) - _2637;
        float _2639 = _2625 * _544;
        float _2641 = (cbSceneParam._m0[77u].w * _2638) / _2624;
        float _2642 = _2641 + cbSceneParam._m0[79u].w;
        float _2643 = cbSceneParam._m0[79u].w - _2637;
        float _2649 = sqrt(((_2636 * _2636) + (_2637 * _2637)) + (_2639 * _2639));
        float _2652 = (1.0 - (cbSceneParam._m0[77u].w / _2624)) * _2649;
        float _2657 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2659 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2836;
        if (abs((_2638 - _2641) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2836 = ((((_2642 > 0.0) ? exp2(_2657 * _2642) : (2.0 - exp2(_2659 * _2642))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2652;
        }
        else
        {
            float _2780 = 1.0 / cbSceneParam._m0[80u].x;
            float _2781 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : max(_2642, _2643));
            float _2782 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : min(_2642, _2643));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            _2836 = ((abs(_2649 / _2638) * cbSceneParam._m0[80u].y) * ((((_2791 - _2792) * 2.0) - ((exp2(_2657 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0)))) - exp2(_2657 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))))) * _2780)) - ((exp2(_2659 * _2791) - exp2(_2659 * _2792)) * _2780))) + (_2652 * cbSceneParam._m0[80u].z);
        }
        vec4 _2838 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, 1.0), 0.0);
        float _2847 = exp2((_2836 * (-1.44269502162933349609375)) * (1.0 - _2838.w));
        float _2848 = log2(_2847);
        float _2864 = log2(_2569);
        _2661 = (exp2(_2864 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].x)) * _2838.x) / cbSceneParam._m0[78u].x)) + _2566;
        _2663 = (exp2(_2864 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].y)) * _2838.y) / cbSceneParam._m0[78u].y)) + _2567;
        _2665 = (exp2(_2864 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].z)) * _2838.z) / cbSceneParam._m0[78u].z)) + _2568;
        _2667 = _2847 * _2569;
    }
    else
    {
        _2661 = _2566;
        _2663 = _2567;
        _2665 = _2568;
        _2667 = _2569;
    }
    bool _2874;
    vec4 _2677;
    vec4 _2699;
    float _2701;
    float _2705;
    float _2706;
    float _2707;
    float _2708;
    bool _2718;
    for (;;)
    {
        _2677 = cbMatDynParam._m0[0u];
        float _2679 = roundEven(_2677.y);
        bool _2680 = _2679 == 3.0;
        float _2681 = log2(_2667);
        float _2688 = exp2(_2681 * cbSceneParam._m0[78u].x) * _2538;
        float _2689 = exp2(_2681 * cbSceneParam._m0[78u].y) * _2539;
        float _2690 = exp2(_2681 * cbSceneParam._m0[78u].z) * _2540;
        float _2697 = _558 + (-0.5);
        _2699 = cbMtdParam._m0[1u];
        _2701 = _2699.y * _2697;
        float _2704 = (_2679 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2705 = _2704 * (_2680 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2661)));
        _2706 = _2704 * (_2680 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2663)));
        _2707 = _2704 * (_2680 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2665)));
        _2708 = _2697 * 0.999000012874603271484375;
        _2718 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2718)
        {
            if ((cbInstanceData._m0[_628 + 7u].x + _2708) < 0.5)
            {
                _2874 = true;
                break;
            }
        }
        uint _2815 = _630 + uint(_2677.w);
        if ((cbInstanceData._m0[_2815].w < 1.0) && ((cbInstanceData._m0[_2815].w + _2708) < 0.5))
        {
            _2874 = true;
            break;
        }
        if ((_2701 + 1.0) < _2699.x)
        {
            _2874 = true;
            break;
        }
        _2874 = false;
        break;
    }
    float _3079;
    if (_2874)
    {
        discard_state = true;
        _3079 = 0.0;
    }
    else
    {
        _3079 = cbInstanceData._m0[_2541].w;
    }
    SV_Target.x = _2705;
    SV_Target.y = _2706;
    SV_Target.z = _2707;
    SV_Target.w = _3079;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2541].w;
    discard_exit();
}


