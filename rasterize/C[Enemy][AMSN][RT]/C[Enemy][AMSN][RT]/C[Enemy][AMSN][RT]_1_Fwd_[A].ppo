#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1194;
float _3594;
float _3595;
float _3596;
float _3597;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _265 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _267 = log2(0.0);
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[14u].x;
    _192[0u] = cbMtdParam._m0[14u].y;
    _193[0u] = cbMtdParam._m0[14u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[16u].x;
    _192[2u] = cbMtdParam._m0[16u].y;
    _193[2u] = cbMtdParam._m0[16u].z;
    _191[3u] = cbMtdParam._m0[11u].x;
    _192[3u] = cbMtdParam._m0[11u].y;
    _193[3u] = cbMtdParam._m0[11u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[13u].x;
    _192[5u] = cbMtdParam._m0[13u].y;
    _193[5u] = cbMtdParam._m0[13u].z;
    vec4 _339 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _343 = _339.y;
    float _346 = (_339.x + (-0.02500000037252902984619140625)) * 8.0;
    float _348 = roundEven(_346);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    uint _352 = uint(int(isnan(5.0) ? _349 : (isnan(_349) ? 5.0 : min(_349, 5.0))));
    float _369 = roundEven(5.0 - _346);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(4.0) ? _370 : (isnan(_370) ? 4.0 : min(_370, 4.0));
    float _377;
    float _379;
    if (exp2(_267 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _377 = cbMtdParam._m0[26u].x;
        _379 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _377 = cbMtdParam._m0[22u].x;
        _379 = cbMtdParam._m0[22u].y;
    }
    float _381 = _377 * TEXCOORD.x;
    float _382 = _379 * TEXCOORD.y;
    float _393 = floor(_371);
    vec4 _396 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _381) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _382) + cbTextureTilingScale._m0[6u].w, _393));
    vec4 _418 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _426 = ((((((_191[_352] - cbMtdParam._m0[18u].x) * _343) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _396.x) * cbMtdParam._m0[9u].x) * _418.x;
    float _430 = ((((((_192[_352] - cbMtdParam._m0[18u].y) * _343) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _396.y) * cbMtdParam._m0[9u].y) * _418.y;
    float _434 = ((((((_193[_352] - cbMtdParam._m0[18u].z) * _343) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _396.z) * cbMtdParam._m0[9u].z) * _418.z;
    vec4 _446 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _450 = _446.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[22u].z;
    _187[0u] = cbMtdParam._m0[22u].w;
    _186[1u] = cbMtdParam._m0[23u].z;
    _187[1u] = cbMtdParam._m0[23u].w;
    _186[2u] = cbMtdParam._m0[24u].x;
    _187[2u] = cbMtdParam._m0[24u].y;
    _186[3u] = cbMtdParam._m0[24u].z;
    _187[3u] = cbMtdParam._m0[24u].w;
    _186[4u] = cbMtdParam._m0[23u].x;
    _187[4u] = cbMtdParam._m0[23u].y;
    float _494 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _496 = uint(int(isnan(4.0) ? _494 : (isnan(_494) ? 4.0 : min(_494, 4.0))));
    float _501 = _187[_496] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _381) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _382) + cbTextureTilingScale._m0[8u].w, _393)).x;
    vec4 _520 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _381) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _382) + cbTextureTilingScale._m0[7u].w, _393));
    float _527 = (_520.x * 2.0) + (-1.0);
    float _528 = (_520.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3636 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    float _544 = (cbMtdParam._m0[20u].x * (((_450 * 2.0) * (_520.z + _186[_496])) - _450)) + _450;
    float _548 = (cbMtdParam._m0[20u].y * ((_446.x * 2.0) + (-1.0))) + _527;
    float _549 = (cbMtdParam._m0[20u].y * ((_446.y * 2.0) + (-1.0))) + _528;
    float _552 = fma(_535, _243, fma(_549, _235 * TANGENT.x, (_221 * _213) * _548));
    float _555 = fma(_535, _244, fma(_549, _235 * TANGENT.y, (_221 * _214) * _548));
    float _558 = fma(_535, _245, fma(_549, _235 * TANGENT.z, (_221 * _215) * _548));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3647 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _566 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3669 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3680 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3691 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _570 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _586 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _637 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _627);
    float _638 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _627);
    float _639 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _627);
    float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
    float _644 = _637 * _643;
    float _645 = _638 * _643;
    float _646 = _639 * _643;
    vec4 _651 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _653 = _651.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _874 = sqrt(((_637 * _637) + (_638 * _638)) + (_639 * _639));
        float _880 = (cbMatDynParam._m0[5u].x * _874) + cbMatDynParam._m0[5u].y;
        float _3702 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _885 = (cbMatDynParam._m0[5u].z * _874) + cbMatDynParam._m0[5u].w;
        float _3713 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) - _881)) + _881) < ((_653 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _669 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _671 = _669.w;
    float _689 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _692 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _695 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    vec4 _697 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = (((_697.y - _566) + (_697.w * _566)) * cbMtdParam._m0[3u].x) + _566;
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _722 = _721 + 9u;
    uint _723 = _722 + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3724 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    vec4 _735 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _740 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = (((_740.x - _570) + (_740.w * _570)) * cbMtdParam._m0[3u].x) + _570;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _671) - _732) + _735.x)) + _732;
    float _765 = (cbMtdParam._m0[3u].x * (((_733 * _671) - _733) + _735.y)) + _733;
    float _766 = (cbMtdParam._m0[3u].x * (((_734 * _671) - _734) + _735.z)) + _734;
    float _767 = 1.0 - _751;
    float _768 = _767 * _764;
    float _769 = _767 * _765;
    float _770 = _767 * _766;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _751;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _751;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _751;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _793 = _790.x * TEXCOORD_4;
    float _794 = dot(vec3(_563, _564, _565), vec3(_644, _645, _646));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _563) - _644;
    float _802 = (_797 * _564) - _645;
    float _803 = (_797 * _565) - _646;
    float _807 = abs(dot(vec3(_644, _645, _646), vec3(_563, _564, _565)));
    float _3757 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_708);
    float _820 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _826 = (1.0 - _820) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _827 = _820 * _809;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1193;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _918 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _922 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _926 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _951 = _855 + _563;
        float _952 = _859 + _564;
        float _953 = _863 + _565;
        float _963 = fma(_953, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951)) - _918;
        float _964 = fma(_953, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951)) - _922;
        float _965 = fma(_953, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951)) - _926;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_918 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_922 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[34u].z) + ((((((_926 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1021 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_987.x + (-0.5));
        float _1023 = _1021 * (_987.y + (-0.5));
        float _1024 = _1021 * (_987.z + (-0.5));
        float _1031 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_994.x + (-0.5));
        float _1033 = _1031 * (_994.y + (-0.5));
        float _1034 = _1031 * (_994.z + (-0.5));
        float _1041 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1001.x + (-0.5));
        float _1043 = _1041 * (_1001.y + (-0.5));
        float _1044 = _1041 * (_1001.z + (-0.5));
        float _1051 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1008.x + (-0.5));
        float _1053 = _1051 * (_1008.y + (-0.5));
        float _1054 = _1051 * (_1008.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1075 = (dot(vec3(_563, _564, _565), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1085 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3805 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1087 + 1.0))) + _1092) * _1055;
        float _1102 = _1023 * 0.5;
        float _1103 = _1033 * 0.5;
        float _1104 = _1043 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_563, _564, _565), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3838 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1129 + 1.0))) + _1134) * _1056;
        float _1144 = _1024 * 0.5;
        float _1145 = _1034 * 0.5;
        float _1146 = _1044 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_563, _564, _565), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3871 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1171 + 1.0))) + _1176) * _1057;
        _1193 = _1024;
        _1195 = _1023;
        _1196 = _1022;
        _1197 = _1034;
        _1198 = _1033;
        _1199 = _1032;
        _1200 = _1044;
        _1201 = _1043;
        _1202 = _1042;
        _1203 = _1057;
        _1204 = _1056;
        _1205 = _1055;
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _1194;
        _1195 = _1194;
        _1196 = _1194;
        _1197 = _1194;
        _1198 = _1194;
        _1199 = _1194;
        _1200 = _1194;
        _1201 = _1194;
        _1202 = _1194;
        _1203 = _1194;
        _1204 = _1194;
        _1205 = _1194;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1237 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1241 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1245 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1268 = _855 + _563;
        float _1269 = _859 + _564;
        float _1270 = _863 + _565;
        float _1280 = fma(_1270, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268)) - _1237;
        float _1281 = fma(_1270, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268)) - _1241;
        float _1282 = fma(_1270, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268)) - _1245;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1237 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1241 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[35u].z) + ((((((_1245 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1336 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1303.x + (-0.5));
        float _1338 = _1336 * (_1303.y + (-0.5));
        float _1339 = _1336 * (_1303.z + (-0.5));
        float _1346 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1310.x + (-0.5));
        float _1348 = _1346 * (_1310.y + (-0.5));
        float _1349 = _1346 * (_1310.z + (-0.5));
        float _1356 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1317.x + (-0.5));
        float _1358 = _1356 * (_1317.y + (-0.5));
        float _1359 = _1356 * (_1317.z + (-0.5));
        float _1366 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1324.x + (-0.5));
        float _1368 = _1366 * (_1324.y + (-0.5));
        float _1369 = _1366 * (_1324.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_563, _564, _565), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3934 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1400 + 1.0))) + _1405) * _1370;
        float _1415 = _1338 * 0.5;
        float _1416 = _1348 * 0.5;
        float _1417 = _1358 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_563, _564, _565), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3967 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1442 + 1.0))) + _1447) * _1371;
        float _1457 = _1339 * 0.5;
        float _1458 = _1349 * 0.5;
        float _1459 = _1359 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_563, _564, _565), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4000 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1484 + 1.0))) + _1489) * _1372;
        _1506 = _1339;
        _1507 = _1338;
        _1508 = _1337;
        _1509 = _1349;
        _1510 = _1348;
        _1511 = _1347;
        _1512 = _1359;
        _1513 = _1358;
        _1514 = _1357;
        _1515 = _1372;
        _1516 = _1371;
        _1517 = _1370;
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1194;
        _1507 = _1194;
        _1508 = _1194;
        _1509 = _1194;
        _1510 = _1194;
        _1511 = _1194;
        _1512 = _1194;
        _1513 = _1194;
        _1514 = _1194;
        _1515 = _1194;
        _1516 = _1194;
        _1517 = _1194;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1206)) + _1206;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1207)) + _1207;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1208)) + _1208;
    float _1553 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1530));
    float _1574 = _801 * 0.5;
    float _1575 = _802 * 0.5;
    float _1576 = _803 * 0.5;
    float _1577 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1580 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1583 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1617;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1590 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1193, _1197, _1200, _1203));
        float _1594 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1598 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1605 = dot(vec4(cbModelParam._m0[39u]), vec4(_1574, _1575, _1576, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1628;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1619 = dot(vec4(cbModelParam._m0[40u]), vec4(_1574, _1575, _1576, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1632 = (_1628 * cbModelParam._m0[1u].x) + (_1617 * (1.0 - cbModelParam._m0[1u].x));
    float _1642 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1642 : min(cbModelParam._m0[25u].z, _1642));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1704 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1707 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1735 = frontier_phi_21_19_ladder;
        }
        float _1937;
        if (_1704 > 0.0)
        {
            _1937 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1937 = frontier_phi_30_26_ladder;
        }
        float _2191;
        if (_1707 > 0.0)
        {
            _2191 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2191 = frontier_phi_42_37_ladder;
        }
        float _2193 = isnan(_1937) ? _1735 : (isnan(_1735) ? _1937 : min(_1735, _1937));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1701) + _1690;
        float _2199 = (_2194 * _1704) + _1694;
        float _2200 = (_2194 * _1707) + _1698;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1643);
            frontier_phi_20_42_ladder = _2328.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2328.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2328.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_20_42_ladder_2;
        _1725 = frontier_phi_20_42_ladder_1;
        _1727 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1643);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1785 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1789 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1793 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1796 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1799 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1802 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1942;
        if (_1796 > 0.0)
        {
            _1942 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1942 = frontier_phi_32_28_ladder;
        }
        float _2218;
        if (_1799 > 0.0)
        {
            _2218 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2218 = frontier_phi_44_39_ladder;
        }
        float _2431;
        if (_1802 > 0.0)
        {
            _2431 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2431 = frontier_phi_53_50_ladder;
        }
        float _2433 = isnan(_2218) ? _1942 : (isnan(_1942) ? _2218 : min(_1942, _2218));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1796) + _1785;
        float _2439 = (_2434 * _1799) + _1789;
        float _2440 = (_2434 * _1802) + _1793;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_29_53_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1821 = frontier_phi_29_53_ladder_2;
        _1823 = frontier_phi_29_53_ladder_1;
        _1825 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1732);
        _1821 = _1805.x * cbModelParam._m0[1u].z;
        _1823 = _1805.y * cbModelParam._m0[1u].z;
        _1825 = _1805.z * cbModelParam._m0[1u].z;
    }
    float _1838 = (((_826 * _778) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1821 - _1723)) + _1723);
    float _1840 = (((_826 * _780) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1823 - _1725)) + _1725);
    float _1842 = (((_826 * _781) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1845 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1848 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1851 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, _1838 * cbSceneParam._m0[91u].x));
    uvec4 _1861 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _1863 = _1861.x * 14u;
    uint _1864 = _1863 + 13u;
    float _1871 = _793 + (-1.0);
    float _1876 = (cbLight._m0[_1864].x * _1871) + 1.0;
    float _1877 = (cbLight._m0[_1864].y * _1871) + 1.0;
    float _1878 = (cbLight._m0[_1864].z * _1871) + 1.0;
    float _1879 = (cbLight._m0[_1864].w * _1871) + 1.0;
    uint _1880 = _1863 + 5u;
    float _1886 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1890 = _1863 + 4u;
    float _1896 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1900 = _1863 | 1u;
    float _1911 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_563, _564, _565));
    float _1914 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_563, _564, _565));
    float _4136 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _4147 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1919 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1921 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1928 = ((cbLight._m0[_1880].x * _1886) * _1921) + ((cbLight._m0[_1890].x * _1896) * _1919);
    float _1929 = ((_1886 * cbLight._m0[_1880].y) * _1921) + ((_1896 * cbLight._m0[_1890].y) * _1919);
    float _1930 = ((_1886 * cbLight._m0[_1880].z) * _1921) + ((_1896 * cbLight._m0[_1890].z) * _1919);
    uvec4 _1934 = floatBitsToUint(cbLight._m0[_1863 + 12u]);
    bool _1936 = _1934.x == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1936)
    {
        _1947 = _1928;
        _1949 = _1929;
        _1951 = _1930;
    }
    else
    {
        uint _1955 = _1863 + 6u;
        float _1971 = (dot(vec3(cbLight._m0[_1863 + 2u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _1972 = _1971 * _1971;
        float _4158 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1974 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _1947 = (((cbLight._m0[_1955].x * 0.3183098733425140380859375) * _1973) * _1974) + _1928;
        _1949 = (((cbLight._m0[_1955].y * 0.3183098733425140380859375) * _1973) * _1974) + _1929;
        _1951 = (((cbLight._m0[_1955].z * 0.3183098733425140380859375) * _1973) * _1974) + _1930;
    }
    bool _1954 = _1934.y == 0u;
    float _1992;
    float _1994;
    float _1996;
    if (_1954)
    {
        _1992 = _1947;
        _1994 = _1949;
        _1996 = _1951;
    }
    else
    {
        uint _2162 = _1863 + 7u;
        float _2178 = (dot(vec3(cbLight._m0[_1863 + 3u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4174 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2181 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1992 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _1947;
        _1994 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _1949;
        _1996 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _1951;
    }
    uint _1999 = _1863 + 8u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1863].w)) * _708) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1863].x + _644;
    float _2015 = cbLight._m0[_1863].y + _645;
    float _2016 = cbLight._m0[_1863].z + _646;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1863].xyz));
    float _4190 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2028 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2029 = dot(vec3(_563, _564, _565), vec3(_2021, _2022, _2023));
    float _4212 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_2021, _2022, _2023));
    float _4223 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2013 * _2013;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2049 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2050 = 0.959999978542327880859375 - _775;
    float _2052 = 0.959999978542327880859375 - _776;
    float _2053 = 0.959999978542327880859375 - _777;
    float _2060 = 1.0 - _2013;
    float _2071 = (0.5 / (((_2028 * ((_2027 * _2060) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2060) + _2013) * _2027))) * _2027;
    float _4234 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    uint _2084 = _1863 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _708) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1900].x + _644;
    float _2098 = cbLight._m0[_1900].y + _645;
    float _2099 = cbLight._m0[_1900].z + _646;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1900].xyz));
    float _4245 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2111 = dot(vec3(_563, _564, _565), vec3(_2104, _2105, _2106));
    float _4256 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2104, _2105, _2106));
    float _4267 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2137 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2028 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2137) + _2096) * _2110))) * _2110;
    float _4278 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2159 = (((((_2130 * _2050) + _778) * cbLight._m0[_2084].x) * _2149) * _1886) + (((((_2049 * _2050) + _778) * cbLight._m0[_1999].x) * _2073) * _1896);
    float _2160 = (((((_2130 * _2052) + _780) * cbLight._m0[_2084].y) * _2149) * _1886) + (((((_2049 * _2052) + _780) * cbLight._m0[_1999].y) * _2073) * _1896);
    float _2161 = (((((_2130 * _2053) + _781) * cbLight._m0[_2084].z) * _2149) * _1886) + (((((_2049 * _2053) + _781) * cbLight._m0[_1999].z) * _2073) * _1896);
    float _2223;
    float _2225;
    float _2227;
    if (_1936)
    {
        _2223 = _2159;
        _2225 = _2160;
        _2227 = _2161;
    }
    else
    {
        uint _2229 = _1863 + 2u;
        uint _2233 = _1863 + 10u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _708) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _644;
        float _2250 = cbLight._m0[_2229].y + _645;
        float _2251 = cbLight._m0[_2229].z + _646;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2229].xyz));
        float _4289 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2263 = dot(vec3(_563, _564, _565), vec3(_2256, _2257, _2258));
        float _4300 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4311 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2289 = 1.0 - _2248;
        float _2299 = (0.5 / (((_2028 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2289) + _2248) * _2262))) * _2262;
        float _4322 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2301 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2302 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2223 = (((((_2282 * _2050) + _778) * cbLight._m0[_2233].x) * _2301) * _2302) + _2159;
        _2225 = (((((_2282 * _2052) + _780) * cbLight._m0[_2233].y) * _2301) * _2302) + _2160;
        _2227 = (((((_2282 * _2053) + _781) * cbLight._m0[_2233].z) * _2301) * _2302) + _2161;
    }
    float _2337;
    float _2339;
    float _2341;
    if (_1954)
    {
        _2337 = _2223;
        _2339 = _2225;
        _2341 = _2227;
    }
    else
    {
        uint _2348 = _1863 + 3u;
        uint _2352 = _1863 + 11u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _708) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _644;
        float _2369 = cbLight._m0[_2348].y + _645;
        float _2370 = cbLight._m0[_2348].z + _646;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2348].xyz));
        float _4338 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2382 = dot(vec3(_563, _564, _565), vec3(_2375, _2376, _2377));
        float _4349 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4360 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2028 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2408) + _2367) * _2381))) * _2381;
        float _4371 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2337 = (((((_2401 * _2050) + _778) * cbLight._m0[_2352].x) * _2420) * _2421) + _2223;
        _2339 = (((((_2401 * _2052) + _780) * cbLight._m0[_2352].y) * _2420) * _2421) + _2225;
        _2341 = (((((_2401 * _2053) + _781) * cbLight._m0[_2352].z) * _2420) * _2421) + _2227;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1861.y == 0u)
    {
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2496;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2496;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2496;
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2512)));
        float _2533 = (log2(_2499 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
        }
        else
        {
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            uint _2819 = 0u;
            uint _2828;
            bool _2829;
            for (;;)
            {
                _2828 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2819 << 2u)) >> 2u)).x;
                _2829 = _2828 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2829)
                {
                    frontier_phi_70_pred = _2813;
                    frontier_phi_70_pred_1 = _2818;
                    frontier_phi_70_pred_2 = _2817;
                    frontier_phi_70_pred_3 = _2816;
                    frontier_phi_70_pred_4 = _2815;
                    frontier_phi_70_pred_5 = _2814;
                }
                else
                {
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    uint _2964;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2828;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    for (;;)
                    {
                        uint _2968 = uint(findLSB(_2964)) + (_2819 << 5u);
                        uint _2965 = (_2964 + 4294967295u) & _2964;
                        uint _2970 = _2968 * 48u;
                        vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 3u)).x));
                        uint _2990 = (_2968 * 48u) + 4u;
                        vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3009 = (_2968 * 48u) + 8u;
                        vec3 _3020 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x));
                        float _3024 = _2984.x - _2497;
                        float _3025 = _2984.y - _2498;
                        float _3026 = _2984.z - _2499;
                        float _3027 = dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026));
                        float _3030 = inversesqrt(_3027);
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3034 = dot(vec3(_689, _692, _695), vec3(_3031, _3032, _3033));
                        float _3039 = 1.0 - (_3027 * _2984.w);
                        float _4397 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3041 = sqrt(_3027) * _3003.w;
                        float _3044 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _3034) + _3045;
                        float _3051 = _3041 * _3041;
                        float _3055 = ((isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))) * _3040) / ((_3051 * 0.699999988079071044921875) + 1.0);
                        float _3059 = (-0.0) - _2497;
                        float _3060 = (-0.0) - _2498;
                        float _3061 = (-0.0) - _2499;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3076 = exp2(log2(1.0 / ((_3051 * 3.5) + 5.0)) * 0.25);
                        float _3077 = 1.0 - _809;
                        float _3084 = sqrt(1.0 - ((1.0 - (_3077 * _3077)) * (1.0 - (_3076 * _3076))));
                        float _3085 = _3084 * _3084;
                        float _3086 = _3085 * _3085;
                        float _3087 = _3066 + _3031;
                        float _3088 = _3067 + _3032;
                        float _3089 = _3068 + _3033;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3097 = dot(vec3(_689, _692, _695), vec3(_3066, _3067, _3068));
                        float _4413 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3101 = dot(vec3(_689, _692, _695), vec3(_3093 * _3087, _3093 * _3088, _3093 * _3089));
                        float _4424 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3104 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3108 = ((_3104 * _3104) * (_3086 + (-1.0))) + 1.0;
                        float _3109 = _3044 * _3085;
                        float _3110 = _3109 * _3109;
                        float _3113 = ((1.0 - _3110) * _3034) + _3110;
                        float _4435 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3115 = 1.0 - _3085;
                        float _3125 = (0.5 / (((_3114 * ((_3100 * _3115) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_3114 * _3115) + _3085) * _3100))) * _3114;
                        float _4446 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3136 = (((_3086 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3108 * _3108) * ((_3051 * 2.1991131305694580078125) + 3.141590118408203125))) * _3040;
                        _2888 = (_3055 * _3003.x) + _2961;
                        _2889 = (_3055 * _3003.y) + _2962;
                        _2890 = (_3055 * _3003.z) + _2963;
                        _2885 = (_3136 * _3020.x) + _2958;
                        _2886 = (_3136 * _3020.y) + _2959;
                        _2887 = (_3136 * _3020.z) + _2960;
                        if (_2965 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2965;
                        }
                    }
                    frontier_phi_70_pred = _2885;
                    frontier_phi_70_pred_1 = _2890;
                    frontier_phi_70_pred_2 = _2889;
                    frontier_phi_70_pred_3 = _2888;
                    frontier_phi_70_pred_4 = _2887;
                    frontier_phi_70_pred_5 = _2886;
                }
                _2662 = frontier_phi_70_pred;
                _2672 = frontier_phi_70_pred_1;
                _2670 = frontier_phi_70_pred_2;
                _2668 = frontier_phi_70_pred_3;
                _2666 = frontier_phi_70_pred_4;
                _2664 = frontier_phi_70_pred_5;
                uint _2820 = _2819 + 1u;
                if (_2820 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2813 = _2662;
                    _2814 = _2664;
                    _2815 = _2666;
                    _2816 = _2668;
                    _2817 = _2670;
                    _2818 = _2672;
                    _2819 = _2820;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
        }
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.z;
        uint _2678 = (_2676 >> 8u) & 15u;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((4294967295u << _2678) & _2543) == 0u)
        {
            _2781 = _2661;
            _2783 = _2663;
            _2785 = _2665;
            _2787 = _2667;
            _2789 = _2669;
            _2791 = _2671;
        }
        else
        {
            float _2806 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
            float _2807 = _2806 * _2497;
            float _2808 = _2806 * _2498;
            float _2809 = _2806 * _2499;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2678 < ((_2676 >> 12u) & 15u))
            {
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2941 = _2661;
                float _2942 = _2663;
                float _2943 = _2665;
                float _2944 = _2667;
                float _2945 = _2669;
                float _2946 = _2671;
                uint _2947 = _2678;
                uint _2956;
                bool _2957;
                for (;;)
                {
                    _2956 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                    _2957 = _2956 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2957)
                    {
                        frontier_phi_81_pred = _2946;
                        frontier_phi_81_pred_1 = _2945;
                        frontier_phi_81_pred_2 = _2944;
                        frontier_phi_81_pred_3 = _2943;
                        frontier_phi_81_pred_4 = _2942;
                        frontier_phi_81_pred_5 = _2941;
                    }
                    else
                    {
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3163 = _2941;
                        float _3164 = _2942;
                        float _3165 = _2943;
                        float _3166 = _2944;
                        float _3167 = _2945;
                        float _3168 = _2946;
                        uint _3169 = _2956;
                        uint _3170;
                        vec4 _3195;
                        float _3196;
                        vec4 _3211;
                        vec3 _3223;
                        vec4 _3238;
                        vec4 _3253;
                        float _3299;
                        bool _3300;
                        for (;;)
                        {
                            uint _3180 = ((_2947 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3169));
                            _3170 = (_3169 + 4294967295u) & _3169;
                            uint _3182 = _3180 * 40u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3196 = _3195.w;
                            uint _3198 = (_3180 * 40u) + 4u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3213 = (_3180 * 40u) + 8u;
                            _3223 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x));
                            uint _3225 = (_3180 * 40u) + 16u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3180 * 40u) + 20u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3180 * 40u) + 24u;
                            vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3274 = (_3180 * 40u) + 28u;
                            vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3299 = fma(_2499, _3287.z, fma(_2498, _3287.y, _3287.x * _2497)) + _3287.w;
                            _3300 = !((fma(_2499, _3268.z, fma(_2498, _3268.y, _3268.x * _2497)) + _3268.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3300)
                            {
                                float _3327 = _3195.x - _2497;
                                float _3328 = _3195.y - _2498;
                                float _3329 = _3195.z - _2499;
                                float _3330 = dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329));
                                float _3333 = inversesqrt(_3330);
                                float _3334 = _3333 * _3327;
                                float _3335 = _3333 * _3328;
                                float _3336 = _3333 * _3329;
                                float _3340 = 1.0 - (_3330 / (_3196 * _3196));
                                float _4457 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3345 = sqrt(_3330) * _3211.w;
                                float _3347 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                                float _3348 = _3347 * _3347;
                                float _3351 = ((1.0 - _3348) * dot(vec3(_3334, _3335, _3336), vec3(_689, _692, _695))) + _3348;
                                float _3354 = _3345 * _3345;
                                float _3358 = (fma(_2499, _3238.z, fma(_2498, _3238.y, _3238.x * _2497)) + _3238.w) / _3299;
                                float _3359 = (fma(_2499, _3253.z, fma(_2498, _3253.y, _3253.x * _2497)) + _3253.w) / _3299;
                                float _3363 = 1.0 - dot(vec2(_3358, _3359), vec2(_3358, _3359));
                                float _4473 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3365 = _3364 * (((isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))) * _3341) / ((_3354 * 0.699999988079071044921875) + 1.0));
                                float _3377 = exp2(log2(1.0 / ((_3354 * 3.5) + 5.0)) * 0.25);
                                float _3378 = 1.0 - _809;
                                float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                                float _3386 = _3385 * _3385;
                                float _3387 = _3386 * _3386;
                                float _3388 = _3334 - _2807;
                                float _3389 = _3335 - _2808;
                                float _3390 = _3336 - _2809;
                                float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                                float _3398 = dot(vec3(_689, _692, _695), vec3((-0.0) - _2807, (-0.0) - _2808, (-0.0) - _2809));
                                float _4484 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3401 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3402 = dot(vec3(_689, _692, _695), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                                float _4495 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                                float _3410 = _3347 * _3386;
                                float _3411 = _3410 * _3410;
                                float _3417 = ((1.0 - _3411) * dot(vec3(_689, _692, _695), vec3(_3334, _3335, _3336))) + _3411;
                                float _4506 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3419 = 1.0 - _3386;
                                float _3429 = (0.5 / (((_3418 * ((_3401 * _3419) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3386) * _3401))) * _3418;
                                float _4517 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3439 = (_3364 * _3341) * (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3409 * _3409) * ((_3354 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3365 * _3211.z;
                                frontier_phi_87_pred_1 = _3365 * _3211.y;
                                frontier_phi_87_pred_2 = _3365 * _3211.x;
                                frontier_phi_87_pred_3 = _3439 * _3223.z;
                                frontier_phi_87_pred_4 = _3439 * _3223.y;
                                frontier_phi_87_pred_5 = _3439 * _3223.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3448 = frontier_phi_87_pred;
                            _3447 = frontier_phi_87_pred_1;
                            _3446 = frontier_phi_87_pred_2;
                            _3445 = frontier_phi_87_pred_3;
                            _3444 = frontier_phi_87_pred_4;
                            _3443 = frontier_phi_87_pred_5;
                            _3153 = _3446 + _3166;
                            _3154 = _3447 + _3167;
                            _3155 = _3448 + _3168;
                            _3150 = _3443 + _3163;
                            _3151 = _3444 + _3164;
                            _3152 = _3445 + _3165;
                            if (_3170 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3170;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3155;
                        frontier_phi_81_pred_1 = _3154;
                        frontier_phi_81_pred_2 = _3153;
                        frontier_phi_81_pred_3 = _3152;
                        frontier_phi_81_pred_4 = _3151;
                        frontier_phi_81_pred_5 = _3150;
                    }
                    _2792 = frontier_phi_81_pred;
                    _2790 = frontier_phi_81_pred_1;
                    _2788 = frontier_phi_81_pred_2;
                    _2786 = frontier_phi_81_pred_3;
                    _2784 = frontier_phi_81_pred_4;
                    _2782 = frontier_phi_81_pred_5;
                    uint _2948 = _2947 + 1u;
                    if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2941 = _2782;
                        _2942 = _2784;
                        _2943 = _2786;
                        _2944 = _2788;
                        _2945 = _2790;
                        _2946 = _2792;
                        _2947 = _2948;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2788;
                frontier_phi_62_63_ladder_1 = _2792;
                frontier_phi_62_63_ladder_2 = _2790;
                frontier_phi_62_63_ladder_3 = _2786;
                frontier_phi_62_63_ladder_4 = _2784;
                frontier_phi_62_63_ladder_5 = _2782;
            }
            else
            {
                frontier_phi_62_63_ladder = _2667;
                frontier_phi_62_63_ladder_1 = _2671;
                frontier_phi_62_63_ladder_2 = _2669;
                frontier_phi_62_63_ladder_3 = _2665;
                frontier_phi_62_63_ladder_4 = _2663;
                frontier_phi_62_63_ladder_5 = _2661;
            }
            _2781 = frontier_phi_62_63_ladder_5;
            _2783 = frontier_phi_62_63_ladder_4;
            _2785 = frontier_phi_62_63_ladder_3;
            _2787 = frontier_phi_62_63_ladder;
            _2789 = frontier_phi_62_63_ladder_2;
            _2791 = frontier_phi_62_63_ladder_1;
        }
        float _2796 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2555 = (_2796 * _2787) + _1992;
        _2557 = (_2796 * _2789) + _1994;
        _2559 = (_2796 * _2791) + _1996;
        _2561 = ((_2781 * _778) * _2796) + _2337;
        _2563 = ((_2783 * _780) * _2796) + _2339;
        _2565 = ((_2785 * _781) * _2796) + _2341;
    }
    else
    {
        _2555 = _1992;
        _2557 = _1994;
        _2559 = _1996;
        _2561 = _2337;
        _2563 = _2339;
        _2565 = _2341;
    }
    vec4 _2571 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4533 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4544 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4555 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2595 = (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2555 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _793))) + ((_2561 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1632)) * cbPerFrame._m0[3u].x)) + (_2571.x * cbMtdParam._m0[3u].x);
    float _2597 = ((_2571.y * cbMtdParam._m0[3u].x) + ((_2563 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1632)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2557 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _793)));
    float _2599 = ((_2571.z * cbMtdParam._m0[3u].x) + ((_2565 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1632)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2559 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _793)));
    float _2600 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2601 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2602 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    uint _2603 = _721 + 6u;
    float _2611 = _666 / cbSceneParam._m0[86u].x;
    float _2612 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2626 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, (log2((isnan(cbSceneParam._m0[77u].w) ? _586 : (isnan(_586) ? cbSceneParam._m0[77u].w : min(_586, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2628 = _2626.x;
    float _2629 = _2626.y;
    float _2630 = _2626.z;
    float _2631 = _2626.w;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_586 > cbSceneParam._m0[78u].w)
    {
        float _2686 = isnan(_586) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _586 : min(cbSceneParam._m0[80u].w, _586));
        float _2687 = _2686 / _586;
        float _2698 = _2687 * _637;
        float _2699 = _638 * _2687;
        float _2700 = (-0.0) - _2699;
        float _2701 = _2687 * _639;
        float _2703 = (cbSceneParam._m0[77u].w * _2700) / _2686;
        float _2704 = _2703 + cbSceneParam._m0[79u].w;
        float _2705 = cbSceneParam._m0[79u].w - _2699;
        float _2711 = sqrt(((_2698 * _2698) + (_2699 * _2699)) + (_2701 * _2701));
        float _2714 = (1.0 - (cbSceneParam._m0[77u].w / _2686)) * _2711;
        float _2719 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2721 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2898;
        if (abs((_2700 - _2703) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2898 = ((((_2704 > 0.0) ? exp2(_2719 * _2704) : (2.0 - exp2(_2721 * _2704))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2714;
        }
        else
        {
            float _2842 = 1.0 / cbSceneParam._m0[80u].x;
            float _2843 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : max(_2704, _2705));
            float _2844 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : min(_2704, _2705));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            _2898 = ((abs(_2711 / _2700) * cbSceneParam._m0[80u].y) * ((((_2853 - _2854) * 2.0) - ((exp2(_2719 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)))) - exp2(_2719 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))))) * _2842)) - ((exp2(_2721 * _2853) - exp2(_2721 * _2854)) * _2842))) + (_2714 * cbSceneParam._m0[80u].z);
        }
        vec4 _2900 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, 1.0), 0.0);
        float _2909 = exp2((_2898 * (-1.44269502162933349609375)) * (1.0 - _2900.w));
        float _2910 = log2(_2909);
        float _2926 = log2(_2631);
        _2723 = (exp2(_2926 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].x)) * _2900.x) / cbSceneParam._m0[78u].x)) + _2628;
        _2725 = (exp2(_2926 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].y)) * _2900.y) / cbSceneParam._m0[78u].y)) + _2629;
        _2727 = (exp2(_2926 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].z)) * _2900.z) / cbSceneParam._m0[78u].z)) + _2630;
        _2729 = _2909 * _2631;
    }
    else
    {
        _2723 = _2628;
        _2725 = _2629;
        _2727 = _2630;
        _2729 = _2631;
    }
    bool _2936;
    vec4 _2739;
    vec4 _2761;
    float _2763;
    float _2767;
    float _2768;
    float _2769;
    float _2770;
    bool _2780;
    for (;;)
    {
        _2739 = cbMatDynParam._m0[0u];
        float _2741 = roundEven(_2739.y);
        bool _2742 = _2741 == 3.0;
        float _2743 = log2(_2729);
        float _2750 = exp2(_2743 * cbSceneParam._m0[78u].x) * _2600;
        float _2751 = exp2(_2743 * cbSceneParam._m0[78u].y) * _2601;
        float _2752 = exp2(_2743 * cbSceneParam._m0[78u].z) * _2602;
        float _2759 = _653 + (-0.5);
        _2761 = cbMtdParam._m0[1u];
        _2763 = _2761.y * _2759;
        float _2766 = (_2741 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2767 = _2766 * (_2742 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2723)));
        _2768 = _2766 * (_2742 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2725)));
        _2769 = _2766 * (_2742 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2727)));
        _2770 = _2759 * 0.999000012874603271484375;
        _2780 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2780)
        {
            if ((cbInstanceData._m0[_721 + 7u].x + _2770) < 0.5)
            {
                _2936 = true;
                break;
            }
        }
        uint _2877 = _722 + uint(_2739.w);
        if ((cbInstanceData._m0[_2877].w < 1.0) && ((cbInstanceData._m0[_2877].w + _2770) < 0.5))
        {
            _2936 = true;
            break;
        }
        if ((_2763 + 1.0) < _2761.x)
        {
            _2936 = true;
            break;
        }
        _2936 = false;
        break;
    }
    float _3141;
    if (_2936)
    {
        discard_state = true;
        _3141 = 0.0;
    }
    else
    {
        _3141 = cbInstanceData._m0[_2603].w;
    }
    SV_Target.x = _2767;
    SV_Target.y = _2768;
    SV_Target.z = _2769;
    SV_Target.w = _3141;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2603].w;
    discard_exit();
}


