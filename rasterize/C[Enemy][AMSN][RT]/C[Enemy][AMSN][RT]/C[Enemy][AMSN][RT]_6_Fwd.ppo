#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1055;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _262 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _273 = exp2(log2(_262.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _274;
    float _276;
    float _278;
    if (_273)
    {
        _274 = cbMtdParam._m0[18u].x;
        _276 = cbMtdParam._m0[18u].y;
        _278 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _274 = cbMtdParam._m0[17u].x;
        _276 = cbMtdParam._m0[17u].y;
        _278 = cbMtdParam._m0[17u].z;
    }
    float _283;
    if (_273)
    {
        _283 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _283 = cbMtdParam._m0[19u].z;
    }
    float _289;
    float _291;
    if (_273)
    {
        _289 = cbMtdParam._m0[26u].x;
        _291 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _289 = cbMtdParam._m0[22u].x;
        _291 = cbMtdParam._m0[22u].y;
    }
    float _293 = _289 * TEXCOORD.x;
    float _294 = _291 * TEXCOORD.y;
    float _306 = floor(_283);
    vec4 _309 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _293) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _294) + cbTextureTilingScale._m0[6u].w, _306));
    vec4 _331 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _339 = (((_274 * cbMtdParam._m0[19u].w) * _309.x) * cbMtdParam._m0[9u].x) * _331.x;
    float _343 = (((_276 * cbMtdParam._m0[19u].w) * _309.y) * cbMtdParam._m0[9u].y) * _331.y;
    float _347 = (((_278 * cbMtdParam._m0[19u].w) * _309.z) * cbMtdParam._m0[9u].z) * _331.z;
    vec4 _359 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _363 = _359.z;
    vec4 _376 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _293) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _294) + cbTextureTilingScale._m0[8u].w, _306));
    float _181[2];
    float _182[2];
    _181[0u] = cbMtdParam._m0[25u].x;
    _182[0u] = cbMtdParam._m0[25u].y;
    _181[1u] = cbMtdParam._m0[25u].z;
    _182[1u] = cbMtdParam._m0[25u].w;
    float _390 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _393 = uint(int(isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0))));
    float _398 = _182[_393] + _376.x;
    vec4 _417 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _293) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _294) + cbTextureTilingScale._m0[7u].w, _306));
    float _424 = (_417.x * 2.0) + (-1.0);
    float _425 = (_417.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3421 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))));
    float _440 = (cbMtdParam._m0[20u].x * (((_363 * 2.0) * (_417.z + _181[_393])) - _363)) + _363;
    float _444 = (cbMtdParam._m0[20u].y * ((_359.x * 2.0) + (-1.0))) + _424;
    float _445 = (cbMtdParam._m0[20u].y * ((_359.y * 2.0) + (-1.0))) + _425;
    float _448 = fma(_431, _232, fma(_445, _224 * TANGENT.x, (_210 * _202) * _444));
    float _451 = fma(_431, _233, fma(_445, _224 * TANGENT.y, (_210 * _203) * _444));
    float _454 = fma(_431, _234, fma(_445, _224 * TANGENT.z, (_210 * _204) * _444));
    float _458 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _459 = _458 * _448;
    float _460 = _458 * _451;
    float _461 = _458 * _454;
    float _3432 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _462 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3454 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3465 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3476 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _466 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _482 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _534 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _524);
    float _535 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _524);
    float _536 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _524);
    float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
    float _541 = _534 * _540;
    float _542 = _535 * _540;
    float _543 = _536 * _540;
    float _549 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _550 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _552 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _554 = _552.w;
    float _573 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _576 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _579 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    vec4 _581 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _592 = (((_581.y - _462) + (_581.w * _462)) * cbMtdParam._m0[3u].x) + _462;
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _608 = (_605 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3487 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    vec4 _620 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _625 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _636 = (((_625.x - _466) + (_625.w * _466)) * cbMtdParam._m0[3u].x) + _466;
    float _649 = (cbMtdParam._m0[3u].x * (((_617 * _554) - _617) + _620.x)) + _617;
    float _650 = (cbMtdParam._m0[3u].x * (((_618 * _554) - _618) + _620.y)) + _618;
    float _651 = (cbMtdParam._m0[3u].x * (((_619 * _554) - _619) + _620.z)) + _619;
    float _652 = 1.0 - _636;
    float _653 = _652 * _649;
    float _654 = _652 * _650;
    float _655 = _652 * _651;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _636;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _636;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _636;
    float _663 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _549, cbSceneParam._m0[86u].y * _550));
    float _678 = _675.x * TEXCOORD_4;
    float _679 = dot(vec3(_459, _460, _461), vec3(_541, _542, _543));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _459) - _541;
    float _687 = (_682 * _460) - _542;
    float _688 = (_682 * _461) - _543;
    float _692 = abs(dot(vec3(_541, _542, _543), vec3(_459, _460, _461)));
    float _3520 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_592);
    float _707 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _713 = (1.0 - _707) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _714 = _707 * _694;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _783 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _787 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _812 = _742 + _459;
        float _813 = _746 + _460;
        float _814 = _750 + _461;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_459, _460, _461), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3568 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_459, _460, _461), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3601 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_459, _460, _461), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3634 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1095 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1099 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1103 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1126 = _742 + _459;
        float _1127 = _746 + _460;
        float _1128 = _750 + _461;
        float _1138 = fma(_1128, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126)) - _1095;
        float _1139 = fma(_1128, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126)) - _1099;
        float _1140 = fma(_1128, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126)) - _1103;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1095 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1099 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[35u].z) + ((((((_1103 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1194 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1161.x + (-0.5));
        float _1196 = _1194 * (_1161.y + (-0.5));
        float _1197 = _1194 * (_1161.z + (-0.5));
        float _1204 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1168.x + (-0.5));
        float _1206 = _1204 * (_1168.y + (-0.5));
        float _1207 = _1204 * (_1168.z + (-0.5));
        float _1214 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1175.x + (-0.5));
        float _1216 = _1214 * (_1175.y + (-0.5));
        float _1217 = _1214 * (_1175.z + (-0.5));
        float _1224 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1182.x + (-0.5));
        float _1226 = _1224 * (_1182.y + (-0.5));
        float _1227 = _1224 * (_1182.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_459, _460, _461), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3697 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1258 + 1.0))) + _1263) * _1228;
        float _1273 = _1196 * 0.5;
        float _1274 = _1206 * 0.5;
        float _1275 = _1216 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_459, _460, _461), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3730 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1300 + 1.0))) + _1305) * _1229;
        float _1315 = _1197 * 0.5;
        float _1316 = _1207 * 0.5;
        float _1317 = _1217 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_459, _460, _461), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3763 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1342 + 1.0))) + _1347) * _1230;
        _1364 = _1197;
        _1365 = _1196;
        _1366 = _1195;
        _1367 = _1207;
        _1368 = _1206;
        _1369 = _1205;
        _1370 = _1217;
        _1371 = _1216;
        _1372 = _1215;
        _1373 = _1230;
        _1374 = _1229;
        _1375 = _1228;
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1055;
        _1365 = _1055;
        _1366 = _1055;
        _1367 = _1055;
        _1368 = _1055;
        _1369 = _1055;
        _1370 = _1055;
        _1371 = _1055;
        _1372 = _1055;
        _1373 = _1055;
        _1374 = _1055;
        _1375 = _1055;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1068)) + _1068;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1411 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1414 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1417 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1388));
    float _1432 = _686 * 0.5;
    float _1433 = _687 * 0.5;
    float _1434 = _688 * 0.5;
    float _1435 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1438 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1441 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1475;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1448 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1452 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1456 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1463 = dot(vec4(cbModelParam._m0[39u]), vec4(_1432, _1433, _1434, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1486;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1477 = dot(vec4(cbModelParam._m0[40u]), vec4(_1432, _1433, _1434, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1490 = (_1486 * cbModelParam._m0[1u].x) + (_1475 * (1.0 - cbModelParam._m0[1u].x));
    float _1500 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _592);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1500 : min(cbModelParam._m0[25u].z, _1500));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1564 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1567 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1595;
        if (_1561 > 0.0)
        {
            _1595 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1595 = frontier_phi_22_20_ladder;
        }
        float _1799;
        if (_1564 > 0.0)
        {
            _1799 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1799 = frontier_phi_31_27_ladder;
        }
        float _2053;
        if (_1567 > 0.0)
        {
            _2053 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2053 = frontier_phi_43_38_ladder;
        }
        float _2055 = isnan(_1799) ? _1595 : (isnan(_1595) ? _1799 : min(_1595, _1799));
        float _2056 = isnan(_2053) ? _2055 : (isnan(_2055) ? _2053 : min(_2055, _2053));
        float _2060 = (_2056 * _1561) + _1550;
        float _2061 = (_2056 * _1564) + _1554;
        float _2062 = (_2056 * _1567) + _1558;
        float _2063 = _2056 * 9.9999997473787516355514526367188e-05;
        float _2065 = (-1.0) - _2063;
        float _2067 = _2063 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2062 > _2067) || ((_2062 < _2065) || ((_2061 > _2067) || ((_2061 < _2065) || ((_2060 < _2065) || (_2060 > _2067))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2062, cbModelParam._m0[9u].z, fma(_2061, cbModelParam._m0[9u].y, _2060 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2062, cbModelParam._m0[10u].z, fma(_2061, cbModelParam._m0[10u].y, _2060 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2062, cbModelParam._m0[11u].z, fma(_2061, cbModelParam._m0[11u].y, _2060 * cbModelParam._m0[11u].x))), _1501);
            frontier_phi_21_43_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_21_43_ladder_2;
        _1585 = frontier_phi_21_43_ladder_1;
        _1587 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1501);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1591 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _592);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1591 : min(cbModelParam._m0[25u].w, _1591));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1645 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1649 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1653 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1656 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1659 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1662 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1804;
        if (_1656 > 0.0)
        {
            _1804 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1804 = frontier_phi_33_29_ladder;
        }
        float _2080;
        if (_1659 > 0.0)
        {
            _2080 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2080 = frontier_phi_45_40_ladder;
        }
        float _2293;
        if (_1662 > 0.0)
        {
            _2293 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2293 = frontier_phi_54_51_ladder;
        }
        float _2295 = isnan(_2080) ? _1804 : (isnan(_1804) ? _2080 : min(_1804, _2080));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1656) + _1645;
        float _2301 = (_2296 * _1659) + _1649;
        float _2302 = (_2296 * _1662) + _1653;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2303;
        float _2306 = _2303 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2302 > _2306) || ((_2302 < _2304) || ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 < _2304) || (_2300 > _2306))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2302, cbModelParam._m0[17u].z, fma(_2301, cbModelParam._m0[17u].y, _2300 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2302, cbModelParam._m0[18u].z, fma(_2301, cbModelParam._m0[18u].y, _2300 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2302, cbModelParam._m0[19u].z, fma(_2301, cbModelParam._m0[19u].y, _2300 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_30_54_ladder = _2518.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2518.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2518.x * cbModelParam._m0[1u].z;
        }
        _1681 = frontier_phi_30_54_ladder_2;
        _1683 = frontier_phi_30_54_ladder;
        _1685 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1592);
        _1681 = _1665.x * cbModelParam._m0[1u].z;
        _1683 = _1665.y * cbModelParam._m0[1u].z;
        _1685 = _1665.z * cbModelParam._m0[1u].z;
    }
    float _1698 = (((_713 * _663) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1681 - _1583)) + _1583);
    float _1700 = (((_713 * _665) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1683 - _1585)) + _1585);
    float _1702 = (((_713 * _666) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1685 - _1587)) + _1587);
    float _1705 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, _1698 * cbSceneParam._m0[91u].x));
    uvec4 _1721 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1723 = _1721.x * 14u;
    uint _1724 = _1723 + 13u;
    float _1731 = _678 + (-1.0);
    float _1736 = (cbLight._m0[_1724].x * _1731) + 1.0;
    float _1737 = (cbLight._m0[_1724].y * _1731) + 1.0;
    float _1738 = (cbLight._m0[_1724].z * _1731) + 1.0;
    float _1739 = (cbLight._m0[_1724].w * _1731) + 1.0;
    uint _1740 = _1723 + 5u;
    float _1746 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1750 = _1723 + 4u;
    float _1757 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1761 = _1723 | 1u;
    float _1772 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_459, _460, _461));
    float _1775 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_459, _460, _461));
    float _3899 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _3910 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1780 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
    float _1782 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.3183098733425140380859375;
    float _1789 = ((cbLight._m0[_1740].x * _1746) * _1782) + ((cbLight._m0[_1750].x * _1757) * _1780);
    float _1790 = ((_1746 * cbLight._m0[_1740].y) * _1782) + ((_1757 * cbLight._m0[_1750].y) * _1780);
    float _1791 = ((_1746 * cbLight._m0[_1740].z) * _1782) + ((_1757 * cbLight._m0[_1750].z) * _1780);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1723 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1789;
        _1811 = _1790;
        _1813 = _1791;
    }
    else
    {
        uint _1817 = _1723 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1723 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3921 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1836 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1789;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2024 = _1723 + 7u;
        float _2040 = (dot(vec3(cbLight._m0[_1723 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _2041 = _2040 * _2040;
        float _3937 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2043 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1854 = (((cbLight._m0[_2024].x * 0.3183098733425140380859375) * _2042) * _2043) + _1809;
        _1856 = (((cbLight._m0[_2024].y * 0.3183098733425140380859375) * _2042) * _2043) + _1811;
        _1858 = (((cbLight._m0[_2024].z * 0.3183098733425140380859375) * _2042) * _2043) + _1813;
    }
    uint _1861 = _1723 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _592) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1723].x + _541;
    float _1877 = cbLight._m0[_1723].y + _542;
    float _1878 = cbLight._m0[_1723].z + _543;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1723].xyz));
    float _3953 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _1890 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1891 = dot(vec3(_459, _460, _461), vec3(_1883, _1884, _1885));
    float _3975 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1883, _1884, _1885));
    float _3986 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1911 = exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0);
    float _1912 = 0.959999978542327880859375 - _660;
    float _1914 = 0.959999978542327880859375 - _661;
    float _1915 = 0.959999978542327880859375 - _662;
    float _1922 = 1.0 - _1875;
    float _1933 = (0.5 / (((_1890 * ((_1889 * _1922) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1922) + _1875) * _1889))) * _1889;
    float _3997 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1946 = _1723 + 9u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _592) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1761].x + _541;
    float _1960 = cbLight._m0[_1761].y + _542;
    float _1961 = cbLight._m0[_1761].z + _543;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1761].xyz));
    float _4008 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1973 = dot(vec3(_459, _460, _461), vec3(_1966, _1967, _1968));
    float _4019 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1966, _1967, _1968));
    float _4030 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1958 * _1958;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1992 = exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0);
    float _1999 = 1.0 - _1958;
    float _2009 = (0.5 / (((_1890 * ((_1972 * _1999) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1999) + _1958) * _1972))) * _1972;
    float _4041 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    float _2021 = (((((_1992 * _1912) + _663) * cbLight._m0[_1946].x) * _2011) * _1746) + (((((_1911 * _1912) + _663) * cbLight._m0[_1861].x) * _1935) * _1757);
    float _2022 = (((((_1992 * _1914) + _665) * cbLight._m0[_1946].y) * _2011) * _1746) + (((((_1911 * _1914) + _665) * cbLight._m0[_1861].y) * _1935) * _1757);
    float _2023 = (((((_1992 * _1915) + _666) * cbLight._m0[_1946].z) * _2011) * _1746) + (((((_1911 * _1915) + _666) * cbLight._m0[_1861].z) * _1935) * _1757);
    float _2085;
    float _2087;
    float _2089;
    if (_1798)
    {
        _2085 = _2021;
        _2087 = _2022;
        _2089 = _2023;
    }
    else
    {
        uint _2091 = _1723 + 2u;
        uint _2095 = _1723 + 10u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _592) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _541;
        float _2112 = cbLight._m0[_2091].y + _542;
        float _2113 = cbLight._m0[_2091].z + _543;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2091].xyz));
        float _4052 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2125 = dot(vec3(_459, _460, _461), vec3(_2118, _2119, _2120));
        float _4063 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _4074 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0);
        float _2151 = 1.0 - _2110;
        float _2161 = (0.5 / (((_1890 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2151) + _2110) * _2124))) * _2124;
        float _4085 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2085 = (((((_2144 * _1912) + _663) * cbLight._m0[_2095].x) * _2163) * _2164) + _2021;
        _2087 = (((((_2144 * _1914) + _665) * cbLight._m0[_2095].y) * _2163) * _2164) + _2022;
        _2089 = (((((_2144 * _1915) + _666) * cbLight._m0[_2095].z) * _2163) * _2164) + _2023;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1816)
    {
        _2199 = _2085;
        _2201 = _2087;
        _2203 = _2089;
    }
    else
    {
        uint _2210 = _1723 + 3u;
        uint _2214 = _1723 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _592) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _541;
        float _2231 = cbLight._m0[_2210].y + _542;
        float _2232 = cbLight._m0[_2210].z + _543;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2210].xyz));
        float _4101 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2244 = dot(vec3(_459, _460, _461), vec3(_2237, _2238, _2239));
        float _4112 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4123 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
        float _2270 = 1.0 - _2229;
        float _2280 = (0.5 / (((_1890 * ((_2243 * _2270) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2270) + _2229) * _2243))) * _2243;
        float _4134 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2199 = (((((_2263 * _1912) + _663) * cbLight._m0[_2214].x) * _2282) * _2283) + _2085;
        _2201 = (((((_2263 * _1914) + _665) * cbLight._m0[_2214].y) * _2282) * _2283) + _2087;
        _2203 = (((((_2263 * _1915) + _666) * cbLight._m0[_2214].z) * _2282) * _2283) + _2089;
    }
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_1721.y == 0u)
    {
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2358;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2358;
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2358;
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.x;
        uint _2385 = uint((float(_2373.y) * floor(float(uint(cbSceneParam._m0[85u].y * _550) / _2374))) + floor(float(uint(cbSceneParam._m0[85u].x * _549) / _2374)));
        float _2395 = (log2(_2361 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2396 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        uint _2399 = uint(isnan(14.0) ? _2396 : (isnan(_2396) ? 14.0 : min(_2396, 14.0)));
        uvec4 _2404 = texelFetch(g_lightClusterGridBuffer, int(((_2399 << 2u) + (_2385 << 6u)) >> 2u));
        uint _2405 = _2404.x;
        uint _2406 = _2373.z;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        if (((((1u << ((_2406 >> 4u) & 15u)) + 4294967295u) & _2405) == 0u) || ((_2406 & 240u) == 0u))
        {
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
        }
        else
        {
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            uint _2673 = 0u;
            uint _2682;
            bool _2683;
            for (;;)
            {
                _2682 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                _2683 = _2682 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2683)
                {
                    frontier_phi_69_pred = _2672;
                    frontier_phi_69_pred_1 = _2671;
                    frontier_phi_69_pred_2 = _2670;
                    frontier_phi_69_pred_3 = _2668;
                    frontier_phi_69_pred_4 = _2667;
                    frontier_phi_69_pred_5 = _2669;
                }
                else
                {
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    uint _2797;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2682;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    for (;;)
                    {
                        uint _2801 = uint(findLSB(_2797)) + (_2673 << 5u);
                        uint _2798 = (_2797 + 4294967295u) & _2797;
                        uint _2803 = _2801 * 48u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2823 = (_2801 * 48u) + 4u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2842 = (_2801 * 48u) + 8u;
                        vec3 _2853 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x));
                        float _2857 = _2817.x - _2359;
                        float _2858 = _2817.y - _2360;
                        float _2859 = _2817.z - _2361;
                        float _2860 = dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859));
                        float _2863 = inversesqrt(_2860);
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2867 = dot(vec3(_573, _576, _579), vec3(_2864, _2865, _2866));
                        float _2872 = 1.0 - (_2860 * _2817.w);
                        float _4160 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2873 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2874 = sqrt(_2860) * _2836.w;
                        float _2877 = 1.39999997615814208984375 / (_2874 + 1.39999997615814208984375);
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2867) + _2878;
                        float _2884 = _2874 * _2874;
                        float _2888 = ((isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))) * _2873) / ((_2884 * 0.699999988079071044921875) + 1.0);
                        float _2892 = (-0.0) - _2359;
                        float _2893 = (-0.0) - _2360;
                        float _2894 = (-0.0) - _2361;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2899 = _2898 * _2892;
                        float _2900 = _2898 * _2893;
                        float _2901 = _2898 * _2894;
                        float _2909 = exp2(log2(1.0 / ((_2884 * 3.5) + 5.0)) * 0.25);
                        float _2910 = 1.0 - _694;
                        float _2917 = sqrt(1.0 - ((1.0 - (_2910 * _2910)) * (1.0 - (_2909 * _2909))));
                        float _2918 = _2917 * _2917;
                        float _2919 = _2918 * _2918;
                        float _2920 = _2899 + _2864;
                        float _2921 = _2900 + _2865;
                        float _2922 = _2901 + _2866;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2930 = dot(vec3(_573, _576, _579), vec3(_2899, _2900, _2901));
                        float _4176 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2934 = dot(vec3(_573, _576, _579), vec3(_2926 * _2920, _2926 * _2921, _2926 * _2922));
                        float _4187 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2941 = ((_2937 * _2937) * (_2919 + (-1.0))) + 1.0;
                        float _2942 = _2877 * _2918;
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2867) + _2943;
                        float _4198 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2948 = 1.0 - _2918;
                        float _2958 = (0.5 / (((_2947 * ((_2933 * _2948) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _2948) + _2918) * _2933))) * _2947;
                        float _4209 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2969 = (((_2919 * 3.1415927410125732421875) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) / ((_2941 * _2941) * ((_2884 * 2.1991131305694580078125) + 3.141590118408203125))) * _2873;
                        _2726 = (_2888 * _2836.x) + _2794;
                        _2727 = (_2888 * _2836.y) + _2795;
                        _2728 = (_2888 * _2836.z) + _2796;
                        _2723 = (_2969 * _2853.x) + _2791;
                        _2724 = (_2969 * _2853.y) + _2792;
                        _2725 = (_2969 * _2853.z) + _2793;
                        if (_2798 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2798;
                        }
                    }
                    frontier_phi_69_pred = _2728;
                    frontier_phi_69_pred_1 = _2727;
                    frontier_phi_69_pred_2 = _2726;
                    frontier_phi_69_pred_3 = _2724;
                    frontier_phi_69_pred_4 = _2723;
                    frontier_phi_69_pred_5 = _2725;
                }
                _2534 = frontier_phi_69_pred;
                _2532 = frontier_phi_69_pred_1;
                _2530 = frontier_phi_69_pred_2;
                _2526 = frontier_phi_69_pred_3;
                _2524 = frontier_phi_69_pred_4;
                _2528 = frontier_phi_69_pred_5;
                uint _2674 = _2673 + 1u;
                if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2667 = _2524;
                    _2668 = _2526;
                    _2669 = _2528;
                    _2670 = _2530;
                    _2671 = _2532;
                    _2672 = _2534;
                    _2673 = _2674;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
        }
        uvec4 _2537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2538 = _2537.z;
        uint _2540 = (_2538 >> 8u) & 15u;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((4294967295u << _2540) & _2405) == 0u)
        {
            _2635 = _2523;
            _2637 = _2525;
            _2639 = _2527;
            _2641 = _2529;
            _2643 = _2531;
            _2645 = _2533;
        }
        else
        {
            float _2660 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
            float _2661 = _2660 * _2359;
            float _2662 = _2660 * _2360;
            float _2663 = _2660 * _2361;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2540 < ((_2538 >> 12u) & 15u))
            {
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2774 = _2523;
                float _2775 = _2525;
                float _2776 = _2527;
                float _2777 = _2529;
                float _2778 = _2531;
                float _2779 = _2533;
                uint _2780 = _2540;
                uint _2789;
                bool _2790;
                for (;;)
                {
                    _2789 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                    _2790 = _2789 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2790)
                    {
                        frontier_phi_75_pred = _2776;
                        frontier_phi_75_pred_1 = _2775;
                        frontier_phi_75_pred_2 = _2774;
                        frontier_phi_75_pred_3 = _2779;
                        frontier_phi_75_pred_4 = _2778;
                        frontier_phi_75_pred_5 = _2777;
                    }
                    else
                    {
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        uint _2993 = _2789;
                        uint _2994;
                        vec4 _3019;
                        float _3020;
                        vec4 _3035;
                        vec3 _3047;
                        vec4 _3063;
                        vec4 _3078;
                        float _3125;
                        bool _3126;
                        for (;;)
                        {
                            uint _3004 = ((_2780 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2993));
                            _2994 = (_2993 + 4294967295u) & _2993;
                            uint _3006 = _3004 * 40u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3020 = _3019.w;
                            uint _3022 = (_3004 * 40u) + 4u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3037 = (_3004 * 40u) + 8u;
                            _3047 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x));
                            uint _3050 = (_3004 * 40u) + 16u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3065 = (_3004 * 40u) + 20u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3081 = (_3004 * 40u) + 24u;
                            vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3100 = (_3004 * 40u) + 28u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3125 = fma(_2361, _3113.z, fma(_2360, _3113.y, _3113.x * _2359)) + _3113.w;
                            _3126 = !((fma(_2361, _3094.z, fma(_2360, _3094.y, _3094.x * _2359)) + _3094.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3126)
                            {
                                float _3153 = _3019.x - _2359;
                                float _3154 = _3019.y - _2360;
                                float _3155 = _3019.z - _2361;
                                float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                                float _3159 = inversesqrt(_3156);
                                float _3160 = _3159 * _3153;
                                float _3161 = _3159 * _3154;
                                float _3162 = _3159 * _3155;
                                float _3166 = 1.0 - (_3156 / (_3020 * _3020));
                                float _4220 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3171 = sqrt(_3156) * _3035.w;
                                float _3173 = 1.39999997615814208984375 / (_3171 + 1.39999997615814208984375);
                                float _3174 = _3173 * _3173;
                                float _3177 = ((1.0 - _3174) * dot(vec3(_3160, _3161, _3162), vec3(_573, _576, _579))) + _3174;
                                float _3180 = _3171 * _3171;
                                float _3184 = (fma(_2361, _3063.z, fma(_2360, _3063.y, _3063.x * _2359)) + _3063.w) / _3125;
                                float _3185 = (fma(_2361, _3078.z, fma(_2360, _3078.y, _3078.x * _2359)) + _3078.w) / _3125;
                                float _3189 = 1.0 - dot(vec2(_3184, _3185), vec2(_3184, _3185));
                                float _4236 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3191 = _3190 * (((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3167) / ((_3180 * 0.699999988079071044921875) + 1.0));
                                float _3203 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                                float _3204 = 1.0 - _694;
                                float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                                float _3212 = _3211 * _3211;
                                float _3213 = _3212 * _3212;
                                float _3214 = _3160 - _2661;
                                float _3215 = _3161 - _2662;
                                float _3216 = _3162 - _2663;
                                float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                                float _3224 = dot(vec3(_573, _576, _579), vec3((-0.0) - _2661, (-0.0) - _2662, (-0.0) - _2663));
                                float _4247 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3227 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3228 = dot(vec3(_573, _576, _579), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                                float _4258 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                                float _3236 = _3173 * _3212;
                                float _3237 = _3236 * _3236;
                                float _3243 = ((1.0 - _3237) * dot(vec3(_573, _576, _579), vec3(_3160, _3161, _3162))) + _3237;
                                float _4269 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3245 = 1.0 - _3212;
                                float _3255 = (0.5 / (((_3244 * ((_3227 * _3245) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3244 * _3245) + _3212) * _3227))) * _3244;
                                float _4280 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3265 = (_3190 * _3167) * (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) / ((_3235 * _3235) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3265 * _3047.z;
                                frontier_phi_81_pred_1 = _3265 * _3047.y;
                                frontier_phi_81_pred_2 = _3265 * _3047.x;
                                frontier_phi_81_pred_3 = _3191 * _3035.z;
                                frontier_phi_81_pred_4 = _3191 * _3035.y;
                                frontier_phi_81_pred_5 = _3191 * _3035.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3271 = frontier_phi_81_pred;
                            _3270 = frontier_phi_81_pred_1;
                            _3269 = frontier_phi_81_pred_2;
                            _3274 = frontier_phi_81_pred_3;
                            _3273 = frontier_phi_81_pred_4;
                            _3272 = frontier_phi_81_pred_5;
                            _2977 = _3272 + _2990;
                            _2978 = _3273 + _2991;
                            _2979 = _3274 + _2992;
                            _2974 = _3269 + _2987;
                            _2975 = _3270 + _2988;
                            _2976 = _3271 + _2989;
                            if (_2994 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2994;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2976;
                        frontier_phi_75_pred_1 = _2975;
                        frontier_phi_75_pred_2 = _2974;
                        frontier_phi_75_pred_3 = _2979;
                        frontier_phi_75_pred_4 = _2978;
                        frontier_phi_75_pred_5 = _2977;
                    }
                    _2640 = frontier_phi_75_pred;
                    _2638 = frontier_phi_75_pred_1;
                    _2636 = frontier_phi_75_pred_2;
                    _2646 = frontier_phi_75_pred_3;
                    _2644 = frontier_phi_75_pred_4;
                    _2642 = frontier_phi_75_pred_5;
                    uint _2781 = _2780 + 1u;
                    if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2774 = _2636;
                        _2775 = _2638;
                        _2776 = _2640;
                        _2777 = _2642;
                        _2778 = _2644;
                        _2779 = _2646;
                        _2780 = _2781;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2644;
                frontier_phi_63_64_ladder_1 = _2642;
                frontier_phi_63_64_ladder_2 = _2640;
                frontier_phi_63_64_ladder_3 = _2646;
                frontier_phi_63_64_ladder_4 = _2638;
                frontier_phi_63_64_ladder_5 = _2636;
            }
            else
            {
                frontier_phi_63_64_ladder = _2531;
                frontier_phi_63_64_ladder_1 = _2529;
                frontier_phi_63_64_ladder_2 = _2527;
                frontier_phi_63_64_ladder_3 = _2533;
                frontier_phi_63_64_ladder_4 = _2525;
                frontier_phi_63_64_ladder_5 = _2523;
            }
            _2635 = frontier_phi_63_64_ladder_5;
            _2637 = frontier_phi_63_64_ladder_4;
            _2639 = frontier_phi_63_64_ladder_2;
            _2641 = frontier_phi_63_64_ladder_1;
            _2643 = frontier_phi_63_64_ladder;
            _2645 = frontier_phi_63_64_ladder_3;
        }
        float _2650 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2417 = (_2650 * _2641) + _1854;
        _2419 = (_2650 * _2643) + _1856;
        _2421 = (_2650 * _2645) + _1858;
        _2423 = ((_2635 * _663) * _2650) + _2199;
        _2425 = ((_2637 * _665) * _2650) + _2201;
        _2427 = ((_2639 * _666) * _2650) + _2203;
    }
    else
    {
        _2417 = _1854;
        _2419 = _1856;
        _2421 = _1858;
        _2423 = _2199;
        _2425 = _2201;
        _2427 = _2203;
    }
    vec4 _2433 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4296 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4307 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4318 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2457 = (((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2417 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _678))) + ((_2423 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1490)) * cbPerFrame._m0[3u].x)) + (_2433.x * cbMtdParam._m0[3u].x);
    float _2459 = ((_2433.y * cbMtdParam._m0[3u].x) + ((_2425 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1490)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2419 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _678)));
    float _2461 = ((_2433.z * cbMtdParam._m0[3u].x) + ((_2427 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1490)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2421 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _678)));
    uint _2465 = _605 + 6u;
    float _2473 = _549 / cbSceneParam._m0[86u].x;
    float _2474 = _550 / cbSceneParam._m0[86u].y;
    vec4 _2488 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, (log2((isnan(cbSceneParam._m0[77u].w) ? _482 : (isnan(_482) ? cbSceneParam._m0[77u].w : min(_482, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2490 = _2488.x;
    float _2491 = _2488.y;
    float _2492 = _2488.z;
    float _2493 = _2488.w;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_482 > cbSceneParam._m0[78u].w)
    {
        float _2548 = isnan(_482) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _482 : min(cbSceneParam._m0[80u].w, _482));
        float _2549 = _2548 / _482;
        float _2560 = _2549 * _534;
        float _2561 = _535 * _2549;
        float _2562 = (-0.0) - _2561;
        float _2563 = _2549 * _536;
        float _2565 = (cbSceneParam._m0[77u].w * _2562) / _2548;
        float _2566 = _2565 + cbSceneParam._m0[79u].w;
        float _2567 = cbSceneParam._m0[79u].w - _2561;
        float _2573 = sqrt(((_2560 * _2560) + (_2561 * _2561)) + (_2563 * _2563));
        float _2576 = (1.0 - (cbSceneParam._m0[77u].w / _2548)) * _2573;
        float _2581 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2583 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2736;
        if (abs((_2562 - _2565) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2736 = ((((_2566 > 0.0) ? exp2(_2581 * _2566) : (2.0 - exp2(_2583 * _2566))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2576;
        }
        else
        {
            float _2696 = 1.0 / cbSceneParam._m0[80u].x;
            float _2697 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : max(_2566, _2567));
            float _2698 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : min(_2566, _2567));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            _2736 = ((abs(_2573 / _2562) * cbSceneParam._m0[80u].y) * ((((_2707 - _2708) * 2.0) - ((exp2(_2581 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0)))) - exp2(_2581 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))))) * _2696)) - ((exp2(_2583 * _2707) - exp2(_2583 * _2708)) * _2696))) + (_2576 * cbSceneParam._m0[80u].z);
        }
        vec4 _2738 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, 1.0), 0.0);
        float _2747 = exp2((_2736 * (-1.44269502162933349609375)) * (1.0 - _2738.w));
        float _2748 = log2(_2747);
        float _2764 = log2(_2493);
        _2585 = (exp2(_2764 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].x)) * _2738.x) / cbSceneParam._m0[78u].x)) + _2490;
        _2587 = (exp2(_2764 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].y)) * _2738.y) / cbSceneParam._m0[78u].y)) + _2491;
        _2589 = (exp2(_2764 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].z)) * _2738.z) / cbSceneParam._m0[78u].z)) + _2492;
        _2591 = _2747 * _2493;
    }
    else
    {
        _2585 = _2490;
        _2587 = _2491;
        _2589 = _2492;
        _2591 = _2493;
    }
    float _2603 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2604 = _2603 == 3.0;
    float _2605 = log2(_2591);
    float _2612 = exp2(_2605 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0)));
    float _2613 = exp2(_2605 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0)));
    float _2614 = exp2(_2605 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0)));
    float _2623 = (_2603 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2623 * (_2604 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.y = _2623 * (_2604 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.z = _2623 * (_2604 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.w = cbInstanceData._m0[_2465].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2465].w;
}


