#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1167;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[14u].x;
    _194[0u] = cbMtdParam._m0[14u].y;
    _195[0u] = cbMtdParam._m0[14u].z;
    _193[1u] = cbMtdParam._m0[15u].x;
    _194[1u] = cbMtdParam._m0[15u].y;
    _195[1u] = cbMtdParam._m0[15u].z;
    _193[2u] = cbMtdParam._m0[16u].x;
    _194[2u] = cbMtdParam._m0[16u].y;
    _195[2u] = cbMtdParam._m0[16u].z;
    _193[3u] = cbMtdParam._m0[11u].x;
    _194[3u] = cbMtdParam._m0[11u].y;
    _195[3u] = cbMtdParam._m0[11u].z;
    _193[4u] = cbMtdParam._m0[12u].x;
    _194[4u] = cbMtdParam._m0[12u].y;
    _195[4u] = cbMtdParam._m0[12u].z;
    _193[5u] = cbMtdParam._m0[13u].x;
    _194[5u] = cbMtdParam._m0[13u].y;
    _195[5u] = cbMtdParam._m0[13u].z;
    vec4 _354 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _357 = _354.y;
    float _360 = (_354.x + (-0.02500000037252902984619140625)) * 8.0;
    float _362 = roundEven(_360);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    uint _366 = uint(int(isnan(5.0) ? _363 : (isnan(_363) ? 5.0 : min(_363, 5.0))));
    float _383 = roundEven(5.0 - _360);
    float _384 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = isnan(4.0) ? _384 : (isnan(_384) ? 4.0 : min(_384, 4.0));
    float _391;
    float _393;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _391 = cbMtdParam._m0[26u].x;
        _393 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _391 = cbMtdParam._m0[22u].x;
        _393 = cbMtdParam._m0[22u].y;
    }
    float _395 = _391 * TEXCOORD.x;
    float _396 = _393 * TEXCOORD.y;
    float _407 = floor(_385);
    vec4 _410 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _395) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _396) + cbTextureTilingScale._m0[6u].w, _407));
    vec4 _432 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _440 = ((((((_193[_366] - cbMtdParam._m0[18u].x) * _357) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _410.x) * cbMtdParam._m0[9u].x) * _432.x;
    float _444 = ((((((_194[_366] - cbMtdParam._m0[18u].y) * _357) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _410.y) * cbMtdParam._m0[9u].y) * _432.y;
    float _448 = ((((((_195[_366] - cbMtdParam._m0[18u].z) * _357) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _410.z) * cbMtdParam._m0[9u].z) * _432.z;
    vec4 _460 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _464 = _460.z;
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[22u].z;
    _189[0u] = cbMtdParam._m0[22u].w;
    _188[1u] = cbMtdParam._m0[23u].z;
    _189[1u] = cbMtdParam._m0[23u].w;
    _188[2u] = cbMtdParam._m0[24u].x;
    _189[2u] = cbMtdParam._m0[24u].y;
    _188[3u] = cbMtdParam._m0[24u].z;
    _189[3u] = cbMtdParam._m0[24u].w;
    _188[4u] = cbMtdParam._m0[23u].x;
    _189[4u] = cbMtdParam._m0[23u].y;
    float _508 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    uint _510 = uint(int(isnan(4.0) ? _508 : (isnan(_508) ? 4.0 : min(_508, 4.0))));
    float _515 = _189[_510] + texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _395) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _396) + cbTextureTilingScale._m0[8u].w, _407)).x;
    vec4 _534 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _395) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _396) + cbTextureTilingScale._m0[7u].w, _407));
    float _541 = (_534.x * 2.0) + (-1.0);
    float _542 = (_534.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3826 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))));
    float _558 = (cbMtdParam._m0[20u].x * (((_464 * 2.0) * (_534.z + _188[_510])) - _464)) + _464;
    float _562 = (cbMtdParam._m0[20u].y * ((_460.x * 2.0) + (-1.0))) + _541;
    float _563 = (cbMtdParam._m0[20u].y * ((_460.y * 2.0) + (-1.0))) + _542;
    float _566 = fma(_549, _245, fma(_563, _237 * TANGENT.x, (_223 * _215) * _562));
    float _569 = fma(_549, _246, fma(_563, _237 * TANGENT.y, (_223 * _216) * _562));
    float _572 = fma(_549, _247, fma(_563, _237 * TANGENT.z, (_223 * _217) * _562));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3837 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _580 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3859 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3870 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3881 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _584 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _669 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _671 = _669.w;
    float _689 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _692 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _695 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    vec4 _697 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = (((_697.y - _580) + (_697.w * _580)) * cbMtdParam._m0[3u].x) + _580;
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _723 = (_721 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3892 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    vec4 _735 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _740 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = (((_740.x - _584) + (_740.w * _584)) * cbMtdParam._m0[3u].x) + _584;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _671) - _732) + _735.x)) + _732;
    float _765 = (cbMtdParam._m0[3u].x * (((_733 * _671) - _733) + _735.y)) + _733;
    float _766 = (cbMtdParam._m0[3u].x * (((_734 * _671) - _734) + _735.z)) + _734;
    float _767 = 1.0 - _751;
    float _768 = _767 * _764;
    float _769 = _767 * _765;
    float _770 = _767 * _766;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _751;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _751;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _751;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _793 = _790.x * TEXCOORD_4;
    float _794 = dot(vec3(_577, _578, _579), vec3(_658, _659, _660));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _577) - _658;
    float _802 = (_797 * _578) - _659;
    float _803 = (_797 * _579) - _660;
    float _807 = abs(dot(vec3(_658, _659, _660), vec3(_577, _578, _579)));
    float _3925 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_708);
    float _820 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _826 = (1.0 - _820) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _827 = _820 * _809;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _895 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _899 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _924 = _855 + _577;
        float _925 = _859 + _578;
        float _926 = _863 + _579;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_577, _578, _579), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3973 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_577, _578, _579), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _4006 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_577, _578, _579), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4039 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1211 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1215 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1238 = _855 + _577;
        float _1239 = _859 + _578;
        float _1240 = _863 + _579;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_577, _578, _579), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4102 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_577, _578, _579), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4135 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_577, _578, _579), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4168 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1167;
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1179)) + _1179;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1180)) + _1180;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1181)) + _1181;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _801 * 0.5;
    float _1545 = _802 * 0.5;
    float _1546 = _803 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1660 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1664 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1668 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1671 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1674 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1677 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1705;
        if (_1671 > 0.0)
        {
            _1705 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1705 = frontier_phi_18_16_ladder;
        }
        float _1876;
        if (_1674 > 0.0)
        {
            _1876 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1876 = frontier_phi_27_23_ladder;
        }
        float _2171;
        if (_1677 > 0.0)
        {
            _2171 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2171 = frontier_phi_39_34_ladder;
        }
        float _2173 = isnan(_1876) ? _1705 : (isnan(_1705) ? _1876 : min(_1705, _1876));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1671) + _1660;
        float _2179 = (_2174 * _1674) + _1664;
        float _2180 = (_2174 * _1677) + _1668;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2183 = (-1.0) - _2181;
        float _2185 = _2181 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2180 > _2185) || ((_2180 < _2183) || ((_2179 > _2185) || ((_2179 < _2183) || ((_2178 < _2183) || (_2178 > _2185))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2180, cbModelParam._m0[9u].z, fma(_2179, cbModelParam._m0[9u].y, _2178 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2180, cbModelParam._m0[10u].z, fma(_2179, cbModelParam._m0[10u].y, _2178 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2180, cbModelParam._m0[11u].z, fma(_2179, cbModelParam._m0[11u].y, _2178 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_17_39_ladder = _2325.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2325.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2325.x * cbModelParam._m0[1u].y;
        }
        _1693 = frontier_phi_17_39_ladder_2;
        _1695 = frontier_phi_17_39_ladder_1;
        _1697 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1613);
        _1693 = _1681.x * cbModelParam._m0[1u].y;
        _1695 = _1681.y * cbModelParam._m0[1u].y;
        _1697 = _1681.z * cbModelParam._m0[1u].y;
    }
    float _1701 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1701 : min(cbModelParam._m0[25u].w, _1701));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1755 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1759 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1763 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1766 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1769 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1772 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1881;
        if (_1766 > 0.0)
        {
            _1881 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1881 = frontier_phi_29_25_ladder;
        }
        float _2198;
        if (_1769 > 0.0)
        {
            _2198 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2198 = frontier_phi_41_36_ladder;
        }
        float _2536;
        if (_1772 > 0.0)
        {
            _2536 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2536 = frontier_phi_51_48_ladder;
        }
        float _2538 = isnan(_2198) ? _1881 : (isnan(_1881) ? _2198 : min(_1881, _2198));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _1766) + _1755;
        float _2544 = (_2539 * _1769) + _1759;
        float _2545 = (_2539 * _1772) + _1763;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2546;
        float _2549 = _2546 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2545 > _2549) || ((_2545 < _2547) || ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 < _2547) || (_2543 > _2549))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2545, cbModelParam._m0[17u].z, fma(_2544, cbModelParam._m0[17u].y, _2543 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2545, cbModelParam._m0[18u].z, fma(_2544, cbModelParam._m0[18u].y, _2543 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2545, cbModelParam._m0[19u].z, fma(_2544, cbModelParam._m0[19u].y, _2543 * cbModelParam._m0[19u].x))), _1702);
            frontier_phi_26_51_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2667.x * cbModelParam._m0[1u].z;
        }
        _1791 = frontier_phi_26_51_ladder_2;
        _1793 = frontier_phi_26_51_ladder_1;
        _1795 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1702);
        _1791 = _1775.x * cbModelParam._m0[1u].z;
        _1793 = _1775.y * cbModelParam._m0[1u].z;
        _1795 = _1775.z * cbModelParam._m0[1u].z;
    }
    float _1808 = (((_826 * _778) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1810 = (((_826 * _780) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1812 = (((_826 * _781) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1795 - _1697)) + _1697);
    float _1815 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1808 * cbSceneParam._m0[91u].x));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1868 = _1855 / _1867;
    float _1869 = _1859 / _1867;
    float _1870 = _1863 / _1867;
    float _2017;
    float _2018;
    float _2019;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1897 = ((uint(_1870 > cbSceneParam._m0[59u].y) + uint(_1870 > cbSceneParam._m0[59u].x)) + uint(_1870 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1898 = _1897 + 43u;
        uint _1906 = _1897 + 44u;
        uint _1914 = _1897 + 45u;
        uint _1922 = _1897 + 46u;
        float _1933 = fma(_1867, cbSceneParam._m0[_1898].w, fma(_1863, cbSceneParam._m0[_1898].z, fma(_1859, cbSceneParam._m0[_1898].y, _1855 * cbSceneParam._m0[_1898].x)));
        float _1937 = fma(_1867, cbSceneParam._m0[_1906].w, fma(_1863, cbSceneParam._m0[_1906].z, fma(_1859, cbSceneParam._m0[_1906].y, _1855 * cbSceneParam._m0[_1906].x)));
        float _1945 = fma(_1867, cbSceneParam._m0[_1922].w, fma(_1863, cbSceneParam._m0[_1922].z, fma(_1859, cbSceneParam._m0[_1922].y, _1855 * cbSceneParam._m0[_1922].x)));
        float _1950 = cbSceneParam._m0[33u].z * _1945;
        float _1952 = cbSceneParam._m0[33u].w * _1945;
        float _1955 = fma(_1867, cbSceneParam._m0[_1914].w, fma(_1863, cbSceneParam._m0[_1914].z, fma(_1859, cbSceneParam._m0[_1914].y, _1855 * cbSceneParam._m0[_1914].x))) / _1945;
        float _2003 = (cbSceneParam._m0[33u].x - sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870))) * cbSceneParam._m0[33u].y;
        float _4294 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2010 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1950 + _1933) / _1945, (_1952 + _1937) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 + _1933) / _1945, (_1937 - _1950) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 - _1950) / _1945, (_1937 - _1952) / _1945), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 - _1952) / _1945, (_1950 + _1937) / _1945), _1955), 0.0)).x), vec4(0.25)));
        _2017 = 1.0 - (_2010 * cbSceneParam._m0[34u].x);
        _2018 = 1.0 - (_2010 * cbSceneParam._m0[34u].y);
        _2019 = 1.0 - (_2010 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2017 = 1.0;
        _2018 = 1.0;
        _2019 = 1.0;
    }
    float _2083;
    float _2085;
    float _2087;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2071 = fma(_1867, cbSceneParam._m0[63u].w, fma(_1863, cbSceneParam._m0[63u].z, fma(_1859, cbSceneParam._m0[63u].y, _1855 * cbSceneParam._m0[63u].x)));
        float _2072 = fma(_1867, cbSceneParam._m0[60u].w, fma(_1863, cbSceneParam._m0[60u].z, fma(_1859, cbSceneParam._m0[60u].y, _1855 * cbSceneParam._m0[60u].x))) / _2071;
        float _2073 = fma(_1867, cbSceneParam._m0[61u].w, fma(_1863, cbSceneParam._m0[61u].z, fma(_1859, cbSceneParam._m0[61u].y, _1855 * cbSceneParam._m0[61u].x))) / _2071;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_2072 >= cbSceneParam._m0[64u].x) && (_2073 >= cbSceneParam._m0[64u].y)) && (_2072 <= cbSceneParam._m0[64u].z)) && (_2073 <= cbSceneParam._m0[64u].w))
        {
            float _2211 = fma(_1867, cbSceneParam._m0[62u].w, fma(_1863, cbSceneParam._m0[62u].z, fma(_1859, cbSceneParam._m0[62u].y, _1855 * cbSceneParam._m0[62u].x))) / _2071;
            float _2215 = isnan(cbSceneParam._m0[41u].w) ? _2211 : (isnan(_2211) ? cbSceneParam._m0[41u].w : max(_2211, cbSceneParam._m0[41u].w));
            float _2258 = (cbSceneParam._m0[33u].x - sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870))) * cbSceneParam._m0[33u].y;
            float _4310 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
            float _2265 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2072, cbSceneParam._m0[33u].w + _2073), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2072, _2073 - cbSceneParam._m0[33u].z), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2072 - cbSceneParam._m0[33u].z, _2073 - cbSceneParam._m0[33u].w), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2072 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2073), _2215), 0.0)).x), vec4(0.25)));
            float _2269 = 1.0 - (_2265 * cbSceneParam._m0[34u].x);
            float _2270 = 1.0 - (_2265 * cbSceneParam._m0[34u].y);
            float _2271 = 1.0 - (_2265 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_2271) ? _2019 : (isnan(_2019) ? _2271 : min(_2019, _2271));
            frontier_phi_38_37_ladder_1 = isnan(_2270) ? _2018 : (isnan(_2018) ? _2270 : min(_2018, _2270));
            frontier_phi_38_37_ladder_2 = isnan(_2269) ? _2017 : (isnan(_2017) ? _2269 : min(_2017, _2269));
        }
        else
        {
            frontier_phi_38_37_ladder = _2019;
            frontier_phi_38_37_ladder_1 = _2018;
            frontier_phi_38_37_ladder_2 = _2017;
        }
        _2083 = frontier_phi_38_37_ladder_2;
        _2085 = frontier_phi_38_37_ladder_1;
        _2087 = frontier_phi_38_37_ladder;
    }
    else
    {
        _2083 = _2017;
        _2085 = _2018;
        _2087 = _2019;
    }
    uvec4 _2092 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _2094 = _2092.x * 14u;
    uint _2095 = _2094 + 13u;
    float _2102 = _793 + (-1.0);
    float _2107 = (cbLight._m0[_2095].x * _2102) + 1.0;
    float _2108 = (cbLight._m0[_2095].y * _2102) + 1.0;
    float _2109 = (cbLight._m0[_2095].z * _2102) + 1.0;
    float _2110 = (cbLight._m0[_2095].w * _2102) + 1.0;
    uint _2111 = _2094 + 5u;
    float _2117 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2121 = _2094 + 4u;
    float _2130 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2134 = _2094 | 1u;
    float _2145 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_577, _578, _579));
    float _2148 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_577, _578, _579));
    float _4346 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _4357 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2153 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2155 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2162 = ((cbLight._m0[_2111].x * _2117) * _2155) + (((cbLight._m0[_2121].x * _2083) * _2130) * _2153);
    float _2163 = ((_2117 * cbLight._m0[_2111].y) * _2155) + (((cbLight._m0[_2121].y * _2085) * _2130) * _2153);
    float _2164 = ((_2117 * cbLight._m0[_2111].z) * _2155) + (((cbLight._m0[_2121].z * _2087) * _2130) * _2153);
    uvec4 _2168 = floatBitsToUint(cbLight._m0[_2094 + 12u]);
    bool _2170 = _2168.x == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2170)
    {
        _2272 = _2162;
        _2274 = _2163;
        _2276 = _2164;
    }
    else
    {
        uint _2280 = _2094 + 6u;
        float _2296 = (dot(vec3(cbLight._m0[_2094 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2297 = _2296 * _2296;
        float _4368 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2298 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2299 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2272 = (((cbLight._m0[_2280].x * 0.3183098733425140380859375) * _2298) * _2299) + _2162;
        _2274 = (((cbLight._m0[_2280].y * 0.3183098733425140380859375) * _2298) * _2299) + _2163;
        _2276 = (((cbLight._m0[_2280].z * 0.3183098733425140380859375) * _2298) * _2299) + _2164;
    }
    bool _2279 = _2168.y == 0u;
    float _2334;
    float _2336;
    float _2338;
    if (_2279)
    {
        _2334 = _2272;
        _2336 = _2274;
        _2338 = _2276;
    }
    else
    {
        uint _2507 = _2094 + 7u;
        float _2523 = (dot(vec3(cbLight._m0[_2094 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2524 = _2523 * _2523;
        float _4384 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2525 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2526 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2334 = (((cbLight._m0[_2507].x * 0.3183098733425140380859375) * _2525) * _2526) + _2272;
        _2336 = (((cbLight._m0[_2507].y * 0.3183098733425140380859375) * _2525) * _2526) + _2274;
        _2338 = (((cbLight._m0[_2507].z * 0.3183098733425140380859375) * _2525) * _2526) + _2276;
    }
    uint _2341 = _2094 + 8u;
    float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _708) * 0.949999988079071044921875);
    float _2355 = _2354 * _2354;
    float _2356 = cbLight._m0[_2094].x + _658;
    float _2357 = cbLight._m0[_2094].y + _659;
    float _2358 = cbLight._m0[_2094].z + _660;
    float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
    float _2363 = _2362 * _2356;
    float _2364 = _2362 * _2357;
    float _2365 = _2362 * _2358;
    float _2366 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2094].xyz));
    float _4400 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2370 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2371 = dot(vec3(_577, _578, _579), vec3(_2363, _2364, _2365));
    float _4422 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2375 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2363, _2364, _2365));
    float _4433 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2379 = _2355 * _2355;
    float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
    float _2391 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
    float _2392 = 0.959999978542327880859375 - _775;
    float _2394 = 0.959999978542327880859375 - _776;
    float _2395 = 0.959999978542327880859375 - _777;
    float _2402 = 1.0 - _2355;
    float _2413 = (0.5 / (((_2370 * ((_2369 * _2402) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2402) + _2355) * _2369))) * _2369;
    float _4444 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2415 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
    uint _2429 = _2094 + 9u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _708) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2134].x + _658;
    float _2443 = cbLight._m0[_2134].y + _659;
    float _2444 = cbLight._m0[_2134].z + _660;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2134].xyz));
    float _4455 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2456 = dot(vec3(_577, _578, _579), vec3(_2449, _2450, _2451));
    float _4466 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2460 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2449, _2450, _2451));
    float _4477 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2464 = _2441 * _2441;
    float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
    float _2475 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2482 = 1.0 - _2441;
    float _2492 = (0.5 / (((_2370 * ((_2455 * _2482) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2482) + _2441) * _2455))) * _2455;
    float _4488 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
    float _2504 = (((((_2475 * _2392) + _778) * cbLight._m0[_2429].x) * _2494) * _2117) + ((((cbLight._m0[_2341].x * _2083) * ((_2391 * _2392) + _778)) * _2415) * _2130);
    float _2505 = (((((_2475 * _2394) + _780) * cbLight._m0[_2429].y) * _2494) * _2117) + ((((cbLight._m0[_2341].y * _2085) * ((_2391 * _2394) + _780)) * _2415) * _2130);
    float _2506 = (((((_2475 * _2395) + _781) * cbLight._m0[_2429].z) * _2494) * _2117) + ((((cbLight._m0[_2341].z * _2087) * ((_2391 * _2395) + _781)) * _2415) * _2130);
    float _2562;
    float _2564;
    float _2566;
    if (_2170)
    {
        _2562 = _2504;
        _2564 = _2505;
        _2566 = _2506;
    }
    else
    {
        uint _2568 = _2094 + 2u;
        uint _2572 = _2094 + 10u;
        float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2568].w)) * _708) * 0.949999988079071044921875);
        float _2587 = _2586 * _2586;
        float _2588 = cbLight._m0[_2568].x + _658;
        float _2589 = cbLight._m0[_2568].y + _659;
        float _2590 = cbLight._m0[_2568].z + _660;
        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
        float _2595 = _2594 * _2588;
        float _2596 = _2594 * _2589;
        float _2597 = _2594 * _2590;
        float _2598 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2568].xyz));
        float _4499 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2602 = dot(vec3(_577, _578, _579), vec3(_2595, _2596, _2597));
        float _4510 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2606 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_2595, _2596, _2597));
        float _4521 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2610 = _2587 * _2587;
        float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
        float _2621 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
        float _2628 = 1.0 - _2587;
        float _2638 = (0.5 / (((_2370 * ((_2601 * _2628) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2628) + _2587) * _2601))) * _2601;
        float _4532 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2562 = (((((_2621 * _2392) + _778) * cbLight._m0[_2572].x) * _2640) * _2641) + _2504;
        _2564 = (((((_2621 * _2394) + _780) * cbLight._m0[_2572].y) * _2640) * _2641) + _2505;
        _2566 = (((((_2621 * _2395) + _781) * cbLight._m0[_2572].z) * _2640) * _2641) + _2506;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2279)
    {
        _2672 = _2562;
        _2674 = _2564;
        _2676 = _2566;
    }
    else
    {
        uint _2683 = _2094 + 3u;
        uint _2687 = _2094 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _708) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _658;
        float _2704 = cbLight._m0[_2683].y + _659;
        float _2705 = cbLight._m0[_2683].z + _660;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2683].xyz));
        float _4548 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2717 = dot(vec3(_577, _578, _579), vec3(_2710, _2711, _2712));
        float _4559 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4570 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2370 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2743) + _2702) * _2716))) * _2716;
        float _4581 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2672 = (((((_2736 * _2392) + _778) * cbLight._m0[_2687].x) * _2755) * _2756) + _2562;
        _2674 = (((((_2736 * _2394) + _780) * cbLight._m0[_2687].y) * _2755) * _2756) + _2564;
        _2676 = (((((_2736 * _2395) + _781) * cbLight._m0[_2687].z) * _2755) * _2756) + _2566;
    }
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_2092.y == 0u)
    {
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.x;
        uint _2789 = uint((float(_2777.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2778))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2778)));
        float _2799 = (log2(_1870 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2800 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        uint _2803 = uint(isnan(14.0) ? _2800 : (isnan(_2800) ? 14.0 : min(_2800, 14.0)));
        uvec4 _2808 = texelFetch(g_lightClusterGridBuffer, int(((_2803 << 2u) + (_2789 << 6u)) >> 2u));
        uint _2809 = _2808.x;
        uint _2810 = _2777.z;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((((1u << ((_2810 >> 4u) & 15u)) + 4294967295u) & _2809) == 0u) || ((_2810 & 240u) == 0u))
        {
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
        }
        else
        {
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            uint _3056 = 0u;
            uint _3065;
            bool _3066;
            for (;;)
            {
                _3065 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                _3066 = _3065 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_3066)
                {
                    frontier_phi_70_pred = _3055;
                    frontier_phi_70_pred_1 = _3054;
                    frontier_phi_70_pred_2 = _3053;
                    frontier_phi_70_pred_3 = _3051;
                    frontier_phi_70_pred_4 = _3050;
                    frontier_phi_70_pred_5 = _3052;
                }
                else
                {
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    uint _3180;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3065;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    for (;;)
                    {
                        uint _3184 = uint(findLSB(_3180)) + (_3056 << 5u);
                        uint _3181 = (_3180 + 4294967295u) & _3180;
                        uint _3186 = _3184 * 48u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3206 = (_3184 * 48u) + 4u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3225 = (_3184 * 48u) + 8u;
                        vec3 _3236 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x));
                        float _3240 = _3200.x - _1868;
                        float _3241 = _3200.y - _1869;
                        float _3242 = _3200.z - _1870;
                        float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                        float _3246 = inversesqrt(_3243);
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3250 = dot(vec3(_689, _692, _695), vec3(_3247, _3248, _3249));
                        float _3255 = 1.0 - (_3243 * _3200.w);
                        float _4607 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3257 = sqrt(_3243) * _3219.w;
                        float _3260 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                        float _3261 = _3260 * _3260;
                        float _3264 = ((1.0 - _3261) * _3250) + _3261;
                        float _3267 = _3257 * _3257;
                        float _3271 = ((isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))) * _3256) / ((_3267 * 0.699999988079071044921875) + 1.0);
                        float _3275 = (-0.0) - _1868;
                        float _3276 = (-0.0) - _1869;
                        float _3277 = (-0.0) - _1870;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3291 = exp2(log2(1.0 / ((_3267 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _809;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3282 + _3247;
                        float _3303 = _3283 + _3248;
                        float _3304 = _3284 + _3249;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_689, _692, _695), vec3(_3282, _3283, _3284));
                        float _4623 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3316 = dot(vec3(_689, _692, _695), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4634 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3260 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3250) + _3325;
                        float _4645 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4656 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3323 * _3323) * ((_3267 * 2.1991131305694580078125) + 3.141590118408203125))) * _3256;
                        _3109 = (_3271 * _3219.x) + _3177;
                        _3110 = (_3271 * _3219.y) + _3178;
                        _3111 = (_3271 * _3219.z) + _3179;
                        _3106 = (_3351 * _3236.x) + _3174;
                        _3107 = (_3351 * _3236.y) + _3175;
                        _3108 = (_3351 * _3236.z) + _3176;
                        if (_3181 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3181;
                        }
                    }
                    frontier_phi_70_pred = _3111;
                    frontier_phi_70_pred_1 = _3110;
                    frontier_phi_70_pred_2 = _3109;
                    frontier_phi_70_pred_3 = _3107;
                    frontier_phi_70_pred_4 = _3106;
                    frontier_phi_70_pred_5 = _3108;
                }
                _2917 = frontier_phi_70_pred;
                _2915 = frontier_phi_70_pred_1;
                _2913 = frontier_phi_70_pred_2;
                _2909 = frontier_phi_70_pred_3;
                _2907 = frontier_phi_70_pred_4;
                _2911 = frontier_phi_70_pred_5;
                uint _3057 = _3056 + 1u;
                if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3050 = _2907;
                    _3051 = _2909;
                    _3052 = _2911;
                    _3053 = _2913;
                    _3054 = _2915;
                    _3055 = _2917;
                    _3056 = _3057;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
        }
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.z;
        uint _2923 = (_2921 >> 8u) & 15u;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((4294967295u << _2923) & _2809) == 0u)
        {
            _3018 = _2906;
            _3020 = _2908;
            _3022 = _2910;
            _3024 = _2912;
            _3026 = _2914;
            _3028 = _2916;
        }
        else
        {
            float _3043 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
            float _3044 = _3043 * _1868;
            float _3045 = _3043 * _1869;
            float _3046 = _3043 * _1870;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2923 < ((_2921 >> 12u) & 15u))
            {
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3157 = _2906;
                float _3158 = _2908;
                float _3159 = _2910;
                float _3160 = _2912;
                float _3161 = _2914;
                float _3162 = _2916;
                uint _3163 = _2923;
                uint _3172;
                bool _3173;
                for (;;)
                {
                    _3172 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                    _3173 = _3172 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_3173)
                    {
                        frontier_phi_76_pred = _3157;
                        frontier_phi_76_pred_1 = _3162;
                        frontier_phi_76_pred_2 = _3161;
                        frontier_phi_76_pred_3 = _3160;
                        frontier_phi_76_pred_4 = _3159;
                        frontier_phi_76_pred_5 = _3158;
                    }
                    else
                    {
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3369 = _3157;
                        float _3370 = _3158;
                        float _3371 = _3159;
                        float _3372 = _3160;
                        float _3373 = _3161;
                        float _3374 = _3162;
                        uint _3375 = _3172;
                        uint _3376;
                        vec4 _3401;
                        float _3402;
                        vec4 _3417;
                        vec3 _3429;
                        vec4 _3444;
                        vec4 _3459;
                        float _3505;
                        bool _3506;
                        for (;;)
                        {
                            uint _3386 = ((_3163 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3375));
                            _3376 = (_3375 + 4294967295u) & _3375;
                            uint _3388 = _3386 * 40u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3402 = _3401.w;
                            uint _3404 = (_3386 * 40u) + 4u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3386 * 40u) + 8u;
                            _3429 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x));
                            uint _3431 = (_3386 * 40u) + 16u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3386 * 40u) + 20u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3386 * 40u) + 24u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3480 = (_3386 * 40u) + 28u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3505 = fma(_1870, _3493.z, fma(_1869, _3493.y, _3493.x * _1868)) + _3493.w;
                            _3506 = !((fma(_1870, _3474.z, fma(_1869, _3474.y, _3474.x * _1868)) + _3474.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3506)
                            {
                                float _3533 = _3401.x - _1868;
                                float _3534 = _3401.y - _1869;
                                float _3535 = _3401.z - _1870;
                                float _3536 = dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535));
                                float _3539 = inversesqrt(_3536);
                                float _3540 = _3539 * _3533;
                                float _3541 = _3539 * _3534;
                                float _3542 = _3539 * _3535;
                                float _3546 = 1.0 - (_3536 / (_3402 * _3402));
                                float _4667 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3551 = sqrt(_3536) * _3417.w;
                                float _3553 = 1.39999997615814208984375 / (_3551 + 1.39999997615814208984375);
                                float _3554 = _3553 * _3553;
                                float _3557 = ((1.0 - _3554) * dot(vec3(_3540, _3541, _3542), vec3(_689, _692, _695))) + _3554;
                                float _3560 = _3551 * _3551;
                                float _3564 = (fma(_1870, _3444.z, fma(_1869, _3444.y, _3444.x * _1868)) + _3444.w) / _3505;
                                float _3565 = (fma(_1870, _3459.z, fma(_1869, _3459.y, _3459.x * _1868)) + _3459.w) / _3505;
                                float _3569 = 1.0 - dot(vec2(_3564, _3565), vec2(_3564, _3565));
                                float _4683 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3571 = _3570 * (((isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0))) * _3547) / ((_3560 * 0.699999988079071044921875) + 1.0));
                                float _3583 = exp2(log2(1.0 / ((_3560 * 3.5) + 5.0)) * 0.25);
                                float _3584 = 1.0 - _809;
                                float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                                float _3592 = _3591 * _3591;
                                float _3593 = _3592 * _3592;
                                float _3594 = _3540 - _3044;
                                float _3595 = _3541 - _3045;
                                float _3596 = _3542 - _3046;
                                float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                                float _3604 = dot(vec3(_689, _692, _695), vec3((-0.0) - _3044, (-0.0) - _3045, (-0.0) - _3046));
                                float _4694 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3608 = dot(vec3(_689, _692, _695), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                                float _4705 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                                float _3616 = _3553 * _3592;
                                float _3617 = _3616 * _3616;
                                float _3623 = ((1.0 - _3617) * dot(vec3(_689, _692, _695), vec3(_3540, _3541, _3542))) + _3617;
                                float _4716 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3625 = 1.0 - _3592;
                                float _3635 = (0.5 / (((_3624 * ((_3607 * _3625) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3592) * _3607))) * _3624;
                                float _4727 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3645 = (_3570 * _3547) * (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3615 * _3615) * ((_3560 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3645 * _3429.x;
                                frontier_phi_82_pred_1 = _3571 * _3417.z;
                                frontier_phi_82_pred_2 = _3571 * _3417.y;
                                frontier_phi_82_pred_3 = _3571 * _3417.x;
                                frontier_phi_82_pred_4 = _3645 * _3429.z;
                                frontier_phi_82_pred_5 = _3645 * _3429.y;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3649 = frontier_phi_82_pred;
                            _3654 = frontier_phi_82_pred_1;
                            _3653 = frontier_phi_82_pred_2;
                            _3652 = frontier_phi_82_pred_3;
                            _3651 = frontier_phi_82_pred_4;
                            _3650 = frontier_phi_82_pred_5;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            if (_3376 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3376;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3356;
                        frontier_phi_76_pred_1 = _3361;
                        frontier_phi_76_pred_2 = _3360;
                        frontier_phi_76_pred_3 = _3359;
                        frontier_phi_76_pred_4 = _3358;
                        frontier_phi_76_pred_5 = _3357;
                    }
                    _3019 = frontier_phi_76_pred;
                    _3029 = frontier_phi_76_pred_1;
                    _3027 = frontier_phi_76_pred_2;
                    _3025 = frontier_phi_76_pred_3;
                    _3023 = frontier_phi_76_pred_4;
                    _3021 = frontier_phi_76_pred_5;
                    uint _3164 = _3163 + 1u;
                    if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3157 = _3019;
                        _3158 = _3021;
                        _3159 = _3023;
                        _3160 = _3025;
                        _3161 = _3027;
                        _3162 = _3029;
                        _3163 = _3164;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _3029;
                frontier_phi_64_65_ladder_1 = _3027;
                frontier_phi_64_65_ladder_2 = _3025;
                frontier_phi_64_65_ladder_3 = _3023;
                frontier_phi_64_65_ladder_4 = _3021;
                frontier_phi_64_65_ladder_5 = _3019;
            }
            else
            {
                frontier_phi_64_65_ladder = _2916;
                frontier_phi_64_65_ladder_1 = _2914;
                frontier_phi_64_65_ladder_2 = _2912;
                frontier_phi_64_65_ladder_3 = _2910;
                frontier_phi_64_65_ladder_4 = _2908;
                frontier_phi_64_65_ladder_5 = _2906;
            }
            _3018 = frontier_phi_64_65_ladder_5;
            _3020 = frontier_phi_64_65_ladder_4;
            _3022 = frontier_phi_64_65_ladder_3;
            _3024 = frontier_phi_64_65_ladder_2;
            _3026 = frontier_phi_64_65_ladder_1;
            _3028 = frontier_phi_64_65_ladder;
        }
        float _3033 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2821 = (_3033 * _3024) + _2334;
        _2823 = (_3033 * _3026) + _2336;
        _2825 = (_3033 * _3028) + _2338;
        _2827 = ((_3018 * _778) * _3033) + _2672;
        _2829 = ((_3020 * _780) * _3033) + _2674;
        _2831 = ((_3022 * _781) * _3033) + _2676;
    }
    else
    {
        _2821 = _2334;
        _2823 = _2336;
        _2825 = _2338;
        _2827 = _2672;
        _2829 = _2674;
        _2831 = _2676;
    }
    vec4 _2837 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4743 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4754 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4765 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2861 = (((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2821 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _793))) + ((_2827 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + (_2837.x * cbMtdParam._m0[3u].x);
    float _2863 = ((_2837.y * cbMtdParam._m0[3u].x) + ((_2829 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2823 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _793)));
    float _2865 = ((_2837.z * cbMtdParam._m0[3u].x) + ((_2831 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2825 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _793)));
    uint _2869 = _721 + 6u;
    float _2877 = _666 / cbSceneParam._m0[86u].x;
    float _2878 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2892 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2894 = _2892.x;
    float _2895 = _2892.y;
    float _2896 = _2892.z;
    float _2897 = _2892.w;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2931 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2932 = _2931 / _600;
        float _2943 = _2932 * _651;
        float _2944 = _652 * _2932;
        float _2945 = (-0.0) - _2944;
        float _2946 = _2932 * _653;
        float _2948 = (cbSceneParam._m0[77u].w * _2945) / _2931;
        float _2949 = _2948 + cbSceneParam._m0[79u].w;
        float _2950 = cbSceneParam._m0[79u].w - _2944;
        float _2956 = sqrt(((_2943 * _2943) + (_2944 * _2944)) + (_2946 * _2946));
        float _2959 = (1.0 - (cbSceneParam._m0[77u].w / _2931)) * _2956;
        float _2964 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2966 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3119;
        if (abs((_2945 - _2948) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3119 = ((((_2949 > 0.0) ? exp2(_2964 * _2949) : (2.0 - exp2(_2966 * _2949))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2959;
        }
        else
        {
            float _3079 = 1.0 / cbSceneParam._m0[80u].x;
            float _3080 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : max(_2949, _2950));
            float _3081 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : min(_2949, _2950));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            _3119 = ((abs(_2956 / _2945) * cbSceneParam._m0[80u].y) * ((((_3090 - _3091) * 2.0) - ((exp2(_2964 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0)))) - exp2(_2964 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))))) * _3079)) - ((exp2(_2966 * _3090) - exp2(_2966 * _3091)) * _3079))) + (_2959 * cbSceneParam._m0[80u].z);
        }
        vec4 _3121 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2877, _2878, 1.0), 0.0);
        float _3130 = exp2((_3119 * (-1.44269502162933349609375)) * (1.0 - _3121.w));
        float _3131 = log2(_3130);
        float _3147 = log2(_2897);
        _2968 = (exp2(_3147 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].x)) * _3121.x) / cbSceneParam._m0[78u].x)) + _2894;
        _2970 = (exp2(_3147 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].y)) * _3121.y) / cbSceneParam._m0[78u].y)) + _2895;
        _2972 = (exp2(_3147 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].z)) * _3121.z) / cbSceneParam._m0[78u].z)) + _2896;
        _2974 = _3130 * _2897;
    }
    else
    {
        _2968 = _2894;
        _2970 = _2895;
        _2972 = _2896;
        _2974 = _2897;
    }
    float _2986 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2987 = _2986 == 3.0;
    float _2988 = log2(_2974);
    float _2995 = exp2(_2988 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0)));
    float _2996 = exp2(_2988 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0)));
    float _2997 = exp2(_2988 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0)));
    float _3006 = (_2986 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3006 * (_2987 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.y = _3006 * (_2987 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.z = _3006 * (_2987 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2972)));
    SV_Target.w = cbInstanceData._m0[_2869].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2869].w;
}


