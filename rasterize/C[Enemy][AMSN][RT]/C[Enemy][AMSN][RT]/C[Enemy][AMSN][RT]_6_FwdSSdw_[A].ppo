#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3536;
float _3537;
float _3538;
float _3539;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _268 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _279 = exp2(log2(_268.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _280;
    float _282;
    float _284;
    if (_279)
    {
        _280 = cbMtdParam._m0[18u].x;
        _282 = cbMtdParam._m0[18u].y;
        _284 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _280 = cbMtdParam._m0[17u].x;
        _282 = cbMtdParam._m0[17u].y;
        _284 = cbMtdParam._m0[17u].z;
    }
    float _289;
    if (_279)
    {
        _289 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _289 = cbMtdParam._m0[19u].z;
    }
    float _295;
    float _297;
    if (_279)
    {
        _295 = cbMtdParam._m0[26u].x;
        _297 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _295 = cbMtdParam._m0[22u].x;
        _297 = cbMtdParam._m0[22u].y;
    }
    float _299 = _295 * TEXCOORD.x;
    float _300 = _297 * TEXCOORD.y;
    float _312 = floor(_289);
    vec4 _315 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _299) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _300) + cbTextureTilingScale._m0[6u].w, _312));
    vec4 _337 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _345 = (((_280 * cbMtdParam._m0[19u].w) * _315.x) * cbMtdParam._m0[9u].x) * _337.x;
    float _349 = (((_282 * cbMtdParam._m0[19u].w) * _315.y) * cbMtdParam._m0[9u].y) * _337.y;
    float _353 = (((_284 * cbMtdParam._m0[19u].w) * _315.z) * cbMtdParam._m0[9u].z) * _337.z;
    vec4 _365 = texture(sampler2D(C_Enemy_AMSN_RT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _369 = _365.z;
    vec4 _382 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _299) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _300) + cbTextureTilingScale._m0[8u].w, _312));
    float _187[2];
    float _188[2];
    _187[0u] = cbMtdParam._m0[25u].x;
    _188[0u] = cbMtdParam._m0[25u].y;
    _187[1u] = cbMtdParam._m0[25u].z;
    _188[1u] = cbMtdParam._m0[25u].w;
    float _396 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _399 = uint(int(isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0))));
    float _404 = _188[_399] + _382.x;
    vec4 _423 = texture(sampler2DArray(C_Enemy_AMSN_RT_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _299) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _300) + cbTextureTilingScale._m0[7u].w, _312));
    float _430 = (_423.x * 2.0) + (-1.0);
    float _431 = (_423.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _3558 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))));
    float _446 = (cbMtdParam._m0[20u].x * (((_369 * 2.0) * (_423.z + _187[_399])) - _369)) + _369;
    float _450 = (cbMtdParam._m0[20u].y * ((_365.x * 2.0) + (-1.0))) + _430;
    float _451 = (cbMtdParam._m0[20u].y * ((_365.y * 2.0) + (-1.0))) + _431;
    float _454 = fma(_437, _238, fma(_451, _230 * TANGENT.x, (_216 * _208) * _450));
    float _457 = fma(_437, _239, fma(_451, _230 * TANGENT.y, (_216 * _209) * _450));
    float _460 = fma(_437, _240, fma(_451, _230 * TANGENT.z, (_216 * _210) * _450));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _3569 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _468 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3591 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3602 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3613 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _472 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _488 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _540 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _530);
    float _541 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _530);
    float _542 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _530);
    float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
    float _547 = _540 * _546;
    float _548 = _541 * _546;
    float _549 = _542 * _546;
    vec4 _554 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _556 = _554.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _782 = sqrt(((_540 * _540) + (_541 * _541)) + (_542 * _542));
        float _788 = (cbMatDynParam._m0[5u].x * _782) + cbMatDynParam._m0[5u].y;
        float _3624 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _793 = (cbMatDynParam._m0[5u].z * _782) + cbMatDynParam._m0[5u].w;
        float _3635 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) - _789)) + _789) < ((_556 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _570 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _571 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _573 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _575 = _573.w;
    float _594 = fma(_467, cbSceneParam._m0[5u].z, fma(_466, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _465));
    float _597 = fma(_467, cbSceneParam._m0[6u].z, fma(_466, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _465));
    float _600 = fma(_467, cbSceneParam._m0[7u].z, fma(_466, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _465));
    vec4 _602 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _613 = (((_602.y - _468) + (_602.w * _468)) * cbMtdParam._m0[3u].x) + _468;
    uint _626 = uint(roundEven(NORMAL.w)) * 13u;
    uint _628 = _626 + 9u;
    uint _629 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3646 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    vec4 _641 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _646 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _657 = (((_646.x - _472) + (_646.w * _472)) * cbMtdParam._m0[3u].x) + _472;
    float _670 = (cbMtdParam._m0[3u].x * (((_638 * _575) - _638) + _641.x)) + _638;
    float _671 = (cbMtdParam._m0[3u].x * (((_639 * _575) - _639) + _641.y)) + _639;
    float _672 = (cbMtdParam._m0[3u].x * (((_640 * _575) - _640) + _641.z)) + _640;
    float _673 = 1.0 - _657;
    float _674 = _673 * _670;
    float _675 = _673 * _671;
    float _676 = _673 * _672;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _657;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _657;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _657;
    float _684 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    float _687 = _683 + 0.039999999105930328369140625;
    vec4 _696 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _570, cbSceneParam._m0[86u].y * _571));
    float _699 = _696.x * TEXCOORD_4;
    float _700 = dot(vec3(_465, _466, _467), vec3(_547, _548, _549));
    float _703 = _700 * 2.0;
    float _707 = (_703 * _465) - _547;
    float _708 = (_703 * _466) - _548;
    float _709 = (_703 * _467) - _549;
    float _713 = abs(dot(vec3(_547, _548, _549), vec3(_465, _466, _467)));
    float _3679 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _715 = sqrt(_613);
    float _728 = exp2((_715 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _734 = (1.0 - _728) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _715;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _830 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _834 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _859 = _763 + _465;
        float _860 = _767 + _466;
        float _861 = _771 + _467;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_465, _466, _467), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3727 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_465, _466, _467), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3760 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_465, _466, _467), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3793 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1145 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1149 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1153 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1176 = _763 + _465;
        float _1177 = _767 + _466;
        float _1178 = _771 + _467;
        float _1188 = fma(_1178, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176)) - _1145;
        float _1189 = fma(_1178, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176)) - _1149;
        float _1190 = fma(_1178, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176)) - _1153;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1145 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1149 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[35u].z) + ((((((_1153 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1244 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1211.x + (-0.5));
        float _1246 = _1244 * (_1211.y + (-0.5));
        float _1247 = _1244 * (_1211.z + (-0.5));
        float _1254 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1218.x + (-0.5));
        float _1256 = _1254 * (_1218.y + (-0.5));
        float _1257 = _1254 * (_1218.z + (-0.5));
        float _1264 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1225.x + (-0.5));
        float _1266 = _1264 * (_1225.y + (-0.5));
        float _1267 = _1264 * (_1225.z + (-0.5));
        float _1274 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1232.x + (-0.5));
        float _1276 = _1274 * (_1232.y + (-0.5));
        float _1277 = _1274 * (_1232.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_465, _466, _467), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3856 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1308 + 1.0))) + _1313) * _1278;
        float _1323 = _1246 * 0.5;
        float _1324 = _1256 * 0.5;
        float _1325 = _1266 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_465, _466, _467), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3889 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1350 + 1.0))) + _1355) * _1279;
        float _1365 = _1247 * 0.5;
        float _1366 = _1257 * 0.5;
        float _1367 = _1267 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_465, _466, _467), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3922 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1392 + 1.0))) + _1397) * _1280;
        _1414 = _1247;
        _1415 = _1246;
        _1416 = _1245;
        _1417 = _1257;
        _1418 = _1256;
        _1419 = _1255;
        _1420 = _1267;
        _1421 = _1266;
        _1422 = _1265;
        _1423 = _1280;
        _1424 = _1279;
        _1425 = _1278;
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = _1102;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1115)) + _1115;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1461 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1464 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1467 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1438));
    float _1482 = _707 * 0.5;
    float _1483 = _708 * 0.5;
    float _1484 = _709 * 0.5;
    float _1485 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1488 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1491 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1525;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1498 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1502 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1506 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1513 = dot(vec4(cbModelParam._m0[39u]), vec4(_1482, _1483, _1484, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1536;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1527 = dot(vec4(cbModelParam._m0[40u]), vec4(_1482, _1483, _1484, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1540 = (_1536 * cbModelParam._m0[1u].x) + (_1525 * (1.0 - cbModelParam._m0[1u].x));
    float _1550 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1550 : min(cbModelParam._m0[25u].z, _1550));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1600 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1604 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1608 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1611 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1614 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1617 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1645;
        if (_1611 > 0.0)
        {
            _1645 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1645 = frontier_phi_25_23_ladder;
        }
        float _1870;
        if (_1614 > 0.0)
        {
            _1870 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1870 = frontier_phi_34_30_ladder;
        }
        float _2127;
        if (_1617 > 0.0)
        {
            _2127 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2127 = frontier_phi_46_41_ladder;
        }
        float _2129 = isnan(_1870) ? _1645 : (isnan(_1645) ? _1870 : min(_1645, _1870));
        float _2130 = isnan(_2127) ? _2129 : (isnan(_2129) ? _2127 : min(_2129, _2127));
        float _2134 = (_2130 * _1611) + _1600;
        float _2135 = (_2130 * _1614) + _1604;
        float _2136 = (_2130 * _1617) + _1608;
        float _2137 = _2130 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2137;
        float _2141 = _2137 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 > _2141) || ((_2135 < _2139) || ((_2134 < _2139) || (_2134 > _2141))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2136, cbModelParam._m0[9u].z, fma(_2135, cbModelParam._m0[9u].y, _2134 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2136, cbModelParam._m0[10u].z, fma(_2135, cbModelParam._m0[10u].y, _2134 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2136, cbModelParam._m0[11u].z, fma(_2135, cbModelParam._m0[11u].y, _2134 * cbModelParam._m0[11u].x))), _1551);
            frontier_phi_24_46_ladder = _2264.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2264.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2264.x * cbModelParam._m0[1u].y;
        }
        _1633 = frontier_phi_24_46_ladder_2;
        _1635 = frontier_phi_24_46_ladder_1;
        _1637 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1551);
        _1633 = _1621.x * cbModelParam._m0[1u].y;
        _1635 = _1621.y * cbModelParam._m0[1u].y;
        _1637 = _1621.z * cbModelParam._m0[1u].y;
    }
    float _1641 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1641 : min(cbModelParam._m0[25u].w, _1641));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1695 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1699 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1703 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1706 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1709 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1712 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1875;
        if (_1706 > 0.0)
        {
            _1875 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1875 = frontier_phi_36_32_ladder;
        }
        float _2154;
        if (_1709 > 0.0)
        {
            _2154 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2154 = frontier_phi_48_43_ladder;
        }
        float _2367;
        if (_1712 > 0.0)
        {
            _2367 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2367 = frontier_phi_57_54_ladder;
        }
        float _2369 = isnan(_2154) ? _1875 : (isnan(_1875) ? _2154 : min(_1875, _2154));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1706) + _1695;
        float _2375 = (_2370 * _1709) + _1699;
        float _2376 = (_2370 * _1712) + _1703;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2377;
        float _2380 = _2377 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2376 > _2380) || ((_2376 < _2378) || ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 < _2378) || (_2374 > _2380))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2376, cbModelParam._m0[17u].z, fma(_2375, cbModelParam._m0[17u].y, _2374 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2376, cbModelParam._m0[18u].z, fma(_2375, cbModelParam._m0[18u].y, _2374 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2376, cbModelParam._m0[19u].z, fma(_2375, cbModelParam._m0[19u].y, _2374 * cbModelParam._m0[19u].x))), _1642);
            frontier_phi_33_57_ladder = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2592.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2592.z * cbModelParam._m0[1u].z;
        }
        _1731 = frontier_phi_33_57_ladder_1;
        _1733 = frontier_phi_33_57_ladder;
        _1735 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1642);
        _1731 = _1715.x * cbModelParam._m0[1u].z;
        _1733 = _1715.y * cbModelParam._m0[1u].z;
        _1735 = _1715.z * cbModelParam._m0[1u].z;
    }
    float _1748 = (((_734 * _684) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1731 - _1633)) + _1633);
    float _1750 = (((_734 * _686) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1752 = (((_734 * _687) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1748 * cbSceneParam._m0[91u].x));
    vec4 _1769 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_570, _571));
    float _1771 = _1769.w;
    float _1783 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1771);
    float _1784 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1771);
    float _1785 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1771);
    uvec4 _1789 = floatBitsToUint(cbInstanceData._m0[_626 + 5u]);
    uint _1791 = _1789.x * 14u;
    uint _1792 = _1791 + 13u;
    float _1799 = _699 + (-1.0);
    float _1804 = (cbLight._m0[_1792].x * _1799) + 1.0;
    float _1805 = (cbLight._m0[_1792].y * _1799) + 1.0;
    float _1806 = (cbLight._m0[_1792].z * _1799) + 1.0;
    float _1807 = (cbLight._m0[_1792].w * _1799) + 1.0;
    uint _1808 = _1791 + 5u;
    float _1814 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1818 = _1791 + 4u;
    float _1828 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1832 = _1791 | 1u;
    float _1843 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_465, _466, _467));
    float _1846 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_465, _466, _467));
    float _4058 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _4069 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1851 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1853 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1860 = ((cbLight._m0[_1808].x * _1814) * _1853) + (((cbLight._m0[_1818].x * _1783) * _1828) * _1851);
    float _1861 = ((_1814 * cbLight._m0[_1808].y) * _1853) + (((cbLight._m0[_1818].y * _1784) * _1828) * _1851);
    float _1862 = ((_1814 * cbLight._m0[_1808].z) * _1853) + (((cbLight._m0[_1818].z * _1785) * _1828) * _1851);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1791 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1880;
    float _1882;
    float _1884;
    if (_1869)
    {
        _1880 = _1860;
        _1882 = _1861;
        _1884 = _1862;
    }
    else
    {
        uint _1888 = _1791 + 6u;
        float _1904 = (dot(vec3(cbLight._m0[_1791 + 2u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _4080 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1907 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1880 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1860;
        _1882 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1861;
        _1884 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1862;
    }
    bool _1887 = _1867.y == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1887)
    {
        _1925 = _1880;
        _1927 = _1882;
        _1929 = _1884;
    }
    else
    {
        uint _2098 = _1791 + 7u;
        float _2114 = (dot(vec3(cbLight._m0[_1791 + 3u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4096 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2117 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1925 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _1880;
        _1927 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _1882;
        _1929 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _1884;
    }
    uint _1932 = _1791 + 8u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _613) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1791].x + _547;
    float _1948 = cbLight._m0[_1791].y + _548;
    float _1949 = cbLight._m0[_1791].z + _549;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1791].xyz));
    float _4112 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _1961 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1962 = dot(vec3(_465, _466, _467), vec3(_1954, _1955, _1956));
    float _4134 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _1966 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1954, _1955, _1956));
    float _4145 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1970 = _1946 * _1946;
    float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
    float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0);
    float _1983 = 0.959999978542327880859375 - _681;
    float _1985 = 0.959999978542327880859375 - _682;
    float _1986 = 0.959999978542327880859375 - _683;
    float _1993 = 1.0 - _1946;
    float _2004 = (0.5 / (((_1961 * ((_1960 * _1993) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _1993) + _1946) * _1960))) * _1960;
    float _4156 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2006 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
    uint _2020 = _1791 + 9u;
    float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _613) * 0.949999988079071044921875);
    float _2032 = _2031 * _2031;
    float _2033 = cbLight._m0[_1832].x + _547;
    float _2034 = cbLight._m0[_1832].y + _548;
    float _2035 = cbLight._m0[_1832].z + _549;
    float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
    float _2040 = _2039 * _2033;
    float _2041 = _2039 * _2034;
    float _2042 = _2039 * _2035;
    float _2043 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1832].xyz));
    float _4167 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2047 = dot(vec3(_465, _466, _467), vec3(_2040, _2041, _2042));
    float _4178 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2051 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_2040, _2041, _2042));
    float _4189 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2055 = _2032 * _2032;
    float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
    float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0);
    float _2073 = 1.0 - _2032;
    float _2083 = (0.5 / (((_1961 * ((_2046 * _2073) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2073) + _2032) * _2046))) * _2046;
    float _4200 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2085 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
    float _2095 = (((((_2066 * _1983) + _684) * cbLight._m0[_2020].x) * _2085) * _1814) + ((((cbLight._m0[_1932].x * _1783) * ((_1982 * _1983) + _684)) * _2006) * _1828);
    float _2096 = (((((_2066 * _1985) + _686) * cbLight._m0[_2020].y) * _2085) * _1814) + ((((cbLight._m0[_1932].y * _1784) * ((_1982 * _1985) + _686)) * _2006) * _1828);
    float _2097 = (((((_2066 * _1986) + _687) * cbLight._m0[_2020].z) * _2085) * _1814) + ((((cbLight._m0[_1932].z * _1785) * ((_1982 * _1986) + _687)) * _2006) * _1828);
    float _2159;
    float _2161;
    float _2163;
    if (_1869)
    {
        _2159 = _2095;
        _2161 = _2096;
        _2163 = _2097;
    }
    else
    {
        uint _2165 = _1791 + 2u;
        uint _2169 = _1791 + 10u;
        float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _613) * 0.949999988079071044921875);
        float _2184 = _2183 * _2183;
        float _2185 = cbLight._m0[_2165].x + _547;
        float _2186 = cbLight._m0[_2165].y + _548;
        float _2187 = cbLight._m0[_2165].z + _549;
        float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
        float _2192 = _2191 * _2185;
        float _2193 = _2191 * _2186;
        float _2194 = _2191 * _2187;
        float _2195 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2165].xyz));
        float _4211 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2199 = dot(vec3(_465, _466, _467), vec3(_2192, _2193, _2194));
        float _4222 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2203 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2192, _2193, _2194));
        float _4233 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2207 = _2184 * _2184;
        float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
        float _2218 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
        float _2225 = 1.0 - _2184;
        float _2235 = (0.5 / (((_1961 * ((_2198 * _2225) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2225) + _2184) * _2198))) * _2198;
        float _4244 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
        float _2238 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2159 = (((((_2218 * _1983) + _684) * cbLight._m0[_2169].x) * _2237) * _2238) + _2095;
        _2161 = (((((_2218 * _1985) + _686) * cbLight._m0[_2169].y) * _2237) * _2238) + _2096;
        _2163 = (((((_2218 * _1986) + _687) * cbLight._m0[_2169].z) * _2237) * _2238) + _2097;
    }
    float _2273;
    float _2275;
    float _2277;
    if (_1887)
    {
        _2273 = _2159;
        _2275 = _2161;
        _2277 = _2163;
    }
    else
    {
        uint _2284 = _1791 + 3u;
        uint _2288 = _1791 + 11u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _613) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _547;
        float _2305 = cbLight._m0[_2284].y + _548;
        float _2306 = cbLight._m0[_2284].z + _549;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2284].xyz));
        float _4260 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2318 = dot(vec3(_465, _466, _467), vec3(_2311, _2312, _2313));
        float _4271 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4282 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
        float _2344 = 1.0 - _2303;
        float _2354 = (0.5 / (((_1961 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2344) + _2303) * _2317))) * _2317;
        float _4293 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2273 = (((((_2337 * _1983) + _684) * cbLight._m0[_2288].x) * _2356) * _2357) + _2159;
        _2275 = (((((_2337 * _1985) + _686) * cbLight._m0[_2288].y) * _2356) * _2357) + _2161;
        _2277 = (((((_2337 * _1986) + _687) * cbLight._m0[_2288].z) * _2356) * _2357) + _2163;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1789.y == 0u)
    {
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2432;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2432;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2432;
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.x;
        uint _2459 = uint((float(_2447.y) * floor(float(uint(cbSceneParam._m0[85u].y * _571) / _2448))) + floor(float(uint(cbSceneParam._m0[85u].x * _570) / _2448)));
        float _2469 = (log2(_2435 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2470 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        uint _2473 = uint(isnan(14.0) ? _2470 : (isnan(_2470) ? 14.0 : min(_2470, 14.0)));
        uvec4 _2478 = texelFetch(g_lightClusterGridBuffer, int(((_2473 << 2u) + (_2459 << 6u)) >> 2u));
        uint _2479 = _2478.x;
        uint _2480 = _2447.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2480 >> 4u) & 15u)) + 4294967295u) & _2479) == 0u) || ((_2480 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            uint _2755 = 0u;
            uint _2764;
            bool _2765;
            for (;;)
            {
                _2764 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                _2765 = _2764 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2765)
                {
                    frontier_phi_74_pred = _2754;
                    frontier_phi_74_pred_1 = _2753;
                    frontier_phi_74_pred_2 = _2752;
                    frontier_phi_74_pred_3 = _2751;
                    frontier_phi_74_pred_4 = _2750;
                    frontier_phi_74_pred_5 = _2749;
                }
                else
                {
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    uint _2900;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2764;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2904 = uint(findLSB(_2900)) + (_2755 << 5u);
                        uint _2901 = (_2900 + 4294967295u) & _2900;
                        uint _2906 = _2904 * 48u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2926 = (_2904 * 48u) + 4u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2945 = (_2904 * 48u) + 8u;
                        vec3 _2956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x));
                        float _2960 = _2920.x - _2433;
                        float _2961 = _2920.y - _2434;
                        float _2962 = _2920.z - _2435;
                        float _2963 = dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962));
                        float _2966 = inversesqrt(_2963);
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2970 = dot(vec3(_594, _597, _600), vec3(_2967, _2968, _2969));
                        float _2975 = 1.0 - (_2963 * _2920.w);
                        float _4319 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2977 = sqrt(_2963) * _2939.w;
                        float _2980 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2970) + _2981;
                        float _2987 = _2977 * _2977;
                        float _2991 = ((isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))) * _2976) / ((_2987 * 0.699999988079071044921875) + 1.0);
                        float _2995 = (-0.0) - _2433;
                        float _2996 = (-0.0) - _2434;
                        float _2997 = (-0.0) - _2435;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3012 = exp2(log2(1.0 / ((_2987 * 3.5) + 5.0)) * 0.25);
                        float _3013 = 1.0 - _715;
                        float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                        float _3021 = _3020 * _3020;
                        float _3022 = _3021 * _3021;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3033 = dot(vec3(_594, _597, _600), vec3(_3002, _3003, _3004));
                        float _4335 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3037 = dot(vec3(_594, _597, _600), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                        float _4346 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                        float _3045 = _2980 * _3021;
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _2970) + _3046;
                        float _4357 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3051 = 1.0 - _3021;
                        float _3061 = (0.5 / (((_3050 * ((_3036 * _3051) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3021) * _3036))) * _3050;
                        float _4368 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3072 = (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3044 * _3044) * ((_2987 * 2.1991131305694580078125) + 3.141590118408203125))) * _2976;
                        _2824 = (_2991 * _2939.x) + _2897;
                        _2825 = (_2991 * _2939.y) + _2898;
                        _2826 = (_2991 * _2939.z) + _2899;
                        _2821 = (_3072 * _2956.x) + _2894;
                        _2822 = (_3072 * _2956.y) + _2895;
                        _2823 = (_3072 * _2956.z) + _2896;
                        if (_2901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2901;
                        }
                    }
                    frontier_phi_74_pred = _2826;
                    frontier_phi_74_pred_1 = _2825;
                    frontier_phi_74_pred_2 = _2824;
                    frontier_phi_74_pred_3 = _2823;
                    frontier_phi_74_pred_4 = _2822;
                    frontier_phi_74_pred_5 = _2821;
                }
                _2608 = frontier_phi_74_pred;
                _2606 = frontier_phi_74_pred_1;
                _2604 = frontier_phi_74_pred_2;
                _2602 = frontier_phi_74_pred_3;
                _2600 = frontier_phi_74_pred_4;
                _2598 = frontier_phi_74_pred_5;
                uint _2756 = _2755 + 1u;
                if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2749 = _2598;
                    _2750 = _2600;
                    _2751 = _2602;
                    _2752 = _2604;
                    _2753 = _2606;
                    _2754 = _2608;
                    _2755 = _2756;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((4294967295u << _2614) & _2479) == 0u)
        {
            _2717 = _2597;
            _2719 = _2599;
            _2721 = _2601;
            _2723 = _2603;
            _2725 = _2605;
            _2727 = _2607;
        }
        else
        {
            float _2742 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
            float _2743 = _2742 * _2433;
            float _2744 = _2742 * _2434;
            float _2745 = _2742 * _2435;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2877 = _2597;
                float _2878 = _2599;
                float _2879 = _2601;
                float _2880 = _2603;
                float _2881 = _2605;
                float _2882 = _2607;
                uint _2883 = _2614;
                uint _2892;
                bool _2893;
                for (;;)
                {
                    _2892 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                    _2893 = _2892 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2893)
                    {
                        frontier_phi_85_pred = _2881;
                        frontier_phi_85_pred_1 = _2880;
                        frontier_phi_85_pred_2 = _2879;
                        frontier_phi_85_pred_3 = _2878;
                        frontier_phi_85_pred_4 = _2877;
                        frontier_phi_85_pred_5 = _2882;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        uint _3105 = _2892;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3175;
                        vec4 _3190;
                        float _3237;
                        bool _3238;
                        for (;;)
                        {
                            uint _3116 = ((_2883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3162 = (_3116 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3177 = (_3116 * 40u) + 20u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3193 = (_3116 * 40u) + 24u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3212 = (_3116 * 40u) + 28u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3237 = fma(_2435, _3225.z, fma(_2434, _3225.y, _3225.x * _2433)) + _3225.w;
                            _3238 = !((fma(_2435, _3206.z, fma(_2434, _3206.y, _3206.x * _2433)) + _3206.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3238)
                            {
                                float _3265 = _3131.x - _2433;
                                float _3266 = _3131.y - _2434;
                                float _3267 = _3131.z - _2435;
                                float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                                float _3271 = inversesqrt(_3268);
                                float _3272 = _3271 * _3265;
                                float _3273 = _3271 * _3266;
                                float _3274 = _3271 * _3267;
                                float _3278 = 1.0 - (_3268 / (_3132 * _3132));
                                float _4379 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3283 = sqrt(_3268) * _3147.w;
                                float _3285 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                                float _3286 = _3285 * _3285;
                                float _3289 = ((1.0 - _3286) * dot(vec3(_3272, _3273, _3274), vec3(_594, _597, _600))) + _3286;
                                float _3292 = _3283 * _3283;
                                float _3296 = (fma(_2435, _3175.z, fma(_2434, _3175.y, _3175.x * _2433)) + _3175.w) / _3237;
                                float _3297 = (fma(_2435, _3190.z, fma(_2434, _3190.y, _3190.x * _2433)) + _3190.w) / _3237;
                                float _3301 = 1.0 - dot(vec2(_3296, _3297), vec2(_3296, _3297));
                                float _4395 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3303 = _3302 * (((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3279) / ((_3292 * 0.699999988079071044921875) + 1.0));
                                float _3315 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                                float _3316 = 1.0 - _715;
                                float _3323 = sqrt(1.0 - ((1.0 - (_3316 * _3316)) * (1.0 - (_3315 * _3315))));
                                float _3324 = _3323 * _3323;
                                float _3325 = _3324 * _3324;
                                float _3326 = _3272 - _2743;
                                float _3327 = _3273 - _2744;
                                float _3328 = _3274 - _2745;
                                float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                                float _3336 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745));
                                float _4406 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3340 = dot(vec3(_594, _597, _600), vec3(_3332 * _3326, _3332 * _3327, _3332 * _3328));
                                float _4417 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3347 = ((_3343 * _3343) * (_3325 + (-1.0))) + 1.0;
                                float _3348 = _3285 * _3324;
                                float _3349 = _3348 * _3348;
                                float _3355 = ((1.0 - _3349) * dot(vec3(_594, _597, _600), vec3(_3272, _3273, _3274))) + _3349;
                                float _4428 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3357 = 1.0 - _3324;
                                float _3367 = (0.5 / (((_3356 * ((_3339 * _3357) + _3324)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3324) * _3339))) * _3356;
                                float _4439 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3377 = (_3302 * _3279) * (((_3325 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3347 * _3347) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3303 * _3147.y;
                                frontier_phi_91_pred_1 = _3303 * _3147.x;
                                frontier_phi_91_pred_2 = _3377 * _3159.z;
                                frontier_phi_91_pred_3 = _3377 * _3159.y;
                                frontier_phi_91_pred_4 = _3377 * _3159.x;
                                frontier_phi_91_pred_5 = _3303 * _3147.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_91_pred;
                            _3384 = frontier_phi_91_pred_1;
                            _3383 = frontier_phi_91_pred_2;
                            _3382 = frontier_phi_91_pred_3;
                            _3381 = frontier_phi_91_pred_4;
                            _3386 = frontier_phi_91_pred_5;
                            _3089 = _3384 + _3102;
                            _3090 = _3385 + _3103;
                            _3091 = _3386 + _3104;
                            _3086 = _3381 + _3099;
                            _3087 = _3382 + _3100;
                            _3088 = _3383 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3090;
                        frontier_phi_85_pred_1 = _3089;
                        frontier_phi_85_pred_2 = _3088;
                        frontier_phi_85_pred_3 = _3087;
                        frontier_phi_85_pred_4 = _3086;
                        frontier_phi_85_pred_5 = _3091;
                    }
                    _2726 = frontier_phi_85_pred;
                    _2724 = frontier_phi_85_pred_1;
                    _2722 = frontier_phi_85_pred_2;
                    _2720 = frontier_phi_85_pred_3;
                    _2718 = frontier_phi_85_pred_4;
                    _2728 = frontier_phi_85_pred_5;
                    uint _2884 = _2883 + 1u;
                    if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2877 = _2718;
                        _2878 = _2720;
                        _2879 = _2722;
                        _2880 = _2724;
                        _2881 = _2726;
                        _2882 = _2728;
                        _2883 = _2884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2728;
                frontier_phi_66_67_ladder_1 = _2724;
                frontier_phi_66_67_ladder_2 = _2726;
                frontier_phi_66_67_ladder_3 = _2720;
                frontier_phi_66_67_ladder_4 = _2718;
                frontier_phi_66_67_ladder_5 = _2722;
            }
            else
            {
                frontier_phi_66_67_ladder = _2607;
                frontier_phi_66_67_ladder_1 = _2603;
                frontier_phi_66_67_ladder_2 = _2605;
                frontier_phi_66_67_ladder_3 = _2599;
                frontier_phi_66_67_ladder_4 = _2597;
                frontier_phi_66_67_ladder_5 = _2601;
            }
            _2717 = frontier_phi_66_67_ladder_4;
            _2719 = frontier_phi_66_67_ladder_3;
            _2721 = frontier_phi_66_67_ladder_5;
            _2723 = frontier_phi_66_67_ladder_1;
            _2725 = frontier_phi_66_67_ladder_2;
            _2727 = frontier_phi_66_67_ladder;
        }
        float _2732 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _2491 = (_2732 * _2723) + _1925;
        _2493 = (_2732 * _2725) + _1927;
        _2495 = (_2732 * _2727) + _1929;
        _2497 = ((_2717 * _684) * _2732) + _2273;
        _2499 = ((_2719 * _686) * _2732) + _2275;
        _2501 = ((_2721 * _687) * _2732) + _2277;
    }
    else
    {
        _2491 = _1925;
        _2493 = _1927;
        _2495 = _1929;
        _2497 = _2273;
        _2499 = _2275;
        _2501 = _2277;
    }
    vec4 _2507 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4455 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4466 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4477 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _2531 = (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2491 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _699))) + ((_2497 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + (_2507.x * cbMtdParam._m0[3u].x);
    float _2533 = ((_2507.y * cbMtdParam._m0[3u].x) + ((_2499 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2493 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _699)));
    float _2535 = ((_2507.z * cbMtdParam._m0[3u].x) + ((_2501 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2495 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _699)));
    float _2536 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2537 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2538 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    uint _2539 = _626 + 6u;
    float _2547 = _570 / cbSceneParam._m0[86u].x;
    float _2548 = _571 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _488 : (isnan(_488) ? cbSceneParam._m0[77u].w : min(_488, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_488 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_488) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _488 : min(cbSceneParam._m0[80u].w, _488));
        float _2623 = _2622 / _488;
        float _2634 = _2623 * _540;
        float _2635 = _541 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2637 = _2623 * _542;
        float _2639 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2640 = _2639 + cbSceneParam._m0[79u].w;
        float _2641 = cbSceneParam._m0[79u].w - _2635;
        float _2647 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2637 * _2637));
        float _2650 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2647;
        float _2655 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2657 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2834;
        if (abs((_2636 - _2639) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2834 = ((((_2640 > 0.0) ? exp2(_2655 * _2640) : (2.0 - exp2(_2657 * _2640))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2650;
        }
        else
        {
            float _2778 = 1.0 / cbSceneParam._m0[80u].x;
            float _2779 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : max(_2640, _2641));
            float _2780 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : min(_2640, _2641));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            _2834 = ((abs(_2647 / _2636) * cbSceneParam._m0[80u].y) * ((((_2789 - _2790) * 2.0) - ((exp2(_2655 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)))) - exp2(_2655 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))))) * _2778)) - ((exp2(_2657 * _2789) - exp2(_2657 * _2790)) * _2778))) + (_2650 * cbSceneParam._m0[80u].z);
        }
        vec4 _2836 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2845 = exp2((_2834 * (-1.44269502162933349609375)) * (1.0 - _2836.w));
        float _2846 = log2(_2845);
        float _2862 = log2(_2567);
        _2659 = (exp2(_2862 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].x)) * _2836.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2661 = (exp2(_2862 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].y)) * _2836.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2663 = (exp2(_2862 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].z)) * _2836.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2665 = _2845 * _2567;
    }
    else
    {
        _2659 = _2564;
        _2661 = _2565;
        _2663 = _2566;
        _2665 = _2567;
    }
    bool _2872;
    vec4 _2675;
    vec4 _2697;
    float _2699;
    float _2703;
    float _2704;
    float _2705;
    float _2706;
    bool _2716;
    for (;;)
    {
        _2675 = cbMatDynParam._m0[0u];
        float _2677 = roundEven(_2675.y);
        bool _2678 = _2677 == 3.0;
        float _2679 = log2(_2665);
        float _2686 = exp2(_2679 * cbSceneParam._m0[78u].x) * _2536;
        float _2687 = exp2(_2679 * cbSceneParam._m0[78u].y) * _2537;
        float _2688 = exp2(_2679 * cbSceneParam._m0[78u].z) * _2538;
        float _2695 = _556 + (-0.5);
        _2697 = cbMtdParam._m0[1u];
        _2699 = _2697.y * _2695;
        float _2702 = (_2677 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2703 = _2702 * (_2678 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2659)));
        _2704 = _2702 * (_2678 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2661)));
        _2705 = _2702 * (_2678 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2663)));
        _2706 = _2695 * 0.999000012874603271484375;
        _2716 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2716)
        {
            if ((cbInstanceData._m0[_626 + 7u].x + _2706) < 0.5)
            {
                _2872 = true;
                break;
            }
        }
        uint _2813 = _628 + uint(_2675.w);
        if ((cbInstanceData._m0[_2813].w < 1.0) && ((cbInstanceData._m0[_2813].w + _2706) < 0.5))
        {
            _2872 = true;
            break;
        }
        if ((_2699 + 1.0) < _2697.x)
        {
            _2872 = true;
            break;
        }
        _2872 = false;
        break;
    }
    float _3077;
    if (_2872)
    {
        discard_state = true;
        _3077 = 0.0;
    }
    else
    {
        _3077 = cbInstanceData._m0[_2539].w;
    }
    SV_Target.x = _2703;
    SV_Target.y = _2704;
    SV_Target.z = _2705;
    SV_Target.w = _3077;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2539].w;
    discard_exit();
}


