#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1191;
float _3583;
float _3584;
float _3585;
float _3586;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _256 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _285 = cbMtdParam._m0[10u].y * texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _296 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - _256.x) * 2.0) - _285)) + 1.0;
    float _3595 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    vec4 _309 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _311 = _309.x;
    float _312 = _309.y;
    float _313 = _309.z;
    vec4 _326 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _337 = ((_326.x - _311) * _297) + _311;
    float _338 = ((_326.y - _312) * _297) + _312;
    float _339 = ((_326.z - _313) * _297) + _313;
    float _345 = (((((1.0 - _256.y) * 2.0) - _285) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].w) + 1.0;
    float _3606 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    vec4 _359 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _370 = ((_359.x - _337) * _346) + _337;
    float _371 = ((_359.y - _338) * _346) + _338;
    float _372 = ((_359.z - _339) * _346) + _339;
    float _378 = (((((1.0 - _256.z) * 2.0) - _285) * (-1.39999997615814208984375)) * cbMtdParam._m0[10u].x) + 1.0;
    float _3617 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    vec4 _391 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _402 = ((_391.x - _370) * _379) + _370;
    float _403 = ((_391.y - _371) * _379) + _371;
    float _404 = ((_391.z - _372) * _379) + _372;
    float _410 = ((((TEXCOORD.w * 2.0) - _285) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3628 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    vec4 _424 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _449 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _456 = ((((_424.x - _402) * _411) + _402) * 4.55000019073486328125) * _449.x;
    float _458 = ((((_424.y - _403) * _411) + _403) * 4.55000019073486328125) * _449.y;
    float _460 = ((((_424.z - _404) * _411) + _404) * 4.55000019073486328125) * _449.z;
    vec4 _472 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    vec4 _488 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _499 = ((_488.x - _474) * _297) + _474;
    float _500 = ((_488.y - _475) * _297) + _475;
    float _501 = ((_488.z - _476) * _297) + _476;
    vec4 _514 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _525 = ((_514.x - _499) * _346) + _499;
    float _526 = ((_514.y - _500) * _346) + _500;
    float _527 = ((_514.z - _501) * _346) + _501;
    vec4 _540 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _551 = ((_540.x - _525) * _379) + _525;
    float _552 = ((_540.y - _526) * _379) + _526;
    float _553 = ((_540.z - _527) * _379) + _527;
    vec4 _566 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = ((_566.z - _553) * _411) + _553;
    float _582 = ((((_566.x - _551) * _411) + _551) * 2.0) + (-1.0);
    float _584 = ((((_566.y - _552) * _411) + _552) * 2.0) + (-1.0);
    float _585 = dot(vec2(_582, _584), vec2(_582, _584));
    float _3639 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _590 = sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))));
    vec4 _603 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _613 = (((_603.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z) + _582;
    float _614 = (((_603.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z) + _584;
    float _617 = fma(_590, _240, fma(_614, _232 * TANGENT.x, (_218 * _210) * _613));
    float _620 = fma(_590, _241, fma(_614, _232 * TANGENT.y, (_218 * _211) * _613));
    float _623 = fma(_590, _242, fma(_614, _232 * TANGENT.z, (_218 * _212) * _613));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    float _628 = _627 * _617;
    float _629 = _627 * _620;
    float _630 = _627 * _623;
    float _3650 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _631 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3672 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3683 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _700 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _690);
    float _701 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _690);
    float _702 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _690);
    float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
    float _707 = _700 * _706;
    float _708 = _701 * _706;
    float _709 = _702 * _706;
    vec4 _714 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _716 = _714.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _870 = sqrt(((_700 * _700) + (_701 * _701)) + (_702 * _702));
        float _876 = (cbMatDynParam._m0[5u].x * _870) + cbMatDynParam._m0[5u].y;
        float _3694 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _881 = (cbMatDynParam._m0[5u].z * _870) + cbMatDynParam._m0[5u].w;
        float _3705 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) - _877)) + _877) < ((_716 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _727 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _728 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _746 = fma(_630, cbSceneParam._m0[5u].z, fma(_629, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _628));
    float _749 = fma(_630, cbSceneParam._m0[6u].z, fma(_629, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _628));
    float _752 = fma(_630, cbSceneParam._m0[7u].z, fma(_629, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _628));
    uint _765 = uint(roundEven(NORMAL.w)) * 13u;
    uint _766 = _765 + 9u;
    uint _767 = _766 + uint(cbMatDynParam._m0[0u].w);
    float _773 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_767].x;
    float _774 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_767].y;
    float _775 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_767].z;
    float _3716 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    vec4 _787 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _727, cbSceneParam._m0[86u].y * _728));
    float _790 = _787.x * TEXCOORD.z;
    float _791 = dot(vec3(_628, _629, _630), vec3(_707, _708, _709));
    float _794 = _791 * 2.0;
    float _798 = (_794 * _628) - _707;
    float _799 = (_794 * _629) - _708;
    float _800 = (_794 * _630) - _709;
    float _804 = abs(dot(vec3(_707, _708, _709), vec3(_628, _629, _630)));
    float _3749 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _806 = sqrt(_631);
    float _819 = exp2((_806 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_806 * 3.0));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_859, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851));
        float _919 = fma(_859, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851));
        float _923 = fma(_859, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851));
        float _948 = _851 + _628;
        float _949 = _855 + _629;
        float _950 = _859 + _630;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_628, _629, _630), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3797 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_628, _629, _630), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3830 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_628, _629, _630), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3863 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1234 = fma(_859, cbModelParam._m0[30u].z, fma(_855, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851));
        float _1238 = fma(_859, cbModelParam._m0[31u].z, fma(_855, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851));
        float _1242 = fma(_859, cbModelParam._m0[32u].z, fma(_855, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851));
        float _1265 = _851 + _628;
        float _1266 = _855 + _629;
        float _1267 = _859 + _630;
        float _1277 = fma(_1267, cbModelParam._m0[30u].z, fma(_1266, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265)) - _1234;
        float _1278 = fma(_1267, cbModelParam._m0[31u].z, fma(_1266, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265)) - _1238;
        float _1279 = fma(_1267, cbModelParam._m0[32u].z, fma(_1266, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265)) - _1242;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1234 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1238 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[35u].z) + ((((((_1242 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1333 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1300.x + (-0.5));
        float _1335 = _1333 * (_1300.y + (-0.5));
        float _1336 = _1333 * (_1300.z + (-0.5));
        float _1343 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1307.x + (-0.5));
        float _1345 = _1343 * (_1307.y + (-0.5));
        float _1346 = _1343 * (_1307.z + (-0.5));
        float _1353 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1314.x + (-0.5));
        float _1355 = _1353 * (_1314.y + (-0.5));
        float _1356 = _1353 * (_1314.z + (-0.5));
        float _1363 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1321.x + (-0.5));
        float _1365 = _1363 * (_1321.y + (-0.5));
        float _1366 = _1363 * (_1321.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_628, _629, _630), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3926 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1397 + 1.0))) + _1402) * _1367;
        float _1412 = _1335 * 0.5;
        float _1413 = _1345 * 0.5;
        float _1414 = _1355 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_628, _629, _630), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _3959 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1439 + 1.0))) + _1444) * _1368;
        float _1454 = _1336 * 0.5;
        float _1455 = _1346 * 0.5;
        float _1456 = _1356 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_628, _629, _630), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3992 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1481 + 1.0))) + _1486) * _1369;
        _1503 = _1336;
        _1504 = _1335;
        _1505 = _1334;
        _1506 = _1346;
        _1507 = _1345;
        _1508 = _1344;
        _1509 = _1356;
        _1510 = _1355;
        _1511 = _1354;
        _1512 = _1369;
        _1513 = _1368;
        _1514 = _1367;
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = _1191;
        _1511 = _1191;
        _1512 = _1191;
        _1513 = _1191;
        _1514 = _1191;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1203)) + _1203;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1204)) + _1204;
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1205)) + _1205;
    float _1550 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1527));
    float _1571 = _798 * 0.5;
    float _1572 = _799 * 0.5;
    float _1573 = _800 * 0.5;
    float _1574 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1577 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1580 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1614;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1587 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1591 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1595 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1602 = dot(vec4(cbModelParam._m0[39u]), vec4(_1571, _1572, _1573, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1625;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1616 = dot(vec4(cbModelParam._m0[40u]), vec4(_1571, _1572, _1573, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1629 = (_1625 * cbModelParam._m0[1u].x) + (_1614 * (1.0 - cbModelParam._m0[1u].x));
    float _1639 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _631);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1639 : min(cbModelParam._m0[25u].z, _1639));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1689 = fma(_859, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _851)) + cbModelParam._m0[13u].w;
        float _1693 = fma(_859, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _851)) + cbModelParam._m0[14u].w;
        float _1697 = fma(_859, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _851)) + cbModelParam._m0[15u].w;
        float _1700 = fma(_800, cbModelParam._m0[13u].z, fma(_799, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798));
        float _1703 = fma(_800, cbModelParam._m0[14u].z, fma(_799, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798));
        float _1706 = fma(_800, cbModelParam._m0[15u].z, fma(_799, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798));
        float _1734;
        if (_1700 > 0.0)
        {
            _1734 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1734 = frontier_phi_19_17_ladder;
        }
        float _1959;
        if (_1703 > 0.0)
        {
            _1959 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1959 = frontier_phi_28_24_ladder;
        }
        float _2205;
        if (_1706 > 0.0)
        {
            _2205 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2205 = frontier_phi_40_35_ladder;
        }
        float _2207 = isnan(_1959) ? _1734 : (isnan(_1734) ? _1959 : min(_1734, _1959));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1700) + _1689;
        float _2213 = (_2208 * _1703) + _1693;
        float _2214 = (_2208 * _1706) + _1697;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1640);
            frontier_phi_18_40_ladder = _2338.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2338.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2338.x * cbModelParam._m0[1u].y;
        }
        _1722 = frontier_phi_18_40_ladder_2;
        _1724 = frontier_phi_18_40_ladder_1;
        _1726 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_798, _799, _800), _1640);
        _1722 = _1710.x * cbModelParam._m0[1u].y;
        _1724 = _1710.y * cbModelParam._m0[1u].y;
        _1726 = _1710.z * cbModelParam._m0[1u].y;
    }
    float _1730 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _631);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1730 : min(cbModelParam._m0[25u].w, _1730));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1788 = fma(_859, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _851)) + cbModelParam._m0[21u].w;
        float _1792 = fma(_859, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _851)) + cbModelParam._m0[22u].w;
        float _1796 = fma(_859, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _851)) + cbModelParam._m0[23u].w;
        float _1799 = fma(_800, cbModelParam._m0[21u].z, fma(_799, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798));
        float _1802 = fma(_800, cbModelParam._m0[22u].z, fma(_799, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798));
        float _1805 = fma(_800, cbModelParam._m0[23u].z, fma(_799, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798));
        float _1964;
        if (_1799 > 0.0)
        {
            _1964 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1964 = frontier_phi_30_26_ladder;
        }
        float _2232;
        if (_1802 > 0.0)
        {
            _2232 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2232 = frontier_phi_42_37_ladder;
        }
        float _2437;
        if (_1805 > 0.0)
        {
            _2437 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2437 = frontier_phi_51_48_ladder;
        }
        float _2439 = isnan(_2232) ? _1964 : (isnan(_1964) ? _2232 : min(_1964, _2232));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1799) + _1788;
        float _2445 = (_2440 * _1802) + _1792;
        float _2446 = (_2440 * _1805) + _1796;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2447;
        float _2450 = _2447 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2446 > _2450) || ((_2446 < _2448) || ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 < _2448) || (_2444 > _2450))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2446, cbModelParam._m0[17u].z, fma(_2445, cbModelParam._m0[17u].y, _2444 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2446, cbModelParam._m0[18u].z, fma(_2445, cbModelParam._m0[18u].y, _2444 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2446, cbModelParam._m0[19u].z, fma(_2445, cbModelParam._m0[19u].y, _2444 * cbModelParam._m0[19u].x))), _1731);
            frontier_phi_27_51_ladder = _2644.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2644.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2644.x * cbModelParam._m0[1u].z;
        }
        _1824 = frontier_phi_27_51_ladder_2;
        _1826 = frontier_phi_27_51_ladder_1;
        _1828 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_798, _799, _800), _1731);
        _1824 = _1808.x * cbModelParam._m0[1u].z;
        _1826 = _1808.y * cbModelParam._m0[1u].z;
        _1828 = _1808.z * cbModelParam._m0[1u].z;
    }
    float _1840 = ((((1.0 - _819) * ((_806 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_819 * _806)) * _790;
    float _1841 = _1840 * ((cbModelParam._m0[1u].w * (_1824 - _1722)) + _1722);
    float _1842 = _1840 * ((cbModelParam._m0[1u].w * (_1826 - _1724)) + _1724);
    float _1843 = _1840 * ((cbModelParam._m0[1u].w * (_1828 - _1726)) + _1726);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, _1841 * cbSceneParam._m0[91u].x));
    vec4 _1860 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_727, _728));
    float _1862 = _1860.w;
    float _1874 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1862);
    float _1875 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1862);
    float _1876 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1862);
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_765 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1890 = _790 + (-1.0);
    float _1895 = (cbLight._m0[_1883].x * _1890) + 1.0;
    float _1896 = (cbLight._m0[_1883].y * _1890) + 1.0;
    float _1897 = (cbLight._m0[_1883].z * _1890) + 1.0;
    float _1898 = (cbLight._m0[_1883].w * _1890) + 1.0;
    uint _1899 = _1882 + 5u;
    float _1905 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1909 = _1882 + 4u;
    float _1918 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1922 = _1882 | 1u;
    float _1933 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_628, _629, _630));
    float _1936 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_628, _629, _630));
    float _4128 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _4139 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1941 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
    float _1943 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * 0.3183098733425140380859375;
    float _1950 = ((cbLight._m0[_1899].x * _1905) * _1943) + (((cbLight._m0[_1909].x * _1874) * _1918) * _1941);
    float _1951 = ((_1905 * cbLight._m0[_1899].y) * _1943) + (((cbLight._m0[_1909].y * _1875) * _1918) * _1941);
    float _1952 = ((_1905 * cbLight._m0[_1899].z) * _1943) + (((cbLight._m0[_1909].z * _1876) * _1918) * _1941);
    uvec4 _1956 = floatBitsToUint(cbLight._m0[_1882 + 12u]);
    bool _1958 = _1956.x == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1958)
    {
        _1969 = _1950;
        _1971 = _1951;
        _1973 = _1952;
    }
    else
    {
        uint _1977 = _1882 + 6u;
        float _1993 = (dot(vec3(cbLight._m0[_1882 + 2u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _1994 = _1993 * _1993;
        float _4150 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1995 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1996 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _1969 = (((cbLight._m0[_1977].x * 0.3183098733425140380859375) * _1995) * _1996) + _1950;
        _1971 = (((cbLight._m0[_1977].y * 0.3183098733425140380859375) * _1995) * _1996) + _1951;
        _1973 = (((cbLight._m0[_1977].z * 0.3183098733425140380859375) * _1995) * _1996) + _1952;
    }
    bool _1976 = _1956.y == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_1976)
    {
        _2014 = _1969;
        _2016 = _1971;
        _2018 = _1973;
    }
    else
    {
        uint _2176 = _1882 + 7u;
        float _2192 = (dot(vec3(cbLight._m0[_1882 + 3u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4166 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2195 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2014 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _1969;
        _2016 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _1971;
        _2018 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _1973;
    }
    uint _2021 = _1882 + 8u;
    float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _631) * 0.949999988079071044921875);
    float _2035 = _2034 * _2034;
    float _2036 = cbLight._m0[_1882].x + _707;
    float _2037 = cbLight._m0[_1882].y + _708;
    float _2038 = cbLight._m0[_1882].z + _709;
    float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
    float _2043 = _2042 * _2036;
    float _2044 = _2042 * _2037;
    float _2045 = _2042 * _2038;
    float _2046 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_1882].xyz));
    float _4182 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _4193 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _2050 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2051 = dot(vec3(_628, _629, _630), vec3(_2043, _2044, _2045));
    float _4204 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2055 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2043, _2044, _2045));
    float _4215 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2059 = _2035 * _2035;
    float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
    float _2074 = (exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2075 = 1.0 - _2035;
    float _2086 = (0.5 / (((_2050 * ((_2049 * _2075) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_2050 * _2075) + _2035) * _2049))) * _2049;
    float _4226 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2088 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
    uint _2102 = _1882 + 9u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _631) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1922].x + _707;
    float _2116 = cbLight._m0[_1922].y + _708;
    float _2117 = cbLight._m0[_1922].z + _709;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_1922].xyz));
    float _4237 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2129 = dot(vec3(_628, _629, _630), vec3(_2122, _2123, _2124));
    float _4248 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2122, _2123, _2124));
    float _4259 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2114 * _2114;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2151 = 1.0 - _2114;
    float _2161 = (0.5 / (((_2050 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2050 * _2151) + _2114) * _2128))) * _2128;
    float _4270 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    float _2173 = (((_2150 * cbLight._m0[_2102].x) * _2163) * _1905) + ((((cbLight._m0[_2021].x * _1874) * _2074) * _2088) * _1918);
    float _2174 = (((_2150 * cbLight._m0[_2102].y) * _2163) * _1905) + ((((cbLight._m0[_2021].y * _1875) * _2074) * _2088) * _1918);
    float _2175 = (((_2150 * cbLight._m0[_2102].z) * _2163) * _1905) + ((((cbLight._m0[_2021].z * _1876) * _2074) * _2088) * _1918);
    float _2237;
    float _2239;
    float _2241;
    if (_1958)
    {
        _2237 = _2173;
        _2239 = _2174;
        _2241 = _2175;
    }
    else
    {
        uint _2243 = _1882 + 2u;
        uint _2247 = _1882 + 10u;
        float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _631) * 0.949999988079071044921875);
        float _2262 = _2261 * _2261;
        float _2263 = cbLight._m0[_2243].x + _707;
        float _2264 = cbLight._m0[_2243].y + _708;
        float _2265 = cbLight._m0[_2243].z + _709;
        float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
        float _2270 = _2269 * _2263;
        float _2271 = _2269 * _2264;
        float _2272 = _2269 * _2265;
        float _2273 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2243].xyz));
        float _4281 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2277 = dot(vec3(_628, _629, _630), vec3(_2270, _2271, _2272));
        float _4292 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2281 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2270, _2271, _2272));
        float _4303 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2285 = _2262 * _2262;
        float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
        float _2298 = (exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2299 = 1.0 - _2262;
        float _2309 = (0.5 / (((_2050 * ((_2276 * _2299) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2050 * _2299) + _2262) * _2276))) * _2276;
        float _4314 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2237 = (((_2298 * cbLight._m0[_2247].x) * _2311) * _2312) + _2173;
        _2239 = (((_2298 * cbLight._m0[_2247].y) * _2311) * _2312) + _2174;
        _2241 = (((_2298 * cbLight._m0[_2247].z) * _2311) * _2312) + _2175;
    }
    float _2347;
    float _2349;
    float _2351;
    if (_1976)
    {
        _2347 = _2237;
        _2349 = _2239;
        _2351 = _2241;
    }
    else
    {
        uint _2358 = _1882 + 3u;
        uint _2362 = _1882 + 11u;
        float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _631) * 0.949999988079071044921875);
        float _2377 = _2376 * _2376;
        float _2378 = cbLight._m0[_2358].x + _707;
        float _2379 = cbLight._m0[_2358].y + _708;
        float _2380 = cbLight._m0[_2358].z + _709;
        float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
        float _2385 = _2384 * _2378;
        float _2386 = _2384 * _2379;
        float _2387 = _2384 * _2380;
        float _2388 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2358].xyz));
        float _4330 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2392 = dot(vec3(_628, _629, _630), vec3(_2385, _2386, _2387));
        float _4341 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2396 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2385, _2386, _2387));
        float _4352 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2400 = _2377 * _2377;
        float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
        float _2413 = (exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2414 = 1.0 - _2377;
        float _2424 = (0.5 / (((_2050 * ((_2391 * _2414) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2050 * _2414) + _2377) * _2391))) * _2391;
        float _4363 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2347 = (((_2413 * cbLight._m0[_2362].x) * _2426) * _2427) + _2237;
        _2349 = (((_2413 * cbLight._m0[_2362].y) * _2426) * _2427) + _2239;
        _2351 = (((_2413 * cbLight._m0[_2362].z) * _2426) * _2427) + _2241;
    }
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_1880.y == 0u)
    {
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2502;
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2502;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2502;
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.x;
        uint _2529 = uint((float(_2517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _728) / _2518))) + floor(float(uint(cbSceneParam._m0[85u].x * _727) / _2518)));
        float _2539 = (log2(_2505 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2540 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        uint _2543 = uint(isnan(14.0) ? _2540 : (isnan(_2540) ? 14.0 : min(_2540, 14.0)));
        uvec4 _2548 = texelFetch(g_lightClusterGridBuffer, int(((_2543 << 2u) + (_2529 << 6u)) >> 2u));
        uint _2549 = _2548.x;
        uint _2550 = _2517.z;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((((1u << ((_2550 >> 4u) & 15u)) + 4294967295u) & _2549) == 0u) || ((_2550 & 240u) == 0u))
        {
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
        }
        else
        {
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2817)
                {
                    frontier_phi_68_pred = _2803;
                    frontier_phi_68_pred_1 = _2806;
                    frontier_phi_68_pred_2 = _2805;
                    frontier_phi_68_pred_3 = _2804;
                    frontier_phi_68_pred_4 = _2802;
                    frontier_phi_68_pred_5 = _2801;
                }
                else
                {
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    uint _2952;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2816;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2956 = uint(findLSB(_2952)) + (_2807 << 5u);
                        uint _2953 = (_2952 + 4294967295u) & _2952;
                        uint _2958 = _2956 * 48u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2978 = (_2956 * 48u) + 4u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2997 = (_2956 * 48u) + 8u;
                        vec3 _3008 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x));
                        float _3012 = _2972.x - _2503;
                        float _3013 = _2972.y - _2504;
                        float _3014 = _2972.z - _2505;
                        float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                        float _3018 = inversesqrt(_3015);
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3022 = dot(vec3(_746, _749, _752), vec3(_3019, _3020, _3021));
                        float _3027 = 1.0 - (_3015 * _2972.w);
                        float _4389 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3029 = sqrt(_3015) * _2991.w;
                        float _3032 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _3022) + _3033;
                        float _3039 = _3029 * _3029;
                        float _3043 = ((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3028) / ((_3039 * 0.699999988079071044921875) + 1.0);
                        float _3047 = (-0.0) - _2503;
                        float _3048 = (-0.0) - _2504;
                        float _3049 = (-0.0) - _2505;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3064 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                        float _3065 = 1.0 - _806;
                        float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                        float _3073 = _3072 * _3072;
                        float _3074 = _3073 * _3073;
                        float _3075 = _3054 + _3019;
                        float _3076 = _3055 + _3020;
                        float _3077 = _3056 + _3021;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3085 = dot(vec3(_746, _749, _752), vec3(_3054, _3055, _3056));
                        float _4405 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3089 = dot(vec3(_746, _749, _752), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                        float _4416 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                        float _3097 = _3032 * _3073;
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3022) + _3098;
                        float _4427 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3103 = 1.0 - _3073;
                        float _3113 = (0.5 / (((_3102 * ((_3088 * _3103) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3073) * _3088))) * _3102;
                        float _4438 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3124 = (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3096 * _3096) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125))) * _3028;
                        _2876 = (_3043 * _2991.x) + _2949;
                        _2877 = (_3043 * _2991.y) + _2950;
                        _2878 = (_3043 * _2991.z) + _2951;
                        _2873 = (_3124 * _3008.x) + _2946;
                        _2874 = (_3124 * _3008.y) + _2947;
                        _2875 = (_3124 * _3008.z) + _2948;
                        if (_2953 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2953;
                        }
                    }
                    frontier_phi_68_pred = _2875;
                    frontier_phi_68_pred_1 = _2878;
                    frontier_phi_68_pred_2 = _2877;
                    frontier_phi_68_pred_3 = _2876;
                    frontier_phi_68_pred_4 = _2874;
                    frontier_phi_68_pred_5 = _2873;
                }
                _2654 = frontier_phi_68_pred;
                _2660 = frontier_phi_68_pred_1;
                _2658 = frontier_phi_68_pred_2;
                _2656 = frontier_phi_68_pred_3;
                _2652 = frontier_phi_68_pred_4;
                _2650 = frontier_phi_68_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2650;
                    _2802 = _2652;
                    _2803 = _2654;
                    _2804 = _2656;
                    _2805 = _2658;
                    _2806 = _2660;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
        }
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.z;
        uint _2666 = (_2664 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2666) & _2549) == 0u)
        {
            _2769 = _2649;
            _2771 = _2651;
            _2773 = _2653;
            _2775 = _2655;
            _2777 = _2657;
            _2779 = _2659;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
            float _2795 = _2794 * _2503;
            float _2796 = _2794 * _2504;
            float _2797 = _2794 * _2505;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2666 < ((_2664 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2929 = _2649;
                float _2930 = _2651;
                float _2931 = _2653;
                float _2932 = _2655;
                float _2933 = _2657;
                float _2934 = _2659;
                uint _2935 = _2666;
                uint _2944;
                bool _2945;
                for (;;)
                {
                    _2944 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                    _2945 = _2944 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2945)
                    {
                        frontier_phi_79_pred = _2934;
                        frontier_phi_79_pred_1 = _2933;
                        frontier_phi_79_pred_2 = _2932;
                        frontier_phi_79_pred_3 = _2931;
                        frontier_phi_79_pred_4 = _2930;
                        frontier_phi_79_pred_5 = _2929;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        uint _3157 = _2944;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3227;
                        vec4 _3243;
                        float _3290;
                        bool _3291;
                        for (;;)
                        {
                            uint _3168 = ((_2935 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3214 = (_3168 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3168 * 40u) + 20u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3246 = (_3168 * 40u) + 24u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3265 = (_3168 * 40u) + 28u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3290 = fma(_2505, _3278.z, fma(_2504, _3278.y, _3278.x * _2503)) + _3278.w;
                            _3291 = !((fma(_2505, _3259.z, fma(_2504, _3259.y, _3259.x * _2503)) + _3259.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3291)
                            {
                                float _3318 = _3183.x - _2503;
                                float _3319 = _3183.y - _2504;
                                float _3320 = _3183.z - _2505;
                                float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                                float _3324 = inversesqrt(_3321);
                                float _3325 = _3324 * _3318;
                                float _3326 = _3324 * _3319;
                                float _3327 = _3324 * _3320;
                                float _3331 = 1.0 - (_3321 / (_3184 * _3184));
                                float _4449 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3336 = sqrt(_3321) * _3199.w;
                                float _3338 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                                float _3339 = _3338 * _3338;
                                float _3342 = ((1.0 - _3339) * dot(vec3(_3325, _3326, _3327), vec3(_746, _749, _752))) + _3339;
                                float _3345 = _3336 * _3336;
                                float _3349 = (fma(_2505, _3227.z, fma(_2504, _3227.y, _3227.x * _2503)) + _3227.w) / _3290;
                                float _3350 = (fma(_2505, _3243.z, fma(_2504, _3243.y, _3243.x * _2503)) + _3243.w) / _3290;
                                float _3354 = 1.0 - dot(vec2(_3349, _3350), vec2(_3349, _3350));
                                float _4465 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3356 = _3355 * (((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3332) / ((_3345 * 0.699999988079071044921875) + 1.0));
                                float _3368 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                                float _3369 = 1.0 - _806;
                                float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                                float _3377 = _3376 * _3376;
                                float _3378 = _3377 * _3377;
                                float _3379 = _3325 - _2795;
                                float _3380 = _3326 - _2796;
                                float _3381 = _3327 - _2797;
                                float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                                float _3389 = dot(vec3(_746, _749, _752), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4476 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3393 = dot(vec3(_746, _749, _752), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                                float _4487 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                                float _3401 = _3338 * _3377;
                                float _3402 = _3401 * _3401;
                                float _3408 = ((1.0 - _3402) * dot(vec3(_746, _749, _752), vec3(_3325, _3326, _3327))) + _3402;
                                float _4498 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3410 = 1.0 - _3377;
                                float _3420 = (0.5 / (((_3409 * ((_3392 * _3410) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3377) * _3392))) * _3409;
                                float _4509 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3430 = (_3355 * _3332) * (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) / ((_3400 * _3400) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3356 * _3199.z;
                                frontier_phi_85_pred_1 = _3356 * _3199.y;
                                frontier_phi_85_pred_2 = _3356 * _3199.x;
                                frontier_phi_85_pred_3 = _3430 * _3211.z;
                                frontier_phi_85_pred_4 = _3430 * _3211.y;
                                frontier_phi_85_pred_5 = _3430 * _3211.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3439 = frontier_phi_85_pred;
                            _3438 = frontier_phi_85_pred_1;
                            _3437 = frontier_phi_85_pred_2;
                            _3436 = frontier_phi_85_pred_3;
                            _3435 = frontier_phi_85_pred_4;
                            _3434 = frontier_phi_85_pred_5;
                            _3141 = _3437 + _3154;
                            _3142 = _3438 + _3155;
                            _3143 = _3439 + _3156;
                            _3138 = _3434 + _3151;
                            _3139 = _3435 + _3152;
                            _3140 = _3436 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3143;
                        frontier_phi_79_pred_1 = _3142;
                        frontier_phi_79_pred_2 = _3141;
                        frontier_phi_79_pred_3 = _3140;
                        frontier_phi_79_pred_4 = _3139;
                        frontier_phi_79_pred_5 = _3138;
                    }
                    _2780 = frontier_phi_79_pred;
                    _2778 = frontier_phi_79_pred_1;
                    _2776 = frontier_phi_79_pred_2;
                    _2774 = frontier_phi_79_pred_3;
                    _2772 = frontier_phi_79_pred_4;
                    _2770 = frontier_phi_79_pred_5;
                    uint _2936 = _2935 + 1u;
                    if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2929 = _2770;
                        _2930 = _2772;
                        _2931 = _2774;
                        _2932 = _2776;
                        _2933 = _2778;
                        _2934 = _2780;
                        _2935 = _2936;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2776;
                frontier_phi_60_61_ladder_1 = _2780;
                frontier_phi_60_61_ladder_2 = _2778;
                frontier_phi_60_61_ladder_3 = _2774;
                frontier_phi_60_61_ladder_4 = _2772;
                frontier_phi_60_61_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_60_61_ladder = _2655;
                frontier_phi_60_61_ladder_1 = _2659;
                frontier_phi_60_61_ladder_2 = _2657;
                frontier_phi_60_61_ladder_3 = _2653;
                frontier_phi_60_61_ladder_4 = _2651;
                frontier_phi_60_61_ladder_5 = _2649;
            }
            _2769 = frontier_phi_60_61_ladder_5;
            _2771 = frontier_phi_60_61_ladder_4;
            _2773 = frontier_phi_60_61_ladder_3;
            _2775 = frontier_phi_60_61_ladder;
            _2777 = frontier_phi_60_61_ladder_2;
            _2779 = frontier_phi_60_61_ladder_1;
        }
        float _2784 = isnan(1.0) ? _790 : (isnan(_790) ? 1.0 : min(_790, 1.0));
        _2561 = (_2784 * _2775) + _2014;
        _2563 = (_2784 * _2777) + _2016;
        _2565 = (_2784 * _2779) + _2018;
        _2567 = ((_2769 * 0.039999999105930328369140625) * _2784) + _2347;
        _2569 = ((_2771 * 0.039999999105930328369140625) * _2784) + _2349;
        _2571 = ((_2773 * 0.039999999105930328369140625) * _2784) + _2351;
    }
    else
    {
        _2561 = _2014;
        _2563 = _2016;
        _2565 = _2018;
        _2567 = _2347;
        _2569 = _2349;
        _2571 = _2351;
    }
    float _4525 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4536 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4547 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2588 = ((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2561 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _790))) + ((_2567 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1629)) * cbPerFrame._m0[3u].x);
    float _2589 = ((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2563 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _790))) + ((_2569 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1629)) * cbPerFrame._m0[3u].x);
    float _2590 = ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2565 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _790))) + ((_2571 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1629)) * cbPerFrame._m0[3u].x);
    uint _2591 = _765 + 6u;
    float _2599 = _727 / cbSceneParam._m0[86u].x;
    float _2600 = _728 / cbSceneParam._m0[86u].y;
    vec4 _2614 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2616 = _2614.x;
    float _2617 = _2614.y;
    float _2618 = _2614.z;
    float _2619 = _2614.w;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2674 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2675 = _2674 / _650;
        float _2686 = _2675 * _700;
        float _2687 = _701 * _2675;
        float _2688 = (-0.0) - _2687;
        float _2689 = _2675 * _702;
        float _2691 = (cbSceneParam._m0[77u].w * _2688) / _2674;
        float _2692 = _2691 + cbSceneParam._m0[79u].w;
        float _2693 = cbSceneParam._m0[79u].w - _2687;
        float _2699 = sqrt(((_2686 * _2686) + (_2687 * _2687)) + (_2689 * _2689));
        float _2702 = (1.0 - (cbSceneParam._m0[77u].w / _2674)) * _2699;
        float _2707 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2709 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2886;
        if (abs((_2688 - _2691) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2886 = ((((_2692 > 0.0) ? exp2(_2707 * _2692) : (2.0 - exp2(_2709 * _2692))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2702;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : max(_2692, _2693));
            float _2832 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : min(_2692, _2693));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2886 = ((abs(_2699 / _2688) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2707 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2707 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2709 * _2841) - exp2(_2709 * _2842)) * _2830))) + (_2702 * cbSceneParam._m0[80u].z);
        }
        vec4 _2888 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, 1.0), 0.0);
        float _2897 = exp2((_2886 * (-1.44269502162933349609375)) * (1.0 - _2888.w));
        float _2898 = log2(_2897);
        float _2914 = log2(_2619);
        _2711 = (exp2(_2914 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].x)) * _2888.x) / cbSceneParam._m0[78u].x)) + _2616;
        _2713 = (exp2(_2914 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].y)) * _2888.y) / cbSceneParam._m0[78u].y)) + _2617;
        _2715 = (exp2(_2914 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].z)) * _2888.z) / cbSceneParam._m0[78u].z)) + _2618;
        _2717 = _2897 * _2619;
    }
    else
    {
        _2711 = _2616;
        _2713 = _2617;
        _2715 = _2618;
        _2717 = _2619;
    }
    bool _2924;
    vec4 _2727;
    vec4 _2749;
    float _2751;
    float _2755;
    float _2756;
    float _2757;
    float _2758;
    bool _2768;
    for (;;)
    {
        _2727 = cbMatDynParam._m0[0u];
        float _2729 = roundEven(_2727.y);
        bool _2730 = _2729 == 3.0;
        float _2731 = log2(_2717);
        float _2738 = exp2(_2731 * cbSceneParam._m0[78u].x) * _2588;
        float _2739 = exp2(_2731 * cbSceneParam._m0[78u].y) * _2589;
        float _2740 = exp2(_2731 * cbSceneParam._m0[78u].z) * _2590;
        float _2747 = _716 + (-0.5);
        _2749 = cbMtdParam._m0[1u];
        _2751 = _2749.y * _2747;
        float _2754 = (_2729 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2755 = _2754 * (_2730 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2711)));
        _2756 = _2754 * (_2730 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2713)));
        _2757 = _2754 * (_2730 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2715)));
        _2758 = _2747 * 0.999000012874603271484375;
        _2768 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2768)
        {
            if ((cbInstanceData._m0[_765 + 7u].x + _2758) < 0.5)
            {
                _2924 = true;
                break;
            }
        }
        uint _2865 = _766 + uint(_2727.w);
        if ((cbInstanceData._m0[_2865].w < 1.0) && ((cbInstanceData._m0[_2865].w + _2758) < 0.5))
        {
            _2924 = true;
            break;
        }
        if ((_2751 + 1.0) < _2749.x)
        {
            _2924 = true;
            break;
        }
        _2924 = false;
        break;
    }
    float _3129;
    if (_2924)
    {
        discard_state = true;
        _3129 = 0.0;
    }
    else
    {
        _3129 = cbInstanceData._m0[_2591].w;
    }
    SV_Target.x = _2755;
    SV_Target.y = _2756;
    SV_Target.z = _2757;
    SV_Target.w = _3129;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2591].w;
    discard_exit();
}


