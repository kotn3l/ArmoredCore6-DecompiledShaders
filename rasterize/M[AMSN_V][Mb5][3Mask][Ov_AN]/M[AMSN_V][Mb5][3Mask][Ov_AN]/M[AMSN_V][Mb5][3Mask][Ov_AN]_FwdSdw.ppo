#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1148;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _283 = cbMtdParam._m0[10u].y * texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _294 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - _254.x) * 2.0) - _283)) + 1.0;
    float _3745 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    vec4 _307 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _309 = _307.x;
    float _310 = _307.y;
    float _311 = _307.z;
    vec4 _324 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _335 = ((_324.x - _309) * _295) + _309;
    float _336 = ((_324.y - _310) * _295) + _310;
    float _337 = ((_324.z - _311) * _295) + _311;
    float _343 = (((((1.0 - _254.y) * 2.0) - _283) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].w) + 1.0;
    float _3756 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    vec4 _357 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _368 = ((_357.x - _335) * _344) + _335;
    float _369 = ((_357.y - _336) * _344) + _336;
    float _370 = ((_357.z - _337) * _344) + _337;
    float _376 = (((((1.0 - _254.z) * 2.0) - _283) * (-1.39999997615814208984375)) * cbMtdParam._m0[10u].x) + 1.0;
    float _3767 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    vec4 _389 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _400 = ((_389.x - _368) * _377) + _368;
    float _401 = ((_389.y - _369) * _377) + _369;
    float _402 = ((_389.z - _370) * _377) + _370;
    float _408 = ((((TEXCOORD.w * 2.0) - _283) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3778 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    vec4 _422 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _447 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _454 = ((((_422.x - _400) * _409) + _400) * 4.55000019073486328125) * _447.x;
    float _456 = ((((_422.y - _401) * _409) + _401) * 4.55000019073486328125) * _447.y;
    float _458 = ((((_422.z - _402) * _409) + _402) * 4.55000019073486328125) * _447.z;
    vec4 _470 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    vec4 _486 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _497 = ((_486.x - _472) * _295) + _472;
    float _498 = ((_486.y - _473) * _295) + _473;
    float _499 = ((_486.z - _474) * _295) + _474;
    vec4 _512 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _523 = ((_512.x - _497) * _344) + _497;
    float _524 = ((_512.y - _498) * _344) + _498;
    float _525 = ((_512.z - _499) * _344) + _499;
    vec4 _538 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _549 = ((_538.x - _523) * _377) + _523;
    float _550 = ((_538.y - _524) * _377) + _524;
    float _551 = ((_538.z - _525) * _377) + _525;
    vec4 _564 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _577 = ((_564.z - _551) * _409) + _551;
    float _580 = ((((_564.x - _549) * _409) + _549) * 2.0) + (-1.0);
    float _582 = ((((_564.y - _550) * _409) + _550) * 2.0) + (-1.0);
    float _583 = dot(vec2(_580, _582), vec2(_580, _582));
    float _3789 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))));
    vec4 _601 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _611 = (((_601.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z) + _580;
    float _612 = (((_601.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z) + _582;
    float _615 = fma(_588, _238, fma(_612, _230 * TANGENT.x, (_216 * _208) * _611));
    float _618 = fma(_588, _239, fma(_612, _230 * TANGENT.y, (_216 * _209) * _611));
    float _621 = fma(_588, _240, fma(_612, _230 * TANGENT.z, (_216 * _210) * _611));
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    float _626 = _625 * _615;
    float _627 = _625 * _618;
    float _628 = _625 * _621;
    float _3800 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _629 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3822 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3833 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _698 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _688);
    float _699 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _688);
    float _700 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _688);
    float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
    float _705 = _698 * _704;
    float _706 = _699 * _704;
    float _707 = _700 * _704;
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _732 = fma(_628, cbSceneParam._m0[5u].z, fma(_627, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _626));
    float _735 = fma(_628, cbSceneParam._m0[6u].z, fma(_627, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _626));
    float _738 = fma(_628, cbSceneParam._m0[7u].z, fma(_627, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _626));
    uint _751 = uint(roundEven(NORMAL.w)) * 13u;
    uint _753 = (_751 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _759 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_753].x;
    float _760 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_753].y;
    float _761 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_753].z;
    float _3844 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    vec4 _773 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _776 = _773.x * TEXCOORD.z;
    float _777 = dot(vec3(_626, _627, _628), vec3(_705, _706, _707));
    float _780 = _777 * 2.0;
    float _784 = (_780 * _626) - _705;
    float _785 = (_780 * _627) - _706;
    float _786 = (_780 * _628) - _707;
    float _790 = abs(dot(vec3(_705, _706, _707), vec3(_626, _627, _628)));
    float _3877 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = sqrt(_629);
    float _805 = exp2((_792 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_792 * 3.0));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1147;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _872 = fma(_845, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837));
        float _876 = fma(_845, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837));
        float _880 = fma(_845, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837));
        float _905 = _837 + _626;
        float _906 = _841 + _627;
        float _907 = _845 + _628;
        float _917 = fma(_907, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905)) - _872;
        float _918 = fma(_907, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905)) - _876;
        float _919 = fma(_907, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905)) - _880;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_872 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_876 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[34u].z) + ((((((_880 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _975 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_941.x + (-0.5));
        float _977 = _975 * (_941.y + (-0.5));
        float _978 = _975 * (_941.z + (-0.5));
        float _985 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_948.x + (-0.5));
        float _987 = _985 * (_948.y + (-0.5));
        float _988 = _985 * (_948.z + (-0.5));
        float _995 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_955.x + (-0.5));
        float _997 = _995 * (_955.y + (-0.5));
        float _998 = _995 * (_955.z + (-0.5));
        float _1005 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_962.x + (-0.5));
        float _1007 = _1005 * (_962.y + (-0.5));
        float _1008 = _1005 * (_962.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1029 = (dot(vec3(_626, _627, _628), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1039 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3925 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1041 + 1.0))) + _1046) * _1009;
        float _1056 = _977 * 0.5;
        float _1057 = _987 * 0.5;
        float _1058 = _997 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_626, _627, _628), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3958 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1083 + 1.0))) + _1088) * _1010;
        float _1098 = _978 * 0.5;
        float _1099 = _988 * 0.5;
        float _1100 = _998 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_626, _627, _628), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3991 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1125 + 1.0))) + _1130) * _1011;
        _1147 = _978;
        _1149 = _977;
        _1150 = _976;
        _1151 = _988;
        _1152 = _987;
        _1153 = _986;
        _1154 = _998;
        _1155 = _997;
        _1156 = _996;
        _1157 = _1011;
        _1158 = _1010;
        _1159 = _1009;
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _1148;
        _1149 = _1148;
        _1150 = _1148;
        _1151 = _1148;
        _1152 = _1148;
        _1153 = _1148;
        _1154 = _1148;
        _1155 = _1148;
        _1156 = _1148;
        _1157 = _1148;
        _1158 = _1148;
        _1159 = _1148;
        _1160 = 0.0;
        _1161 = 0.0;
        _1162 = 0.0;
    }
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1188 = fma(_845, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _837));
        float _1192 = fma(_845, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _837));
        float _1196 = fma(_845, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _837));
        float _1219 = _837 + _626;
        float _1220 = _841 + _627;
        float _1221 = _845 + _628;
        float _1231 = fma(_1221, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219)) - _1188;
        float _1232 = fma(_1221, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219)) - _1192;
        float _1233 = fma(_1221, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219)) - _1196;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1188 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1192 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[35u].z) + ((((((_1196 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1287 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1254.x + (-0.5));
        float _1289 = _1287 * (_1254.y + (-0.5));
        float _1290 = _1287 * (_1254.z + (-0.5));
        float _1297 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1261.x + (-0.5));
        float _1299 = _1297 * (_1261.y + (-0.5));
        float _1300 = _1297 * (_1261.z + (-0.5));
        float _1307 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1268.x + (-0.5));
        float _1309 = _1307 * (_1268.y + (-0.5));
        float _1310 = _1307 * (_1268.z + (-0.5));
        float _1317 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1275.x + (-0.5));
        float _1319 = _1317 * (_1275.y + (-0.5));
        float _1320 = _1317 * (_1275.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_626, _627, _628), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4054 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1351 + 1.0))) + _1356) * _1321;
        float _1366 = _1289 * 0.5;
        float _1367 = _1299 * 0.5;
        float _1368 = _1309 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_626, _627, _628), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4087 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1393 + 1.0))) + _1398) * _1322;
        float _1408 = _1290 * 0.5;
        float _1409 = _1300 * 0.5;
        float _1410 = _1310 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_626, _627, _628), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4120 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1435 + 1.0))) + _1440) * _1323;
        _1457 = _1290;
        _1458 = _1289;
        _1459 = _1288;
        _1460 = _1300;
        _1461 = _1299;
        _1462 = _1298;
        _1463 = _1310;
        _1464 = _1309;
        _1465 = _1308;
        _1466 = _1323;
        _1467 = _1322;
        _1468 = _1321;
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1148;
        _1458 = _1148;
        _1459 = _1148;
        _1460 = _1148;
        _1461 = _1148;
        _1462 = _1148;
        _1463 = _1148;
        _1464 = _1148;
        _1465 = _1148;
        _1466 = _1148;
        _1467 = _1148;
        _1468 = _1148;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1160)) + _1160;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1161)) + _1161;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1162)) + _1162;
    float _1504 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1481));
    float _1525 = _784 * 0.5;
    float _1526 = _785 * 0.5;
    float _1527 = _786 * 0.5;
    float _1528 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1531 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1534 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1568;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1541 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1147, _1151, _1154, _1157));
        float _1545 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1549 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1150, _1153, _1156, _1159));
        float _1556 = dot(vec4(cbModelParam._m0[39u]), vec4(_1525, _1526, _1527, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1579;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1570 = dot(vec4(cbModelParam._m0[40u]), vec4(_1525, _1526, _1527, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1583 = (_1579 * cbModelParam._m0[1u].x) + (_1568 * (1.0 - cbModelParam._m0[1u].x));
    float _1593 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _629);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1593 : min(cbModelParam._m0[25u].z, _1593));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_845, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_845, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_845, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_786, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784));
        float _1657 = fma(_786, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784));
        float _1660 = fma(_786, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1688 = frontier_phi_16_14_ladder;
        }
        float _1861;
        if (_1657 > 0.0)
        {
            _1861 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1861 = frontier_phi_25_21_ladder;
        }
        float _2156;
        if (_1660 > 0.0)
        {
            _2156 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2156 = frontier_phi_37_32_ladder;
        }
        float _2158 = isnan(_1861) ? _1688 : (isnan(_1688) ? _1861 : min(_1688, _1861));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1654) + _1643;
        float _2164 = (_2159 * _1657) + _1647;
        float _2165 = (_2159 * _1660) + _1651;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1594);
            frontier_phi_15_37_ladder = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2310.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2310.z * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_15_37_ladder_1;
        _1678 = frontier_phi_15_37_ladder;
        _1680 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_784, _785, _786), _1594);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _629);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1742 = fma(_845, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837)) + cbModelParam._m0[21u].w;
        float _1746 = fma(_845, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837)) + cbModelParam._m0[22u].w;
        float _1750 = fma(_845, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837)) + cbModelParam._m0[23u].w;
        float _1753 = fma(_786, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784));
        float _1756 = fma(_786, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784));
        float _1759 = fma(_786, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784));
        float _1866;
        if (_1753 > 0.0)
        {
            _1866 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1866 = frontier_phi_27_23_ladder;
        }
        float _2183;
        if (_1756 > 0.0)
        {
            _2183 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2183 = frontier_phi_39_34_ladder;
        }
        float _2510;
        if (_1759 > 0.0)
        {
            _2510 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2510 = frontier_phi_49_46_ladder;
        }
        float _2512 = isnan(_2183) ? _1866 : (isnan(_1866) ? _2183 : min(_1866, _2183));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1753) + _1742;
        float _2518 = (_2513 * _1756) + _1746;
        float _2519 = (_2513 * _1759) + _1750;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_24_49_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1778 = frontier_phi_24_49_ladder_2;
        _1780 = frontier_phi_24_49_ladder_1;
        _1782 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_784, _785, _786), _1685);
        _1778 = _1762.x * cbModelParam._m0[1u].z;
        _1780 = _1762.y * cbModelParam._m0[1u].z;
        _1782 = _1762.z * cbModelParam._m0[1u].z;
    }
    float _1794 = ((((1.0 - _805) * ((_792 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_805 * _792)) * _776;
    float _1795 = _1794 * ((cbModelParam._m0[1u].w * (_1778 - _1676)) + _1676);
    float _1796 = _1794 * ((cbModelParam._m0[1u].w * (_1780 - _1678)) + _1678);
    float _1797 = _1794 * ((cbModelParam._m0[1u].w * (_1782 - _1680)) + _1680);
    float _1800 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1795 * cbSceneParam._m0[91u].x));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1853 = _1840 / _1852;
    float _1854 = _1844 / _1852;
    float _1855 = _1848 / _1852;
    float _2002;
    float _2003;
    float _2004;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1882 = ((uint(_1855 > cbSceneParam._m0[59u].y) + uint(_1855 > cbSceneParam._m0[59u].x)) + uint(_1855 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1883 = _1882 + 43u;
        uint _1891 = _1882 + 44u;
        uint _1899 = _1882 + 45u;
        uint _1907 = _1882 + 46u;
        float _1918 = fma(_1852, cbSceneParam._m0[_1883].w, fma(_1848, cbSceneParam._m0[_1883].z, fma(_1844, cbSceneParam._m0[_1883].y, _1840 * cbSceneParam._m0[_1883].x)));
        float _1922 = fma(_1852, cbSceneParam._m0[_1891].w, fma(_1848, cbSceneParam._m0[_1891].z, fma(_1844, cbSceneParam._m0[_1891].y, _1840 * cbSceneParam._m0[_1891].x)));
        float _1930 = fma(_1852, cbSceneParam._m0[_1907].w, fma(_1848, cbSceneParam._m0[_1907].z, fma(_1844, cbSceneParam._m0[_1907].y, _1840 * cbSceneParam._m0[_1907].x)));
        float _1935 = cbSceneParam._m0[33u].z * _1930;
        float _1937 = cbSceneParam._m0[33u].w * _1930;
        float _1940 = fma(_1852, cbSceneParam._m0[_1899].w, fma(_1848, cbSceneParam._m0[_1899].z, fma(_1844, cbSceneParam._m0[_1899].y, _1840 * cbSceneParam._m0[_1899].x))) / _1930;
        float _1988 = (cbSceneParam._m0[33u].x - sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855))) * cbSceneParam._m0[33u].y;
        float _4246 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1995 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1935 + _1918) / _1930, (_1937 + _1922) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 + _1918) / _1930, (_1922 - _1935) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 - _1935) / _1930, (_1922 - _1937) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 - _1937) / _1930, (_1935 + _1922) / _1930), _1940), 0.0)).x), vec4(0.25)));
        _2002 = 1.0 - (_1995 * cbSceneParam._m0[34u].x);
        _2003 = 1.0 - (_1995 * cbSceneParam._m0[34u].y);
        _2004 = 1.0 - (_1995 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2002 = 1.0;
        _2003 = 1.0;
        _2004 = 1.0;
    }
    float _2068;
    float _2070;
    float _2072;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2056 = fma(_1852, cbSceneParam._m0[63u].w, fma(_1848, cbSceneParam._m0[63u].z, fma(_1844, cbSceneParam._m0[63u].y, _1840 * cbSceneParam._m0[63u].x)));
        float _2057 = fma(_1852, cbSceneParam._m0[60u].w, fma(_1848, cbSceneParam._m0[60u].z, fma(_1844, cbSceneParam._m0[60u].y, _1840 * cbSceneParam._m0[60u].x))) / _2056;
        float _2058 = fma(_1852, cbSceneParam._m0[61u].w, fma(_1848, cbSceneParam._m0[61u].z, fma(_1844, cbSceneParam._m0[61u].y, _1840 * cbSceneParam._m0[61u].x))) / _2056;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2057 >= cbSceneParam._m0[64u].x) && (_2058 >= cbSceneParam._m0[64u].y)) && (_2057 <= cbSceneParam._m0[64u].z)) && (_2058 <= cbSceneParam._m0[64u].w))
        {
            float _2196 = fma(_1852, cbSceneParam._m0[62u].w, fma(_1848, cbSceneParam._m0[62u].z, fma(_1844, cbSceneParam._m0[62u].y, _1840 * cbSceneParam._m0[62u].x))) / _2056;
            float _2200 = isnan(cbSceneParam._m0[41u].w) ? _2196 : (isnan(_2196) ? cbSceneParam._m0[41u].w : max(_2196, cbSceneParam._m0[41u].w));
            float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855))) * cbSceneParam._m0[33u].y;
            float _4262 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
            float _2250 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2057, cbSceneParam._m0[33u].w + _2058), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2057, _2058 - cbSceneParam._m0[33u].z), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2057 - cbSceneParam._m0[33u].z, _2058 - cbSceneParam._m0[33u].w), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2057 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2058), _2200), 0.0)).x), vec4(0.25)));
            float _2254 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
            float _2255 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
            float _2256 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2255) ? _2003 : (isnan(_2003) ? _2255 : min(_2003, _2255));
            frontier_phi_36_35_ladder_1 = isnan(_2256) ? _2004 : (isnan(_2004) ? _2256 : min(_2004, _2256));
            frontier_phi_36_35_ladder_2 = isnan(_2254) ? _2002 : (isnan(_2002) ? _2254 : min(_2002, _2254));
        }
        else
        {
            frontier_phi_36_35_ladder = _2003;
            frontier_phi_36_35_ladder_1 = _2004;
            frontier_phi_36_35_ladder_2 = _2002;
        }
        _2068 = frontier_phi_36_35_ladder_2;
        _2070 = frontier_phi_36_35_ladder;
        _2072 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2068 = _2002;
        _2070 = _2003;
        _2072 = _2004;
    }
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_751 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _776 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2115 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2119 = _2079 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_626, _627, _628));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_626, _627, _628));
    float _4298 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4309 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2096].x * _2102) * _2140) + (((cbLight._m0[_2106].x * _2068) * _2115) * _2138);
    float _2148 = ((_2102 * cbLight._m0[_2096].y) * _2140) + (((cbLight._m0[_2106].y * _2070) * _2115) * _2138);
    float _2149 = ((_2102 * cbLight._m0[_2096].z) * _2140) + (((cbLight._m0[_2106].z * _2072) * _2115) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2155)
    {
        _2257 = _2147;
        _2259 = _2148;
        _2261 = _2149;
    }
    else
    {
        uint _2265 = _2079 + 6u;
        float _2281 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4320 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2284 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2257 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2147;
        _2259 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2148;
        _2261 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2149;
    }
    bool _2264 = _2153.y == 0u;
    float _2319;
    float _2321;
    float _2323;
    if (_2264)
    {
        _2319 = _2257;
        _2321 = _2259;
        _2323 = _2261;
    }
    else
    {
        uint _2481 = _2079 + 7u;
        float _2497 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _2498 = _2497 * _2497;
        float _4336 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2499 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2500 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2319 = (((cbLight._m0[_2481].x * 0.3183098733425140380859375) * _2499) * _2500) + _2257;
        _2321 = (((cbLight._m0[_2481].y * 0.3183098733425140380859375) * _2499) * _2500) + _2259;
        _2323 = (((cbLight._m0[_2481].z * 0.3183098733425140380859375) * _2499) * _2500) + _2261;
    }
    uint _2326 = _2079 + 8u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _629) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2079].x + _705;
    float _2342 = cbLight._m0[_2079].y + _706;
    float _2343 = cbLight._m0[_2079].z + _707;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2079].xyz));
    float _4352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _2355 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2356 = dot(vec3(_626, _627, _628), vec3(_2348, _2349, _2350));
    float _4374 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2348, _2349, _2350));
    float _4385 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2340 * _2340;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2380 = 1.0 - _2340;
    float _2391 = (0.5 / (((_2355 * ((_2354 * _2380) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2380) + _2340) * _2354))) * _2354;
    float _4396 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    uint _2407 = _2079 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _629) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2119].x + _705;
    float _2421 = cbLight._m0[_2119].y + _706;
    float _2422 = cbLight._m0[_2119].z + _707;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2119].xyz));
    float _4407 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2434 = dot(vec3(_626, _627, _628), vec3(_2427, _2428, _2429));
    float _4418 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2427, _2428, _2429));
    float _4429 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2456 = 1.0 - _2419;
    float _2466 = (0.5 / (((_2355 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2456) + _2419) * _2433))) * _2433;
    float _4440 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2478 = (((_2455 * cbLight._m0[_2407].x) * _2468) * _2102) + ((((cbLight._m0[_2326].x * _2068) * _2379) * _2393) * _2115);
    float _2479 = (((_2455 * cbLight._m0[_2407].y) * _2468) * _2102) + ((((cbLight._m0[_2326].y * _2070) * _2379) * _2393) * _2115);
    float _2480 = (((_2455 * cbLight._m0[_2407].z) * _2468) * _2102) + ((((cbLight._m0[_2326].z * _2072) * _2379) * _2393) * _2115);
    float _2536;
    float _2538;
    float _2540;
    if (_2155)
    {
        _2536 = _2478;
        _2538 = _2479;
        _2540 = _2480;
    }
    else
    {
        uint _2542 = _2079 + 2u;
        uint _2546 = _2079 + 10u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _629) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _705;
        float _2563 = cbLight._m0[_2542].y + _706;
        float _2564 = cbLight._m0[_2542].z + _707;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2542].xyz));
        float _4451 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2576 = dot(vec3(_626, _627, _628), vec3(_2569, _2570, _2571));
        float _4462 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4473 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2598 = 1.0 - _2561;
        float _2608 = (0.5 / (((_2355 * ((_2575 * _2598) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2598) + _2561) * _2575))) * _2575;
        float _4484 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2536 = (((_2597 * cbLight._m0[_2546].x) * _2610) * _2611) + _2478;
        _2538 = (((_2597 * cbLight._m0[_2546].y) * _2610) * _2611) + _2479;
        _2540 = (((_2597 * cbLight._m0[_2546].z) * _2610) * _2611) + _2480;
    }
    float _2642;
    float _2644;
    float _2646;
    if (_2264)
    {
        _2642 = _2536;
        _2644 = _2538;
        _2646 = _2540;
    }
    else
    {
        uint _2653 = _2079 + 3u;
        uint _2657 = _2079 + 11u;
        float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2653].w)) * _629) * 0.949999988079071044921875);
        float _2672 = _2671 * _2671;
        float _2673 = cbLight._m0[_2653].x + _705;
        float _2674 = cbLight._m0[_2653].y + _706;
        float _2675 = cbLight._m0[_2653].z + _707;
        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
        float _2680 = _2679 * _2673;
        float _2681 = _2679 * _2674;
        float _2682 = _2679 * _2675;
        float _2683 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2653].xyz));
        float _4500 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2687 = dot(vec3(_626, _627, _628), vec3(_2680, _2681, _2682));
        float _4511 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2691 = dot(vec3(cbLight._m0[_2653].xyz), vec3(_2680, _2681, _2682));
        float _4522 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2695 = _2672 * _2672;
        float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
        float _2708 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2709 = 1.0 - _2672;
        float _2719 = (0.5 / (((_2355 * ((_2686 * _2709) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2709) + _2672) * _2686))) * _2686;
        float _4533 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2642 = (((_2708 * cbLight._m0[_2657].x) * _2721) * _2722) + _2536;
        _2644 = (((_2708 * cbLight._m0[_2657].y) * _2721) * _2722) + _2538;
        _2646 = (((_2708 * cbLight._m0[_2657].z) * _2721) * _2722) + _2540;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2077.y == 0u)
    {
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.x;
        uint _2755 = uint((float(_2743.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2744))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2744)));
        float _2765 = (log2(_1855 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2766 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        uint _2769 = uint(isnan(14.0) ? _2766 : (isnan(_2766) ? 14.0 : min(_2766, 14.0)));
        uvec4 _2774 = texelFetch(g_lightClusterGridBuffer, int(((_2769 << 2u) + (_2755 << 6u)) >> 2u));
        uint _2775 = _2774.x;
        uint _2776 = _2743.z;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((((1u << ((_2776 >> 4u) & 15u)) + 4294967295u) & _2775) == 0u) || ((_2776 & 240u) == 0u))
        {
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
        }
        else
        {
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            uint _3004 = 0u;
            uint _3013;
            bool _3014;
            for (;;)
            {
                _3013 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                _3014 = _3013 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3014)
                {
                    frontier_phi_68_pred = _3003;
                    frontier_phi_68_pred_1 = _3002;
                    frontier_phi_68_pred_2 = _3001;
                    frontier_phi_68_pred_3 = _2999;
                    frontier_phi_68_pred_4 = _2998;
                    frontier_phi_68_pred_5 = _3000;
                }
                else
                {
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    uint _3128;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3013;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    for (;;)
                    {
                        uint _3132 = uint(findLSB(_3128)) + (_3004 << 5u);
                        uint _3129 = (_3128 + 4294967295u) & _3128;
                        uint _3134 = _3132 * 48u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 3u)).x));
                        uint _3154 = (_3132 * 48u) + 4u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3173 = (_3132 * 48u) + 8u;
                        vec3 _3184 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x));
                        float _3188 = _3148.x - _1853;
                        float _3189 = _3148.y - _1854;
                        float _3190 = _3148.z - _1855;
                        float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                        float _3194 = inversesqrt(_3191);
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3198 = dot(vec3(_732, _735, _738), vec3(_3195, _3196, _3197));
                        float _3203 = 1.0 - (_3191 * _3148.w);
                        float _4559 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3205 = sqrt(_3191) * _3167.w;
                        float _3208 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3198) + _3209;
                        float _3215 = _3205 * _3205;
                        float _3219 = ((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3204) / ((_3215 * 0.699999988079071044921875) + 1.0);
                        float _3223 = (-0.0) - _1853;
                        float _3224 = (-0.0) - _1854;
                        float _3225 = (-0.0) - _1855;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3239 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                        float _3240 = 1.0 - _792;
                        float _3247 = sqrt(1.0 - ((1.0 - (_3240 * _3240)) * (1.0 - (_3239 * _3239))));
                        float _3248 = _3247 * _3247;
                        float _3249 = _3248 * _3248;
                        float _3250 = _3230 + _3195;
                        float _3251 = _3231 + _3196;
                        float _3252 = _3232 + _3197;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3260 = dot(vec3(_732, _735, _738), vec3(_3230, _3231, _3232));
                        float _4575 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3263 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3264 = dot(vec3(_732, _735, _738), vec3(_3256 * _3250, _3256 * _3251, _3256 * _3252));
                        float _4586 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3271 = ((_3267 * _3267) * (_3249 + (-1.0))) + 1.0;
                        float _3272 = _3208 * _3248;
                        float _3273 = _3272 * _3272;
                        float _3276 = ((1.0 - _3273) * _3198) + _3273;
                        float _4597 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3277 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3278 = 1.0 - _3248;
                        float _3288 = (0.5 / (((_3277 * ((_3263 * _3278) + _3248)) + 9.9999999392252902907785028219223e-09) + (((_3277 * _3278) + _3248) * _3263))) * _3277;
                        float _4608 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3299 = (((_3249 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3271 * _3271) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125))) * _3204;
                        _3057 = (_3219 * _3167.x) + _3125;
                        _3058 = (_3219 * _3167.y) + _3126;
                        _3059 = (_3219 * _3167.z) + _3127;
                        _3054 = (_3299 * _3184.x) + _3122;
                        _3055 = (_3299 * _3184.y) + _3123;
                        _3056 = (_3299 * _3184.z) + _3124;
                        if (_3129 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3129;
                        }
                    }
                    frontier_phi_68_pred = _3059;
                    frontier_phi_68_pred_1 = _3058;
                    frontier_phi_68_pred_2 = _3057;
                    frontier_phi_68_pred_3 = _3055;
                    frontier_phi_68_pred_4 = _3054;
                    frontier_phi_68_pred_5 = _3056;
                }
                _2865 = frontier_phi_68_pred;
                _2863 = frontier_phi_68_pred_1;
                _2861 = frontier_phi_68_pred_2;
                _2857 = frontier_phi_68_pred_3;
                _2855 = frontier_phi_68_pred_4;
                _2859 = frontier_phi_68_pred_5;
                uint _3005 = _3004 + 1u;
                if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2998 = _2855;
                    _2999 = _2857;
                    _3000 = _2859;
                    _3001 = _2861;
                    _3002 = _2863;
                    _3003 = _2865;
                    _3004 = _3005;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
        }
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.z;
        uint _2871 = (_2869 >> 8u) & 15u;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((4294967295u << _2871) & _2775) == 0u)
        {
            _2966 = _2854;
            _2968 = _2856;
            _2970 = _2858;
            _2972 = _2860;
            _2974 = _2862;
            _2976 = _2864;
        }
        else
        {
            float _2991 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
            float _2992 = _2991 * _1853;
            float _2993 = _2991 * _1854;
            float _2994 = _2991 * _1855;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2871 < ((_2869 >> 12u) & 15u))
            {
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _3105 = _2854;
                float _3106 = _2856;
                float _3107 = _2858;
                float _3108 = _2860;
                float _3109 = _2862;
                float _3110 = _2864;
                uint _3111 = _2871;
                uint _3120;
                bool _3121;
                for (;;)
                {
                    _3120 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                    _3121 = _3120 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3121)
                    {
                        frontier_phi_74_pred = _3107;
                        frontier_phi_74_pred_1 = _3106;
                        frontier_phi_74_pred_2 = _3105;
                        frontier_phi_74_pred_3 = _3110;
                        frontier_phi_74_pred_4 = _3109;
                        frontier_phi_74_pred_5 = _3108;
                    }
                    else
                    {
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3317 = _3105;
                        float _3318 = _3106;
                        float _3319 = _3107;
                        float _3320 = _3108;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        uint _3323 = _3120;
                        uint _3324;
                        vec4 _3349;
                        float _3350;
                        vec4 _3365;
                        vec3 _3377;
                        vec4 _3393;
                        vec4 _3409;
                        float _3456;
                        bool _3457;
                        for (;;)
                        {
                            uint _3334 = ((_3111 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3323));
                            _3324 = (_3323 + 4294967295u) & _3323;
                            uint _3336 = _3334 * 40u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            _3350 = _3349.w;
                            uint _3352 = (_3334 * 40u) + 4u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3334 * 40u) + 8u;
                            _3377 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x));
                            uint _3380 = (_3334 * 40u) + 16u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3396 = (_3334 * 40u) + 20u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3412 = (_3334 * 40u) + 24u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3431 = (_3334 * 40u) + 28u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3456 = fma(_1855, _3444.z, fma(_1854, _3444.y, _3444.x * _1853)) + _3444.w;
                            _3457 = !((fma(_1855, _3425.z, fma(_1854, _3425.y, _3425.x * _1853)) + _3425.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3457)
                            {
                                float _3484 = _3349.x - _1853;
                                float _3485 = _3349.y - _1854;
                                float _3486 = _3349.z - _1855;
                                float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                                float _3490 = inversesqrt(_3487);
                                float _3491 = _3490 * _3484;
                                float _3492 = _3490 * _3485;
                                float _3493 = _3490 * _3486;
                                float _3497 = 1.0 - (_3487 / (_3350 * _3350));
                                float _4619 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3502 = sqrt(_3487) * _3365.w;
                                float _3504 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                                float _3505 = _3504 * _3504;
                                float _3508 = ((1.0 - _3505) * dot(vec3(_3491, _3492, _3493), vec3(_732, _735, _738))) + _3505;
                                float _3511 = _3502 * _3502;
                                float _3515 = (fma(_1855, _3393.z, fma(_1854, _3393.y, _3393.x * _1853)) + _3393.w) / _3456;
                                float _3516 = (fma(_1855, _3409.z, fma(_1854, _3409.y, _3409.x * _1853)) + _3409.w) / _3456;
                                float _3520 = 1.0 - dot(vec2(_3515, _3516), vec2(_3515, _3516));
                                float _4635 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3522 = _3521 * (((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3498) / ((_3511 * 0.699999988079071044921875) + 1.0));
                                float _3534 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                                float _3535 = 1.0 - _792;
                                float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                                float _3543 = _3542 * _3542;
                                float _3544 = _3543 * _3543;
                                float _3545 = _3491 - _2992;
                                float _3546 = _3492 - _2993;
                                float _3547 = _3493 - _2994;
                                float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                                float _3555 = dot(vec3(_732, _735, _738), vec3((-0.0) - _2992, (-0.0) - _2993, (-0.0) - _2994));
                                float _4646 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3559 = dot(vec3(_732, _735, _738), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                                float _4657 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                                float _3567 = _3504 * _3543;
                                float _3568 = _3567 * _3567;
                                float _3574 = ((1.0 - _3568) * dot(vec3(_732, _735, _738), vec3(_3491, _3492, _3493))) + _3568;
                                float _4668 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3576 = 1.0 - _3543;
                                float _3586 = (0.5 / (((_3575 * ((_3558 * _3576) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3543) * _3558))) * _3575;
                                float _4679 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3596 = (_3521 * _3498) * (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3566 * _3566) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3596 * _3377.z;
                                frontier_phi_80_pred_1 = _3596 * _3377.y;
                                frontier_phi_80_pred_2 = _3596 * _3377.x;
                                frontier_phi_80_pred_3 = _3522 * _3365.z;
                                frontier_phi_80_pred_4 = _3522 * _3365.y;
                                frontier_phi_80_pred_5 = _3522 * _3365.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3602 = frontier_phi_80_pred;
                            _3601 = frontier_phi_80_pred_1;
                            _3600 = frontier_phi_80_pred_2;
                            _3605 = frontier_phi_80_pred_3;
                            _3604 = frontier_phi_80_pred_4;
                            _3603 = frontier_phi_80_pred_5;
                            _3307 = _3603 + _3320;
                            _3308 = _3604 + _3321;
                            _3309 = _3605 + _3322;
                            _3304 = _3600 + _3317;
                            _3305 = _3601 + _3318;
                            _3306 = _3602 + _3319;
                            if (_3324 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3324;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3306;
                        frontier_phi_74_pred_1 = _3305;
                        frontier_phi_74_pred_2 = _3304;
                        frontier_phi_74_pred_3 = _3309;
                        frontier_phi_74_pred_4 = _3308;
                        frontier_phi_74_pred_5 = _3307;
                    }
                    _2971 = frontier_phi_74_pred;
                    _2969 = frontier_phi_74_pred_1;
                    _2967 = frontier_phi_74_pred_2;
                    _2977 = frontier_phi_74_pred_3;
                    _2975 = frontier_phi_74_pred_4;
                    _2973 = frontier_phi_74_pred_5;
                    uint _3112 = _3111 + 1u;
                    if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3105 = _2967;
                        _3106 = _2969;
                        _3107 = _2971;
                        _3108 = _2973;
                        _3109 = _2975;
                        _3110 = _2977;
                        _3111 = _3112;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2975;
                frontier_phi_62_63_ladder_1 = _2973;
                frontier_phi_62_63_ladder_2 = _2971;
                frontier_phi_62_63_ladder_3 = _2977;
                frontier_phi_62_63_ladder_4 = _2969;
                frontier_phi_62_63_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_62_63_ladder = _2862;
                frontier_phi_62_63_ladder_1 = _2860;
                frontier_phi_62_63_ladder_2 = _2858;
                frontier_phi_62_63_ladder_3 = _2864;
                frontier_phi_62_63_ladder_4 = _2856;
                frontier_phi_62_63_ladder_5 = _2854;
            }
            _2966 = frontier_phi_62_63_ladder_5;
            _2968 = frontier_phi_62_63_ladder_4;
            _2970 = frontier_phi_62_63_ladder_2;
            _2972 = frontier_phi_62_63_ladder_1;
            _2974 = frontier_phi_62_63_ladder;
            _2976 = frontier_phi_62_63_ladder_3;
        }
        float _2981 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
        _2787 = (_2981 * _2972) + _2319;
        _2789 = (_2981 * _2974) + _2321;
        _2791 = (_2981 * _2976) + _2323;
        _2793 = ((_2966 * 0.039999999105930328369140625) * _2981) + _2642;
        _2795 = ((_2968 * 0.039999999105930328369140625) * _2981) + _2644;
        _2797 = ((_2970 * 0.039999999105930328369140625) * _2981) + _2646;
    }
    else
    {
        _2787 = _2319;
        _2789 = _2321;
        _2791 = _2323;
        _2793 = _2642;
        _2795 = _2644;
        _2797 = _2646;
    }
    float _4695 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4706 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4717 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    uint _2817 = _751 + 6u;
    float _2825 = _713 / cbSceneParam._m0[86u].x;
    float _2826 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2879 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2880 = _2879 / _648;
        float _2891 = _2880 * _698;
        float _2892 = _699 * _2880;
        float _2893 = (-0.0) - _2892;
        float _2894 = _2880 * _700;
        float _2896 = (cbSceneParam._m0[77u].w * _2893) / _2879;
        float _2897 = _2896 + cbSceneParam._m0[79u].w;
        float _2898 = cbSceneParam._m0[79u].w - _2892;
        float _2904 = sqrt(((_2891 * _2891) + (_2892 * _2892)) + (_2894 * _2894));
        float _2907 = (1.0 - (cbSceneParam._m0[77u].w / _2879)) * _2904;
        float _2912 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2914 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3067;
        if (abs((_2893 - _2896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3067 = ((((_2897 > 0.0) ? exp2(_2912 * _2897) : (2.0 - exp2(_2914 * _2897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2907;
        }
        else
        {
            float _3027 = 1.0 / cbSceneParam._m0[80u].x;
            float _3028 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : max(_2897, _2898));
            float _3029 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : min(_2897, _2898));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            _3067 = ((abs(_2904 / _2893) * cbSceneParam._m0[80u].y) * ((((_3038 - _3039) * 2.0) - ((exp2(_2912 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0)))) - exp2(_2912 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))))) * _3027)) - ((exp2(_2914 * _3038) - exp2(_2914 * _3039)) * _3027))) + (_2907 * cbSceneParam._m0[80u].z);
        }
        vec4 _3069 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3078 = exp2((_3067 * (-1.44269502162933349609375)) * (1.0 - _3069.w));
        float _3079 = log2(_3078);
        float _3095 = log2(_2845);
        _2916 = (exp2(_3095 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].x)) * _3069.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2918 = (exp2(_3095 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].y)) * _3069.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2920 = (exp2(_3095 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].z)) * _3069.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2922 = _3078 * _2845;
    }
    else
    {
        _2916 = _2842;
        _2918 = _2843;
        _2920 = _2844;
        _2922 = _2845;
    }
    float _2934 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2935 = _2934 == 3.0;
    float _2936 = log2(_2922);
    float _2943 = exp2(_2936 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2787 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _776))) + ((_2793 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1583)) * cbPerFrame._m0[3u].x));
    float _2944 = exp2(_2936 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2789 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _776))) + ((_2795 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1583)) * cbPerFrame._m0[3u].x));
    float _2945 = exp2(_2936 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2791 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _776))) + ((_2797 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1583)) * cbPerFrame._m0[3u].x));
    float _2954 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2954 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.y = _2954 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.z = _2954 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.w = cbInstanceData._m0[_2817].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
}


