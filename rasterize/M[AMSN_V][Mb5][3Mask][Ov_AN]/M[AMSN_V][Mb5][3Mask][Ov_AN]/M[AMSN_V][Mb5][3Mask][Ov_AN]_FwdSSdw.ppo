#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1146;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _281 = cbMtdParam._m0[10u].y * texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _292 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * (((1.0 - _252.x) * 2.0) - _281)) + 1.0;
    float _3484 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    vec4 _305 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _307 = _305.x;
    float _308 = _305.y;
    float _309 = _305.z;
    vec4 _322 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _333 = ((_322.x - _307) * _293) + _307;
    float _334 = ((_322.y - _308) * _293) + _308;
    float _335 = ((_322.z - _309) * _293) + _309;
    float _341 = (((((1.0 - _252.y) * 2.0) - _281) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].w) + 1.0;
    float _3495 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    vec4 _355 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _366 = ((_355.x - _333) * _342) + _333;
    float _367 = ((_355.y - _334) * _342) + _334;
    float _368 = ((_355.z - _335) * _342) + _335;
    float _374 = (((((1.0 - _252.z) * 2.0) - _281) * (-1.39999997615814208984375)) * cbMtdParam._m0[10u].x) + 1.0;
    float _3506 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    vec4 _387 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _398 = ((_387.x - _366) * _375) + _366;
    float _399 = ((_387.y - _367) * _375) + _367;
    float _400 = ((_387.z - _368) * _375) + _368;
    float _406 = ((((TEXCOORD.w * 2.0) - _281) * (-1.39999997615814208984375)) * cbMtdParam._m0[9u].y) + 1.0;
    float _3517 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    vec4 _420 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _445 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _452 = ((((_420.x - _398) * _407) + _398) * 4.55000019073486328125) * _445.x;
    float _454 = ((((_420.y - _399) * _407) + _399) * 4.55000019073486328125) * _445.y;
    float _456 = ((((_420.z - _400) * _407) + _400) * 4.55000019073486328125) * _445.z;
    vec4 _468 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    vec4 _484 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _495 = ((_484.x - _470) * _293) + _470;
    float _496 = ((_484.y - _471) * _293) + _471;
    float _497 = ((_484.z - _472) * _293) + _472;
    vec4 _510 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _521 = ((_510.x - _495) * _342) + _495;
    float _522 = ((_510.y - _496) * _342) + _496;
    float _523 = ((_510.z - _497) * _342) + _497;
    vec4 _536 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _547 = ((_536.x - _521) * _375) + _521;
    float _548 = ((_536.y - _522) * _375) + _522;
    float _549 = ((_536.z - _523) * _375) + _523;
    vec4 _562 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _575 = ((_562.z - _549) * _407) + _549;
    float _578 = ((((_562.x - _547) * _407) + _547) * 2.0) + (-1.0);
    float _580 = ((((_562.y - _548) * _407) + _548) * 2.0) + (-1.0);
    float _581 = dot(vec2(_578, _580), vec2(_578, _580));
    float _3528 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))));
    vec4 _599 = texture(sampler2D(M_AMSN_V_Mb5_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _609 = (((_599.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z) + _578;
    float _610 = (((_599.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z) + _580;
    float _613 = fma(_586, _236, fma(_610, _228 * TANGENT.x, (_214 * _206) * _609));
    float _616 = fma(_586, _237, fma(_610, _228 * TANGENT.y, (_214 * _207) * _609));
    float _619 = fma(_586, _238, fma(_610, _228 * TANGENT.z, (_214 * _208) * _609));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    float _624 = _623 * _613;
    float _625 = _623 * _616;
    float _626 = _623 * _619;
    float _3539 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _627 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3561 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3572 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _696 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _686);
    float _697 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _686);
    float _698 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _686);
    float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
    float _703 = _696 * _702;
    float _704 = _697 * _702;
    float _705 = _698 * _702;
    float _711 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _712 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _730 = fma(_626, cbSceneParam._m0[5u].z, fma(_625, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _624));
    float _733 = fma(_626, cbSceneParam._m0[6u].z, fma(_625, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _624));
    float _736 = fma(_626, cbSceneParam._m0[7u].z, fma(_625, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _624));
    uint _749 = uint(roundEven(NORMAL.w)) * 13u;
    uint _751 = (_749 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _757 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_751].x;
    float _758 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_751].y;
    float _759 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_751].z;
    float _3583 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    vec4 _771 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _711, cbSceneParam._m0[86u].y * _712));
    float _774 = _771.x * TEXCOORD.z;
    float _775 = dot(vec3(_624, _625, _626), vec3(_703, _704, _705));
    float _778 = _775 * 2.0;
    float _782 = (_778 * _624) - _703;
    float _783 = (_778 * _625) - _704;
    float _784 = (_778 * _626) - _705;
    float _788 = abs(dot(vec3(_703, _704, _705), vec3(_624, _625, _626)));
    float _3616 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _790 = sqrt(_627);
    float _803 = exp2((_790 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_790 * 3.0));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1145;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _870 = fma(_843, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835));
        float _874 = fma(_843, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835));
        float _878 = fma(_843, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835));
        float _903 = _835 + _624;
        float _904 = _839 + _625;
        float _905 = _843 + _626;
        float _915 = fma(_905, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903)) - _870;
        float _916 = fma(_905, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903)) - _874;
        float _917 = fma(_905, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903)) - _878;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_870 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_874 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[34u].z) + ((((((_878 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _973 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_939.x + (-0.5));
        float _975 = _973 * (_939.y + (-0.5));
        float _976 = _973 * (_939.z + (-0.5));
        float _983 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_946.x + (-0.5));
        float _985 = _983 * (_946.y + (-0.5));
        float _986 = _983 * (_946.z + (-0.5));
        float _993 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_953.x + (-0.5));
        float _995 = _993 * (_953.y + (-0.5));
        float _996 = _993 * (_953.z + (-0.5));
        float _1003 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_960.x + (-0.5));
        float _1005 = _1003 * (_960.y + (-0.5));
        float _1006 = _1003 * (_960.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1027 = (dot(vec3(_624, _625, _626), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1037 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3664 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1039 + 1.0))) + _1044) * _1007;
        float _1054 = _975 * 0.5;
        float _1055 = _985 * 0.5;
        float _1056 = _995 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_624, _625, _626), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3697 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1081 + 1.0))) + _1086) * _1008;
        float _1096 = _976 * 0.5;
        float _1097 = _986 * 0.5;
        float _1098 = _996 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_624, _625, _626), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3730 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1123 + 1.0))) + _1128) * _1009;
        _1145 = _976;
        _1147 = _975;
        _1148 = _974;
        _1149 = _986;
        _1150 = _985;
        _1151 = _984;
        _1152 = _996;
        _1153 = _995;
        _1154 = _994;
        _1155 = _1009;
        _1156 = _1008;
        _1157 = _1007;
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _1146;
        _1147 = _1146;
        _1148 = _1146;
        _1149 = _1146;
        _1150 = _1146;
        _1151 = _1146;
        _1152 = _1146;
        _1153 = _1146;
        _1154 = _1146;
        _1155 = _1146;
        _1156 = _1146;
        _1157 = _1146;
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1186 = fma(_843, cbModelParam._m0[30u].z, fma(_839, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _835));
        float _1190 = fma(_843, cbModelParam._m0[31u].z, fma(_839, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _835));
        float _1194 = fma(_843, cbModelParam._m0[32u].z, fma(_839, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _835));
        float _1217 = _835 + _624;
        float _1218 = _839 + _625;
        float _1219 = _843 + _626;
        float _1229 = fma(_1219, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217)) - _1186;
        float _1230 = fma(_1219, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217)) - _1190;
        float _1231 = fma(_1219, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217)) - _1194;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1186 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1190 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[35u].z) + ((((((_1194 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1285 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1252.x + (-0.5));
        float _1287 = _1285 * (_1252.y + (-0.5));
        float _1288 = _1285 * (_1252.z + (-0.5));
        float _1295 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1259.x + (-0.5));
        float _1297 = _1295 * (_1259.y + (-0.5));
        float _1298 = _1295 * (_1259.z + (-0.5));
        float _1305 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1266.x + (-0.5));
        float _1307 = _1305 * (_1266.y + (-0.5));
        float _1308 = _1305 * (_1266.z + (-0.5));
        float _1315 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1273.x + (-0.5));
        float _1317 = _1315 * (_1273.y + (-0.5));
        float _1318 = _1315 * (_1273.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_624, _625, _626), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3793 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1349 + 1.0))) + _1354) * _1319;
        float _1364 = _1287 * 0.5;
        float _1365 = _1297 * 0.5;
        float _1366 = _1307 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_624, _625, _626), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3826 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1391 + 1.0))) + _1396) * _1320;
        float _1406 = _1288 * 0.5;
        float _1407 = _1298 * 0.5;
        float _1408 = _1308 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_624, _625, _626), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3859 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1433 + 1.0))) + _1438) * _1321;
        _1455 = _1288;
        _1456 = _1287;
        _1457 = _1286;
        _1458 = _1298;
        _1459 = _1297;
        _1460 = _1296;
        _1461 = _1308;
        _1462 = _1307;
        _1463 = _1306;
        _1464 = _1321;
        _1465 = _1320;
        _1466 = _1319;
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1146;
        _1456 = _1146;
        _1457 = _1146;
        _1458 = _1146;
        _1459 = _1146;
        _1460 = _1146;
        _1461 = _1146;
        _1462 = _1146;
        _1463 = _1146;
        _1464 = _1146;
        _1465 = _1146;
        _1466 = _1146;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1158)) + _1158;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1159)) + _1159;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1160)) + _1160;
    float _1502 = fma(_1481, cbSceneParam._m0[89u].z, fma(_1480, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1481, cbSceneParam._m0[90u].z, fma(_1480, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1481, cbSceneParam._m0[91u].z, fma(_1480, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1479));
    float _1523 = _782 * 0.5;
    float _1524 = _783 * 0.5;
    float _1525 = _784 * 0.5;
    float _1526 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1529 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1532 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1566;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1539 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1145, _1149, _1152, _1155));
        float _1543 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1547 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1148, _1151, _1154, _1157));
        float _1554 = dot(vec4(cbModelParam._m0[39u]), vec4(_1523, _1524, _1525, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1577;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1568 = dot(vec4(cbModelParam._m0[40u]), vec4(_1523, _1524, _1525, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1581 = (_1577 * cbModelParam._m0[1u].x) + (_1566 * (1.0 - cbModelParam._m0[1u].x));
    float _1591 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _627);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1591 : min(cbModelParam._m0[25u].z, _1591));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1641 = fma(_843, cbModelParam._m0[13u].z, fma(_839, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835)) + cbModelParam._m0[13u].w;
        float _1645 = fma(_843, cbModelParam._m0[14u].z, fma(_839, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835)) + cbModelParam._m0[14u].w;
        float _1649 = fma(_843, cbModelParam._m0[15u].z, fma(_839, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835)) + cbModelParam._m0[15u].w;
        float _1652 = fma(_784, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _782));
        float _1655 = fma(_784, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _782));
        float _1658 = fma(_784, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _782));
        float _1686;
        if (_1652 > 0.0)
        {
            _1686 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1686 = frontier_phi_16_14_ladder;
        }
        float _1911;
        if (_1655 > 0.0)
        {
            _1911 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1911 = frontier_phi_25_21_ladder;
        }
        float _2157;
        if (_1658 > 0.0)
        {
            _2157 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2157 = frontier_phi_37_32_ladder;
        }
        float _2159 = isnan(_1911) ? _1686 : (isnan(_1686) ? _1911 : min(_1686, _1911));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1652) + _1641;
        float _2165 = (_2160 * _1655) + _1645;
        float _2166 = (_2160 * _1658) + _1649;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1592);
            frontier_phi_15_37_ladder = _2290.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2290.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2290.x * cbModelParam._m0[1u].y;
        }
        _1674 = frontier_phi_15_37_ladder_2;
        _1676 = frontier_phi_15_37_ladder_1;
        _1678 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_782, _783, _784), _1592);
        _1674 = _1662.x * cbModelParam._m0[1u].y;
        _1676 = _1662.y * cbModelParam._m0[1u].y;
        _1678 = _1662.z * cbModelParam._m0[1u].y;
    }
    float _1682 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _627);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1682 : min(cbModelParam._m0[25u].w, _1682));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1740 = fma(_843, cbModelParam._m0[21u].z, fma(_839, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835)) + cbModelParam._m0[21u].w;
        float _1744 = fma(_843, cbModelParam._m0[22u].z, fma(_839, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835)) + cbModelParam._m0[22u].w;
        float _1748 = fma(_843, cbModelParam._m0[23u].z, fma(_839, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835)) + cbModelParam._m0[23u].w;
        float _1751 = fma(_784, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _782));
        float _1754 = fma(_784, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _782));
        float _1757 = fma(_784, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _782));
        float _1916;
        if (_1751 > 0.0)
        {
            _1916 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1916 = frontier_phi_27_23_ladder;
        }
        float _2184;
        if (_1754 > 0.0)
        {
            _2184 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2184 = frontier_phi_39_34_ladder;
        }
        float _2389;
        if (_1757 > 0.0)
        {
            _2389 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2389 = frontier_phi_48_45_ladder;
        }
        float _2391 = isnan(_2184) ? _1916 : (isnan(_1916) ? _2184 : min(_1916, _2184));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1751) + _1740;
        float _2397 = (_2392 * _1754) + _1744;
        float _2398 = (_2392 * _1757) + _1748;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2399;
        float _2402 = _2399 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2398 > _2402) || ((_2398 < _2400) || ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 < _2400) || (_2396 > _2402))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2596 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2398, cbModelParam._m0[17u].z, fma(_2397, cbModelParam._m0[17u].y, _2396 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2398, cbModelParam._m0[18u].z, fma(_2397, cbModelParam._m0[18u].y, _2396 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2398, cbModelParam._m0[19u].z, fma(_2397, cbModelParam._m0[19u].y, _2396 * cbModelParam._m0[19u].x))), _1683);
            frontier_phi_24_48_ladder = _2596.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2596.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2596.x * cbModelParam._m0[1u].z;
        }
        _1776 = frontier_phi_24_48_ladder_2;
        _1778 = frontier_phi_24_48_ladder_1;
        _1780 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_782, _783, _784), _1683);
        _1776 = _1760.x * cbModelParam._m0[1u].z;
        _1778 = _1760.y * cbModelParam._m0[1u].z;
        _1780 = _1760.z * cbModelParam._m0[1u].z;
    }
    float _1792 = ((((1.0 - _803) * ((_790 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_803 * _790)) * _774;
    float _1793 = _1792 * ((cbModelParam._m0[1u].w * (_1776 - _1674)) + _1674);
    float _1794 = _1792 * ((cbModelParam._m0[1u].w * (_1778 - _1676)) + _1676);
    float _1795 = _1792 * ((cbModelParam._m0[1u].w * (_1780 - _1678)) + _1678);
    float _1798 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1793 * cbSceneParam._m0[91u].x));
    vec4 _1812 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_711, _712));
    float _1814 = _1812.w;
    float _1826 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1814);
    float _1827 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1814);
    float _1828 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1814);
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_749 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _774 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1870 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1874 = _1834 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_624, _625, _626));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_624, _625, _626));
    float _3995 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _4006 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1851].x * _1857) * _1895) + (((cbLight._m0[_1861].x * _1826) * _1870) * _1893);
    float _1903 = ((_1857 * cbLight._m0[_1851].y) * _1895) + (((cbLight._m0[_1861].y * _1827) * _1870) * _1893);
    float _1904 = ((_1857 * cbLight._m0[_1851].z) * _1895) + (((cbLight._m0[_1861].z * _1828) * _1870) * _1893);
    uvec4 _1908 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1910 = _1908.x == 0u;
    float _1921;
    float _1923;
    float _1925;
    if (_1910)
    {
        _1921 = _1902;
        _1923 = _1903;
        _1925 = _1904;
    }
    else
    {
        uint _1929 = _1834 + 6u;
        float _1945 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _1946 = _1945 * _1945;
        float _4017 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1948 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _1921 = (((cbLight._m0[_1929].x * 0.3183098733425140380859375) * _1947) * _1948) + _1902;
        _1923 = (((cbLight._m0[_1929].y * 0.3183098733425140380859375) * _1947) * _1948) + _1903;
        _1925 = (((cbLight._m0[_1929].z * 0.3183098733425140380859375) * _1947) * _1948) + _1904;
    }
    bool _1928 = _1908.y == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1928)
    {
        _1966 = _1921;
        _1968 = _1923;
        _1970 = _1925;
    }
    else
    {
        uint _2128 = _1834 + 7u;
        float _2144 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4033 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2147 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1966 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _1921;
        _1968 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _1923;
        _1970 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _1925;
    }
    uint _1973 = _1834 + 8u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _627) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1834].x + _703;
    float _1989 = cbLight._m0[_1834].y + _704;
    float _1990 = cbLight._m0[_1834].z + _705;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1834].xyz));
    float _4049 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _2002 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _2003 = dot(vec3(_624, _625, _626), vec3(_1995, _1996, _1997));
    float _4071 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1995, _1996, _1997));
    float _4082 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1987 * _1987;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2027 = 1.0 - _1987;
    float _2038 = (0.5 / (((_2002 * ((_2001 * _2027) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2027) + _1987) * _2001))) * _2001;
    float _4093 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    uint _2054 = _1834 + 9u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _627) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1874].x + _703;
    float _2068 = cbLight._m0[_1874].y + _704;
    float _2069 = cbLight._m0[_1874].z + _705;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1874].xyz));
    float _4104 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2081 = dot(vec3(_624, _625, _626), vec3(_2074, _2075, _2076));
    float _4115 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2074, _2075, _2076));
    float _4126 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2066 * _2066;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2103 = 1.0 - _2066;
    float _2113 = (0.5 / (((_2002 * ((_2080 * _2103) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2103) + _2066) * _2080))) * _2080;
    float _4137 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    float _2125 = (((_2102 * cbLight._m0[_2054].x) * _2115) * _1857) + ((((cbLight._m0[_1973].x * _1826) * _2026) * _2040) * _1870);
    float _2126 = (((_2102 * cbLight._m0[_2054].y) * _2115) * _1857) + ((((cbLight._m0[_1973].y * _1827) * _2026) * _2040) * _1870);
    float _2127 = (((_2102 * cbLight._m0[_2054].z) * _2115) * _1857) + ((((cbLight._m0[_1973].z * _1828) * _2026) * _2040) * _1870);
    float _2189;
    float _2191;
    float _2193;
    if (_1910)
    {
        _2189 = _2125;
        _2191 = _2126;
        _2193 = _2127;
    }
    else
    {
        uint _2195 = _1834 + 2u;
        uint _2199 = _1834 + 10u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _627) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _703;
        float _2216 = cbLight._m0[_2195].y + _704;
        float _2217 = cbLight._m0[_2195].z + _705;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2195].xyz));
        float _4148 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2229 = dot(vec3(_624, _625, _626), vec3(_2222, _2223, _2224));
        float _4159 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4170 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2251 = 1.0 - _2214;
        float _2261 = (0.5 / (((_2002 * ((_2228 * _2251) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2251) + _2214) * _2228))) * _2228;
        float _4181 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2189 = (((_2250 * cbLight._m0[_2199].x) * _2263) * _2264) + _2125;
        _2191 = (((_2250 * cbLight._m0[_2199].y) * _2263) * _2264) + _2126;
        _2193 = (((_2250 * cbLight._m0[_2199].z) * _2263) * _2264) + _2127;
    }
    float _2299;
    float _2301;
    float _2303;
    if (_1928)
    {
        _2299 = _2189;
        _2301 = _2191;
        _2303 = _2193;
    }
    else
    {
        uint _2310 = _1834 + 3u;
        uint _2314 = _1834 + 11u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _627) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _703;
        float _2331 = cbLight._m0[_2310].y + _704;
        float _2332 = cbLight._m0[_2310].z + _705;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2310].xyz));
        float _4197 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2344 = dot(vec3(_624, _625, _626), vec3(_2337, _2338, _2339));
        float _4208 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4219 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2365 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2366 = 1.0 - _2329;
        float _2376 = (0.5 / (((_2002 * ((_2343 * _2366) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2366) + _2329) * _2343))) * _2343;
        float _4230 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2378 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2379 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2299 = (((_2365 * cbLight._m0[_2314].x) * _2378) * _2379) + _2189;
        _2301 = (((_2365 * cbLight._m0[_2314].y) * _2378) * _2379) + _2191;
        _2303 = (((_2365 * cbLight._m0[_2314].z) * _2378) * _2379) + _2193;
    }
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_1832.y == 0u)
    {
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2454;
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2454;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2454;
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.x;
        uint _2481 = uint((float(_2469.y) * floor(float(uint(cbSceneParam._m0[85u].y * _712) / _2470))) + floor(float(uint(cbSceneParam._m0[85u].x * _711) / _2470)));
        float _2491 = (log2(_2457 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2492 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        uint _2495 = uint(isnan(14.0) ? _2492 : (isnan(_2492) ? 14.0 : min(_2492, 14.0)));
        uvec4 _2500 = texelFetch(g_lightClusterGridBuffer, int(((_2495 << 2u) + (_2481 << 6u)) >> 2u));
        uint _2501 = _2500.x;
        uint _2502 = _2469.z;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((((1u << ((_2502 >> 4u) & 15u)) + 4294967295u) & _2501) == 0u) || ((_2502 & 240u) == 0u))
        {
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
        }
        else
        {
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2761)
                {
                    frontier_phi_63_pred = _2750;
                    frontier_phi_63_pred_1 = _2749;
                    frontier_phi_63_pred_2 = _2748;
                    frontier_phi_63_pred_3 = _2747;
                    frontier_phi_63_pred_4 = _2746;
                    frontier_phi_63_pred_5 = _2745;
                }
                else
                {
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    uint _2875;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2760;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    for (;;)
                    {
                        uint _2879 = uint(findLSB(_2875)) + (_2751 << 5u);
                        uint _2876 = (_2875 + 4294967295u) & _2875;
                        uint _2881 = _2879 * 48u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2901 = (_2879 * 48u) + 4u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2920 = (_2879 * 48u) + 8u;
                        vec3 _2931 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x));
                        float _2935 = _2895.x - _2455;
                        float _2936 = _2895.y - _2456;
                        float _2937 = _2895.z - _2457;
                        float _2938 = dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937));
                        float _2941 = inversesqrt(_2938);
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2945 = dot(vec3(_730, _733, _736), vec3(_2942, _2943, _2944));
                        float _2950 = 1.0 - (_2938 * _2895.w);
                        float _4256 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2952 = sqrt(_2938) * _2914.w;
                        float _2955 = 1.39999997615814208984375 / (_2952 + 1.39999997615814208984375);
                        float _2956 = _2955 * _2955;
                        float _2959 = ((1.0 - _2956) * _2945) + _2956;
                        float _2962 = _2952 * _2952;
                        float _2966 = ((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) * _2951) / ((_2962 * 0.699999988079071044921875) + 1.0);
                        float _2970 = (-0.0) - _2455;
                        float _2971 = (-0.0) - _2456;
                        float _2972 = (-0.0) - _2457;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2987 = exp2(log2(1.0 / ((_2962 * 3.5) + 5.0)) * 0.25);
                        float _2988 = 1.0 - _790;
                        float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                        float _2996 = _2995 * _2995;
                        float _2997 = _2996 * _2996;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3008 = dot(vec3(_730, _733, _736), vec3(_2977, _2978, _2979));
                        float _4272 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _3012 = dot(vec3(_730, _733, _736), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                        float _4283 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                        float _3020 = _2955 * _2996;
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _2945) + _3021;
                        float _4294 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3026 = 1.0 - _2996;
                        float _3036 = (0.5 / (((_3025 * ((_3011 * _3026) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3025 * _3026) + _2996) * _3011))) * _3025;
                        float _4305 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3047 = (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_3019 * _3019) * ((_2962 * 2.1991131305694580078125) + 3.141590118408203125))) * _2951;
                        _2804 = (_2966 * _2914.x) + _2872;
                        _2805 = (_2966 * _2914.y) + _2873;
                        _2806 = (_2966 * _2914.z) + _2874;
                        _2801 = (_3047 * _2931.x) + _2869;
                        _2802 = (_3047 * _2931.y) + _2870;
                        _2803 = (_3047 * _2931.z) + _2871;
                        if (_2876 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2876;
                        }
                    }
                    frontier_phi_63_pred = _2806;
                    frontier_phi_63_pred_1 = _2805;
                    frontier_phi_63_pred_2 = _2804;
                    frontier_phi_63_pred_3 = _2803;
                    frontier_phi_63_pred_4 = _2802;
                    frontier_phi_63_pred_5 = _2801;
                }
                _2612 = frontier_phi_63_pred;
                _2610 = frontier_phi_63_pred_1;
                _2608 = frontier_phi_63_pred_2;
                _2606 = frontier_phi_63_pred_3;
                _2604 = frontier_phi_63_pred_4;
                _2602 = frontier_phi_63_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2602;
                    _2746 = _2604;
                    _2747 = _2606;
                    _2748 = _2608;
                    _2749 = _2610;
                    _2750 = _2612;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
        }
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.z;
        uint _2618 = (_2616 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2618) & _2501) == 0u)
        {
            _2713 = _2601;
            _2715 = _2603;
            _2717 = _2605;
            _2719 = _2607;
            _2721 = _2609;
            _2723 = _2611;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
            float _2739 = _2738 * _2455;
            float _2740 = _2738 * _2456;
            float _2741 = _2738 * _2457;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2618 < ((_2616 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2852 = _2601;
                float _2853 = _2603;
                float _2854 = _2605;
                float _2855 = _2607;
                float _2856 = _2609;
                float _2857 = _2611;
                uint _2858 = _2618;
                uint _2867;
                bool _2868;
                for (;;)
                {
                    _2867 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                    _2868 = _2867 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2868)
                    {
                        frontier_phi_69_pred = _2857;
                        frontier_phi_69_pred_1 = _2856;
                        frontier_phi_69_pred_2 = _2855;
                        frontier_phi_69_pred_3 = _2854;
                        frontier_phi_69_pred_4 = _2853;
                        frontier_phi_69_pred_5 = _2852;
                    }
                    else
                    {
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        uint _3071 = _2867;
                        uint _3072;
                        vec4 _3097;
                        float _3098;
                        vec4 _3113;
                        vec3 _3125;
                        vec4 _3141;
                        vec4 _3157;
                        float _3204;
                        bool _3205;
                        for (;;)
                        {
                            uint _3082 = ((_2858 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3071));
                            _3072 = (_3071 + 4294967295u) & _3071;
                            uint _3084 = _3082 * 40u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3098 = _3097.w;
                            uint _3100 = (_3082 * 40u) + 4u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3082 * 40u) + 8u;
                            _3125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x));
                            uint _3128 = (_3082 * 40u) + 16u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3144 = (_3082 * 40u) + 20u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3160 = (_3082 * 40u) + 24u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3179 = (_3082 * 40u) + 28u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            _3204 = fma(_2457, _3192.z, fma(_2456, _3192.y, _3192.x * _2455)) + _3192.w;
                            _3205 = !((fma(_2457, _3173.z, fma(_2456, _3173.y, _3173.x * _2455)) + _3173.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3205)
                            {
                                float _3232 = _3097.x - _2455;
                                float _3233 = _3097.y - _2456;
                                float _3234 = _3097.z - _2457;
                                float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                                float _3238 = inversesqrt(_3235);
                                float _3239 = _3238 * _3232;
                                float _3240 = _3238 * _3233;
                                float _3241 = _3238 * _3234;
                                float _3245 = 1.0 - (_3235 / (_3098 * _3098));
                                float _4316 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3250 = sqrt(_3235) * _3113.w;
                                float _3252 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                                float _3253 = _3252 * _3252;
                                float _3256 = ((1.0 - _3253) * dot(vec3(_3239, _3240, _3241), vec3(_730, _733, _736))) + _3253;
                                float _3259 = _3250 * _3250;
                                float _3263 = (fma(_2457, _3141.z, fma(_2456, _3141.y, _3141.x * _2455)) + _3141.w) / _3204;
                                float _3264 = (fma(_2457, _3157.z, fma(_2456, _3157.y, _3157.x * _2455)) + _3157.w) / _3204;
                                float _3268 = 1.0 - dot(vec2(_3263, _3264), vec2(_3263, _3264));
                                float _4332 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3270 = _3269 * (((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3246) / ((_3259 * 0.699999988079071044921875) + 1.0));
                                float _3282 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                                float _3283 = 1.0 - _790;
                                float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                                float _3291 = _3290 * _3290;
                                float _3292 = _3291 * _3291;
                                float _3293 = _3239 - _2739;
                                float _3294 = _3240 - _2740;
                                float _3295 = _3241 - _2741;
                                float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                                float _3303 = dot(vec3(_730, _733, _736), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4343 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3307 = dot(vec3(_730, _733, _736), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                                float _4354 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                                float _3315 = _3252 * _3291;
                                float _3316 = _3315 * _3315;
                                float _3322 = ((1.0 - _3316) * dot(vec3(_730, _733, _736), vec3(_3239, _3240, _3241))) + _3316;
                                float _4365 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3324 = 1.0 - _3291;
                                float _3334 = (0.5 / (((_3323 * ((_3306 * _3324) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3291) * _3306))) * _3323;
                                float _4376 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3344 = (_3269 * _3246) * (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3314 * _3314) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3270 * _3113.z;
                                frontier_phi_75_pred_1 = _3270 * _3113.y;
                                frontier_phi_75_pred_2 = _3270 * _3113.x;
                                frontier_phi_75_pred_3 = _3344 * _3125.z;
                                frontier_phi_75_pred_4 = _3344 * _3125.y;
                                frontier_phi_75_pred_5 = _3344 * _3125.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3353 = frontier_phi_75_pred;
                            _3352 = frontier_phi_75_pred_1;
                            _3351 = frontier_phi_75_pred_2;
                            _3350 = frontier_phi_75_pred_3;
                            _3349 = frontier_phi_75_pred_4;
                            _3348 = frontier_phi_75_pred_5;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            if (_3072 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3072;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3057;
                        frontier_phi_69_pred_1 = _3056;
                        frontier_phi_69_pred_2 = _3055;
                        frontier_phi_69_pred_3 = _3054;
                        frontier_phi_69_pred_4 = _3053;
                        frontier_phi_69_pred_5 = _3052;
                    }
                    _2724 = frontier_phi_69_pred;
                    _2722 = frontier_phi_69_pred_1;
                    _2720 = frontier_phi_69_pred_2;
                    _2718 = frontier_phi_69_pred_3;
                    _2716 = frontier_phi_69_pred_4;
                    _2714 = frontier_phi_69_pred_5;
                    uint _2859 = _2858 + 1u;
                    if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2852 = _2714;
                        _2853 = _2716;
                        _2854 = _2718;
                        _2855 = _2720;
                        _2856 = _2722;
                        _2857 = _2724;
                        _2858 = _2859;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2724;
                frontier_phi_57_58_ladder_1 = _2722;
                frontier_phi_57_58_ladder_2 = _2720;
                frontier_phi_57_58_ladder_3 = _2718;
                frontier_phi_57_58_ladder_4 = _2716;
                frontier_phi_57_58_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_57_58_ladder = _2611;
                frontier_phi_57_58_ladder_1 = _2609;
                frontier_phi_57_58_ladder_2 = _2607;
                frontier_phi_57_58_ladder_3 = _2605;
                frontier_phi_57_58_ladder_4 = _2603;
                frontier_phi_57_58_ladder_5 = _2601;
            }
            _2713 = frontier_phi_57_58_ladder_5;
            _2715 = frontier_phi_57_58_ladder_4;
            _2717 = frontier_phi_57_58_ladder_3;
            _2719 = frontier_phi_57_58_ladder_2;
            _2721 = frontier_phi_57_58_ladder_1;
            _2723 = frontier_phi_57_58_ladder;
        }
        float _2728 = isnan(1.0) ? _774 : (isnan(_774) ? 1.0 : min(_774, 1.0));
        _2513 = (_2728 * _2719) + _1966;
        _2515 = (_2728 * _2721) + _1968;
        _2517 = (_2728 * _2723) + _1970;
        _2519 = ((_2713 * 0.039999999105930328369140625) * _2728) + _2299;
        _2521 = ((_2715 * 0.039999999105930328369140625) * _2728) + _2301;
        _2523 = ((_2717 * 0.039999999105930328369140625) * _2728) + _2303;
    }
    else
    {
        _2513 = _1966;
        _2515 = _1968;
        _2517 = _1970;
        _2519 = _2299;
        _2521 = _2301;
        _2523 = _2303;
    }
    float _4392 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4403 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4414 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    uint _2543 = _749 + 6u;
    float _2551 = _711 / cbSceneParam._m0[86u].x;
    float _2552 = _712 / cbSceneParam._m0[86u].y;
    vec4 _2566 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2568 = _2566.x;
    float _2569 = _2566.y;
    float _2570 = _2566.z;
    float _2571 = _2566.w;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2626 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2627 = _2626 / _646;
        float _2638 = _2627 * _696;
        float _2639 = _697 * _2627;
        float _2640 = (-0.0) - _2639;
        float _2641 = _2627 * _698;
        float _2643 = (cbSceneParam._m0[77u].w * _2640) / _2626;
        float _2644 = _2643 + cbSceneParam._m0[79u].w;
        float _2645 = cbSceneParam._m0[79u].w - _2639;
        float _2651 = sqrt(((_2638 * _2638) + (_2639 * _2639)) + (_2641 * _2641));
        float _2654 = (1.0 - (cbSceneParam._m0[77u].w / _2626)) * _2651;
        float _2659 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2661 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2814;
        if (abs((_2640 - _2643) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2814 = ((((_2644 > 0.0) ? exp2(_2659 * _2644) : (2.0 - exp2(_2661 * _2644))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2654;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : max(_2644, _2645));
            float _2776 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : min(_2644, _2645));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2814 = ((abs(_2651 / _2640) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2659 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2659 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2661 * _2785) - exp2(_2661 * _2786)) * _2774))) + (_2654 * cbSceneParam._m0[80u].z);
        }
        vec4 _2816 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, 1.0), 0.0);
        float _2825 = exp2((_2814 * (-1.44269502162933349609375)) * (1.0 - _2816.w));
        float _2826 = log2(_2825);
        float _2842 = log2(_2571);
        _2663 = (exp2(_2842 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].x)) * _2816.x) / cbSceneParam._m0[78u].x)) + _2568;
        _2665 = (exp2(_2842 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].y)) * _2816.y) / cbSceneParam._m0[78u].y)) + _2569;
        _2667 = (exp2(_2842 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].z)) * _2816.z) / cbSceneParam._m0[78u].z)) + _2570;
        _2669 = _2825 * _2571;
    }
    else
    {
        _2663 = _2568;
        _2665 = _2569;
        _2667 = _2570;
        _2669 = _2571;
    }
    float _2681 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2682 = _2681 == 3.0;
    float _2683 = log2(_2669);
    float _2690 = exp2(_2683 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2513 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _774))) + ((_2519 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1581)) * cbPerFrame._m0[3u].x));
    float _2691 = exp2(_2683 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2515 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _774))) + ((_2521 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1581)) * cbPerFrame._m0[3u].x));
    float _2692 = exp2(_2683 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2517 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _774))) + ((_2523 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1581)) * cbPerFrame._m0[3u].x));
    float _2701 = (_2681 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2701 * (_2682 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.y = _2701 * (_2682 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2665)));
    SV_Target.z = _2701 * (_2682 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.w = cbInstanceData._m0[_2543].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2543].w;
}


