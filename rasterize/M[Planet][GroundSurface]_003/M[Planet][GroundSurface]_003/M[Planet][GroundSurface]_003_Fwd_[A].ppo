#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1552;
float _3937;
float _3938;
float _3939;
float _3940;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    uvec4 _307 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _309 = _307.z != 0u;
    vec4 _330 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = _330.x;
    float _334 = _330.y;
    float _335 = _330.z;
    bool _356 = _307.x != 0u;
    vec4 _375 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _377 = _375.x;
    float _378 = _375.y;
    float _379 = _375.z;
    float _395 = _356 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[9u].w - _377)) + _377) : (_377 * cbMtdParam._m0[9u].w);
    float _396 = _356 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].x - _378)) + _378) : (_378 * cbMtdParam._m0[10u].x);
    float _397 = _356 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].y - _379)) + _379) : (_379 * cbMtdParam._m0[10u].y);
    bool _399 = _307.y != 0u;
    vec4 _414 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    vec4 _447 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _461 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * (1.0 - _449)) + 1.0;
    float _3949 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _469 = (cbMtdParam._m0[18u].z * ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) - _449)) + _449;
    float _476 = (_469 * ((_399 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[10u].w - _416)) + _416) : (_416 * cbMtdParam._m0[10u].w)) - _395)) + _395;
    float _477 = (_469 * ((_399 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].x - _417)) + _417) : (_417 * cbMtdParam._m0[11u].x)) - _396)) + _396;
    float _478 = (_469 * ((_399 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].y - _418)) + _418) : (_418 * cbMtdParam._m0[11u].y)) - _397)) + _397;
    float _485 = (((1.0 - _450) * (-1.39999997615814208984375)) * cbMtdParam._m0[20u].y) + 1.0;
    float _3960 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _493 = (cbMtdParam._m0[15u].w * ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) - _450)) + _450;
    float _500 = (_493 * ((_309 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[11u].w - _333)) + _333) : (_333 * cbMtdParam._m0[11u].w)) - _476)) + _476;
    float _501 = (_493 * ((_309 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].x - _334)) + _334) : (_334 * cbMtdParam._m0[12u].x)) - _477)) + _477;
    float _502 = (_493 * ((_309 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].y - _335)) + _335) : (_335 * cbMtdParam._m0[12u].y)) - _478)) + _478;
    vec4 _525 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_13, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].y * TEXCOORD.x) + cbMtdParam._m0[22u].y) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[23u].z * TEXCOORD.y) + cbMtdParam._m0[22u].z) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _531 = cbMtdParam._m0[17u].x * _525.x;
    vec4 _543 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _570 = (((_545 - _500) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[14u].w - _545))) * _531) + _500;
    float _571 = (((_546 - _501) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].x - _546))) * _531) + _501;
    float _572 = (((_547 - _502) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].y - _547))) * _531) + _502;
    float _593 = cbMtdParam._m0[20u].z * cbPerFrame._m0[22u].x;
    vec4 _612 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_16, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[7u].x * cbMtdParam._m0[25u].w) * ((_593 * cbMtdParam._m0[26u].y) + TEXCOORD.z)) + cbTextureTilingScale._m0[7u].z, ((cbTextureTilingScale._m0[7u].y * cbMtdParam._m0[26u].x) * ((_593 * cbMtdParam._m0[26u].z) + TEXCOORD.w)) + cbTextureTilingScale._m0[7u].w));
    float _614 = _612.x;
    vec4 _649 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_17, SS_ClampLinear), vec2((((cbMtdParam._m0[25u].y + TEXCOORD.z) * cbMtdParam._m0[26u].w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[25u].z + TEXCOORD.w) * cbMtdParam._m0[27u].x) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _686 = exp2(log2(cbMtdParam._m0[21u].x * texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_15, SS_DiffuseMap), vec2(((((((cbMtdParam._m0[24u].y * _593) + (_614 * cbMtdParam._m0[23u].w)) + cbMtdParam._m0[22u].w) + (cbMtdParam._m0[24u].w * TEXCOORD.z)) + ((_649.x + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((((cbMtdParam._m0[24u].z * _593) + (_614 * cbMtdParam._m0[24u].x)) + cbMtdParam._m0[23u].x) + (cbMtdParam._m0[25u].x * TEXCOORD.w)) + ((_649.y + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).w) * cbMtdParam._m0[21u].y);
    float _3971 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _701 = ((_687 * (cbMtdParam._m0[13u].w - _570)) * cbMtdParam._m0[19u].w) + _570;
    float _702 = ((_687 * (cbMtdParam._m0[14u].x - _571)) * cbMtdParam._m0[19u].w) + _571;
    float _703 = ((_687 * (cbMtdParam._m0[14u].y - _572)) * cbMtdParam._m0[19u].w) + _572;
    float _714 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _718 = dot(vec4(_714 * _301, _714 * _302, _714 * _303, 0.0), vec4(_243, _244, _245, 0.0));
    float _721 = _718 - cbMtdParam._m0[16u].w;
    float _3982 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _731 = (exp2(log2(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[16u].z : (isnan(cbMtdParam._m0[16u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[16u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[17u].y)) + cbMtdParam._m0[17u].y;
    float _741 = (((_731 * cbMtdParam._m0[12u].w) - _701) * _731) + _701;
    float _742 = (((_731 * cbMtdParam._m0[13u].x) - _702) * _731) + _702;
    float _743 = (((_731 * cbMtdParam._m0[13u].y) - _703) * _731) + _703;
    float _747 = _718 - cbMtdParam._m0[18u].y;
    float _3998 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _756 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))))) * cbMtdParam._m0[19u].y) * cbMtdParam._m0[18u].x);
    float _4009 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _757 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    vec4 _769 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _785 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _787 = _785.x;
    float _788 = _785.y;
    float _789 = _785.z;
    float _796 = ((_769.x - _787) * _469) + _787;
    float _797 = ((_769.y - _788) * _469) + _788;
    float _798 = ((_769.z - _789) * _469) + _789;
    vec4 _810 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _836 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _847 = (((_810.x - _796) * _493) + _796) + ((_836.x + (-0.5)) * cbMtdParam._m0[21u].w);
    float _848 = (((_810.y - _797) * _493) + _797) + ((_836.y + (-0.5)) * cbMtdParam._m0[21u].w);
    float _849 = (((_810.z - _798) * _493) + _798) + ((_836.z + (-0.5)) * cbMtdParam._m0[21u].w);
    vec4 _862 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _873 = ((_862.x - _847) * _531) + _847;
    float _874 = ((_862.y - _848) * _531) + _848;
    float _875 = ((_862.z - _849) * _531) + _849;
    float _885 = ((1.0 - _875) * _731) + _875;
    float _889 = ((((0.502016007900238037109375 - _873) * _731) + _873) * 2.0) + (-1.0);
    float _891 = ((((0.502016007900238037109375 - _874) * _731) + _874) * 2.0) + (-1.0);
    float _892 = dot(vec2(_889, _891), vec2(_889, _891));
    float _4020 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _897 = sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933 = inversesqrt(dot(vec3(_921, _925, _929), vec3(_921, _925, _929)));
    float _943 = inversesqrt(dot(vec3(cbMtdParam._m0[27u].yzw), vec3(cbMtdParam._m0[27u].yzw)));
    uint _948 = uint(roundEven(NORMAL.w)) * 13u;
    uint _949 = _948 + 5u;
    uint _954 = floatBitsToUint(cbInstanceData._m0[_949]).x * 14u;
    float _966 = (((_943 * cbMtdParam._m0[27u].y) - cbLight._m0[_954].x) * cbMtdParam._m0[19u].z) + cbLight._m0[_954].x;
    float _967 = (((_943 * cbMtdParam._m0[27u].z) - cbLight._m0[_954].y) * cbMtdParam._m0[19u].z) + cbLight._m0[_954].y;
    float _968 = (((_943 * cbMtdParam._m0[27u].w) - cbLight._m0[_954].z) * cbMtdParam._m0[19u].z) + cbLight._m0[_954].z;
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
    float _995 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_933 * _921, _933 * _925, _933 * _929, 0.0), vec4(_973 * _979, _974 * _979, _975 * _979, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _4031 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1003 = exp2(log2(_997 * 6.5) * 7.0);
    float _4042 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1010 = exp2(log2(cbMtdParam._m0[19u].x * ((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) + _997)) * cbMtdParam._m0[18u].w);
    float _4053 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1011 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1012 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1015 = fma(_897, _243, fma(_891, _235 * TANGENT.x, (_221 * _213) * _889));
    float _1018 = fma(_897, _244, fma(_891, _235 * TANGENT.y, (_221 * _214) * _889));
    float _1021 = fma(_897, _245, fma(_891, _235 * TANGENT.z, (_221 * _215) * _889));
    float _1025 = inversesqrt(dot(vec3(_1015, _1018, _1021), vec3(_1015, _1018, _1021)));
    float _1026 = _1025 * _1015;
    float _1027 = _1025 * _1018;
    float _1028 = _1025 * _1021;
    float _4075 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _1029 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _1030 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4108 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4119 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _1046 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1065 = cbSceneParam._m0[71u].x - (_921 / _1056);
    float _1066 = cbSceneParam._m0[71u].y - (_925 / _1056);
    float _1067 = cbSceneParam._m0[71u].z - (_929 / _1056);
    float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
    float _1072 = _1065 * _1071;
    float _1073 = _1066 * _1071;
    float _1074 = _1067 * _1071;
    vec4 _1079 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1081 = _1079.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1234 = sqrt(((_1065 * _1065) + (_1066 * _1066)) + (_1067 * _1067));
        float _1240 = (cbMatDynParam._m0[5u].x * _1234) + cbMatDynParam._m0[5u].y;
        float _4130 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1245 = (cbMatDynParam._m0[5u].z * _1234) + cbMatDynParam._m0[5u].w;
        float _4141 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) - _1241)) + _1241) < ((_1081 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1092 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1093 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1111 = fma(_1028, cbSceneParam._m0[5u].z, fma(_1027, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1026));
    float _1114 = fma(_1028, cbSceneParam._m0[6u].z, fma(_1027, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1026));
    float _1117 = fma(_1028, cbSceneParam._m0[7u].z, fma(_1027, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1026));
    uint _1130 = _948 + 9u;
    uint _1131 = _1130 + uint(cbMatDynParam._m0[0u].w);
    float _1137 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_1131].x;
    float _1138 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_1131].y;
    float _1139 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_1131].z;
    float _4152 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    vec4 _1151 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1092, cbSceneParam._m0[86u].y * _1093));
    float _1154 = _1151.x * TEXCOORD_4;
    float _1155 = dot(vec3(_1026, _1027, _1028), vec3(_1072, _1073, _1074));
    float _1158 = _1155 * 2.0;
    float _1162 = (_1158 * _1026) - _1072;
    float _1163 = (_1158 * _1027) - _1073;
    float _1164 = (_1158 * _1028) - _1074;
    float _1168 = abs(dot(vec3(_1072, _1073, _1074), vec3(_1026, _1027, _1028)));
    float _4185 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1170 = sqrt(_1030);
    float _1183 = exp2((_1170 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1170 * 3.0));
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1278 = fma(_1223, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215));
        float _1282 = fma(_1223, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215));
        float _1286 = fma(_1223, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215));
        float _1309 = _1215 + _1026;
        float _1310 = _1219 + _1027;
        float _1311 = _1223 + _1028;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1278 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1282 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1286 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_1026, _1027, _1028), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4233 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_1026, _1027, _1028), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4266 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_1026, _1027, _1028), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4299 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1595 = fma(_1223, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215));
        float _1599 = fma(_1223, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215));
        float _1603 = fma(_1223, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215));
        float _1626 = _1215 + _1026;
        float _1627 = _1219 + _1027;
        float _1628 = _1223 + _1028;
        float _1638 = fma(_1628, cbModelParam._m0[30u].z, fma(_1627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1626)) - _1595;
        float _1639 = fma(_1628, cbModelParam._m0[31u].z, fma(_1627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1626)) - _1599;
        float _1640 = fma(_1628, cbModelParam._m0[32u].z, fma(_1627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1626)) - _1603;
        float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
        float _1657 = ((_1644 * _1638) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1595 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1644 * _1639) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1599 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1644 * _1640) / cbModelParam._m0[35u].z) + ((((((_1603 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        float _1694 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1661.x + (-0.5));
        float _1696 = _1694 * (_1661.y + (-0.5));
        float _1697 = _1694 * (_1661.z + (-0.5));
        float _1704 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1668.x + (-0.5));
        float _1706 = _1704 * (_1668.y + (-0.5));
        float _1707 = _1704 * (_1668.z + (-0.5));
        float _1714 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1675.x + (-0.5));
        float _1716 = _1714 * (_1675.y + (-0.5));
        float _1717 = _1714 * (_1675.z + (-0.5));
        float _1724 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1682.x + (-0.5));
        float _1726 = _1724 * (_1682.y + (-0.5));
        float _1727 = _1724 * (_1682.z + (-0.5));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = _1695 * 0.5;
        float _1732 = _1705 * 0.5;
        float _1733 = _1715 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_1026, _1027, _1028), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4362 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1758 + 1.0))) + _1763) * _1728;
        float _1773 = _1696 * 0.5;
        float _1774 = _1706 * 0.5;
        float _1775 = _1716 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_1026, _1027, _1028), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4395 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1800 + 1.0))) + _1805) * _1729;
        float _1815 = _1697 * 0.5;
        float _1816 = _1707 * 0.5;
        float _1817 = _1717 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_1026, _1027, _1028), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4428 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1842 + 1.0))) + _1847) * _1730;
        _1864 = _1697;
        _1865 = _1696;
        _1866 = _1695;
        _1867 = _1707;
        _1868 = _1706;
        _1869 = _1705;
        _1870 = _1717;
        _1871 = _1716;
        _1872 = _1715;
        _1873 = _1730;
        _1874 = _1729;
        _1875 = _1728;
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
    }
    else
    {
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = _1552;
        _1871 = _1552;
        _1872 = _1552;
        _1873 = _1552;
        _1874 = _1552;
        _1875 = _1552;
        _1876 = 0.0;
        _1877 = 0.0;
        _1878 = 0.0;
    }
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1564)) + _1564;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1565)) + _1565;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1566)) + _1566;
    float _1911 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1888));
    float _1932 = _1162 * 0.5;
    float _1933 = _1163 * 0.5;
    float _1934 = _1164 * 0.5;
    float _1935 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1938 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1941 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1975;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1948 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1952 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1956 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1963 = dot(vec4(cbModelParam._m0[39u]), vec4(_1932, _1933, _1934, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1963) ? 0.0 : (isnan(0.0) ? _1963 : max(0.0, _1963))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1986;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1977 = dot(vec4(cbModelParam._m0[40u]), vec4(_1932, _1933, _1934, 1.0));
        _1986 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1977) ? 0.0 : (isnan(0.0) ? _1977 : max(0.0, _1977))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1986 = 1.0;
    }
    float _1990 = (_1986 * cbModelParam._m0[1u].x) + (_1975 * (1.0 - cbModelParam._m0[1u].x));
    float _2000 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1030);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2000 : min(cbModelParam._m0[25u].z, _2000));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2048 = fma(_1223, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215)) + cbModelParam._m0[13u].w;
        float _2052 = fma(_1223, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215)) + cbModelParam._m0[14u].w;
        float _2056 = fma(_1223, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215)) + cbModelParam._m0[15u].w;
        float _2059 = fma(_1164, cbModelParam._m0[13u].z, fma(_1163, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1162));
        float _2062 = fma(_1164, cbModelParam._m0[14u].z, fma(_1163, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1162));
        float _2065 = fma(_1164, cbModelParam._m0[15u].z, fma(_1163, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1162));
        float _2093;
        if (_2059 > 0.0)
        {
            _2093 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2093 = frontier_phi_19_17_ladder;
        }
        float _2292;
        if (_2062 > 0.0)
        {
            _2292 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2292 = frontier_phi_28_24_ladder;
        }
        float _2535;
        if (_2065 > 0.0)
        {
            _2535 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2535 = frontier_phi_40_35_ladder;
        }
        float _2537 = isnan(_2292) ? _2093 : (isnan(_2093) ? _2292 : min(_2093, _2292));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _2059) + _2048;
        float _2543 = (_2538 * _2062) + _2052;
        float _2544 = (_2538 * _2065) + _2056;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2545;
        float _2549 = _2545 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 > _2549) || ((_2543 < _2547) || ((_2542 < _2547) || (_2542 > _2549))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2544, cbModelParam._m0[9u].z, fma(_2543, cbModelParam._m0[9u].y, _2542 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2544, cbModelParam._m0[10u].z, fma(_2543, cbModelParam._m0[10u].y, _2542 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2544, cbModelParam._m0[11u].z, fma(_2543, cbModelParam._m0[11u].y, _2542 * cbModelParam._m0[11u].x))), _2001);
            frontier_phi_18_40_ladder = _2668.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2668.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2668.x * cbModelParam._m0[1u].y;
        }
        _2081 = frontier_phi_18_40_ladder_2;
        _2083 = frontier_phi_18_40_ladder_1;
        _2085 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1162, _1163, _1164), _2001);
        _2081 = _2069.x * cbModelParam._m0[1u].y;
        _2083 = _2069.y * cbModelParam._m0[1u].y;
        _2085 = _2069.z * cbModelParam._m0[1u].y;
    }
    float _2089 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1030);
    float _2090 = isnan(_2089) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2089 : min(cbModelParam._m0[25u].w, _2089));
    float _2179;
    float _2181;
    float _2183;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2143 = fma(_1223, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215)) + cbModelParam._m0[21u].w;
        float _2147 = fma(_1223, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215)) + cbModelParam._m0[22u].w;
        float _2151 = fma(_1223, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215)) + cbModelParam._m0[23u].w;
        float _2154 = fma(_1164, cbModelParam._m0[21u].z, fma(_1163, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1162));
        float _2157 = fma(_1164, cbModelParam._m0[22u].z, fma(_1163, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1162));
        float _2160 = fma(_1164, cbModelParam._m0[23u].z, fma(_1163, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1162));
        float _2297;
        if (_2154 > 0.0)
        {
            _2297 = abs((1.0 - _2143) / _2154);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2143 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2297 = frontier_phi_30_26_ladder;
        }
        float _2562;
        if (_2157 > 0.0)
        {
            _2562 = abs((1.0 - _2147) / _2157);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2147 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2562 = frontier_phi_42_37_ladder;
        }
        float _2767;
        if (_2160 > 0.0)
        {
            _2767 = abs((1.0 - _2151) / _2160);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2151 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2767 = frontier_phi_51_48_ladder;
        }
        float _2769 = isnan(_2562) ? _2297 : (isnan(_2297) ? _2562 : min(_2297, _2562));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _2154) + _2143;
        float _2775 = (_2770 * _2157) + _2147;
        float _2776 = (_2770 * _2160) + _2151;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2777;
        float _2780 = _2777 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2776 > _2780) || ((_2776 < _2778) || ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 < _2778) || (_2774 > _2780))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2776, cbModelParam._m0[17u].z, fma(_2775, cbModelParam._m0[17u].y, _2774 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2776, cbModelParam._m0[18u].z, fma(_2775, cbModelParam._m0[18u].y, _2774 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2776, cbModelParam._m0[19u].z, fma(_2775, cbModelParam._m0[19u].y, _2774 * cbModelParam._m0[19u].x))), _2090);
            frontier_phi_27_51_ladder = _3001.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3001.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3001.x * cbModelParam._m0[1u].z;
        }
        _2179 = frontier_phi_27_51_ladder_2;
        _2181 = frontier_phi_27_51_ladder_1;
        _2183 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1162, _1163, _1164), _2090);
        _2179 = _2163.x * cbModelParam._m0[1u].z;
        _2181 = _2163.y * cbModelParam._m0[1u].z;
        _2183 = _2163.z * cbModelParam._m0[1u].z;
    }
    float _2195 = ((((1.0 - _1183) * ((_1170 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1183 * _1170)) * _1154;
    float _2196 = _2195 * ((cbModelParam._m0[1u].w * (_2179 - _2081)) + _2081);
    float _2197 = _2195 * ((cbModelParam._m0[1u].w * (_2181 - _2083)) + _2083);
    float _2198 = _2195 * ((cbModelParam._m0[1u].w * (_2183 - _2085)) + _2085);
    float _2201 = fma(_2198, cbSceneParam._m0[89u].z, fma(_2197, cbSceneParam._m0[89u].y, _2196 * cbSceneParam._m0[89u].x));
    float _2204 = fma(_2198, cbSceneParam._m0[90u].z, fma(_2197, cbSceneParam._m0[90u].y, _2196 * cbSceneParam._m0[90u].x));
    float _2207 = fma(_2198, cbSceneParam._m0[91u].z, fma(_2197, cbSceneParam._m0[91u].y, _2196 * cbSceneParam._m0[91u].x));
    uvec4 _2216 = floatBitsToUint(cbInstanceData._m0[_949]);
    uint _2218 = _2216.x * 14u;
    uint _2219 = _2218 + 13u;
    float _2226 = _1154 + (-1.0);
    float _2231 = (cbLight._m0[_2219].x * _2226) + 1.0;
    float _2232 = (cbLight._m0[_2219].y * _2226) + 1.0;
    float _2233 = (cbLight._m0[_2219].z * _2226) + 1.0;
    float _2234 = (cbLight._m0[_2219].w * _2226) + 1.0;
    uint _2235 = _2218 + 5u;
    float _2241 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2245 = _2218 + 4u;
    float _2251 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2255 = _2218 | 1u;
    float _2266 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_1026, _1027, _1028));
    float _2269 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_1026, _1027, _1028));
    float _4564 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _4575 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2274 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.3183098733425140380859375;
    float _2276 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * 0.3183098733425140380859375;
    float _2283 = ((cbLight._m0[_2235].x * _2241) * _2276) + ((cbLight._m0[_2245].x * _2251) * _2274);
    float _2284 = ((_2241 * cbLight._m0[_2235].y) * _2276) + ((_2251 * cbLight._m0[_2245].y) * _2274);
    float _2285 = ((_2241 * cbLight._m0[_2235].z) * _2276) + ((_2251 * cbLight._m0[_2245].z) * _2274);
    uvec4 _2289 = floatBitsToUint(cbLight._m0[_2218 + 12u]);
    bool _2291 = _2289.x == 0u;
    float _2302;
    float _2304;
    float _2306;
    if (_2291)
    {
        _2302 = _2283;
        _2304 = _2284;
        _2306 = _2285;
    }
    else
    {
        uint _2310 = _2218 + 6u;
        float _2326 = (dot(vec3(cbLight._m0[_2218 + 2u].xyz), vec3(_1026, _1027, _1028)) * 0.5) + 0.5;
        float _2327 = _2326 * _2326;
        float _4586 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2328 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2329 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2302 = (((cbLight._m0[_2310].x * 0.3183098733425140380859375) * _2328) * _2329) + _2283;
        _2304 = (((cbLight._m0[_2310].y * 0.3183098733425140380859375) * _2328) * _2329) + _2284;
        _2306 = (((cbLight._m0[_2310].z * 0.3183098733425140380859375) * _2328) * _2329) + _2285;
    }
    bool _2309 = _2289.y == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2309)
    {
        _2347 = _2302;
        _2349 = _2304;
        _2351 = _2306;
    }
    else
    {
        uint _2506 = _2218 + 7u;
        float _2522 = (dot(vec3(cbLight._m0[_2218 + 3u].xyz), vec3(_1026, _1027, _1028)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4602 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2525 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2347 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2302;
        _2349 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2304;
        _2351 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2306;
    }
    uint _2354 = _2218 + 8u;
    float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _1030) * 0.949999988079071044921875);
    float _2368 = _2367 * _2367;
    float _2369 = cbLight._m0[_2218].x + _1072;
    float _2370 = cbLight._m0[_2218].y + _1073;
    float _2371 = cbLight._m0[_2218].z + _1074;
    float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
    float _2376 = _2375 * _2369;
    float _2377 = _2375 * _2370;
    float _2378 = _2375 * _2371;
    float _2379 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2218].xyz));
    float _4618 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _4629 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _2383 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2384 = dot(vec3(_1026, _1027, _1028), vec3(_2376, _2377, _2378));
    float _4640 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2388 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2376, _2377, _2378));
    float _4651 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = _2368 * _2368;
    float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
    float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2408 = 1.0 - _2368;
    float _2419 = (0.5 / (((_2383 * ((_2382 * _2408) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2408) + _2368) * _2382))) * _2382;
    float _4662 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2421 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
    uint _2432 = _2218 + 9u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _1030) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2255].x + _1072;
    float _2446 = cbLight._m0[_2255].y + _1073;
    float _2447 = cbLight._m0[_2255].z + _1074;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2255].xyz));
    float _4673 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2459 = dot(vec3(_1026, _1027, _1028), vec3(_2452, _2453, _2454));
    float _4684 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2463 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2452, _2453, _2454));
    float _4695 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2467 = _2444 * _2444;
    float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
    float _2480 = (exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2481 = 1.0 - _2444;
    float _2491 = (0.5 / (((_2383 * ((_2458 * _2481) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2481) + _2444) * _2458))) * _2458;
    float _4706 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
    float _2503 = (((_2480 * cbLight._m0[_2432].x) * _2493) * _2241) + (((_2407 * cbLight._m0[_2354].x) * _2421) * _2251);
    float _2504 = (((_2480 * cbLight._m0[_2432].y) * _2493) * _2241) + (((_2407 * cbLight._m0[_2354].y) * _2421) * _2251);
    float _2505 = (((_2480 * cbLight._m0[_2432].z) * _2493) * _2241) + (((_2407 * cbLight._m0[_2354].z) * _2421) * _2251);
    float _2567;
    float _2569;
    float _2571;
    if (_2291)
    {
        _2567 = _2503;
        _2569 = _2504;
        _2571 = _2505;
    }
    else
    {
        uint _2573 = _2218 + 2u;
        uint _2577 = _2218 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _1030) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _1072;
        float _2594 = cbLight._m0[_2573].y + _1073;
        float _2595 = cbLight._m0[_2573].z + _1074;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2573].xyz));
        float _4717 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2607 = dot(vec3(_1026, _1027, _1028), vec3(_2600, _2601, _2602));
        float _4728 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4739 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2628 = (exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2629 = 1.0 - _2592;
        float _2639 = (0.5 / (((_2383 * ((_2606 * _2629) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2629) + _2592) * _2606))) * _2606;
        float _4750 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2567 = (((_2628 * cbLight._m0[_2577].x) * _2641) * _2642) + _2503;
        _2569 = (((_2628 * cbLight._m0[_2577].y) * _2641) * _2642) + _2504;
        _2571 = (((_2628 * cbLight._m0[_2577].z) * _2641) * _2642) + _2505;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2309)
    {
        _2677 = _2567;
        _2679 = _2569;
        _2681 = _2571;
    }
    else
    {
        uint _2688 = _2218 + 3u;
        uint _2692 = _2218 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _1030) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _1072;
        float _2709 = cbLight._m0[_2688].y + _1073;
        float _2710 = cbLight._m0[_2688].z + _1074;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2688].xyz));
        float _4766 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2722 = dot(vec3(_1026, _1027, _1028), vec3(_2715, _2716, _2717));
        float _4777 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4788 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2744 = 1.0 - _2707;
        float _2754 = (0.5 / (((_2383 * ((_2721 * _2744) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2744) + _2707) * _2721))) * _2721;
        float _4799 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2677 = (((_2743 * cbLight._m0[_2692].x) * _2756) * _2757) + _2567;
        _2679 = (((_2743 * cbLight._m0[_2692].y) * _2756) * _2757) + _2569;
        _2681 = (((_2743 * cbLight._m0[_2692].z) * _2756) * _2757) + _2571;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2216.y == 0u)
    {
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2832;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2832;
        float _2835 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2832;
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.x;
        uint _2859 = uint((float(_2847.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1093) / _2848))) + floor(float(uint(cbSceneParam._m0[85u].x * _1092) / _2848)));
        float _2869 = (log2(_2835 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2870 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        uint _2873 = uint(isnan(14.0) ? _2870 : (isnan(_2870) ? 14.0 : min(_2870, 14.0)));
        uvec4 _2878 = texelFetch(g_lightClusterGridBuffer, int(((_2873 << 2u) + (_2859 << 6u)) >> 2u));
        uint _2879 = _2878.x;
        uint _2880 = _2847.z;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((((1u << ((_2880 >> 4u) & 15u)) + 4294967295u) & _2879) == 0u) || ((_2880 & 240u) == 0u))
        {
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
        }
        else
        {
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            uint _3164 = 0u;
            uint _3173;
            bool _3174;
            for (;;)
            {
                _3173 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                _3174 = _3173 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3174)
                {
                    frontier_phi_68_pred = _3160;
                    frontier_phi_68_pred_1 = _3163;
                    frontier_phi_68_pred_2 = _3162;
                    frontier_phi_68_pred_3 = _3161;
                    frontier_phi_68_pred_4 = _3159;
                    frontier_phi_68_pred_5 = _3158;
                }
                else
                {
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    uint _3309;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3173;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3313 = uint(findLSB(_3309)) + (_3164 << 5u);
                        uint _3310 = (_3309 + 4294967295u) & _3309;
                        uint _3315 = _3313 * 48u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3335 = (_3313 * 48u) + 4u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3354 = (_3313 * 48u) + 8u;
                        vec3 _3365 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x));
                        float _3369 = _3329.x - _2833;
                        float _3370 = _3329.y - _2834;
                        float _3371 = _3329.z - _2835;
                        float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                        float _3375 = inversesqrt(_3372);
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3379 = dot(vec3(_1111, _1114, _1117), vec3(_3376, _3377, _3378));
                        float _3384 = 1.0 - (_3372 * _3329.w);
                        float _4825 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3386 = sqrt(_3372) * _3348.w;
                        float _3389 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3379) + _3390;
                        float _3396 = _3386 * _3386;
                        float _3400 = ((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3385) / ((_3396 * 0.699999988079071044921875) + 1.0);
                        float _3404 = (-0.0) - _2833;
                        float _3405 = (-0.0) - _2834;
                        float _3406 = (-0.0) - _2835;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3421 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                        float _3422 = 1.0 - _1170;
                        float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                        float _3430 = _3429 * _3429;
                        float _3431 = _3430 * _3430;
                        float _3432 = _3411 + _3376;
                        float _3433 = _3412 + _3377;
                        float _3434 = _3413 + _3378;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3442 = dot(vec3(_1111, _1114, _1117), vec3(_3411, _3412, _3413));
                        float _4841 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3446 = dot(vec3(_1111, _1114, _1117), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                        float _4852 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                        float _3454 = _3389 * _3430;
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3379) + _3455;
                        float _4863 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3460 = 1.0 - _3430;
                        float _3470 = (0.5 / (((_3459 * ((_3445 * _3460) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3430) * _3445))) * _3459;
                        float _4874 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3481 = (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3453 * _3453) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125))) * _3385;
                        _3233 = (_3400 * _3348.x) + _3306;
                        _3234 = (_3400 * _3348.y) + _3307;
                        _3235 = (_3400 * _3348.z) + _3308;
                        _3230 = (_3481 * _3365.x) + _3303;
                        _3231 = (_3481 * _3365.y) + _3304;
                        _3232 = (_3481 * _3365.z) + _3305;
                        if (_3310 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3310;
                        }
                    }
                    frontier_phi_68_pred = _3232;
                    frontier_phi_68_pred_1 = _3235;
                    frontier_phi_68_pred_2 = _3234;
                    frontier_phi_68_pred_3 = _3233;
                    frontier_phi_68_pred_4 = _3231;
                    frontier_phi_68_pred_5 = _3230;
                }
                _3011 = frontier_phi_68_pred;
                _3017 = frontier_phi_68_pred_1;
                _3015 = frontier_phi_68_pred_2;
                _3013 = frontier_phi_68_pred_3;
                _3009 = frontier_phi_68_pred_4;
                _3007 = frontier_phi_68_pred_5;
                uint _3165 = _3164 + 1u;
                if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3158 = _3007;
                    _3159 = _3009;
                    _3160 = _3011;
                    _3161 = _3013;
                    _3162 = _3015;
                    _3163 = _3017;
                    _3164 = _3165;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
        }
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.z;
        uint _3023 = (_3021 >> 8u) & 15u;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((4294967295u << _3023) & _2879) == 0u)
        {
            _3126 = _3006;
            _3128 = _3008;
            _3130 = _3010;
            _3132 = _3012;
            _3134 = _3014;
            _3136 = _3016;
        }
        else
        {
            float _3151 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
            float _3152 = _3151 * _2833;
            float _3153 = _3151 * _2834;
            float _3154 = _3151 * _2835;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3023 < ((_3021 >> 12u) & 15u))
            {
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3286 = _3006;
                float _3287 = _3008;
                float _3288 = _3010;
                float _3289 = _3012;
                float _3290 = _3014;
                float _3291 = _3016;
                uint _3292 = _3023;
                uint _3301;
                bool _3302;
                for (;;)
                {
                    _3301 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                    _3302 = _3301 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3302)
                    {
                        frontier_phi_79_pred = _3291;
                        frontier_phi_79_pred_1 = _3290;
                        frontier_phi_79_pred_2 = _3289;
                        frontier_phi_79_pred_3 = _3288;
                        frontier_phi_79_pred_4 = _3287;
                        frontier_phi_79_pred_5 = _3286;
                    }
                    else
                    {
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        float _3513 = _3291;
                        uint _3514 = _3301;
                        uint _3515;
                        vec4 _3540;
                        float _3541;
                        vec4 _3556;
                        vec3 _3568;
                        vec4 _3583;
                        vec4 _3598;
                        float _3644;
                        bool _3645;
                        for (;;)
                        {
                            uint _3525 = ((_3292 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3514));
                            _3515 = (_3514 + 4294967295u) & _3514;
                            uint _3527 = _3525 * 40u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            _3541 = _3540.w;
                            uint _3543 = (_3525 * 40u) + 4u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3525 * 40u) + 8u;
                            _3568 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x));
                            uint _3570 = (_3525 * 40u) + 16u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3525 * 40u) + 20u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3525 * 40u) + 24u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3619 = (_3525 * 40u) + 28u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3644 = fma(_2835, _3632.z, fma(_2834, _3632.y, _3632.x * _2833)) + _3632.w;
                            _3645 = !((fma(_2835, _3613.z, fma(_2834, _3613.y, _3613.x * _2833)) + _3613.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3645)
                            {
                                float _3672 = _3540.x - _2833;
                                float _3673 = _3540.y - _2834;
                                float _3674 = _3540.z - _2835;
                                float _3675 = dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674));
                                float _3678 = inversesqrt(_3675);
                                float _3679 = _3678 * _3672;
                                float _3680 = _3678 * _3673;
                                float _3681 = _3678 * _3674;
                                float _3685 = 1.0 - (_3675 / (_3541 * _3541));
                                float _4885 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3690 = sqrt(_3675) * _3556.w;
                                float _3692 = 1.39999997615814208984375 / (_3690 + 1.39999997615814208984375);
                                float _3693 = _3692 * _3692;
                                float _3696 = ((1.0 - _3693) * dot(vec3(_3679, _3680, _3681), vec3(_1111, _1114, _1117))) + _3693;
                                float _3699 = _3690 * _3690;
                                float _3703 = (fma(_2835, _3583.z, fma(_2834, _3583.y, _3583.x * _2833)) + _3583.w) / _3644;
                                float _3704 = (fma(_2835, _3598.z, fma(_2834, _3598.y, _3598.x * _2833)) + _3598.w) / _3644;
                                float _3708 = 1.0 - dot(vec2(_3703, _3704), vec2(_3703, _3704));
                                float _4901 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3710 = _3709 * (((isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0))) * _3686) / ((_3699 * 0.699999988079071044921875) + 1.0));
                                float _3722 = exp2(log2(1.0 / ((_3699 * 3.5) + 5.0)) * 0.25);
                                float _3723 = 1.0 - _1170;
                                float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                                float _3731 = _3730 * _3730;
                                float _3732 = _3731 * _3731;
                                float _3733 = _3679 - _3152;
                                float _3734 = _3680 - _3153;
                                float _3735 = _3681 - _3154;
                                float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                                float _3743 = dot(vec3(_1111, _1114, _1117), vec3((-0.0) - _3152, (-0.0) - _3153, (-0.0) - _3154));
                                float _4912 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3747 = dot(vec3(_1111, _1114, _1117), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                                float _4923 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                                float _3755 = _3692 * _3731;
                                float _3756 = _3755 * _3755;
                                float _3762 = ((1.0 - _3756) * dot(vec3(_1111, _1114, _1117), vec3(_3679, _3680, _3681))) + _3756;
                                float _4934 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3764 = 1.0 - _3731;
                                float _3774 = (0.5 / (((_3763 * ((_3746 * _3764) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3731) * _3746))) * _3763;
                                float _4945 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3784 = (_3709 * _3686) * (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) / ((_3754 * _3754) * ((_3699 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3710 * _3556.z;
                                frontier_phi_85_pred_1 = _3710 * _3556.y;
                                frontier_phi_85_pred_2 = _3710 * _3556.x;
                                frontier_phi_85_pred_3 = _3784 * _3568.z;
                                frontier_phi_85_pred_4 = _3784 * _3568.y;
                                frontier_phi_85_pred_5 = _3784 * _3568.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3793 = frontier_phi_85_pred;
                            _3792 = frontier_phi_85_pred_1;
                            _3791 = frontier_phi_85_pred_2;
                            _3790 = frontier_phi_85_pred_3;
                            _3789 = frontier_phi_85_pred_4;
                            _3788 = frontier_phi_85_pred_5;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            if (_3515 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3515;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3500;
                        frontier_phi_79_pred_1 = _3499;
                        frontier_phi_79_pred_2 = _3498;
                        frontier_phi_79_pred_3 = _3497;
                        frontier_phi_79_pred_4 = _3496;
                        frontier_phi_79_pred_5 = _3495;
                    }
                    _3137 = frontier_phi_79_pred;
                    _3135 = frontier_phi_79_pred_1;
                    _3133 = frontier_phi_79_pred_2;
                    _3131 = frontier_phi_79_pred_3;
                    _3129 = frontier_phi_79_pred_4;
                    _3127 = frontier_phi_79_pred_5;
                    uint _3293 = _3292 + 1u;
                    if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3286 = _3127;
                        _3287 = _3129;
                        _3288 = _3131;
                        _3289 = _3133;
                        _3290 = _3135;
                        _3291 = _3137;
                        _3292 = _3293;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3133;
                frontier_phi_60_61_ladder_1 = _3137;
                frontier_phi_60_61_ladder_2 = _3135;
                frontier_phi_60_61_ladder_3 = _3131;
                frontier_phi_60_61_ladder_4 = _3129;
                frontier_phi_60_61_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_60_61_ladder = _3012;
                frontier_phi_60_61_ladder_1 = _3016;
                frontier_phi_60_61_ladder_2 = _3014;
                frontier_phi_60_61_ladder_3 = _3010;
                frontier_phi_60_61_ladder_4 = _3008;
                frontier_phi_60_61_ladder_5 = _3006;
            }
            _3126 = frontier_phi_60_61_ladder_5;
            _3128 = frontier_phi_60_61_ladder_4;
            _3130 = frontier_phi_60_61_ladder_3;
            _3132 = frontier_phi_60_61_ladder;
            _3134 = frontier_phi_60_61_ladder_2;
            _3136 = frontier_phi_60_61_ladder_1;
        }
        float _3141 = isnan(1.0) ? _1154 : (isnan(_1154) ? 1.0 : min(_1154, 1.0));
        _2891 = (_3141 * _3132) + _2347;
        _2893 = (_3141 * _3134) + _2349;
        _2895 = (_3141 * _3136) + _2351;
        _2897 = ((_3126 * 0.039999999105930328369140625) * _3141) + _2677;
        _2899 = ((_3128 * 0.039999999105930328369140625) * _3141) + _2679;
        _2901 = ((_3130 * 0.039999999105930328369140625) * _3141) + _2681;
    }
    else
    {
        _2891 = _2347;
        _2893 = _2349;
        _2895 = _2351;
        _2897 = _2677;
        _2899 = _2679;
        _2901 = _2681;
    }
    uint _2907 = _1130 + uint(cbMatDynParam._m0[0u].w);
    float _4961 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _4972 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _4983 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _4994 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2939 = (((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2891 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1154))) + ((_2897 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1990)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[17u].w * _741) * _1012) * cbInstanceData._m0[_2907].x);
    float _2941 = ((((cbMtdParam._m0[17u].w * _742) * _1012) * cbInstanceData._m0[_2907].y) + ((_2899 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1990)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2893 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1154)));
    float _2943 = ((((cbMtdParam._m0[17u].w * _743) * _1012) * cbInstanceData._m0[_2907].z) + ((_2901 + ((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * _1990)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_2895 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1154)));
    float _2944 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
    float _2945 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
    float _2946 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
    float _2951 = cbInstanceData._m0[_948 + 6u].w * (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)));
    float _2956 = _1092 / cbSceneParam._m0[86u].x;
    float _2957 = _1093 / cbSceneParam._m0[86u].y;
    vec4 _2971 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, (log2((isnan(cbSceneParam._m0[77u].w) ? _1046 : (isnan(_1046) ? cbSceneParam._m0[77u].w : min(_1046, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2973 = _2971.x;
    float _2974 = _2971.y;
    float _2975 = _2971.z;
    float _2976 = _2971.w;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_1046 > cbSceneParam._m0[78u].w)
    {
        float _3031 = isnan(_1046) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1046 : min(cbSceneParam._m0[80u].w, _1046));
        float _3032 = _3031 / _1046;
        float _3043 = _3032 * _1065;
        float _3044 = _1066 * _3032;
        float _3045 = (-0.0) - _3044;
        float _3046 = _3032 * _1067;
        float _3048 = (cbSceneParam._m0[77u].w * _3045) / _3031;
        float _3049 = _3048 + cbSceneParam._m0[79u].w;
        float _3050 = cbSceneParam._m0[79u].w - _3044;
        float _3056 = sqrt(((_3043 * _3043) + (_3044 * _3044)) + (_3046 * _3046));
        float _3059 = (1.0 - (cbSceneParam._m0[77u].w / _3031)) * _3056;
        float _3064 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3066 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3045 - _3048) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3049 > 0.0) ? exp2(_3064 * _3049) : (2.0 - exp2(_3066 * _3049))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3059;
        }
        else
        {
            float _3187 = 1.0 / cbSceneParam._m0[80u].x;
            float _3188 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : max(_3049, _3050));
            float _3189 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : min(_3049, _3050));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            _3243 = ((abs(_3056 / _3045) * cbSceneParam._m0[80u].y) * ((((_3198 - _3199) * 2.0) - ((exp2(_3064 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0)))) - exp2(_3064 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))))) * _3187)) - ((exp2(_3066 * _3198) - exp2(_3066 * _3199)) * _3187))) + (_3059 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_2976);
        _3068 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _2973;
        _3070 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _2974;
        _3072 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _2975;
        _3074 = _3254 * _2976;
    }
    else
    {
        _3068 = _2973;
        _3070 = _2974;
        _3072 = _2975;
        _3074 = _2976;
    }
    bool _3281;
    vec4 _3084;
    vec4 _3106;
    float _3108;
    float _3112;
    float _3113;
    float _3114;
    float _3115;
    bool _3125;
    for (;;)
    {
        _3084 = cbMatDynParam._m0[0u];
        float _3086 = roundEven(_3084.y);
        bool _3087 = _3086 == 3.0;
        float _3088 = log2(_3074);
        float _3095 = exp2(_3088 * cbSceneParam._m0[78u].x) * _2944;
        float _3096 = exp2(_3088 * cbSceneParam._m0[78u].y) * _2945;
        float _3097 = exp2(_3088 * cbSceneParam._m0[78u].z) * _2946;
        float _3104 = _1081 + (-0.5);
        _3106 = cbMtdParam._m0[1u];
        _3108 = _3106.y * _3104;
        float _3111 = (_3086 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3112 = _3111 * (_3087 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3068)));
        _3113 = _3111 * (_3087 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3070)));
        _3114 = _3111 * (_3087 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3072)));
        _3115 = _3104 * 0.999000012874603271484375;
        _3125 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3125)
        {
            if ((cbInstanceData._m0[_948 + 7u].x + _3115) < 0.5)
            {
                _3281 = true;
                break;
            }
        }
        uint _3222 = _1130 + uint(_3084.w);
        if ((cbInstanceData._m0[_3222].w < 1.0) && ((cbInstanceData._m0[_3222].w + _3115) < 0.5))
        {
            _3281 = true;
            break;
        }
        if ((_3108 + 1.0) < _3106.x)
        {
            _3281 = true;
            break;
        }
        _3281 = false;
        break;
    }
    float _3486;
    if (_3281)
    {
        discard_state = true;
        _3486 = 0.0;
    }
    else
    {
        _3486 = _2951;
    }
    SV_Target.x = _3112;
    SV_Target.y = _3113;
    SV_Target.z = _3114;
    SV_Target.w = _3486;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2951;
    discard_exit();
}


