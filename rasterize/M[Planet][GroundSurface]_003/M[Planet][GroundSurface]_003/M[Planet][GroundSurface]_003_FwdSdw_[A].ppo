#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1556;
float _4224;
float _4225;
float _4226;
float _4227;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    uvec4 _311 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _313 = _311.z != 0u;
    vec4 _334 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _337 = _334.x;
    float _338 = _334.y;
    float _339 = _334.z;
    bool _360 = _311.x != 0u;
    vec4 _379 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _381 = _379.x;
    float _382 = _379.y;
    float _383 = _379.z;
    float _399 = _360 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[9u].w - _381)) + _381) : (_381 * cbMtdParam._m0[9u].w);
    float _400 = _360 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].x - _382)) + _382) : (_382 * cbMtdParam._m0[10u].x);
    float _401 = _360 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].y - _383)) + _383) : (_383 * cbMtdParam._m0[10u].y);
    bool _403 = _311.y != 0u;
    vec4 _418 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    vec4 _451 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _465 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * (1.0 - _453)) + 1.0;
    float _4236 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _473 = (cbMtdParam._m0[18u].z * ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) - _453)) + _453;
    float _480 = (_473 * ((_403 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[10u].w - _420)) + _420) : (_420 * cbMtdParam._m0[10u].w)) - _399)) + _399;
    float _481 = (_473 * ((_403 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].x - _421)) + _421) : (_421 * cbMtdParam._m0[11u].x)) - _400)) + _400;
    float _482 = (_473 * ((_403 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].y - _422)) + _422) : (_422 * cbMtdParam._m0[11u].y)) - _401)) + _401;
    float _489 = (((1.0 - _454) * (-1.39999997615814208984375)) * cbMtdParam._m0[20u].y) + 1.0;
    float _4247 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _497 = (cbMtdParam._m0[15u].w * ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) - _454)) + _454;
    float _504 = (_497 * ((_313 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[11u].w - _337)) + _337) : (_337 * cbMtdParam._m0[11u].w)) - _480)) + _480;
    float _505 = (_497 * ((_313 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].x - _338)) + _338) : (_338 * cbMtdParam._m0[12u].x)) - _481)) + _481;
    float _506 = (_497 * ((_313 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].y - _339)) + _339) : (_339 * cbMtdParam._m0[12u].y)) - _482)) + _482;
    vec4 _529 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_13, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].y * TEXCOORD.x) + cbMtdParam._m0[22u].y) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[23u].z * TEXCOORD.y) + cbMtdParam._m0[22u].z) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _535 = cbMtdParam._m0[17u].x * _529.x;
    vec4 _547 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _574 = (((_549 - _504) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[14u].w - _549))) * _535) + _504;
    float _575 = (((_550 - _505) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].x - _550))) * _535) + _505;
    float _576 = (((_551 - _506) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].y - _551))) * _535) + _506;
    float _597 = cbMtdParam._m0[20u].z * cbPerFrame._m0[22u].x;
    vec4 _616 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_16, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[7u].x * cbMtdParam._m0[25u].w) * ((_597 * cbMtdParam._m0[26u].y) + TEXCOORD.z)) + cbTextureTilingScale._m0[7u].z, ((cbTextureTilingScale._m0[7u].y * cbMtdParam._m0[26u].x) * ((_597 * cbMtdParam._m0[26u].z) + TEXCOORD.w)) + cbTextureTilingScale._m0[7u].w));
    float _618 = _616.x;
    vec4 _653 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_17, SS_ClampLinear), vec2((((cbMtdParam._m0[25u].y + TEXCOORD.z) * cbMtdParam._m0[26u].w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[25u].z + TEXCOORD.w) * cbMtdParam._m0[27u].x) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _690 = exp2(log2(cbMtdParam._m0[21u].x * texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_15, SS_DiffuseMap), vec2(((((((cbMtdParam._m0[24u].y * _597) + (_618 * cbMtdParam._m0[23u].w)) + cbMtdParam._m0[22u].w) + (cbMtdParam._m0[24u].w * TEXCOORD.z)) + ((_653.x + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((((cbMtdParam._m0[24u].z * _597) + (_618 * cbMtdParam._m0[24u].x)) + cbMtdParam._m0[23u].x) + (cbMtdParam._m0[25u].x * TEXCOORD.w)) + ((_653.y + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).w) * cbMtdParam._m0[21u].y);
    float _4258 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _705 = ((_691 * (cbMtdParam._m0[13u].w - _574)) * cbMtdParam._m0[19u].w) + _574;
    float _706 = ((_691 * (cbMtdParam._m0[14u].x - _575)) * cbMtdParam._m0[19u].w) + _575;
    float _707 = ((_691 * (cbMtdParam._m0[14u].y - _576)) * cbMtdParam._m0[19u].w) + _576;
    float _718 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _722 = dot(vec4(_718 * _305, _718 * _306, _718 * _307, 0.0), vec4(_247, _248, _249, 0.0));
    float _725 = _722 - cbMtdParam._m0[16u].w;
    float _4269 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _735 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[16u].z : (isnan(cbMtdParam._m0[16u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[16u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[17u].y)) + cbMtdParam._m0[17u].y;
    float _745 = (((_735 * cbMtdParam._m0[12u].w) - _705) * _735) + _705;
    float _746 = (((_735 * cbMtdParam._m0[13u].x) - _706) * _735) + _706;
    float _747 = (((_735 * cbMtdParam._m0[13u].y) - _707) * _735) + _707;
    float _751 = _722 - cbMtdParam._m0[18u].y;
    float _4285 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _760 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))))) * cbMtdParam._m0[19u].y) * cbMtdParam._m0[18u].x);
    float _4296 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    vec4 _773 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _789 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _791 = _789.x;
    float _792 = _789.y;
    float _793 = _789.z;
    float _800 = ((_773.x - _791) * _473) + _791;
    float _801 = ((_773.y - _792) * _473) + _792;
    float _802 = ((_773.z - _793) * _473) + _793;
    vec4 _814 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _840 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _851 = (((_814.x - _800) * _497) + _800) + ((_840.x + (-0.5)) * cbMtdParam._m0[21u].w);
    float _852 = (((_814.y - _801) * _497) + _801) + ((_840.y + (-0.5)) * cbMtdParam._m0[21u].w);
    float _853 = (((_814.z - _802) * _497) + _802) + ((_840.z + (-0.5)) * cbMtdParam._m0[21u].w);
    vec4 _866 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _877 = ((_866.x - _851) * _535) + _851;
    float _878 = ((_866.y - _852) * _535) + _852;
    float _879 = ((_866.z - _853) * _535) + _853;
    float _889 = ((1.0 - _879) * _735) + _879;
    float _893 = ((((0.502016007900238037109375 - _877) * _735) + _877) * 2.0) + (-1.0);
    float _895 = ((((0.502016007900238037109375 - _878) * _735) + _878) * 2.0) + (-1.0);
    float _896 = dot(vec2(_893, _895), vec2(_893, _895));
    float _4307 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _901 = sqrt(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937 = inversesqrt(dot(vec3(_925, _929, _933), vec3(_925, _929, _933)));
    float _947 = inversesqrt(dot(vec3(cbMtdParam._m0[27u].yzw), vec3(cbMtdParam._m0[27u].yzw)));
    uint _952 = uint(roundEven(NORMAL.w)) * 13u;
    uint _953 = _952 + 5u;
    uint _958 = floatBitsToUint(cbInstanceData._m0[_953]).x * 14u;
    float _970 = (((_947 * cbMtdParam._m0[27u].y) - cbLight._m0[_958].x) * cbMtdParam._m0[19u].z) + cbLight._m0[_958].x;
    float _971 = (((_947 * cbMtdParam._m0[27u].z) - cbLight._m0[_958].y) * cbMtdParam._m0[19u].z) + cbLight._m0[_958].y;
    float _972 = (((_947 * cbMtdParam._m0[27u].w) - cbLight._m0[_958].z) * cbMtdParam._m0[19u].z) + cbLight._m0[_958].z;
    float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
    float _977 = _970 * _976;
    float _978 = _971 * _976;
    float _979 = _972 * _976;
    float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
    float _999 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_937 * _925, _937 * _929, _937 * _933, 0.0), vec4(_977 * _983, _978 * _983, _979 * _983, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _4318 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _1007 = exp2(log2(_1001 * 6.5) * 7.0);
    float _4329 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1014 = exp2(log2(cbMtdParam._m0[19u].x * ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) + _1001)) * cbMtdParam._m0[18u].w);
    float _4340 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1015 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1016 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _1019 = fma(_901, _247, fma(_895, _239 * TANGENT.x, (_225 * _217) * _893));
    float _1022 = fma(_901, _248, fma(_895, _239 * TANGENT.y, (_225 * _218) * _893));
    float _1025 = fma(_901, _249, fma(_895, _239 * TANGENT.z, (_225 * _219) * _893));
    float _1029 = inversesqrt(dot(vec3(_1019, _1022, _1025), vec3(_1019, _1022, _1025)));
    float _1030 = _1029 * _1019;
    float _1031 = _1029 * _1022;
    float _1032 = _1029 * _1025;
    float _4362 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _1033 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _1034 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4395 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4406 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _1050 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1069 = cbSceneParam._m0[71u].x - (_925 / _1060);
    float _1070 = cbSceneParam._m0[71u].y - (_929 / _1060);
    float _1071 = cbSceneParam._m0[71u].z - (_933 / _1060);
    float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
    float _1076 = _1069 * _1075;
    float _1077 = _1070 * _1075;
    float _1078 = _1071 * _1075;
    vec4 _1083 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1085 = _1083.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1238 = sqrt(((_1069 * _1069) + (_1070 * _1070)) + (_1071 * _1071));
        float _1244 = (cbMatDynParam._m0[5u].x * _1238) + cbMatDynParam._m0[5u].y;
        float _4417 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1249 = (cbMatDynParam._m0[5u].z * _1238) + cbMatDynParam._m0[5u].w;
        float _4428 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) - _1245)) + _1245) < ((_1085 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1096 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1097 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1115 = fma(_1032, cbSceneParam._m0[5u].z, fma(_1031, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1030));
    float _1118 = fma(_1032, cbSceneParam._m0[6u].z, fma(_1031, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1030));
    float _1121 = fma(_1032, cbSceneParam._m0[7u].z, fma(_1031, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1030));
    uint _1134 = _952 + 9u;
    uint _1135 = _1134 + uint(cbMatDynParam._m0[0u].w);
    float _1141 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * cbInstanceData._m0[_1135].x;
    float _1142 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * cbInstanceData._m0[_1135].y;
    float _1143 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * cbInstanceData._m0[_1135].z;
    float _4439 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _4450 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _4461 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    vec4 _1155 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1096, cbSceneParam._m0[86u].y * _1097));
    float _1158 = _1155.x * TEXCOORD_4;
    float _1159 = dot(vec3(_1030, _1031, _1032), vec3(_1076, _1077, _1078));
    float _1162 = _1159 * 2.0;
    float _1166 = (_1162 * _1030) - _1076;
    float _1167 = (_1162 * _1031) - _1077;
    float _1168 = (_1162 * _1032) - _1078;
    float _1172 = abs(dot(vec3(_1076, _1077, _1078), vec3(_1030, _1031, _1032)));
    float _4472 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1174 = sqrt(_1034);
    float _1187 = exp2((_1174 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1174 * 3.0));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1555;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1282 = fma(_1227, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219));
        float _1286 = fma(_1227, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219));
        float _1290 = fma(_1227, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219));
        float _1313 = _1219 + _1030;
        float _1314 = _1223 + _1031;
        float _1315 = _1227 + _1032;
        float _1325 = fma(_1315, cbModelParam._m0[26u].z, fma(_1314, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[27u].z, fma(_1314, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[28u].z, fma(_1314, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1282 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1286 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[34u].z) + ((((((_1290 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1383 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1349.x + (-0.5));
        float _1385 = _1383 * (_1349.y + (-0.5));
        float _1386 = _1383 * (_1349.z + (-0.5));
        float _1393 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1356.x + (-0.5));
        float _1395 = _1393 * (_1356.y + (-0.5));
        float _1396 = _1393 * (_1356.z + (-0.5));
        float _1403 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1363.x + (-0.5));
        float _1405 = _1403 * (_1363.y + (-0.5));
        float _1406 = _1403 * (_1363.z + (-0.5));
        float _1413 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1370.x + (-0.5));
        float _1415 = _1413 * (_1370.y + (-0.5));
        float _1416 = _1413 * (_1370.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1437 = (dot(vec3(_1030, _1031, _1032), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1447 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4520 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1449 + 1.0))) + _1454) * _1417;
        float _1464 = _1385 * 0.5;
        float _1465 = _1395 * 0.5;
        float _1466 = _1405 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_1030, _1031, _1032), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4531 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4542 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4553 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_1491 + 1.0))) + _1496) * _1418;
        float _1506 = _1386 * 0.5;
        float _1507 = _1396 * 0.5;
        float _1508 = _1406 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_1030, _1031, _1032), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4564 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4575 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4586 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_1533 + 1.0))) + _1538) * _1419;
        _1555 = _1386;
        _1557 = _1385;
        _1558 = _1384;
        _1559 = _1396;
        _1560 = _1395;
        _1561 = _1394;
        _1562 = _1406;
        _1563 = _1405;
        _1564 = _1404;
        _1565 = _1419;
        _1566 = _1418;
        _1567 = _1417;
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1556;
        _1557 = _1556;
        _1558 = _1556;
        _1559 = _1556;
        _1560 = _1556;
        _1561 = _1556;
        _1562 = _1556;
        _1563 = _1556;
        _1564 = _1556;
        _1565 = _1556;
        _1566 = _1556;
        _1567 = _1556;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1599 = fma(_1227, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219));
        float _1603 = fma(_1227, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219));
        float _1607 = fma(_1227, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219));
        float _1630 = _1219 + _1030;
        float _1631 = _1223 + _1031;
        float _1632 = _1227 + _1032;
        float _1642 = fma(_1632, cbModelParam._m0[30u].z, fma(_1631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1630)) - _1599;
        float _1643 = fma(_1632, cbModelParam._m0[31u].z, fma(_1631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1630)) - _1603;
        float _1644 = fma(_1632, cbModelParam._m0[32u].z, fma(_1631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1630)) - _1607;
        float _1648 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
        float _1661 = ((_1648 * _1642) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1599 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1662 = ((_1648 * _1643) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1603 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1648 * _1644) / cbModelParam._m0[35u].z) + ((((((_1607 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        float _1698 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1665.x + (-0.5));
        float _1700 = _1698 * (_1665.y + (-0.5));
        float _1701 = _1698 * (_1665.z + (-0.5));
        float _1708 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1672.x + (-0.5));
        float _1710 = _1708 * (_1672.y + (-0.5));
        float _1711 = _1708 * (_1672.z + (-0.5));
        float _1718 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1679.x + (-0.5));
        float _1720 = _1718 * (_1679.y + (-0.5));
        float _1721 = _1718 * (_1679.z + (-0.5));
        float _1728 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1686.x + (-0.5));
        float _1730 = _1728 * (_1686.y + (-0.5));
        float _1731 = _1728 * (_1686.z + (-0.5));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = _1699 * 0.5;
        float _1736 = _1709 * 0.5;
        float _1737 = _1719 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_1030, _1031, _1032), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4627 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4638 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4649 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_1762 + 1.0))) + _1767) * _1732;
        float _1777 = _1700 * 0.5;
        float _1778 = _1710 * 0.5;
        float _1779 = _1720 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_1030, _1031, _1032), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4660 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4671 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4682 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_1804 + 1.0))) + _1809) * _1733;
        float _1819 = _1701 * 0.5;
        float _1820 = _1711 * 0.5;
        float _1821 = _1721 * 0.5;
        float _1822 = dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821));
        float _1827 = (_1822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1822);
        float _1835 = (dot(vec3(_1030, _1031, _1032), vec3(_1827 * _1819, _1827 * _1820, _1827 * _1821)) + 1.0) * 0.5;
        float _4693 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1844 = sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4704 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _1846 = _1845 * 2.0;
        float _1850 = (1.0 - _1845) / (_1845 + 1.0);
        float _4715 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _1860 = ((((1.0 - _1851) * (_1846 + 2.0)) * exp2(log2(isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_1846 + 1.0))) + _1851) * _1734;
        _1868 = _1701;
        _1869 = _1700;
        _1870 = _1699;
        _1871 = _1711;
        _1872 = _1710;
        _1873 = _1709;
        _1874 = _1721;
        _1875 = _1720;
        _1876 = _1719;
        _1877 = _1734;
        _1878 = _1733;
        _1879 = _1732;
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)));
    }
    else
    {
        _1868 = _1556;
        _1869 = _1556;
        _1870 = _1556;
        _1871 = _1556;
        _1872 = _1556;
        _1873 = _1556;
        _1874 = _1556;
        _1875 = _1556;
        _1876 = _1556;
        _1877 = _1556;
        _1878 = _1556;
        _1879 = _1556;
        _1880 = 0.0;
        _1881 = 0.0;
        _1882 = 0.0;
    }
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1568)) + _1568;
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1569)) + _1569;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1570)) + _1570;
    float _1915 = fma(_1894, cbSceneParam._m0[89u].z, fma(_1893, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1894, cbSceneParam._m0[90u].z, fma(_1893, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1894, cbSceneParam._m0[91u].z, fma(_1893, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1892));
    float _1936 = _1166 * 0.5;
    float _1937 = _1167 * 0.5;
    float _1938 = _1168 * 0.5;
    float _1939 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1942 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1945 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1979;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1952 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1555, _1559, _1562, _1565));
        float _1956 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1557, _1560, _1563, _1566));
        float _1960 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1967 = dot(vec4(cbModelParam._m0[39u]), vec4(_1936, _1937, _1938, 1.0));
        _1979 = dot(vec3(isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1967) ? 0.0 : (isnan(0.0) ? _1967 : max(0.0, _1967))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1979 = 1.0;
    }
    float _1990;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1981 = dot(vec4(cbModelParam._m0[40u]), vec4(_1936, _1937, _1938, 1.0));
        _1990 = dot(vec3(isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1981) ? 0.0 : (isnan(0.0) ? _1981 : max(0.0, _1981))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1990 = 1.0;
    }
    float _1994 = (_1990 * cbModelParam._m0[1u].x) + (_1979 * (1.0 - cbModelParam._m0[1u].x));
    float _2004 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1034);
    float _2005 = isnan(_2004) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2004 : min(cbModelParam._m0[25u].z, _2004));
    float _2085;
    float _2087;
    float _2089;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2052 = fma(_1227, cbModelParam._m0[13u].z, fma(_1223, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1219)) + cbModelParam._m0[13u].w;
        float _2056 = fma(_1227, cbModelParam._m0[14u].z, fma(_1223, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1219)) + cbModelParam._m0[14u].w;
        float _2060 = fma(_1227, cbModelParam._m0[15u].z, fma(_1223, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1219)) + cbModelParam._m0[15u].w;
        float _2063 = fma(_1168, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166));
        float _2066 = fma(_1168, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166));
        float _2069 = fma(_1168, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166));
        float _2097;
        if (_2063 > 0.0)
        {
            _2097 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2097 = frontier_phi_19_17_ladder;
        }
        float _2266;
        if (_2066 > 0.0)
        {
            _2266 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2266 = frontier_phi_28_24_ladder;
        }
        float _2560;
        if (_2069 > 0.0)
        {
            _2560 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2560 = frontier_phi_40_35_ladder;
        }
        float _2562 = isnan(_2266) ? _2097 : (isnan(_2097) ? _2266 : min(_2097, _2266));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _2063) + _2052;
        float _2568 = (_2563 * _2066) + _2056;
        float _2569 = (_2563 * _2069) + _2060;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2572 = (-1.0) - _2570;
        float _2574 = _2570 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2569 > _2574) || ((_2569 < _2572) || ((_2568 > _2574) || ((_2568 < _2572) || ((_2567 < _2572) || (_2567 > _2574))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2714 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2569, cbModelParam._m0[9u].z, fma(_2568, cbModelParam._m0[9u].y, _2567 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2569, cbModelParam._m0[10u].z, fma(_2568, cbModelParam._m0[10u].y, _2567 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2569, cbModelParam._m0[11u].z, fma(_2568, cbModelParam._m0[11u].y, _2567 * cbModelParam._m0[11u].x))), _2005);
            frontier_phi_18_40_ladder = _2714.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2714.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2714.x * cbModelParam._m0[1u].y;
        }
        _2085 = frontier_phi_18_40_ladder_2;
        _2087 = frontier_phi_18_40_ladder_1;
        _2089 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1166, _1167, _1168), _2005);
        _2085 = _2073.x * cbModelParam._m0[1u].y;
        _2087 = _2073.y * cbModelParam._m0[1u].y;
        _2089 = _2073.z * cbModelParam._m0[1u].y;
    }
    float _2093 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1034);
    float _2094 = isnan(_2093) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2093 : min(cbModelParam._m0[25u].w, _2093));
    float _2183;
    float _2185;
    float _2187;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2147 = fma(_1227, cbModelParam._m0[21u].z, fma(_1223, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1219)) + cbModelParam._m0[21u].w;
        float _2151 = fma(_1227, cbModelParam._m0[22u].z, fma(_1223, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1219)) + cbModelParam._m0[22u].w;
        float _2155 = fma(_1227, cbModelParam._m0[23u].z, fma(_1223, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1219)) + cbModelParam._m0[23u].w;
        float _2158 = fma(_1168, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166));
        float _2161 = fma(_1168, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166));
        float _2164 = fma(_1168, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166));
        float _2271;
        if (_2158 > 0.0)
        {
            _2271 = abs((1.0 - _2147) / _2158);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2147 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2271 = frontier_phi_30_26_ladder;
        }
        float _2587;
        if (_2161 > 0.0)
        {
            _2587 = abs((1.0 - _2151) / _2161);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2151 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2587 = frontier_phi_42_37_ladder;
        }
        float _2914;
        if (_2164 > 0.0)
        {
            _2914 = abs((1.0 - _2155) / _2164);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2155 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2914 = frontier_phi_52_49_ladder;
        }
        float _2916 = isnan(_2587) ? _2271 : (isnan(_2271) ? _2587 : min(_2271, _2587));
        float _2917 = isnan(_2914) ? _2916 : (isnan(_2916) ? _2914 : min(_2916, _2914));
        float _2921 = (_2917 * _2158) + _2147;
        float _2922 = (_2917 * _2161) + _2151;
        float _2923 = (_2917 * _2164) + _2155;
        float _2924 = _2917 * 9.9999997473787516355514526367188e-05;
        float _2925 = (-1.0) - _2924;
        float _2927 = _2924 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2923 > _2927) || ((_2923 < _2925) || ((_2922 > _2927) || ((_2922 < _2925) || ((_2921 < _2925) || (_2921 > _2927))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2923, cbModelParam._m0[17u].z, fma(_2922, cbModelParam._m0[17u].y, _2921 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2923, cbModelParam._m0[18u].z, fma(_2922, cbModelParam._m0[18u].y, _2921 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2923, cbModelParam._m0[19u].z, fma(_2922, cbModelParam._m0[19u].y, _2921 * cbModelParam._m0[19u].x))), _2094);
            frontier_phi_27_52_ladder = _3041.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3041.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3041.x * cbModelParam._m0[1u].z;
        }
        _2183 = frontier_phi_27_52_ladder_2;
        _2185 = frontier_phi_27_52_ladder_1;
        _2187 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2167 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1166, _1167, _1168), _2094);
        _2183 = _2167.x * cbModelParam._m0[1u].z;
        _2185 = _2167.y * cbModelParam._m0[1u].z;
        _2187 = _2167.z * cbModelParam._m0[1u].z;
    }
    float _2199 = ((((1.0 - _1187) * ((_1174 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1187 * _1174)) * _1158;
    float _2200 = _2199 * ((cbModelParam._m0[1u].w * (_2183 - _2085)) + _2085);
    float _2201 = _2199 * ((cbModelParam._m0[1u].w * (_2185 - _2087)) + _2087);
    float _2202 = _2199 * ((cbModelParam._m0[1u].w * (_2187 - _2089)) + _2089);
    float _2205 = fma(_2202, cbSceneParam._m0[89u].z, fma(_2201, cbSceneParam._m0[89u].y, _2200 * cbSceneParam._m0[89u].x));
    float _2208 = fma(_2202, cbSceneParam._m0[90u].z, fma(_2201, cbSceneParam._m0[90u].y, _2200 * cbSceneParam._m0[90u].x));
    float _2211 = fma(_2202, cbSceneParam._m0[91u].z, fma(_2201, cbSceneParam._m0[91u].y, _2200 * cbSceneParam._m0[91u].x));
    float _2245 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2249 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2253 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2257 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2258 = _2245 / _2257;
    float _2259 = _2249 / _2257;
    float _2260 = _2253 / _2257;
    float _2407;
    float _2408;
    float _2409;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2287 = ((uint(_2260 > cbSceneParam._m0[59u].y) + uint(_2260 > cbSceneParam._m0[59u].x)) + uint(_2260 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2288 = _2287 + 43u;
        uint _2296 = _2287 + 44u;
        uint _2304 = _2287 + 45u;
        uint _2312 = _2287 + 46u;
        float _2323 = fma(_2257, cbSceneParam._m0[_2288].w, fma(_2253, cbSceneParam._m0[_2288].z, fma(_2249, cbSceneParam._m0[_2288].y, _2245 * cbSceneParam._m0[_2288].x)));
        float _2327 = fma(_2257, cbSceneParam._m0[_2296].w, fma(_2253, cbSceneParam._m0[_2296].z, fma(_2249, cbSceneParam._m0[_2296].y, _2245 * cbSceneParam._m0[_2296].x)));
        float _2335 = fma(_2257, cbSceneParam._m0[_2312].w, fma(_2253, cbSceneParam._m0[_2312].z, fma(_2249, cbSceneParam._m0[_2312].y, _2245 * cbSceneParam._m0[_2312].x)));
        float _2340 = cbSceneParam._m0[33u].z * _2335;
        float _2342 = cbSceneParam._m0[33u].w * _2335;
        float _2345 = fma(_2257, cbSceneParam._m0[_2304].w, fma(_2253, cbSceneParam._m0[_2304].z, fma(_2249, cbSceneParam._m0[_2304].y, _2245 * cbSceneParam._m0[_2304].x))) / _2335;
        float _2393 = (cbSceneParam._m0[33u].x - sqrt(((_2259 * _2259) + (_2258 * _2258)) + (_2260 * _2260))) * cbSceneParam._m0[33u].y;
        float _4841 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2400 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2340 + _2323) / _2335, (_2342 + _2327) / _2335), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2342 + _2323) / _2335, (_2327 - _2340) / _2335), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2323 - _2340) / _2335, (_2327 - _2342) / _2335), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2323 - _2342) / _2335, (_2340 + _2327) / _2335), _2345), 0.0)).x), vec4(0.25)));
        _2407 = 1.0 - (_2400 * cbSceneParam._m0[34u].x);
        _2408 = 1.0 - (_2400 * cbSceneParam._m0[34u].y);
        _2409 = 1.0 - (_2400 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2407 = 1.0;
        _2408 = 1.0;
        _2409 = 1.0;
    }
    float _2473;
    float _2475;
    float _2477;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2461 = fma(_2257, cbSceneParam._m0[63u].w, fma(_2253, cbSceneParam._m0[63u].z, fma(_2249, cbSceneParam._m0[63u].y, _2245 * cbSceneParam._m0[63u].x)));
        float _2462 = fma(_2257, cbSceneParam._m0[60u].w, fma(_2253, cbSceneParam._m0[60u].z, fma(_2249, cbSceneParam._m0[60u].y, _2245 * cbSceneParam._m0[60u].x))) / _2461;
        float _2463 = fma(_2257, cbSceneParam._m0[61u].w, fma(_2253, cbSceneParam._m0[61u].z, fma(_2249, cbSceneParam._m0[61u].y, _2245 * cbSceneParam._m0[61u].x))) / _2461;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2462 >= cbSceneParam._m0[64u].x) && (_2463 >= cbSceneParam._m0[64u].y)) && (_2462 <= cbSceneParam._m0[64u].z)) && (_2463 <= cbSceneParam._m0[64u].w))
        {
            float _2600 = fma(_2257, cbSceneParam._m0[62u].w, fma(_2253, cbSceneParam._m0[62u].z, fma(_2249, cbSceneParam._m0[62u].y, _2245 * cbSceneParam._m0[62u].x))) / _2461;
            float _2604 = isnan(cbSceneParam._m0[41u].w) ? _2600 : (isnan(_2600) ? cbSceneParam._m0[41u].w : max(_2600, cbSceneParam._m0[41u].w));
            float _2647 = (cbSceneParam._m0[33u].x - sqrt(((_2259 * _2259) + (_2258 * _2258)) + (_2260 * _2260))) * cbSceneParam._m0[33u].y;
            float _4857 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
            float _2654 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2462, cbSceneParam._m0[33u].w + _2463), _2604), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2462, _2463 - cbSceneParam._m0[33u].z), _2604), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2462 - cbSceneParam._m0[33u].z, _2463 - cbSceneParam._m0[33u].w), _2604), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2462 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2463), _2604), 0.0)).x), vec4(0.25)));
            float _2658 = 1.0 - (_2654 * cbSceneParam._m0[34u].x);
            float _2659 = 1.0 - (_2654 * cbSceneParam._m0[34u].y);
            float _2660 = 1.0 - (_2654 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2659) ? _2408 : (isnan(_2408) ? _2659 : min(_2408, _2659));
            frontier_phi_39_38_ladder_1 = isnan(_2658) ? _2407 : (isnan(_2407) ? _2658 : min(_2407, _2658));
            frontier_phi_39_38_ladder_2 = isnan(_2660) ? _2409 : (isnan(_2409) ? _2660 : min(_2409, _2660));
        }
        else
        {
            frontier_phi_39_38_ladder = _2408;
            frontier_phi_39_38_ladder_1 = _2407;
            frontier_phi_39_38_ladder_2 = _2409;
        }
        _2473 = frontier_phi_39_38_ladder_1;
        _2475 = frontier_phi_39_38_ladder;
        _2477 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2473 = _2407;
        _2475 = _2408;
        _2477 = _2409;
    }
    uvec4 _2481 = floatBitsToUint(cbInstanceData._m0[_953]);
    uint _2483 = _2481.x * 14u;
    uint _2484 = _2483 + 13u;
    float _2491 = _1158 + (-1.0);
    float _2496 = (cbLight._m0[_2484].x * _2491) + 1.0;
    float _2497 = (cbLight._m0[_2484].y * _2491) + 1.0;
    float _2498 = (cbLight._m0[_2484].z * _2491) + 1.0;
    float _2499 = (cbLight._m0[_2484].w * _2491) + 1.0;
    uint _2500 = _2483 + 5u;
    float _2506 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
    uint _2510 = _2483 + 4u;
    float _2519 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
    uint _2523 = _2483 | 1u;
    float _2534 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_1030, _1031, _1032));
    float _2537 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_1030, _1031, _1032));
    float _4893 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _4904 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2542 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * 0.3183098733425140380859375;
    float _2544 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * 0.3183098733425140380859375;
    float _2551 = ((cbLight._m0[_2500].x * _2506) * _2544) + (((cbLight._m0[_2510].x * _2473) * _2519) * _2542);
    float _2552 = ((_2506 * cbLight._m0[_2500].y) * _2544) + (((cbLight._m0[_2510].y * _2475) * _2519) * _2542);
    float _2553 = ((_2506 * cbLight._m0[_2500].z) * _2544) + (((cbLight._m0[_2510].z * _2477) * _2519) * _2542);
    uvec4 _2557 = floatBitsToUint(cbLight._m0[_2483 + 12u]);
    bool _2559 = _2557.x == 0u;
    float _2661;
    float _2663;
    float _2665;
    if (_2559)
    {
        _2661 = _2551;
        _2663 = _2552;
        _2665 = _2553;
    }
    else
    {
        uint _2669 = _2483 + 6u;
        float _2685 = (dot(vec3(cbLight._m0[_2483 + 2u].xyz), vec3(_1030, _1031, _1032)) * 0.5) + 0.5;
        float _2686 = _2685 * _2685;
        float _4915 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2687 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
        float _2688 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _2661 = (((cbLight._m0[_2669].x * 0.3183098733425140380859375) * _2687) * _2688) + _2551;
        _2663 = (((cbLight._m0[_2669].y * 0.3183098733425140380859375) * _2687) * _2688) + _2552;
        _2665 = (((cbLight._m0[_2669].z * 0.3183098733425140380859375) * _2687) * _2688) + _2553;
    }
    bool _2668 = _2557.y == 0u;
    float _2723;
    float _2725;
    float _2727;
    if (_2668)
    {
        _2723 = _2661;
        _2725 = _2663;
        _2727 = _2665;
    }
    else
    {
        uint _2885 = _2483 + 7u;
        float _2901 = (dot(vec3(cbLight._m0[_2483 + 3u].xyz), vec3(_1030, _1031, _1032)) * 0.5) + 0.5;
        float _2902 = _2901 * _2901;
        float _4931 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2903 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
        float _2904 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
        _2723 = (((cbLight._m0[_2885].x * 0.3183098733425140380859375) * _2903) * _2904) + _2661;
        _2725 = (((cbLight._m0[_2885].y * 0.3183098733425140380859375) * _2903) * _2904) + _2663;
        _2727 = (((cbLight._m0[_2885].z * 0.3183098733425140380859375) * _2903) * _2904) + _2665;
    }
    uint _2730 = _2483 + 8u;
    float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _1034) * 0.949999988079071044921875);
    float _2744 = _2743 * _2743;
    float _2745 = cbLight._m0[_2483].x + _1076;
    float _2746 = cbLight._m0[_2483].y + _1077;
    float _2747 = cbLight._m0[_2483].z + _1078;
    float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
    float _2752 = _2751 * _2745;
    float _2753 = _2751 * _2746;
    float _2754 = _2751 * _2747;
    float _2755 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2483].xyz));
    float _4947 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2758 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
    float _4958 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _2759 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
    float _2760 = dot(vec3(_1030, _1031, _1032), vec3(_2752, _2753, _2754));
    float _4969 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
    float _2764 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2752, _2753, _2754));
    float _4980 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2768 = _2744 * _2744;
    float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
    float _2783 = (exp2(log2(1.0 - (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2784 = 1.0 - _2744;
    float _2795 = (0.5 / (((_2759 * ((_2758 * _2784) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _2784) + _2744) * _2758))) * _2758;
    float _4991 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2797 = (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
    uint _2811 = _2483 + 9u;
    float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _1034) * 0.949999988079071044921875);
    float _2823 = _2822 * _2822;
    float _2824 = cbLight._m0[_2523].x + _1076;
    float _2825 = cbLight._m0[_2523].y + _1077;
    float _2826 = cbLight._m0[_2523].z + _1078;
    float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
    float _2831 = _2830 * _2824;
    float _2832 = _2830 * _2825;
    float _2833 = _2830 * _2826;
    float _2834 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2523].xyz));
    float _5002 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2837 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
    float _2838 = dot(vec3(_1030, _1031, _1032), vec3(_2831, _2832, _2833));
    float _5013 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2841 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
    float _2842 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2831, _2832, _2833));
    float _5024 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2846 = _2823 * _2823;
    float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
    float _2859 = (exp2(log2(1.0 - (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2860 = 1.0 - _2823;
    float _2870 = (0.5 / (((_2759 * ((_2837 * _2860) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _2860) + _2823) * _2837))) * _2837;
    float _5035 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2872 = (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
    float _2882 = (((_2859 * cbLight._m0[_2811].x) * _2872) * _2506) + ((((cbLight._m0[_2730].x * _2473) * _2783) * _2797) * _2519);
    float _2883 = (((_2859 * cbLight._m0[_2811].y) * _2872) * _2506) + ((((cbLight._m0[_2730].y * _2475) * _2783) * _2797) * _2519);
    float _2884 = (((_2859 * cbLight._m0[_2811].z) * _2872) * _2506) + ((((cbLight._m0[_2730].z * _2477) * _2783) * _2797) * _2519);
    float _2940;
    float _2942;
    float _2944;
    if (_2559)
    {
        _2940 = _2882;
        _2942 = _2883;
        _2944 = _2884;
    }
    else
    {
        uint _2946 = _2483 + 2u;
        uint _2950 = _2483 + 10u;
        float _2964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2946].w)) * _1034) * 0.949999988079071044921875);
        float _2965 = _2964 * _2964;
        float _2966 = cbLight._m0[_2946].x + _1076;
        float _2967 = cbLight._m0[_2946].y + _1077;
        float _2968 = cbLight._m0[_2946].z + _1078;
        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
        float _2973 = _2972 * _2966;
        float _2974 = _2972 * _2967;
        float _2975 = _2972 * _2968;
        float _2976 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2946].xyz));
        float _5046 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
        float _2980 = dot(vec3(_1030, _1031, _1032), vec3(_2973, _2974, _2975));
        float _5057 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2983 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
        float _2984 = dot(vec3(cbLight._m0[_2946].xyz), vec3(_2973, _2974, _2975));
        float _5068 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2988 = _2965 * _2965;
        float _2992 = ((_2983 * _2983) * (_2988 + (-1.0))) + 1.0;
        float _3001 = (exp2(log2(1.0 - (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3002 = 1.0 - _2965;
        float _3012 = (0.5 / (((_2759 * ((_2979 * _3002) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _3002) + _2965) * _2979))) * _2979;
        float _5079 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3014 = (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_2988 / ((_2992 * _2992) * 3.141590118408203125));
        float _3015 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _2940 = (((_3001 * cbLight._m0[_2950].x) * _3014) * _3015) + _2882;
        _2942 = (((_3001 * cbLight._m0[_2950].y) * _3014) * _3015) + _2883;
        _2944 = (((_3001 * cbLight._m0[_2950].z) * _3014) * _3015) + _2884;
    }
    float _3046;
    float _3048;
    float _3050;
    if (_2668)
    {
        _3046 = _2940;
        _3048 = _2942;
        _3050 = _2944;
    }
    else
    {
        uint _3057 = _2483 + 3u;
        uint _3061 = _2483 + 11u;
        float _3075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3057].w)) * _1034) * 0.949999988079071044921875);
        float _3076 = _3075 * _3075;
        float _3077 = cbLight._m0[_3057].x + _1076;
        float _3078 = cbLight._m0[_3057].y + _1077;
        float _3079 = cbLight._m0[_3057].z + _1078;
        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
        float _3084 = _3083 * _3077;
        float _3085 = _3083 * _3078;
        float _3086 = _3083 * _3079;
        float _3087 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_3057].xyz));
        float _5095 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        float _3090 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
        float _3091 = dot(vec3(_1030, _1031, _1032), vec3(_3084, _3085, _3086));
        float _5106 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3094 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
        float _3095 = dot(vec3(cbLight._m0[_3057].xyz), vec3(_3084, _3085, _3086));
        float _5117 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        float _3099 = _3076 * _3076;
        float _3103 = ((_3094 * _3094) * (_3099 + (-1.0))) + 1.0;
        float _3112 = (exp2(log2(1.0 - (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3113 = 1.0 - _3076;
        float _3123 = (0.5 / (((_2759 * ((_3090 * _3113) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _3113) + _3076) * _3090))) * _3090;
        float _5128 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
        float _3125 = (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3099 / ((_3103 * _3103) * 3.141590118408203125));
        float _3126 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
        _3046 = (((_3112 * cbLight._m0[_3061].x) * _3125) * _3126) + _2940;
        _3048 = (((_3112 * cbLight._m0[_3061].y) * _3125) * _3126) + _2942;
        _3050 = (((_3112 * cbLight._m0[_3061].z) * _3125) * _3126) + _2944;
    }
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_2481.y == 0u)
    {
        uvec4 _3147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3148 = _3147.x;
        uint _3159 = uint((float(_3147.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1097) / _3148))) + floor(float(uint(cbSceneParam._m0[85u].x * _1096) / _3148)));
        float _3169 = (log2(_2260 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3170 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
        uint _3173 = uint(isnan(14.0) ? _3170 : (isnan(_3170) ? 14.0 : min(_3170, 14.0)));
        uvec4 _3178 = texelFetch(g_lightClusterGridBuffer, int(((_3173 << 2u) + (_3159 << 6u)) >> 2u));
        uint _3179 = _3178.x;
        uint _3180 = _3147.z;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        if (((((1u << ((_3180 >> 4u) & 15u)) + 4294967295u) & _3179) == 0u) || ((_3180 & 240u) == 0u))
        {
            _3285 = 0.0;
            _3287 = 0.0;
            _3289 = 0.0;
            _3291 = 0.0;
            _3293 = 0.0;
            _3295 = 0.0;
        }
        else
        {
            float _3286;
            float _3288;
            float _3290;
            float _3292;
            float _3294;
            float _3296;
            float _3437 = 0.0;
            float _3438 = 0.0;
            float _3439 = 0.0;
            float _3440 = 0.0;
            float _3441 = 0.0;
            float _3442 = 0.0;
            uint _3443 = 0u;
            uint _3452;
            bool _3453;
            for (;;)
            {
                _3452 = texelFetch(g_lightClassification, int((((_3173 << 5u) + (_3159 << 9u)) + (_3443 << 2u)) >> 2u)).x;
                _3453 = _3452 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3453)
                {
                    frontier_phi_73_pred = _3442;
                    frontier_phi_73_pred_1 = _3441;
                    frontier_phi_73_pred_2 = _3440;
                    frontier_phi_73_pred_3 = _3439;
                    frontier_phi_73_pred_4 = _3438;
                    frontier_phi_73_pred_5 = _3437;
                }
                else
                {
                    float _3582;
                    float _3583;
                    float _3584;
                    float _3585;
                    float _3586;
                    float _3587;
                    uint _3588;
                    _3582 = _3437;
                    _3583 = _3438;
                    _3584 = _3439;
                    _3585 = _3440;
                    _3586 = _3441;
                    _3587 = _3442;
                    _3588 = _3452;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    for (;;)
                    {
                        uint _3592 = uint(findLSB(_3588)) + (_3443 << 5u);
                        uint _3589 = (_3588 + 4294967295u) & _3588;
                        uint _3594 = _3592 * 48u;
                        vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3594)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 3u)).x));
                        uint _3614 = (_3592 * 48u) + 4u;
                        vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3614)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 3u)).x));
                        uint _3633 = (_3592 * 48u) + 8u;
                        vec3 _3644 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3633)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 2u)).x));
                        float _3648 = _3608.x - _2258;
                        float _3649 = _3608.y - _2259;
                        float _3650 = _3608.z - _2260;
                        float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                        float _3654 = inversesqrt(_3651);
                        float _3655 = _3654 * _3648;
                        float _3656 = _3654 * _3649;
                        float _3657 = _3654 * _3650;
                        float _3658 = dot(vec3(_1115, _1118, _1121), vec3(_3655, _3656, _3657));
                        float _3663 = 1.0 - (_3651 * _3608.w);
                        float _5154 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3664 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                        float _3665 = sqrt(_3651) * _3627.w;
                        float _3668 = 1.39999997615814208984375 / (_3665 + 1.39999997615814208984375);
                        float _3669 = _3668 * _3668;
                        float _3672 = ((1.0 - _3669) * _3658) + _3669;
                        float _3675 = _3665 * _3665;
                        float _3679 = ((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3664) / ((_3675 * 0.699999988079071044921875) + 1.0);
                        float _3683 = (-0.0) - _2258;
                        float _3684 = (-0.0) - _2259;
                        float _3685 = (-0.0) - _2260;
                        float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                        float _3690 = _3689 * _3683;
                        float _3691 = _3689 * _3684;
                        float _3692 = _3689 * _3685;
                        float _3699 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                        float _3700 = 1.0 - _1174;
                        float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                        float _3708 = _3707 * _3707;
                        float _3709 = _3708 * _3708;
                        float _3710 = _3690 + _3655;
                        float _3711 = _3691 + _3656;
                        float _3712 = _3692 + _3657;
                        float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                        float _3720 = dot(vec3(_1115, _1118, _1121), vec3(_3690, _3691, _3692));
                        float _5170 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                        float _3723 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                        float _3724 = dot(vec3(_1115, _1118, _1121), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                        float _5181 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                        float _3727 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                        float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                        float _3732 = _3668 * _3708;
                        float _3733 = _3732 * _3732;
                        float _3736 = ((1.0 - _3733) * _3658) + _3733;
                        float _5192 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                        float _3737 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                        float _3738 = 1.0 - _3708;
                        float _3748 = (0.5 / (((_3737 * ((_3723 * _3738) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3708) * _3723))) * _3737;
                        float _5203 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                        float _3759 = (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0)))) / ((_3731 * _3731) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125))) * _3664;
                        _3512 = (_3679 * _3627.x) + _3585;
                        _3513 = (_3679 * _3627.y) + _3586;
                        _3514 = (_3679 * _3627.z) + _3587;
                        _3509 = (_3759 * _3644.x) + _3582;
                        _3510 = (_3759 * _3644.y) + _3583;
                        _3511 = (_3759 * _3644.z) + _3584;
                        if (_3589 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3582 = _3509;
                            _3583 = _3510;
                            _3584 = _3511;
                            _3585 = _3512;
                            _3586 = _3513;
                            _3587 = _3514;
                            _3588 = _3589;
                        }
                    }
                    frontier_phi_73_pred = _3514;
                    frontier_phi_73_pred_1 = _3513;
                    frontier_phi_73_pred_2 = _3512;
                    frontier_phi_73_pred_3 = _3511;
                    frontier_phi_73_pred_4 = _3510;
                    frontier_phi_73_pred_5 = _3509;
                }
                _3296 = frontier_phi_73_pred;
                _3294 = frontier_phi_73_pred_1;
                _3292 = frontier_phi_73_pred_2;
                _3290 = frontier_phi_73_pred_3;
                _3288 = frontier_phi_73_pred_4;
                _3286 = frontier_phi_73_pred_5;
                uint _3444 = _3443 + 1u;
                if (_3444 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3437 = _3286;
                    _3438 = _3288;
                    _3439 = _3290;
                    _3440 = _3292;
                    _3441 = _3294;
                    _3442 = _3296;
                    _3443 = _3444;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3285 = _3286;
            _3287 = _3288;
            _3289 = _3290;
            _3291 = _3292;
            _3293 = _3294;
            _3295 = _3296;
        }
        uvec4 _3299 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3300 = _3299.z;
        uint _3302 = (_3300 >> 8u) & 15u;
        float _3405;
        float _3407;
        float _3409;
        float _3411;
        float _3413;
        float _3415;
        if (((4294967295u << _3302) & _3179) == 0u)
        {
            _3405 = _3285;
            _3407 = _3287;
            _3409 = _3289;
            _3411 = _3291;
            _3413 = _3293;
            _3415 = _3295;
        }
        else
        {
            float _3430 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
            float _3431 = _3430 * _2258;
            float _3432 = _3430 * _2259;
            float _3433 = _3430 * _2260;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3302 < ((_3300 >> 12u) & 15u))
            {
                float _3406;
                float _3408;
                float _3410;
                float _3412;
                float _3414;
                float _3416;
                float _3565 = _3285;
                float _3566 = _3287;
                float _3567 = _3289;
                float _3568 = _3291;
                float _3569 = _3293;
                float _3570 = _3295;
                uint _3571 = _3302;
                uint _3580;
                bool _3581;
                for (;;)
                {
                    _3580 = texelFetch(g_lightClassification, int((((_3173 << 5u) + (_3159 << 9u)) + (_3571 << 2u)) >> 2u)).x;
                    _3581 = _3580 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3581)
                    {
                        frontier_phi_84_pred = _3569;
                        frontier_phi_84_pred_1 = _3568;
                        frontier_phi_84_pred_2 = _3567;
                        frontier_phi_84_pred_3 = _3566;
                        frontier_phi_84_pred_4 = _3565;
                        frontier_phi_84_pred_5 = _3570;
                    }
                    else
                    {
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _4066;
                        float _4067;
                        float _4068;
                        float _4069;
                        float _4070;
                        float _4071;
                        float _3786 = _3565;
                        float _3787 = _3566;
                        float _3788 = _3567;
                        float _3789 = _3568;
                        float _3790 = _3569;
                        float _3791 = _3570;
                        uint _3792 = _3580;
                        uint _3793;
                        vec4 _3818;
                        float _3819;
                        vec4 _3834;
                        vec3 _3846;
                        vec4 _3861;
                        vec4 _3876;
                        float _3922;
                        bool _3923;
                        for (;;)
                        {
                            uint _3803 = ((_3571 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3792));
                            _3793 = (_3792 + 4294967295u) & _3792;
                            uint _3805 = _3803 * 40u;
                            _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            _3819 = _3818.w;
                            uint _3821 = (_3803 * 40u) + 4u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3803 * 40u) + 8u;
                            _3846 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x));
                            uint _3848 = (_3803 * 40u) + 16u;
                            _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            uint _3863 = (_3803 * 40u) + 20u;
                            _3876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 3u)).x));
                            uint _3878 = (_3803 * 40u) + 24u;
                            vec4 _3891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 3u)).x));
                            uint _3897 = (_3803 * 40u) + 28u;
                            vec4 _3910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 3u)).x));
                            _3922 = fma(_2260, _3910.z, fma(_2259, _3910.y, _3910.x * _2258)) + _3910.w;
                            _3923 = !((fma(_2260, _3891.z, fma(_2259, _3891.y, _3891.x * _2258)) + _3891.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3923)
                            {
                                float _3950 = _3818.x - _2258;
                                float _3951 = _3818.y - _2259;
                                float _3952 = _3818.z - _2260;
                                float _3953 = dot(vec3(_3950, _3951, _3952), vec3(_3950, _3951, _3952));
                                float _3956 = inversesqrt(_3953);
                                float _3957 = _3956 * _3950;
                                float _3958 = _3956 * _3951;
                                float _3959 = _3956 * _3952;
                                float _3963 = 1.0 - (_3953 / (_3819 * _3819));
                                float _5214 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3964 = isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0));
                                float _3968 = sqrt(_3953) * _3834.w;
                                float _3970 = 1.39999997615814208984375 / (_3968 + 1.39999997615814208984375);
                                float _3971 = _3970 * _3970;
                                float _3974 = ((1.0 - _3971) * dot(vec3(_3957, _3958, _3959), vec3(_1115, _1118, _1121))) + _3971;
                                float _3977 = _3968 * _3968;
                                float _3981 = (fma(_2260, _3861.z, fma(_2259, _3861.y, _3861.x * _2258)) + _3861.w) / _3922;
                                float _3982 = (fma(_2260, _3876.z, fma(_2259, _3876.y, _3876.x * _2258)) + _3876.w) / _3922;
                                float _3986 = 1.0 - dot(vec2(_3981, _3982), vec2(_3981, _3982));
                                float _5230 = isnan(0.0) ? _3986 : (isnan(_3986) ? 0.0 : max(_3986, 0.0));
                                float _3987 = isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0));
                                float _3988 = _3987 * (((isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0))) * _3964) / ((_3977 * 0.699999988079071044921875) + 1.0));
                                float _4000 = exp2(log2(1.0 / ((_3977 * 3.5) + 5.0)) * 0.25);
                                float _4001 = 1.0 - _1174;
                                float _4008 = sqrt(1.0 - ((1.0 - (_4001 * _4001)) * (1.0 - (_4000 * _4000))));
                                float _4009 = _4008 * _4008;
                                float _4010 = _4009 * _4009;
                                float _4011 = _3957 - _3431;
                                float _4012 = _3958 - _3432;
                                float _4013 = _3959 - _3433;
                                float _4017 = inversesqrt(dot(vec3(_4011, _4012, _4013), vec3(_4011, _4012, _4013)));
                                float _4021 = dot(vec3(_1115, _1118, _1121), vec3((-0.0) - _3431, (-0.0) - _3432, (-0.0) - _3433));
                                float _5241 = isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0));
                                float _4024 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
                                float _4025 = dot(vec3(_1115, _1118, _1121), vec3(_4017 * _4011, _4017 * _4012, _4017 * _4013));
                                float _5252 = isnan(0.0) ? _4025 : (isnan(_4025) ? 0.0 : max(_4025, 0.0));
                                float _4028 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                                float _4032 = ((_4028 * _4028) * (_4010 + (-1.0))) + 1.0;
                                float _4033 = _3970 * _4009;
                                float _4034 = _4033 * _4033;
                                float _4040 = ((1.0 - _4034) * dot(vec3(_1115, _1118, _1121), vec3(_3957, _3958, _3959))) + _4034;
                                float _5263 = isnan(0.0) ? _4040 : (isnan(_4040) ? 0.0 : max(_4040, 0.0));
                                float _4041 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                                float _4042 = 1.0 - _4009;
                                float _4052 = (0.5 / (((_4041 * ((_4024 * _4042) + _4009)) + 9.9999999392252902907785028219223e-09) + (((_4041 * _4042) + _4009) * _4024))) * _4041;
                                float _5274 = isnan(0.0) ? _4052 : (isnan(_4052) ? 0.0 : max(_4052, 0.0));
                                float _4062 = (_3987 * _3964) * (((_4010 * 3.1415927410125732421875) * (isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0)))) / ((_4032 * _4032) * ((_3977 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3988 * _3834.y;
                                frontier_phi_90_pred_1 = _3988 * _3834.x;
                                frontier_phi_90_pred_2 = _4062 * _3846.z;
                                frontier_phi_90_pred_3 = _4062 * _3846.y;
                                frontier_phi_90_pred_4 = _4062 * _3846.x;
                                frontier_phi_90_pred_5 = _3988 * _3834.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4070 = frontier_phi_90_pred;
                            _4069 = frontier_phi_90_pred_1;
                            _4068 = frontier_phi_90_pred_2;
                            _4067 = frontier_phi_90_pred_3;
                            _4066 = frontier_phi_90_pred_4;
                            _4071 = frontier_phi_90_pred_5;
                            _3776 = _4069 + _3789;
                            _3777 = _4070 + _3790;
                            _3778 = _4071 + _3791;
                            _3773 = _4066 + _3786;
                            _3774 = _4067 + _3787;
                            _3775 = _4068 + _3788;
                            if (_3793 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3786 = _3773;
                                _3787 = _3774;
                                _3788 = _3775;
                                _3789 = _3776;
                                _3790 = _3777;
                                _3791 = _3778;
                                _3792 = _3793;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3777;
                        frontier_phi_84_pred_1 = _3776;
                        frontier_phi_84_pred_2 = _3775;
                        frontier_phi_84_pred_3 = _3774;
                        frontier_phi_84_pred_4 = _3773;
                        frontier_phi_84_pred_5 = _3778;
                    }
                    _3414 = frontier_phi_84_pred;
                    _3412 = frontier_phi_84_pred_1;
                    _3410 = frontier_phi_84_pred_2;
                    _3408 = frontier_phi_84_pred_3;
                    _3406 = frontier_phi_84_pred_4;
                    _3416 = frontier_phi_84_pred_5;
                    uint _3572 = _3571 + 1u;
                    if (_3572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3565 = _3406;
                        _3566 = _3408;
                        _3567 = _3410;
                        _3568 = _3412;
                        _3569 = _3414;
                        _3570 = _3416;
                        _3571 = _3572;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3416;
                frontier_phi_65_66_ladder_1 = _3412;
                frontier_phi_65_66_ladder_2 = _3414;
                frontier_phi_65_66_ladder_3 = _3408;
                frontier_phi_65_66_ladder_4 = _3406;
                frontier_phi_65_66_ladder_5 = _3410;
            }
            else
            {
                frontier_phi_65_66_ladder = _3295;
                frontier_phi_65_66_ladder_1 = _3291;
                frontier_phi_65_66_ladder_2 = _3293;
                frontier_phi_65_66_ladder_3 = _3287;
                frontier_phi_65_66_ladder_4 = _3285;
                frontier_phi_65_66_ladder_5 = _3289;
            }
            _3405 = frontier_phi_65_66_ladder_4;
            _3407 = frontier_phi_65_66_ladder_3;
            _3409 = frontier_phi_65_66_ladder_5;
            _3411 = frontier_phi_65_66_ladder_1;
            _3413 = frontier_phi_65_66_ladder_2;
            _3415 = frontier_phi_65_66_ladder;
        }
        float _3420 = isnan(1.0) ? _1158 : (isnan(_1158) ? 1.0 : min(_1158, 1.0));
        _3191 = (_3420 * _3411) + _2723;
        _3193 = (_3420 * _3413) + _2725;
        _3195 = (_3420 * _3415) + _2727;
        _3197 = ((_3405 * 0.039999999105930328369140625) * _3420) + _3046;
        _3199 = ((_3407 * 0.039999999105930328369140625) * _3420) + _3048;
        _3201 = ((_3409 * 0.039999999105930328369140625) * _3420) + _3050;
    }
    else
    {
        _3191 = _2723;
        _3193 = _2725;
        _3195 = _2727;
        _3197 = _3046;
        _3199 = _3048;
        _3201 = _3050;
    }
    uint _3207 = _1134 + uint(cbMatDynParam._m0[0u].w);
    float _5290 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _5301 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _5312 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _5323 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _3239 = (((isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0))) * (_3191 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1158))) + ((_3197 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1994)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[17u].w * _745) * _1016) * cbInstanceData._m0[_3207].x);
    float _3241 = ((((cbMtdParam._m0[17u].w * _746) * _1016) * cbInstanceData._m0[_3207].y) + ((_3199 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1994)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0))) * (_3193 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1158)));
    float _3243 = ((((cbMtdParam._m0[17u].w * _747) * _1016) * cbInstanceData._m0[_3207].z) + ((_3201 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1994)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0))) * (_3195 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1158)));
    float _3244 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
    float _3245 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
    float _3246 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
    float _3251 = cbInstanceData._m0[_952 + 6u].w * (isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0)));
    float _3256 = _1096 / cbSceneParam._m0[86u].x;
    float _3257 = _1097 / cbSceneParam._m0[86u].y;
    vec4 _3271 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3256, _3257, (log2((isnan(cbSceneParam._m0[77u].w) ? _1050 : (isnan(_1050) ? cbSceneParam._m0[77u].w : min(_1050, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3273 = _3271.x;
    float _3274 = _3271.y;
    float _3275 = _3271.z;
    float _3276 = _3271.w;
    float _3347;
    float _3349;
    float _3351;
    float _3353;
    if (_1050 > cbSceneParam._m0[78u].w)
    {
        float _3310 = isnan(_1050) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1050 : min(cbSceneParam._m0[80u].w, _1050));
        float _3311 = _3310 / _1050;
        float _3322 = _3311 * _1069;
        float _3323 = _1070 * _3311;
        float _3324 = (-0.0) - _3323;
        float _3325 = _3311 * _1071;
        float _3327 = (cbSceneParam._m0[77u].w * _3324) / _3310;
        float _3328 = _3327 + cbSceneParam._m0[79u].w;
        float _3329 = cbSceneParam._m0[79u].w - _3323;
        float _3335 = sqrt(((_3322 * _3322) + (_3323 * _3323)) + (_3325 * _3325));
        float _3338 = (1.0 - (cbSceneParam._m0[77u].w / _3310)) * _3335;
        float _3343 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3345 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3522;
        if (abs((_3324 - _3327) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3522 = ((((_3328 > 0.0) ? exp2(_3343 * _3328) : (2.0 - exp2(_3345 * _3328))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3338;
        }
        else
        {
            float _3466 = 1.0 / cbSceneParam._m0[80u].x;
            float _3467 = isnan(_3329) ? _3328 : (isnan(_3328) ? _3329 : max(_3328, _3329));
            float _3468 = isnan(_3329) ? _3328 : (isnan(_3328) ? _3329 : min(_3328, _3329));
            float _3477 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : min(_3467, 0.0));
            float _3478 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : min(_3468, 0.0));
            _3522 = ((abs(_3335 / _3324) * cbSceneParam._m0[80u].y) * ((((_3477 - _3478) * 2.0) - ((exp2(_3343 * (isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0)))) - exp2(_3343 * (isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0))))) * _3466)) - ((exp2(_3345 * _3477) - exp2(_3345 * _3478)) * _3466))) + (_3338 * cbSceneParam._m0[80u].z);
        }
        vec4 _3524 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3256, _3257, 1.0), 0.0);
        float _3533 = exp2((_3522 * (-1.44269502162933349609375)) * (1.0 - _3524.w));
        float _3534 = log2(_3533);
        float _3550 = log2(_3276);
        _3347 = (exp2(_3550 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3534 * cbSceneParam._m0[78u].x)) * _3524.x) / cbSceneParam._m0[78u].x)) + _3273;
        _3349 = (exp2(_3550 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3534 * cbSceneParam._m0[78u].y)) * _3524.y) / cbSceneParam._m0[78u].y)) + _3274;
        _3351 = (exp2(_3550 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3534 * cbSceneParam._m0[78u].z)) * _3524.z) / cbSceneParam._m0[78u].z)) + _3275;
        _3353 = _3533 * _3276;
    }
    else
    {
        _3347 = _3273;
        _3349 = _3274;
        _3351 = _3275;
        _3353 = _3276;
    }
    bool _3560;
    vec4 _3363;
    vec4 _3385;
    float _3387;
    float _3391;
    float _3392;
    float _3393;
    float _3394;
    bool _3404;
    for (;;)
    {
        _3363 = cbMatDynParam._m0[0u];
        float _3365 = roundEven(_3363.y);
        bool _3366 = _3365 == 3.0;
        float _3367 = log2(_3353);
        float _3374 = exp2(_3367 * cbSceneParam._m0[78u].x) * _3244;
        float _3375 = exp2(_3367 * cbSceneParam._m0[78u].y) * _3245;
        float _3376 = exp2(_3367 * cbSceneParam._m0[78u].z) * _3246;
        float _3383 = _1085 + (-0.5);
        _3385 = cbMtdParam._m0[1u];
        _3387 = _3385.y * _3383;
        float _3390 = (_3365 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3391 = _3390 * (_3366 ? _3374 : (_3374 + (cbSceneParam._m0[72u].w * _3347)));
        _3392 = _3390 * (_3366 ? _3375 : (_3375 + (cbSceneParam._m0[72u].w * _3349)));
        _3393 = _3390 * (_3366 ? _3376 : (_3376 + (cbSceneParam._m0[72u].w * _3351)));
        _3394 = _3383 * 0.999000012874603271484375;
        _3404 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3404)
        {
            if ((cbInstanceData._m0[_952 + 7u].x + _3394) < 0.5)
            {
                _3560 = true;
                break;
            }
        }
        uint _3501 = _1134 + uint(_3363.w);
        if ((cbInstanceData._m0[_3501].w < 1.0) && ((cbInstanceData._m0[_3501].w + _3394) < 0.5))
        {
            _3560 = true;
            break;
        }
        if ((_3387 + 1.0) < _3385.x)
        {
            _3560 = true;
            break;
        }
        _3560 = false;
        break;
    }
    float _3764;
    if (_3560)
    {
        discard_state = true;
        _3764 = 0.0;
    }
    else
    {
        _3764 = _3251;
    }
    SV_Target.x = _3391;
    SV_Target.y = _3392;
    SV_Target.z = _3393;
    SV_Target.w = _3764;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3251;
    discard_exit();
}


