#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1507;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    uvec4 _303 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _305 = _303.z != 0u;
    vec4 _326 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = _326.x;
    float _330 = _326.y;
    float _331 = _326.z;
    bool _352 = _303.x != 0u;
    vec4 _371 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _373 = _371.x;
    float _374 = _371.y;
    float _375 = _371.z;
    float _391 = _352 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[9u].w - _373)) + _373) : (_373 * cbMtdParam._m0[9u].w);
    float _392 = _352 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].x - _374)) + _374) : (_374 * cbMtdParam._m0[10u].x);
    float _393 = _352 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].y - _375)) + _375) : (_375 * cbMtdParam._m0[10u].y);
    bool _395 = _303.y != 0u;
    vec4 _410 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    vec4 _443 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _457 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * (1.0 - _445)) + 1.0;
    float _3838 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _465 = (cbMtdParam._m0[18u].z * ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) - _445)) + _445;
    float _472 = (_465 * ((_395 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[10u].w - _412)) + _412) : (_412 * cbMtdParam._m0[10u].w)) - _391)) + _391;
    float _473 = (_465 * ((_395 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].x - _413)) + _413) : (_413 * cbMtdParam._m0[11u].x)) - _392)) + _392;
    float _474 = (_465 * ((_395 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].y - _414)) + _414) : (_414 * cbMtdParam._m0[11u].y)) - _393)) + _393;
    float _481 = (((1.0 - _446) * (-1.39999997615814208984375)) * cbMtdParam._m0[20u].y) + 1.0;
    float _3849 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _489 = (cbMtdParam._m0[15u].w * ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) - _446)) + _446;
    float _496 = (_489 * ((_305 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[11u].w - _329)) + _329) : (_329 * cbMtdParam._m0[11u].w)) - _472)) + _472;
    float _497 = (_489 * ((_305 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].x - _330)) + _330) : (_330 * cbMtdParam._m0[12u].x)) - _473)) + _473;
    float _498 = (_489 * ((_305 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].y - _331)) + _331) : (_331 * cbMtdParam._m0[12u].y)) - _474)) + _474;
    vec4 _521 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_13, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].y * TEXCOORD.x) + cbMtdParam._m0[22u].y) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[23u].z * TEXCOORD.y) + cbMtdParam._m0[22u].z) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _527 = cbMtdParam._m0[17u].x * _521.x;
    vec4 _539 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _566 = (((_541 - _496) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[14u].w - _541))) * _527) + _496;
    float _567 = (((_542 - _497) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].x - _542))) * _527) + _497;
    float _568 = (((_543 - _498) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].y - _543))) * _527) + _498;
    float _589 = cbMtdParam._m0[20u].z * cbPerFrame._m0[22u].x;
    vec4 _608 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_16, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[7u].x * cbMtdParam._m0[25u].w) * ((_589 * cbMtdParam._m0[26u].y) + TEXCOORD.z)) + cbTextureTilingScale._m0[7u].z, ((cbTextureTilingScale._m0[7u].y * cbMtdParam._m0[26u].x) * ((_589 * cbMtdParam._m0[26u].z) + TEXCOORD.w)) + cbTextureTilingScale._m0[7u].w));
    float _610 = _608.x;
    vec4 _645 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_17, SS_ClampLinear), vec2((((cbMtdParam._m0[25u].y + TEXCOORD.z) * cbMtdParam._m0[26u].w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[25u].z + TEXCOORD.w) * cbMtdParam._m0[27u].x) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _682 = exp2(log2(cbMtdParam._m0[21u].x * texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_15, SS_DiffuseMap), vec2(((((((cbMtdParam._m0[24u].y * _589) + (_610 * cbMtdParam._m0[23u].w)) + cbMtdParam._m0[22u].w) + (cbMtdParam._m0[24u].w * TEXCOORD.z)) + ((_645.x + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((((cbMtdParam._m0[24u].z * _589) + (_610 * cbMtdParam._m0[24u].x)) + cbMtdParam._m0[23u].x) + (cbMtdParam._m0[25u].x * TEXCOORD.w)) + ((_645.y + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).w) * cbMtdParam._m0[21u].y);
    float _3860 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _697 = ((_683 * (cbMtdParam._m0[13u].w - _566)) * cbMtdParam._m0[19u].w) + _566;
    float _698 = ((_683 * (cbMtdParam._m0[14u].x - _567)) * cbMtdParam._m0[19u].w) + _567;
    float _699 = ((_683 * (cbMtdParam._m0[14u].y - _568)) * cbMtdParam._m0[19u].w) + _568;
    float _710 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _714 = dot(vec4(_710 * _297, _710 * _298, _710 * _299, 0.0), vec4(_239, _240, _241, 0.0));
    float _717 = _714 - cbMtdParam._m0[16u].w;
    float _3871 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _727 = (exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[16u].z : (isnan(cbMtdParam._m0[16u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[16u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[17u].y)) + cbMtdParam._m0[17u].y;
    float _737 = (((_727 * cbMtdParam._m0[12u].w) - _697) * _727) + _697;
    float _738 = (((_727 * cbMtdParam._m0[13u].x) - _698) * _727) + _698;
    float _739 = (((_727 * cbMtdParam._m0[13u].y) - _699) * _727) + _699;
    float _743 = _714 - cbMtdParam._m0[18u].y;
    float _3887 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _752 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))))) * cbMtdParam._m0[19u].y) * cbMtdParam._m0[18u].x);
    float _3898 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _753 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    vec4 _765 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _781 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _783 = _781.x;
    float _784 = _781.y;
    float _785 = _781.z;
    float _792 = ((_765.x - _783) * _465) + _783;
    float _793 = ((_765.y - _784) * _465) + _784;
    float _794 = ((_765.z - _785) * _465) + _785;
    vec4 _806 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _832 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _843 = (((_806.x - _792) * _489) + _792) + ((_832.x + (-0.5)) * cbMtdParam._m0[21u].w);
    float _844 = (((_806.y - _793) * _489) + _793) + ((_832.y + (-0.5)) * cbMtdParam._m0[21u].w);
    float _845 = (((_806.z - _794) * _489) + _794) + ((_832.z + (-0.5)) * cbMtdParam._m0[21u].w);
    vec4 _858 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _869 = ((_858.x - _843) * _527) + _843;
    float _870 = ((_858.y - _844) * _527) + _844;
    float _871 = ((_858.z - _845) * _527) + _845;
    float _881 = ((1.0 - _871) * _727) + _871;
    float _885 = ((((0.502016007900238037109375 - _869) * _727) + _869) * 2.0) + (-1.0);
    float _887 = ((((0.502016007900238037109375 - _870) * _727) + _870) * 2.0) + (-1.0);
    float _888 = dot(vec2(_885, _887), vec2(_885, _887));
    float _3909 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _893 = sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _929 = inversesqrt(dot(vec3(_917, _921, _925), vec3(_917, _921, _925)));
    float _939 = inversesqrt(dot(vec3(cbMtdParam._m0[27u].yzw), vec3(cbMtdParam._m0[27u].yzw)));
    uint _944 = uint(roundEven(NORMAL.w)) * 13u;
    uint _945 = _944 + 5u;
    uint _950 = floatBitsToUint(cbInstanceData._m0[_945]).x * 14u;
    float _962 = (((_939 * cbMtdParam._m0[27u].y) - cbLight._m0[_950].x) * cbMtdParam._m0[19u].z) + cbLight._m0[_950].x;
    float _963 = (((_939 * cbMtdParam._m0[27u].z) - cbLight._m0[_950].y) * cbMtdParam._m0[19u].z) + cbLight._m0[_950].y;
    float _964 = (((_939 * cbMtdParam._m0[27u].w) - cbLight._m0[_950].z) * cbMtdParam._m0[19u].z) + cbLight._m0[_950].z;
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
    float _991 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_929 * _917, _929 * _921, _929 * _925, 0.0), vec4(_969 * _975, _970 * _975, _971 * _975, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _3920 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _999 = exp2(log2(_993 * 6.5) * 7.0);
    float _3931 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1006 = exp2(log2(cbMtdParam._m0[19u].x * ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) + _993)) * cbMtdParam._m0[18u].w);
    float _3942 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1007 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1008 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1011 = fma(_893, _239, fma(_887, _231 * TANGENT.x, (_217 * _209) * _885));
    float _1014 = fma(_893, _240, fma(_887, _231 * TANGENT.y, (_217 * _210) * _885));
    float _1017 = fma(_893, _241, fma(_887, _231 * TANGENT.z, (_217 * _211) * _885));
    float _1021 = inversesqrt(dot(vec3(_1011, _1014, _1017), vec3(_1011, _1014, _1017)));
    float _1022 = _1021 * _1011;
    float _1023 = _1021 * _1014;
    float _1024 = _1021 * _1017;
    float _3964 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _1025 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _1026 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3997 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4008 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1042 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1061 = cbSceneParam._m0[71u].x - (_917 / _1052);
    float _1062 = cbSceneParam._m0[71u].y - (_921 / _1052);
    float _1063 = cbSceneParam._m0[71u].z - (_925 / _1052);
    float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
    float _1068 = _1061 * _1067;
    float _1069 = _1062 * _1067;
    float _1070 = _1063 * _1067;
    float _1076 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1077 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1095 = fma(_1024, cbSceneParam._m0[5u].z, fma(_1023, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1022));
    float _1098 = fma(_1024, cbSceneParam._m0[6u].z, fma(_1023, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1022));
    float _1101 = fma(_1024, cbSceneParam._m0[7u].z, fma(_1023, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1022));
    uint _1114 = _944 + 9u;
    uint _1115 = _1114 + uint(cbMatDynParam._m0[0u].w);
    float _1121 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_1115].x;
    float _1122 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1115].y;
    float _1123 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1115].z;
    float _4019 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    vec4 _1135 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1076, cbSceneParam._m0[86u].y * _1077));
    float _1138 = _1135.x * TEXCOORD_4;
    float _1139 = dot(vec3(_1022, _1023, _1024), vec3(_1068, _1069, _1070));
    float _1142 = _1139 * 2.0;
    float _1146 = (_1142 * _1022) - _1068;
    float _1147 = (_1142 * _1023) - _1069;
    float _1148 = (_1142 * _1024) - _1070;
    float _1152 = abs(dot(vec3(_1068, _1069, _1070), vec3(_1022, _1023, _1024)));
    float _4052 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _1154 = sqrt(_1026);
    float _1167 = exp2((_1154 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1154 * 3.0));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1506;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1207, cbModelParam._m0[26u].z, fma(_1203, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199));
        float _1237 = fma(_1207, cbModelParam._m0[27u].z, fma(_1203, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199));
        float _1241 = fma(_1207, cbModelParam._m0[28u].z, fma(_1203, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199));
        float _1264 = _1199 + _1022;
        float _1265 = _1203 + _1023;
        float _1266 = _1207 + _1024;
        float _1276 = fma(_1266, cbModelParam._m0[26u].z, fma(_1265, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1264)) - _1233;
        float _1277 = fma(_1266, cbModelParam._m0[27u].z, fma(_1265, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1264)) - _1237;
        float _1278 = fma(_1266, cbModelParam._m0[28u].z, fma(_1265, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1264)) - _1241;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1334 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1300.x + (-0.5));
        float _1336 = _1334 * (_1300.y + (-0.5));
        float _1337 = _1334 * (_1300.z + (-0.5));
        float _1344 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1307.x + (-0.5));
        float _1346 = _1344 * (_1307.y + (-0.5));
        float _1347 = _1344 * (_1307.z + (-0.5));
        float _1354 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1314.x + (-0.5));
        float _1356 = _1354 * (_1314.y + (-0.5));
        float _1357 = _1354 * (_1314.z + (-0.5));
        float _1364 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1321.x + (-0.5));
        float _1366 = _1364 * (_1321.y + (-0.5));
        float _1367 = _1364 * (_1321.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1388 = (dot(vec3(_1022, _1023, _1024), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1398 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4100 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1400 + 1.0))) + _1405) * _1368;
        float _1415 = _1336 * 0.5;
        float _1416 = _1346 * 0.5;
        float _1417 = _1356 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_1022, _1023, _1024), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4133 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1442 + 1.0))) + _1447) * _1369;
        float _1457 = _1337 * 0.5;
        float _1458 = _1347 * 0.5;
        float _1459 = _1357 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_1022, _1023, _1024), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4166 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1484 + 1.0))) + _1489) * _1370;
        _1506 = _1337;
        _1508 = _1336;
        _1509 = _1335;
        _1510 = _1347;
        _1511 = _1346;
        _1512 = _1345;
        _1513 = _1357;
        _1514 = _1356;
        _1515 = _1355;
        _1516 = _1370;
        _1517 = _1369;
        _1518 = _1368;
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1507;
        _1508 = _1507;
        _1509 = _1507;
        _1510 = _1507;
        _1511 = _1507;
        _1512 = _1507;
        _1513 = _1507;
        _1514 = _1507;
        _1515 = _1507;
        _1516 = _1507;
        _1517 = _1507;
        _1518 = _1507;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1547 = fma(_1207, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199));
        float _1551 = fma(_1207, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199));
        float _1555 = fma(_1207, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199));
        float _1578 = _1199 + _1022;
        float _1579 = _1203 + _1023;
        float _1580 = _1207 + _1024;
        float _1590 = fma(_1580, cbModelParam._m0[30u].z, fma(_1579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1578)) - _1547;
        float _1591 = fma(_1580, cbModelParam._m0[31u].z, fma(_1579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1578)) - _1551;
        float _1592 = fma(_1580, cbModelParam._m0[32u].z, fma(_1579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1578)) - _1555;
        float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
        float _1609 = ((_1596 * _1590) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1547 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1596 * _1591) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1551 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1596 * _1592) / cbModelParam._m0[35u].z) + ((((((_1555 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        float _1646 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1613.x + (-0.5));
        float _1648 = _1646 * (_1613.y + (-0.5));
        float _1649 = _1646 * (_1613.z + (-0.5));
        float _1656 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1620.x + (-0.5));
        float _1658 = _1656 * (_1620.y + (-0.5));
        float _1659 = _1656 * (_1620.z + (-0.5));
        float _1666 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1627.x + (-0.5));
        float _1668 = _1666 * (_1627.y + (-0.5));
        float _1669 = _1666 * (_1627.z + (-0.5));
        float _1676 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1634.x + (-0.5));
        float _1678 = _1676 * (_1634.y + (-0.5));
        float _1679 = _1676 * (_1634.z + (-0.5));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = _1647 * 0.5;
        float _1684 = _1657 * 0.5;
        float _1685 = _1667 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_1022, _1023, _1024), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4229 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1710 + 1.0))) + _1715) * _1680;
        float _1725 = _1648 * 0.5;
        float _1726 = _1658 * 0.5;
        float _1727 = _1668 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_1022, _1023, _1024), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4262 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1752 + 1.0))) + _1757) * _1681;
        float _1767 = _1649 * 0.5;
        float _1768 = _1659 * 0.5;
        float _1769 = _1669 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_1022, _1023, _1024), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4295 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1794 + 1.0))) + _1799) * _1682;
        _1816 = _1649;
        _1817 = _1648;
        _1818 = _1647;
        _1819 = _1659;
        _1820 = _1658;
        _1821 = _1657;
        _1822 = _1669;
        _1823 = _1668;
        _1824 = _1667;
        _1825 = _1682;
        _1826 = _1681;
        _1827 = _1680;
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
    }
    else
    {
        _1816 = _1507;
        _1817 = _1507;
        _1818 = _1507;
        _1819 = _1507;
        _1820 = _1507;
        _1821 = _1507;
        _1822 = _1507;
        _1823 = _1507;
        _1824 = _1507;
        _1825 = _1507;
        _1826 = _1507;
        _1827 = _1507;
        _1828 = 0.0;
        _1829 = 0.0;
        _1830 = 0.0;
    }
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1519)) + _1519;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1520)) + _1520;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1521)) + _1521;
    float _1863 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1840));
    float _1884 = _1146 * 0.5;
    float _1885 = _1147 * 0.5;
    float _1886 = _1148 * 0.5;
    float _1887 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1890 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1893 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1927;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1900 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1506, _1510, _1513, _1516));
        float _1904 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1908 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1915 = dot(vec4(cbModelParam._m0[39u]), vec4(_1884, _1885, _1886, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1938;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1929 = dot(vec4(cbModelParam._m0[40u]), vec4(_1884, _1885, _1886, 1.0));
        _1938 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1938 = 1.0;
    }
    float _1942 = (_1938 * cbModelParam._m0[1u].x) + (_1927 * (1.0 - cbModelParam._m0[1u].x));
    float _1952 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1026);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1952 : min(cbModelParam._m0[25u].z, _1952));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2000 = fma(_1207, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199)) + cbModelParam._m0[13u].w;
        float _2004 = fma(_1207, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199)) + cbModelParam._m0[14u].w;
        float _2008 = fma(_1207, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199)) + cbModelParam._m0[15u].w;
        float _2011 = fma(_1148, cbModelParam._m0[13u].z, fma(_1147, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146));
        float _2014 = fma(_1148, cbModelParam._m0[14u].z, fma(_1147, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146));
        float _2017 = fma(_1148, cbModelParam._m0[15u].z, fma(_1147, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146));
        float _2045;
        if (_2011 > 0.0)
        {
            _2045 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2045 = frontier_phi_16_14_ladder;
        }
        float _2244;
        if (_2014 > 0.0)
        {
            _2244 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2244 = frontier_phi_25_21_ladder;
        }
        float _2487;
        if (_2017 > 0.0)
        {
            _2487 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2487 = frontier_phi_37_32_ladder;
        }
        float _2489 = isnan(_2244) ? _2045 : (isnan(_2045) ? _2244 : min(_2045, _2244));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _2011) + _2000;
        float _2495 = (_2490 * _2014) + _2004;
        float _2496 = (_2490 * _2017) + _2008;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1953);
            frontier_phi_15_37_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _2033 = frontier_phi_15_37_ladder_2;
        _2035 = frontier_phi_15_37_ladder_1;
        _2037 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1146, _1147, _1148), _1953);
        _2033 = _2021.x * cbModelParam._m0[1u].y;
        _2035 = _2021.y * cbModelParam._m0[1u].y;
        _2037 = _2021.z * cbModelParam._m0[1u].y;
    }
    float _2041 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1026);
    float _2042 = isnan(_2041) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2041 : min(cbModelParam._m0[25u].w, _2041));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2095 = fma(_1207, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199)) + cbModelParam._m0[21u].w;
        float _2099 = fma(_1207, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199)) + cbModelParam._m0[22u].w;
        float _2103 = fma(_1207, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199)) + cbModelParam._m0[23u].w;
        float _2106 = fma(_1148, cbModelParam._m0[21u].z, fma(_1147, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146));
        float _2109 = fma(_1148, cbModelParam._m0[22u].z, fma(_1147, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146));
        float _2112 = fma(_1148, cbModelParam._m0[23u].z, fma(_1147, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146));
        float _2249;
        if (_2106 > 0.0)
        {
            _2249 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2249 = frontier_phi_27_23_ladder;
        }
        float _2514;
        if (_2109 > 0.0)
        {
            _2514 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2514 = frontier_phi_39_34_ladder;
        }
        float _2719;
        if (_2112 > 0.0)
        {
            _2719 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2719 = frontier_phi_48_45_ladder;
        }
        float _2721 = isnan(_2514) ? _2249 : (isnan(_2249) ? _2514 : min(_2249, _2514));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2106) + _2095;
        float _2727 = (_2722 * _2109) + _2099;
        float _2728 = (_2722 * _2112) + _2103;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _2042);
            frontier_phi_24_48_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2131 = frontier_phi_24_48_ladder_2;
        _2133 = frontier_phi_24_48_ladder_1;
        _2135 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1146, _1147, _1148), _2042);
        _2131 = _2115.x * cbModelParam._m0[1u].z;
        _2133 = _2115.y * cbModelParam._m0[1u].z;
        _2135 = _2115.z * cbModelParam._m0[1u].z;
    }
    float _2147 = ((((1.0 - _1167) * ((_1154 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1167 * _1154)) * _1138;
    float _2148 = _2147 * ((cbModelParam._m0[1u].w * (_2131 - _2033)) + _2033);
    float _2149 = _2147 * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2150 = _2147 * ((cbModelParam._m0[1u].w * (_2135 - _2037)) + _2037);
    float _2153 = fma(_2150, cbSceneParam._m0[89u].z, fma(_2149, cbSceneParam._m0[89u].y, _2148 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2150, cbSceneParam._m0[90u].z, fma(_2149, cbSceneParam._m0[90u].y, _2148 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2150, cbSceneParam._m0[91u].z, fma(_2149, cbSceneParam._m0[91u].y, _2148 * cbSceneParam._m0[91u].x));
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_945]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _1138 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2203 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2207 = _2170 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_1022, _1023, _1024));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_1022, _1023, _1024));
    float _4431 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4442 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2187].x * _2193) * _2228) + ((cbLight._m0[_2197].x * _2203) * _2226);
    float _2236 = ((_2193 * cbLight._m0[_2187].y) * _2228) + ((_2203 * cbLight._m0[_2197].y) * _2226);
    float _2237 = ((_2193 * cbLight._m0[_2187].z) * _2228) + ((_2203 * cbLight._m0[_2197].z) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2243)
    {
        _2254 = _2235;
        _2256 = _2236;
        _2258 = _2237;
    }
    else
    {
        uint _2262 = _2170 + 6u;
        float _2278 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_1022, _1023, _1024)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4453 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2281 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2254 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2235;
        _2256 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2236;
        _2258 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2237;
    }
    bool _2261 = _2241.y == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2261)
    {
        _2299 = _2254;
        _2301 = _2256;
        _2303 = _2258;
    }
    else
    {
        uint _2458 = _2170 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_1022, _1023, _1024)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4469 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2477 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2299 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2254;
        _2301 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2256;
        _2303 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2258;
    }
    uint _2306 = _2170 + 8u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _1026) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2170].x + _1068;
    float _2322 = cbLight._m0[_2170].y + _1069;
    float _2323 = cbLight._m0[_2170].z + _1070;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2170].xyz));
    float _4485 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _4496 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _2335 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2336 = dot(vec3(_1022, _1023, _1024), vec3(_2328, _2329, _2330));
    float _4507 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2328, _2329, _2330));
    float _4518 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2320 * _2320;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2360 = 1.0 - _2320;
    float _2371 = (0.5 / (((_2335 * ((_2334 * _2360) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2360) + _2320) * _2334))) * _2334;
    float _4529 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    uint _2384 = _2170 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _1026) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2207].x + _1068;
    float _2398 = cbLight._m0[_2207].y + _1069;
    float _2399 = cbLight._m0[_2207].z + _1070;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2207].xyz));
    float _4540 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2411 = dot(vec3(_1022, _1023, _1024), vec3(_2404, _2405, _2406));
    float _4551 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2404, _2405, _2406));
    float _4562 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2432 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2433 = 1.0 - _2396;
    float _2443 = (0.5 / (((_2335 * ((_2410 * _2433) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2433) + _2396) * _2410))) * _2410;
    float _4573 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2455 = (((_2432 * cbLight._m0[_2384].x) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].x) * _2373) * _2203);
    float _2456 = (((_2432 * cbLight._m0[_2384].y) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].y) * _2373) * _2203);
    float _2457 = (((_2432 * cbLight._m0[_2384].z) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].z) * _2373) * _2203);
    float _2519;
    float _2521;
    float _2523;
    if (_2243)
    {
        _2519 = _2455;
        _2521 = _2456;
        _2523 = _2457;
    }
    else
    {
        uint _2525 = _2170 + 2u;
        uint _2529 = _2170 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _1026) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _1068;
        float _2546 = cbLight._m0[_2525].y + _1069;
        float _2547 = cbLight._m0[_2525].z + _1070;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2525].xyz));
        float _4584 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2559 = dot(vec3(_1022, _1023, _1024), vec3(_2552, _2553, _2554));
        float _4595 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4606 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2581 = 1.0 - _2544;
        float _2591 = (0.5 / (((_2335 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2581) + _2544) * _2558))) * _2558;
        float _4617 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2519 = (((_2580 * cbLight._m0[_2529].x) * _2593) * _2594) + _2455;
        _2521 = (((_2580 * cbLight._m0[_2529].y) * _2593) * _2594) + _2456;
        _2523 = (((_2580 * cbLight._m0[_2529].z) * _2593) * _2594) + _2457;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2261)
    {
        _2629 = _2519;
        _2631 = _2521;
        _2633 = _2523;
    }
    else
    {
        uint _2640 = _2170 + 3u;
        uint _2644 = _2170 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _1026) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _1068;
        float _2661 = cbLight._m0[_2640].y + _1069;
        float _2662 = cbLight._m0[_2640].z + _1070;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2640].xyz));
        float _4633 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2674 = dot(vec3(_1022, _1023, _1024), vec3(_2667, _2668, _2669));
        float _4644 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4655 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2695 = (exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2696 = 1.0 - _2659;
        float _2706 = (0.5 / (((_2335 * ((_2673 * _2696) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2696) + _2659) * _2673))) * _2673;
        float _4666 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2629 = (((_2695 * cbLight._m0[_2644].x) * _2708) * _2709) + _2519;
        _2631 = (((_2695 * cbLight._m0[_2644].y) * _2708) * _2709) + _2521;
        _2633 = (((_2695 * cbLight._m0[_2644].z) * _2708) * _2709) + _2523;
    }
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_2168.y == 0u)
    {
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2784;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2784;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2784;
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1077) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _1076) / _2800)));
        float _2821 = (log2(_2787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            uint _3108 = 0u;
            uint _3117;
            bool _3118;
            for (;;)
            {
                _3117 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                _3118 = _3117 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3118)
                {
                    frontier_phi_63_pred = _3107;
                    frontier_phi_63_pred_1 = _3106;
                    frontier_phi_63_pred_2 = _3105;
                    frontier_phi_63_pred_3 = _3104;
                    frontier_phi_63_pred_4 = _3103;
                    frontier_phi_63_pred_5 = _3102;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3117;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3108 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _2785;
                        float _3293 = _3252.y - _2786;
                        float _3294 = _3252.z - _2787;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_1095, _1098, _1101), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4692 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _2785;
                        float _3328 = (-0.0) - _2786;
                        float _3329 = (-0.0) - _2787;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3344 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _1154;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_1095, _1098, _1101), vec3(_3334, _3335, _3336));
                        float _4708 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3369 = dot(vec3(_1095, _1098, _1101), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4719 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3312 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3302) + _3378;
                        float _4730 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4741 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3376 * _3376) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3161 = (_3323 * _3271.x) + _3229;
                        _3162 = (_3323 * _3271.y) + _3230;
                        _3163 = (_3323 * _3271.z) + _3231;
                        _3158 = (_3404 * _3288.x) + _3226;
                        _3159 = (_3404 * _3288.y) + _3227;
                        _3160 = (_3404 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_63_pred = _3163;
                    frontier_phi_63_pred_1 = _3162;
                    frontier_phi_63_pred_2 = _3161;
                    frontier_phi_63_pred_3 = _3160;
                    frontier_phi_63_pred_4 = _3159;
                    frontier_phi_63_pred_5 = _3158;
                }
                _2969 = frontier_phi_63_pred;
                _2967 = frontier_phi_63_pred_1;
                _2965 = frontier_phi_63_pred_2;
                _2963 = frontier_phi_63_pred_3;
                _2961 = frontier_phi_63_pred_4;
                _2959 = frontier_phi_63_pred_5;
                uint _3109 = _3108 + 1u;
                if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3102 = _2959;
                    _3103 = _2961;
                    _3104 = _2963;
                    _3105 = _2965;
                    _3106 = _2967;
                    _3107 = _2969;
                    _3108 = _3109;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((4294967295u << _2975) & _2831) == 0u)
        {
            _3070 = _2958;
            _3072 = _2960;
            _3074 = _2962;
            _3076 = _2964;
            _3078 = _2966;
            _3080 = _2968;
        }
        else
        {
            float _3095 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
            float _3096 = _3095 * _2785;
            float _3097 = _3095 * _2786;
            float _3098 = _3095 * _2787;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3209 = _2958;
                float _3210 = _2960;
                float _3211 = _2962;
                float _3212 = _2964;
                float _3213 = _2966;
                float _3214 = _2968;
                uint _3215 = _2975;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3225)
                    {
                        frontier_phi_69_pred = _3214;
                        frontier_phi_69_pred_1 = _3213;
                        frontier_phi_69_pred_2 = _3212;
                        frontier_phi_69_pred_3 = _3211;
                        frontier_phi_69_pred_4 = _3210;
                        frontier_phi_69_pred_5 = _3209;
                    }
                    else
                    {
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        float _3426 = _3213;
                        float _3427 = _3214;
                        uint _3428 = _3224;
                        uint _3429;
                        vec4 _3454;
                        float _3455;
                        vec4 _3470;
                        vec3 _3482;
                        vec4 _3497;
                        vec4 _3512;
                        float _3558;
                        bool _3559;
                        for (;;)
                        {
                            uint _3439 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3428));
                            _3429 = (_3428 + 4294967295u) & _3428;
                            uint _3441 = _3439 * 40u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3455 = _3454.w;
                            uint _3457 = (_3439 * 40u) + 4u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3439 * 40u) + 8u;
                            _3482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x));
                            uint _3484 = (_3439 * 40u) + 16u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3439 * 40u) + 20u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3439 * 40u) + 24u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3533 = (_3439 * 40u) + 28u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3558 = fma(_2787, _3546.z, fma(_2786, _3546.y, _3546.x * _2785)) + _3546.w;
                            _3559 = !((fma(_2787, _3527.z, fma(_2786, _3527.y, _3527.x * _2785)) + _3527.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3559)
                            {
                                float _3586 = _3454.x - _2785;
                                float _3587 = _3454.y - _2786;
                                float _3588 = _3454.z - _2787;
                                float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                                float _3592 = inversesqrt(_3589);
                                float _3593 = _3592 * _3586;
                                float _3594 = _3592 * _3587;
                                float _3595 = _3592 * _3588;
                                float _3599 = 1.0 - (_3589 / (_3455 * _3455));
                                float _4752 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3604 = sqrt(_3589) * _3470.w;
                                float _3606 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                                float _3607 = _3606 * _3606;
                                float _3610 = ((1.0 - _3607) * dot(vec3(_3593, _3594, _3595), vec3(_1095, _1098, _1101))) + _3607;
                                float _3613 = _3604 * _3604;
                                float _3617 = (fma(_2787, _3497.z, fma(_2786, _3497.y, _3497.x * _2785)) + _3497.w) / _3558;
                                float _3618 = (fma(_2787, _3512.z, fma(_2786, _3512.y, _3512.x * _2785)) + _3512.w) / _3558;
                                float _3622 = 1.0 - dot(vec2(_3617, _3618), vec2(_3617, _3618));
                                float _4768 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3624 = _3623 * (((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3600) / ((_3613 * 0.699999988079071044921875) + 1.0));
                                float _3636 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                                float _3637 = 1.0 - _1154;
                                float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                                float _3645 = _3644 * _3644;
                                float _3646 = _3645 * _3645;
                                float _3647 = _3593 - _3096;
                                float _3648 = _3594 - _3097;
                                float _3649 = _3595 - _3098;
                                float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                                float _3657 = dot(vec3(_1095, _1098, _1101), vec3((-0.0) - _3096, (-0.0) - _3097, (-0.0) - _3098));
                                float _4779 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3661 = dot(vec3(_1095, _1098, _1101), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                                float _4790 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                                float _3669 = _3606 * _3645;
                                float _3670 = _3669 * _3669;
                                float _3676 = ((1.0 - _3670) * dot(vec3(_1095, _1098, _1101), vec3(_3593, _3594, _3595))) + _3670;
                                float _4801 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3678 = 1.0 - _3645;
                                float _3688 = (0.5 / (((_3677 * ((_3660 * _3678) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3645) * _3660))) * _3677;
                                float _4812 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3698 = (_3623 * _3600) * (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3668 * _3668) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3624 * _3470.z;
                                frontier_phi_75_pred_1 = _3624 * _3470.y;
                                frontier_phi_75_pred_2 = _3624 * _3470.x;
                                frontier_phi_75_pred_3 = _3698 * _3482.z;
                                frontier_phi_75_pred_4 = _3698 * _3482.y;
                                frontier_phi_75_pred_5 = _3698 * _3482.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3707 = frontier_phi_75_pred;
                            _3706 = frontier_phi_75_pred_1;
                            _3705 = frontier_phi_75_pred_2;
                            _3704 = frontier_phi_75_pred_3;
                            _3703 = frontier_phi_75_pred_4;
                            _3702 = frontier_phi_75_pred_5;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            if (_3429 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3429;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3414;
                        frontier_phi_69_pred_1 = _3413;
                        frontier_phi_69_pred_2 = _3412;
                        frontier_phi_69_pred_3 = _3411;
                        frontier_phi_69_pred_4 = _3410;
                        frontier_phi_69_pred_5 = _3409;
                    }
                    _3081 = frontier_phi_69_pred;
                    _3079 = frontier_phi_69_pred_1;
                    _3077 = frontier_phi_69_pred_2;
                    _3075 = frontier_phi_69_pred_3;
                    _3073 = frontier_phi_69_pred_4;
                    _3071 = frontier_phi_69_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3071;
                        _3210 = _3073;
                        _3211 = _3075;
                        _3212 = _3077;
                        _3213 = _3079;
                        _3214 = _3081;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3081;
                frontier_phi_57_58_ladder_1 = _3079;
                frontier_phi_57_58_ladder_2 = _3077;
                frontier_phi_57_58_ladder_3 = _3075;
                frontier_phi_57_58_ladder_4 = _3073;
                frontier_phi_57_58_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_57_58_ladder = _2968;
                frontier_phi_57_58_ladder_1 = _2966;
                frontier_phi_57_58_ladder_2 = _2964;
                frontier_phi_57_58_ladder_3 = _2962;
                frontier_phi_57_58_ladder_4 = _2960;
                frontier_phi_57_58_ladder_5 = _2958;
            }
            _3070 = frontier_phi_57_58_ladder_5;
            _3072 = frontier_phi_57_58_ladder_4;
            _3074 = frontier_phi_57_58_ladder_3;
            _3076 = frontier_phi_57_58_ladder_2;
            _3078 = frontier_phi_57_58_ladder_1;
            _3080 = frontier_phi_57_58_ladder;
        }
        float _3085 = isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0));
        _2843 = (_3085 * _3076) + _2299;
        _2845 = (_3085 * _3078) + _2301;
        _2847 = (_3085 * _3080) + _2303;
        _2849 = ((_3070 * 0.039999999105930328369140625) * _3085) + _2629;
        _2851 = ((_3072 * 0.039999999105930328369140625) * _3085) + _2631;
        _2853 = ((_3074 * 0.039999999105930328369140625) * _3085) + _2633;
    }
    else
    {
        _2843 = _2299;
        _2845 = _2301;
        _2847 = _2303;
        _2849 = _2629;
        _2851 = _2631;
        _2853 = _2633;
    }
    uint _2859 = _1114 + uint(cbMatDynParam._m0[0u].w);
    float _4828 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4839 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _4850 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _4861 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2891 = (((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2843 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1138))) + ((_2849 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1942)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[17u].w * _737) * _1008) * cbInstanceData._m0[_2859].x);
    float _2893 = ((((cbMtdParam._m0[17u].w * _738) * _1008) * cbInstanceData._m0[_2859].y) + ((_2851 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1942)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2845 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1138)));
    float _2895 = ((((cbMtdParam._m0[17u].w * _739) * _1008) * cbInstanceData._m0[_2859].z) + ((_2853 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1942)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2847 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1138)));
    float _2903 = cbInstanceData._m0[_944 + 6u].w * (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)));
    float _2908 = _1076 / cbSceneParam._m0[86u].x;
    float _2909 = _1077 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _1042 : (isnan(_1042) ? cbSceneParam._m0[77u].w : min(_1042, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_1042 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_1042) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1042 : min(cbSceneParam._m0[80u].w, _1042));
        float _2984 = _2983 / _1042;
        float _2995 = _2984 * _1061;
        float _2996 = _1062 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2998 = _2984 * _1063;
        float _3000 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2996;
        float _3008 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2997 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3131 = 1.0 / cbSceneParam._m0[80u].x;
            float _3132 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3133 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            _3171 = ((abs(_3008 / _2997) * cbSceneParam._m0[80u].y) * ((((_3142 - _3143) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))))) * _3131)) - ((exp2(_3018 * _3142) - exp2(_3018 * _3143)) * _3131))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2928);
        _3020 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3022 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3024 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3026 = _3182 * _2928;
    }
    else
    {
        _3020 = _2925;
        _3022 = _2926;
        _3024 = _2927;
        _3026 = _2928;
    }
    float _3038 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3039 = _3038 == 3.0;
    float _3040 = log2(_3026);
    float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)));
    float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)));
    float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0)));
    float _3058 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3058 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.y = _3058 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.z = _3058 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
    SV_Target.w = _2903;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2903;
}


