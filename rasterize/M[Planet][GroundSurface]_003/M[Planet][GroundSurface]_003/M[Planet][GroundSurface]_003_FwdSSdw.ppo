#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1509;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    uvec4 _305 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _307 = _305.z != 0u;
    vec4 _328 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = _328.x;
    float _332 = _328.y;
    float _333 = _328.z;
    bool _354 = _305.x != 0u;
    vec4 _373 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _375 = _373.x;
    float _376 = _373.y;
    float _377 = _373.z;
    float _393 = _354 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[9u].w - _375)) + _375) : (_375 * cbMtdParam._m0[9u].w);
    float _394 = _354 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].x - _376)) + _376) : (_376 * cbMtdParam._m0[10u].x);
    float _395 = _354 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].y - _377)) + _377) : (_377 * cbMtdParam._m0[10u].y);
    bool _397 = _305.y != 0u;
    vec4 _412 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    vec4 _445 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _459 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * (1.0 - _447)) + 1.0;
    float _3864 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _467 = (cbMtdParam._m0[18u].z * ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) - _447)) + _447;
    float _474 = (_467 * ((_397 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[10u].w - _414)) + _414) : (_414 * cbMtdParam._m0[10u].w)) - _393)) + _393;
    float _475 = (_467 * ((_397 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].x - _415)) + _415) : (_415 * cbMtdParam._m0[11u].x)) - _394)) + _394;
    float _476 = (_467 * ((_397 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].y - _416)) + _416) : (_416 * cbMtdParam._m0[11u].y)) - _395)) + _395;
    float _483 = (((1.0 - _448) * (-1.39999997615814208984375)) * cbMtdParam._m0[20u].y) + 1.0;
    float _3875 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _491 = (cbMtdParam._m0[15u].w * ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) - _448)) + _448;
    float _498 = (_491 * ((_307 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[11u].w - _331)) + _331) : (_331 * cbMtdParam._m0[11u].w)) - _474)) + _474;
    float _499 = (_491 * ((_307 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].x - _332)) + _332) : (_332 * cbMtdParam._m0[12u].x)) - _475)) + _475;
    float _500 = (_491 * ((_307 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].y - _333)) + _333) : (_333 * cbMtdParam._m0[12u].y)) - _476)) + _476;
    vec4 _523 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_13, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].y * TEXCOORD.x) + cbMtdParam._m0[22u].y) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[23u].z * TEXCOORD.y) + cbMtdParam._m0[22u].z) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _529 = cbMtdParam._m0[17u].x * _523.x;
    vec4 _541 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _568 = (((_543 - _498) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[14u].w - _543))) * _529) + _498;
    float _569 = (((_544 - _499) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].x - _544))) * _529) + _499;
    float _570 = (((_545 - _500) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].y - _545))) * _529) + _500;
    float _591 = cbMtdParam._m0[20u].z * cbPerFrame._m0[22u].x;
    vec4 _610 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_16, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[7u].x * cbMtdParam._m0[25u].w) * ((_591 * cbMtdParam._m0[26u].y) + TEXCOORD.z)) + cbTextureTilingScale._m0[7u].z, ((cbTextureTilingScale._m0[7u].y * cbMtdParam._m0[26u].x) * ((_591 * cbMtdParam._m0[26u].z) + TEXCOORD.w)) + cbTextureTilingScale._m0[7u].w));
    float _612 = _610.x;
    vec4 _647 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_17, SS_ClampLinear), vec2((((cbMtdParam._m0[25u].y + TEXCOORD.z) * cbMtdParam._m0[26u].w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[25u].z + TEXCOORD.w) * cbMtdParam._m0[27u].x) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _684 = exp2(log2(cbMtdParam._m0[21u].x * texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_15, SS_DiffuseMap), vec2(((((((cbMtdParam._m0[24u].y * _591) + (_612 * cbMtdParam._m0[23u].w)) + cbMtdParam._m0[22u].w) + (cbMtdParam._m0[24u].w * TEXCOORD.z)) + ((_647.x + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((((cbMtdParam._m0[24u].z * _591) + (_612 * cbMtdParam._m0[24u].x)) + cbMtdParam._m0[23u].x) + (cbMtdParam._m0[25u].x * TEXCOORD.w)) + ((_647.y + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).w) * cbMtdParam._m0[21u].y);
    float _3886 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _699 = ((_685 * (cbMtdParam._m0[13u].w - _568)) * cbMtdParam._m0[19u].w) + _568;
    float _700 = ((_685 * (cbMtdParam._m0[14u].x - _569)) * cbMtdParam._m0[19u].w) + _569;
    float _701 = ((_685 * (cbMtdParam._m0[14u].y - _570)) * cbMtdParam._m0[19u].w) + _570;
    float _712 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _716 = dot(vec4(_712 * _299, _712 * _300, _712 * _301, 0.0), vec4(_241, _242, _243, 0.0));
    float _719 = _716 - cbMtdParam._m0[16u].w;
    float _3897 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _729 = (exp2(log2(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[16u].z : (isnan(cbMtdParam._m0[16u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[16u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[17u].y)) + cbMtdParam._m0[17u].y;
    float _739 = (((_729 * cbMtdParam._m0[12u].w) - _699) * _729) + _699;
    float _740 = (((_729 * cbMtdParam._m0[13u].x) - _700) * _729) + _700;
    float _741 = (((_729 * cbMtdParam._m0[13u].y) - _701) * _729) + _701;
    float _745 = _716 - cbMtdParam._m0[18u].y;
    float _3913 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _754 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))))) * cbMtdParam._m0[19u].y) * cbMtdParam._m0[18u].x);
    float _3924 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    vec4 _767 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _783 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _785 = _783.x;
    float _786 = _783.y;
    float _787 = _783.z;
    float _794 = ((_767.x - _785) * _467) + _785;
    float _795 = ((_767.y - _786) * _467) + _786;
    float _796 = ((_767.z - _787) * _467) + _787;
    vec4 _808 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _834 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _845 = (((_808.x - _794) * _491) + _794) + ((_834.x + (-0.5)) * cbMtdParam._m0[21u].w);
    float _846 = (((_808.y - _795) * _491) + _795) + ((_834.y + (-0.5)) * cbMtdParam._m0[21u].w);
    float _847 = (((_808.z - _796) * _491) + _796) + ((_834.z + (-0.5)) * cbMtdParam._m0[21u].w);
    vec4 _860 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _871 = ((_860.x - _845) * _529) + _845;
    float _872 = ((_860.y - _846) * _529) + _846;
    float _873 = ((_860.z - _847) * _529) + _847;
    float _883 = ((1.0 - _873) * _729) + _873;
    float _887 = ((((0.502016007900238037109375 - _871) * _729) + _871) * 2.0) + (-1.0);
    float _889 = ((((0.502016007900238037109375 - _872) * _729) + _872) * 2.0) + (-1.0);
    float _890 = dot(vec2(_887, _889), vec2(_887, _889));
    float _3935 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _895 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931 = inversesqrt(dot(vec3(_919, _923, _927), vec3(_919, _923, _927)));
    float _941 = inversesqrt(dot(vec3(cbMtdParam._m0[27u].yzw), vec3(cbMtdParam._m0[27u].yzw)));
    uint _946 = uint(roundEven(NORMAL.w)) * 13u;
    uint _947 = _946 + 5u;
    uint _952 = floatBitsToUint(cbInstanceData._m0[_947]).x * 14u;
    float _964 = (((_941 * cbMtdParam._m0[27u].y) - cbLight._m0[_952].x) * cbMtdParam._m0[19u].z) + cbLight._m0[_952].x;
    float _965 = (((_941 * cbMtdParam._m0[27u].z) - cbLight._m0[_952].y) * cbMtdParam._m0[19u].z) + cbLight._m0[_952].y;
    float _966 = (((_941 * cbMtdParam._m0[27u].w) - cbLight._m0[_952].z) * cbMtdParam._m0[19u].z) + cbLight._m0[_952].z;
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
    float _993 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_931 * _919, _931 * _923, _931 * _927, 0.0), vec4(_971 * _977, _972 * _977, _973 * _977, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _3946 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _1001 = exp2(log2(_995 * 6.5) * 7.0);
    float _3957 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1008 = exp2(log2(cbMtdParam._m0[19u].x * ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) + _995)) * cbMtdParam._m0[18u].w);
    float _3968 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1009 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1010 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1013 = fma(_895, _241, fma(_889, _233 * TANGENT.x, (_219 * _211) * _887));
    float _1016 = fma(_895, _242, fma(_889, _233 * TANGENT.y, (_219 * _212) * _887));
    float _1019 = fma(_895, _243, fma(_889, _233 * TANGENT.z, (_219 * _213) * _887));
    float _1023 = inversesqrt(dot(vec3(_1013, _1016, _1019), vec3(_1013, _1016, _1019)));
    float _1024 = _1023 * _1013;
    float _1025 = _1023 * _1016;
    float _1026 = _1023 * _1019;
    float _3990 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1027 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _1028 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4023 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4034 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _1044 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1063 = cbSceneParam._m0[71u].x - (_919 / _1054);
    float _1064 = cbSceneParam._m0[71u].y - (_923 / _1054);
    float _1065 = cbSceneParam._m0[71u].z - (_927 / _1054);
    float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
    float _1070 = _1063 * _1069;
    float _1071 = _1064 * _1069;
    float _1072 = _1065 * _1069;
    float _1078 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1079 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1097 = fma(_1026, cbSceneParam._m0[5u].z, fma(_1025, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1024));
    float _1100 = fma(_1026, cbSceneParam._m0[6u].z, fma(_1025, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1024));
    float _1103 = fma(_1026, cbSceneParam._m0[7u].z, fma(_1025, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1024));
    uint _1116 = _946 + 9u;
    uint _1117 = _1116 + uint(cbMatDynParam._m0[0u].w);
    float _1123 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1117].x;
    float _1124 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1117].y;
    float _1125 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1117].z;
    float _4045 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    vec4 _1137 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1078, cbSceneParam._m0[86u].y * _1079));
    float _1140 = _1137.x * TEXCOORD_4;
    float _1141 = dot(vec3(_1024, _1025, _1026), vec3(_1070, _1071, _1072));
    float _1144 = _1141 * 2.0;
    float _1148 = (_1144 * _1024) - _1070;
    float _1149 = (_1144 * _1025) - _1071;
    float _1150 = (_1144 * _1026) - _1072;
    float _1154 = abs(dot(vec3(_1070, _1071, _1072), vec3(_1024, _1025, _1026)));
    float _4078 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1156 = sqrt(_1028);
    float _1169 = exp2((_1156 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1156 * 3.0));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1209 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1235 = fma(_1209, cbModelParam._m0[26u].z, fma(_1205, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1201));
        float _1239 = fma(_1209, cbModelParam._m0[27u].z, fma(_1205, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1201));
        float _1243 = fma(_1209, cbModelParam._m0[28u].z, fma(_1205, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1201));
        float _1266 = _1201 + _1024;
        float _1267 = _1205 + _1025;
        float _1268 = _1209 + _1026;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1235;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1239;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1243;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1235 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1239 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1243 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_1024, _1025, _1026), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4126 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_1024, _1025, _1026), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4159 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_1024, _1025, _1026), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4192 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1549 = fma(_1209, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201));
        float _1553 = fma(_1209, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201));
        float _1557 = fma(_1209, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201));
        float _1580 = _1201 + _1024;
        float _1581 = _1205 + _1025;
        float _1582 = _1209 + _1026;
        float _1592 = fma(_1582, cbModelParam._m0[30u].z, fma(_1581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1580)) - _1549;
        float _1593 = fma(_1582, cbModelParam._m0[31u].z, fma(_1581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1580)) - _1553;
        float _1594 = fma(_1582, cbModelParam._m0[32u].z, fma(_1581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1580)) - _1557;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1611 = ((_1598 * _1592) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1549 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1593) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1553 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1598 * _1594) / cbModelParam._m0[35u].z) + ((((((_1557 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        float _1648 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1615.x + (-0.5));
        float _1650 = _1648 * (_1615.y + (-0.5));
        float _1651 = _1648 * (_1615.z + (-0.5));
        float _1658 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1622.x + (-0.5));
        float _1660 = _1658 * (_1622.y + (-0.5));
        float _1661 = _1658 * (_1622.z + (-0.5));
        float _1668 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1629.x + (-0.5));
        float _1670 = _1668 * (_1629.y + (-0.5));
        float _1671 = _1668 * (_1629.z + (-0.5));
        float _1678 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1636.x + (-0.5));
        float _1680 = _1678 * (_1636.y + (-0.5));
        float _1681 = _1678 * (_1636.z + (-0.5));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1649 * 0.5;
        float _1686 = _1659 * 0.5;
        float _1687 = _1669 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_1024, _1025, _1026), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4255 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1712 + 1.0))) + _1717) * _1682;
        float _1727 = _1650 * 0.5;
        float _1728 = _1660 * 0.5;
        float _1729 = _1670 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_1024, _1025, _1026), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4288 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1754 + 1.0))) + _1759) * _1683;
        float _1769 = _1651 * 0.5;
        float _1770 = _1661 * 0.5;
        float _1771 = _1671 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_1024, _1025, _1026), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4321 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1796 + 1.0))) + _1801) * _1684;
        _1818 = _1651;
        _1819 = _1650;
        _1820 = _1649;
        _1821 = _1661;
        _1822 = _1660;
        _1823 = _1659;
        _1824 = _1671;
        _1825 = _1670;
        _1826 = _1669;
        _1827 = _1684;
        _1828 = _1683;
        _1829 = _1682;
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
    }
    else
    {
        _1818 = _1509;
        _1819 = _1509;
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = _1509;
        _1828 = _1509;
        _1829 = _1509;
        _1830 = 0.0;
        _1831 = 0.0;
        _1832 = 0.0;
    }
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1521)) + _1521;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1522)) + _1522;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1523)) + _1523;
    float _1865 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1842));
    float _1886 = _1148 * 0.5;
    float _1887 = _1149 * 0.5;
    float _1888 = _1150 * 0.5;
    float _1889 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1892 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1895 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1929;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1902 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1906 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1910 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1917 = dot(vec4(cbModelParam._m0[39u]), vec4(_1886, _1887, _1888, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1940;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1931 = dot(vec4(cbModelParam._m0[40u]), vec4(_1886, _1887, _1888, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1944 = (_1940 * cbModelParam._m0[1u].x) + (_1929 * (1.0 - cbModelParam._m0[1u].x));
    float _1954 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1028);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1954 : min(cbModelParam._m0[25u].z, _1954));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2002 = fma(_1209, cbModelParam._m0[13u].z, fma(_1205, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1201)) + cbModelParam._m0[13u].w;
        float _2006 = fma(_1209, cbModelParam._m0[14u].z, fma(_1205, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1201)) + cbModelParam._m0[14u].w;
        float _2010 = fma(_1209, cbModelParam._m0[15u].z, fma(_1205, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1201)) + cbModelParam._m0[15u].w;
        float _2013 = fma(_1150, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1148));
        float _2016 = fma(_1150, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1148));
        float _2019 = fma(_1150, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1148));
        float _2047;
        if (_2013 > 0.0)
        {
            _2047 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2047 = frontier_phi_16_14_ladder;
        }
        float _2267;
        if (_2016 > 0.0)
        {
            _2267 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2267 = frontier_phi_25_21_ladder;
        }
        float _2513;
        if (_2019 > 0.0)
        {
            _2513 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2513 = frontier_phi_37_32_ladder;
        }
        float _2515 = isnan(_2267) ? _2047 : (isnan(_2047) ? _2267 : min(_2047, _2267));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _2013) + _2002;
        float _2521 = (_2516 * _2016) + _2006;
        float _2522 = (_2516 * _2019) + _2010;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2523;
        float _2527 = _2523 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 > _2527) || ((_2521 < _2525) || ((_2520 < _2525) || (_2520 > _2527))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2522, cbModelParam._m0[9u].z, fma(_2521, cbModelParam._m0[9u].y, _2520 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2522, cbModelParam._m0[10u].z, fma(_2521, cbModelParam._m0[10u].y, _2520 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2522, cbModelParam._m0[11u].z, fma(_2521, cbModelParam._m0[11u].y, _2520 * cbModelParam._m0[11u].x))), _1955);
            frontier_phi_15_37_ladder = _2646.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2646.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2646.x * cbModelParam._m0[1u].y;
        }
        _2035 = frontier_phi_15_37_ladder_2;
        _2037 = frontier_phi_15_37_ladder_1;
        _2039 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1148, _1149, _1150), _1955);
        _2035 = _2023.x * cbModelParam._m0[1u].y;
        _2037 = _2023.y * cbModelParam._m0[1u].y;
        _2039 = _2023.z * cbModelParam._m0[1u].y;
    }
    float _2043 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1028);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2043 : min(cbModelParam._m0[25u].w, _2043));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2097 = fma(_1209, cbModelParam._m0[21u].z, fma(_1205, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1201)) + cbModelParam._m0[21u].w;
        float _2101 = fma(_1209, cbModelParam._m0[22u].z, fma(_1205, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1201)) + cbModelParam._m0[22u].w;
        float _2105 = fma(_1209, cbModelParam._m0[23u].z, fma(_1205, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1201)) + cbModelParam._m0[23u].w;
        float _2108 = fma(_1150, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1148));
        float _2111 = fma(_1150, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1148));
        float _2114 = fma(_1150, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1148));
        float _2272;
        if (_2108 > 0.0)
        {
            _2272 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2272 = frontier_phi_27_23_ladder;
        }
        float _2540;
        if (_2111 > 0.0)
        {
            _2540 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2540 = frontier_phi_39_34_ladder;
        }
        float _2745;
        if (_2114 > 0.0)
        {
            _2745 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2745 = frontier_phi_48_45_ladder;
        }
        float _2747 = isnan(_2540) ? _2272 : (isnan(_2272) ? _2540 : min(_2272, _2540));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2108) + _2097;
        float _2753 = (_2748 * _2111) + _2101;
        float _2754 = (_2748 * _2114) + _2105;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _2044);
            frontier_phi_24_48_ladder = _2979.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2979.x * cbModelParam._m0[1u].z;
        }
        _2133 = frontier_phi_24_48_ladder_2;
        _2135 = frontier_phi_24_48_ladder_1;
        _2137 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1148, _1149, _1150), _2044);
        _2133 = _2117.x * cbModelParam._m0[1u].z;
        _2135 = _2117.y * cbModelParam._m0[1u].z;
        _2137 = _2117.z * cbModelParam._m0[1u].z;
    }
    float _2149 = ((((1.0 - _1169) * ((_1156 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1169 * _1156)) * _1140;
    float _2150 = _2149 * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2151 = _2149 * ((cbModelParam._m0[1u].w * (_2135 - _2037)) + _2037);
    float _2152 = _2149 * ((cbModelParam._m0[1u].w * (_2137 - _2039)) + _2039);
    float _2155 = fma(_2152, cbSceneParam._m0[89u].z, fma(_2151, cbSceneParam._m0[89u].y, _2150 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2152, cbSceneParam._m0[90u].z, fma(_2151, cbSceneParam._m0[90u].y, _2150 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2152, cbSceneParam._m0[91u].z, fma(_2151, cbSceneParam._m0[91u].y, _2150 * cbSceneParam._m0[91u].x));
    vec4 _2169 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1078, _1079));
    float _2171 = _2169.w;
    float _2183 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2171);
    float _2184 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2171);
    float _2185 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2171);
    uvec4 _2188 = floatBitsToUint(cbInstanceData._m0[_947]);
    uint _2190 = _2188.x * 14u;
    uint _2191 = _2190 + 13u;
    float _2198 = _1140 + (-1.0);
    float _2203 = (cbLight._m0[_2191].x * _2198) + 1.0;
    float _2204 = (cbLight._m0[_2191].y * _2198) + 1.0;
    float _2205 = (cbLight._m0[_2191].z * _2198) + 1.0;
    float _2206 = (cbLight._m0[_2191].w * _2198) + 1.0;
    uint _2207 = _2190 + 5u;
    float _2213 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2217 = _2190 + 4u;
    float _2226 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2230 = _2190 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_1024, _1025, _1026));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_1024, _1025, _1026));
    float _4457 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4468 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2207].x * _2213) * _2251) + (((cbLight._m0[_2217].x * _2183) * _2226) * _2249);
    float _2259 = ((_2213 * cbLight._m0[_2207].y) * _2251) + (((cbLight._m0[_2217].y * _2184) * _2226) * _2249);
    float _2260 = ((_2213 * cbLight._m0[_2207].z) * _2251) + (((cbLight._m0[_2217].z * _2185) * _2226) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2190 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2266)
    {
        _2277 = _2258;
        _2279 = _2259;
        _2281 = _2260;
    }
    else
    {
        uint _2285 = _2190 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2190 + 2u].xyz), vec3(_1024, _1025, _1026)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4479 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2304 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2258;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2259;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2260;
    }
    bool _2284 = _2264.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2284)
    {
        _2322 = _2277;
        _2324 = _2279;
        _2326 = _2281;
    }
    else
    {
        uint _2484 = _2190 + 7u;
        float _2500 = (dot(vec3(cbLight._m0[_2190 + 3u].xyz), vec3(_1024, _1025, _1026)) * 0.5) + 0.5;
        float _2501 = _2500 * _2500;
        float _4495 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2502 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2503 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2322 = (((cbLight._m0[_2484].x * 0.3183098733425140380859375) * _2502) * _2503) + _2277;
        _2324 = (((cbLight._m0[_2484].y * 0.3183098733425140380859375) * _2502) * _2503) + _2279;
        _2326 = (((cbLight._m0[_2484].z * 0.3183098733425140380859375) * _2502) * _2503) + _2281;
    }
    uint _2329 = _2190 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _1028) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2190].x + _1070;
    float _2345 = cbLight._m0[_2190].y + _1071;
    float _2346 = cbLight._m0[_2190].z + _1072;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2190].xyz));
    float _4511 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _4522 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _2358 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2359 = dot(vec3(_1024, _1025, _1026), vec3(_2351, _2352, _2353));
    float _4533 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2351, _2352, _2353));
    float _4544 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2383 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2358 * ((_2357 * _2383) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2383) + _2343) * _2357))) * _2357;
    float _4555 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2410 = _2190 + 9u;
    float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _1028) * 0.949999988079071044921875);
    float _2422 = _2421 * _2421;
    float _2423 = cbLight._m0[_2230].x + _1070;
    float _2424 = cbLight._m0[_2230].y + _1071;
    float _2425 = cbLight._m0[_2230].z + _1072;
    float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
    float _2430 = _2429 * _2423;
    float _2431 = _2429 * _2424;
    float _2432 = _2429 * _2425;
    float _2433 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2230].xyz));
    float _4566 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2437 = dot(vec3(_1024, _1025, _1026), vec3(_2430, _2431, _2432));
    float _4577 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2430, _2431, _2432));
    float _4588 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2422 * _2422;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2459 = 1.0 - _2422;
    float _2469 = (0.5 / (((_2358 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2459) + _2422) * _2436))) * _2436;
    float _4599 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    float _2481 = (((_2458 * cbLight._m0[_2410].x) * _2471) * _2213) + ((((cbLight._m0[_2329].x * _2183) * _2382) * _2396) * _2226);
    float _2482 = (((_2458 * cbLight._m0[_2410].y) * _2471) * _2213) + ((((cbLight._m0[_2329].y * _2184) * _2382) * _2396) * _2226);
    float _2483 = (((_2458 * cbLight._m0[_2410].z) * _2471) * _2213) + ((((cbLight._m0[_2329].z * _2185) * _2382) * _2396) * _2226);
    float _2545;
    float _2547;
    float _2549;
    if (_2266)
    {
        _2545 = _2481;
        _2547 = _2482;
        _2549 = _2483;
    }
    else
    {
        uint _2551 = _2190 + 2u;
        uint _2555 = _2190 + 10u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _1028) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _1070;
        float _2572 = cbLight._m0[_2551].y + _1071;
        float _2573 = cbLight._m0[_2551].z + _1072;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2551].xyz));
        float _4610 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2585 = dot(vec3(_1024, _1025, _1026), vec3(_2578, _2579, _2580));
        float _4621 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4632 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2358 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2607) + _2570) * _2584))) * _2584;
        float _4643 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2545 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2481;
        _2547 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2482;
        _2549 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2483;
    }
    float _2655;
    float _2657;
    float _2659;
    if (_2284)
    {
        _2655 = _2545;
        _2657 = _2547;
        _2659 = _2549;
    }
    else
    {
        uint _2666 = _2190 + 3u;
        uint _2670 = _2190 + 11u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _1028) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _1070;
        float _2687 = cbLight._m0[_2666].y + _1071;
        float _2688 = cbLight._m0[_2666].z + _1072;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2666].xyz));
        float _4659 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2700 = dot(vec3(_1024, _1025, _1026), vec3(_2693, _2694, _2695));
        float _4670 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4681 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2721 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2722 = 1.0 - _2685;
        float _2732 = (0.5 / (((_2358 * ((_2699 * _2722) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2722) + _2685) * _2699))) * _2699;
        float _4692 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2655 = (((_2721 * cbLight._m0[_2670].x) * _2734) * _2735) + _2545;
        _2657 = (((_2721 * cbLight._m0[_2670].y) * _2734) * _2735) + _2547;
        _2659 = (((_2721 * cbLight._m0[_2670].z) * _2734) * _2735) + _2549;
    }
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_2188.y == 0u)
    {
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2810;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2810;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2810;
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1079) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _1078) / _2826)));
        float _2847 = (log2(_2813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
        }
        else
        {
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            uint _3134 = 0u;
            uint _3143;
            bool _3144;
            for (;;)
            {
                _3143 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                _3144 = _3143 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3144)
                {
                    frontier_phi_63_pred = _3133;
                    frontier_phi_63_pred_1 = _3132;
                    frontier_phi_63_pred_2 = _3131;
                    frontier_phi_63_pred_3 = _3130;
                    frontier_phi_63_pred_4 = _3129;
                    frontier_phi_63_pred_5 = _3128;
                }
                else
                {
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    uint _3258;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3133;
                    _3258 = _3143;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    for (;;)
                    {
                        uint _3262 = uint(findLSB(_3258)) + (_3134 << 5u);
                        uint _3259 = (_3258 + 4294967295u) & _3258;
                        uint _3264 = _3262 * 48u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3284 = (_3262 * 48u) + 4u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3303 = (_3262 * 48u) + 8u;
                        vec3 _3314 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x));
                        float _3318 = _3278.x - _2811;
                        float _3319 = _3278.y - _2812;
                        float _3320 = _3278.z - _2813;
                        float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                        float _3324 = inversesqrt(_3321);
                        float _3325 = _3324 * _3318;
                        float _3326 = _3324 * _3319;
                        float _3327 = _3324 * _3320;
                        float _3328 = dot(vec3(_1097, _1100, _1103), vec3(_3325, _3326, _3327));
                        float _3333 = 1.0 - (_3321 * _3278.w);
                        float _4718 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3335 = sqrt(_3321) * _3297.w;
                        float _3338 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3328) + _3339;
                        float _3345 = _3335 * _3335;
                        float _3349 = ((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3334) / ((_3345 * 0.699999988079071044921875) + 1.0);
                        float _3353 = (-0.0) - _2811;
                        float _3354 = (-0.0) - _2812;
                        float _3355 = (-0.0) - _2813;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3370 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _1156;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3360 + _3325;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_1097, _1100, _1103), vec3(_3360, _3361, _3362));
                        float _4734 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3395 = dot(vec3(_1097, _1100, _1103), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4745 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3338 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3328) + _3404;
                        float _4756 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4767 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3402 * _3402) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125))) * _3334;
                        _3187 = (_3349 * _3297.x) + _3255;
                        _3188 = (_3349 * _3297.y) + _3256;
                        _3189 = (_3349 * _3297.z) + _3257;
                        _3184 = (_3430 * _3314.x) + _3252;
                        _3185 = (_3430 * _3314.y) + _3253;
                        _3186 = (_3430 * _3314.z) + _3254;
                        if (_3259 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3189;
                            _3258 = _3259;
                        }
                    }
                    frontier_phi_63_pred = _3189;
                    frontier_phi_63_pred_1 = _3188;
                    frontier_phi_63_pred_2 = _3187;
                    frontier_phi_63_pred_3 = _3186;
                    frontier_phi_63_pred_4 = _3185;
                    frontier_phi_63_pred_5 = _3184;
                }
                _2995 = frontier_phi_63_pred;
                _2993 = frontier_phi_63_pred_1;
                _2991 = frontier_phi_63_pred_2;
                _2989 = frontier_phi_63_pred_3;
                _2987 = frontier_phi_63_pred_4;
                _2985 = frontier_phi_63_pred_5;
                uint _3135 = _3134 + 1u;
                if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3128 = _2985;
                    _3129 = _2987;
                    _3130 = _2989;
                    _3131 = _2991;
                    _3132 = _2993;
                    _3133 = _2995;
                    _3134 = _3135;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
        }
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.z;
        uint _3001 = (_2999 >> 8u) & 15u;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((4294967295u << _3001) & _2857) == 0u)
        {
            _3096 = _2984;
            _3098 = _2986;
            _3100 = _2988;
            _3102 = _2990;
            _3104 = _2992;
            _3106 = _2994;
        }
        else
        {
            float _3121 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
            float _3122 = _3121 * _2811;
            float _3123 = _3121 * _2812;
            float _3124 = _3121 * _2813;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_3001 < ((_2999 >> 12u) & 15u))
            {
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3235 = _2984;
                float _3236 = _2986;
                float _3237 = _2988;
                float _3238 = _2990;
                float _3239 = _2992;
                float _3240 = _2994;
                uint _3241 = _3001;
                uint _3250;
                bool _3251;
                for (;;)
                {
                    _3250 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                    _3251 = _3250 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3251)
                    {
                        frontier_phi_69_pred = _3240;
                        frontier_phi_69_pred_1 = _3239;
                        frontier_phi_69_pred_2 = _3238;
                        frontier_phi_69_pred_3 = _3237;
                        frontier_phi_69_pred_4 = _3236;
                        frontier_phi_69_pred_5 = _3235;
                    }
                    else
                    {
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3448 = _3235;
                        float _3449 = _3236;
                        float _3450 = _3237;
                        float _3451 = _3238;
                        float _3452 = _3239;
                        float _3453 = _3240;
                        uint _3454 = _3250;
                        uint _3455;
                        vec4 _3480;
                        float _3481;
                        vec4 _3496;
                        vec3 _3508;
                        vec4 _3523;
                        vec4 _3538;
                        float _3584;
                        bool _3585;
                        for (;;)
                        {
                            uint _3465 = ((_3241 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3454));
                            _3455 = (_3454 + 4294967295u) & _3454;
                            uint _3467 = _3465 * 40u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3481 = _3480.w;
                            uint _3483 = (_3465 * 40u) + 4u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3465 * 40u) + 8u;
                            _3508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x));
                            uint _3510 = (_3465 * 40u) + 16u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3465 * 40u) + 20u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3465 * 40u) + 24u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3559 = (_3465 * 40u) + 28u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3584 = fma(_2813, _3572.z, fma(_2812, _3572.y, _3572.x * _2811)) + _3572.w;
                            _3585 = !((fma(_2813, _3553.z, fma(_2812, _3553.y, _3553.x * _2811)) + _3553.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3585)
                            {
                                float _3612 = _3480.x - _2811;
                                float _3613 = _3480.y - _2812;
                                float _3614 = _3480.z - _2813;
                                float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                                float _3618 = inversesqrt(_3615);
                                float _3619 = _3618 * _3612;
                                float _3620 = _3618 * _3613;
                                float _3621 = _3618 * _3614;
                                float _3625 = 1.0 - (_3615 / (_3481 * _3481));
                                float _4778 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3630 = sqrt(_3615) * _3496.w;
                                float _3632 = 1.39999997615814208984375 / (_3630 + 1.39999997615814208984375);
                                float _3633 = _3632 * _3632;
                                float _3636 = ((1.0 - _3633) * dot(vec3(_3619, _3620, _3621), vec3(_1097, _1100, _1103))) + _3633;
                                float _3639 = _3630 * _3630;
                                float _3643 = (fma(_2813, _3523.z, fma(_2812, _3523.y, _3523.x * _2811)) + _3523.w) / _3584;
                                float _3644 = (fma(_2813, _3538.z, fma(_2812, _3538.y, _3538.x * _2811)) + _3538.w) / _3584;
                                float _3648 = 1.0 - dot(vec2(_3643, _3644), vec2(_3643, _3644));
                                float _4794 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3650 = _3649 * (((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3626) / ((_3639 * 0.699999988079071044921875) + 1.0));
                                float _3662 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3663 = 1.0 - _1156;
                                float _3670 = sqrt(1.0 - ((1.0 - (_3663 * _3663)) * (1.0 - (_3662 * _3662))));
                                float _3671 = _3670 * _3670;
                                float _3672 = _3671 * _3671;
                                float _3673 = _3619 - _3122;
                                float _3674 = _3620 - _3123;
                                float _3675 = _3621 - _3124;
                                float _3679 = inversesqrt(dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675)));
                                float _3683 = dot(vec3(_1097, _1100, _1103), vec3((-0.0) - _3122, (-0.0) - _3123, (-0.0) - _3124));
                                float _4805 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3687 = dot(vec3(_1097, _1100, _1103), vec3(_3679 * _3673, _3679 * _3674, _3679 * _3675));
                                float _4816 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3694 = ((_3690 * _3690) * (_3672 + (-1.0))) + 1.0;
                                float _3695 = _3632 * _3671;
                                float _3696 = _3695 * _3695;
                                float _3702 = ((1.0 - _3696) * dot(vec3(_1097, _1100, _1103), vec3(_3619, _3620, _3621))) + _3696;
                                float _4827 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3704 = 1.0 - _3671;
                                float _3714 = (0.5 / (((_3703 * ((_3686 * _3704) + _3671)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3671) * _3686))) * _3703;
                                float _4838 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3724 = (_3649 * _3626) * (((_3672 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3694 * _3694) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3650 * _3496.z;
                                frontier_phi_75_pred_1 = _3650 * _3496.y;
                                frontier_phi_75_pred_2 = _3650 * _3496.x;
                                frontier_phi_75_pred_3 = _3724 * _3508.z;
                                frontier_phi_75_pred_4 = _3724 * _3508.y;
                                frontier_phi_75_pred_5 = _3724 * _3508.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3733 = frontier_phi_75_pred;
                            _3732 = frontier_phi_75_pred_1;
                            _3731 = frontier_phi_75_pred_2;
                            _3730 = frontier_phi_75_pred_3;
                            _3729 = frontier_phi_75_pred_4;
                            _3728 = frontier_phi_75_pred_5;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            if (_3455 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3455;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3440;
                        frontier_phi_69_pred_1 = _3439;
                        frontier_phi_69_pred_2 = _3438;
                        frontier_phi_69_pred_3 = _3437;
                        frontier_phi_69_pred_4 = _3436;
                        frontier_phi_69_pred_5 = _3435;
                    }
                    _3107 = frontier_phi_69_pred;
                    _3105 = frontier_phi_69_pred_1;
                    _3103 = frontier_phi_69_pred_2;
                    _3101 = frontier_phi_69_pred_3;
                    _3099 = frontier_phi_69_pred_4;
                    _3097 = frontier_phi_69_pred_5;
                    uint _3242 = _3241 + 1u;
                    if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3235 = _3097;
                        _3236 = _3099;
                        _3237 = _3101;
                        _3238 = _3103;
                        _3239 = _3105;
                        _3240 = _3107;
                        _3241 = _3242;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3107;
                frontier_phi_57_58_ladder_1 = _3105;
                frontier_phi_57_58_ladder_2 = _3103;
                frontier_phi_57_58_ladder_3 = _3101;
                frontier_phi_57_58_ladder_4 = _3099;
                frontier_phi_57_58_ladder_5 = _3097;
            }
            else
            {
                frontier_phi_57_58_ladder = _2994;
                frontier_phi_57_58_ladder_1 = _2992;
                frontier_phi_57_58_ladder_2 = _2990;
                frontier_phi_57_58_ladder_3 = _2988;
                frontier_phi_57_58_ladder_4 = _2986;
                frontier_phi_57_58_ladder_5 = _2984;
            }
            _3096 = frontier_phi_57_58_ladder_5;
            _3098 = frontier_phi_57_58_ladder_4;
            _3100 = frontier_phi_57_58_ladder_3;
            _3102 = frontier_phi_57_58_ladder_2;
            _3104 = frontier_phi_57_58_ladder_1;
            _3106 = frontier_phi_57_58_ladder;
        }
        float _3111 = isnan(1.0) ? _1140 : (isnan(_1140) ? 1.0 : min(_1140, 1.0));
        _2869 = (_3111 * _3102) + _2322;
        _2871 = (_3111 * _3104) + _2324;
        _2873 = (_3111 * _3106) + _2326;
        _2875 = ((_3096 * 0.039999999105930328369140625) * _3111) + _2655;
        _2877 = ((_3098 * 0.039999999105930328369140625) * _3111) + _2657;
        _2879 = ((_3100 * 0.039999999105930328369140625) * _3111) + _2659;
    }
    else
    {
        _2869 = _2322;
        _2871 = _2324;
        _2873 = _2326;
        _2875 = _2655;
        _2877 = _2657;
        _2879 = _2659;
    }
    uint _2885 = _1116 + uint(cbMatDynParam._m0[0u].w);
    float _4854 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _4865 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _4876 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4887 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _2917 = (((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2869 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1140))) + ((_2875 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1944)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[17u].w * _739) * _1010) * cbInstanceData._m0[_2885].x);
    float _2919 = ((((cbMtdParam._m0[17u].w * _740) * _1010) * cbInstanceData._m0[_2885].y) + ((_2877 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1944)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2871 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1140)));
    float _2921 = ((((cbMtdParam._m0[17u].w * _741) * _1010) * cbInstanceData._m0[_2885].z) + ((_2879 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1944)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2873 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1140)));
    float _2929 = cbInstanceData._m0[_946 + 6u].w * (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)));
    float _2934 = _1078 / cbSceneParam._m0[86u].x;
    float _2935 = _1079 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _1044 : (isnan(_1044) ? cbSceneParam._m0[77u].w : min(_1044, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_1044 > cbSceneParam._m0[78u].w)
    {
        float _3009 = isnan(_1044) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1044 : min(cbSceneParam._m0[80u].w, _1044));
        float _3010 = _3009 / _1044;
        float _3021 = _3010 * _1063;
        float _3022 = _1064 * _3010;
        float _3023 = (-0.0) - _3022;
        float _3024 = _3010 * _1065;
        float _3026 = (cbSceneParam._m0[77u].w * _3023) / _3009;
        float _3027 = _3026 + cbSceneParam._m0[79u].w;
        float _3028 = cbSceneParam._m0[79u].w - _3022;
        float _3034 = sqrt(((_3021 * _3021) + (_3022 * _3022)) + (_3024 * _3024));
        float _3037 = (1.0 - (cbSceneParam._m0[77u].w / _3009)) * _3034;
        float _3042 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3044 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3197;
        if (abs((_3023 - _3026) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3197 = ((((_3027 > 0.0) ? exp2(_3042 * _3027) : (2.0 - exp2(_3044 * _3027))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3037;
        }
        else
        {
            float _3157 = 1.0 / cbSceneParam._m0[80u].x;
            float _3158 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : max(_3027, _3028));
            float _3159 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : min(_3027, _3028));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            _3197 = ((abs(_3034 / _3023) * cbSceneParam._m0[80u].y) * ((((_3168 - _3169) * 2.0) - ((exp2(_3042 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0)))) - exp2(_3042 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))))) * _3157)) - ((exp2(_3044 * _3168) - exp2(_3044 * _3169)) * _3157))) + (_3037 * cbSceneParam._m0[80u].z);
        }
        vec4 _3199 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3208 = exp2((_3197 * (-1.44269502162933349609375)) * (1.0 - _3199.w));
        float _3209 = log2(_3208);
        float _3225 = log2(_2954);
        _3046 = (exp2(_3225 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].x)) * _3199.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3048 = (exp2(_3225 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].y)) * _3199.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3050 = (exp2(_3225 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].z)) * _3199.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3052 = _3208 * _2954;
    }
    else
    {
        _3046 = _2951;
        _3048 = _2952;
        _3050 = _2953;
        _3052 = _2954;
    }
    float _3064 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3065 = _3064 == 3.0;
    float _3066 = log2(_3052);
    float _3073 = exp2(_3066 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0)));
    float _3074 = exp2(_3066 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0)));
    float _3075 = exp2(_3066 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0)));
    float _3084 = (_3064 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3084 * (_3065 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3046)));
    SV_Target.y = _3084 * (_3065 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3048)));
    SV_Target.z = _3084 * (_3065 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3050)));
    SV_Target.w = _2929;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2929;
}


