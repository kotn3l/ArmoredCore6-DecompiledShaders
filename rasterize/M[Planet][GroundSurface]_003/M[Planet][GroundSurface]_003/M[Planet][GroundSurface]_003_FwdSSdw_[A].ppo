#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_003_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1554;
float _3963;
float _3964;
float _3965;
float _3966;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    uvec4 _309 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _311 = _309.z != 0u;
    vec4 _332 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _335 = _332.x;
    float _336 = _332.y;
    float _337 = _332.z;
    bool _358 = _309.x != 0u;
    vec4 _377 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _379 = _377.x;
    float _380 = _377.y;
    float _381 = _377.z;
    float _397 = _358 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[9u].w - _379)) + _379) : (_379 * cbMtdParam._m0[9u].w);
    float _398 = _358 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].x - _380)) + _380) : (_380 * cbMtdParam._m0[10u].x);
    float _399 = _358 ? ((cbMtdParam._m0[22u].x * (cbMtdParam._m0[10u].y - _381)) + _381) : (_381 * cbMtdParam._m0[10u].y);
    bool _401 = _309.y != 0u;
    vec4 _416 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    vec4 _449 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _463 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * (1.0 - _451)) + 1.0;
    float _3975 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _471 = (cbMtdParam._m0[18u].z * ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) - _451)) + _451;
    float _478 = (_471 * ((_401 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[10u].w - _418)) + _418) : (_418 * cbMtdParam._m0[10u].w)) - _397)) + _397;
    float _479 = (_471 * ((_401 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].x - _419)) + _419) : (_419 * cbMtdParam._m0[11u].x)) - _398)) + _398;
    float _480 = (_471 * ((_401 ? ((cbMtdParam._m0[16u].x * (cbMtdParam._m0[11u].y - _420)) + _420) : (_420 * cbMtdParam._m0[11u].y)) - _399)) + _399;
    float _487 = (((1.0 - _452) * (-1.39999997615814208984375)) * cbMtdParam._m0[20u].y) + 1.0;
    float _3986 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _495 = (cbMtdParam._m0[15u].w * ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) - _452)) + _452;
    float _502 = (_495 * ((_311 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[11u].w - _335)) + _335) : (_335 * cbMtdParam._m0[11u].w)) - _478)) + _478;
    float _503 = (_495 * ((_311 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].x - _336)) + _336) : (_336 * cbMtdParam._m0[12u].x)) - _479)) + _479;
    float _504 = (_495 * ((_311 ? ((cbMtdParam._m0[16u].y * (cbMtdParam._m0[12u].y - _337)) + _337) : (_337 * cbMtdParam._m0[12u].y)) - _480)) + _480;
    vec4 _527 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_13, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].y * TEXCOORD.x) + cbMtdParam._m0[22u].y) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[23u].z * TEXCOORD.y) + cbMtdParam._m0[22u].z) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _533 = cbMtdParam._m0[17u].x * _527.x;
    vec4 _545 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _572 = (((_547 - _502) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[14u].w - _547))) * _533) + _502;
    float _573 = (((_548 - _503) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].x - _548))) * _533) + _503;
    float _574 = (((_549 - _504) + (cbMtdParam._m0[20u].x * (cbMtdParam._m0[15u].y - _549))) * _533) + _504;
    float _595 = cbMtdParam._m0[20u].z * cbPerFrame._m0[22u].x;
    vec4 _614 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_16, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[7u].x * cbMtdParam._m0[25u].w) * ((_595 * cbMtdParam._m0[26u].y) + TEXCOORD.z)) + cbTextureTilingScale._m0[7u].z, ((cbTextureTilingScale._m0[7u].y * cbMtdParam._m0[26u].x) * ((_595 * cbMtdParam._m0[26u].z) + TEXCOORD.w)) + cbTextureTilingScale._m0[7u].w));
    float _616 = _614.x;
    vec4 _651 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_17, SS_ClampLinear), vec2((((cbMtdParam._m0[25u].y + TEXCOORD.z) * cbMtdParam._m0[26u].w) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[25u].z + TEXCOORD.w) * cbMtdParam._m0[27u].x) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _688 = exp2(log2(cbMtdParam._m0[21u].x * texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_15, SS_DiffuseMap), vec2(((((((cbMtdParam._m0[24u].y * _595) + (_616 * cbMtdParam._m0[23u].w)) + cbMtdParam._m0[22u].w) + (cbMtdParam._m0[24u].w * TEXCOORD.z)) + ((_651.x + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((((cbMtdParam._m0[24u].z * _595) + (_616 * cbMtdParam._m0[24u].x)) + cbMtdParam._m0[23u].x) + (cbMtdParam._m0[25u].x * TEXCOORD.w)) + ((_651.y + (-0.5)) * cbMtdParam._m0[20u].w)) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).w) * cbMtdParam._m0[21u].y);
    float _3997 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _703 = ((_689 * (cbMtdParam._m0[13u].w - _572)) * cbMtdParam._m0[19u].w) + _572;
    float _704 = ((_689 * (cbMtdParam._m0[14u].x - _573)) * cbMtdParam._m0[19u].w) + _573;
    float _705 = ((_689 * (cbMtdParam._m0[14u].y - _574)) * cbMtdParam._m0[19u].w) + _574;
    float _716 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _720 = dot(vec4(_716 * _303, _716 * _304, _716 * _305, 0.0), vec4(_245, _246, _247, 0.0));
    float _723 = _720 - cbMtdParam._m0[16u].w;
    float _4008 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _733 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[16u].z : (isnan(cbMtdParam._m0[16u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[16u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[17u].y)) + cbMtdParam._m0[17u].y;
    float _743 = (((_733 * cbMtdParam._m0[12u].w) - _703) * _733) + _703;
    float _744 = (((_733 * cbMtdParam._m0[13u].x) - _704) * _733) + _704;
    float _745 = (((_733 * cbMtdParam._m0[13u].y) - _705) * _733) + _705;
    float _749 = _720 - cbMtdParam._m0[18u].y;
    float _4024 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _758 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))))) * cbMtdParam._m0[19u].y) * cbMtdParam._m0[18u].x);
    float _4035 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _759 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    vec4 _771 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _787 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _789 = _787.x;
    float _790 = _787.y;
    float _791 = _787.z;
    float _798 = ((_771.x - _789) * _471) + _789;
    float _799 = ((_771.y - _790) * _471) + _790;
    float _800 = ((_771.z - _791) * _471) + _791;
    vec4 _812 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _838 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _849 = (((_812.x - _798) * _495) + _798) + ((_838.x + (-0.5)) * cbMtdParam._m0[21u].w);
    float _850 = (((_812.y - _799) * _495) + _799) + ((_838.y + (-0.5)) * cbMtdParam._m0[21u].w);
    float _851 = (((_812.z - _800) * _495) + _800) + ((_838.z + (-0.5)) * cbMtdParam._m0[21u].w);
    vec4 _864 = texture(sampler2D(M_Planet_GroundSurface_003_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _875 = ((_864.x - _849) * _533) + _849;
    float _876 = ((_864.y - _850) * _533) + _850;
    float _877 = ((_864.z - _851) * _533) + _851;
    float _887 = ((1.0 - _877) * _733) + _877;
    float _891 = ((((0.502016007900238037109375 - _875) * _733) + _875) * 2.0) + (-1.0);
    float _893 = ((((0.502016007900238037109375 - _876) * _733) + _876) * 2.0) + (-1.0);
    float _894 = dot(vec2(_891, _893), vec2(_891, _893));
    float _4046 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _899 = sqrt(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935 = inversesqrt(dot(vec3(_923, _927, _931), vec3(_923, _927, _931)));
    float _945 = inversesqrt(dot(vec3(cbMtdParam._m0[27u].yzw), vec3(cbMtdParam._m0[27u].yzw)));
    uint _950 = uint(roundEven(NORMAL.w)) * 13u;
    uint _951 = _950 + 5u;
    uint _956 = floatBitsToUint(cbInstanceData._m0[_951]).x * 14u;
    float _968 = (((_945 * cbMtdParam._m0[27u].y) - cbLight._m0[_956].x) * cbMtdParam._m0[19u].z) + cbLight._m0[_956].x;
    float _969 = (((_945 * cbMtdParam._m0[27u].z) - cbLight._m0[_956].y) * cbMtdParam._m0[19u].z) + cbLight._m0[_956].y;
    float _970 = (((_945 * cbMtdParam._m0[27u].w) - cbLight._m0[_956].z) * cbMtdParam._m0[19u].z) + cbLight._m0[_956].z;
    float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
    float _975 = _968 * _974;
    float _976 = _969 * _974;
    float _977 = _970 * _974;
    float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
    float _997 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_935 * _923, _935 * _927, _935 * _931, 0.0), vec4(_975 * _981, _976 * _981, _977 * _981, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _4057 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1005 = exp2(log2(_999 * 6.5) * 7.0);
    float _4068 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1012 = exp2(log2(cbMtdParam._m0[19u].x * ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) + _999)) * cbMtdParam._m0[18u].w);
    float _4079 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1013 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1014 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1017 = fma(_899, _245, fma(_893, _237 * TANGENT.x, (_223 * _215) * _891));
    float _1020 = fma(_899, _246, fma(_893, _237 * TANGENT.y, (_223 * _216) * _891));
    float _1023 = fma(_899, _247, fma(_893, _237 * TANGENT.z, (_223 * _217) * _891));
    float _1027 = inversesqrt(dot(vec3(_1017, _1020, _1023), vec3(_1017, _1020, _1023)));
    float _1028 = _1027 * _1017;
    float _1029 = _1027 * _1020;
    float _1030 = _1027 * _1023;
    float _4101 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _1031 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _1032 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4134 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4145 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _1048 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1067 = cbSceneParam._m0[71u].x - (_923 / _1058);
    float _1068 = cbSceneParam._m0[71u].y - (_927 / _1058);
    float _1069 = cbSceneParam._m0[71u].z - (_931 / _1058);
    float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
    float _1074 = _1067 * _1073;
    float _1075 = _1068 * _1073;
    float _1076 = _1069 * _1073;
    vec4 _1081 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1083 = _1081.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1236 = sqrt(((_1067 * _1067) + (_1068 * _1068)) + (_1069 * _1069));
        float _1242 = (cbMatDynParam._m0[5u].x * _1236) + cbMatDynParam._m0[5u].y;
        float _4156 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1247 = (cbMatDynParam._m0[5u].z * _1236) + cbMatDynParam._m0[5u].w;
        float _4167 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) - _1243)) + _1243) < ((_1083 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1094 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1095 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1113 = fma(_1030, cbSceneParam._m0[5u].z, fma(_1029, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1028));
    float _1116 = fma(_1030, cbSceneParam._m0[6u].z, fma(_1029, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1028));
    float _1119 = fma(_1030, cbSceneParam._m0[7u].z, fma(_1029, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1028));
    uint _1132 = _950 + 9u;
    uint _1133 = _1132 + uint(cbMatDynParam._m0[0u].w);
    float _1139 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_1133].x;
    float _1140 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_1133].y;
    float _1141 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * cbInstanceData._m0[_1133].z;
    float _4178 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    vec4 _1153 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1094, cbSceneParam._m0[86u].y * _1095));
    float _1156 = _1153.x * TEXCOORD_4;
    float _1157 = dot(vec3(_1028, _1029, _1030), vec3(_1074, _1075, _1076));
    float _1160 = _1157 * 2.0;
    float _1164 = (_1160 * _1028) - _1074;
    float _1165 = (_1160 * _1029) - _1075;
    float _1166 = (_1160 * _1030) - _1076;
    float _1170 = abs(dot(vec3(_1074, _1075, _1076), vec3(_1028, _1029, _1030)));
    float _4211 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1172 = sqrt(_1032);
    float _1185 = exp2((_1172 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1172 * 3.0));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1225 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1553;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1280 = fma(_1225, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217));
        float _1284 = fma(_1225, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217));
        float _1288 = fma(_1225, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217));
        float _1311 = _1217 + _1028;
        float _1312 = _1221 + _1029;
        float _1313 = _1225 + _1030;
        float _1323 = fma(_1313, cbModelParam._m0[26u].z, fma(_1312, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1311)) - _1280;
        float _1324 = fma(_1313, cbModelParam._m0[27u].z, fma(_1312, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1311)) - _1284;
        float _1325 = fma(_1313, cbModelParam._m0[28u].z, fma(_1312, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1311)) - _1288;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1280 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1284 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[34u].z) + ((((((_1288 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1381 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1347.x + (-0.5));
        float _1383 = _1381 * (_1347.y + (-0.5));
        float _1384 = _1381 * (_1347.z + (-0.5));
        float _1391 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1354.x + (-0.5));
        float _1393 = _1391 * (_1354.y + (-0.5));
        float _1394 = _1391 * (_1354.z + (-0.5));
        float _1401 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1361.x + (-0.5));
        float _1403 = _1401 * (_1361.y + (-0.5));
        float _1404 = _1401 * (_1361.z + (-0.5));
        float _1411 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1368.x + (-0.5));
        float _1413 = _1411 * (_1368.y + (-0.5));
        float _1414 = _1411 * (_1368.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1435 = (dot(vec3(_1028, _1029, _1030), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1445 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4259 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1447 + 1.0))) + _1452) * _1415;
        float _1462 = _1383 * 0.5;
        float _1463 = _1393 * 0.5;
        float _1464 = _1403 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_1028, _1029, _1030), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4292 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1489 + 1.0))) + _1494) * _1416;
        float _1504 = _1384 * 0.5;
        float _1505 = _1394 * 0.5;
        float _1506 = _1404 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_1028, _1029, _1030), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4325 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1531 + 1.0))) + _1536) * _1417;
        _1553 = _1384;
        _1555 = _1383;
        _1556 = _1382;
        _1557 = _1394;
        _1558 = _1393;
        _1559 = _1392;
        _1560 = _1404;
        _1561 = _1403;
        _1562 = _1402;
        _1563 = _1417;
        _1564 = _1416;
        _1565 = _1415;
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1554;
        _1555 = _1554;
        _1556 = _1554;
        _1557 = _1554;
        _1558 = _1554;
        _1559 = _1554;
        _1560 = _1554;
        _1561 = _1554;
        _1562 = _1554;
        _1563 = _1554;
        _1564 = _1554;
        _1565 = _1554;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1597 = fma(_1225, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217));
        float _1601 = fma(_1225, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217));
        float _1605 = fma(_1225, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217));
        float _1628 = _1217 + _1028;
        float _1629 = _1221 + _1029;
        float _1630 = _1225 + _1030;
        float _1640 = fma(_1630, cbModelParam._m0[30u].z, fma(_1629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1628)) - _1597;
        float _1641 = fma(_1630, cbModelParam._m0[31u].z, fma(_1629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1628)) - _1601;
        float _1642 = fma(_1630, cbModelParam._m0[32u].z, fma(_1629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1628)) - _1605;
        float _1646 = inversesqrt(dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642)));
        float _1659 = ((_1646 * _1640) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1597 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1660 = ((_1646 * _1641) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1601 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1661 = ((_1646 * _1642) / cbModelParam._m0[35u].z) + ((((((_1605 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        float _1696 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1663.x + (-0.5));
        float _1698 = _1696 * (_1663.y + (-0.5));
        float _1699 = _1696 * (_1663.z + (-0.5));
        float _1706 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1670.x + (-0.5));
        float _1708 = _1706 * (_1670.y + (-0.5));
        float _1709 = _1706 * (_1670.z + (-0.5));
        float _1716 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1677.x + (-0.5));
        float _1718 = _1716 * (_1677.y + (-0.5));
        float _1719 = _1716 * (_1677.z + (-0.5));
        float _1726 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1727 = _1726 * (_1684.x + (-0.5));
        float _1728 = _1726 * (_1684.y + (-0.5));
        float _1729 = _1726 * (_1684.z + (-0.5));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = _1697 * 0.5;
        float _1734 = _1707 * 0.5;
        float _1735 = _1717 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_1028, _1029, _1030), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4388 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1760 + 1.0))) + _1765) * _1730;
        float _1775 = _1698 * 0.5;
        float _1776 = _1708 * 0.5;
        float _1777 = _1718 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_1028, _1029, _1030), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4421 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1802 + 1.0))) + _1807) * _1731;
        float _1817 = _1699 * 0.5;
        float _1818 = _1709 * 0.5;
        float _1819 = _1719 * 0.5;
        float _1820 = dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819));
        float _1825 = (_1820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1820);
        float _1833 = (dot(vec3(_1028, _1029, _1030), vec3(_1825 * _1817, _1825 * _1818, _1825 * _1819)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1844 = _1843 * 2.0;
        float _1848 = (1.0 - _1843) / (_1843 + 1.0);
        float _4454 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1858 = ((((1.0 - _1849) * (_1844 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1844 + 1.0))) + _1849) * _1732;
        _1866 = _1699;
        _1867 = _1698;
        _1868 = _1697;
        _1869 = _1709;
        _1870 = _1708;
        _1871 = _1707;
        _1872 = _1719;
        _1873 = _1718;
        _1874 = _1717;
        _1875 = _1732;
        _1876 = _1731;
        _1877 = _1730;
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)));
    }
    else
    {
        _1866 = _1554;
        _1867 = _1554;
        _1868 = _1554;
        _1869 = _1554;
        _1870 = _1554;
        _1871 = _1554;
        _1872 = _1554;
        _1873 = _1554;
        _1874 = _1554;
        _1875 = _1554;
        _1876 = _1554;
        _1877 = _1554;
        _1878 = 0.0;
        _1879 = 0.0;
        _1880 = 0.0;
    }
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1566)) + _1566;
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1567)) + _1567;
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1568)) + _1568;
    float _1913 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1890));
    float _1934 = _1164 * 0.5;
    float _1935 = _1165 * 0.5;
    float _1936 = _1166 * 0.5;
    float _1937 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1940 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1943 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1977;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1950 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1553, _1557, _1560, _1563));
        float _1954 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1958 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1556, _1559, _1562, _1565));
        float _1965 = dot(vec4(cbModelParam._m0[39u]), vec4(_1934, _1935, _1936, 1.0));
        _1977 = dot(vec3(isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1965) ? 0.0 : (isnan(0.0) ? _1965 : max(0.0, _1965))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1977 = 1.0;
    }
    float _1988;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1979 = dot(vec4(cbModelParam._m0[40u]), vec4(_1934, _1935, _1936, 1.0));
        _1988 = dot(vec3(isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1979) ? 0.0 : (isnan(0.0) ? _1979 : max(0.0, _1979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1988 = 1.0;
    }
    float _1992 = (_1988 * cbModelParam._m0[1u].x) + (_1977 * (1.0 - cbModelParam._m0[1u].x));
    float _2002 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1032);
    float _2003 = isnan(_2002) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2002 : min(cbModelParam._m0[25u].z, _2002));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2050 = fma(_1225, cbModelParam._m0[13u].z, fma(_1221, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1217)) + cbModelParam._m0[13u].w;
        float _2054 = fma(_1225, cbModelParam._m0[14u].z, fma(_1221, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1217)) + cbModelParam._m0[14u].w;
        float _2058 = fma(_1225, cbModelParam._m0[15u].z, fma(_1221, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1217)) + cbModelParam._m0[15u].w;
        float _2061 = fma(_1166, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164));
        float _2064 = fma(_1166, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164));
        float _2067 = fma(_1166, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164));
        float _2095;
        if (_2061 > 0.0)
        {
            _2095 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2095 = frontier_phi_19_17_ladder;
        }
        float _2315;
        if (_2064 > 0.0)
        {
            _2315 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2315 = frontier_phi_28_24_ladder;
        }
        float _2561;
        if (_2067 > 0.0)
        {
            _2561 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2561 = frontier_phi_40_35_ladder;
        }
        float _2563 = isnan(_2315) ? _2095 : (isnan(_2095) ? _2315 : min(_2095, _2315));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _2061) + _2050;
        float _2569 = (_2564 * _2064) + _2054;
        float _2570 = (_2564 * _2067) + _2058;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2571;
        float _2575 = _2571 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 > _2575) || ((_2569 < _2573) || ((_2568 < _2573) || (_2568 > _2575))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2570, cbModelParam._m0[9u].z, fma(_2569, cbModelParam._m0[9u].y, _2568 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2570, cbModelParam._m0[10u].z, fma(_2569, cbModelParam._m0[10u].y, _2568 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2570, cbModelParam._m0[11u].z, fma(_2569, cbModelParam._m0[11u].y, _2568 * cbModelParam._m0[11u].x))), _2003);
            frontier_phi_18_40_ladder = _2694.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2694.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2694.x * cbModelParam._m0[1u].y;
        }
        _2083 = frontier_phi_18_40_ladder_2;
        _2085 = frontier_phi_18_40_ladder_1;
        _2087 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1164, _1165, _1166), _2003);
        _2083 = _2071.x * cbModelParam._m0[1u].y;
        _2085 = _2071.y * cbModelParam._m0[1u].y;
        _2087 = _2071.z * cbModelParam._m0[1u].y;
    }
    float _2091 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1032);
    float _2092 = isnan(_2091) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2091 : min(cbModelParam._m0[25u].w, _2091));
    float _2181;
    float _2183;
    float _2185;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2145 = fma(_1225, cbModelParam._m0[21u].z, fma(_1221, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1217)) + cbModelParam._m0[21u].w;
        float _2149 = fma(_1225, cbModelParam._m0[22u].z, fma(_1221, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1217)) + cbModelParam._m0[22u].w;
        float _2153 = fma(_1225, cbModelParam._m0[23u].z, fma(_1221, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1217)) + cbModelParam._m0[23u].w;
        float _2156 = fma(_1166, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164));
        float _2159 = fma(_1166, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164));
        float _2162 = fma(_1166, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164));
        float _2320;
        if (_2156 > 0.0)
        {
            _2320 = abs((1.0 - _2145) / _2156);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2145 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2320 = frontier_phi_30_26_ladder;
        }
        float _2588;
        if (_2159 > 0.0)
        {
            _2588 = abs((1.0 - _2149) / _2159);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2149 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2588 = frontier_phi_42_37_ladder;
        }
        float _2793;
        if (_2162 > 0.0)
        {
            _2793 = abs((1.0 - _2153) / _2162);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2153 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2793 = frontier_phi_51_48_ladder;
        }
        float _2795 = isnan(_2588) ? _2320 : (isnan(_2320) ? _2588 : min(_2320, _2588));
        float _2796 = isnan(_2793) ? _2795 : (isnan(_2795) ? _2793 : min(_2795, _2793));
        float _2800 = (_2796 * _2156) + _2145;
        float _2801 = (_2796 * _2159) + _2149;
        float _2802 = (_2796 * _2162) + _2153;
        float _2803 = _2796 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2803;
        float _2806 = _2803 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2802 > _2806) || ((_2802 < _2804) || ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 < _2804) || (_2800 > _2806))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3027 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2802, cbModelParam._m0[17u].z, fma(_2801, cbModelParam._m0[17u].y, _2800 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2802, cbModelParam._m0[18u].z, fma(_2801, cbModelParam._m0[18u].y, _2800 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2802, cbModelParam._m0[19u].z, fma(_2801, cbModelParam._m0[19u].y, _2800 * cbModelParam._m0[19u].x))), _2092);
            frontier_phi_27_51_ladder = _3027.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3027.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3027.x * cbModelParam._m0[1u].z;
        }
        _2181 = frontier_phi_27_51_ladder_2;
        _2183 = frontier_phi_27_51_ladder_1;
        _2185 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1164, _1165, _1166), _2092);
        _2181 = _2165.x * cbModelParam._m0[1u].z;
        _2183 = _2165.y * cbModelParam._m0[1u].z;
        _2185 = _2165.z * cbModelParam._m0[1u].z;
    }
    float _2197 = ((((1.0 - _1185) * ((_1172 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1185 * _1172)) * _1156;
    float _2198 = _2197 * ((cbModelParam._m0[1u].w * (_2181 - _2083)) + _2083);
    float _2199 = _2197 * ((cbModelParam._m0[1u].w * (_2183 - _2085)) + _2085);
    float _2200 = _2197 * ((cbModelParam._m0[1u].w * (_2185 - _2087)) + _2087);
    float _2203 = fma(_2200, cbSceneParam._m0[89u].z, fma(_2199, cbSceneParam._m0[89u].y, _2198 * cbSceneParam._m0[89u].x));
    float _2206 = fma(_2200, cbSceneParam._m0[90u].z, fma(_2199, cbSceneParam._m0[90u].y, _2198 * cbSceneParam._m0[90u].x));
    float _2209 = fma(_2200, cbSceneParam._m0[91u].z, fma(_2199, cbSceneParam._m0[91u].y, _2198 * cbSceneParam._m0[91u].x));
    vec4 _2217 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1094, _1095));
    float _2219 = _2217.w;
    float _2231 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2219);
    float _2232 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2219);
    float _2233 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2219);
    uvec4 _2236 = floatBitsToUint(cbInstanceData._m0[_951]);
    uint _2238 = _2236.x * 14u;
    uint _2239 = _2238 + 13u;
    float _2246 = _1156 + (-1.0);
    float _2251 = (cbLight._m0[_2239].x * _2246) + 1.0;
    float _2252 = (cbLight._m0[_2239].y * _2246) + 1.0;
    float _2253 = (cbLight._m0[_2239].z * _2246) + 1.0;
    float _2254 = (cbLight._m0[_2239].w * _2246) + 1.0;
    uint _2255 = _2238 + 5u;
    float _2261 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2265 = _2238 + 4u;
    float _2274 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2278 = _2238 | 1u;
    float _2289 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_1028, _1029, _1030));
    float _2292 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_1028, _1029, _1030));
    float _4590 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _4601 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2297 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.3183098733425140380859375;
    float _2299 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2306 = ((cbLight._m0[_2255].x * _2261) * _2299) + (((cbLight._m0[_2265].x * _2231) * _2274) * _2297);
    float _2307 = ((_2261 * cbLight._m0[_2255].y) * _2299) + (((cbLight._m0[_2265].y * _2232) * _2274) * _2297);
    float _2308 = ((_2261 * cbLight._m0[_2255].z) * _2299) + (((cbLight._m0[_2265].z * _2233) * _2274) * _2297);
    uvec4 _2312 = floatBitsToUint(cbLight._m0[_2238 + 12u]);
    bool _2314 = _2312.x == 0u;
    float _2325;
    float _2327;
    float _2329;
    if (_2314)
    {
        _2325 = _2306;
        _2327 = _2307;
        _2329 = _2308;
    }
    else
    {
        uint _2333 = _2238 + 6u;
        float _2349 = (dot(vec3(cbLight._m0[_2238 + 2u].xyz), vec3(_1028, _1029, _1030)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4612 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2352 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2325 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2306;
        _2327 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2307;
        _2329 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2308;
    }
    bool _2332 = _2312.y == 0u;
    float _2370;
    float _2372;
    float _2374;
    if (_2332)
    {
        _2370 = _2325;
        _2372 = _2327;
        _2374 = _2329;
    }
    else
    {
        uint _2532 = _2238 + 7u;
        float _2548 = (dot(vec3(cbLight._m0[_2238 + 3u].xyz), vec3(_1028, _1029, _1030)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4628 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2551 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2370 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2325;
        _2372 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2327;
        _2374 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2329;
    }
    uint _2377 = _2238 + 8u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _1032) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2238].x + _1074;
    float _2393 = cbLight._m0[_2238].y + _1075;
    float _2394 = cbLight._m0[_2238].z + _1076;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2238].xyz));
    float _4644 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _4655 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _2406 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2407 = dot(vec3(_1028, _1029, _1030), vec3(_2399, _2400, _2401));
    float _4666 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2411 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2399, _2400, _2401));
    float _4677 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2415 = _2391 * _2391;
    float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
    float _2430 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2431 = 1.0 - _2391;
    float _2442 = (0.5 / (((_2406 * ((_2405 * _2431) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2431) + _2391) * _2405))) * _2405;
    float _4688 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2444 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
    uint _2458 = _2238 + 9u;
    float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _1032) * 0.949999988079071044921875);
    float _2470 = _2469 * _2469;
    float _2471 = cbLight._m0[_2278].x + _1074;
    float _2472 = cbLight._m0[_2278].y + _1075;
    float _2473 = cbLight._m0[_2278].z + _1076;
    float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
    float _2478 = _2477 * _2471;
    float _2479 = _2477 * _2472;
    float _2480 = _2477 * _2473;
    float _2481 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2278].xyz));
    float _4699 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2485 = dot(vec3(_1028, _1029, _1030), vec3(_2478, _2479, _2480));
    float _4710 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2489 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2478, _2479, _2480));
    float _4721 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2493 = _2470 * _2470;
    float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
    float _2506 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2507 = 1.0 - _2470;
    float _2517 = (0.5 / (((_2406 * ((_2484 * _2507) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2507) + _2470) * _2484))) * _2484;
    float _4732 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
    float _2529 = (((_2506 * cbLight._m0[_2458].x) * _2519) * _2261) + ((((cbLight._m0[_2377].x * _2231) * _2430) * _2444) * _2274);
    float _2530 = (((_2506 * cbLight._m0[_2458].y) * _2519) * _2261) + ((((cbLight._m0[_2377].y * _2232) * _2430) * _2444) * _2274);
    float _2531 = (((_2506 * cbLight._m0[_2458].z) * _2519) * _2261) + ((((cbLight._m0[_2377].z * _2233) * _2430) * _2444) * _2274);
    float _2593;
    float _2595;
    float _2597;
    if (_2314)
    {
        _2593 = _2529;
        _2595 = _2530;
        _2597 = _2531;
    }
    else
    {
        uint _2599 = _2238 + 2u;
        uint _2603 = _2238 + 10u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _1032) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _1074;
        float _2620 = cbLight._m0[_2599].y + _1075;
        float _2621 = cbLight._m0[_2599].z + _1076;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2599].xyz));
        float _4743 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2633 = dot(vec3(_1028, _1029, _1030), vec3(_2626, _2627, _2628));
        float _4754 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4765 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2654 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2655 = 1.0 - _2618;
        float _2665 = (0.5 / (((_2406 * ((_2632 * _2655) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2655) + _2618) * _2632))) * _2632;
        float _4776 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2667 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2668 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2593 = (((_2654 * cbLight._m0[_2603].x) * _2667) * _2668) + _2529;
        _2595 = (((_2654 * cbLight._m0[_2603].y) * _2667) * _2668) + _2530;
        _2597 = (((_2654 * cbLight._m0[_2603].z) * _2667) * _2668) + _2531;
    }
    float _2703;
    float _2705;
    float _2707;
    if (_2332)
    {
        _2703 = _2593;
        _2705 = _2595;
        _2707 = _2597;
    }
    else
    {
        uint _2714 = _2238 + 3u;
        uint _2718 = _2238 + 11u;
        float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2714].w)) * _1032) * 0.949999988079071044921875);
        float _2733 = _2732 * _2732;
        float _2734 = cbLight._m0[_2714].x + _1074;
        float _2735 = cbLight._m0[_2714].y + _1075;
        float _2736 = cbLight._m0[_2714].z + _1076;
        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
        float _2741 = _2740 * _2734;
        float _2742 = _2740 * _2735;
        float _2743 = _2740 * _2736;
        float _2744 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2714].xyz));
        float _4792 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2748 = dot(vec3(_1028, _1029, _1030), vec3(_2741, _2742, _2743));
        float _4803 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2752 = dot(vec3(cbLight._m0[_2714].xyz), vec3(_2741, _2742, _2743));
        float _4814 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2756 = _2733 * _2733;
        float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
        float _2769 = (exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2770 = 1.0 - _2733;
        float _2780 = (0.5 / (((_2406 * ((_2747 * _2770) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2770) + _2733) * _2747))) * _2747;
        float _4825 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2782 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
        float _2783 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2703 = (((_2769 * cbLight._m0[_2718].x) * _2782) * _2783) + _2593;
        _2705 = (((_2769 * cbLight._m0[_2718].y) * _2782) * _2783) + _2595;
        _2707 = (((_2769 * cbLight._m0[_2718].z) * _2782) * _2783) + _2597;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2236.y == 0u)
    {
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2858;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2858;
        float _2861 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2858;
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.x;
        uint _2885 = uint((float(_2873.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1095) / _2874))) + floor(float(uint(cbSceneParam._m0[85u].x * _1094) / _2874)));
        float _2895 = (log2(_2861 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2896 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        uint _2899 = uint(isnan(14.0) ? _2896 : (isnan(_2896) ? 14.0 : min(_2896, 14.0)));
        uvec4 _2904 = texelFetch(g_lightClusterGridBuffer, int(((_2899 << 2u) + (_2885 << 6u)) >> 2u));
        uint _2905 = _2904.x;
        uint _2906 = _2873.z;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((((1u << ((_2906 >> 4u) & 15u)) + 4294967295u) & _2905) == 0u) || ((_2906 & 240u) == 0u))
        {
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
        }
        else
        {
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            uint _3190 = 0u;
            uint _3199;
            bool _3200;
            for (;;)
            {
                _3199 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                _3200 = _3199 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3200)
                {
                    frontier_phi_68_pred = _3186;
                    frontier_phi_68_pred_1 = _3189;
                    frontier_phi_68_pred_2 = _3188;
                    frontier_phi_68_pred_3 = _3187;
                    frontier_phi_68_pred_4 = _3185;
                    frontier_phi_68_pred_5 = _3184;
                }
                else
                {
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    uint _3335;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3199;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    for (;;)
                    {
                        uint _3339 = uint(findLSB(_3335)) + (_3190 << 5u);
                        uint _3336 = (_3335 + 4294967295u) & _3335;
                        uint _3341 = _3339 * 48u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3361 = (_3339 * 48u) + 4u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3380 = (_3339 * 48u) + 8u;
                        vec3 _3391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x));
                        float _3395 = _3355.x - _2859;
                        float _3396 = _3355.y - _2860;
                        float _3397 = _3355.z - _2861;
                        float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                        float _3401 = inversesqrt(_3398);
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3405 = dot(vec3(_1113, _1116, _1119), vec3(_3402, _3403, _3404));
                        float _3410 = 1.0 - (_3398 * _3355.w);
                        float _4851 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3412 = sqrt(_3398) * _3374.w;
                        float _3415 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3405) + _3416;
                        float _3422 = _3412 * _3412;
                        float _3426 = ((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3411) / ((_3422 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _2859;
                        float _3431 = (-0.0) - _2860;
                        float _3432 = (-0.0) - _2861;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3447 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                        float _3448 = 1.0 - _1172;
                        float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3437 + _3402;
                        float _3459 = _3438 + _3403;
                        float _3460 = _3439 + _3404;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_1113, _1116, _1119), vec3(_3437, _3438, _3439));
                        float _4867 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3472 = dot(vec3(_1113, _1116, _1119), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4878 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3415 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3405) + _3481;
                        float _4889 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4900 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3479 * _3479) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125))) * _3411;
                        _3259 = (_3426 * _3374.x) + _3332;
                        _3260 = (_3426 * _3374.y) + _3333;
                        _3261 = (_3426 * _3374.z) + _3334;
                        _3256 = (_3507 * _3391.x) + _3329;
                        _3257 = (_3507 * _3391.y) + _3330;
                        _3258 = (_3507 * _3391.z) + _3331;
                        if (_3336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3336;
                        }
                    }
                    frontier_phi_68_pred = _3258;
                    frontier_phi_68_pred_1 = _3261;
                    frontier_phi_68_pred_2 = _3260;
                    frontier_phi_68_pred_3 = _3259;
                    frontier_phi_68_pred_4 = _3257;
                    frontier_phi_68_pred_5 = _3256;
                }
                _3037 = frontier_phi_68_pred;
                _3043 = frontier_phi_68_pred_1;
                _3041 = frontier_phi_68_pred_2;
                _3039 = frontier_phi_68_pred_3;
                _3035 = frontier_phi_68_pred_4;
                _3033 = frontier_phi_68_pred_5;
                uint _3191 = _3190 + 1u;
                if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3184 = _3033;
                    _3185 = _3035;
                    _3186 = _3037;
                    _3187 = _3039;
                    _3188 = _3041;
                    _3189 = _3043;
                    _3190 = _3191;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
        }
        uvec4 _3046 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3047 = _3046.z;
        uint _3049 = (_3047 >> 8u) & 15u;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((4294967295u << _3049) & _2905) == 0u)
        {
            _3152 = _3032;
            _3154 = _3034;
            _3156 = _3036;
            _3158 = _3038;
            _3160 = _3040;
            _3162 = _3042;
        }
        else
        {
            float _3177 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
            float _3178 = _3177 * _2859;
            float _3179 = _3177 * _2860;
            float _3180 = _3177 * _2861;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3049 < ((_3047 >> 12u) & 15u))
            {
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3312 = _3032;
                float _3313 = _3034;
                float _3314 = _3036;
                float _3315 = _3038;
                float _3316 = _3040;
                float _3317 = _3042;
                uint _3318 = _3049;
                uint _3327;
                bool _3328;
                for (;;)
                {
                    _3327 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                    _3328 = _3327 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3328)
                    {
                        frontier_phi_79_pred = _3317;
                        frontier_phi_79_pred_1 = _3316;
                        frontier_phi_79_pred_2 = _3315;
                        frontier_phi_79_pred_3 = _3314;
                        frontier_phi_79_pred_4 = _3313;
                        frontier_phi_79_pred_5 = _3312;
                    }
                    else
                    {
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3534 = _3312;
                        float _3535 = _3313;
                        float _3536 = _3314;
                        float _3537 = _3315;
                        float _3538 = _3316;
                        float _3539 = _3317;
                        uint _3540 = _3327;
                        uint _3541;
                        vec4 _3566;
                        float _3567;
                        vec4 _3582;
                        vec3 _3594;
                        vec4 _3609;
                        vec4 _3624;
                        float _3670;
                        bool _3671;
                        for (;;)
                        {
                            uint _3551 = ((_3318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3540));
                            _3541 = (_3540 + 4294967295u) & _3540;
                            uint _3553 = _3551 * 40u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3567 = _3566.w;
                            uint _3569 = (_3551 * 40u) + 4u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3551 * 40u) + 8u;
                            _3594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x));
                            uint _3596 = (_3551 * 40u) + 16u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3551 * 40u) + 20u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3551 * 40u) + 24u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3645 = (_3551 * 40u) + 28u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3670 = fma(_2861, _3658.z, fma(_2860, _3658.y, _3658.x * _2859)) + _3658.w;
                            _3671 = !((fma(_2861, _3639.z, fma(_2860, _3639.y, _3639.x * _2859)) + _3639.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3671)
                            {
                                float _3698 = _3566.x - _2859;
                                float _3699 = _3566.y - _2860;
                                float _3700 = _3566.z - _2861;
                                float _3701 = dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700));
                                float _3704 = inversesqrt(_3701);
                                float _3705 = _3704 * _3698;
                                float _3706 = _3704 * _3699;
                                float _3707 = _3704 * _3700;
                                float _3711 = 1.0 - (_3701 / (_3567 * _3567));
                                float _4911 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3716 = sqrt(_3701) * _3582.w;
                                float _3718 = 1.39999997615814208984375 / (_3716 + 1.39999997615814208984375);
                                float _3719 = _3718 * _3718;
                                float _3722 = ((1.0 - _3719) * dot(vec3(_3705, _3706, _3707), vec3(_1113, _1116, _1119))) + _3719;
                                float _3725 = _3716 * _3716;
                                float _3729 = (fma(_2861, _3609.z, fma(_2860, _3609.y, _3609.x * _2859)) + _3609.w) / _3670;
                                float _3730 = (fma(_2861, _3624.z, fma(_2860, _3624.y, _3624.x * _2859)) + _3624.w) / _3670;
                                float _3734 = 1.0 - dot(vec2(_3729, _3730), vec2(_3729, _3730));
                                float _4927 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3736 = _3735 * (((isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0))) * _3712) / ((_3725 * 0.699999988079071044921875) + 1.0));
                                float _3748 = exp2(log2(1.0 / ((_3725 * 3.5) + 5.0)) * 0.25);
                                float _3749 = 1.0 - _1172;
                                float _3756 = sqrt(1.0 - ((1.0 - (_3749 * _3749)) * (1.0 - (_3748 * _3748))));
                                float _3757 = _3756 * _3756;
                                float _3758 = _3757 * _3757;
                                float _3759 = _3705 - _3178;
                                float _3760 = _3706 - _3179;
                                float _3761 = _3707 - _3180;
                                float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                                float _3769 = dot(vec3(_1113, _1116, _1119), vec3((-0.0) - _3178, (-0.0) - _3179, (-0.0) - _3180));
                                float _4938 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3773 = dot(vec3(_1113, _1116, _1119), vec3(_3765 * _3759, _3765 * _3760, _3765 * _3761));
                                float _4949 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3780 = ((_3776 * _3776) * (_3758 + (-1.0))) + 1.0;
                                float _3781 = _3718 * _3757;
                                float _3782 = _3781 * _3781;
                                float _3788 = ((1.0 - _3782) * dot(vec3(_1113, _1116, _1119), vec3(_3705, _3706, _3707))) + _3782;
                                float _4960 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3790 = 1.0 - _3757;
                                float _3800 = (0.5 / (((_3789 * ((_3772 * _3790) + _3757)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3757) * _3772))) * _3789;
                                float _4971 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3810 = (_3735 * _3712) * (((_3758 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3780 * _3780) * ((_3725 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3736 * _3582.z;
                                frontier_phi_85_pred_1 = _3736 * _3582.y;
                                frontier_phi_85_pred_2 = _3736 * _3582.x;
                                frontier_phi_85_pred_3 = _3810 * _3594.z;
                                frontier_phi_85_pred_4 = _3810 * _3594.y;
                                frontier_phi_85_pred_5 = _3810 * _3594.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_85_pred;
                            _3818 = frontier_phi_85_pred_1;
                            _3817 = frontier_phi_85_pred_2;
                            _3816 = frontier_phi_85_pred_3;
                            _3815 = frontier_phi_85_pred_4;
                            _3814 = frontier_phi_85_pred_5;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            if (_3541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3541;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3526;
                        frontier_phi_79_pred_1 = _3525;
                        frontier_phi_79_pred_2 = _3524;
                        frontier_phi_79_pred_3 = _3523;
                        frontier_phi_79_pred_4 = _3522;
                        frontier_phi_79_pred_5 = _3521;
                    }
                    _3163 = frontier_phi_79_pred;
                    _3161 = frontier_phi_79_pred_1;
                    _3159 = frontier_phi_79_pred_2;
                    _3157 = frontier_phi_79_pred_3;
                    _3155 = frontier_phi_79_pred_4;
                    _3153 = frontier_phi_79_pred_5;
                    uint _3319 = _3318 + 1u;
                    if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3312 = _3153;
                        _3313 = _3155;
                        _3314 = _3157;
                        _3315 = _3159;
                        _3316 = _3161;
                        _3317 = _3163;
                        _3318 = _3319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3159;
                frontier_phi_60_61_ladder_1 = _3163;
                frontier_phi_60_61_ladder_2 = _3161;
                frontier_phi_60_61_ladder_3 = _3157;
                frontier_phi_60_61_ladder_4 = _3155;
                frontier_phi_60_61_ladder_5 = _3153;
            }
            else
            {
                frontier_phi_60_61_ladder = _3038;
                frontier_phi_60_61_ladder_1 = _3042;
                frontier_phi_60_61_ladder_2 = _3040;
                frontier_phi_60_61_ladder_3 = _3036;
                frontier_phi_60_61_ladder_4 = _3034;
                frontier_phi_60_61_ladder_5 = _3032;
            }
            _3152 = frontier_phi_60_61_ladder_5;
            _3154 = frontier_phi_60_61_ladder_4;
            _3156 = frontier_phi_60_61_ladder_3;
            _3158 = frontier_phi_60_61_ladder;
            _3160 = frontier_phi_60_61_ladder_2;
            _3162 = frontier_phi_60_61_ladder_1;
        }
        float _3167 = isnan(1.0) ? _1156 : (isnan(_1156) ? 1.0 : min(_1156, 1.0));
        _2917 = (_3167 * _3158) + _2370;
        _2919 = (_3167 * _3160) + _2372;
        _2921 = (_3167 * _3162) + _2374;
        _2923 = ((_3152 * 0.039999999105930328369140625) * _3167) + _2703;
        _2925 = ((_3154 * 0.039999999105930328369140625) * _3167) + _2705;
        _2927 = ((_3156 * 0.039999999105930328369140625) * _3167) + _2707;
    }
    else
    {
        _2917 = _2370;
        _2919 = _2372;
        _2921 = _2374;
        _2923 = _2703;
        _2925 = _2705;
        _2927 = _2707;
    }
    uint _2933 = _1132 + uint(cbMatDynParam._m0[0u].w);
    float _4987 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _4998 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _5009 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _5020 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2965 = (((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2917 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1156))) + ((_2923 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1992)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[17u].w * _743) * _1014) * cbInstanceData._m0[_2933].x);
    float _2967 = ((((cbMtdParam._m0[17u].w * _744) * _1014) * cbInstanceData._m0[_2933].y) + ((_2925 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1992)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2919 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1156)));
    float _2969 = ((((cbMtdParam._m0[17u].w * _745) * _1014) * cbInstanceData._m0[_2933].z) + ((_2927 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1992)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2921 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1156)));
    float _2970 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
    float _2971 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
    float _2972 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
    float _2977 = cbInstanceData._m0[_950 + 6u].w * (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)));
    float _2982 = _1094 / cbSceneParam._m0[86u].x;
    float _2983 = _1095 / cbSceneParam._m0[86u].y;
    vec4 _2997 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, (log2((isnan(cbSceneParam._m0[77u].w) ? _1048 : (isnan(_1048) ? cbSceneParam._m0[77u].w : min(_1048, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2999 = _2997.x;
    float _3000 = _2997.y;
    float _3001 = _2997.z;
    float _3002 = _2997.w;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_1048 > cbSceneParam._m0[78u].w)
    {
        float _3057 = isnan(_1048) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1048 : min(cbSceneParam._m0[80u].w, _1048));
        float _3058 = _3057 / _1048;
        float _3069 = _3058 * _1067;
        float _3070 = _1068 * _3058;
        float _3071 = (-0.0) - _3070;
        float _3072 = _3058 * _1069;
        float _3074 = (cbSceneParam._m0[77u].w * _3071) / _3057;
        float _3075 = _3074 + cbSceneParam._m0[79u].w;
        float _3076 = cbSceneParam._m0[79u].w - _3070;
        float _3082 = sqrt(((_3069 * _3069) + (_3070 * _3070)) + (_3072 * _3072));
        float _3085 = (1.0 - (cbSceneParam._m0[77u].w / _3057)) * _3082;
        float _3090 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3092 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3269;
        if (abs((_3071 - _3074) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3269 = ((((_3075 > 0.0) ? exp2(_3090 * _3075) : (2.0 - exp2(_3092 * _3075))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3085;
        }
        else
        {
            float _3213 = 1.0 / cbSceneParam._m0[80u].x;
            float _3214 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : max(_3075, _3076));
            float _3215 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : min(_3075, _3076));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            _3269 = ((abs(_3082 / _3071) * cbSceneParam._m0[80u].y) * ((((_3224 - _3225) * 2.0) - ((exp2(_3090 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0)))) - exp2(_3090 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))))) * _3213)) - ((exp2(_3092 * _3224) - exp2(_3092 * _3225)) * _3213))) + (_3085 * cbSceneParam._m0[80u].z);
        }
        vec4 _3271 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, 1.0), 0.0);
        float _3280 = exp2((_3269 * (-1.44269502162933349609375)) * (1.0 - _3271.w));
        float _3281 = log2(_3280);
        float _3297 = log2(_3002);
        _3094 = (exp2(_3297 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].x)) * _3271.x) / cbSceneParam._m0[78u].x)) + _2999;
        _3096 = (exp2(_3297 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].y)) * _3271.y) / cbSceneParam._m0[78u].y)) + _3000;
        _3098 = (exp2(_3297 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].z)) * _3271.z) / cbSceneParam._m0[78u].z)) + _3001;
        _3100 = _3280 * _3002;
    }
    else
    {
        _3094 = _2999;
        _3096 = _3000;
        _3098 = _3001;
        _3100 = _3002;
    }
    bool _3307;
    vec4 _3110;
    vec4 _3132;
    float _3134;
    float _3138;
    float _3139;
    float _3140;
    float _3141;
    bool _3151;
    for (;;)
    {
        _3110 = cbMatDynParam._m0[0u];
        float _3112 = roundEven(_3110.y);
        bool _3113 = _3112 == 3.0;
        float _3114 = log2(_3100);
        float _3121 = exp2(_3114 * cbSceneParam._m0[78u].x) * _2970;
        float _3122 = exp2(_3114 * cbSceneParam._m0[78u].y) * _2971;
        float _3123 = exp2(_3114 * cbSceneParam._m0[78u].z) * _2972;
        float _3130 = _1083 + (-0.5);
        _3132 = cbMtdParam._m0[1u];
        _3134 = _3132.y * _3130;
        float _3137 = (_3112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3138 = _3137 * (_3113 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3094)));
        _3139 = _3137 * (_3113 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3096)));
        _3140 = _3137 * (_3113 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3098)));
        _3141 = _3130 * 0.999000012874603271484375;
        _3151 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3151)
        {
            if ((cbInstanceData._m0[_950 + 7u].x + _3141) < 0.5)
            {
                _3307 = true;
                break;
            }
        }
        uint _3248 = _1132 + uint(_3110.w);
        if ((cbInstanceData._m0[_3248].w < 1.0) && ((cbInstanceData._m0[_3248].w + _3141) < 0.5))
        {
            _3307 = true;
            break;
        }
        if ((_3134 + 1.0) < _3132.x)
        {
            _3307 = true;
            break;
        }
        _3307 = false;
        break;
    }
    float _3512;
    if (_3307)
    {
        discard_state = true;
        _3512 = 0.0;
    }
    else
    {
        _3512 = _2977;
    }
    SV_Target.x = _3138;
    SV_Target.y = _3139;
    SV_Target.z = _3140;
    SV_Target.w = _3512;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2977;
    discard_exit();
}


