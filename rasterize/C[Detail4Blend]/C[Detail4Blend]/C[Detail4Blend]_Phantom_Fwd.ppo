#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail4Blend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail4Blend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail4Blend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail4Blend_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail4Blend_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail4Blend_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail4Blend_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail4Blend_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail4Blend_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail4Blend_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1245;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _248.z;
    float _254 = _248.w;
    float _260 = exp2(log2(_253 * 22.0) * 260.0);
    float _261 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _261 : (isnan(_261) ? 1.0 : min(_261, 1.0));
    float _268 = exp2(log2(1.0 - _254) * 10.0);
    vec4 _281 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _306 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = cbMtdParam._m0[9u].x * _306.x;
    float _318 = cbMtdParam._m0[9u].y * _306.y;
    float _319 = cbMtdParam._m0[9u].z * _306.z;
    float _326 = (((cbMtdParam._m0[10u].x * _281.x) - _317) * _268) + _317;
    float _327 = (((cbMtdParam._m0[10u].y * _281.y) - _318) * _268) + _318;
    float _328 = (((cbMtdParam._m0[10u].z * _281.z) - _319) * _268) + _319;
    float _331 = exp2(log2(_254) * 10.0);
    vec4 _343 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _378 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _389 = cbMtdParam._m0[12u].x * _378.x;
    float _390 = cbMtdParam._m0[12u].y * _378.y;
    float _391 = cbMtdParam._m0[12u].z * _378.z;
    vec4 _412 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _417 = _412.w;
    float _420 = ((((((((cbMtdParam._m0[11u].x * _343.x) - _326) * _331) + _326) - _389) * _262) + _389) * 4.55000019073486328125) * _412.x;
    float _422 = ((((((((cbMtdParam._m0[11u].y * _343.y) - _327) * _331) + _327) - _390) * _262) + _390) * 4.55000019073486328125) * _412.y;
    float _424 = ((((((((cbMtdParam._m0[11u].z * _343.z) - _328) * _331) + _328) - _391) * _262) + _391) * 4.55000019073486328125) * _412.z;
    vec4 _441 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _463 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _469 = cbMtdParam._m0[13u].x + _463.z;
    float _472 = (((cbMtdParam._m0[13u].y + _441.z) - _469) * _268) + _469;
    vec4 _485 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _509 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _515 = cbMtdParam._m0[13u].z + _509.z;
    float _518 = ((((_253 * 2.0) * ((((_485.z - _472) + cbMtdParam._m0[14u].y) * _331) + _472)) - _515) * _262) + _515;
    float _529 = ((_441.x - _465) * _268) + _465;
    float _530 = ((_441.y - _466) * _268) + _466;
    float _545 = (((((((_485.x - _529) * _331) + _529) - _511) * _262) + _511) * 2.0) + (-1.0);
    float _546 = (((((((_485.y - _530) * _331) + _530) - _512) * _262) + _512) * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3669 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _552 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    float _555 = _545 + (cbMtdParam._m0[13u].w * ((_248.x * 2.0) + (-1.0)));
    float _556 = _546 + (cbMtdParam._m0[13u].w * ((_248.y * 2.0) + (-1.0)));
    float _559 = fma(_552, _232, fma(_556, _224 * TANGENT.x, (_210 * _202) * _555));
    float _562 = fma(_552, _233, fma(_556, _224 * TANGENT.y, (_210 * _203) * _555));
    float _565 = fma(_552, _234, fma(_556, _224 * TANGENT.z, (_210 * _204) * _555));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3680 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _573 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _574 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _575 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _576 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _577 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _578 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _644 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _634);
    float _645 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _634);
    float _646 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _634);
    float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
    float _651 = _644 * _650;
    float _652 = _645 * _650;
    float _653 = _646 * _650;
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _662 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _664 = _662.w;
    float _682 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _685 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _688 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    vec4 _690 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = _690.x;
    float _704 = (((_690.y - _574) + (_690.w * _574)) * cbMtdParam._m0[3u].x) + _574;
    float _721 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_692 * _692)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _729 = (((cbMatDynParam._m0[15u].x - _578) * cbMatDynParam._m0[15u].w) * _721) + _578;
    float _738 = ((_721 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _704)) + _704;
    uint _762 = uint(roundEven(NORMAL.w)) * 13u;
    uint _764 = (_762 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * _575) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * _576) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * _577) * cbInstanceData._m0[_764].z;
    float _3746 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    vec4 _776 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((_781.x - _729) + (_781.w * _729)) * cbMtdParam._m0[3u].x) + _729;
    float _805 = (cbMtdParam._m0[3u].x * (((_773 * _664) - _773) + _776.x)) + _773;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _664) - _774) + _776.y)) + _774;
    float _807 = (cbMtdParam._m0[3u].x * (((_775 * _664) - _775) + _776.z)) + _775;
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _821 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_729 * (_575 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_576 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_577 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _808.z;
    float _825 = _821 * cbMatDynParam._m0[13u].w;
    float _835 = (_825 * (cbMatDynParam._m0[13u].x - _805)) + _805;
    float _836 = (_825 * (cbMatDynParam._m0[13u].y - _806)) + _806;
    float _837 = (_825 * (cbMatDynParam._m0[13u].z - _807)) + _807;
    float _845 = ((_821 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _792)) + _792;
    float _846 = 1.0 - _845;
    float _853 = (_835 + (-0.039999999105930328369140625)) * _845;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _845;
    float _855 = (_837 + (-0.039999999105930328369140625)) * _845;
    float _856 = _853 + 0.039999999105930328369140625;
    float _857 = _854 + 0.039999999105930328369140625;
    float _858 = _855 + 0.039999999105930328369140625;
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _659, cbSceneParam._m0[86u].y * _660));
    float _870 = _867.x * TEXCOORD_4;
    float _871 = dot(vec3(_570, _571, _572), vec3(_651, _652, _653));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _570) - _651;
    float _879 = (_874 * _571) - _652;
    float _880 = (_874 * _572) - _653;
    float _884 = abs(dot(vec3(_651, _652, _653), vec3(_570, _571, _572)));
    float _3779 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_738);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _905 = (1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _906 = _899 * _886;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1244;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _969 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _973 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _977 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1002 = _934 + _570;
        float _1003 = _938 + _571;
        float _1004 = _942 + _572;
        float _1014 = fma(_1004, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002)) - _969;
        float _1015 = fma(_1004, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002)) - _973;
        float _1016 = fma(_1004, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002)) - _977;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_969 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_973 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[34u].z) + ((((((_977 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1072 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1038.x + (-0.5));
        float _1074 = _1072 * (_1038.y + (-0.5));
        float _1075 = _1072 * (_1038.z + (-0.5));
        float _1082 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1045.x + (-0.5));
        float _1084 = _1082 * (_1045.y + (-0.5));
        float _1085 = _1082 * (_1045.z + (-0.5));
        float _1092 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1052.x + (-0.5));
        float _1094 = _1092 * (_1052.y + (-0.5));
        float _1095 = _1092 * (_1052.z + (-0.5));
        float _1102 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1059.x + (-0.5));
        float _1104 = _1102 * (_1059.y + (-0.5));
        float _1105 = _1102 * (_1059.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1126 = (dot(vec3(_570, _571, _572), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1136 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3827 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1138 + 1.0))) + _1143) * _1106;
        float _1153 = _1074 * 0.5;
        float _1154 = _1084 * 0.5;
        float _1155 = _1094 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_570, _571, _572), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3860 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1180 + 1.0))) + _1185) * _1107;
        float _1195 = _1075 * 0.5;
        float _1196 = _1085 * 0.5;
        float _1197 = _1095 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_570, _571, _572), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3893 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1222 + 1.0))) + _1227) * _1108;
        _1244 = _1075;
        _1246 = _1074;
        _1247 = _1073;
        _1248 = _1085;
        _1249 = _1084;
        _1250 = _1083;
        _1251 = _1095;
        _1252 = _1094;
        _1253 = _1093;
        _1254 = _1108;
        _1255 = _1107;
        _1256 = _1106;
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _1245;
        _1246 = _1245;
        _1247 = _1245;
        _1248 = _1245;
        _1249 = _1245;
        _1250 = _1245;
        _1251 = _1245;
        _1252 = _1245;
        _1253 = _1245;
        _1254 = _1245;
        _1255 = _1245;
        _1256 = _1245;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1285 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1289 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1293 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1316 = _934 + _570;
        float _1317 = _938 + _571;
        float _1318 = _942 + _572;
        float _1328 = fma(_1318, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1316)) - _1285;
        float _1329 = fma(_1318, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1316)) - _1289;
        float _1330 = fma(_1318, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1316)) - _1293;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1285 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1289 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[35u].z) + ((((((_1293 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1384 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1351.x + (-0.5));
        float _1386 = _1384 * (_1351.y + (-0.5));
        float _1387 = _1384 * (_1351.z + (-0.5));
        float _1394 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1358.x + (-0.5));
        float _1396 = _1394 * (_1358.y + (-0.5));
        float _1397 = _1394 * (_1358.z + (-0.5));
        float _1404 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1365.x + (-0.5));
        float _1406 = _1404 * (_1365.y + (-0.5));
        float _1407 = _1404 * (_1365.z + (-0.5));
        float _1414 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1372.x + (-0.5));
        float _1416 = _1414 * (_1372.y + (-0.5));
        float _1417 = _1414 * (_1372.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_570, _571, _572), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _3956 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1448 + 1.0))) + _1453) * _1418;
        float _1463 = _1386 * 0.5;
        float _1464 = _1396 * 0.5;
        float _1465 = _1406 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_570, _571, _572), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _3989 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1490 + 1.0))) + _1495) * _1419;
        float _1505 = _1387 * 0.5;
        float _1506 = _1397 * 0.5;
        float _1507 = _1407 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_570, _571, _572), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4022 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1532 + 1.0))) + _1537) * _1420;
        _1554 = _1387;
        _1555 = _1386;
        _1556 = _1385;
        _1557 = _1397;
        _1558 = _1396;
        _1559 = _1395;
        _1560 = _1407;
        _1561 = _1406;
        _1562 = _1405;
        _1563 = _1420;
        _1564 = _1419;
        _1565 = _1418;
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    }
    else
    {
        _1554 = _1245;
        _1555 = _1245;
        _1556 = _1245;
        _1557 = _1245;
        _1558 = _1245;
        _1559 = _1245;
        _1560 = _1245;
        _1561 = _1245;
        _1562 = _1245;
        _1563 = _1245;
        _1564 = _1245;
        _1565 = _1245;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1257)) + _1257;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1601 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1578));
    float _1622 = _878 * 0.5;
    float _1623 = _879 * 0.5;
    float _1624 = _880 * 0.5;
    float _1625 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1628 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1631 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1638 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1244, _1248, _1251, _1254));
        float _1642 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1646 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1653 = dot(vec4(cbModelParam._m0[39u]), vec4(_1622, _1623, _1624, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1622, _1623, _1624, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1749 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1752 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1780 = frontier_phi_16_14_ladder;
        }
        float _1986;
        if (_1749 > 0.0)
        {
            _1986 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1986 = frontier_phi_25_21_ladder;
        }
        float _2240;
        if (_1752 > 0.0)
        {
            _2240 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2240 = frontier_phi_37_32_ladder;
        }
        float _2242 = isnan(_1986) ? _1780 : (isnan(_1780) ? _1986 : min(_1780, _1986));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1746) + _1735;
        float _2248 = (_2243 * _1749) + _1739;
        float _2249 = (_2243 * _1752) + _1743;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_15_37_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_15_37_ladder_2;
        _1770 = frontier_phi_15_37_ladder_1;
        _1772 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1848 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1851 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _1991;
        if (_1845 > 0.0)
        {
            _1991 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1991 = frontier_phi_27_23_ladder;
        }
        float _2267;
        if (_1848 > 0.0)
        {
            _2267 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2267 = frontier_phi_39_34_ladder;
        }
        float _2480;
        if (_1851 > 0.0)
        {
            _2480 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2480 = frontier_phi_48_45_ladder;
        }
        float _2482 = isnan(_2267) ? _1991 : (isnan(_1991) ? _2267 : min(_1991, _2267));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1845) + _1834;
        float _2488 = (_2483 * _1848) + _1838;
        float _2489 = (_2483 * _1851) + _1842;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_24_48_ladder = _2773.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2773.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2773.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_24_48_ladder_2;
        _1872 = frontier_phi_24_48_ladder_1;
        _1874 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1777);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1887 = (((_905 * _856) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1870 - _1768)) + _1768);
    float _1889 = (((_905 * _857) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1872 - _1770)) + _1770);
    float _1891 = (((_905 * _858) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1874 - _1772)) + _1772);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_762 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1920 = _870 + (-1.0);
    float _1925 = (cbLight._m0[_1913].x * _1920) + 1.0;
    float _1926 = (cbLight._m0[_1913].y * _1920) + 1.0;
    float _1927 = (cbLight._m0[_1913].z * _1920) + 1.0;
    float _1928 = (cbLight._m0[_1913].w * _1920) + 1.0;
    uint _1929 = _1912 + 5u;
    float _1935 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1939 = _1912 + 4u;
    float _1945 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1949 = _1912 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_570, _571, _572));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_570, _571, _572));
    float _4158 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _4169 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1929].x * _1935) * _1970) + ((cbLight._m0[_1939].x * _1945) * _1968);
    float _1978 = ((_1935 * cbLight._m0[_1929].y) * _1970) + ((_1945 * cbLight._m0[_1939].y) * _1968);
    float _1979 = ((_1935 * cbLight._m0[_1929].z) * _1970) + ((_1945 * cbLight._m0[_1939].z) * _1968);
    uvec4 _1983 = floatBitsToUint(cbLight._m0[_1912 + 12u]);
    bool _1985 = _1983.x == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1985)
    {
        _1996 = _1977;
        _1998 = _1978;
        _2000 = _1979;
    }
    else
    {
        uint _2004 = _1912 + 6u;
        float _2020 = (dot(vec3(cbLight._m0[_1912 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _4180 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2023 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _1996 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1977;
        _1998 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1978;
        _2000 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1979;
    }
    bool _2003 = _1983.y == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2003)
    {
        _2041 = _1996;
        _2043 = _1998;
        _2045 = _2000;
    }
    else
    {
        uint _2211 = _1912 + 7u;
        float _2227 = (dot(vec3(cbLight._m0[_1912 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4196 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2230 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2041 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _1996;
        _2043 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _1998;
        _2045 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _2000;
    }
    uint _2048 = _1912 + 8u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _738) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1912].x + _651;
    float _2064 = cbLight._m0[_1912].y + _652;
    float _2065 = cbLight._m0[_1912].z + _653;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1912].xyz));
    float _4212 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2077 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2078 = dot(vec3(_570, _571, _572), vec3(_2070, _2071, _2072));
    float _4234 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2070, _2071, _2072));
    float _4245 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2062 * _2062;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
    float _2099 = 0.959999978542327880859375 - _853;
    float _2101 = 0.959999978542327880859375 - _854;
    float _2102 = 0.959999978542327880859375 - _855;
    float _2109 = 1.0 - _2062;
    float _2120 = (0.5 / (((_2077 * ((_2076 * _2109) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2109) + _2062) * _2076))) * _2076;
    float _4256 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    uint _2133 = _1912 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _738) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1949].x + _651;
    float _2147 = cbLight._m0[_1949].y + _652;
    float _2148 = cbLight._m0[_1949].z + _653;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1949].xyz));
    float _4267 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2160 = dot(vec3(_570, _571, _572), vec3(_2153, _2154, _2155));
    float _4278 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2153, _2154, _2155));
    float _4289 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2186 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2077 * ((_2159 * _2186) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2186) + _2145) * _2159))) * _2159;
    float _4300 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2208 = (((((_2179 * _2099) + _856) * cbLight._m0[_2133].x) * _2198) * _1935) + (((((_2098 * _2099) + _856) * cbLight._m0[_2048].x) * _2122) * _1945);
    float _2209 = (((((_2179 * _2101) + _857) * cbLight._m0[_2133].y) * _2198) * _1935) + (((((_2098 * _2101) + _857) * cbLight._m0[_2048].y) * _2122) * _1945);
    float _2210 = (((((_2179 * _2102) + _858) * cbLight._m0[_2133].z) * _2198) * _1935) + (((((_2098 * _2102) + _858) * cbLight._m0[_2048].z) * _2122) * _1945);
    float _2272;
    float _2274;
    float _2276;
    if (_1985)
    {
        _2272 = _2208;
        _2274 = _2209;
        _2276 = _2210;
    }
    else
    {
        uint _2278 = _1912 + 2u;
        uint _2282 = _1912 + 10u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _738) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _651;
        float _2299 = cbLight._m0[_2278].y + _652;
        float _2300 = cbLight._m0[_2278].z + _653;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2278].xyz));
        float _4311 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2312 = dot(vec3(_570, _571, _572), vec3(_2305, _2306, _2307));
        float _4322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4333 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
        float _2338 = 1.0 - _2297;
        float _2348 = (0.5 / (((_2077 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2338) + _2297) * _2311))) * _2311;
        float _4344 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2272 = (((((_2331 * _2099) + _856) * cbLight._m0[_2282].x) * _2350) * _2351) + _2208;
        _2274 = (((((_2331 * _2101) + _857) * cbLight._m0[_2282].y) * _2350) * _2351) + _2209;
        _2276 = (((((_2331 * _2102) + _858) * cbLight._m0[_2282].z) * _2350) * _2351) + _2210;
    }
    float _2386;
    float _2388;
    float _2390;
    if (_2003)
    {
        _2386 = _2272;
        _2388 = _2274;
        _2390 = _2276;
    }
    else
    {
        uint _2397 = _1912 + 3u;
        uint _2401 = _1912 + 11u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _738) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _651;
        float _2418 = cbLight._m0[_2397].y + _652;
        float _2419 = cbLight._m0[_2397].z + _653;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2397].xyz));
        float _4360 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2431 = dot(vec3(_570, _571, _572), vec3(_2424, _2425, _2426));
        float _4371 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4382 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2077 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2457) + _2416) * _2430))) * _2430;
        float _4393 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2386 = (((((_2450 * _2099) + _856) * cbLight._m0[_2401].x) * _2469) * _2470) + _2272;
        _2388 = (((((_2450 * _2101) + _857) * cbLight._m0[_2401].y) * _2469) * _2470) + _2274;
        _2390 = (((((_2450 * _2102) + _858) * cbLight._m0[_2401].z) * _2469) * _2470) + _2276;
    }
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_1910.y == 0u)
    {
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2545;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2545;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2545;
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.x;
        uint _2572 = uint((float(_2560.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _2561))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _2561)));
        float _2582 = (log2(_2548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        uint _2586 = uint(isnan(14.0) ? _2583 : (isnan(_2583) ? 14.0 : min(_2583, 14.0)));
        uvec4 _2591 = texelFetch(g_lightClusterGridBuffer, int(((_2586 << 2u) + (_2572 << 6u)) >> 2u));
        uint _2592 = _2591.x;
        uint _2593 = _2560.z;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((((1u << ((_2593 >> 4u) & 15u)) + 4294967295u) & _2592) == 0u) || ((_2593 & 240u) == 0u))
        {
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
        }
        else
        {
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            uint _2928 = 0u;
            uint _2937;
            bool _2938;
            for (;;)
            {
                _2937 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2928 << 2u)) >> 2u)).x;
                _2938 = _2937 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2938)
                {
                    frontier_phi_63_pred = _2927;
                    frontier_phi_63_pred_1 = _2926;
                    frontier_phi_63_pred_2 = _2925;
                    frontier_phi_63_pred_3 = _2924;
                    frontier_phi_63_pred_4 = _2923;
                    frontier_phi_63_pred_5 = _2922;
                }
                else
                {
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    uint _3052;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2937;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    for (;;)
                    {
                        uint _3056 = uint(findLSB(_3052)) + (_2928 << 5u);
                        uint _3053 = (_3052 + 4294967295u) & _3052;
                        uint _3058 = _3056 * 48u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3078 = (_3056 * 48u) + 4u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3097 = (_3056 * 48u) + 8u;
                        vec3 _3108 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x));
                        float _3112 = _3072.x - _2546;
                        float _3113 = _3072.y - _2547;
                        float _3114 = _3072.z - _2548;
                        float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                        float _3118 = inversesqrt(_3115);
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3122 = dot(vec3(_682, _685, _688), vec3(_3119, _3120, _3121));
                        float _3127 = 1.0 - (_3115 * _3072.w);
                        float _4419 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3129 = sqrt(_3115) * _3091.w;
                        float _3132 = 1.39999997615814208984375 / (_3129 + 1.39999997615814208984375);
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3122) + _3133;
                        float _3139 = _3129 * _3129;
                        float _3142 = ((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3128) / ((_3139 * 0.699999988079071044921875) + 1.0);
                        float _3146 = (-0.0) - _2546;
                        float _3147 = (-0.0) - _2547;
                        float _3148 = (-0.0) - _2548;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3163 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                        float _3164 = 1.0 - _886;
                        float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                        float _3172 = _3171 * _3171;
                        float _3173 = _3172 * _3172;
                        float _3174 = _3153 + _3119;
                        float _3175 = _3154 + _3120;
                        float _3176 = _3155 + _3121;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3184 = dot(vec3(_682, _685, _688), vec3(_3153, _3154, _3155));
                        float _4435 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3188 = dot(vec3(_682, _685, _688), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                        float _4446 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                        float _3196 = _3132 * _3172;
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3122) + _3197;
                        float _4457 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3202 = 1.0 - _3172;
                        float _3212 = (0.5 / (((_3201 * ((_3187 * _3202) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3172) * _3187))) * _3201;
                        float _4468 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3223 = (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3195 * _3195) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125))) * _3128;
                        _2981 = (_3142 * _3091.x) + _3049;
                        _2982 = (_3142 * _3091.y) + _3050;
                        _2983 = (_3142 * _3091.z) + _3051;
                        _2978 = (_3223 * _3108.x) + _3046;
                        _2979 = (_3223 * _3108.y) + _3047;
                        _2980 = (_3223 * _3108.z) + _3048;
                        if (_3053 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _3053;
                        }
                    }
                    frontier_phi_63_pred = _2983;
                    frontier_phi_63_pred_1 = _2982;
                    frontier_phi_63_pred_2 = _2981;
                    frontier_phi_63_pred_3 = _2980;
                    frontier_phi_63_pred_4 = _2979;
                    frontier_phi_63_pred_5 = _2978;
                }
                _2789 = frontier_phi_63_pred;
                _2787 = frontier_phi_63_pred_1;
                _2785 = frontier_phi_63_pred_2;
                _2783 = frontier_phi_63_pred_3;
                _2781 = frontier_phi_63_pred_4;
                _2779 = frontier_phi_63_pred_5;
                uint _2929 = _2928 + 1u;
                if (_2929 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2922 = _2779;
                    _2923 = _2781;
                    _2924 = _2783;
                    _2925 = _2785;
                    _2926 = _2787;
                    _2927 = _2789;
                    _2928 = _2929;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
        }
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.z;
        uint _2795 = (_2793 >> 8u) & 15u;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        if (((4294967295u << _2795) & _2592) == 0u)
        {
            _2890 = _2778;
            _2892 = _2780;
            _2894 = _2782;
            _2896 = _2784;
            _2898 = _2786;
            _2900 = _2788;
        }
        else
        {
            float _2915 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
            float _2916 = _2915 * _2546;
            float _2917 = _2915 * _2547;
            float _2918 = _2915 * _2548;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2795 < ((_2793 >> 12u) & 15u))
            {
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _3029 = _2778;
                float _3030 = _2780;
                float _3031 = _2782;
                float _3032 = _2784;
                float _3033 = _2786;
                float _3034 = _2788;
                uint _3035 = _2795;
                uint _3044;
                bool _3045;
                for (;;)
                {
                    _3044 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                    _3045 = _3044 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3045)
                    {
                        frontier_phi_69_pred = _3034;
                        frontier_phi_69_pred_1 = _3033;
                        frontier_phi_69_pred_2 = _3032;
                        frontier_phi_69_pred_3 = _3031;
                        frontier_phi_69_pred_4 = _3030;
                        frontier_phi_69_pred_5 = _3029;
                    }
                    else
                    {
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3241 = _3029;
                        float _3242 = _3030;
                        float _3243 = _3031;
                        float _3244 = _3032;
                        float _3245 = _3033;
                        float _3246 = _3034;
                        uint _3247 = _3044;
                        uint _3248;
                        vec4 _3273;
                        float _3274;
                        vec4 _3289;
                        vec3 _3301;
                        vec4 _3316;
                        vec4 _3332;
                        float _3379;
                        bool _3380;
                        for (;;)
                        {
                            uint _3258 = ((_3035 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3247));
                            _3248 = (_3247 + 4294967295u) & _3247;
                            uint _3260 = _3258 * 40u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3274 = _3273.w;
                            uint _3276 = (_3258 * 40u) + 4u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3258 * 40u) + 8u;
                            _3301 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x));
                            uint _3303 = (_3258 * 40u) + 16u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3319 = (_3258 * 40u) + 20u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3258 * 40u) + 24u;
                            vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3354 = (_3258 * 40u) + 28u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3379 = fma(_2548, _3367.z, fma(_2547, _3367.y, _3367.x * _2546)) + _3367.w;
                            _3380 = !((fma(_2548, _3348.z, fma(_2547, _3348.y, _3348.x * _2546)) + _3348.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3380)
                            {
                                float _3407 = _3273.x - _2546;
                                float _3408 = _3273.y - _2547;
                                float _3409 = _3273.z - _2548;
                                float _3410 = dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409));
                                float _3413 = inversesqrt(_3410);
                                float _3414 = _3413 * _3407;
                                float _3415 = _3413 * _3408;
                                float _3416 = _3413 * _3409;
                                float _3420 = 1.0 - (_3410 / (_3274 * _3274));
                                float _4479 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3425 = sqrt(_3410) * _3289.w;
                                float _3427 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                                float _3428 = _3427 * _3427;
                                float _3431 = ((1.0 - _3428) * dot(vec3(_3414, _3415, _3416), vec3(_682, _685, _688))) + _3428;
                                float _3434 = _3425 * _3425;
                                float _3438 = (fma(_2548, _3316.z, fma(_2547, _3316.y, _3316.x * _2546)) + _3316.w) / _3379;
                                float _3439 = (fma(_2548, _3332.z, fma(_2547, _3332.y, _3332.x * _2546)) + _3332.w) / _3379;
                                float _3443 = 1.0 - dot(vec2(_3438, _3439), vec2(_3438, _3439));
                                float _4495 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3445 = _3444 * (((isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))) * _3421) / ((_3434 * 0.699999988079071044921875) + 1.0));
                                float _3457 = exp2(log2(1.0 / ((_3434 * 3.5) + 5.0)) * 0.25);
                                float _3458 = 1.0 - _886;
                                float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                                float _3466 = _3465 * _3465;
                                float _3467 = _3466 * _3466;
                                float _3468 = _3414 - _2916;
                                float _3469 = _3415 - _2917;
                                float _3470 = _3416 - _2918;
                                float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                                float _3478 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2916, (-0.0) - _2917, (-0.0) - _2918));
                                float _4506 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3482 = dot(vec3(_682, _685, _688), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                                float _4517 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                                float _3490 = _3427 * _3466;
                                float _3491 = _3490 * _3490;
                                float _3497 = ((1.0 - _3491) * dot(vec3(_682, _685, _688), vec3(_3414, _3415, _3416))) + _3491;
                                float _4528 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3499 = 1.0 - _3466;
                                float _3509 = (0.5 / (((_3498 * ((_3481 * _3499) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3466) * _3481))) * _3498;
                                float _4539 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3519 = (_3444 * _3421) * (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3489 * _3489) * ((_3434 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3445 * _3289.z;
                                frontier_phi_75_pred_1 = _3445 * _3289.y;
                                frontier_phi_75_pred_2 = _3445 * _3289.x;
                                frontier_phi_75_pred_3 = _3519 * _3301.z;
                                frontier_phi_75_pred_4 = _3519 * _3301.y;
                                frontier_phi_75_pred_5 = _3519 * _3301.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3528 = frontier_phi_75_pred;
                            _3527 = frontier_phi_75_pred_1;
                            _3526 = frontier_phi_75_pred_2;
                            _3525 = frontier_phi_75_pred_3;
                            _3524 = frontier_phi_75_pred_4;
                            _3523 = frontier_phi_75_pred_5;
                            _3231 = _3526 + _3244;
                            _3232 = _3527 + _3245;
                            _3233 = _3528 + _3246;
                            _3228 = _3523 + _3241;
                            _3229 = _3524 + _3242;
                            _3230 = _3525 + _3243;
                            if (_3248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3248;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3233;
                        frontier_phi_69_pred_1 = _3232;
                        frontier_phi_69_pred_2 = _3231;
                        frontier_phi_69_pred_3 = _3230;
                        frontier_phi_69_pred_4 = _3229;
                        frontier_phi_69_pred_5 = _3228;
                    }
                    _2901 = frontier_phi_69_pred;
                    _2899 = frontier_phi_69_pred_1;
                    _2897 = frontier_phi_69_pred_2;
                    _2895 = frontier_phi_69_pred_3;
                    _2893 = frontier_phi_69_pred_4;
                    _2891 = frontier_phi_69_pred_5;
                    uint _3036 = _3035 + 1u;
                    if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3029 = _2891;
                        _3030 = _2893;
                        _3031 = _2895;
                        _3032 = _2897;
                        _3033 = _2899;
                        _3034 = _2901;
                        _3035 = _3036;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2901;
                frontier_phi_57_58_ladder_1 = _2899;
                frontier_phi_57_58_ladder_2 = _2897;
                frontier_phi_57_58_ladder_3 = _2895;
                frontier_phi_57_58_ladder_4 = _2893;
                frontier_phi_57_58_ladder_5 = _2891;
            }
            else
            {
                frontier_phi_57_58_ladder = _2788;
                frontier_phi_57_58_ladder_1 = _2786;
                frontier_phi_57_58_ladder_2 = _2784;
                frontier_phi_57_58_ladder_3 = _2782;
                frontier_phi_57_58_ladder_4 = _2780;
                frontier_phi_57_58_ladder_5 = _2778;
            }
            _2890 = frontier_phi_57_58_ladder_5;
            _2892 = frontier_phi_57_58_ladder_4;
            _2894 = frontier_phi_57_58_ladder_3;
            _2896 = frontier_phi_57_58_ladder_2;
            _2898 = frontier_phi_57_58_ladder_1;
            _2900 = frontier_phi_57_58_ladder;
        }
        float _2905 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2604 = (_2905 * _2896) + _2041;
        _2606 = (_2905 * _2898) + _2043;
        _2608 = (_2905 * _2900) + _2045;
        _2610 = ((_2890 * _856) * _2905) + _2386;
        _2612 = ((_2892 * _857) * _2905) + _2388;
        _2614 = ((_2894 * _858) * _2905) + _2390;
    }
    else
    {
        _2604 = _2041;
        _2606 = _2043;
        _2608 = _2045;
        _2610 = _2386;
        _2612 = _2388;
        _2614 = _2390;
    }
    float _2621 = (_846 * _835) * cbMatDynParam._m0[9u].x;
    float _2622 = (_846 * _836) * cbMatDynParam._m0[9u].y;
    float _2623 = (_846 * _837) * cbMatDynParam._m0[9u].z;
    float _2634 = dot(vec3(_570, _571, _572), vec3(0.0, -1.0, 0.0));
    float _4555 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2641 = dot(vec3(_878, _879, _880), vec3(0.0, -1.0, 0.0));
    float _4566 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2647 = exp2(log2(isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * 4.0);
    float _4577 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _4588 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _4599 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _4610 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _2692 = abs(exp2(log2(_871) * cbMatDynParam._m0[12u].x));
    float _2693 = isnan(0.100000001490116119384765625) ? _2692 : (isnan(_2692) ? 0.100000001490116119384765625 : max(_2692, 0.100000001490116119384765625));
    float _2699 = ((isnan(0.699999988079071044921875) ? _2693 : (isnan(_2693) ? 0.699999988079071044921875 : min(_2693, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _2709 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_2610 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1677)) + (_2647 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * ((_2604 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _870)) + (_2637 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_2699 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _2712 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_2612 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1677)) + (_2647 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * ((_2606 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _870)) + (_2637 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_2699 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _2715 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_2614 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1677)) + (_2647 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * ((_2608 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _870)) + (_2637 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_2699 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    float _2723 = cbInstanceData._m0[_762 + 6u].w * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)));
    float _2728 = _659 / cbSceneParam._m0[86u].x;
    float _2729 = _660 / cbSceneParam._m0[86u].y;
    vec4 _2743 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2745 = _2743.x;
    float _2746 = _2743.y;
    float _2747 = _2743.z;
    float _2748 = _2743.w;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2803 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2804 = _2803 / _594;
        float _2815 = _2804 * _644;
        float _2816 = _645 * _2804;
        float _2817 = (-0.0) - _2816;
        float _2818 = _2804 * _646;
        float _2820 = (cbSceneParam._m0[77u].w * _2817) / _2803;
        float _2821 = _2820 + cbSceneParam._m0[79u].w;
        float _2822 = cbSceneParam._m0[79u].w - _2816;
        float _2828 = sqrt(((_2815 * _2815) + (_2816 * _2816)) + (_2818 * _2818));
        float _2831 = (1.0 - (cbSceneParam._m0[77u].w / _2803)) * _2828;
        float _2836 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2838 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2991;
        if (abs((_2817 - _2820) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2991 = ((((_2821 > 0.0) ? exp2(_2836 * _2821) : (2.0 - exp2(_2838 * _2821))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2831;
        }
        else
        {
            float _2951 = 1.0 / cbSceneParam._m0[80u].x;
            float _2952 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : max(_2821, _2822));
            float _2953 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : min(_2821, _2822));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            _2991 = ((abs(_2828 / _2817) * cbSceneParam._m0[80u].y) * ((((_2962 - _2963) * 2.0) - ((exp2(_2836 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0)))) - exp2(_2836 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))))) * _2951)) - ((exp2(_2838 * _2962) - exp2(_2838 * _2963)) * _2951))) + (_2831 * cbSceneParam._m0[80u].z);
        }
        vec4 _2993 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, 1.0), 0.0);
        float _3002 = exp2((_2991 * (-1.44269502162933349609375)) * (1.0 - _2993.w));
        float _3003 = log2(_3002);
        float _3019 = log2(_2748);
        _2840 = (exp2(_3019 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].x)) * _2993.x) / cbSceneParam._m0[78u].x)) + _2745;
        _2842 = (exp2(_3019 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].y)) * _2993.y) / cbSceneParam._m0[78u].y)) + _2746;
        _2844 = (exp2(_3019 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].z)) * _2993.z) / cbSceneParam._m0[78u].z)) + _2747;
        _2846 = _3002 * _2748;
    }
    else
    {
        _2840 = _2745;
        _2842 = _2746;
        _2844 = _2747;
        _2846 = _2748;
    }
    float _2858 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2859 = _2858 == 3.0;
    float _2860 = log2(_2846);
    float _2867 = exp2(_2860 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0)));
    float _2868 = exp2(_2860 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0)));
    float _2869 = exp2(_2860 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0)));
    float _2878 = (_2858 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2878 * (_2859 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.y = _2878 * (_2859 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2842)));
    SV_Target.z = _2878 * (_2859 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.w = _2723;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2723;
}


