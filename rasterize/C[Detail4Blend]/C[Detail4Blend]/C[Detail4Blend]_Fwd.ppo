#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail4Blend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail4Blend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail4Blend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail4Blend_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail4Blend_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail4Blend_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail4Blend_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail4Blend_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail4Blend_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail4Blend_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1245;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _248.z;
    float _254 = _248.w;
    float _260 = exp2(log2(_253 * 22.0) * 260.0);
    float _261 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _261 : (isnan(_261) ? 1.0 : min(_261, 1.0));
    float _268 = exp2(log2(1.0 - _254) * 10.0);
    vec4 _281 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _306 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = cbMtdParam._m0[9u].x * _306.x;
    float _318 = cbMtdParam._m0[9u].y * _306.y;
    float _319 = cbMtdParam._m0[9u].z * _306.z;
    float _326 = (((cbMtdParam._m0[10u].x * _281.x) - _317) * _268) + _317;
    float _327 = (((cbMtdParam._m0[10u].y * _281.y) - _318) * _268) + _318;
    float _328 = (((cbMtdParam._m0[10u].z * _281.z) - _319) * _268) + _319;
    float _331 = exp2(log2(_254) * 10.0);
    vec4 _343 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _378 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _389 = cbMtdParam._m0[12u].x * _378.x;
    float _390 = cbMtdParam._m0[12u].y * _378.y;
    float _391 = cbMtdParam._m0[12u].z * _378.z;
    vec4 _412 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _417 = _412.w;
    float _420 = ((((((((cbMtdParam._m0[11u].x * _343.x) - _326) * _331) + _326) - _389) * _262) + _389) * 4.55000019073486328125) * _412.x;
    float _422 = ((((((((cbMtdParam._m0[11u].y * _343.y) - _327) * _331) + _327) - _390) * _262) + _390) * 4.55000019073486328125) * _412.y;
    float _424 = ((((((((cbMtdParam._m0[11u].z * _343.z) - _328) * _331) + _328) - _391) * _262) + _391) * 4.55000019073486328125) * _412.z;
    vec4 _441 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _463 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _469 = cbMtdParam._m0[13u].x + _463.z;
    float _472 = (((cbMtdParam._m0[13u].y + _441.z) - _469) * _268) + _469;
    vec4 _485 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _509 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _515 = cbMtdParam._m0[13u].z + _509.z;
    float _518 = ((((_253 * 2.0) * ((((_485.z - _472) + cbMtdParam._m0[14u].y) * _331) + _472)) - _515) * _262) + _515;
    float _529 = ((_441.x - _465) * _268) + _465;
    float _530 = ((_441.y - _466) * _268) + _466;
    float _545 = (((((((_485.x - _529) * _331) + _529) - _511) * _262) + _511) * 2.0) + (-1.0);
    float _546 = (((((((_485.y - _530) * _331) + _530) - _512) * _262) + _512) * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3586 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _552 = sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))));
    float _555 = _545 + (cbMtdParam._m0[13u].w * ((_248.x * 2.0) + (-1.0)));
    float _556 = _546 + (cbMtdParam._m0[13u].w * ((_248.y * 2.0) + (-1.0)));
    float _559 = fma(_552, _232, fma(_556, _224 * TANGENT.x, (_210 * _202) * _555));
    float _562 = fma(_552, _233, fma(_556, _224 * TANGENT.y, (_210 * _203) * _555));
    float _565 = fma(_552, _234, fma(_556, _224 * TANGENT.z, (_210 * _204) * _555));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3597 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _573 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _574 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _575 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _576 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _577 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _578 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _644 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _634);
    float _645 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _634);
    float _646 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _634);
    float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
    float _651 = _644 * _650;
    float _652 = _645 * _650;
    float _653 = _646 * _650;
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _662 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _664 = _662.w;
    float _682 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _685 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _688 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    vec4 _690 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = _690.x;
    float _704 = (((_690.y - _574) + (_690.w * _574)) * cbMtdParam._m0[3u].x) + _574;
    float _721 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_692 * _692)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _729 = (((cbMatDynParam._m0[15u].x - _578) * cbMatDynParam._m0[15u].w) * _721) + _578;
    float _738 = ((_721 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _704)) + _704;
    uint _762 = uint(roundEven(NORMAL.w)) * 13u;
    uint _764 = (_762 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * _575) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * _576) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * _577) * cbInstanceData._m0[_764].z;
    float _3663 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    vec4 _776 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((_781.x - _729) + (_781.w * _729)) * cbMtdParam._m0[3u].x) + _729;
    float _805 = (cbMtdParam._m0[3u].x * (((_773 * _664) - _773) + _776.x)) + _773;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _664) - _774) + _776.y)) + _774;
    float _807 = (cbMtdParam._m0[3u].x * (((_775 * _664) - _775) + _776.z)) + _775;
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _821 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_729 * (_575 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_576 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_577 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _808.z;
    float _825 = _821 * cbMatDynParam._m0[13u].w;
    float _835 = (_825 * (cbMatDynParam._m0[13u].x - _805)) + _805;
    float _836 = (_825 * (cbMatDynParam._m0[13u].y - _806)) + _806;
    float _837 = (_825 * (cbMatDynParam._m0[13u].z - _807)) + _807;
    float _845 = ((_821 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _792)) + _792;
    float _846 = 1.0 - _845;
    float _847 = _846 * _835;
    float _848 = _846 * _836;
    float _849 = _846 * _837;
    float _853 = (_835 + (-0.039999999105930328369140625)) * _845;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _845;
    float _855 = (_837 + (-0.039999999105930328369140625)) * _845;
    float _856 = _853 + 0.039999999105930328369140625;
    float _857 = _854 + 0.039999999105930328369140625;
    float _858 = _855 + 0.039999999105930328369140625;
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _659, cbSceneParam._m0[86u].y * _660));
    float _870 = _867.x * TEXCOORD_4;
    float _871 = dot(vec3(_570, _571, _572), vec3(_651, _652, _653));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _570) - _651;
    float _879 = (_874 * _571) - _652;
    float _880 = (_874 * _572) - _653;
    float _884 = abs(dot(vec3(_651, _652, _653), vec3(_570, _571, _572)));
    float _3696 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_738);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _905 = (1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _906 = _899 * _886;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1244;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _969 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _973 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _977 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1002 = _934 + _570;
        float _1003 = _938 + _571;
        float _1004 = _942 + _572;
        float _1014 = fma(_1004, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002)) - _969;
        float _1015 = fma(_1004, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002)) - _973;
        float _1016 = fma(_1004, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002)) - _977;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_969 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_973 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[34u].z) + ((((((_977 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1072 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1038.x + (-0.5));
        float _1074 = _1072 * (_1038.y + (-0.5));
        float _1075 = _1072 * (_1038.z + (-0.5));
        float _1082 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1045.x + (-0.5));
        float _1084 = _1082 * (_1045.y + (-0.5));
        float _1085 = _1082 * (_1045.z + (-0.5));
        float _1092 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1052.x + (-0.5));
        float _1094 = _1092 * (_1052.y + (-0.5));
        float _1095 = _1092 * (_1052.z + (-0.5));
        float _1102 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1059.x + (-0.5));
        float _1104 = _1102 * (_1059.y + (-0.5));
        float _1105 = _1102 * (_1059.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1126 = (dot(vec3(_570, _571, _572), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1136 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3744 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1138 + 1.0))) + _1143) * _1106;
        float _1153 = _1074 * 0.5;
        float _1154 = _1084 * 0.5;
        float _1155 = _1094 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_570, _571, _572), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3777 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1180 + 1.0))) + _1185) * _1107;
        float _1195 = _1075 * 0.5;
        float _1196 = _1085 * 0.5;
        float _1197 = _1095 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_570, _571, _572), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3810 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1222 + 1.0))) + _1227) * _1108;
        _1244 = _1075;
        _1246 = _1074;
        _1247 = _1073;
        _1248 = _1085;
        _1249 = _1084;
        _1250 = _1083;
        _1251 = _1095;
        _1252 = _1094;
        _1253 = _1093;
        _1254 = _1108;
        _1255 = _1107;
        _1256 = _1106;
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _1245;
        _1246 = _1245;
        _1247 = _1245;
        _1248 = _1245;
        _1249 = _1245;
        _1250 = _1245;
        _1251 = _1245;
        _1252 = _1245;
        _1253 = _1245;
        _1254 = _1245;
        _1255 = _1245;
        _1256 = _1245;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1285 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1289 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1293 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1316 = _934 + _570;
        float _1317 = _938 + _571;
        float _1318 = _942 + _572;
        float _1328 = fma(_1318, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1316)) - _1285;
        float _1329 = fma(_1318, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1316)) - _1289;
        float _1330 = fma(_1318, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1316)) - _1293;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1285 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1289 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[35u].z) + ((((((_1293 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1384 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1351.x + (-0.5));
        float _1386 = _1384 * (_1351.y + (-0.5));
        float _1387 = _1384 * (_1351.z + (-0.5));
        float _1394 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1358.x + (-0.5));
        float _1396 = _1394 * (_1358.y + (-0.5));
        float _1397 = _1394 * (_1358.z + (-0.5));
        float _1404 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1365.x + (-0.5));
        float _1406 = _1404 * (_1365.y + (-0.5));
        float _1407 = _1404 * (_1365.z + (-0.5));
        float _1414 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1372.x + (-0.5));
        float _1416 = _1414 * (_1372.y + (-0.5));
        float _1417 = _1414 * (_1372.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_570, _571, _572), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _3873 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1448 + 1.0))) + _1453) * _1418;
        float _1463 = _1386 * 0.5;
        float _1464 = _1396 * 0.5;
        float _1465 = _1406 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_570, _571, _572), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _3906 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1490 + 1.0))) + _1495) * _1419;
        float _1505 = _1387 * 0.5;
        float _1506 = _1397 * 0.5;
        float _1507 = _1407 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_570, _571, _572), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _3939 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1532 + 1.0))) + _1537) * _1420;
        _1554 = _1387;
        _1555 = _1386;
        _1556 = _1385;
        _1557 = _1397;
        _1558 = _1396;
        _1559 = _1395;
        _1560 = _1407;
        _1561 = _1406;
        _1562 = _1405;
        _1563 = _1420;
        _1564 = _1419;
        _1565 = _1418;
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    }
    else
    {
        _1554 = _1245;
        _1555 = _1245;
        _1556 = _1245;
        _1557 = _1245;
        _1558 = _1245;
        _1559 = _1245;
        _1560 = _1245;
        _1561 = _1245;
        _1562 = _1245;
        _1563 = _1245;
        _1564 = _1245;
        _1565 = _1245;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1257)) + _1257;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1601 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1578));
    float _1622 = _878 * 0.5;
    float _1623 = _879 * 0.5;
    float _1624 = _880 * 0.5;
    float _1625 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1628 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1631 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1638 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1244, _1248, _1251, _1254));
        float _1642 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1646 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1653 = dot(vec4(cbModelParam._m0[39u]), vec4(_1622, _1623, _1624, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1622, _1623, _1624, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1749 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1752 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1780 = frontier_phi_16_14_ladder;
        }
        float _1986;
        if (_1749 > 0.0)
        {
            _1986 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1986 = frontier_phi_25_21_ladder;
        }
        float _2240;
        if (_1752 > 0.0)
        {
            _2240 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2240 = frontier_phi_37_32_ladder;
        }
        float _2242 = isnan(_1986) ? _1780 : (isnan(_1780) ? _1986 : min(_1780, _1986));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1746) + _1735;
        float _2248 = (_2243 * _1749) + _1739;
        float _2249 = (_2243 * _1752) + _1743;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_15_37_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_15_37_ladder_2;
        _1770 = frontier_phi_15_37_ladder_1;
        _1772 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1848 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1851 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _1991;
        if (_1845 > 0.0)
        {
            _1991 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1991 = frontier_phi_27_23_ladder;
        }
        float _2267;
        if (_1848 > 0.0)
        {
            _2267 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2267 = frontier_phi_39_34_ladder;
        }
        float _2480;
        if (_1851 > 0.0)
        {
            _2480 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2480 = frontier_phi_48_45_ladder;
        }
        float _2482 = isnan(_2267) ? _1991 : (isnan(_1991) ? _2267 : min(_1991, _2267));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1845) + _1834;
        float _2488 = (_2483 * _1848) + _1838;
        float _2489 = (_2483 * _1851) + _1842;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_24_48_ladder = _2689.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2689.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2689.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_24_48_ladder_2;
        _1872 = frontier_phi_24_48_ladder_1;
        _1874 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1777);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1887 = (((_905 * _856) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1870 - _1768)) + _1768);
    float _1889 = (((_905 * _857) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1872 - _1770)) + _1770);
    float _1891 = (((_905 * _858) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1874 - _1772)) + _1772);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_762 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1920 = _870 + (-1.0);
    float _1925 = (cbLight._m0[_1913].x * _1920) + 1.0;
    float _1926 = (cbLight._m0[_1913].y * _1920) + 1.0;
    float _1927 = (cbLight._m0[_1913].z * _1920) + 1.0;
    float _1928 = (cbLight._m0[_1913].w * _1920) + 1.0;
    uint _1929 = _1912 + 5u;
    float _1935 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1939 = _1912 + 4u;
    float _1945 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1949 = _1912 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_570, _571, _572));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_570, _571, _572));
    float _4075 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _4086 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1929].x * _1935) * _1970) + ((cbLight._m0[_1939].x * _1945) * _1968);
    float _1978 = ((_1935 * cbLight._m0[_1929].y) * _1970) + ((_1945 * cbLight._m0[_1939].y) * _1968);
    float _1979 = ((_1935 * cbLight._m0[_1929].z) * _1970) + ((_1945 * cbLight._m0[_1939].z) * _1968);
    uvec4 _1983 = floatBitsToUint(cbLight._m0[_1912 + 12u]);
    bool _1985 = _1983.x == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1985)
    {
        _1996 = _1977;
        _1998 = _1978;
        _2000 = _1979;
    }
    else
    {
        uint _2004 = _1912 + 6u;
        float _2020 = (dot(vec3(cbLight._m0[_1912 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _4097 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2023 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _1996 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1977;
        _1998 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1978;
        _2000 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1979;
    }
    bool _2003 = _1983.y == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2003)
    {
        _2041 = _1996;
        _2043 = _1998;
        _2045 = _2000;
    }
    else
    {
        uint _2211 = _1912 + 7u;
        float _2227 = (dot(vec3(cbLight._m0[_1912 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4113 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2230 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2041 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _1996;
        _2043 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _1998;
        _2045 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _2000;
    }
    uint _2048 = _1912 + 8u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _738) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1912].x + _651;
    float _2064 = cbLight._m0[_1912].y + _652;
    float _2065 = cbLight._m0[_1912].z + _653;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1912].xyz));
    float _4129 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2077 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2078 = dot(vec3(_570, _571, _572), vec3(_2070, _2071, _2072));
    float _4151 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2070, _2071, _2072));
    float _4162 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2062 * _2062;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0);
    float _2099 = 0.959999978542327880859375 - _853;
    float _2101 = 0.959999978542327880859375 - _854;
    float _2102 = 0.959999978542327880859375 - _855;
    float _2109 = 1.0 - _2062;
    float _2120 = (0.5 / (((_2077 * ((_2076 * _2109) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2109) + _2062) * _2076))) * _2076;
    float _4173 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    uint _2133 = _1912 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _738) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1949].x + _651;
    float _2147 = cbLight._m0[_1949].y + _652;
    float _2148 = cbLight._m0[_1949].z + _653;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1949].xyz));
    float _4184 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2160 = dot(vec3(_570, _571, _572), vec3(_2153, _2154, _2155));
    float _4195 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2153, _2154, _2155));
    float _4206 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0);
    float _2186 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2077 * ((_2159 * _2186) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2186) + _2145) * _2159))) * _2159;
    float _4217 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2208 = (((((_2179 * _2099) + _856) * cbLight._m0[_2133].x) * _2198) * _1935) + (((((_2098 * _2099) + _856) * cbLight._m0[_2048].x) * _2122) * _1945);
    float _2209 = (((((_2179 * _2101) + _857) * cbLight._m0[_2133].y) * _2198) * _1935) + (((((_2098 * _2101) + _857) * cbLight._m0[_2048].y) * _2122) * _1945);
    float _2210 = (((((_2179 * _2102) + _858) * cbLight._m0[_2133].z) * _2198) * _1935) + (((((_2098 * _2102) + _858) * cbLight._m0[_2048].z) * _2122) * _1945);
    float _2272;
    float _2274;
    float _2276;
    if (_1985)
    {
        _2272 = _2208;
        _2274 = _2209;
        _2276 = _2210;
    }
    else
    {
        uint _2278 = _1912 + 2u;
        uint _2282 = _1912 + 10u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _738) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _651;
        float _2299 = cbLight._m0[_2278].y + _652;
        float _2300 = cbLight._m0[_2278].z + _653;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2278].xyz));
        float _4228 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2312 = dot(vec3(_570, _571, _572), vec3(_2305, _2306, _2307));
        float _4239 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4250 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
        float _2338 = 1.0 - _2297;
        float _2348 = (0.5 / (((_2077 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2338) + _2297) * _2311))) * _2311;
        float _4261 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2272 = (((((_2331 * _2099) + _856) * cbLight._m0[_2282].x) * _2350) * _2351) + _2208;
        _2274 = (((((_2331 * _2101) + _857) * cbLight._m0[_2282].y) * _2350) * _2351) + _2209;
        _2276 = (((((_2331 * _2102) + _858) * cbLight._m0[_2282].z) * _2350) * _2351) + _2210;
    }
    float _2386;
    float _2388;
    float _2390;
    if (_2003)
    {
        _2386 = _2272;
        _2388 = _2274;
        _2390 = _2276;
    }
    else
    {
        uint _2397 = _1912 + 3u;
        uint _2401 = _1912 + 11u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _738) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _651;
        float _2418 = cbLight._m0[_2397].y + _652;
        float _2419 = cbLight._m0[_2397].z + _653;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2397].xyz));
        float _4277 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2431 = dot(vec3(_570, _571, _572), vec3(_2424, _2425, _2426));
        float _4288 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4299 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2077 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2457) + _2416) * _2430))) * _2430;
        float _4310 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2386 = (((((_2450 * _2099) + _856) * cbLight._m0[_2401].x) * _2469) * _2470) + _2272;
        _2388 = (((((_2450 * _2101) + _857) * cbLight._m0[_2401].y) * _2469) * _2470) + _2274;
        _2390 = (((((_2450 * _2102) + _858) * cbLight._m0[_2401].z) * _2469) * _2470) + _2276;
    }
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_1910.y == 0u)
    {
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2545;
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2545;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2545;
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.x;
        uint _2572 = uint((float(_2560.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _2561))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _2561)));
        float _2582 = (log2(_2548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        uint _2586 = uint(isnan(14.0) ? _2583 : (isnan(_2583) ? 14.0 : min(_2583, 14.0)));
        uvec4 _2591 = texelFetch(g_lightClusterGridBuffer, int(((_2586 << 2u) + (_2572 << 6u)) >> 2u));
        uint _2592 = _2591.x;
        uint _2593 = _2560.z;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((((1u << ((_2593 >> 4u) & 15u)) + 4294967295u) & _2592) == 0u) || ((_2593 & 240u) == 0u))
        {
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
        }
        else
        {
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            uint _2844 = 0u;
            uint _2853;
            bool _2854;
            for (;;)
            {
                _2853 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                _2854 = _2853 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2854)
                {
                    frontier_phi_63_pred = _2843;
                    frontier_phi_63_pred_1 = _2842;
                    frontier_phi_63_pred_2 = _2841;
                    frontier_phi_63_pred_3 = _2840;
                    frontier_phi_63_pred_4 = _2839;
                    frontier_phi_63_pred_5 = _2838;
                }
                else
                {
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    uint _2968;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2853;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2972 = uint(findLSB(_2968)) + (_2844 << 5u);
                        uint _2969 = (_2968 + 4294967295u) & _2968;
                        uint _2974 = _2972 * 48u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 3u)).x));
                        uint _2994 = (_2972 * 48u) + 4u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3013 = (_2972 * 48u) + 8u;
                        vec3 _3024 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x));
                        float _3028 = _2988.x - _2546;
                        float _3029 = _2988.y - _2547;
                        float _3030 = _2988.z - _2548;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_682, _685, _688), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2988.w);
                        float _4336 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3045 = sqrt(_3031) * _3007.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _3038) + _3049;
                        float _3055 = _3045 * _3045;
                        float _3059 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3044) / ((_3055 * 0.699999988079071044921875) + 1.0);
                        float _3063 = (-0.0) - _2546;
                        float _3064 = (-0.0) - _2547;
                        float _3065 = (-0.0) - _2548;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3080 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3081 = 1.0 - _886;
                        float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                        float _3089 = _3088 * _3088;
                        float _3090 = _3089 * _3089;
                        float _3091 = _3070 + _3035;
                        float _3092 = _3071 + _3036;
                        float _3093 = _3072 + _3037;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3101 = dot(vec3(_682, _685, _688), vec3(_3070, _3071, _3072));
                        float _4352 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3104 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3105 = dot(vec3(_682, _685, _688), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                        float _4363 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                        float _3113 = _3048 * _3089;
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3038) + _3114;
                        float _4374 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3119 = 1.0 - _3089;
                        float _3129 = (0.5 / (((_3118 * ((_3104 * _3119) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3089) * _3104))) * _3118;
                        float _4385 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3140 = (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) / ((_3112 * _3112) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2897 = (_3059 * _3007.x) + _2965;
                        _2898 = (_3059 * _3007.y) + _2966;
                        _2899 = (_3059 * _3007.z) + _2967;
                        _2894 = (_3140 * _3024.x) + _2962;
                        _2895 = (_3140 * _3024.y) + _2963;
                        _2896 = (_3140 * _3024.z) + _2964;
                        if (_2969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2969;
                        }
                    }
                    frontier_phi_63_pred = _2899;
                    frontier_phi_63_pred_1 = _2898;
                    frontier_phi_63_pred_2 = _2897;
                    frontier_phi_63_pred_3 = _2896;
                    frontier_phi_63_pred_4 = _2895;
                    frontier_phi_63_pred_5 = _2894;
                }
                _2705 = frontier_phi_63_pred;
                _2703 = frontier_phi_63_pred_1;
                _2701 = frontier_phi_63_pred_2;
                _2699 = frontier_phi_63_pred_3;
                _2697 = frontier_phi_63_pred_4;
                _2695 = frontier_phi_63_pred_5;
                uint _2845 = _2844 + 1u;
                if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2838 = _2695;
                    _2839 = _2697;
                    _2840 = _2699;
                    _2841 = _2701;
                    _2842 = _2703;
                    _2843 = _2705;
                    _2844 = _2845;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
        }
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.z;
        uint _2711 = (_2709 >> 8u) & 15u;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((4294967295u << _2711) & _2592) == 0u)
        {
            _2806 = _2694;
            _2808 = _2696;
            _2810 = _2698;
            _2812 = _2700;
            _2814 = _2702;
            _2816 = _2704;
        }
        else
        {
            float _2831 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
            float _2832 = _2831 * _2546;
            float _2833 = _2831 * _2547;
            float _2834 = _2831 * _2548;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2711 < ((_2709 >> 12u) & 15u))
            {
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2945 = _2694;
                float _2946 = _2696;
                float _2947 = _2698;
                float _2948 = _2700;
                float _2949 = _2702;
                float _2950 = _2704;
                uint _2951 = _2711;
                uint _2960;
                bool _2961;
                for (;;)
                {
                    _2960 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                    _2961 = _2960 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2961)
                    {
                        frontier_phi_69_pred = _2950;
                        frontier_phi_69_pred_1 = _2949;
                        frontier_phi_69_pred_2 = _2948;
                        frontier_phi_69_pred_3 = _2947;
                        frontier_phi_69_pred_4 = _2946;
                        frontier_phi_69_pred_5 = _2945;
                    }
                    else
                    {
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3158 = _2945;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        float _3161 = _2948;
                        float _3162 = _2949;
                        float _3163 = _2950;
                        uint _3164 = _2960;
                        uint _3165;
                        vec4 _3190;
                        float _3191;
                        vec4 _3206;
                        vec3 _3218;
                        vec4 _3233;
                        vec4 _3249;
                        float _3296;
                        bool _3297;
                        for (;;)
                        {
                            uint _3175 = ((_2951 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3164));
                            _3165 = (_3164 + 4294967295u) & _3164;
                            uint _3177 = _3175 * 40u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            _3191 = _3190.w;
                            uint _3193 = (_3175 * 40u) + 4u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3175 * 40u) + 8u;
                            _3218 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x));
                            uint _3220 = (_3175 * 40u) + 16u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3236 = (_3175 * 40u) + 20u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3252 = (_3175 * 40u) + 24u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3271 = (_3175 * 40u) + 28u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3296 = fma(_2548, _3284.z, fma(_2547, _3284.y, _3284.x * _2546)) + _3284.w;
                            _3297 = !((fma(_2548, _3265.z, fma(_2547, _3265.y, _3265.x * _2546)) + _3265.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3297)
                            {
                                float _3324 = _3190.x - _2546;
                                float _3325 = _3190.y - _2547;
                                float _3326 = _3190.z - _2548;
                                float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                                float _3330 = inversesqrt(_3327);
                                float _3331 = _3330 * _3324;
                                float _3332 = _3330 * _3325;
                                float _3333 = _3330 * _3326;
                                float _3337 = 1.0 - (_3327 / (_3191 * _3191));
                                float _4396 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3342 = sqrt(_3327) * _3206.w;
                                float _3344 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                                float _3345 = _3344 * _3344;
                                float _3348 = ((1.0 - _3345) * dot(vec3(_3331, _3332, _3333), vec3(_682, _685, _688))) + _3345;
                                float _3351 = _3342 * _3342;
                                float _3355 = (fma(_2548, _3233.z, fma(_2547, _3233.y, _3233.x * _2546)) + _3233.w) / _3296;
                                float _3356 = (fma(_2548, _3249.z, fma(_2547, _3249.y, _3249.x * _2546)) + _3249.w) / _3296;
                                float _3360 = 1.0 - dot(vec2(_3355, _3356), vec2(_3355, _3356));
                                float _4412 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3362 = _3361 * (((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3338) / ((_3351 * 0.699999988079071044921875) + 1.0));
                                float _3374 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                                float _3375 = 1.0 - _886;
                                float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                                float _3383 = _3382 * _3382;
                                float _3384 = _3383 * _3383;
                                float _3385 = _3331 - _2832;
                                float _3386 = _3332 - _2833;
                                float _3387 = _3333 - _2834;
                                float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                                float _3395 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2832, (-0.0) - _2833, (-0.0) - _2834));
                                float _4423 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3399 = dot(vec3(_682, _685, _688), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                                float _4434 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                                float _3407 = _3344 * _3383;
                                float _3408 = _3407 * _3407;
                                float _3414 = ((1.0 - _3408) * dot(vec3(_682, _685, _688), vec3(_3331, _3332, _3333))) + _3408;
                                float _4445 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3416 = 1.0 - _3383;
                                float _3426 = (0.5 / (((_3415 * ((_3398 * _3416) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3383) * _3398))) * _3415;
                                float _4456 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3436 = (_3361 * _3338) * (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3406 * _3406) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3362 * _3206.z;
                                frontier_phi_75_pred_1 = _3362 * _3206.y;
                                frontier_phi_75_pred_2 = _3362 * _3206.x;
                                frontier_phi_75_pred_3 = _3436 * _3218.z;
                                frontier_phi_75_pred_4 = _3436 * _3218.y;
                                frontier_phi_75_pred_5 = _3436 * _3218.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3445 = frontier_phi_75_pred;
                            _3444 = frontier_phi_75_pred_1;
                            _3443 = frontier_phi_75_pred_2;
                            _3442 = frontier_phi_75_pred_3;
                            _3441 = frontier_phi_75_pred_4;
                            _3440 = frontier_phi_75_pred_5;
                            _3148 = _3443 + _3161;
                            _3149 = _3444 + _3162;
                            _3150 = _3445 + _3163;
                            _3145 = _3440 + _3158;
                            _3146 = _3441 + _3159;
                            _3147 = _3442 + _3160;
                            if (_3165 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3165;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3150;
                        frontier_phi_69_pred_1 = _3149;
                        frontier_phi_69_pred_2 = _3148;
                        frontier_phi_69_pred_3 = _3147;
                        frontier_phi_69_pred_4 = _3146;
                        frontier_phi_69_pred_5 = _3145;
                    }
                    _2817 = frontier_phi_69_pred;
                    _2815 = frontier_phi_69_pred_1;
                    _2813 = frontier_phi_69_pred_2;
                    _2811 = frontier_phi_69_pred_3;
                    _2809 = frontier_phi_69_pred_4;
                    _2807 = frontier_phi_69_pred_5;
                    uint _2952 = _2951 + 1u;
                    if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2945 = _2807;
                        _2946 = _2809;
                        _2947 = _2811;
                        _2948 = _2813;
                        _2949 = _2815;
                        _2950 = _2817;
                        _2951 = _2952;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2817;
                frontier_phi_57_58_ladder_1 = _2815;
                frontier_phi_57_58_ladder_2 = _2813;
                frontier_phi_57_58_ladder_3 = _2811;
                frontier_phi_57_58_ladder_4 = _2809;
                frontier_phi_57_58_ladder_5 = _2807;
            }
            else
            {
                frontier_phi_57_58_ladder = _2704;
                frontier_phi_57_58_ladder_1 = _2702;
                frontier_phi_57_58_ladder_2 = _2700;
                frontier_phi_57_58_ladder_3 = _2698;
                frontier_phi_57_58_ladder_4 = _2696;
                frontier_phi_57_58_ladder_5 = _2694;
            }
            _2806 = frontier_phi_57_58_ladder_5;
            _2808 = frontier_phi_57_58_ladder_4;
            _2810 = frontier_phi_57_58_ladder_3;
            _2812 = frontier_phi_57_58_ladder_2;
            _2814 = frontier_phi_57_58_ladder_1;
            _2816 = frontier_phi_57_58_ladder;
        }
        float _2821 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2604 = (_2821 * _2812) + _2041;
        _2606 = (_2821 * _2814) + _2043;
        _2608 = (_2821 * _2816) + _2045;
        _2610 = ((_2806 * _856) * _2821) + _2386;
        _2612 = ((_2808 * _857) * _2821) + _2388;
        _2614 = ((_2810 * _858) * _2821) + _2390;
    }
    else
    {
        _2604 = _2041;
        _2606 = _2043;
        _2608 = _2045;
        _2610 = _2386;
        _2612 = _2388;
        _2614 = _2390;
    }
    float _4472 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4483 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4494 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4505 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _2639 = cbInstanceData._m0[_762 + 6u].w * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)));
    float _2644 = _659 / cbSceneParam._m0[86u].x;
    float _2645 = _660 / cbSceneParam._m0[86u].y;
    vec4 _2659 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2661 = _2659.x;
    float _2662 = _2659.y;
    float _2663 = _2659.z;
    float _2664 = _2659.w;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2719 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2720 = _2719 / _594;
        float _2731 = _2720 * _644;
        float _2732 = _645 * _2720;
        float _2733 = (-0.0) - _2732;
        float _2734 = _2720 * _646;
        float _2736 = (cbSceneParam._m0[77u].w * _2733) / _2719;
        float _2737 = _2736 + cbSceneParam._m0[79u].w;
        float _2738 = cbSceneParam._m0[79u].w - _2732;
        float _2744 = sqrt(((_2731 * _2731) + (_2732 * _2732)) + (_2734 * _2734));
        float _2747 = (1.0 - (cbSceneParam._m0[77u].w / _2719)) * _2744;
        float _2752 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2754 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2733 - _2736) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2737 > 0.0) ? exp2(_2752 * _2737) : (2.0 - exp2(_2754 * _2737))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2747;
        }
        else
        {
            float _2867 = 1.0 / cbSceneParam._m0[80u].x;
            float _2868 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : max(_2737, _2738));
            float _2869 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : min(_2737, _2738));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            _2907 = ((abs(_2744 / _2733) * cbSceneParam._m0[80u].y) * ((((_2878 - _2879) * 2.0) - ((exp2(_2752 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)))) - exp2(_2752 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))))) * _2867)) - ((exp2(_2754 * _2878) - exp2(_2754 * _2879)) * _2867))) + (_2747 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2664);
        _2756 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2661;
        _2758 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2662;
        _2760 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2663;
        _2762 = _2918 * _2664;
    }
    else
    {
        _2756 = _2661;
        _2758 = _2662;
        _2760 = _2663;
        _2762 = _2664;
    }
    float _2774 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2775 = _2774 == 3.0;
    float _2776 = log2(_2762);
    float _2783 = exp2(_2776 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2604 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _870))) + ((_2610 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _2784 = exp2(_2776 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2606 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _870))) + ((_2612 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _2785 = exp2(_2776 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2608 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _870))) + ((_2614 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _2794 = (_2774 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2794 * (_2775 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2756)));
    SV_Target.y = _2794 * (_2775 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2758)));
    SV_Target.z = _2794 * (_2775 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2760)));
    SV_Target.w = _2639;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2639;
}


