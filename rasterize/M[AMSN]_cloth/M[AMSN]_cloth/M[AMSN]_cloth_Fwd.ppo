#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _851;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _232.x * cbMtdParam._m0[9u].x;
    float _240 = _232.y * cbMtdParam._m0[9u].y;
    float _241 = _232.z * cbMtdParam._m0[9u].z;
    float _242 = _232.w * TEXCOORD_1.z;
    vec4 _258 = texture(sampler2D(M_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _258.x + cbMtdParam._m0[10u].x;
    vec4 _273 = texture(sampler2D(M_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3190 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))));
    float _293 = fma(_290, _210, fma(_283, _202 * TANGENT.x, (_188 * _180) * _281));
    float _296 = fma(_290, _211, fma(_283, _202 * TANGENT.y, (_188 * _181) * _281));
    float _299 = fma(_290, _212, fma(_283, _202 * TANGENT.z, (_188 * _182) * _281));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3201 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _307 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _3212 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _308 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3234 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3245 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3256 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _312 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _416 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _419 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _422 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _435 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = (_435 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _444 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * cbInstanceData._m0[_438].x;
    float _445 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_438].y;
    float _446 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * cbInstanceData._m0[_438].z;
    float _3267 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _3278 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _450 = 1.0 - _312;
    float _451 = _447 * _450;
    float _452 = _448 * _450;
    float _453 = _449 * _450;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _312;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _312;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _312;
    float _461 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    vec4 _473 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _476 = _473.x * TEXCOORD_1.w;
    float _477 = dot(vec3(_304, _305, _306), vec3(_386, _387, _388));
    float _480 = _477 * 2.0;
    float _484 = (_480 * _304) - _386;
    float _485 = (_480 * _305) - _387;
    float _486 = (_480 * _306) - _388;
    float _490 = abs(dot(vec3(_386, _387, _388), vec3(_304, _305, _306)));
    float _3300 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _492 = sqrt(_308);
    float _505 = exp2((_492 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_492 * 3.0));
    float _511 = (1.0 - _505) * ((_492 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _512 = _505 * _492;
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _850;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = fma(_548, cbModelParam._m0[26u].z, fma(_544, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540));
        float _579 = fma(_548, cbModelParam._m0[27u].z, fma(_544, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540));
        float _583 = fma(_548, cbModelParam._m0[28u].z, fma(_544, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540));
        float _608 = _540 + _304;
        float _609 = _544 + _305;
        float _610 = _548 + _306;
        float _620 = fma(_610, cbModelParam._m0[26u].z, fma(_609, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608)) - _575;
        float _621 = fma(_610, cbModelParam._m0[27u].z, fma(_609, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608)) - _579;
        float _622 = fma(_610, cbModelParam._m0[28u].z, fma(_609, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608)) - _583;
        float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
        float _639 = ((_626 * _620) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_575 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_626 * _621) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_579 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_626 * _622) / cbModelParam._m0[34u].z) + ((((((_583 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        float _678 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_644.x + (-0.5));
        float _680 = _678 * (_644.y + (-0.5));
        float _681 = _678 * (_644.z + (-0.5));
        float _688 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_651.x + (-0.5));
        float _690 = _688 * (_651.y + (-0.5));
        float _691 = _688 * (_651.z + (-0.5));
        float _698 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_658.x + (-0.5));
        float _700 = _698 * (_658.y + (-0.5));
        float _701 = _698 * (_658.z + (-0.5));
        float _708 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_665.x + (-0.5));
        float _710 = _708 * (_665.y + (-0.5));
        float _711 = _708 * (_665.z + (-0.5));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = _679 * 0.5;
        float _716 = _689 * 0.5;
        float _717 = _699 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _732 = (dot(vec3(_304, _305, _306), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _742 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3348 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_744 + 1.0))) + _749) * _712;
        float _759 = _680 * 0.5;
        float _760 = _690 * 0.5;
        float _761 = _700 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_304, _305, _306), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3381 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_786 + 1.0))) + _791) * _713;
        float _801 = _681 * 0.5;
        float _802 = _691 * 0.5;
        float _803 = _701 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_304, _305, _306), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3414 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_828 + 1.0))) + _833) * _714;
        _850 = _681;
        _852 = _680;
        _853 = _679;
        _854 = _691;
        _855 = _690;
        _856 = _689;
        _857 = _701;
        _858 = _700;
        _859 = _699;
        _860 = _714;
        _861 = _713;
        _862 = _712;
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
    }
    else
    {
        _850 = _851;
        _852 = _851;
        _853 = _851;
        _854 = _851;
        _855 = _851;
        _856 = _851;
        _857 = _851;
        _858 = _851;
        _859 = _851;
        _860 = _851;
        _861 = _851;
        _862 = _851;
        _863 = 0.0;
        _864 = 0.0;
        _865 = 0.0;
    }
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _891 = fma(_548, cbModelParam._m0[30u].z, fma(_544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _540));
        float _895 = fma(_548, cbModelParam._m0[31u].z, fma(_544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _540));
        float _899 = fma(_548, cbModelParam._m0[32u].z, fma(_544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _540));
        float _922 = _540 + _304;
        float _923 = _544 + _305;
        float _924 = _548 + _306;
        float _934 = fma(_924, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922)) - _891;
        float _935 = fma(_924, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922)) - _895;
        float _936 = fma(_924, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922)) - _899;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_891 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_895 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[35u].z) + ((((((_899 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_957.x + (-0.5));
        float _992 = _990 * (_957.y + (-0.5));
        float _993 = _990 * (_957.z + (-0.5));
        float _1000 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_964.x + (-0.5));
        float _1002 = _1000 * (_964.y + (-0.5));
        float _1003 = _1000 * (_964.z + (-0.5));
        float _1010 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_971.x + (-0.5));
        float _1012 = _1010 * (_971.y + (-0.5));
        float _1013 = _1010 * (_971.z + (-0.5));
        float _1020 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_978.x + (-0.5));
        float _1022 = _1020 * (_978.y + (-0.5));
        float _1023 = _1020 * (_978.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_304, _305, _306), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3477 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1054 + 1.0))) + _1059) * _1024;
        float _1069 = _992 * 0.5;
        float _1070 = _1002 * 0.5;
        float _1071 = _1012 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_304, _305, _306), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3510 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1096 + 1.0))) + _1101) * _1025;
        float _1111 = _993 * 0.5;
        float _1112 = _1003 * 0.5;
        float _1113 = _1013 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_304, _305, _306), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3543 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1138 + 1.0))) + _1143) * _1026;
        _1160 = _993;
        _1161 = _992;
        _1162 = _991;
        _1163 = _1003;
        _1164 = _1002;
        _1165 = _1001;
        _1166 = _1013;
        _1167 = _1012;
        _1168 = _1011;
        _1169 = _1026;
        _1170 = _1025;
        _1171 = _1024;
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _851;
        _1161 = _851;
        _1162 = _851;
        _1163 = _851;
        _1164 = _851;
        _1165 = _851;
        _1166 = _851;
        _1167 = _851;
        _1168 = _851;
        _1169 = _851;
        _1170 = _851;
        _1171 = _851;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1207 = fma(_1186, cbSceneParam._m0[89u].z, fma(_1185, cbSceneParam._m0[89u].y, _1184 * cbSceneParam._m0[89u].x));
    float _1210 = fma(_1186, cbSceneParam._m0[90u].z, fma(_1185, cbSceneParam._m0[90u].y, _1184 * cbSceneParam._m0[90u].x));
    float _1213 = fma(_1186, cbSceneParam._m0[91u].z, fma(_1185, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1184));
    float _1228 = _484 * 0.5;
    float _1229 = _485 * 0.5;
    float _1230 = _486 * 0.5;
    float _1231 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1234 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1237 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1271;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1244 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_850, _854, _857, _860));
        float _1248 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_852, _855, _858, _861));
        float _1252 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_853, _856, _859, _862));
        float _1259 = dot(vec4(cbModelParam._m0[39u]), vec4(_1228, _1229, _1230, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1282;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1273 = dot(vec4(cbModelParam._m0[40u]), vec4(_1228, _1229, _1230, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1286 = (_1282 * cbModelParam._m0[1u].x) + (_1271 * (1.0 - cbModelParam._m0[1u].x));
    float _1296 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1297 = isnan(_1296) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1296 : min(cbModelParam._m0[25u].z, _1296));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1346 = fma(_548, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540)) + cbModelParam._m0[13u].w;
        float _1350 = fma(_548, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540)) + cbModelParam._m0[14u].w;
        float _1354 = fma(_548, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540)) + cbModelParam._m0[15u].w;
        float _1357 = fma(_486, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484));
        float _1360 = fma(_486, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484));
        float _1363 = fma(_486, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484));
        float _1391;
        if (_1357 > 0.0)
        {
            _1391 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1391 = frontier_phi_16_14_ladder;
        }
        float _1599;
        if (_1360 > 0.0)
        {
            _1599 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1599 = frontier_phi_25_21_ladder;
        }
        float _1853;
        if (_1363 > 0.0)
        {
            _1853 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1853 = frontier_phi_37_32_ladder;
        }
        float _1855 = isnan(_1599) ? _1391 : (isnan(_1391) ? _1599 : min(_1391, _1599));
        float _1856 = isnan(_1853) ? _1855 : (isnan(_1855) ? _1853 : min(_1855, _1853));
        float _1860 = (_1856 * _1357) + _1346;
        float _1861 = (_1856 * _1360) + _1350;
        float _1862 = (_1856 * _1363) + _1354;
        float _1863 = _1856 * 9.9999997473787516355514526367188e-05;
        float _1865 = (-1.0) - _1863;
        float _1867 = _1863 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1862 > _1867) || ((_1862 < _1865) || ((_1861 > _1867) || ((_1861 < _1865) || ((_1860 < _1865) || (_1860 > _1867))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1862, cbModelParam._m0[9u].z, fma(_1861, cbModelParam._m0[9u].y, _1860 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1862, cbModelParam._m0[10u].z, fma(_1861, cbModelParam._m0[10u].y, _1860 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1862, cbModelParam._m0[11u].z, fma(_1861, cbModelParam._m0[11u].y, _1860 * cbModelParam._m0[11u].x))), _1297);
            frontier_phi_15_37_ladder = _1990.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1990.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1990.x * cbModelParam._m0[1u].y;
        }
        _1379 = frontier_phi_15_37_ladder_2;
        _1381 = frontier_phi_15_37_ladder_1;
        _1383 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_484, _485, _486), _1297);
        _1379 = _1367.x * cbModelParam._m0[1u].y;
        _1381 = _1367.y * cbModelParam._m0[1u].y;
        _1383 = _1367.z * cbModelParam._m0[1u].y;
    }
    float _1387 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1387 : min(cbModelParam._m0[25u].w, _1387));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1445 = fma(_548, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540)) + cbModelParam._m0[21u].w;
        float _1449 = fma(_548, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540)) + cbModelParam._m0[22u].w;
        float _1453 = fma(_548, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540)) + cbModelParam._m0[23u].w;
        float _1456 = fma(_486, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484));
        float _1459 = fma(_486, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484));
        float _1462 = fma(_486, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484));
        float _1604;
        if (_1456 > 0.0)
        {
            _1604 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1604 = frontier_phi_27_23_ladder;
        }
        float _1880;
        if (_1459 > 0.0)
        {
            _1880 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1880 = frontier_phi_39_34_ladder;
        }
        float _2093;
        if (_1462 > 0.0)
        {
            _2093 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2093 = frontier_phi_48_45_ladder;
        }
        float _2095 = isnan(_1880) ? _1604 : (isnan(_1604) ? _1880 : min(_1604, _1880));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1456) + _1445;
        float _2101 = (_2096 * _1459) + _1449;
        float _2102 = (_2096 * _1462) + _1453;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2103;
        float _2106 = _2103 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2102 > _2106) || ((_2102 < _2104) || ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 < _2104) || (_2100 > _2106))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2302 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2102, cbModelParam._m0[17u].z, fma(_2101, cbModelParam._m0[17u].y, _2100 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2102, cbModelParam._m0[18u].z, fma(_2101, cbModelParam._m0[18u].y, _2100 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2102, cbModelParam._m0[19u].z, fma(_2101, cbModelParam._m0[19u].y, _2100 * cbModelParam._m0[19u].x))), _1388);
            frontier_phi_24_48_ladder = _2302.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2302.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2302.x * cbModelParam._m0[1u].z;
        }
        _1481 = frontier_phi_24_48_ladder_2;
        _1483 = frontier_phi_24_48_ladder_1;
        _1485 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_484, _485, _486), _1388);
        _1481 = _1465.x * cbModelParam._m0[1u].z;
        _1483 = _1465.y * cbModelParam._m0[1u].z;
        _1485 = _1465.z * cbModelParam._m0[1u].z;
    }
    float _1498 = (((_511 * _461) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1500 = (((_511 * _463) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1502 = (((_511 * _464) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1505 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, _1498 * cbSceneParam._m0[91u].x));
    uvec4 _1521 = floatBitsToUint(cbInstanceData._m0[_435 + 5u]);
    uint _1523 = _1521.x * 14u;
    uint _1524 = _1523 + 13u;
    float _1531 = _476 + (-1.0);
    float _1536 = (cbLight._m0[_1524].x * _1531) + 1.0;
    float _1537 = (cbLight._m0[_1524].y * _1531) + 1.0;
    float _1538 = (cbLight._m0[_1524].z * _1531) + 1.0;
    float _1539 = (cbLight._m0[_1524].w * _1531) + 1.0;
    uint _1540 = _1523 + 5u;
    float _1546 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
    uint _1550 = _1523 + 4u;
    float _1557 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
    uint _1561 = _1523 | 1u;
    float _1572 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_304, _305, _306));
    float _1575 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_304, _305, _306));
    float _3679 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _3690 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _1580 = (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.3183098733425140380859375;
    float _1582 = (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * 0.3183098733425140380859375;
    float _1589 = ((cbLight._m0[_1540].x * _1546) * _1582) + ((cbLight._m0[_1550].x * _1557) * _1580);
    float _1590 = ((_1546 * cbLight._m0[_1540].y) * _1582) + ((_1557 * cbLight._m0[_1550].y) * _1580);
    float _1591 = ((_1546 * cbLight._m0[_1540].z) * _1582) + ((_1557 * cbLight._m0[_1550].z) * _1580);
    uvec4 _1596 = floatBitsToUint(cbLight._m0[_1523 + 12u]);
    bool _1598 = _1596.x == 0u;
    float _1609;
    float _1611;
    float _1613;
    if (_1598)
    {
        _1609 = _1589;
        _1611 = _1590;
        _1613 = _1591;
    }
    else
    {
        uint _1617 = _1523 + 6u;
        float _1633 = (dot(vec3(cbLight._m0[_1523 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1634 = _1633 * _1633;
        float _3701 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1636 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1609 = (((cbLight._m0[_1617].x * 0.3183098733425140380859375) * _1635) * _1636) + _1589;
        _1611 = (((cbLight._m0[_1617].y * 0.3183098733425140380859375) * _1635) * _1636) + _1590;
        _1613 = (((cbLight._m0[_1617].z * 0.3183098733425140380859375) * _1635) * _1636) + _1591;
    }
    bool _1616 = _1596.y == 0u;
    float _1654;
    float _1656;
    float _1658;
    if (_1616)
    {
        _1654 = _1609;
        _1656 = _1611;
        _1658 = _1613;
    }
    else
    {
        uint _1824 = _1523 + 7u;
        float _1840 = (dot(vec3(cbLight._m0[_1523 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1841 = _1840 * _1840;
        float _3717 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1843 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _1654 = (((cbLight._m0[_1824].x * 0.3183098733425140380859375) * _1842) * _1843) + _1609;
        _1656 = (((cbLight._m0[_1824].y * 0.3183098733425140380859375) * _1842) * _1843) + _1611;
        _1658 = (((cbLight._m0[_1824].z * 0.3183098733425140380859375) * _1842) * _1843) + _1613;
    }
    uint _1661 = _1523 + 8u;
    float _1674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1523].w)) * _308) * 0.949999988079071044921875);
    float _1675 = _1674 * _1674;
    float _1676 = cbLight._m0[_1523].x + _386;
    float _1677 = cbLight._m0[_1523].y + _387;
    float _1678 = cbLight._m0[_1523].z + _388;
    float _1682 = inversesqrt(dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678)));
    float _1683 = _1682 * _1676;
    float _1684 = _1682 * _1677;
    float _1685 = _1682 * _1678;
    float _1686 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1523].xyz));
    float _3733 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1689 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _1690 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _1691 = dot(vec3(_304, _305, _306), vec3(_1683, _1684, _1685));
    float _3755 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1694 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _1695 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_1683, _1684, _1685));
    float _3766 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1699 = _1675 * _1675;
    float _1703 = ((_1694 * _1694) * (_1699 + (-1.0))) + 1.0;
    float _1711 = exp2(log2(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * 5.0);
    float _1712 = 0.959999978542327880859375 - _458;
    float _1714 = 0.959999978542327880859375 - _459;
    float _1715 = 0.959999978542327880859375 - _460;
    float _1722 = 1.0 - _1675;
    float _1733 = (0.5 / (((_1690 * ((_1689 * _1722) + _1675)) + 9.9999999392252902907785028219223e-09) + (((_1690 * _1722) + _1675) * _1689))) * _1689;
    float _3777 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1735 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1699 / ((_1703 * _1703) * 3.141590118408203125));
    uint _1746 = _1523 + 9u;
    float _1757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1561].w)) * _308) * 0.949999988079071044921875);
    float _1758 = _1757 * _1757;
    float _1759 = cbLight._m0[_1561].x + _386;
    float _1760 = cbLight._m0[_1561].y + _387;
    float _1761 = cbLight._m0[_1561].z + _388;
    float _1765 = inversesqrt(dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761)));
    float _1766 = _1765 * _1759;
    float _1767 = _1765 * _1760;
    float _1768 = _1765 * _1761;
    float _1769 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1561].xyz));
    float _3788 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1773 = dot(vec3(_304, _305, _306), vec3(_1766, _1767, _1768));
    float _3799 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_1766, _1767, _1768));
    float _3810 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1758 * _1758;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1792 = exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0);
    float _1799 = 1.0 - _1758;
    float _1809 = (0.5 / (((_1690 * ((_1772 * _1799) + _1758)) + 9.9999999392252902907785028219223e-09) + (((_1690 * _1799) + _1758) * _1772))) * _1772;
    float _3821 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    float _1821 = (((((_1792 * _1712) + _461) * cbLight._m0[_1746].x) * _1811) * _1546) + (((((_1711 * _1712) + _461) * cbLight._m0[_1661].x) * _1735) * _1557);
    float _1822 = (((((_1792 * _1714) + _463) * cbLight._m0[_1746].y) * _1811) * _1546) + (((((_1711 * _1714) + _463) * cbLight._m0[_1661].y) * _1735) * _1557);
    float _1823 = (((((_1792 * _1715) + _464) * cbLight._m0[_1746].z) * _1811) * _1546) + (((((_1711 * _1715) + _464) * cbLight._m0[_1661].z) * _1735) * _1557);
    float _1885;
    float _1887;
    float _1889;
    if (_1598)
    {
        _1885 = _1821;
        _1887 = _1822;
        _1889 = _1823;
    }
    else
    {
        uint _1891 = _1523 + 2u;
        uint _1895 = _1523 + 10u;
        float _1909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _308) * 0.949999988079071044921875);
        float _1910 = _1909 * _1909;
        float _1911 = cbLight._m0[_1891].x + _386;
        float _1912 = cbLight._m0[_1891].y + _387;
        float _1913 = cbLight._m0[_1891].z + _388;
        float _1917 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
        float _1918 = _1917 * _1911;
        float _1919 = _1917 * _1912;
        float _1920 = _1917 * _1913;
        float _1921 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1891].xyz));
        float _3832 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1924 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1925 = dot(vec3(_304, _305, _306), vec3(_1918, _1919, _1920));
        float _3843 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1928 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1929 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_1918, _1919, _1920));
        float _3854 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1933 = _1910 * _1910;
        float _1937 = ((_1928 * _1928) * (_1933 + (-1.0))) + 1.0;
        float _1944 = exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0);
        float _1951 = 1.0 - _1910;
        float _1961 = (0.5 / (((_1690 * ((_1924 * _1951) + _1910)) + 9.9999999392252902907785028219223e-09) + (((_1690 * _1951) + _1910) * _1924))) * _1924;
        float _3865 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1963 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1933 / ((_1937 * _1937) * 3.141590118408203125));
        float _1964 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1885 = (((((_1944 * _1712) + _461) * cbLight._m0[_1895].x) * _1963) * _1964) + _1821;
        _1887 = (((((_1944 * _1714) + _463) * cbLight._m0[_1895].y) * _1963) * _1964) + _1822;
        _1889 = (((((_1944 * _1715) + _464) * cbLight._m0[_1895].z) * _1963) * _1964) + _1823;
    }
    float _1999;
    float _2001;
    float _2003;
    if (_1616)
    {
        _1999 = _1885;
        _2001 = _1887;
        _2003 = _1889;
    }
    else
    {
        uint _2010 = _1523 + 3u;
        uint _2014 = _1523 + 11u;
        float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _308) * 0.949999988079071044921875);
        float _2029 = _2028 * _2028;
        float _2030 = cbLight._m0[_2010].x + _386;
        float _2031 = cbLight._m0[_2010].y + _387;
        float _2032 = cbLight._m0[_2010].z + _388;
        float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
        float _2037 = _2036 * _2030;
        float _2038 = _2036 * _2031;
        float _2039 = _2036 * _2032;
        float _2040 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2010].xyz));
        float _3881 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _2044 = dot(vec3(_304, _305, _306), vec3(_2037, _2038, _2039));
        float _3892 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _2048 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2037, _2038, _2039));
        float _3903 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2052 = _2029 * _2029;
        float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
        float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
        float _2070 = 1.0 - _2029;
        float _2080 = (0.5 / (((_1690 * ((_2043 * _2070) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1690 * _2070) + _2029) * _2043))) * _2043;
        float _3914 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2082 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
        float _2083 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _1999 = (((((_2063 * _1712) + _461) * cbLight._m0[_2014].x) * _2082) * _2083) + _1885;
        _2001 = (((((_2063 * _1714) + _463) * cbLight._m0[_2014].y) * _2082) * _2083) + _1887;
        _2003 = (((((_2063 * _1715) + _464) * cbLight._m0[_2014].z) * _2082) * _2083) + _1889;
    }
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    if (_1521.y == 0u)
    {
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2158;
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2158;
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2158;
        uvec4 _2173 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2174 = _2173.x;
        uint _2185 = uint((float(_2173.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2174))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2174)));
        float _2195 = (log2(_2161 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2196 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        uint _2199 = uint(isnan(14.0) ? _2196 : (isnan(_2196) ? 14.0 : min(_2196, 14.0)));
        uvec4 _2204 = texelFetch(g_lightClusterGridBuffer, int(((_2199 << 2u) + (_2185 << 6u)) >> 2u));
        uint _2205 = _2204.x;
        uint _2206 = _2173.z;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        if (((((1u << ((_2206 >> 4u) & 15u)) + 4294967295u) & _2205) == 0u) || ((_2206 & 240u) == 0u))
        {
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
        }
        else
        {
            float _2308;
            float _2310;
            float _2312;
            float _2314;
            float _2316;
            float _2318;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            uint _2457 = 0u;
            uint _2466;
            bool _2467;
            for (;;)
            {
                _2466 = texelFetch(g_lightClassification, int((((_2199 << 5u) + (_2185 << 9u)) + (_2457 << 2u)) >> 2u)).x;
                _2467 = _2466 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2467)
                {
                    frontier_phi_63_pred = _2456;
                    frontier_phi_63_pred_1 = _2455;
                    frontier_phi_63_pred_2 = _2454;
                    frontier_phi_63_pred_3 = _2453;
                    frontier_phi_63_pred_4 = _2452;
                    frontier_phi_63_pred_5 = _2451;
                }
                else
                {
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    uint _2581;
                    _2575 = _2451;
                    _2576 = _2452;
                    _2577 = _2453;
                    _2578 = _2454;
                    _2579 = _2455;
                    _2580 = _2456;
                    _2581 = _2466;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    for (;;)
                    {
                        uint _2585 = uint(findLSB(_2581)) + (_2457 << 5u);
                        uint _2582 = (_2581 + 4294967295u) & _2581;
                        uint _2587 = _2585 * 48u;
                        vec4 _2601 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2587)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 3u)).x));
                        uint _2607 = (_2585 * 48u) + 4u;
                        vec4 _2620 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2607)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 3u)).x));
                        uint _2626 = (_2585 * 48u) + 8u;
                        vec3 _2637 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2626)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 2u)).x));
                        float _2641 = _2601.x - _2159;
                        float _2642 = _2601.y - _2160;
                        float _2643 = _2601.z - _2161;
                        float _2644 = dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643));
                        float _2647 = inversesqrt(_2644);
                        float _2648 = _2647 * _2641;
                        float _2649 = _2647 * _2642;
                        float _2650 = _2647 * _2643;
                        float _2651 = dot(vec3(_416, _419, _422), vec3(_2648, _2649, _2650));
                        float _2656 = 1.0 - (_2644 * _2601.w);
                        float _3940 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                        float _2657 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                        float _2658 = sqrt(_2644) * _2620.w;
                        float _2661 = 1.39999997615814208984375 / (_2658 + 1.39999997615814208984375);
                        float _2662 = _2661 * _2661;
                        float _2665 = ((1.0 - _2662) * _2651) + _2662;
                        float _2668 = _2658 * _2658;
                        float _2672 = ((isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0))) * _2657) / ((_2668 * 0.699999988079071044921875) + 1.0);
                        float _2676 = (-0.0) - _2159;
                        float _2677 = (-0.0) - _2160;
                        float _2678 = (-0.0) - _2161;
                        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2693 = exp2(log2(1.0 / ((_2668 * 3.5) + 5.0)) * 0.25);
                        float _2694 = 1.0 - _492;
                        float _2701 = sqrt(1.0 - ((1.0 - (_2694 * _2694)) * (1.0 - (_2693 * _2693))));
                        float _2702 = _2701 * _2701;
                        float _2703 = _2702 * _2702;
                        float _2704 = _2683 + _2648;
                        float _2705 = _2684 + _2649;
                        float _2706 = _2685 + _2650;
                        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
                        float _2714 = dot(vec3(_416, _419, _422), vec3(_2683, _2684, _2685));
                        float _3956 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2717 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2718 = dot(vec3(_416, _419, _422), vec3(_2710 * _2704, _2710 * _2705, _2710 * _2706));
                        float _3967 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2721 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                        float _2725 = ((_2721 * _2721) * (_2703 + (-1.0))) + 1.0;
                        float _2726 = _2661 * _2702;
                        float _2727 = _2726 * _2726;
                        float _2730 = ((1.0 - _2727) * _2651) + _2727;
                        float _3978 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2731 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2732 = 1.0 - _2702;
                        float _2742 = (0.5 / (((_2731 * ((_2717 * _2732) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2731 * _2732) + _2702) * _2717))) * _2731;
                        float _3989 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2753 = (((_2703 * 3.1415927410125732421875) * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) / ((_2725 * _2725) * ((_2668 * 2.1991131305694580078125) + 3.141590118408203125))) * _2657;
                        _2510 = (_2672 * _2620.x) + _2578;
                        _2511 = (_2672 * _2620.y) + _2579;
                        _2512 = (_2672 * _2620.z) + _2580;
                        _2507 = (_2753 * _2637.x) + _2575;
                        _2508 = (_2753 * _2637.y) + _2576;
                        _2509 = (_2753 * _2637.z) + _2577;
                        if (_2582 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2575 = _2507;
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2582;
                        }
                    }
                    frontier_phi_63_pred = _2512;
                    frontier_phi_63_pred_1 = _2511;
                    frontier_phi_63_pred_2 = _2510;
                    frontier_phi_63_pred_3 = _2509;
                    frontier_phi_63_pred_4 = _2508;
                    frontier_phi_63_pred_5 = _2507;
                }
                _2318 = frontier_phi_63_pred;
                _2316 = frontier_phi_63_pred_1;
                _2314 = frontier_phi_63_pred_2;
                _2312 = frontier_phi_63_pred_3;
                _2310 = frontier_phi_63_pred_4;
                _2308 = frontier_phi_63_pred_5;
                uint _2458 = _2457 + 1u;
                if (_2458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2451 = _2308;
                    _2452 = _2310;
                    _2453 = _2312;
                    _2454 = _2314;
                    _2455 = _2316;
                    _2456 = _2318;
                    _2457 = _2458;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
        }
        uvec4 _2321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2322 = _2321.z;
        uint _2324 = (_2322 >> 8u) & 15u;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        if (((4294967295u << _2324) & _2205) == 0u)
        {
            _2419 = _2307;
            _2421 = _2309;
            _2423 = _2311;
            _2425 = _2313;
            _2427 = _2315;
            _2429 = _2317;
        }
        else
        {
            float _2444 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
            float _2445 = _2444 * _2159;
            float _2446 = _2444 * _2160;
            float _2447 = _2444 * _2161;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2324 < ((_2322 >> 12u) & 15u))
            {
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2428;
                float _2430;
                float _2558 = _2307;
                float _2559 = _2309;
                float _2560 = _2311;
                float _2561 = _2313;
                float _2562 = _2315;
                float _2563 = _2317;
                uint _2564 = _2324;
                uint _2573;
                bool _2574;
                for (;;)
                {
                    _2573 = texelFetch(g_lightClassification, int((((_2199 << 5u) + (_2185 << 9u)) + (_2564 << 2u)) >> 2u)).x;
                    _2574 = _2573 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2574)
                    {
                        frontier_phi_69_pred = _2563;
                        frontier_phi_69_pred_1 = _2562;
                        frontier_phi_69_pred_2 = _2561;
                        frontier_phi_69_pred_3 = _2560;
                        frontier_phi_69_pred_4 = _2559;
                        frontier_phi_69_pred_5 = _2558;
                    }
                    else
                    {
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _2771 = _2558;
                        float _2772 = _2559;
                        float _2773 = _2560;
                        float _2774 = _2561;
                        float _2775 = _2562;
                        float _2776 = _2563;
                        uint _2777 = _2573;
                        uint _2778;
                        vec4 _2803;
                        float _2804;
                        vec4 _2819;
                        vec3 _2831;
                        vec4 _2847;
                        vec4 _2863;
                        float _2910;
                        bool _2911;
                        for (;;)
                        {
                            uint _2788 = ((_2564 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2777));
                            _2778 = (_2777 + 4294967295u) & _2777;
                            uint _2790 = _2788 * 40u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            _2804 = _2803.w;
                            uint _2806 = (_2788 * 40u) + 4u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            uint _2821 = (_2788 * 40u) + 8u;
                            _2831 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x));
                            uint _2834 = (_2788 * 40u) + 16u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2850 = (_2788 * 40u) + 20u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2866 = (_2788 * 40u) + 24u;
                            vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2885 = (_2788 * 40u) + 28u;
                            vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2910 = fma(_2161, _2898.z, fma(_2160, _2898.y, _2898.x * _2159)) + _2898.w;
                            _2911 = !((fma(_2161, _2879.z, fma(_2160, _2879.y, _2879.x * _2159)) + _2879.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2911)
                            {
                                float _2938 = _2803.x - _2159;
                                float _2939 = _2803.y - _2160;
                                float _2940 = _2803.z - _2161;
                                float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                                float _2944 = inversesqrt(_2941);
                                float _2945 = _2944 * _2938;
                                float _2946 = _2944 * _2939;
                                float _2947 = _2944 * _2940;
                                float _2951 = 1.0 - (_2941 / (_2804 * _2804));
                                float _4000 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                                float _2952 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _2956 = sqrt(_2941) * _2819.w;
                                float _2958 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                                float _2959 = _2958 * _2958;
                                float _2962 = ((1.0 - _2959) * dot(vec3(_2945, _2946, _2947), vec3(_416, _419, _422))) + _2959;
                                float _2965 = _2956 * _2956;
                                float _2969 = (fma(_2161, _2847.z, fma(_2160, _2847.y, _2847.x * _2159)) + _2847.w) / _2910;
                                float _2970 = (fma(_2161, _2863.z, fma(_2160, _2863.y, _2863.x * _2159)) + _2863.w) / _2910;
                                float _2974 = 1.0 - dot(vec2(_2969, _2970), vec2(_2969, _2970));
                                float _4016 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _2976 = _2975 * (((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2952) / ((_2965 * 0.699999988079071044921875) + 1.0));
                                float _2988 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                                float _2989 = 1.0 - _492;
                                float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                                float _2997 = _2996 * _2996;
                                float _2998 = _2997 * _2997;
                                float _2999 = _2945 - _2445;
                                float _3000 = _2946 - _2446;
                                float _3001 = _2947 - _2447;
                                float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                                float _3009 = dot(vec3(_416, _419, _422), vec3((-0.0) - _2445, (-0.0) - _2446, (-0.0) - _2447));
                                float _4027 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3012 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                                float _3013 = dot(vec3(_416, _419, _422), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                                float _4038 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3016 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                                float _3021 = _2958 * _2997;
                                float _3022 = _3021 * _3021;
                                float _3028 = ((1.0 - _3022) * dot(vec3(_416, _419, _422), vec3(_2945, _2946, _2947))) + _3022;
                                float _4049 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3030 = 1.0 - _2997;
                                float _3040 = (0.5 / (((_3029 * ((_3012 * _3030) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _2997) * _3012))) * _3029;
                                float _4060 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3050 = (_2975 * _2952) * (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) / ((_3020 * _3020) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2976 * _2819.z;
                                frontier_phi_75_pred_1 = _2976 * _2819.y;
                                frontier_phi_75_pred_2 = _2976 * _2819.x;
                                frontier_phi_75_pred_3 = _3050 * _2831.z;
                                frontier_phi_75_pred_4 = _3050 * _2831.y;
                                frontier_phi_75_pred_5 = _3050 * _2831.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3059 = frontier_phi_75_pred;
                            _3058 = frontier_phi_75_pred_1;
                            _3057 = frontier_phi_75_pred_2;
                            _3056 = frontier_phi_75_pred_3;
                            _3055 = frontier_phi_75_pred_4;
                            _3054 = frontier_phi_75_pred_5;
                            _2761 = _3057 + _2774;
                            _2762 = _3058 + _2775;
                            _2763 = _3059 + _2776;
                            _2758 = _3054 + _2771;
                            _2759 = _3055 + _2772;
                            _2760 = _3056 + _2773;
                            if (_2778 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2778;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2763;
                        frontier_phi_69_pred_1 = _2762;
                        frontier_phi_69_pred_2 = _2761;
                        frontier_phi_69_pred_3 = _2760;
                        frontier_phi_69_pred_4 = _2759;
                        frontier_phi_69_pred_5 = _2758;
                    }
                    _2430 = frontier_phi_69_pred;
                    _2428 = frontier_phi_69_pred_1;
                    _2426 = frontier_phi_69_pred_2;
                    _2424 = frontier_phi_69_pred_3;
                    _2422 = frontier_phi_69_pred_4;
                    _2420 = frontier_phi_69_pred_5;
                    uint _2565 = _2564 + 1u;
                    if (_2565 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2558 = _2420;
                        _2559 = _2422;
                        _2560 = _2424;
                        _2561 = _2426;
                        _2562 = _2428;
                        _2563 = _2430;
                        _2564 = _2565;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2430;
                frontier_phi_57_58_ladder_1 = _2428;
                frontier_phi_57_58_ladder_2 = _2426;
                frontier_phi_57_58_ladder_3 = _2424;
                frontier_phi_57_58_ladder_4 = _2422;
                frontier_phi_57_58_ladder_5 = _2420;
            }
            else
            {
                frontier_phi_57_58_ladder = _2317;
                frontier_phi_57_58_ladder_1 = _2315;
                frontier_phi_57_58_ladder_2 = _2313;
                frontier_phi_57_58_ladder_3 = _2311;
                frontier_phi_57_58_ladder_4 = _2309;
                frontier_phi_57_58_ladder_5 = _2307;
            }
            _2419 = frontier_phi_57_58_ladder_5;
            _2421 = frontier_phi_57_58_ladder_4;
            _2423 = frontier_phi_57_58_ladder_3;
            _2425 = frontier_phi_57_58_ladder_2;
            _2427 = frontier_phi_57_58_ladder_1;
            _2429 = frontier_phi_57_58_ladder;
        }
        float _2434 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
        _2217 = (_2434 * _2425) + _1654;
        _2219 = (_2434 * _2427) + _1656;
        _2221 = (_2434 * _2429) + _1658;
        _2223 = ((_2419 * _461) * _2434) + _1999;
        _2225 = ((_2421 * _463) * _2434) + _2001;
        _2227 = ((_2423 * _464) * _2434) + _2003;
    }
    else
    {
        _2217 = _1654;
        _2219 = _1656;
        _2221 = _1658;
        _2223 = _1999;
        _2225 = _2001;
        _2227 = _2003;
    }
    float _4076 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4087 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4098 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4109 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _2252 = cbInstanceData._m0[_435 + 6u].w * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)));
    float _2257 = _394 / cbSceneParam._m0[86u].x;
    float _2258 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2272 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2257, _2258, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2274 = _2272.x;
    float _2275 = _2272.y;
    float _2276 = _2272.z;
    float _2277 = _2272.w;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2332 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2333 = _2332 / _328;
        float _2344 = _2333 * _379;
        float _2345 = _380 * _2333;
        float _2346 = (-0.0) - _2345;
        float _2347 = _2333 * _381;
        float _2349 = (cbSceneParam._m0[77u].w * _2346) / _2332;
        float _2350 = _2349 + cbSceneParam._m0[79u].w;
        float _2351 = cbSceneParam._m0[79u].w - _2345;
        float _2357 = sqrt(((_2344 * _2344) + (_2345 * _2345)) + (_2347 * _2347));
        float _2360 = (1.0 - (cbSceneParam._m0[77u].w / _2332)) * _2357;
        float _2365 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2367 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2520;
        if (abs((_2346 - _2349) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2520 = ((((_2350 > 0.0) ? exp2(_2365 * _2350) : (2.0 - exp2(_2367 * _2350))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2360;
        }
        else
        {
            float _2480 = 1.0 / cbSceneParam._m0[80u].x;
            float _2481 = isnan(_2351) ? _2350 : (isnan(_2350) ? _2351 : max(_2350, _2351));
            float _2482 = isnan(_2351) ? _2350 : (isnan(_2350) ? _2351 : min(_2350, _2351));
            float _2491 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : min(_2481, 0.0));
            float _2492 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : min(_2482, 0.0));
            _2520 = ((abs(_2357 / _2346) * cbSceneParam._m0[80u].y) * ((((_2491 - _2492) * 2.0) - ((exp2(_2365 * (isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0)))) - exp2(_2365 * (isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0))))) * _2480)) - ((exp2(_2367 * _2491) - exp2(_2367 * _2492)) * _2480))) + (_2360 * cbSceneParam._m0[80u].z);
        }
        vec4 _2522 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2257, _2258, 1.0), 0.0);
        float _2531 = exp2((_2520 * (-1.44269502162933349609375)) * (1.0 - _2522.w));
        float _2532 = log2(_2531);
        float _2548 = log2(_2277);
        _2369 = (exp2(_2548 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].x)) * _2522.x) / cbSceneParam._m0[78u].x)) + _2274;
        _2371 = (exp2(_2548 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].y)) * _2522.y) / cbSceneParam._m0[78u].y)) + _2275;
        _2373 = (exp2(_2548 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].z)) * _2522.z) / cbSceneParam._m0[78u].z)) + _2276;
        _2375 = _2531 * _2277;
    }
    else
    {
        _2369 = _2274;
        _2371 = _2275;
        _2373 = _2276;
        _2375 = _2277;
    }
    float _2387 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2388 = _2387 == 3.0;
    float _2389 = log2(_2375);
    float _2396 = exp2(_2389 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2217 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _476))) + ((_2223 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2397 = exp2(_2389 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2219 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _476))) + ((_2225 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2398 = exp2(_2389 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2221 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _476))) + ((_2227 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2407 = (_2387 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2407 * (_2388 ? _2396 : (_2396 + (cbSceneParam._m0[72u].w * _2369)));
    SV_Target.y = _2407 * (_2388 ? _2397 : (_2397 + (cbSceneParam._m0[72u].w * _2371)));
    SV_Target.z = _2407 * (_2388 ? _2398 : (_2398 + (cbSceneParam._m0[72u].w * _2373)));
    SV_Target.w = _2252;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2252;
}


