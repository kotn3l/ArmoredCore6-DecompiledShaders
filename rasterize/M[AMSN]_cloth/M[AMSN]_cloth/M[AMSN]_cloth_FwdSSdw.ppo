#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _853;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _234.x * cbMtdParam._m0[9u].x;
    float _242 = _234.y * cbMtdParam._m0[9u].y;
    float _243 = _234.z * cbMtdParam._m0[9u].z;
    float _244 = _234.w * TEXCOORD_1.z;
    vec4 _260 = texture(sampler2D(M_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _260.x + cbMtdParam._m0[10u].x;
    vec4 _275 = texture(sampler2D(M_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _279 = _275.z;
    float _283 = (_275.x * 2.0) + (-1.0);
    float _285 = (_275.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3216 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))));
    float _295 = fma(_292, _212, fma(_285, _204 * TANGENT.x, (_190 * _182) * _283));
    float _298 = fma(_292, _213, fma(_285, _204 * TANGENT.y, (_190 * _183) * _283));
    float _301 = fma(_292, _214, fma(_285, _204 * TANGENT.z, (_190 * _184) * _283));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3227 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _309 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _3238 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _310 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _3249 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3260 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3271 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3282 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _314 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _418 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _421 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _424 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _437 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = (_437 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _446 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) * cbInstanceData._m0[_440].x;
    float _447 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) * cbInstanceData._m0[_440].y;
    float _448 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_440].z;
    float _3293 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _3304 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _452 = 1.0 - _314;
    float _453 = _449 * _452;
    float _454 = _450 * _452;
    float _455 = _451 * _452;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _314;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _314;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _314;
    float _463 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    vec4 _475 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _478 = _475.x * TEXCOORD_1.w;
    float _479 = dot(vec3(_306, _307, _308), vec3(_388, _389, _390));
    float _482 = _479 * 2.0;
    float _486 = (_482 * _306) - _388;
    float _487 = (_482 * _307) - _389;
    float _488 = (_482 * _308) - _390;
    float _492 = abs(dot(vec3(_388, _389, _390), vec3(_306, _307, _308)));
    float _3326 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _494 = sqrt(_310);
    float _507 = exp2((_494 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_494 * 3.0));
    float _513 = (1.0 - _507) * ((_494 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _514 = _507 * _494;
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _852;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_550, cbModelParam._m0[26u].z, fma(_546, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542));
        float _581 = fma(_550, cbModelParam._m0[27u].z, fma(_546, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542));
        float _585 = fma(_550, cbModelParam._m0[28u].z, fma(_546, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542));
        float _610 = _542 + _306;
        float _611 = _546 + _307;
        float _612 = _550 + _308;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_646.x + (-0.5));
        float _682 = _680 * (_646.y + (-0.5));
        float _683 = _680 * (_646.z + (-0.5));
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_653.x + (-0.5));
        float _692 = _690 * (_653.y + (-0.5));
        float _693 = _690 * (_653.z + (-0.5));
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_660.x + (-0.5));
        float _702 = _700 * (_660.y + (-0.5));
        float _703 = _700 * (_660.z + (-0.5));
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = _681 * 0.5;
        float _718 = _691 * 0.5;
        float _719 = _701 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_306, _307, _308), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3374 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_746 + 1.0))) + _751) * _714;
        float _761 = _682 * 0.5;
        float _762 = _692 * 0.5;
        float _763 = _702 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_306, _307, _308), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3407 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_788 + 1.0))) + _793) * _715;
        float _803 = _683 * 0.5;
        float _804 = _693 * 0.5;
        float _805 = _703 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_306, _307, _308), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3440 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_830 + 1.0))) + _835) * _716;
        _852 = _683;
        _854 = _682;
        _855 = _681;
        _856 = _693;
        _857 = _692;
        _858 = _691;
        _859 = _703;
        _860 = _702;
        _861 = _701;
        _862 = _716;
        _863 = _715;
        _864 = _714;
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
    }
    else
    {
        _852 = _853;
        _854 = _853;
        _855 = _853;
        _856 = _853;
        _857 = _853;
        _858 = _853;
        _859 = _853;
        _860 = _853;
        _861 = _853;
        _862 = _853;
        _863 = _853;
        _864 = _853;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
    }
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _893 = fma(_550, cbModelParam._m0[30u].z, fma(_546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _542));
        float _897 = fma(_550, cbModelParam._m0[31u].z, fma(_546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _542));
        float _901 = fma(_550, cbModelParam._m0[32u].z, fma(_546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _542));
        float _924 = _542 + _306;
        float _925 = _546 + _307;
        float _926 = _550 + _308;
        float _936 = fma(_926, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_893 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_897 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[35u].z) + ((((((_901 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_959.x + (-0.5));
        float _994 = _992 * (_959.y + (-0.5));
        float _995 = _992 * (_959.z + (-0.5));
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_966.x + (-0.5));
        float _1004 = _1002 * (_966.y + (-0.5));
        float _1005 = _1002 * (_966.z + (-0.5));
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_973.x + (-0.5));
        float _1014 = _1012 * (_973.y + (-0.5));
        float _1015 = _1012 * (_973.z + (-0.5));
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_306, _307, _308), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3503 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1056 + 1.0))) + _1061) * _1026;
        float _1071 = _994 * 0.5;
        float _1072 = _1004 * 0.5;
        float _1073 = _1014 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_306, _307, _308), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3536 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1098 + 1.0))) + _1103) * _1027;
        float _1113 = _995 * 0.5;
        float _1114 = _1005 * 0.5;
        float _1115 = _1015 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_306, _307, _308), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3569 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1140 + 1.0))) + _1145) * _1028;
        _1162 = _995;
        _1163 = _994;
        _1164 = _993;
        _1165 = _1005;
        _1166 = _1004;
        _1167 = _1003;
        _1168 = _1015;
        _1169 = _1014;
        _1170 = _1013;
        _1171 = _1028;
        _1172 = _1027;
        _1173 = _1026;
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _853;
        _1163 = _853;
        _1164 = _853;
        _1165 = _853;
        _1166 = _853;
        _1167 = _853;
        _1168 = _853;
        _1169 = _853;
        _1170 = _853;
        _1171 = _853;
        _1172 = _853;
        _1173 = _853;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1209 = fma(_1188, cbSceneParam._m0[89u].z, fma(_1187, cbSceneParam._m0[89u].y, _1186 * cbSceneParam._m0[89u].x));
    float _1212 = fma(_1188, cbSceneParam._m0[90u].z, fma(_1187, cbSceneParam._m0[90u].y, _1186 * cbSceneParam._m0[90u].x));
    float _1215 = fma(_1188, cbSceneParam._m0[91u].z, fma(_1187, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1186));
    float _1230 = _486 * 0.5;
    float _1231 = _487 * 0.5;
    float _1232 = _488 * 0.5;
    float _1233 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1236 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1239 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1273;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1246 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_852, _856, _859, _862));
        float _1250 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_854, _857, _860, _863));
        float _1254 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_855, _858, _861, _864));
        float _1261 = dot(vec4(cbModelParam._m0[39u]), vec4(_1230, _1231, _1232, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1261) ? 0.0 : (isnan(0.0) ? _1261 : max(0.0, _1261))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1284;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1275 = dot(vec4(cbModelParam._m0[40u]), vec4(_1230, _1231, _1232, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1288 = (_1284 * cbModelParam._m0[1u].x) + (_1273 * (1.0 - cbModelParam._m0[1u].x));
    float _1298 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _310);
    float _1299 = isnan(_1298) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1298 : min(cbModelParam._m0[25u].z, _1298));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1348 = fma(_550, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542)) + cbModelParam._m0[13u].w;
        float _1352 = fma(_550, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542)) + cbModelParam._m0[14u].w;
        float _1356 = fma(_550, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542)) + cbModelParam._m0[15u].w;
        float _1359 = fma(_488, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486));
        float _1362 = fma(_488, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486));
        float _1365 = fma(_488, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486));
        float _1393;
        if (_1359 > 0.0)
        {
            _1393 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1393 = frontier_phi_16_14_ladder;
        }
        float _1622;
        if (_1362 > 0.0)
        {
            _1622 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1622 = frontier_phi_25_21_ladder;
        }
        float _1879;
        if (_1365 > 0.0)
        {
            _1879 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1879 = frontier_phi_37_32_ladder;
        }
        float _1881 = isnan(_1622) ? _1393 : (isnan(_1393) ? _1622 : min(_1393, _1622));
        float _1882 = isnan(_1879) ? _1881 : (isnan(_1881) ? _1879 : min(_1881, _1879));
        float _1886 = (_1882 * _1359) + _1348;
        float _1887 = (_1882 * _1362) + _1352;
        float _1888 = (_1882 * _1365) + _1356;
        float _1889 = _1882 * 9.9999997473787516355514526367188e-05;
        float _1891 = (-1.0) - _1889;
        float _1893 = _1889 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1888 > _1893) || ((_1888 < _1891) || ((_1887 > _1893) || ((_1887 < _1891) || ((_1886 < _1891) || (_1886 > _1893))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1888, cbModelParam._m0[9u].z, fma(_1887, cbModelParam._m0[9u].y, _1886 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1888, cbModelParam._m0[10u].z, fma(_1887, cbModelParam._m0[10u].y, _1886 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1888, cbModelParam._m0[11u].z, fma(_1887, cbModelParam._m0[11u].y, _1886 * cbModelParam._m0[11u].x))), _1299);
            frontier_phi_15_37_ladder = _2016.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2016.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2016.x * cbModelParam._m0[1u].y;
        }
        _1381 = frontier_phi_15_37_ladder_2;
        _1383 = frontier_phi_15_37_ladder_1;
        _1385 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_486, _487, _488), _1299);
        _1381 = _1369.x * cbModelParam._m0[1u].y;
        _1383 = _1369.y * cbModelParam._m0[1u].y;
        _1385 = _1369.z * cbModelParam._m0[1u].y;
    }
    float _1389 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _310);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1389 : min(cbModelParam._m0[25u].w, _1389));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1447 = fma(_550, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542)) + cbModelParam._m0[21u].w;
        float _1451 = fma(_550, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542)) + cbModelParam._m0[22u].w;
        float _1455 = fma(_550, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542)) + cbModelParam._m0[23u].w;
        float _1458 = fma(_488, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486));
        float _1461 = fma(_488, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486));
        float _1464 = fma(_488, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486));
        float _1627;
        if (_1458 > 0.0)
        {
            _1627 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1627 = frontier_phi_27_23_ladder;
        }
        float _1906;
        if (_1461 > 0.0)
        {
            _1906 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1906 = frontier_phi_39_34_ladder;
        }
        float _2119;
        if (_1464 > 0.0)
        {
            _2119 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2119 = frontier_phi_48_45_ladder;
        }
        float _2121 = isnan(_1906) ? _1627 : (isnan(_1627) ? _1906 : min(_1627, _1906));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1458) + _1447;
        float _2127 = (_2122 * _1461) + _1451;
        float _2128 = (_2122 * _1464) + _1455;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2129;
        float _2132 = _2129 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2128 > _2132) || ((_2128 < _2130) || ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 < _2130) || (_2126 > _2132))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2128, cbModelParam._m0[17u].z, fma(_2127, cbModelParam._m0[17u].y, _2126 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2128, cbModelParam._m0[18u].z, fma(_2127, cbModelParam._m0[18u].y, _2126 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2128, cbModelParam._m0[19u].z, fma(_2127, cbModelParam._m0[19u].y, _2126 * cbModelParam._m0[19u].x))), _1390);
            frontier_phi_24_48_ladder = _2328.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2328.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2328.x * cbModelParam._m0[1u].z;
        }
        _1483 = frontier_phi_24_48_ladder_2;
        _1485 = frontier_phi_24_48_ladder_1;
        _1487 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_486, _487, _488), _1390);
        _1483 = _1467.x * cbModelParam._m0[1u].z;
        _1485 = _1467.y * cbModelParam._m0[1u].z;
        _1487 = _1467.z * cbModelParam._m0[1u].z;
    }
    float _1500 = (((_513 * _463) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1502 = (((_513 * _465) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_513 * _466) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1507 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, _1500 * cbSceneParam._m0[91u].x));
    vec4 _1521 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_396, _397));
    float _1523 = _1521.w;
    float _1535 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1523);
    float _1536 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1523);
    float _1537 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1523);
    uvec4 _1541 = floatBitsToUint(cbInstanceData._m0[_437 + 5u]);
    uint _1543 = _1541.x * 14u;
    uint _1544 = _1543 + 13u;
    float _1551 = _478 + (-1.0);
    float _1556 = (cbLight._m0[_1544].x * _1551) + 1.0;
    float _1557 = (cbLight._m0[_1544].y * _1551) + 1.0;
    float _1558 = (cbLight._m0[_1544].z * _1551) + 1.0;
    float _1559 = (cbLight._m0[_1544].w * _1551) + 1.0;
    uint _1560 = _1543 + 5u;
    float _1566 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
    uint _1570 = _1543 + 4u;
    float _1580 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1584 = _1543 | 1u;
    float _1595 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_306, _307, _308));
    float _1598 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_306, _307, _308));
    float _3705 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _3716 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1603 = (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.3183098733425140380859375;
    float _1605 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.3183098733425140380859375;
    float _1612 = ((cbLight._m0[_1560].x * _1566) * _1605) + (((cbLight._m0[_1570].x * _1535) * _1580) * _1603);
    float _1613 = ((_1566 * cbLight._m0[_1560].y) * _1605) + (((cbLight._m0[_1570].y * _1536) * _1580) * _1603);
    float _1614 = ((_1566 * cbLight._m0[_1560].z) * _1605) + (((cbLight._m0[_1570].z * _1537) * _1580) * _1603);
    uvec4 _1619 = floatBitsToUint(cbLight._m0[_1543 + 12u]);
    bool _1621 = _1619.x == 0u;
    float _1632;
    float _1634;
    float _1636;
    if (_1621)
    {
        _1632 = _1612;
        _1634 = _1613;
        _1636 = _1614;
    }
    else
    {
        uint _1640 = _1543 + 6u;
        float _1656 = (dot(vec3(cbLight._m0[_1543 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1657 = _1656 * _1656;
        float _3727 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1659 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1632 = (((cbLight._m0[_1640].x * 0.3183098733425140380859375) * _1658) * _1659) + _1612;
        _1634 = (((cbLight._m0[_1640].y * 0.3183098733425140380859375) * _1658) * _1659) + _1613;
        _1636 = (((cbLight._m0[_1640].z * 0.3183098733425140380859375) * _1658) * _1659) + _1614;
    }
    bool _1639 = _1619.y == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1639)
    {
        _1677 = _1632;
        _1679 = _1634;
        _1681 = _1636;
    }
    else
    {
        uint _1850 = _1543 + 7u;
        float _1866 = (dot(vec3(cbLight._m0[_1543 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1867 = _1866 * _1866;
        float _3743 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1869 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1677 = (((cbLight._m0[_1850].x * 0.3183098733425140380859375) * _1868) * _1869) + _1632;
        _1679 = (((cbLight._m0[_1850].y * 0.3183098733425140380859375) * _1868) * _1869) + _1634;
        _1681 = (((cbLight._m0[_1850].z * 0.3183098733425140380859375) * _1868) * _1869) + _1636;
    }
    uint _1684 = _1543 + 8u;
    float _1697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1543].w)) * _310) * 0.949999988079071044921875);
    float _1698 = _1697 * _1697;
    float _1699 = cbLight._m0[_1543].x + _388;
    float _1700 = cbLight._m0[_1543].y + _389;
    float _1701 = cbLight._m0[_1543].z + _390;
    float _1705 = inversesqrt(dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701)));
    float _1706 = _1705 * _1699;
    float _1707 = _1705 * _1700;
    float _1708 = _1705 * _1701;
    float _1709 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1543].xyz));
    float _3759 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _1713 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1714 = dot(vec3(_306, _307, _308), vec3(_1706, _1707, _1708));
    float _3781 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1718 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_1706, _1707, _1708));
    float _3792 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1722 = _1698 * _1698;
    float _1726 = ((_1717 * _1717) * (_1722 + (-1.0))) + 1.0;
    float _1734 = exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0);
    float _1735 = 0.959999978542327880859375 - _460;
    float _1737 = 0.959999978542327880859375 - _461;
    float _1738 = 0.959999978542327880859375 - _462;
    float _1745 = 1.0 - _1698;
    float _1756 = (0.5 / (((_1713 * ((_1712 * _1745) + _1698)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1745) + _1698) * _1712))) * _1712;
    float _3803 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1758 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1722 / ((_1726 * _1726) * 3.141590118408203125));
    uint _1772 = _1543 + 9u;
    float _1783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1584].w)) * _310) * 0.949999988079071044921875);
    float _1784 = _1783 * _1783;
    float _1785 = cbLight._m0[_1584].x + _388;
    float _1786 = cbLight._m0[_1584].y + _389;
    float _1787 = cbLight._m0[_1584].z + _390;
    float _1791 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
    float _1792 = _1791 * _1785;
    float _1793 = _1791 * _1786;
    float _1794 = _1791 * _1787;
    float _1795 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1584].xyz));
    float _3814 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1799 = dot(vec3(_306, _307, _308), vec3(_1792, _1793, _1794));
    float _3825 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _1803 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_1792, _1793, _1794));
    float _3836 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1807 = _1784 * _1784;
    float _1811 = ((_1802 * _1802) * (_1807 + (-1.0))) + 1.0;
    float _1818 = exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0);
    float _1825 = 1.0 - _1784;
    float _1835 = (0.5 / (((_1713 * ((_1798 * _1825) + _1784)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1825) + _1784) * _1798))) * _1798;
    float _3847 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1807 / ((_1811 * _1811) * 3.141590118408203125));
    float _1847 = (((((_1818 * _1735) + _463) * cbLight._m0[_1772].x) * _1837) * _1566) + ((((cbLight._m0[_1684].x * _1535) * ((_1734 * _1735) + _463)) * _1758) * _1580);
    float _1848 = (((((_1818 * _1737) + _465) * cbLight._m0[_1772].y) * _1837) * _1566) + ((((cbLight._m0[_1684].y * _1536) * ((_1734 * _1737) + _465)) * _1758) * _1580);
    float _1849 = (((((_1818 * _1738) + _466) * cbLight._m0[_1772].z) * _1837) * _1566) + ((((cbLight._m0[_1684].z * _1537) * ((_1734 * _1738) + _466)) * _1758) * _1580);
    float _1911;
    float _1913;
    float _1915;
    if (_1621)
    {
        _1911 = _1847;
        _1913 = _1848;
        _1915 = _1849;
    }
    else
    {
        uint _1917 = _1543 + 2u;
        uint _1921 = _1543 + 10u;
        float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _310) * 0.949999988079071044921875);
        float _1936 = _1935 * _1935;
        float _1937 = cbLight._m0[_1917].x + _388;
        float _1938 = cbLight._m0[_1917].y + _389;
        float _1939 = cbLight._m0[_1917].z + _390;
        float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
        float _1944 = _1943 * _1937;
        float _1945 = _1943 * _1938;
        float _1946 = _1943 * _1939;
        float _1947 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1917].xyz));
        float _3858 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1950 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1951 = dot(vec3(_306, _307, _308), vec3(_1944, _1945, _1946));
        float _3869 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1955 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_1944, _1945, _1946));
        float _3880 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1959 = _1936 * _1936;
        float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
        float _1970 = exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0);
        float _1977 = 1.0 - _1936;
        float _1987 = (0.5 / (((_1713 * ((_1950 * _1977) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1977) + _1936) * _1950))) * _1950;
        float _3891 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1989 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
        float _1990 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1911 = (((((_1970 * _1735) + _463) * cbLight._m0[_1921].x) * _1989) * _1990) + _1847;
        _1913 = (((((_1970 * _1737) + _465) * cbLight._m0[_1921].y) * _1989) * _1990) + _1848;
        _1915 = (((((_1970 * _1738) + _466) * cbLight._m0[_1921].z) * _1989) * _1990) + _1849;
    }
    float _2025;
    float _2027;
    float _2029;
    if (_1639)
    {
        _2025 = _1911;
        _2027 = _1913;
        _2029 = _1915;
    }
    else
    {
        uint _2036 = _1543 + 3u;
        uint _2040 = _1543 + 11u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _310) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _388;
        float _2057 = cbLight._m0[_2036].y + _389;
        float _2058 = cbLight._m0[_2036].z + _390;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2036].xyz));
        float _3907 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _2070 = dot(vec3(_306, _307, _308), vec3(_2063, _2064, _2065));
        float _3918 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _3929 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
        float _2096 = 1.0 - _2055;
        float _2106 = (0.5 / (((_1713 * ((_2069 * _2096) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _2096) + _2055) * _2069))) * _2069;
        float _3940 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _2025 = (((((_2089 * _1735) + _463) * cbLight._m0[_2040].x) * _2108) * _2109) + _1911;
        _2027 = (((((_2089 * _1737) + _465) * cbLight._m0[_2040].y) * _2108) * _2109) + _1913;
        _2029 = (((((_2089 * _1738) + _466) * cbLight._m0[_2040].z) * _2108) * _2109) + _1915;
    }
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_1541.y == 0u)
    {
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2184;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2184;
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2184;
        uvec4 _2199 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2200 = _2199.x;
        uint _2211 = uint((float(_2199.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2200))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2200)));
        float _2221 = (log2(_2187 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2222 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        uint _2225 = uint(isnan(14.0) ? _2222 : (isnan(_2222) ? 14.0 : min(_2222, 14.0)));
        uvec4 _2230 = texelFetch(g_lightClusterGridBuffer, int(((_2225 << 2u) + (_2211 << 6u)) >> 2u));
        uint _2231 = _2230.x;
        uint _2232 = _2199.z;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((((1u << ((_2232 >> 4u) & 15u)) + 4294967295u) & _2231) == 0u) || ((_2232 & 240u) == 0u))
        {
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
        }
        else
        {
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            uint _2483 = 0u;
            uint _2492;
            bool _2493;
            for (;;)
            {
                _2492 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                _2493 = _2492 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2493)
                {
                    frontier_phi_63_pred = _2482;
                    frontier_phi_63_pred_1 = _2481;
                    frontier_phi_63_pred_2 = _2480;
                    frontier_phi_63_pred_3 = _2479;
                    frontier_phi_63_pred_4 = _2478;
                    frontier_phi_63_pred_5 = _2477;
                }
                else
                {
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    uint _2607;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2492;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    for (;;)
                    {
                        uint _2611 = uint(findLSB(_2607)) + (_2483 << 5u);
                        uint _2608 = (_2607 + 4294967295u) & _2607;
                        uint _2613 = _2611 * 48u;
                        vec4 _2627 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2633 = (_2611 * 48u) + 4u;
                        vec4 _2646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2633)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 3u)).x));
                        uint _2652 = (_2611 * 48u) + 8u;
                        vec3 _2663 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x));
                        float _2667 = _2627.x - _2185;
                        float _2668 = _2627.y - _2186;
                        float _2669 = _2627.z - _2187;
                        float _2670 = dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669));
                        float _2673 = inversesqrt(_2670);
                        float _2674 = _2673 * _2667;
                        float _2675 = _2673 * _2668;
                        float _2676 = _2673 * _2669;
                        float _2677 = dot(vec3(_418, _421, _424), vec3(_2674, _2675, _2676));
                        float _2682 = 1.0 - (_2670 * _2627.w);
                        float _3966 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2683 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                        float _2684 = sqrt(_2670) * _2646.w;
                        float _2687 = 1.39999997615814208984375 / (_2684 + 1.39999997615814208984375);
                        float _2688 = _2687 * _2687;
                        float _2691 = ((1.0 - _2688) * _2677) + _2688;
                        float _2694 = _2684 * _2684;
                        float _2698 = ((isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0))) * _2683) / ((_2694 * 0.699999988079071044921875) + 1.0);
                        float _2702 = (-0.0) - _2185;
                        float _2703 = (-0.0) - _2186;
                        float _2704 = (-0.0) - _2187;
                        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
                        float _2709 = _2708 * _2702;
                        float _2710 = _2708 * _2703;
                        float _2711 = _2708 * _2704;
                        float _2719 = exp2(log2(1.0 / ((_2694 * 3.5) + 5.0)) * 0.25);
                        float _2720 = 1.0 - _494;
                        float _2727 = sqrt(1.0 - ((1.0 - (_2720 * _2720)) * (1.0 - (_2719 * _2719))));
                        float _2728 = _2727 * _2727;
                        float _2729 = _2728 * _2728;
                        float _2730 = _2709 + _2674;
                        float _2731 = _2710 + _2675;
                        float _2732 = _2711 + _2676;
                        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
                        float _2740 = dot(vec3(_418, _421, _424), vec3(_2709, _2710, _2711));
                        float _3982 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                        float _2743 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2744 = dot(vec3(_418, _421, _424), vec3(_2736 * _2730, _2736 * _2731, _2736 * _2732));
                        float _3993 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2747 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2751 = ((_2747 * _2747) * (_2729 + (-1.0))) + 1.0;
                        float _2752 = _2687 * _2728;
                        float _2753 = _2752 * _2752;
                        float _2756 = ((1.0 - _2753) * _2677) + _2753;
                        float _4004 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2758 = 1.0 - _2728;
                        float _2768 = (0.5 / (((_2757 * ((_2743 * _2758) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _2758) + _2728) * _2743))) * _2757;
                        float _4015 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2779 = (((_2729 * 3.1415927410125732421875) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) / ((_2751 * _2751) * ((_2694 * 2.1991131305694580078125) + 3.141590118408203125))) * _2683;
                        _2536 = (_2698 * _2646.x) + _2604;
                        _2537 = (_2698 * _2646.y) + _2605;
                        _2538 = (_2698 * _2646.z) + _2606;
                        _2533 = (_2779 * _2663.x) + _2601;
                        _2534 = (_2779 * _2663.y) + _2602;
                        _2535 = (_2779 * _2663.z) + _2603;
                        if (_2608 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2608;
                        }
                    }
                    frontier_phi_63_pred = _2538;
                    frontier_phi_63_pred_1 = _2537;
                    frontier_phi_63_pred_2 = _2536;
                    frontier_phi_63_pred_3 = _2535;
                    frontier_phi_63_pred_4 = _2534;
                    frontier_phi_63_pred_5 = _2533;
                }
                _2344 = frontier_phi_63_pred;
                _2342 = frontier_phi_63_pred_1;
                _2340 = frontier_phi_63_pred_2;
                _2338 = frontier_phi_63_pred_3;
                _2336 = frontier_phi_63_pred_4;
                _2334 = frontier_phi_63_pred_5;
                uint _2484 = _2483 + 1u;
                if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2477 = _2334;
                    _2478 = _2336;
                    _2479 = _2338;
                    _2480 = _2340;
                    _2481 = _2342;
                    _2482 = _2344;
                    _2483 = _2484;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
        }
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.z;
        uint _2350 = (_2348 >> 8u) & 15u;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((4294967295u << _2350) & _2231) == 0u)
        {
            _2445 = _2333;
            _2447 = _2335;
            _2449 = _2337;
            _2451 = _2339;
            _2453 = _2341;
            _2455 = _2343;
        }
        else
        {
            float _2470 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
            float _2471 = _2470 * _2185;
            float _2472 = _2470 * _2186;
            float _2473 = _2470 * _2187;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2350 < ((_2348 >> 12u) & 15u))
            {
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2584 = _2333;
                float _2585 = _2335;
                float _2586 = _2337;
                float _2587 = _2339;
                float _2588 = _2341;
                float _2589 = _2343;
                uint _2590 = _2350;
                uint _2599;
                bool _2600;
                for (;;)
                {
                    _2599 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2590 << 2u)) >> 2u)).x;
                    _2600 = _2599 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2600)
                    {
                        frontier_phi_69_pred = _2589;
                        frontier_phi_69_pred_1 = _2588;
                        frontier_phi_69_pred_2 = _2587;
                        frontier_phi_69_pred_3 = _2586;
                        frontier_phi_69_pred_4 = _2585;
                        frontier_phi_69_pred_5 = _2584;
                    }
                    else
                    {
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        uint _2803 = _2599;
                        uint _2804;
                        vec4 _2829;
                        float _2830;
                        vec4 _2845;
                        vec3 _2857;
                        vec4 _2873;
                        vec4 _2889;
                        float _2936;
                        bool _2937;
                        for (;;)
                        {
                            uint _2814 = ((_2590 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2803));
                            _2804 = (_2803 + 4294967295u) & _2803;
                            uint _2816 = _2814 * 40u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            _2830 = _2829.w;
                            uint _2832 = (_2814 * 40u) + 4u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2847 = (_2814 * 40u) + 8u;
                            _2857 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x));
                            uint _2860 = (_2814 * 40u) + 16u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2876 = (_2814 * 40u) + 20u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2814 * 40u) + 24u;
                            vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2911 = (_2814 * 40u) + 28u;
                            vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2936 = fma(_2187, _2924.z, fma(_2186, _2924.y, _2924.x * _2185)) + _2924.w;
                            _2937 = !((fma(_2187, _2905.z, fma(_2186, _2905.y, _2905.x * _2185)) + _2905.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2937)
                            {
                                float _2964 = _2829.x - _2185;
                                float _2965 = _2829.y - _2186;
                                float _2966 = _2829.z - _2187;
                                float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                                float _2970 = inversesqrt(_2967);
                                float _2971 = _2970 * _2964;
                                float _2972 = _2970 * _2965;
                                float _2973 = _2970 * _2966;
                                float _2977 = 1.0 - (_2967 / (_2830 * _2830));
                                float _4026 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _2982 = sqrt(_2967) * _2845.w;
                                float _2984 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                                float _2985 = _2984 * _2984;
                                float _2988 = ((1.0 - _2985) * dot(vec3(_2971, _2972, _2973), vec3(_418, _421, _424))) + _2985;
                                float _2991 = _2982 * _2982;
                                float _2995 = (fma(_2187, _2873.z, fma(_2186, _2873.y, _2873.x * _2185)) + _2873.w) / _2936;
                                float _2996 = (fma(_2187, _2889.z, fma(_2186, _2889.y, _2889.x * _2185)) + _2889.w) / _2936;
                                float _3000 = 1.0 - dot(vec2(_2995, _2996), vec2(_2995, _2996));
                                float _4042 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3001 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3002 = _3001 * (((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2978) / ((_2991 * 0.699999988079071044921875) + 1.0));
                                float _3014 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                                float _3015 = 1.0 - _494;
                                float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                                float _3023 = _3022 * _3022;
                                float _3024 = _3023 * _3023;
                                float _3025 = _2971 - _2471;
                                float _3026 = _2972 - _2472;
                                float _3027 = _2973 - _2473;
                                float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                                float _3035 = dot(vec3(_418, _421, _424), vec3((-0.0) - _2471, (-0.0) - _2472, (-0.0) - _2473));
                                float _4053 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3038 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3039 = dot(vec3(_418, _421, _424), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                                float _4064 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3042 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                                float _3047 = _2984 * _3023;
                                float _3048 = _3047 * _3047;
                                float _3054 = ((1.0 - _3048) * dot(vec3(_418, _421, _424), vec3(_2971, _2972, _2973))) + _3048;
                                float _4075 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3056 = 1.0 - _3023;
                                float _3066 = (0.5 / (((_3055 * ((_3038 * _3056) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3023) * _3038))) * _3055;
                                float _4086 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3076 = (_3001 * _2978) * (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) / ((_3046 * _3046) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3002 * _2845.z;
                                frontier_phi_75_pred_1 = _3002 * _2845.y;
                                frontier_phi_75_pred_2 = _3002 * _2845.x;
                                frontier_phi_75_pred_3 = _3076 * _2857.z;
                                frontier_phi_75_pred_4 = _3076 * _2857.y;
                                frontier_phi_75_pred_5 = _3076 * _2857.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3085 = frontier_phi_75_pred;
                            _3084 = frontier_phi_75_pred_1;
                            _3083 = frontier_phi_75_pred_2;
                            _3082 = frontier_phi_75_pred_3;
                            _3081 = frontier_phi_75_pred_4;
                            _3080 = frontier_phi_75_pred_5;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            if (_2804 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2804;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2789;
                        frontier_phi_69_pred_1 = _2788;
                        frontier_phi_69_pred_2 = _2787;
                        frontier_phi_69_pred_3 = _2786;
                        frontier_phi_69_pred_4 = _2785;
                        frontier_phi_69_pred_5 = _2784;
                    }
                    _2456 = frontier_phi_69_pred;
                    _2454 = frontier_phi_69_pred_1;
                    _2452 = frontier_phi_69_pred_2;
                    _2450 = frontier_phi_69_pred_3;
                    _2448 = frontier_phi_69_pred_4;
                    _2446 = frontier_phi_69_pred_5;
                    uint _2591 = _2590 + 1u;
                    if (_2591 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2584 = _2446;
                        _2585 = _2448;
                        _2586 = _2450;
                        _2587 = _2452;
                        _2588 = _2454;
                        _2589 = _2456;
                        _2590 = _2591;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2456;
                frontier_phi_57_58_ladder_1 = _2454;
                frontier_phi_57_58_ladder_2 = _2452;
                frontier_phi_57_58_ladder_3 = _2450;
                frontier_phi_57_58_ladder_4 = _2448;
                frontier_phi_57_58_ladder_5 = _2446;
            }
            else
            {
                frontier_phi_57_58_ladder = _2343;
                frontier_phi_57_58_ladder_1 = _2341;
                frontier_phi_57_58_ladder_2 = _2339;
                frontier_phi_57_58_ladder_3 = _2337;
                frontier_phi_57_58_ladder_4 = _2335;
                frontier_phi_57_58_ladder_5 = _2333;
            }
            _2445 = frontier_phi_57_58_ladder_5;
            _2447 = frontier_phi_57_58_ladder_4;
            _2449 = frontier_phi_57_58_ladder_3;
            _2451 = frontier_phi_57_58_ladder_2;
            _2453 = frontier_phi_57_58_ladder_1;
            _2455 = frontier_phi_57_58_ladder;
        }
        float _2460 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        _2243 = (_2460 * _2451) + _1677;
        _2245 = (_2460 * _2453) + _1679;
        _2247 = (_2460 * _2455) + _1681;
        _2249 = ((_2445 * _463) * _2460) + _2025;
        _2251 = ((_2447 * _465) * _2460) + _2027;
        _2253 = ((_2449 * _466) * _2460) + _2029;
    }
    else
    {
        _2243 = _1677;
        _2245 = _1679;
        _2247 = _1681;
        _2249 = _2025;
        _2251 = _2027;
        _2253 = _2029;
    }
    float _4102 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4113 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4124 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4135 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _2278 = cbInstanceData._m0[_437 + 6u].w * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)));
    float _2283 = _396 / cbSceneParam._m0[86u].x;
    float _2284 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2300 = _2298.x;
    float _2301 = _2298.y;
    float _2302 = _2298.z;
    float _2303 = _2298.w;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2358 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2359 = _2358 / _330;
        float _2370 = _2359 * _381;
        float _2371 = _382 * _2359;
        float _2372 = (-0.0) - _2371;
        float _2373 = _2359 * _383;
        float _2375 = (cbSceneParam._m0[77u].w * _2372) / _2358;
        float _2376 = _2375 + cbSceneParam._m0[79u].w;
        float _2377 = cbSceneParam._m0[79u].w - _2371;
        float _2383 = sqrt(((_2370 * _2370) + (_2371 * _2371)) + (_2373 * _2373));
        float _2386 = (1.0 - (cbSceneParam._m0[77u].w / _2358)) * _2383;
        float _2391 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2393 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2546;
        if (abs((_2372 - _2375) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2546 = ((((_2376 > 0.0) ? exp2(_2391 * _2376) : (2.0 - exp2(_2393 * _2376))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2386;
        }
        else
        {
            float _2506 = 1.0 / cbSceneParam._m0[80u].x;
            float _2507 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : max(_2376, _2377));
            float _2508 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : min(_2376, _2377));
            float _2517 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : min(_2507, 0.0));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            _2546 = ((abs(_2383 / _2372) * cbSceneParam._m0[80u].y) * ((((_2517 - _2518) * 2.0) - ((exp2(_2391 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0)))) - exp2(_2391 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0))))) * _2506)) - ((exp2(_2393 * _2517) - exp2(_2393 * _2518)) * _2506))) + (_2386 * cbSceneParam._m0[80u].z);
        }
        vec4 _2548 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, 1.0), 0.0);
        float _2557 = exp2((_2546 * (-1.44269502162933349609375)) * (1.0 - _2548.w));
        float _2558 = log2(_2557);
        float _2574 = log2(_2303);
        _2395 = (exp2(_2574 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2558 * cbSceneParam._m0[78u].x)) * _2548.x) / cbSceneParam._m0[78u].x)) + _2300;
        _2397 = (exp2(_2574 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2558 * cbSceneParam._m0[78u].y)) * _2548.y) / cbSceneParam._m0[78u].y)) + _2301;
        _2399 = (exp2(_2574 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2558 * cbSceneParam._m0[78u].z)) * _2548.z) / cbSceneParam._m0[78u].z)) + _2302;
        _2401 = _2557 * _2303;
    }
    else
    {
        _2395 = _2300;
        _2397 = _2301;
        _2399 = _2302;
        _2401 = _2303;
    }
    float _2413 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2414 = _2413 == 3.0;
    float _2415 = log2(_2401);
    float _2422 = exp2(_2415 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2243 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _478))) + ((_2249 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2423 = exp2(_2415 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2245 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _478))) + ((_2251 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2424 = exp2(_2415 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2247 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _478))) + ((_2253 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2433 = (_2413 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2433 * (_2414 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2395)));
    SV_Target.y = _2433 * (_2414 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2397)));
    SV_Target.z = _2433 * (_2414 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2399)));
    SV_Target.w = _2278;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2278;
}


