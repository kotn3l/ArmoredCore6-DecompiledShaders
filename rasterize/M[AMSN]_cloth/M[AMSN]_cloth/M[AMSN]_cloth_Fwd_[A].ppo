#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _896;
float _3289;
float _3290;
float _3291;
float _3292;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _242 = _236.w;
    float _243 = _236.x * cbMtdParam._m0[9u].x;
    float _244 = _236.y * cbMtdParam._m0[9u].y;
    float _245 = _236.z * cbMtdParam._m0[9u].z;
    float _246 = _242 * TEXCOORD_1.z;
    vec4 _262 = texture(sampler2D(M_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _262.x + cbMtdParam._m0[10u].x;
    vec4 _277 = texture(sampler2D(M_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3301 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))));
    float _297 = fma(_294, _214, fma(_287, _206 * TANGENT.x, (_192 * _184) * _285));
    float _300 = fma(_294, _215, fma(_287, _206 * TANGENT.y, (_192 * _185) * _285));
    float _303 = fma(_294, _216, fma(_287, _206 * TANGENT.z, (_192 * _186) * _285));
    float _307 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _308 = _307 * _297;
    float _309 = _307 * _300;
    float _310 = _307 * _303;
    float _3312 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _311 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _312 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3345 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3356 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3367 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _316 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    vec4 _397 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _399 = _397.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _575 = sqrt(((_383 * _383) + (_384 * _384)) + (_385 * _385));
        float _581 = (cbMatDynParam._m0[5u].x * _575) + cbMatDynParam._m0[5u].y;
        float _3378 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _582 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _586 = (cbMatDynParam._m0[5u].z * _575) + cbMatDynParam._m0[5u].w;
        float _3389 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) - _582)) + _582) < ((_399 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _411 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _412 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _435 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _438 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3400 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _466 = 1.0 - _316;
    float _467 = _463 * _466;
    float _468 = _464 * _466;
    float _469 = _465 * _466;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _316;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _316;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _316;
    float _477 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _411, cbSceneParam._m0[86u].y * _412));
    float _492 = _489.x * TEXCOORD_1.w;
    float _493 = dot(vec3(_308, _309, _310), vec3(_390, _391, _392));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _308) - _390;
    float _501 = (_496 * _309) - _391;
    float _502 = (_496 * _310) - _392;
    float _506 = abs(dot(vec3(_390, _391, _392), vec3(_308, _309, _310)));
    float _3433 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = sqrt(_312);
    float _521 = exp2((_508 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_508 * 3.0));
    float _527 = (1.0 - _521) * ((_508 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _528 = _521 * _508;
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _895;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = fma(_564, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556));
        float _624 = fma(_564, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556));
        float _628 = fma(_564, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556));
        float _653 = _556 + _308;
        float _654 = _560 + _309;
        float _655 = _564 + _310;
        float _665 = fma(_655, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653)) - _620;
        float _666 = fma(_655, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653)) - _624;
        float _667 = fma(_655, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653)) - _628;
        float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
        float _684 = ((_671 * _665) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_620 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_671 * _666) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_624 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_671 * _667) / cbModelParam._m0[34u].z) + ((((((_628 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _723 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_689.x + (-0.5));
        float _725 = _723 * (_689.y + (-0.5));
        float _726 = _723 * (_689.z + (-0.5));
        float _733 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_696.x + (-0.5));
        float _735 = _733 * (_696.y + (-0.5));
        float _736 = _733 * (_696.z + (-0.5));
        float _743 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_703.x + (-0.5));
        float _745 = _743 * (_703.y + (-0.5));
        float _746 = _743 * (_703.z + (-0.5));
        float _753 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_710.x + (-0.5));
        float _755 = _753 * (_710.y + (-0.5));
        float _756 = _753 * (_710.z + (-0.5));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = _724 * 0.5;
        float _761 = _734 * 0.5;
        float _762 = _744 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _777 = (dot(vec3(_308, _309, _310), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _787 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3481 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_789 + 1.0))) + _794) * _757;
        float _804 = _725 * 0.5;
        float _805 = _735 * 0.5;
        float _806 = _745 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_308, _309, _310), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3514 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_831 + 1.0))) + _836) * _758;
        float _846 = _726 * 0.5;
        float _847 = _736 * 0.5;
        float _848 = _746 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_308, _309, _310), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3547 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_873 + 1.0))) + _878) * _759;
        _895 = _726;
        _897 = _725;
        _898 = _724;
        _899 = _736;
        _900 = _735;
        _901 = _734;
        _902 = _746;
        _903 = _745;
        _904 = _744;
        _905 = _759;
        _906 = _758;
        _907 = _757;
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
    }
    else
    {
        _895 = _896;
        _897 = _896;
        _898 = _896;
        _899 = _896;
        _900 = _896;
        _901 = _896;
        _902 = _896;
        _903 = _896;
        _904 = _896;
        _905 = _896;
        _906 = _896;
        _907 = _896;
        _908 = 0.0;
        _909 = 0.0;
        _910 = 0.0;
    }
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _939 = fma(_564, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _556));
        float _943 = fma(_564, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _556));
        float _947 = fma(_564, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _556));
        float _970 = _556 + _308;
        float _971 = _560 + _309;
        float _972 = _564 + _310;
        float _982 = fma(_972, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970)) - _939;
        float _983 = fma(_972, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970)) - _943;
        float _984 = fma(_972, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970)) - _947;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_939 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_943 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[35u].z) + ((((((_947 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1038 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1005.x + (-0.5));
        float _1040 = _1038 * (_1005.y + (-0.5));
        float _1041 = _1038 * (_1005.z + (-0.5));
        float _1048 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1012.x + (-0.5));
        float _1050 = _1048 * (_1012.y + (-0.5));
        float _1051 = _1048 * (_1012.z + (-0.5));
        float _1058 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1019.x + (-0.5));
        float _1060 = _1058 * (_1019.y + (-0.5));
        float _1061 = _1058 * (_1019.z + (-0.5));
        float _1068 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1026.x + (-0.5));
        float _1070 = _1068 * (_1026.y + (-0.5));
        float _1071 = _1068 * (_1026.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_308, _309, _310), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3610 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1102 + 1.0))) + _1107) * _1072;
        float _1117 = _1040 * 0.5;
        float _1118 = _1050 * 0.5;
        float _1119 = _1060 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_308, _309, _310), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3643 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1144 + 1.0))) + _1149) * _1073;
        float _1159 = _1041 * 0.5;
        float _1160 = _1051 * 0.5;
        float _1161 = _1061 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_308, _309, _310), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3676 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1186 + 1.0))) + _1191) * _1074;
        _1208 = _1041;
        _1209 = _1040;
        _1210 = _1039;
        _1211 = _1051;
        _1212 = _1050;
        _1213 = _1049;
        _1214 = _1061;
        _1215 = _1060;
        _1216 = _1059;
        _1217 = _1074;
        _1218 = _1073;
        _1219 = _1072;
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _896;
        _1209 = _896;
        _1210 = _896;
        _1211 = _896;
        _1212 = _896;
        _1213 = _896;
        _1214 = _896;
        _1215 = _896;
        _1216 = _896;
        _1217 = _896;
        _1218 = _896;
        _1219 = _896;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1255 = fma(_1234, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1232 * cbSceneParam._m0[89u].x));
    float _1258 = fma(_1234, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1232 * cbSceneParam._m0[90u].x));
    float _1261 = fma(_1234, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1232));
    float _1276 = _500 * 0.5;
    float _1277 = _501 * 0.5;
    float _1278 = _502 * 0.5;
    float _1279 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1282 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1285 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1292 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_895, _899, _902, _905));
        float _1296 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_897, _900, _903, _906));
        float _1300 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_898, _901, _904, _907));
        float _1307 = dot(vec4(cbModelParam._m0[39u]), vec4(_1276, _1277, _1278, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1321 = dot(vec4(cbModelParam._m0[40u]), vec4(_1276, _1277, _1278, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1334 = (_1330 * cbModelParam._m0[1u].x) + (_1319 * (1.0 - cbModelParam._m0[1u].x));
    float _1344 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _312);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1344 : min(cbModelParam._m0[25u].z, _1344));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1394 = fma(_564, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556)) + cbModelParam._m0[13u].w;
        float _1398 = fma(_564, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556)) + cbModelParam._m0[14u].w;
        float _1402 = fma(_564, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556)) + cbModelParam._m0[15u].w;
        float _1405 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1408 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1411 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1439;
        if (_1405 > 0.0)
        {
            _1439 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1439 = frontier_phi_19_17_ladder;
        }
        float _1647;
        if (_1408 > 0.0)
        {
            _1647 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1647 = frontier_phi_28_24_ladder;
        }
        float _1901;
        if (_1411 > 0.0)
        {
            _1901 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1901 = frontier_phi_40_35_ladder;
        }
        float _1903 = isnan(_1647) ? _1439 : (isnan(_1439) ? _1647 : min(_1439, _1647));
        float _1904 = isnan(_1901) ? _1903 : (isnan(_1903) ? _1901 : min(_1903, _1901));
        float _1908 = (_1904 * _1405) + _1394;
        float _1909 = (_1904 * _1408) + _1398;
        float _1910 = (_1904 * _1411) + _1402;
        float _1911 = _1904 * 9.9999997473787516355514526367188e-05;
        float _1913 = (-1.0) - _1911;
        float _1915 = _1911 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1910 > _1915) || ((_1910 < _1913) || ((_1909 > _1915) || ((_1909 < _1913) || ((_1908 < _1913) || (_1908 > _1915))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1910, cbModelParam._m0[9u].z, fma(_1909, cbModelParam._m0[9u].y, _1908 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1910, cbModelParam._m0[10u].z, fma(_1909, cbModelParam._m0[10u].y, _1908 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1910, cbModelParam._m0[11u].z, fma(_1909, cbModelParam._m0[11u].y, _1908 * cbModelParam._m0[11u].x))), _1345);
            frontier_phi_18_40_ladder = _2038.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2038.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2038.x * cbModelParam._m0[1u].y;
        }
        _1427 = frontier_phi_18_40_ladder_2;
        _1429 = frontier_phi_18_40_ladder_1;
        _1431 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1345);
        _1427 = _1415.x * cbModelParam._m0[1u].y;
        _1429 = _1415.y * cbModelParam._m0[1u].y;
        _1431 = _1415.z * cbModelParam._m0[1u].y;
    }
    float _1435 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _312);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1435 : min(cbModelParam._m0[25u].w, _1435));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1493 = fma(_564, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556)) + cbModelParam._m0[21u].w;
        float _1497 = fma(_564, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556)) + cbModelParam._m0[22u].w;
        float _1501 = fma(_564, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556)) + cbModelParam._m0[23u].w;
        float _1504 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1507 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1510 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1652;
        if (_1504 > 0.0)
        {
            _1652 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1652 = frontier_phi_30_26_ladder;
        }
        float _1928;
        if (_1507 > 0.0)
        {
            _1928 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1928 = frontier_phi_42_37_ladder;
        }
        float _2141;
        if (_1510 > 0.0)
        {
            _2141 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2141 = frontier_phi_51_48_ladder;
        }
        float _2143 = isnan(_1928) ? _1652 : (isnan(_1652) ? _1928 : min(_1652, _1928));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1504) + _1493;
        float _2149 = (_2144 * _1507) + _1497;
        float _2150 = (_2144 * _1510) + _1501;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2151;
        float _2154 = _2151 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2150 > _2154) || ((_2150 < _2152) || ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 < _2152) || (_2148 > _2154))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2150, cbModelParam._m0[17u].z, fma(_2149, cbModelParam._m0[17u].y, _2148 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2150, cbModelParam._m0[18u].z, fma(_2149, cbModelParam._m0[18u].y, _2148 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2150, cbModelParam._m0[19u].z, fma(_2149, cbModelParam._m0[19u].y, _2148 * cbModelParam._m0[19u].x))), _1436);
            frontier_phi_27_51_ladder = _2350.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2350.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2350.x * cbModelParam._m0[1u].z;
        }
        _1529 = frontier_phi_27_51_ladder_2;
        _1531 = frontier_phi_27_51_ladder_1;
        _1533 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1436);
        _1529 = _1513.x * cbModelParam._m0[1u].z;
        _1531 = _1513.y * cbModelParam._m0[1u].z;
        _1533 = _1513.z * cbModelParam._m0[1u].z;
    }
    float _1546 = (((_527 * _477) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1529 - _1427)) + _1427);
    float _1548 = (((_527 * _479) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1550 = (((_527 * _480) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1553 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, _1546 * cbSceneParam._m0[91u].x));
    uvec4 _1569 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1571 = _1569.x * 14u;
    uint _1572 = _1571 + 13u;
    float _1579 = _492 + (-1.0);
    float _1584 = (cbLight._m0[_1572].x * _1579) + 1.0;
    float _1585 = (cbLight._m0[_1572].y * _1579) + 1.0;
    float _1586 = (cbLight._m0[_1572].z * _1579) + 1.0;
    float _1587 = (cbLight._m0[_1572].w * _1579) + 1.0;
    uint _1588 = _1571 + 5u;
    float _1594 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1598 = _1571 + 4u;
    float _1605 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1609 = _1571 | 1u;
    float _1620 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_308, _309, _310));
    float _1623 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_308, _309, _310));
    float _3812 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _3823 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1628 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.3183098733425140380859375;
    float _1630 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.3183098733425140380859375;
    float _1637 = ((cbLight._m0[_1588].x * _1594) * _1630) + ((cbLight._m0[_1598].x * _1605) * _1628);
    float _1638 = ((_1594 * cbLight._m0[_1588].y) * _1630) + ((_1605 * cbLight._m0[_1598].y) * _1628);
    float _1639 = ((_1594 * cbLight._m0[_1588].z) * _1630) + ((_1605 * cbLight._m0[_1598].z) * _1628);
    uvec4 _1644 = floatBitsToUint(cbLight._m0[_1571 + 12u]);
    bool _1646 = _1644.x == 0u;
    float _1657;
    float _1659;
    float _1661;
    if (_1646)
    {
        _1657 = _1637;
        _1659 = _1638;
        _1661 = _1639;
    }
    else
    {
        uint _1665 = _1571 + 6u;
        float _1681 = (dot(vec3(cbLight._m0[_1571 + 2u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1682 = _1681 * _1681;
        float _3834 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1684 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1657 = (((cbLight._m0[_1665].x * 0.3183098733425140380859375) * _1683) * _1684) + _1637;
        _1659 = (((cbLight._m0[_1665].y * 0.3183098733425140380859375) * _1683) * _1684) + _1638;
        _1661 = (((cbLight._m0[_1665].z * 0.3183098733425140380859375) * _1683) * _1684) + _1639;
    }
    bool _1664 = _1644.y == 0u;
    float _1702;
    float _1704;
    float _1706;
    if (_1664)
    {
        _1702 = _1657;
        _1704 = _1659;
        _1706 = _1661;
    }
    else
    {
        uint _1872 = _1571 + 7u;
        float _1888 = (dot(vec3(cbLight._m0[_1571 + 3u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1889 = _1888 * _1888;
        float _3850 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1891 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1702 = (((cbLight._m0[_1872].x * 0.3183098733425140380859375) * _1890) * _1891) + _1657;
        _1704 = (((cbLight._m0[_1872].y * 0.3183098733425140380859375) * _1890) * _1891) + _1659;
        _1706 = (((cbLight._m0[_1872].z * 0.3183098733425140380859375) * _1890) * _1891) + _1661;
    }
    uint _1709 = _1571 + 8u;
    float _1722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _312) * 0.949999988079071044921875);
    float _1723 = _1722 * _1722;
    float _1724 = cbLight._m0[_1571].x + _390;
    float _1725 = cbLight._m0[_1571].y + _391;
    float _1726 = cbLight._m0[_1571].z + _392;
    float _1730 = inversesqrt(dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726)));
    float _1731 = _1730 * _1724;
    float _1732 = _1730 * _1725;
    float _1733 = _1730 * _1726;
    float _1734 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1571].xyz));
    float _3866 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _1738 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1739 = dot(vec3(_308, _309, _310), vec3(_1731, _1732, _1733));
    float _3888 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1743 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1731, _1732, _1733));
    float _3899 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1747 = _1723 * _1723;
    float _1751 = ((_1742 * _1742) * (_1747 + (-1.0))) + 1.0;
    float _1759 = exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0);
    float _1760 = 0.959999978542327880859375 - _474;
    float _1762 = 0.959999978542327880859375 - _475;
    float _1763 = 0.959999978542327880859375 - _476;
    float _1770 = 1.0 - _1723;
    float _1781 = (0.5 / (((_1738 * ((_1737 * _1770) + _1723)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1770) + _1723) * _1737))) * _1737;
    float _3910 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1783 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1747 / ((_1751 * _1751) * 3.141590118408203125));
    uint _1794 = _1571 + 9u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1609].w)) * _312) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1609].x + _390;
    float _1808 = cbLight._m0[_1609].y + _391;
    float _1809 = cbLight._m0[_1609].z + _392;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1609].xyz));
    float _3921 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1821 = dot(vec3(_308, _309, _310), vec3(_1814, _1815, _1816));
    float _3932 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_1814, _1815, _1816));
    float _3943 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1806 * _1806;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1840 = exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0);
    float _1847 = 1.0 - _1806;
    float _1857 = (0.5 / (((_1738 * ((_1820 * _1847) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1847) + _1806) * _1820))) * _1820;
    float _3954 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    float _1869 = (((((_1840 * _1760) + _477) * cbLight._m0[_1794].x) * _1859) * _1594) + (((((_1759 * _1760) + _477) * cbLight._m0[_1709].x) * _1783) * _1605);
    float _1870 = (((((_1840 * _1762) + _479) * cbLight._m0[_1794].y) * _1859) * _1594) + (((((_1759 * _1762) + _479) * cbLight._m0[_1709].y) * _1783) * _1605);
    float _1871 = (((((_1840 * _1763) + _480) * cbLight._m0[_1794].z) * _1859) * _1594) + (((((_1759 * _1763) + _480) * cbLight._m0[_1709].z) * _1783) * _1605);
    float _1933;
    float _1935;
    float _1937;
    if (_1646)
    {
        _1933 = _1869;
        _1935 = _1870;
        _1937 = _1871;
    }
    else
    {
        uint _1939 = _1571 + 2u;
        uint _1943 = _1571 + 10u;
        float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _312) * 0.949999988079071044921875);
        float _1958 = _1957 * _1957;
        float _1959 = cbLight._m0[_1939].x + _390;
        float _1960 = cbLight._m0[_1939].y + _391;
        float _1961 = cbLight._m0[_1939].z + _392;
        float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
        float _1966 = _1965 * _1959;
        float _1967 = _1965 * _1960;
        float _1968 = _1965 * _1961;
        float _1969 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1939].xyz));
        float _3965 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1972 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1973 = dot(vec3(_308, _309, _310), vec3(_1966, _1967, _1968));
        float _3976 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1977 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_1966, _1967, _1968));
        float _3987 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1981 = _1958 * _1958;
        float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
        float _1992 = exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0);
        float _1999 = 1.0 - _1958;
        float _2009 = (0.5 / (((_1738 * ((_1972 * _1999) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1999) + _1958) * _1972))) * _1972;
        float _3998 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2011 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
        float _2012 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1933 = (((((_1992 * _1760) + _477) * cbLight._m0[_1943].x) * _2011) * _2012) + _1869;
        _1935 = (((((_1992 * _1762) + _479) * cbLight._m0[_1943].y) * _2011) * _2012) + _1870;
        _1937 = (((((_1992 * _1763) + _480) * cbLight._m0[_1943].z) * _2011) * _2012) + _1871;
    }
    float _2047;
    float _2049;
    float _2051;
    if (_1664)
    {
        _2047 = _1933;
        _2049 = _1935;
        _2051 = _1937;
    }
    else
    {
        uint _2058 = _1571 + 3u;
        uint _2062 = _1571 + 11u;
        float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _312) * 0.949999988079071044921875);
        float _2077 = _2076 * _2076;
        float _2078 = cbLight._m0[_2058].x + _390;
        float _2079 = cbLight._m0[_2058].y + _391;
        float _2080 = cbLight._m0[_2058].z + _392;
        float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
        float _2085 = _2084 * _2078;
        float _2086 = _2084 * _2079;
        float _2087 = _2084 * _2080;
        float _2088 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2058].xyz));
        float _4014 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2092 = dot(vec3(_308, _309, _310), vec3(_2085, _2086, _2087));
        float _4025 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2085, _2086, _2087));
        float _4036 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2100 = _2077 * _2077;
        float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
        float _2111 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
        float _2118 = 1.0 - _2077;
        float _2128 = (0.5 / (((_1738 * ((_2091 * _2118) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _2118) + _2077) * _2091))) * _2091;
        float _4047 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2130 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
        float _2131 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _2047 = (((((_2111 * _1760) + _477) * cbLight._m0[_2062].x) * _2130) * _2131) + _1933;
        _2049 = (((((_2111 * _1762) + _479) * cbLight._m0[_2062].y) * _2130) * _2131) + _1935;
        _2051 = (((((_2111 * _1763) + _480) * cbLight._m0[_2062].z) * _2130) * _2131) + _1937;
    }
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_1569.y == 0u)
    {
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2206;
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2206;
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2206;
        uvec4 _2221 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2222 = _2221.x;
        uint _2233 = uint((float(_2221.y) * floor(float(uint(cbSceneParam._m0[85u].y * _412) / _2222))) + floor(float(uint(cbSceneParam._m0[85u].x * _411) / _2222)));
        float _2243 = (log2(_2209 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2244 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        uint _2247 = uint(isnan(14.0) ? _2244 : (isnan(_2244) ? 14.0 : min(_2244, 14.0)));
        uvec4 _2252 = texelFetch(g_lightClusterGridBuffer, int(((_2247 << 2u) + (_2233 << 6u)) >> 2u));
        uint _2253 = _2252.x;
        uint _2254 = _2221.z;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        if (((((1u << ((_2254 >> 4u) & 15u)) + 4294967295u) & _2253) == 0u) || ((_2254 & 240u) == 0u))
        {
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
        }
        else
        {
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            uint _2513 = 0u;
            uint _2522;
            bool _2523;
            for (;;)
            {
                _2522 = texelFetch(g_lightClassification, int((((_2247 << 5u) + (_2233 << 9u)) + (_2513 << 2u)) >> 2u)).x;
                _2523 = _2522 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2523)
                {
                    frontier_phi_68_pred = _2509;
                    frontier_phi_68_pred_1 = _2512;
                    frontier_phi_68_pred_2 = _2511;
                    frontier_phi_68_pred_3 = _2510;
                    frontier_phi_68_pred_4 = _2508;
                    frontier_phi_68_pred_5 = _2507;
                }
                else
                {
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    uint _2658;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2522;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    for (;;)
                    {
                        uint _2662 = uint(findLSB(_2658)) + (_2513 << 5u);
                        uint _2659 = (_2658 + 4294967295u) & _2658;
                        uint _2664 = _2662 * 48u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 3u)).x));
                        uint _2684 = (_2662 * 48u) + 4u;
                        vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2703 = (_2662 * 48u) + 8u;
                        vec3 _2714 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x));
                        float _2718 = _2678.x - _2207;
                        float _2719 = _2678.y - _2208;
                        float _2720 = _2678.z - _2209;
                        float _2721 = dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720));
                        float _2724 = inversesqrt(_2721);
                        float _2725 = _2724 * _2718;
                        float _2726 = _2724 * _2719;
                        float _2727 = _2724 * _2720;
                        float _2728 = dot(vec3(_432, _435, _438), vec3(_2725, _2726, _2727));
                        float _2733 = 1.0 - (_2721 * _2678.w);
                        float _4073 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2734 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2735 = sqrt(_2721) * _2697.w;
                        float _2738 = 1.39999997615814208984375 / (_2735 + 1.39999997615814208984375);
                        float _2739 = _2738 * _2738;
                        float _2742 = ((1.0 - _2739) * _2728) + _2739;
                        float _2745 = _2735 * _2735;
                        float _2749 = ((isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))) * _2734) / ((_2745 * 0.699999988079071044921875) + 1.0);
                        float _2753 = (-0.0) - _2207;
                        float _2754 = (-0.0) - _2208;
                        float _2755 = (-0.0) - _2209;
                        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2770 = exp2(log2(1.0 / ((_2745 * 3.5) + 5.0)) * 0.25);
                        float _2771 = 1.0 - _508;
                        float _2778 = sqrt(1.0 - ((1.0 - (_2771 * _2771)) * (1.0 - (_2770 * _2770))));
                        float _2779 = _2778 * _2778;
                        float _2780 = _2779 * _2779;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
                        float _2791 = dot(vec3(_432, _435, _438), vec3(_2760, _2761, _2762));
                        float _4089 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2794 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2795 = dot(vec3(_432, _435, _438), vec3(_2787 * _2781, _2787 * _2782, _2787 * _2783));
                        float _4100 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2802 = ((_2798 * _2798) * (_2780 + (-1.0))) + 1.0;
                        float _2803 = _2738 * _2779;
                        float _2804 = _2803 * _2803;
                        float _2807 = ((1.0 - _2804) * _2728) + _2804;
                        float _4111 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2809 = 1.0 - _2779;
                        float _2819 = (0.5 / (((_2808 * ((_2794 * _2809) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2808 * _2809) + _2779) * _2794))) * _2808;
                        float _4122 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2830 = (((_2780 * 3.1415927410125732421875) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) / ((_2802 * _2802) * ((_2745 * 2.1991131305694580078125) + 3.141590118408203125))) * _2734;
                        _2582 = (_2749 * _2697.x) + _2655;
                        _2583 = (_2749 * _2697.y) + _2656;
                        _2584 = (_2749 * _2697.z) + _2657;
                        _2579 = (_2830 * _2714.x) + _2652;
                        _2580 = (_2830 * _2714.y) + _2653;
                        _2581 = (_2830 * _2714.z) + _2654;
                        if (_2659 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2659;
                        }
                    }
                    frontier_phi_68_pred = _2581;
                    frontier_phi_68_pred_1 = _2584;
                    frontier_phi_68_pred_2 = _2583;
                    frontier_phi_68_pred_3 = _2582;
                    frontier_phi_68_pred_4 = _2580;
                    frontier_phi_68_pred_5 = _2579;
                }
                _2360 = frontier_phi_68_pred;
                _2366 = frontier_phi_68_pred_1;
                _2364 = frontier_phi_68_pred_2;
                _2362 = frontier_phi_68_pred_3;
                _2358 = frontier_phi_68_pred_4;
                _2356 = frontier_phi_68_pred_5;
                uint _2514 = _2513 + 1u;
                if (_2514 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2507 = _2356;
                    _2508 = _2358;
                    _2509 = _2360;
                    _2510 = _2362;
                    _2511 = _2364;
                    _2512 = _2366;
                    _2513 = _2514;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
        }
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.z;
        uint _2372 = (_2370 >> 8u) & 15u;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((4294967295u << _2372) & _2253) == 0u)
        {
            _2475 = _2355;
            _2477 = _2357;
            _2479 = _2359;
            _2481 = _2361;
            _2483 = _2363;
            _2485 = _2365;
        }
        else
        {
            float _2500 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
            float _2501 = _2500 * _2207;
            float _2502 = _2500 * _2208;
            float _2503 = _2500 * _2209;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2372 < ((_2370 >> 12u) & 15u))
            {
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2635 = _2355;
                float _2636 = _2357;
                float _2637 = _2359;
                float _2638 = _2361;
                float _2639 = _2363;
                float _2640 = _2365;
                uint _2641 = _2372;
                uint _2650;
                bool _2651;
                for (;;)
                {
                    _2650 = texelFetch(g_lightClassification, int((((_2247 << 5u) + (_2233 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                    _2651 = _2650 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2651)
                    {
                        frontier_phi_79_pred = _2640;
                        frontier_phi_79_pred_1 = _2639;
                        frontier_phi_79_pred_2 = _2638;
                        frontier_phi_79_pred_3 = _2637;
                        frontier_phi_79_pred_4 = _2636;
                        frontier_phi_79_pred_5 = _2635;
                    }
                    else
                    {
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _2857 = _2635;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        uint _2863 = _2650;
                        uint _2864;
                        vec4 _2889;
                        float _2890;
                        vec4 _2905;
                        vec3 _2917;
                        vec4 _2933;
                        vec4 _2949;
                        float _2996;
                        bool _2997;
                        for (;;)
                        {
                            uint _2874 = ((_2641 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2863));
                            _2864 = (_2863 + 4294967295u) & _2863;
                            uint _2876 = _2874 * 40u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            _2890 = _2889.w;
                            uint _2892 = (_2874 * 40u) + 4u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2907 = (_2874 * 40u) + 8u;
                            _2917 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x));
                            uint _2920 = (_2874 * 40u) + 16u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2936 = (_2874 * 40u) + 20u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2952 = (_2874 * 40u) + 24u;
                            vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2971 = (_2874 * 40u) + 28u;
                            vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2996 = fma(_2209, _2984.z, fma(_2208, _2984.y, _2984.x * _2207)) + _2984.w;
                            _2997 = !((fma(_2209, _2965.z, fma(_2208, _2965.y, _2965.x * _2207)) + _2965.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2997)
                            {
                                float _3024 = _2889.x - _2207;
                                float _3025 = _2889.y - _2208;
                                float _3026 = _2889.z - _2209;
                                float _3027 = dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026));
                                float _3030 = inversesqrt(_3027);
                                float _3031 = _3030 * _3024;
                                float _3032 = _3030 * _3025;
                                float _3033 = _3030 * _3026;
                                float _3037 = 1.0 - (_3027 / (_2890 * _2890));
                                float _4133 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3042 = sqrt(_3027) * _2905.w;
                                float _3044 = 1.39999997615814208984375 / (_3042 + 1.39999997615814208984375);
                                float _3045 = _3044 * _3044;
                                float _3048 = ((1.0 - _3045) * dot(vec3(_3031, _3032, _3033), vec3(_432, _435, _438))) + _3045;
                                float _3051 = _3042 * _3042;
                                float _3055 = (fma(_2209, _2933.z, fma(_2208, _2933.y, _2933.x * _2207)) + _2933.w) / _2996;
                                float _3056 = (fma(_2209, _2949.z, fma(_2208, _2949.y, _2949.x * _2207)) + _2949.w) / _2996;
                                float _3060 = 1.0 - dot(vec2(_3055, _3056), vec2(_3055, _3056));
                                float _4149 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3062 = _3061 * (((isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))) * _3038) / ((_3051 * 0.699999988079071044921875) + 1.0));
                                float _3074 = exp2(log2(1.0 / ((_3051 * 3.5) + 5.0)) * 0.25);
                                float _3075 = 1.0 - _508;
                                float _3082 = sqrt(1.0 - ((1.0 - (_3075 * _3075)) * (1.0 - (_3074 * _3074))));
                                float _3083 = _3082 * _3082;
                                float _3084 = _3083 * _3083;
                                float _3085 = _3031 - _2501;
                                float _3086 = _3032 - _2502;
                                float _3087 = _3033 - _2503;
                                float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                                float _3095 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2501, (-0.0) - _2502, (-0.0) - _2503));
                                float _4160 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3098 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3099 = dot(vec3(_432, _435, _438), vec3(_3091 * _3085, _3091 * _3086, _3091 * _3087));
                                float _4171 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3102 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3106 = ((_3102 * _3102) * (_3084 + (-1.0))) + 1.0;
                                float _3107 = _3044 * _3083;
                                float _3108 = _3107 * _3107;
                                float _3114 = ((1.0 - _3108) * dot(vec3(_432, _435, _438), vec3(_3031, _3032, _3033))) + _3108;
                                float _4182 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3116 = 1.0 - _3083;
                                float _3126 = (0.5 / (((_3115 * ((_3098 * _3116) + _3083)) + 9.9999999392252902907785028219223e-09) + (((_3115 * _3116) + _3083) * _3098))) * _3115;
                                float _4193 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3136 = (_3061 * _3038) * (((_3084 * 3.1415927410125732421875) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) / ((_3106 * _3106) * ((_3051 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3062 * _2905.z;
                                frontier_phi_85_pred_1 = _3062 * _2905.y;
                                frontier_phi_85_pred_2 = _3062 * _2905.x;
                                frontier_phi_85_pred_3 = _3136 * _2917.z;
                                frontier_phi_85_pred_4 = _3136 * _2917.y;
                                frontier_phi_85_pred_5 = _3136 * _2917.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3145 = frontier_phi_85_pred;
                            _3144 = frontier_phi_85_pred_1;
                            _3143 = frontier_phi_85_pred_2;
                            _3142 = frontier_phi_85_pred_3;
                            _3141 = frontier_phi_85_pred_4;
                            _3140 = frontier_phi_85_pred_5;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            if (_2864 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2864;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2849;
                        frontier_phi_79_pred_1 = _2848;
                        frontier_phi_79_pred_2 = _2847;
                        frontier_phi_79_pred_3 = _2846;
                        frontier_phi_79_pred_4 = _2845;
                        frontier_phi_79_pred_5 = _2844;
                    }
                    _2486 = frontier_phi_79_pred;
                    _2484 = frontier_phi_79_pred_1;
                    _2482 = frontier_phi_79_pred_2;
                    _2480 = frontier_phi_79_pred_3;
                    _2478 = frontier_phi_79_pred_4;
                    _2476 = frontier_phi_79_pred_5;
                    uint _2642 = _2641 + 1u;
                    if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2635 = _2476;
                        _2636 = _2478;
                        _2637 = _2480;
                        _2638 = _2482;
                        _2639 = _2484;
                        _2640 = _2486;
                        _2641 = _2642;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2482;
                frontier_phi_60_61_ladder_1 = _2486;
                frontier_phi_60_61_ladder_2 = _2484;
                frontier_phi_60_61_ladder_3 = _2480;
                frontier_phi_60_61_ladder_4 = _2478;
                frontier_phi_60_61_ladder_5 = _2476;
            }
            else
            {
                frontier_phi_60_61_ladder = _2361;
                frontier_phi_60_61_ladder_1 = _2365;
                frontier_phi_60_61_ladder_2 = _2363;
                frontier_phi_60_61_ladder_3 = _2359;
                frontier_phi_60_61_ladder_4 = _2357;
                frontier_phi_60_61_ladder_5 = _2355;
            }
            _2475 = frontier_phi_60_61_ladder_5;
            _2477 = frontier_phi_60_61_ladder_4;
            _2479 = frontier_phi_60_61_ladder_3;
            _2481 = frontier_phi_60_61_ladder;
            _2483 = frontier_phi_60_61_ladder_2;
            _2485 = frontier_phi_60_61_ladder_1;
        }
        float _2490 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2265 = (_2490 * _2481) + _1702;
        _2267 = (_2490 * _2483) + _1704;
        _2269 = (_2490 * _2485) + _1706;
        _2271 = ((_2475 * _477) * _2490) + _2047;
        _2273 = ((_2477 * _479) * _2490) + _2049;
        _2275 = ((_2479 * _480) * _2490) + _2051;
    }
    else
    {
        _2265 = _1702;
        _2267 = _1704;
        _2269 = _1706;
        _2271 = _2047;
        _2273 = _2049;
        _2275 = _2051;
    }
    float _4209 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4220 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4231 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4242 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _2293 = ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2265 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _492))) + ((_2271 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2294 = ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2267 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _492))) + ((_2273 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2295 = ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2269 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _492))) + ((_2275 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2300 = cbInstanceData._m0[_451 + 6u].w * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)));
    float _2305 = _411 / cbSceneParam._m0[86u].x;
    float _2306 = _412 / cbSceneParam._m0[86u].y;
    vec4 _2320 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2305, _2306, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2322 = _2320.x;
    float _2323 = _2320.y;
    float _2324 = _2320.z;
    float _2325 = _2320.w;
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2380 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2381 = _2380 / _332;
        float _2392 = _2381 * _383;
        float _2393 = _384 * _2381;
        float _2394 = (-0.0) - _2393;
        float _2395 = _2381 * _385;
        float _2397 = (cbSceneParam._m0[77u].w * _2394) / _2380;
        float _2398 = _2397 + cbSceneParam._m0[79u].w;
        float _2399 = cbSceneParam._m0[79u].w - _2393;
        float _2405 = sqrt(((_2392 * _2392) + (_2393 * _2393)) + (_2395 * _2395));
        float _2408 = (1.0 - (cbSceneParam._m0[77u].w / _2380)) * _2405;
        float _2413 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2415 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2592;
        if (abs((_2394 - _2397) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2592 = ((((_2398 > 0.0) ? exp2(_2413 * _2398) : (2.0 - exp2(_2415 * _2398))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2408;
        }
        else
        {
            float _2536 = 1.0 / cbSceneParam._m0[80u].x;
            float _2537 = isnan(_2399) ? _2398 : (isnan(_2398) ? _2399 : max(_2398, _2399));
            float _2538 = isnan(_2399) ? _2398 : (isnan(_2398) ? _2399 : min(_2398, _2399));
            float _2547 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : min(_2537, 0.0));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            _2592 = ((abs(_2405 / _2394) * cbSceneParam._m0[80u].y) * ((((_2547 - _2548) * 2.0) - ((exp2(_2413 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0)))) - exp2(_2413 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0))))) * _2536)) - ((exp2(_2415 * _2547) - exp2(_2415 * _2548)) * _2536))) + (_2408 * cbSceneParam._m0[80u].z);
        }
        vec4 _2594 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2305, _2306, 1.0), 0.0);
        float _2603 = exp2((_2592 * (-1.44269502162933349609375)) * (1.0 - _2594.w));
        float _2604 = log2(_2603);
        float _2620 = log2(_2325);
        _2417 = (exp2(_2620 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].x)) * _2594.x) / cbSceneParam._m0[78u].x)) + _2322;
        _2419 = (exp2(_2620 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].y)) * _2594.y) / cbSceneParam._m0[78u].y)) + _2323;
        _2421 = (exp2(_2620 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].z)) * _2594.z) / cbSceneParam._m0[78u].z)) + _2324;
        _2423 = _2603 * _2325;
    }
    else
    {
        _2417 = _2322;
        _2419 = _2323;
        _2421 = _2324;
        _2423 = _2325;
    }
    bool _2630;
    vec4 _2433;
    vec4 _2455;
    float _2457;
    float _2461;
    float _2462;
    float _2463;
    float _2464;
    bool _2474;
    for (;;)
    {
        _2433 = cbMatDynParam._m0[0u];
        float _2435 = roundEven(_2433.y);
        bool _2436 = _2435 == 3.0;
        float _2437 = log2(_2423);
        float _2444 = exp2(_2437 * cbSceneParam._m0[78u].x) * _2293;
        float _2445 = exp2(_2437 * cbSceneParam._m0[78u].y) * _2294;
        float _2446 = exp2(_2437 * cbSceneParam._m0[78u].z) * _2295;
        float _2453 = _399 + (-0.5);
        _2455 = cbMtdParam._m0[1u];
        _2457 = _2455.y * _2453;
        float _2460 = (_2435 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2461 = _2460 * (_2436 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2417)));
        _2462 = _2460 * (_2436 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2419)));
        _2463 = _2460 * (_2436 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2421)));
        _2464 = _2453 * 0.999000012874603271484375;
        _2474 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2474)
        {
            if ((cbInstanceData._m0[_451 + 7u].x + _2464) < 0.5)
            {
                _2630 = true;
                break;
            }
        }
        uint _2571 = _453 + uint(_2433.w);
        if ((cbInstanceData._m0[_2571].w < 1.0) && ((cbInstanceData._m0[_2571].w + _2464) < 0.5))
        {
            _2630 = true;
            break;
        }
        if ((_2457 + _242) < _2455.x)
        {
            _2630 = true;
            break;
        }
        _2630 = false;
        break;
    }
    float _2835;
    if (_2630)
    {
        discard_state = true;
        _2835 = 0.0;
    }
    else
    {
        _2835 = _2300;
    }
    SV_Target.x = _2461;
    SV_Target.y = _2462;
    SV_Target.z = _2463;
    SV_Target.w = _2835;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2300;
    discard_exit();
}


