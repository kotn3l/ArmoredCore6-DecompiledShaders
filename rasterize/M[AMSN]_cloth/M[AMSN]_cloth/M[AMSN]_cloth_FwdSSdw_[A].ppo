#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _898;
float _3315;
float _3316;
float _3317;
float _3318;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.w;
    float _245 = _238.x * cbMtdParam._m0[9u].x;
    float _246 = _238.y * cbMtdParam._m0[9u].y;
    float _247 = _238.z * cbMtdParam._m0[9u].z;
    float _248 = _244 * TEXCOORD_1.z;
    vec4 _264 = texture(sampler2D(M_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = _264.x + cbMtdParam._m0[10u].x;
    vec4 _279 = texture(sampler2D(M_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _283 = _279.z;
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _3327 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))));
    float _299 = fma(_296, _216, fma(_289, _208 * TANGENT.x, (_194 * _186) * _287));
    float _302 = fma(_296, _217, fma(_289, _208 * TANGENT.y, (_194 * _187) * _287));
    float _305 = fma(_296, _218, fma(_289, _208 * TANGENT.z, (_194 * _188) * _287));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _3338 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _313 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _314 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _3360 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3371 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3382 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3393 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _318 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    vec4 _399 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _401 = _399.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _577 = sqrt(((_385 * _385) + (_386 * _386)) + (_387 * _387));
        float _583 = (cbMatDynParam._m0[5u].x * _577) + cbMatDynParam._m0[5u].y;
        float _3404 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _584 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _588 = (cbMatDynParam._m0[5u].z * _577) + cbMatDynParam._m0[5u].w;
        float _3415 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) - _584)) + _584) < ((_401 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _413 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _414 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _437 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _440 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    uint _453 = uint(roundEven(NORMAL.w)) * 13u;
    uint _455 = _453 + 9u;
    uint _456 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _462 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_456].x;
    float _463 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_456].y;
    float _464 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_456].z;
    float _3426 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _468 = 1.0 - _318;
    float _469 = _465 * _468;
    float _470 = _466 * _468;
    float _471 = _467 * _468;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _318;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _318;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _318;
    float _479 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    float _482 = _478 + 0.039999999105930328369140625;
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _413, cbSceneParam._m0[86u].y * _414));
    float _494 = _491.x * TEXCOORD_1.w;
    float _495 = dot(vec3(_310, _311, _312), vec3(_392, _393, _394));
    float _498 = _495 * 2.0;
    float _502 = (_498 * _310) - _392;
    float _503 = (_498 * _311) - _393;
    float _504 = (_498 * _312) - _394;
    float _508 = abs(dot(vec3(_392, _393, _394), vec3(_310, _311, _312)));
    float _3459 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = sqrt(_314);
    float _523 = exp2((_510 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_510 * 3.0));
    float _529 = (1.0 - _523) * ((_510 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _530 = _523 * _510;
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _897;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _622 = fma(_566, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558));
        float _626 = fma(_566, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558));
        float _630 = fma(_566, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558));
        float _655 = _558 + _310;
        float _656 = _562 + _311;
        float _657 = _566 + _312;
        float _667 = fma(_657, cbModelParam._m0[26u].z, fma(_656, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655)) - _622;
        float _668 = fma(_657, cbModelParam._m0[27u].z, fma(_656, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655)) - _626;
        float _669 = fma(_657, cbModelParam._m0[28u].z, fma(_656, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655)) - _630;
        float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
        float _686 = ((_673 * _667) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_622 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_673 * _668) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_626 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_673 * _669) / cbModelParam._m0[34u].z) + ((((((_630 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        float _725 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_691.x + (-0.5));
        float _727 = _725 * (_691.y + (-0.5));
        float _728 = _725 * (_691.z + (-0.5));
        float _735 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_698.x + (-0.5));
        float _737 = _735 * (_698.y + (-0.5));
        float _738 = _735 * (_698.z + (-0.5));
        float _745 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_705.x + (-0.5));
        float _747 = _745 * (_705.y + (-0.5));
        float _748 = _745 * (_705.z + (-0.5));
        float _755 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_712.x + (-0.5));
        float _757 = _755 * (_712.y + (-0.5));
        float _758 = _755 * (_712.z + (-0.5));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = _726 * 0.5;
        float _763 = _736 * 0.5;
        float _764 = _746 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _779 = (dot(vec3(_310, _311, _312), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _789 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3507 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_791 + 1.0))) + _796) * _759;
        float _806 = _727 * 0.5;
        float _807 = _737 * 0.5;
        float _808 = _747 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_310, _311, _312), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3540 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_833 + 1.0))) + _838) * _760;
        float _848 = _728 * 0.5;
        float _849 = _738 * 0.5;
        float _850 = _748 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_310, _311, _312), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3573 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_875 + 1.0))) + _880) * _761;
        _897 = _728;
        _899 = _727;
        _900 = _726;
        _901 = _738;
        _902 = _737;
        _903 = _736;
        _904 = _748;
        _905 = _747;
        _906 = _746;
        _907 = _761;
        _908 = _760;
        _909 = _759;
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
    }
    else
    {
        _897 = _898;
        _899 = _898;
        _900 = _898;
        _901 = _898;
        _902 = _898;
        _903 = _898;
        _904 = _898;
        _905 = _898;
        _906 = _898;
        _907 = _898;
        _908 = _898;
        _909 = _898;
        _910 = 0.0;
        _911 = 0.0;
        _912 = 0.0;
    }
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _941 = fma(_566, cbModelParam._m0[30u].z, fma(_562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _558));
        float _945 = fma(_566, cbModelParam._m0[31u].z, fma(_562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _558));
        float _949 = fma(_566, cbModelParam._m0[32u].z, fma(_562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _558));
        float _972 = _558 + _310;
        float _973 = _562 + _311;
        float _974 = _566 + _312;
        float _984 = fma(_974, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972)) - _941;
        float _985 = fma(_974, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972)) - _945;
        float _986 = fma(_974, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972)) - _949;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_941 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_945 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[35u].z) + ((((((_949 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1040 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1007.x + (-0.5));
        float _1042 = _1040 * (_1007.y + (-0.5));
        float _1043 = _1040 * (_1007.z + (-0.5));
        float _1050 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1014.x + (-0.5));
        float _1052 = _1050 * (_1014.y + (-0.5));
        float _1053 = _1050 * (_1014.z + (-0.5));
        float _1060 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1021.x + (-0.5));
        float _1062 = _1060 * (_1021.y + (-0.5));
        float _1063 = _1060 * (_1021.z + (-0.5));
        float _1070 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1028.x + (-0.5));
        float _1072 = _1070 * (_1028.y + (-0.5));
        float _1073 = _1070 * (_1028.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_310, _311, _312), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3636 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1104 + 1.0))) + _1109) * _1074;
        float _1119 = _1042 * 0.5;
        float _1120 = _1052 * 0.5;
        float _1121 = _1062 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_310, _311, _312), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3669 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1146 + 1.0))) + _1151) * _1075;
        float _1161 = _1043 * 0.5;
        float _1162 = _1053 * 0.5;
        float _1163 = _1063 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_310, _311, _312), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3702 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1188 + 1.0))) + _1193) * _1076;
        _1210 = _1043;
        _1211 = _1042;
        _1212 = _1041;
        _1213 = _1053;
        _1214 = _1052;
        _1215 = _1051;
        _1216 = _1063;
        _1217 = _1062;
        _1218 = _1061;
        _1219 = _1076;
        _1220 = _1075;
        _1221 = _1074;
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _898;
        _1211 = _898;
        _1212 = _898;
        _1213 = _898;
        _1214 = _898;
        _1215 = _898;
        _1216 = _898;
        _1217 = _898;
        _1218 = _898;
        _1219 = _898;
        _1220 = _898;
        _1221 = _898;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1257 = fma(_1236, cbSceneParam._m0[89u].z, fma(_1235, cbSceneParam._m0[89u].y, _1234 * cbSceneParam._m0[89u].x));
    float _1260 = fma(_1236, cbSceneParam._m0[90u].z, fma(_1235, cbSceneParam._m0[90u].y, _1234 * cbSceneParam._m0[90u].x));
    float _1263 = fma(_1236, cbSceneParam._m0[91u].z, fma(_1235, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1234));
    float _1278 = _502 * 0.5;
    float _1279 = _503 * 0.5;
    float _1280 = _504 * 0.5;
    float _1281 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1284 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1287 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1321;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1294 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_897, _901, _904, _907));
        float _1298 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_899, _902, _905, _908));
        float _1302 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_900, _903, _906, _909));
        float _1309 = dot(vec4(cbModelParam._m0[39u]), vec4(_1278, _1279, _1280, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1332;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1323 = dot(vec4(cbModelParam._m0[40u]), vec4(_1278, _1279, _1280, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1336 = (_1332 * cbModelParam._m0[1u].x) + (_1321 * (1.0 - cbModelParam._m0[1u].x));
    float _1346 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _314);
    float _1347 = isnan(_1346) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1346 : min(cbModelParam._m0[25u].z, _1346));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1396 = fma(_566, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558)) + cbModelParam._m0[13u].w;
        float _1400 = fma(_566, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558)) + cbModelParam._m0[14u].w;
        float _1404 = fma(_566, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558)) + cbModelParam._m0[15u].w;
        float _1407 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1410 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1413 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1441;
        if (_1407 > 0.0)
        {
            _1441 = abs((1.0 - _1396) / _1407);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1396 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1441 = frontier_phi_19_17_ladder;
        }
        float _1670;
        if (_1410 > 0.0)
        {
            _1670 = abs((1.0 - _1400) / _1410);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1400 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1670 = frontier_phi_28_24_ladder;
        }
        float _1927;
        if (_1413 > 0.0)
        {
            _1927 = abs((1.0 - _1404) / _1413);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1404 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1927 = frontier_phi_40_35_ladder;
        }
        float _1929 = isnan(_1670) ? _1441 : (isnan(_1441) ? _1670 : min(_1441, _1670));
        float _1930 = isnan(_1927) ? _1929 : (isnan(_1929) ? _1927 : min(_1929, _1927));
        float _1934 = (_1930 * _1407) + _1396;
        float _1935 = (_1930 * _1410) + _1400;
        float _1936 = (_1930 * _1413) + _1404;
        float _1937 = _1930 * 9.9999997473787516355514526367188e-05;
        float _1939 = (-1.0) - _1937;
        float _1941 = _1937 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1936 > _1941) || ((_1936 < _1939) || ((_1935 > _1941) || ((_1935 < _1939) || ((_1934 < _1939) || (_1934 > _1941))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1936, cbModelParam._m0[9u].z, fma(_1935, cbModelParam._m0[9u].y, _1934 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1936, cbModelParam._m0[10u].z, fma(_1935, cbModelParam._m0[10u].y, _1934 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1936, cbModelParam._m0[11u].z, fma(_1935, cbModelParam._m0[11u].y, _1934 * cbModelParam._m0[11u].x))), _1347);
            frontier_phi_18_40_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1429 = frontier_phi_18_40_ladder_2;
        _1431 = frontier_phi_18_40_ladder_1;
        _1433 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1347);
        _1429 = _1417.x * cbModelParam._m0[1u].y;
        _1431 = _1417.y * cbModelParam._m0[1u].y;
        _1433 = _1417.z * cbModelParam._m0[1u].y;
    }
    float _1437 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _314);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1437 : min(cbModelParam._m0[25u].w, _1437));
    float _1531;
    float _1533;
    float _1535;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1495 = fma(_566, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558)) + cbModelParam._m0[21u].w;
        float _1499 = fma(_566, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558)) + cbModelParam._m0[22u].w;
        float _1503 = fma(_566, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558)) + cbModelParam._m0[23u].w;
        float _1506 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1509 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1512 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1675;
        if (_1506 > 0.0)
        {
            _1675 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1675 = frontier_phi_30_26_ladder;
        }
        float _1954;
        if (_1509 > 0.0)
        {
            _1954 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1954 = frontier_phi_42_37_ladder;
        }
        float _2167;
        if (_1512 > 0.0)
        {
            _2167 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2167 = frontier_phi_51_48_ladder;
        }
        float _2169 = isnan(_1954) ? _1675 : (isnan(_1675) ? _1954 : min(_1675, _1954));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1506) + _1495;
        float _2175 = (_2170 * _1509) + _1499;
        float _2176 = (_2170 * _1512) + _1503;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2177;
        float _2180 = _2177 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2176 > _2180) || ((_2176 < _2178) || ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 < _2178) || (_2174 > _2180))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2176, cbModelParam._m0[17u].z, fma(_2175, cbModelParam._m0[17u].y, _2174 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2176, cbModelParam._m0[18u].z, fma(_2175, cbModelParam._m0[18u].y, _2174 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2176, cbModelParam._m0[19u].z, fma(_2175, cbModelParam._m0[19u].y, _2174 * cbModelParam._m0[19u].x))), _1438);
            frontier_phi_27_51_ladder = _2376.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2376.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2376.x * cbModelParam._m0[1u].z;
        }
        _1531 = frontier_phi_27_51_ladder_2;
        _1533 = frontier_phi_27_51_ladder_1;
        _1535 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1438);
        _1531 = _1515.x * cbModelParam._m0[1u].z;
        _1533 = _1515.y * cbModelParam._m0[1u].z;
        _1535 = _1515.z * cbModelParam._m0[1u].z;
    }
    float _1548 = (((_529 * _479) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1550 = (((_529 * _481) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1552 = (((_529 * _482) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1555 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1558 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1561 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, _1548 * cbSceneParam._m0[91u].x));
    vec4 _1569 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_413, _414));
    float _1571 = _1569.w;
    float _1583 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1571);
    float _1584 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1571);
    float _1585 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1571);
    uvec4 _1589 = floatBitsToUint(cbInstanceData._m0[_453 + 5u]);
    uint _1591 = _1589.x * 14u;
    uint _1592 = _1591 + 13u;
    float _1599 = _494 + (-1.0);
    float _1604 = (cbLight._m0[_1592].x * _1599) + 1.0;
    float _1605 = (cbLight._m0[_1592].y * _1599) + 1.0;
    float _1606 = (cbLight._m0[_1592].z * _1599) + 1.0;
    float _1607 = (cbLight._m0[_1592].w * _1599) + 1.0;
    uint _1608 = _1591 + 5u;
    float _1614 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
    uint _1618 = _1591 + 4u;
    float _1628 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1632 = _1591 | 1u;
    float _1643 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_310, _311, _312));
    float _1646 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_310, _311, _312));
    float _3838 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _3849 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1651 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1653 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _1660 = ((cbLight._m0[_1608].x * _1614) * _1653) + (((cbLight._m0[_1618].x * _1583) * _1628) * _1651);
    float _1661 = ((_1614 * cbLight._m0[_1608].y) * _1653) + (((cbLight._m0[_1618].y * _1584) * _1628) * _1651);
    float _1662 = ((_1614 * cbLight._m0[_1608].z) * _1653) + (((cbLight._m0[_1618].z * _1585) * _1628) * _1651);
    uvec4 _1667 = floatBitsToUint(cbLight._m0[_1591 + 12u]);
    bool _1669 = _1667.x == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1669)
    {
        _1680 = _1660;
        _1682 = _1661;
        _1684 = _1662;
    }
    else
    {
        uint _1688 = _1591 + 6u;
        float _1704 = (dot(vec3(cbLight._m0[_1591 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1705 = _1704 * _1704;
        float _3860 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1707 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1680 = (((cbLight._m0[_1688].x * 0.3183098733425140380859375) * _1706) * _1707) + _1660;
        _1682 = (((cbLight._m0[_1688].y * 0.3183098733425140380859375) * _1706) * _1707) + _1661;
        _1684 = (((cbLight._m0[_1688].z * 0.3183098733425140380859375) * _1706) * _1707) + _1662;
    }
    bool _1687 = _1667.y == 0u;
    float _1725;
    float _1727;
    float _1729;
    if (_1687)
    {
        _1725 = _1680;
        _1727 = _1682;
        _1729 = _1684;
    }
    else
    {
        uint _1898 = _1591 + 7u;
        float _1914 = (dot(vec3(cbLight._m0[_1591 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1915 = _1914 * _1914;
        float _3876 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1917 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _1725 = (((cbLight._m0[_1898].x * 0.3183098733425140380859375) * _1916) * _1917) + _1680;
        _1727 = (((cbLight._m0[_1898].y * 0.3183098733425140380859375) * _1916) * _1917) + _1682;
        _1729 = (((cbLight._m0[_1898].z * 0.3183098733425140380859375) * _1916) * _1917) + _1684;
    }
    uint _1732 = _1591 + 8u;
    float _1745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1591].w)) * _314) * 0.949999988079071044921875);
    float _1746 = _1745 * _1745;
    float _1747 = cbLight._m0[_1591].x + _392;
    float _1748 = cbLight._m0[_1591].y + _393;
    float _1749 = cbLight._m0[_1591].z + _394;
    float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
    float _1754 = _1753 * _1747;
    float _1755 = _1753 * _1748;
    float _1756 = _1753 * _1749;
    float _1757 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1591].xyz));
    float _3892 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _1761 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1762 = dot(vec3(_310, _311, _312), vec3(_1754, _1755, _1756));
    float _3914 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_1754, _1755, _1756));
    float _3925 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1746 * _1746;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1782 = exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0);
    float _1783 = 0.959999978542327880859375 - _476;
    float _1785 = 0.959999978542327880859375 - _477;
    float _1786 = 0.959999978542327880859375 - _478;
    float _1793 = 1.0 - _1746;
    float _1804 = (0.5 / (((_1761 * ((_1760 * _1793) + _1746)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1793) + _1746) * _1760))) * _1760;
    float _3936 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    uint _1820 = _1591 + 9u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1632].w)) * _314) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1632].x + _392;
    float _1834 = cbLight._m0[_1632].y + _393;
    float _1835 = cbLight._m0[_1632].z + _394;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1632].xyz));
    float _3947 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1847 = dot(vec3(_310, _311, _312), vec3(_1840, _1841, _1842));
    float _3958 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_1840, _1841, _1842));
    float _3969 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1832 * _1832;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1866 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
    float _1873 = 1.0 - _1832;
    float _1883 = (0.5 / (((_1761 * ((_1846 * _1873) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1873) + _1832) * _1846))) * _1846;
    float _3980 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    float _1895 = (((((_1866 * _1783) + _479) * cbLight._m0[_1820].x) * _1885) * _1614) + ((((cbLight._m0[_1732].x * _1583) * ((_1782 * _1783) + _479)) * _1806) * _1628);
    float _1896 = (((((_1866 * _1785) + _481) * cbLight._m0[_1820].y) * _1885) * _1614) + ((((cbLight._m0[_1732].y * _1584) * ((_1782 * _1785) + _481)) * _1806) * _1628);
    float _1897 = (((((_1866 * _1786) + _482) * cbLight._m0[_1820].z) * _1885) * _1614) + ((((cbLight._m0[_1732].z * _1585) * ((_1782 * _1786) + _482)) * _1806) * _1628);
    float _1959;
    float _1961;
    float _1963;
    if (_1669)
    {
        _1959 = _1895;
        _1961 = _1896;
        _1963 = _1897;
    }
    else
    {
        uint _1965 = _1591 + 2u;
        uint _1969 = _1591 + 10u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _314) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _392;
        float _1986 = cbLight._m0[_1965].y + _393;
        float _1987 = cbLight._m0[_1965].z + _394;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1965].xyz));
        float _3991 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1999 = dot(vec3(_310, _311, _312), vec3(_1992, _1993, _1994));
        float _4002 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _4013 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0);
        float _2025 = 1.0 - _1984;
        float _2035 = (0.5 / (((_1761 * ((_1998 * _2025) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _2025) + _1984) * _1998))) * _1998;
        float _4024 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1959 = (((((_2018 * _1783) + _479) * cbLight._m0[_1969].x) * _2037) * _2038) + _1895;
        _1961 = (((((_2018 * _1785) + _481) * cbLight._m0[_1969].y) * _2037) * _2038) + _1896;
        _1963 = (((((_2018 * _1786) + _482) * cbLight._m0[_1969].z) * _2037) * _2038) + _1897;
    }
    float _2073;
    float _2075;
    float _2077;
    if (_1687)
    {
        _2073 = _1959;
        _2075 = _1961;
        _2077 = _1963;
    }
    else
    {
        uint _2084 = _1591 + 3u;
        uint _2088 = _1591 + 11u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _314) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _392;
        float _2105 = cbLight._m0[_2084].y + _393;
        float _2106 = cbLight._m0[_2084].z + _394;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2084].xyz));
        float _4040 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2118 = dot(vec3(_310, _311, _312), vec3(_2111, _2112, _2113));
        float _4051 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4062 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
        float _2144 = 1.0 - _2103;
        float _2154 = (0.5 / (((_1761 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _2144) + _2103) * _2117))) * _2117;
        float _4073 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2157 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _2073 = (((((_2137 * _1783) + _479) * cbLight._m0[_2088].x) * _2156) * _2157) + _1959;
        _2075 = (((((_2137 * _1785) + _481) * cbLight._m0[_2088].y) * _2156) * _2157) + _1961;
        _2077 = (((((_2137 * _1786) + _482) * cbLight._m0[_2088].z) * _2156) * _2157) + _1963;
    }
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_1589.y == 0u)
    {
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2232;
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2232;
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2232;
        uvec4 _2247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2248 = _2247.x;
        uint _2259 = uint((float(_2247.y) * floor(float(uint(cbSceneParam._m0[85u].y * _414) / _2248))) + floor(float(uint(cbSceneParam._m0[85u].x * _413) / _2248)));
        float _2269 = (log2(_2235 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2270 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        uint _2273 = uint(isnan(14.0) ? _2270 : (isnan(_2270) ? 14.0 : min(_2270, 14.0)));
        uvec4 _2278 = texelFetch(g_lightClusterGridBuffer, int(((_2273 << 2u) + (_2259 << 6u)) >> 2u));
        uint _2279 = _2278.x;
        uint _2280 = _2247.z;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((((1u << ((_2280 >> 4u) & 15u)) + 4294967295u) & _2279) == 0u) || ((_2280 & 240u) == 0u))
        {
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
        }
        else
        {
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2549)
                {
                    frontier_phi_68_pred = _2535;
                    frontier_phi_68_pred_1 = _2538;
                    frontier_phi_68_pred_2 = _2537;
                    frontier_phi_68_pred_3 = _2536;
                    frontier_phi_68_pred_4 = _2534;
                    frontier_phi_68_pred_5 = _2533;
                }
                else
                {
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    uint _2684;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2548;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2688 = uint(findLSB(_2684)) + (_2539 << 5u);
                        uint _2685 = (_2684 + 4294967295u) & _2684;
                        uint _2690 = _2688 * 48u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2710 = (_2688 * 48u) + 4u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2729 = (_2688 * 48u) + 8u;
                        vec3 _2740 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x));
                        float _2744 = _2704.x - _2233;
                        float _2745 = _2704.y - _2234;
                        float _2746 = _2704.z - _2235;
                        float _2747 = dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746));
                        float _2750 = inversesqrt(_2747);
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2754 = dot(vec3(_434, _437, _440), vec3(_2751, _2752, _2753));
                        float _2759 = 1.0 - (_2747 * _2704.w);
                        float _4099 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2761 = sqrt(_2747) * _2723.w;
                        float _2764 = 1.39999997615814208984375 / (_2761 + 1.39999997615814208984375);
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * _2754) + _2765;
                        float _2771 = _2761 * _2761;
                        float _2775 = ((isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))) * _2760) / ((_2771 * 0.699999988079071044921875) + 1.0);
                        float _2779 = (-0.0) - _2233;
                        float _2780 = (-0.0) - _2234;
                        float _2781 = (-0.0) - _2235;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2786 = _2785 * _2779;
                        float _2787 = _2785 * _2780;
                        float _2788 = _2785 * _2781;
                        float _2796 = exp2(log2(1.0 / ((_2771 * 3.5) + 5.0)) * 0.25);
                        float _2797 = 1.0 - _510;
                        float _2804 = sqrt(1.0 - ((1.0 - (_2797 * _2797)) * (1.0 - (_2796 * _2796))));
                        float _2805 = _2804 * _2804;
                        float _2806 = _2805 * _2805;
                        float _2807 = _2786 + _2751;
                        float _2808 = _2787 + _2752;
                        float _2809 = _2788 + _2753;
                        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
                        float _2817 = dot(vec3(_434, _437, _440), vec3(_2786, _2787, _2788));
                        float _4115 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2820 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2821 = dot(vec3(_434, _437, _440), vec3(_2813 * _2807, _2813 * _2808, _2813 * _2809));
                        float _4126 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2824 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2828 = ((_2824 * _2824) * (_2806 + (-1.0))) + 1.0;
                        float _2829 = _2764 * _2805;
                        float _2830 = _2829 * _2829;
                        float _2833 = ((1.0 - _2830) * _2754) + _2830;
                        float _4137 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2835 = 1.0 - _2805;
                        float _2845 = (0.5 / (((_2834 * ((_2820 * _2835) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2834 * _2835) + _2805) * _2820))) * _2834;
                        float _4148 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2856 = (((_2806 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_2828 * _2828) * ((_2771 * 2.1991131305694580078125) + 3.141590118408203125))) * _2760;
                        _2608 = (_2775 * _2723.x) + _2681;
                        _2609 = (_2775 * _2723.y) + _2682;
                        _2610 = (_2775 * _2723.z) + _2683;
                        _2605 = (_2856 * _2740.x) + _2678;
                        _2606 = (_2856 * _2740.y) + _2679;
                        _2607 = (_2856 * _2740.z) + _2680;
                        if (_2685 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2685;
                        }
                    }
                    frontier_phi_68_pred = _2607;
                    frontier_phi_68_pred_1 = _2610;
                    frontier_phi_68_pred_2 = _2609;
                    frontier_phi_68_pred_3 = _2608;
                    frontier_phi_68_pred_4 = _2606;
                    frontier_phi_68_pred_5 = _2605;
                }
                _2386 = frontier_phi_68_pred;
                _2392 = frontier_phi_68_pred_1;
                _2390 = frontier_phi_68_pred_2;
                _2388 = frontier_phi_68_pred_3;
                _2384 = frontier_phi_68_pred_4;
                _2382 = frontier_phi_68_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2382;
                    _2534 = _2384;
                    _2535 = _2386;
                    _2536 = _2388;
                    _2537 = _2390;
                    _2538 = _2392;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
        }
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.z;
        uint _2398 = (_2396 >> 8u) & 15u;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((4294967295u << _2398) & _2279) == 0u)
        {
            _2501 = _2381;
            _2503 = _2383;
            _2505 = _2385;
            _2507 = _2387;
            _2509 = _2389;
            _2511 = _2391;
        }
        else
        {
            float _2526 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
            float _2527 = _2526 * _2233;
            float _2528 = _2526 * _2234;
            float _2529 = _2526 * _2235;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2398 < ((_2396 >> 12u) & 15u))
            {
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2661 = _2381;
                float _2662 = _2383;
                float _2663 = _2385;
                float _2664 = _2387;
                float _2665 = _2389;
                float _2666 = _2391;
                uint _2667 = _2398;
                uint _2676;
                bool _2677;
                for (;;)
                {
                    _2676 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                    _2677 = _2676 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2677)
                    {
                        frontier_phi_79_pred = _2666;
                        frontier_phi_79_pred_1 = _2665;
                        frontier_phi_79_pred_2 = _2664;
                        frontier_phi_79_pred_3 = _2663;
                        frontier_phi_79_pred_4 = _2662;
                        frontier_phi_79_pred_5 = _2661;
                    }
                    else
                    {
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        uint _2889 = _2676;
                        uint _2890;
                        vec4 _2915;
                        float _2916;
                        vec4 _2931;
                        vec3 _2943;
                        vec4 _2959;
                        vec4 _2975;
                        float _3022;
                        bool _3023;
                        for (;;)
                        {
                            uint _2900 = ((_2667 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2889));
                            _2890 = (_2889 + 4294967295u) & _2889;
                            uint _2902 = _2900 * 40u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            _2916 = _2915.w;
                            uint _2918 = (_2900 * 40u) + 4u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2933 = (_2900 * 40u) + 8u;
                            _2943 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x));
                            uint _2946 = (_2900 * 40u) + 16u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2962 = (_2900 * 40u) + 20u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2978 = (_2900 * 40u) + 24u;
                            vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2997 = (_2900 * 40u) + 28u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3022 = fma(_2235, _3010.z, fma(_2234, _3010.y, _3010.x * _2233)) + _3010.w;
                            _3023 = !((fma(_2235, _2991.z, fma(_2234, _2991.y, _2991.x * _2233)) + _2991.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3023)
                            {
                                float _3050 = _2915.x - _2233;
                                float _3051 = _2915.y - _2234;
                                float _3052 = _2915.z - _2235;
                                float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                                float _3056 = inversesqrt(_3053);
                                float _3057 = _3056 * _3050;
                                float _3058 = _3056 * _3051;
                                float _3059 = _3056 * _3052;
                                float _3063 = 1.0 - (_3053 / (_2916 * _2916));
                                float _4159 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3068 = sqrt(_3053) * _2931.w;
                                float _3070 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                                float _3071 = _3070 * _3070;
                                float _3074 = ((1.0 - _3071) * dot(vec3(_3057, _3058, _3059), vec3(_434, _437, _440))) + _3071;
                                float _3077 = _3068 * _3068;
                                float _3081 = (fma(_2235, _2959.z, fma(_2234, _2959.y, _2959.x * _2233)) + _2959.w) / _3022;
                                float _3082 = (fma(_2235, _2975.z, fma(_2234, _2975.y, _2975.x * _2233)) + _2975.w) / _3022;
                                float _3086 = 1.0 - dot(vec2(_3081, _3082), vec2(_3081, _3082));
                                float _4175 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3088 = _3087 * (((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3064) / ((_3077 * 0.699999988079071044921875) + 1.0));
                                float _3100 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                                float _3101 = 1.0 - _510;
                                float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                                float _3109 = _3108 * _3108;
                                float _3110 = _3109 * _3109;
                                float _3111 = _3057 - _2527;
                                float _3112 = _3058 - _2528;
                                float _3113 = _3059 - _2529;
                                float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                                float _3121 = dot(vec3(_434, _437, _440), vec3((-0.0) - _2527, (-0.0) - _2528, (-0.0) - _2529));
                                float _4186 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3125 = dot(vec3(_434, _437, _440), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                                float _4197 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3128 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                                float _3133 = _3070 * _3109;
                                float _3134 = _3133 * _3133;
                                float _3140 = ((1.0 - _3134) * dot(vec3(_434, _437, _440), vec3(_3057, _3058, _3059))) + _3134;
                                float _4208 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3142 = 1.0 - _3109;
                                float _3152 = (0.5 / (((_3141 * ((_3124 * _3142) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3109) * _3124))) * _3141;
                                float _4219 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3162 = (_3087 * _3064) * (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_3132 * _3132) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3088 * _2931.z;
                                frontier_phi_85_pred_1 = _3088 * _2931.y;
                                frontier_phi_85_pred_2 = _3088 * _2931.x;
                                frontier_phi_85_pred_3 = _3162 * _2943.z;
                                frontier_phi_85_pred_4 = _3162 * _2943.y;
                                frontier_phi_85_pred_5 = _3162 * _2943.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3171 = frontier_phi_85_pred;
                            _3170 = frontier_phi_85_pred_1;
                            _3169 = frontier_phi_85_pred_2;
                            _3168 = frontier_phi_85_pred_3;
                            _3167 = frontier_phi_85_pred_4;
                            _3166 = frontier_phi_85_pred_5;
                            _2873 = _3169 + _2886;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            if (_2890 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2890;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2875;
                        frontier_phi_79_pred_1 = _2874;
                        frontier_phi_79_pred_2 = _2873;
                        frontier_phi_79_pred_3 = _2872;
                        frontier_phi_79_pred_4 = _2871;
                        frontier_phi_79_pred_5 = _2870;
                    }
                    _2512 = frontier_phi_79_pred;
                    _2510 = frontier_phi_79_pred_1;
                    _2508 = frontier_phi_79_pred_2;
                    _2506 = frontier_phi_79_pred_3;
                    _2504 = frontier_phi_79_pred_4;
                    _2502 = frontier_phi_79_pred_5;
                    uint _2668 = _2667 + 1u;
                    if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2661 = _2502;
                        _2662 = _2504;
                        _2663 = _2506;
                        _2664 = _2508;
                        _2665 = _2510;
                        _2666 = _2512;
                        _2667 = _2668;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2508;
                frontier_phi_60_61_ladder_1 = _2512;
                frontier_phi_60_61_ladder_2 = _2510;
                frontier_phi_60_61_ladder_3 = _2506;
                frontier_phi_60_61_ladder_4 = _2504;
                frontier_phi_60_61_ladder_5 = _2502;
            }
            else
            {
                frontier_phi_60_61_ladder = _2387;
                frontier_phi_60_61_ladder_1 = _2391;
                frontier_phi_60_61_ladder_2 = _2389;
                frontier_phi_60_61_ladder_3 = _2385;
                frontier_phi_60_61_ladder_4 = _2383;
                frontier_phi_60_61_ladder_5 = _2381;
            }
            _2501 = frontier_phi_60_61_ladder_5;
            _2503 = frontier_phi_60_61_ladder_4;
            _2505 = frontier_phi_60_61_ladder_3;
            _2507 = frontier_phi_60_61_ladder;
            _2509 = frontier_phi_60_61_ladder_2;
            _2511 = frontier_phi_60_61_ladder_1;
        }
        float _2516 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _2291 = (_2516 * _2507) + _1725;
        _2293 = (_2516 * _2509) + _1727;
        _2295 = (_2516 * _2511) + _1729;
        _2297 = ((_2501 * _479) * _2516) + _2073;
        _2299 = ((_2503 * _481) * _2516) + _2075;
        _2301 = ((_2505 * _482) * _2516) + _2077;
    }
    else
    {
        _2291 = _1725;
        _2293 = _1727;
        _2295 = _1729;
        _2297 = _2073;
        _2299 = _2075;
        _2301 = _2077;
    }
    float _4235 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4246 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4257 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4268 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _2319 = ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2291 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _494))) + ((_2297 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    float _2320 = ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2293 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _494))) + ((_2299 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    float _2321 = ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2295 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _494))) + ((_2301 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    float _2326 = cbInstanceData._m0[_453 + 6u].w * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)));
    float _2331 = _413 / cbSceneParam._m0[86u].x;
    float _2332 = _414 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2406 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2407 = _2406 / _334;
        float _2418 = _2407 * _385;
        float _2419 = _386 * _2407;
        float _2420 = (-0.0) - _2419;
        float _2421 = _2407 * _387;
        float _2423 = (cbSceneParam._m0[77u].w * _2420) / _2406;
        float _2424 = _2423 + cbSceneParam._m0[79u].w;
        float _2425 = cbSceneParam._m0[79u].w - _2419;
        float _2431 = sqrt(((_2418 * _2418) + (_2419 * _2419)) + (_2421 * _2421));
        float _2434 = (1.0 - (cbSceneParam._m0[77u].w / _2406)) * _2431;
        float _2439 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2441 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2420 - _2423) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2424 > 0.0) ? exp2(_2439 * _2424) : (2.0 - exp2(_2441 * _2424))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2434;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : max(_2424, _2425));
            float _2564 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : min(_2424, _2425));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2618 = ((abs(_2431 / _2420) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2439 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2439 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2441 * _2573) - exp2(_2441 * _2574)) * _2562))) + (_2434 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2351);
        _2443 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2445 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2447 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2449 = _2629 * _2351;
    }
    else
    {
        _2443 = _2348;
        _2445 = _2349;
        _2447 = _2350;
        _2449 = _2351;
    }
    bool _2656;
    vec4 _2459;
    vec4 _2481;
    float _2483;
    float _2487;
    float _2488;
    float _2489;
    float _2490;
    bool _2500;
    for (;;)
    {
        _2459 = cbMatDynParam._m0[0u];
        float _2461 = roundEven(_2459.y);
        bool _2462 = _2461 == 3.0;
        float _2463 = log2(_2449);
        float _2470 = exp2(_2463 * cbSceneParam._m0[78u].x) * _2319;
        float _2471 = exp2(_2463 * cbSceneParam._m0[78u].y) * _2320;
        float _2472 = exp2(_2463 * cbSceneParam._m0[78u].z) * _2321;
        float _2479 = _401 + (-0.5);
        _2481 = cbMtdParam._m0[1u];
        _2483 = _2481.y * _2479;
        float _2486 = (_2461 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2487 = _2486 * (_2462 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2443)));
        _2488 = _2486 * (_2462 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2445)));
        _2489 = _2486 * (_2462 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2447)));
        _2490 = _2479 * 0.999000012874603271484375;
        _2500 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2500)
        {
            if ((cbInstanceData._m0[_453 + 7u].x + _2490) < 0.5)
            {
                _2656 = true;
                break;
            }
        }
        uint _2597 = _455 + uint(_2459.w);
        if ((cbInstanceData._m0[_2597].w < 1.0) && ((cbInstanceData._m0[_2597].w + _2490) < 0.5))
        {
            _2656 = true;
            break;
        }
        if ((_2483 + _244) < _2481.x)
        {
            _2656 = true;
            break;
        }
        _2656 = false;
        break;
    }
    float _2861;
    if (_2656)
    {
        discard_state = true;
        _2861 = 0.0;
    }
    else
    {
        _2861 = _2326;
    }
    SV_Target.x = _2487;
    SV_Target.y = _2488;
    SV_Target.z = _2489;
    SV_Target.w = _2861;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2326;
    discard_exit();
}


