#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _846;
float _3218;
float _3219;
float _3220;
float _3221;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _223.w;
    float _230 = _223.x * cbMtdParam._m0[9u].x;
    float _231 = _223.y * cbMtdParam._m0[9u].y;
    float _232 = _223.z * cbMtdParam._m0[9u].z;
    float _233 = _229 * TEXCOORD_1.z;
    vec4 _245 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _245.z;
    float _253 = (_245.x * 2.0) + (-1.0);
    float _255 = (_245.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _3230 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))));
    float _265 = fma(_262, _193 * NORMAL.x, fma(_255, _200 * TANGENT.x, (_186 * _178) * _253));
    float _268 = fma(_262, _193 * NORMAL.y, fma(_255, _200 * TANGENT.y, (_186 * _179) * _253));
    float _271 = fma(_262, _193 * NORMAL.z, fma(_255, _200 * TANGENT.z, (_186 * _180) * _253));
    float _275 = inversesqrt(dot(vec3(_265, _268, _271), vec3(_265, _268, _271)));
    float _276 = _275 * _265;
    float _277 = _275 * _268;
    float _278 = _275 * _271;
    float _3241 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _279 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _3252 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _280 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _3263 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3274 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3285 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _299 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _341 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _351 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _341);
    float _352 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _341);
    float _353 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _341);
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _351 * _357;
    float _359 = _352 * _357;
    float _360 = _353 * _357;
    vec4 _365 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _367 = _365.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _525 = sqrt(((_351 * _351) + (_352 * _352)) + (_353 * _353));
        float _531 = (cbMatDynParam._m0[5u].x * _525) + cbMatDynParam._m0[5u].y;
        float _3296 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
        float _532 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _536 = (cbMatDynParam._m0[5u].z * _525) + cbMatDynParam._m0[5u].w;
        float _3307 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) - _532)) + _532) < ((_367 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _400 = fma(_278, cbSceneParam._m0[5u].z, fma(_277, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _276));
    float _403 = fma(_278, cbSceneParam._m0[6u].z, fma(_277, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _276));
    float _406 = fma(_278, cbSceneParam._m0[7u].z, fma(_277, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _276));
    uint _419 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = _419 + 9u;
    uint _422 = _421 + uint(cbMatDynParam._m0[0u].w);
    float _428 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_422].x;
    float _429 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_422].y;
    float _430 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_422].z;
    float _3318 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    vec4 _442 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _445 = _442.x * TEXCOORD_1.w;
    float _446 = dot(vec3(_276, _277, _278), vec3(_358, _359, _360));
    float _449 = _446 * 2.0;
    float _453 = (_449 * _276) - _358;
    float _454 = (_449 * _277) - _359;
    float _455 = (_449 * _278) - _360;
    float _459 = abs(dot(vec3(_358, _359, _360), vec3(_276, _277, _278)));
    float _3351 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = sqrt(_280);
    float _474 = exp2((_461 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_461 * 3.0));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_514, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506));
        float _574 = fma(_514, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506));
        float _578 = fma(_514, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506));
        float _603 = _506 + _276;
        float _604 = _510 + _277;
        float _605 = _514 + _278;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_276, _277, _278), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3399 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_276, _277, _278), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3432 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_276, _277, _278), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3465 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_514, cbModelParam._m0[30u].z, fma(_510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _506));
        float _893 = fma(_514, cbModelParam._m0[31u].z, fma(_510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _506));
        float _897 = fma(_514, cbModelParam._m0[32u].z, fma(_510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _506));
        float _920 = _506 + _276;
        float _921 = _510 + _277;
        float _922 = _514 + _278;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_276, _277, _278), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3528 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_276, _277, _278), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3561 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_276, _277, _278), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3594 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = _846;
        _1168 = _846;
        _1169 = _846;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _859)) + _859;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _453 * 0.5;
    float _1227 = _454 * 0.5;
    float _1228 = _455 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_845, _849, _852, _855));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_847, _850, _853, _856));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _851, _854, _857));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _280);
    float _1295 = isnan(_1294) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1294 : min(cbModelParam._m0[25u].z, _1294));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_514, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_514, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_514, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1358 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1361 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1389 = frontier_phi_17_15_ladder;
        }
        float _1595;
        if (_1358 > 0.0)
        {
            _1595 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1595 = frontier_phi_26_22_ladder;
        }
        float _1838;
        if (_1361 > 0.0)
        {
            _1838 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1838 = frontier_phi_38_33_ladder;
        }
        float _1840 = isnan(_1595) ? _1389 : (isnan(_1389) ? _1595 : min(_1389, _1595));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1355) + _1344;
        float _1846 = (_1841 * _1358) + _1348;
        float _1847 = (_1841 * _1361) + _1352;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1848;
        float _1852 = _1848 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 > _1852) || ((_1846 < _1850) || ((_1845 < _1850) || (_1845 > _1852))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1847, cbModelParam._m0[9u].z, fma(_1846, cbModelParam._m0[9u].y, _1845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1847, cbModelParam._m0[10u].z, fma(_1846, cbModelParam._m0[10u].y, _1845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1847, cbModelParam._m0[11u].z, fma(_1846, cbModelParam._m0[11u].y, _1845 * cbModelParam._m0[11u].x))), _1295);
            frontier_phi_16_38_ladder = _1971.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1971.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1971.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_16_38_ladder_2;
        _1379 = frontier_phi_16_38_ladder_1;
        _1381 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _1295);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _280);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1443 = fma(_514, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506)) + cbModelParam._m0[21u].w;
        float _1447 = fma(_514, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506)) + cbModelParam._m0[22u].w;
        float _1451 = fma(_514, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506)) + cbModelParam._m0[23u].w;
        float _1454 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1457 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1460 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1600;
        if (_1454 > 0.0)
        {
            _1600 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1600 = frontier_phi_28_24_ladder;
        }
        float _1865;
        if (_1457 > 0.0)
        {
            _1865 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1865 = frontier_phi_40_35_ladder;
        }
        float _2070;
        if (_1460 > 0.0)
        {
            _2070 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2070 = frontier_phi_49_46_ladder;
        }
        float _2072 = isnan(_1865) ? _1600 : (isnan(_1600) ? _1865 : min(_1600, _1865));
        float _2073 = isnan(_2070) ? _2072 : (isnan(_2072) ? _2070 : min(_2072, _2070));
        float _2077 = (_2073 * _1454) + _1443;
        float _2078 = (_2073 * _1457) + _1447;
        float _2079 = (_2073 * _1460) + _1451;
        float _2080 = _2073 * 9.9999997473787516355514526367188e-05;
        float _2081 = (-1.0) - _2080;
        float _2083 = _2080 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2079 > _2083) || ((_2079 < _2081) || ((_2078 > _2083) || ((_2078 < _2081) || ((_2077 < _2081) || (_2077 > _2083))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2079, cbModelParam._m0[17u].z, fma(_2078, cbModelParam._m0[17u].y, _2077 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2079, cbModelParam._m0[18u].z, fma(_2078, cbModelParam._m0[18u].y, _2077 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2079, cbModelParam._m0[19u].z, fma(_2078, cbModelParam._m0[19u].y, _2077 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_25_49_ladder = _2280.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2280.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2280.x * cbModelParam._m0[1u].z;
        }
        _1479 = frontier_phi_25_49_ladder_2;
        _1481 = frontier_phi_25_49_ladder_1;
        _1483 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1386);
        _1479 = _1463.x * cbModelParam._m0[1u].z;
        _1481 = _1463.y * cbModelParam._m0[1u].z;
        _1483 = _1463.z * cbModelParam._m0[1u].z;
    }
    float _1495 = ((((1.0 - _474) * ((_461 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_474 * _461)) * _445;
    float _1496 = _1495 * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1497 = _1495 * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1498 = _1495 * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    uvec4 _1517 = floatBitsToUint(cbInstanceData._m0[_419 + 5u]);
    uint _1519 = _1517.x * 14u;
    uint _1520 = _1519 + 13u;
    float _1527 = _445 + (-1.0);
    float _1532 = (cbLight._m0[_1520].x * _1527) + 1.0;
    float _1533 = (cbLight._m0[_1520].y * _1527) + 1.0;
    float _1534 = (cbLight._m0[_1520].z * _1527) + 1.0;
    float _1535 = (cbLight._m0[_1520].w * _1527) + 1.0;
    uint _1536 = _1519 + 5u;
    float _1542 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
    uint _1546 = _1519 + 4u;
    float _1553 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1557 = _1519 | 1u;
    float _1568 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_276, _277, _278));
    float _1571 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_276, _277, _278));
    float _3730 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _3741 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1576 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1578 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.3183098733425140380859375;
    float _1585 = ((cbLight._m0[_1536].x * _1542) * _1578) + ((cbLight._m0[_1546].x * _1553) * _1576);
    float _1586 = ((_1542 * cbLight._m0[_1536].y) * _1578) + ((_1553 * cbLight._m0[_1546].y) * _1576);
    float _1587 = ((_1542 * cbLight._m0[_1536].z) * _1578) + ((_1553 * cbLight._m0[_1546].z) * _1576);
    uvec4 _1592 = floatBitsToUint(cbLight._m0[_1519 + 12u]);
    bool _1594 = _1592.x == 0u;
    float _1605;
    float _1607;
    float _1609;
    if (_1594)
    {
        _1605 = _1585;
        _1607 = _1586;
        _1609 = _1587;
    }
    else
    {
        uint _1613 = _1519 + 6u;
        float _1629 = (dot(vec3(cbLight._m0[_1519 + 2u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1630 = _1629 * _1629;
        float _3752 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1632 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1605 = (((cbLight._m0[_1613].x * 0.3183098733425140380859375) * _1631) * _1632) + _1585;
        _1607 = (((cbLight._m0[_1613].y * 0.3183098733425140380859375) * _1631) * _1632) + _1586;
        _1609 = (((cbLight._m0[_1613].z * 0.3183098733425140380859375) * _1631) * _1632) + _1587;
    }
    bool _1612 = _1592.y == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1612)
    {
        _1650 = _1605;
        _1652 = _1607;
        _1654 = _1609;
    }
    else
    {
        uint _1809 = _1519 + 7u;
        float _1825 = (dot(vec3(cbLight._m0[_1519 + 3u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1826 = _1825 * _1825;
        float _3768 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1828 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1650 = (((cbLight._m0[_1809].x * 0.3183098733425140380859375) * _1827) * _1828) + _1605;
        _1652 = (((cbLight._m0[_1809].y * 0.3183098733425140380859375) * _1827) * _1828) + _1607;
        _1654 = (((cbLight._m0[_1809].z * 0.3183098733425140380859375) * _1827) * _1828) + _1609;
    }
    uint _1657 = _1519 + 8u;
    float _1670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1519].w)) * _280) * 0.949999988079071044921875);
    float _1671 = _1670 * _1670;
    float _1672 = cbLight._m0[_1519].x + _358;
    float _1673 = cbLight._m0[_1519].y + _359;
    float _1674 = cbLight._m0[_1519].z + _360;
    float _1678 = inversesqrt(dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674)));
    float _1679 = _1678 * _1672;
    float _1680 = _1678 * _1673;
    float _1681 = _1678 * _1674;
    float _1682 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1519].xyz));
    float _3784 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1685 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _1686 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1687 = dot(vec3(_276, _277, _278), vec3(_1679, _1680, _1681));
    float _3806 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1691 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1679, _1680, _1681));
    float _3817 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1695 = _1671 * _1671;
    float _1699 = ((_1690 * _1690) * (_1695 + (-1.0))) + 1.0;
    float _1710 = (exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1711 = 1.0 - _1671;
    float _1722 = (0.5 / (((_1686 * ((_1685 * _1711) + _1671)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1711) + _1671) * _1685))) * _1685;
    float _3828 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1724 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1695 / ((_1699 * _1699) * 3.141590118408203125));
    uint _1735 = _1519 + 9u;
    float _1746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _280) * 0.949999988079071044921875);
    float _1747 = _1746 * _1746;
    float _1748 = cbLight._m0[_1557].x + _358;
    float _1749 = cbLight._m0[_1557].y + _359;
    float _1750 = cbLight._m0[_1557].z + _360;
    float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
    float _1755 = _1754 * _1748;
    float _1756 = _1754 * _1749;
    float _1757 = _1754 * _1750;
    float _1758 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1557].xyz));
    float _3839 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1762 = dot(vec3(_276, _277, _278), vec3(_1755, _1756, _1757));
    float _3850 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1755, _1756, _1757));
    float _3861 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1747 * _1747;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1784 = 1.0 - _1747;
    float _1794 = (0.5 / (((_1686 * ((_1761 * _1784) + _1747)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1784) + _1747) * _1761))) * _1761;
    float _3872 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    float _1806 = (((_1783 * cbLight._m0[_1735].x) * _1796) * _1542) + (((_1710 * cbLight._m0[_1657].x) * _1724) * _1553);
    float _1807 = (((_1783 * cbLight._m0[_1735].y) * _1796) * _1542) + (((_1710 * cbLight._m0[_1657].y) * _1724) * _1553);
    float _1808 = (((_1783 * cbLight._m0[_1735].z) * _1796) * _1542) + (((_1710 * cbLight._m0[_1657].z) * _1724) * _1553);
    float _1870;
    float _1872;
    float _1874;
    if (_1594)
    {
        _1870 = _1806;
        _1872 = _1807;
        _1874 = _1808;
    }
    else
    {
        uint _1876 = _1519 + 2u;
        uint _1880 = _1519 + 10u;
        float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _280) * 0.949999988079071044921875);
        float _1895 = _1894 * _1894;
        float _1896 = cbLight._m0[_1876].x + _358;
        float _1897 = cbLight._m0[_1876].y + _359;
        float _1898 = cbLight._m0[_1876].z + _360;
        float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
        float _1903 = _1902 * _1896;
        float _1904 = _1902 * _1897;
        float _1905 = _1902 * _1898;
        float _1906 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1876].xyz));
        float _3883 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1910 = dot(vec3(_276, _277, _278), vec3(_1903, _1904, _1905));
        float _3894 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1913 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1914 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_1903, _1904, _1905));
        float _3905 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1918 = _1895 * _1895;
        float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
        float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1932 = 1.0 - _1895;
        float _1942 = (0.5 / (((_1686 * ((_1909 * _1932) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1932) + _1895) * _1909))) * _1909;
        float _3916 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1944 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
        float _1945 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1870 = (((_1931 * cbLight._m0[_1880].x) * _1944) * _1945) + _1806;
        _1872 = (((_1931 * cbLight._m0[_1880].y) * _1944) * _1945) + _1807;
        _1874 = (((_1931 * cbLight._m0[_1880].z) * _1944) * _1945) + _1808;
    }
    float _1980;
    float _1982;
    float _1984;
    if (_1612)
    {
        _1980 = _1870;
        _1982 = _1872;
        _1984 = _1874;
    }
    else
    {
        uint _1991 = _1519 + 3u;
        uint _1995 = _1519 + 11u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _280) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _358;
        float _2012 = cbLight._m0[_1991].y + _359;
        float _2013 = cbLight._m0[_1991].z + _360;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1991].xyz));
        float _3932 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2025 = dot(vec3(_276, _277, _278), vec3(_2018, _2019, _2020));
        float _3943 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _3954 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2047 = 1.0 - _2010;
        float _2057 = (0.5 / (((_1686 * ((_2024 * _2047) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _2047) + _2010) * _2024))) * _2024;
        float _3965 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2059 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2060 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1980 = (((_2046 * cbLight._m0[_1995].x) * _2059) * _2060) + _1870;
        _1982 = (((_2046 * cbLight._m0[_1995].y) * _2059) * _2060) + _1872;
        _1984 = (((_2046 * cbLight._m0[_1995].z) * _2059) * _2060) + _1874;
    }
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_1517.y == 0u)
    {
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2135;
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2135;
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2135;
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.x;
        uint _2162 = uint((float(_2150.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2151))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2151)));
        float _2172 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2173 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        uint _2176 = uint(isnan(14.0) ? _2173 : (isnan(_2173) ? 14.0 : min(_2173, 14.0)));
        uvec4 _2181 = texelFetch(g_lightClusterGridBuffer, int(((_2176 << 2u) + (_2162 << 6u)) >> 2u));
        uint _2182 = _2181.x;
        uint _2183 = _2150.z;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        if (((((1u << ((_2183 >> 4u) & 15u)) + 4294967295u) & _2182) == 0u) || ((_2183 & 240u) == 0u))
        {
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
        }
        else
        {
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            uint _2444 = 0u;
            uint _2453;
            bool _2454;
            for (;;)
            {
                _2453 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2444 << 2u)) >> 2u)).x;
                _2454 = _2453 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2454)
                {
                    frontier_phi_66_pred = _2438;
                    frontier_phi_66_pred_1 = _2443;
                    frontier_phi_66_pred_2 = _2442;
                    frontier_phi_66_pred_3 = _2441;
                    frontier_phi_66_pred_4 = _2440;
                    frontier_phi_66_pred_5 = _2439;
                }
                else
                {
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    uint _2589;
                    _2583 = _2438;
                    _2584 = _2439;
                    _2585 = _2440;
                    _2586 = _2441;
                    _2587 = _2442;
                    _2588 = _2443;
                    _2589 = _2453;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    for (;;)
                    {
                        uint _2593 = uint(findLSB(_2589)) + (_2444 << 5u);
                        uint _2590 = (_2589 + 4294967295u) & _2589;
                        uint _2595 = _2593 * 48u;
                        vec4 _2609 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 3u)).x));
                        uint _2615 = (_2593 * 48u) + 4u;
                        vec4 _2628 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2615)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 3u)).x));
                        uint _2634 = (_2593 * 48u) + 8u;
                        vec3 _2645 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x));
                        float _2649 = _2609.x - _2136;
                        float _2650 = _2609.y - _2137;
                        float _2651 = _2609.z - _2138;
                        float _2652 = dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651));
                        float _2655 = inversesqrt(_2652);
                        float _2656 = _2655 * _2649;
                        float _2657 = _2655 * _2650;
                        float _2658 = _2655 * _2651;
                        float _2659 = dot(vec3(_400, _403, _406), vec3(_2656, _2657, _2658));
                        float _2664 = 1.0 - (_2652 * _2609.w);
                        float _3991 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2665 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2666 = sqrt(_2652) * _2628.w;
                        float _2669 = 1.39999997615814208984375 / (_2666 + 1.39999997615814208984375);
                        float _2670 = _2669 * _2669;
                        float _2673 = ((1.0 - _2670) * _2659) + _2670;
                        float _2676 = _2666 * _2666;
                        float _2680 = ((isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0))) * _2665) / ((_2676 * 0.699999988079071044921875) + 1.0);
                        float _2684 = (-0.0) - _2136;
                        float _2685 = (-0.0) - _2137;
                        float _2686 = (-0.0) - _2138;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2691 = _2690 * _2684;
                        float _2692 = _2690 * _2685;
                        float _2693 = _2690 * _2686;
                        float _2701 = exp2(log2(1.0 / ((_2676 * 3.5) + 5.0)) * 0.25);
                        float _2702 = 1.0 - _461;
                        float _2709 = sqrt(1.0 - ((1.0 - (_2702 * _2702)) * (1.0 - (_2701 * _2701))));
                        float _2710 = _2709 * _2709;
                        float _2711 = _2710 * _2710;
                        float _2712 = _2691 + _2656;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
                        float _2722 = dot(vec3(_400, _403, _406), vec3(_2691, _2692, _2693));
                        float _4007 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2725 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2726 = dot(vec3(_400, _403, _406), vec3(_2718 * _2712, _2718 * _2713, _2718 * _2714));
                        float _4018 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2733 = ((_2729 * _2729) * (_2711 + (-1.0))) + 1.0;
                        float _2734 = _2669 * _2710;
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * _2659) + _2735;
                        float _4029 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2739 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2740 = 1.0 - _2710;
                        float _2750 = (0.5 / (((_2739 * ((_2725 * _2740) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _2740) + _2710) * _2725))) * _2739;
                        float _4040 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2761 = (((_2711 * 3.1415927410125732421875) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) / ((_2733 * _2733) * ((_2676 * 2.1991131305694580078125) + 3.141590118408203125))) * _2665;
                        _2513 = (_2680 * _2628.x) + _2586;
                        _2514 = (_2680 * _2628.y) + _2587;
                        _2515 = (_2680 * _2628.z) + _2588;
                        _2510 = (_2761 * _2645.x) + _2583;
                        _2511 = (_2761 * _2645.y) + _2584;
                        _2512 = (_2761 * _2645.z) + _2585;
                        if (_2590 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2583 = _2510;
                            _2584 = _2511;
                            _2585 = _2512;
                            _2586 = _2513;
                            _2587 = _2514;
                            _2588 = _2515;
                            _2589 = _2590;
                        }
                    }
                    frontier_phi_66_pred = _2510;
                    frontier_phi_66_pred_1 = _2515;
                    frontier_phi_66_pred_2 = _2514;
                    frontier_phi_66_pred_3 = _2513;
                    frontier_phi_66_pred_4 = _2512;
                    frontier_phi_66_pred_5 = _2511;
                }
                _2286 = frontier_phi_66_pred;
                _2296 = frontier_phi_66_pred_1;
                _2294 = frontier_phi_66_pred_2;
                _2292 = frontier_phi_66_pred_3;
                _2290 = frontier_phi_66_pred_4;
                _2288 = frontier_phi_66_pred_5;
                uint _2445 = _2444 + 1u;
                if (_2445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2438 = _2286;
                    _2439 = _2288;
                    _2440 = _2290;
                    _2441 = _2292;
                    _2442 = _2294;
                    _2443 = _2296;
                    _2444 = _2445;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
        }
        uvec4 _2299 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2300 = _2299.z;
        uint _2302 = (_2300 >> 8u) & 15u;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        if (((4294967295u << _2302) & _2182) == 0u)
        {
            _2406 = _2285;
            _2408 = _2287;
            _2410 = _2289;
            _2412 = _2291;
            _2414 = _2293;
            _2416 = _2295;
        }
        else
        {
            float _2431 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _2432 = _2431 * _2136;
            float _2433 = _2431 * _2137;
            float _2434 = _2431 * _2138;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2302 < ((_2300 >> 12u) & 15u))
            {
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2415;
                float _2417;
                float _2566 = _2285;
                float _2567 = _2287;
                float _2568 = _2289;
                float _2569 = _2291;
                float _2570 = _2293;
                float _2571 = _2295;
                uint _2572 = _2302;
                uint _2581;
                bool _2582;
                for (;;)
                {
                    _2581 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                    _2582 = _2581 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2582)
                    {
                        frontier_phi_77_pred = _2571;
                        frontier_phi_77_pred_1 = _2570;
                        frontier_phi_77_pred_2 = _2569;
                        frontier_phi_77_pred_3 = _2568;
                        frontier_phi_77_pred_4 = _2567;
                        frontier_phi_77_pred_5 = _2566;
                    }
                    else
                    {
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _2788 = _2566;
                        float _2789 = _2567;
                        float _2790 = _2568;
                        float _2791 = _2569;
                        float _2792 = _2570;
                        float _2793 = _2571;
                        uint _2794 = _2581;
                        uint _2795;
                        vec4 _2820;
                        float _2821;
                        vec4 _2836;
                        vec3 _2848;
                        vec4 _2864;
                        vec4 _2880;
                        float _2927;
                        bool _2928;
                        for (;;)
                        {
                            uint _2805 = ((_2572 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2794));
                            _2795 = (_2794 + 4294967295u) & _2794;
                            uint _2807 = _2805 * 40u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            _2821 = _2820.w;
                            uint _2823 = (_2805 * 40u) + 4u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2838 = (_2805 * 40u) + 8u;
                            _2848 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x));
                            uint _2851 = (_2805 * 40u) + 16u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2867 = (_2805 * 40u) + 20u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2883 = (_2805 * 40u) + 24u;
                            vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2902 = (_2805 * 40u) + 28u;
                            vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            _2927 = fma(_2138, _2915.z, fma(_2137, _2915.y, _2915.x * _2136)) + _2915.w;
                            _2928 = !((fma(_2138, _2896.z, fma(_2137, _2896.y, _2896.x * _2136)) + _2896.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2928)
                            {
                                float _2955 = _2820.x - _2136;
                                float _2956 = _2820.y - _2137;
                                float _2957 = _2820.z - _2138;
                                float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                                float _2961 = inversesqrt(_2958);
                                float _2962 = _2961 * _2955;
                                float _2963 = _2961 * _2956;
                                float _2964 = _2961 * _2957;
                                float _2968 = 1.0 - (_2958 / (_2821 * _2821));
                                float _4051 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2969 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _2973 = sqrt(_2958) * _2836.w;
                                float _2975 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                                float _2976 = _2975 * _2975;
                                float _2979 = ((1.0 - _2976) * dot(vec3(_2962, _2963, _2964), vec3(_400, _403, _406))) + _2976;
                                float _2982 = _2973 * _2973;
                                float _2986 = (fma(_2138, _2864.z, fma(_2137, _2864.y, _2864.x * _2136)) + _2864.w) / _2927;
                                float _2987 = (fma(_2138, _2880.z, fma(_2137, _2880.y, _2880.x * _2136)) + _2880.w) / _2927;
                                float _2991 = 1.0 - dot(vec2(_2986, _2987), vec2(_2986, _2987));
                                float _4067 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2992 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _2993 = _2992 * (((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2969) / ((_2982 * 0.699999988079071044921875) + 1.0));
                                float _3005 = exp2(log2(1.0 / ((_2982 * 3.5) + 5.0)) * 0.25);
                                float _3006 = 1.0 - _461;
                                float _3013 = sqrt(1.0 - ((1.0 - (_3006 * _3006)) * (1.0 - (_3005 * _3005))));
                                float _3014 = _3013 * _3013;
                                float _3015 = _3014 * _3014;
                                float _3016 = _2962 - _2432;
                                float _3017 = _2963 - _2433;
                                float _3018 = _2964 - _2434;
                                float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
                                float _3026 = dot(vec3(_400, _403, _406), vec3((-0.0) - _2432, (-0.0) - _2433, (-0.0) - _2434));
                                float _4078 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3029 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3030 = dot(vec3(_400, _403, _406), vec3(_3022 * _3016, _3022 * _3017, _3022 * _3018));
                                float _4089 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3037 = ((_3033 * _3033) * (_3015 + (-1.0))) + 1.0;
                                float _3038 = _2975 * _3014;
                                float _3039 = _3038 * _3038;
                                float _3045 = ((1.0 - _3039) * dot(vec3(_400, _403, _406), vec3(_2962, _2963, _2964))) + _3039;
                                float _4100 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3047 = 1.0 - _3014;
                                float _3057 = (0.5 / (((_3046 * ((_3029 * _3047) + _3014)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3014) * _3029))) * _3046;
                                float _4111 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3067 = (_2992 * _2969) * (((_3015 * 3.1415927410125732421875) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) / ((_3037 * _3037) * ((_2982 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2993 * _2836.y;
                                frontier_phi_83_pred_1 = _2993 * _2836.x;
                                frontier_phi_83_pred_2 = _3067 * _2848.z;
                                frontier_phi_83_pred_3 = _3067 * _2848.y;
                                frontier_phi_83_pred_4 = _3067 * _2848.x;
                                frontier_phi_83_pred_5 = _2993 * _2836.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3075 = frontier_phi_83_pred;
                            _3074 = frontier_phi_83_pred_1;
                            _3073 = frontier_phi_83_pred_2;
                            _3072 = frontier_phi_83_pred_3;
                            _3071 = frontier_phi_83_pred_4;
                            _3076 = frontier_phi_83_pred_5;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            if (_2795 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2795;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2780;
                        frontier_phi_77_pred_1 = _2779;
                        frontier_phi_77_pred_2 = _2778;
                        frontier_phi_77_pred_3 = _2777;
                        frontier_phi_77_pred_4 = _2776;
                        frontier_phi_77_pred_5 = _2775;
                    }
                    _2417 = frontier_phi_77_pred;
                    _2415 = frontier_phi_77_pred_1;
                    _2413 = frontier_phi_77_pred_2;
                    _2411 = frontier_phi_77_pred_3;
                    _2409 = frontier_phi_77_pred_4;
                    _2407 = frontier_phi_77_pred_5;
                    uint _2573 = _2572 + 1u;
                    if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2566 = _2407;
                        _2567 = _2409;
                        _2568 = _2411;
                        _2569 = _2413;
                        _2570 = _2415;
                        _2571 = _2417;
                        _2572 = _2573;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2411;
                frontier_phi_58_59_ladder_1 = _2417;
                frontier_phi_58_59_ladder_2 = _2415;
                frontier_phi_58_59_ladder_3 = _2413;
                frontier_phi_58_59_ladder_4 = _2409;
                frontier_phi_58_59_ladder_5 = _2407;
            }
            else
            {
                frontier_phi_58_59_ladder = _2289;
                frontier_phi_58_59_ladder_1 = _2295;
                frontier_phi_58_59_ladder_2 = _2293;
                frontier_phi_58_59_ladder_3 = _2291;
                frontier_phi_58_59_ladder_4 = _2287;
                frontier_phi_58_59_ladder_5 = _2285;
            }
            _2406 = frontier_phi_58_59_ladder_5;
            _2408 = frontier_phi_58_59_ladder_4;
            _2410 = frontier_phi_58_59_ladder;
            _2412 = frontier_phi_58_59_ladder_3;
            _2414 = frontier_phi_58_59_ladder_2;
            _2416 = frontier_phi_58_59_ladder_1;
        }
        float _2421 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _2195 = (_2421 * _2412) + _1650;
        _2197 = (_2421 * _2414) + _1652;
        _2199 = (_2421 * _2416) + _1654;
        _2201 = ((_2406 * 0.039999999105930328369140625) * _2421) + _1980;
        _2203 = ((_2408 * 0.039999999105930328369140625) * _2421) + _1982;
        _2205 = ((_2410 * 0.039999999105930328369140625) * _2421) + _1984;
    }
    else
    {
        _2195 = _1650;
        _2197 = _1652;
        _2199 = _1654;
        _2201 = _1980;
        _2203 = _1982;
        _2205 = _1984;
    }
    float _4127 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4138 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4149 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4160 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _2223 = ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2195 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _445))) + ((_2201 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2224 = ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2197 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _445))) + ((_2203 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2225 = ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2199 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _445))) + ((_2205 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2230 = cbInstanceData._m0[_419 + 6u].w * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)));
    float _2235 = _379 / cbSceneParam._m0[86u].x;
    float _2236 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2250 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2235, _2236, (log2((isnan(cbSceneParam._m0[77u].w) ? _299 : (isnan(_299) ? cbSceneParam._m0[77u].w : min(_299, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2252 = _2250.x;
    float _2253 = _2250.y;
    float _2254 = _2250.z;
    float _2255 = _2250.w;
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    if (_299 > cbSceneParam._m0[78u].w)
    {
        float _2310 = isnan(_299) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _299 : min(cbSceneParam._m0[80u].w, _299));
        float _2311 = _2310 / _299;
        float _2322 = _2311 * _351;
        float _2323 = _352 * _2311;
        float _2324 = (-0.0) - _2323;
        float _2326 = _2311 * _353;
        float _2328 = (cbSceneParam._m0[77u].w * _2324) / _2310;
        float _2329 = _2328 + cbSceneParam._m0[79u].w;
        float _2330 = cbSceneParam._m0[79u].w - _2323;
        float _2336 = sqrt(((_2322 * _2322) + (_2323 * _2323)) + (_2326 * _2326));
        float _2339 = (1.0 - (cbSceneParam._m0[77u].w / _2310)) * _2336;
        float _2344 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2346 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2523;
        if (abs((_2324 - _2328) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2523 = ((((_2329 > 0.0) ? exp2(_2344 * _2329) : (2.0 - exp2(_2346 * _2329))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2339;
        }
        else
        {
            float _2467 = 1.0 / cbSceneParam._m0[80u].x;
            float _2468 = isnan(_2330) ? _2329 : (isnan(_2329) ? _2330 : max(_2329, _2330));
            float _2469 = isnan(_2330) ? _2329 : (isnan(_2329) ? _2330 : min(_2329, _2330));
            float _2478 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : min(_2468, 0.0));
            float _2479 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : min(_2469, 0.0));
            _2523 = ((abs(_2336 / _2324) * cbSceneParam._m0[80u].y) * ((((_2478 - _2479) * 2.0) - ((exp2(_2344 * (isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0)))) - exp2(_2344 * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0))))) * _2467)) - ((exp2(_2346 * _2478) - exp2(_2346 * _2479)) * _2467))) + (_2339 * cbSceneParam._m0[80u].z);
        }
        vec4 _2525 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2235, _2236, 1.0), 0.0);
        float _2534 = exp2((_2523 * (-1.44269502162933349609375)) * (1.0 - _2525.w));
        float _2535 = log2(_2534);
        float _2551 = log2(_2255);
        _2348 = (exp2(_2551 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].x)) * _2525.x) / cbSceneParam._m0[78u].x)) + _2252;
        _2350 = (exp2(_2551 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].y)) * _2525.y) / cbSceneParam._m0[78u].y)) + _2253;
        _2352 = (exp2(_2551 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].z)) * _2525.z) / cbSceneParam._m0[78u].z)) + _2254;
        _2354 = _2534 * _2255;
    }
    else
    {
        _2348 = _2252;
        _2350 = _2253;
        _2352 = _2254;
        _2354 = _2255;
    }
    bool _2561;
    vec4 _2364;
    vec4 _2386;
    float _2388;
    float _2392;
    float _2393;
    float _2394;
    float _2395;
    bool _2405;
    for (;;)
    {
        _2364 = cbMatDynParam._m0[0u];
        float _2366 = roundEven(_2364.y);
        bool _2367 = _2366 == 3.0;
        float _2368 = log2(_2354);
        float _2375 = exp2(_2368 * cbSceneParam._m0[78u].x) * _2223;
        float _2376 = exp2(_2368 * cbSceneParam._m0[78u].y) * _2224;
        float _2377 = exp2(_2368 * cbSceneParam._m0[78u].z) * _2225;
        float _2384 = _367 + (-0.5);
        _2386 = cbMtdParam._m0[1u];
        _2388 = _2386.y * _2384;
        float _2391 = (_2366 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2392 = _2391 * (_2367 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2348)));
        _2393 = _2391 * (_2367 ? _2376 : (_2376 + (cbSceneParam._m0[72u].w * _2350)));
        _2394 = _2391 * (_2367 ? _2377 : (_2377 + (cbSceneParam._m0[72u].w * _2352)));
        _2395 = _2384 * 0.999000012874603271484375;
        _2405 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2405)
        {
            if ((cbInstanceData._m0[_419 + 7u].x + _2395) < 0.5)
            {
                _2561 = true;
                break;
            }
        }
        uint _2502 = _421 + uint(_2364.w);
        if ((cbInstanceData._m0[_2502].w < 1.0) && ((cbInstanceData._m0[_2502].w + _2395) < 0.5))
        {
            _2561 = true;
            break;
        }
        if ((_2388 + _229) < _2386.x)
        {
            _2561 = true;
            break;
        }
        _2561 = false;
        break;
    }
    float _2766;
    if (_2561)
    {
        discard_state = true;
        _2766 = 0.0;
    }
    else
    {
        _2766 = _2230;
    }
    SV_Target.x = _2392;
    SV_Target.y = _2393;
    SV_Target.z = _2394;
    SV_Target.w = _2766;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2230;
    discard_exit();
}


