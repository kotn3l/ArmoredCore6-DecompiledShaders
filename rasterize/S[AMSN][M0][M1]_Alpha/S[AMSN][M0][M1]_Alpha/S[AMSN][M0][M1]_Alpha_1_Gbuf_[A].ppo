#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec4 TEXCOORD_1;
layout(location = 4) in float TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _129 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _130 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _131 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _137 = inversesqrt(dot(vec3(_129, _130, _131), vec3(_129, _130, _131)));
    float _144 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _151 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _174 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _180 = _174.w;
    float _181 = _174.x * cbMtdParam._m0[9u].x;
    float _182 = _174.y * cbMtdParam._m0[9u].y;
    float _183 = _174.z * cbMtdParam._m0[9u].z;
    float _184 = _180 * TEXCOORD_1.z;
    vec4 _196 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _200 = _196.z;
    float _204 = (_196.x * 2.0) + (-1.0);
    float _206 = (_196.y * 2.0) + (-1.0);
    float _207 = dot(vec2(_204, _206), vec2(_204, _206));
    float _412 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _213 = sqrt(1.0 - (isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0))));
    float _216 = fma(_213, _144 * NORMAL.x, fma(_206, _151 * TANGENT.x, (_137 * _129) * _204));
    float _219 = fma(_213, _144 * NORMAL.y, fma(_206, _151 * TANGENT.y, (_137 * _130) * _204));
    float _222 = fma(_213, _144 * NORMAL.z, fma(_206, _151 * TANGENT.z, (_137 * _131) * _204));
    float _226 = inversesqrt(dot(vec3(_216, _219, _222), vec3(_216, _219, _222)));
    float _423 = isnan(0.0) ? _184 : (isnan(_184) ? 0.0 : max(_184, 0.0));
    float _227 = isnan(1.0) ? _423 : (isnan(_423) ? 1.0 : min(_423, 1.0));
    float _434 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _445 = isnan(0.0) ? _181 : (isnan(_181) ? 0.0 : max(_181, 0.0));
    float _229 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
    float _456 = isnan(0.0) ? _182 : (isnan(_182) ? 0.0 : max(_182, 0.0));
    float _230 = isnan(1.0) ? _456 : (isnan(_456) ? 1.0 : min(_456, 1.0));
    float _467 = isnan(0.0) ? _183 : (isnan(_183) ? 0.0 : max(_183, 0.0));
    float _231 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
    uint _233 = uint(roundEven(NORMAL.w));
    vec4 _238 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _240 = _238.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _305 = (cbMatDynParam._m0[5u].x * TEXCOORD_9) + cbMatDynParam._m0[5u].y;
        float _478 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
        float _306 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        float _310 = (cbMatDynParam._m0[5u].z * TEXCOORD_9) + cbMatDynParam._m0[5u].w;
        float _489 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0))) - _306)) + _306) < ((_240 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _339;
    uint _260;
    vec4 _265;
    float _272;
    float _273;
    float _274;
    float _280;
    vec4 _284;
    float _286;
    float _287;
    bool _298;
    for (;;)
    {
        _260 = _233 * 13u;
        _265 = cbInstanceData._m0[(_260 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _269 = (cbMtdParam._m0[0u].x * _229) * _265.x;
        float _270 = (cbMtdParam._m0[0u].y * _230) * _265.y;
        float _271 = (cbMtdParam._m0[0u].z * _231) * _265.z;
        float _500 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
        _272 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        float _511 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
        _273 = isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0));
        float _522 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
        _274 = isnan(1.0) ? _522 : (isnan(_522) ? 1.0 : min(_522, 1.0));
        float _533 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
        _280 = cbInstanceData._m0[_260 + 6u].w * (isnan(1.0) ? _533 : (isnan(_533) ? 1.0 : min(_533, 1.0)));
        float _281 = _240 + (-0.5);
        _284 = cbMtdParam._m0[1u];
        _286 = _284.y * _281;
        _287 = _281 * 0.999000012874603271484375;
        _298 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_298)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _287) < 0.5)
            {
                _339 = true;
                break;
            }
        }
        if ((_265.w < 1.0) && ((_265.w + _287) < 0.5))
        {
            _339 = true;
            break;
        }
        if ((_286 + _180) < _284.x)
        {
            _339 = true;
            break;
        }
        _339 = false;
        break;
    }
    if (_339)
    {
        discard_state = true;
    }
    bool _365 = cbMtdParam._m0[1u].z != 0.0;
    float _366 = _365 ? _280 : 0.0;
    SV_Target.x = ((_216 * 0.5) * _226) + 0.500488758087158203125;
    SV_Target.y = ((_219 * 0.5) * _226) + 0.500488758087158203125;
    SV_Target.z = ((_222 * 0.5) * _226) + 0.500488758087158203125;
    SV_Target.w = _366;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = isnan(1.0) ? _434 : (isnan(_434) ? 1.0 : min(_434, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _365 ? _280 : TEXCOORD_1.w;
    SV_Target_2.x = _272;
    SV_Target_2.y = _273;
    SV_Target_2.z = _274;
    SV_Target_2.w = _365 ? _280 : (float(floatBitsToUint(cbInstanceData._m0[_260 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _366;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _366;
    discard_exit();
}


