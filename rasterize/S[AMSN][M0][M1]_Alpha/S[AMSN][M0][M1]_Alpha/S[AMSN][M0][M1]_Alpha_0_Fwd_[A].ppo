#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _881;
float _3274;
float _3275;
float _3276;
float _3277;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _225.w;
    float _232 = _225.x * cbMtdParam._m0[9u].x;
    float _233 = _225.y * cbMtdParam._m0[9u].y;
    float _234 = _225.z * cbMtdParam._m0[9u].z;
    float _235 = _231 * TEXCOORD_1.z;
    vec4 _247 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _247.x;
    vec4 _261 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3286 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))));
    float _281 = fma(_278, _195 * NORMAL.x, fma(_271, _202 * TANGENT.x, (_188 * _180) * _269));
    float _284 = fma(_278, _195 * NORMAL.y, fma(_271, _202 * TANGENT.y, (_188 * _181) * _269));
    float _287 = fma(_278, _195 * NORMAL.z, fma(_271, _202 * TANGENT.z, (_188 * _182) * _269));
    float _291 = inversesqrt(dot(vec3(_281, _284, _287), vec3(_281, _284, _287)));
    float _292 = _291 * _281;
    float _293 = _291 * _284;
    float _294 = _291 * _287;
    float _3297 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _295 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _296 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3330 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3341 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3352 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _300 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _316 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    vec4 _382 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _384 = _382.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _560 = sqrt(((_368 * _368) + (_369 * _369)) + (_370 * _370));
        float _566 = (cbMatDynParam._m0[5u].x * _560) + cbMatDynParam._m0[5u].y;
        float _3363 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _567 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _571 = (cbMatDynParam._m0[5u].z * _560) + cbMatDynParam._m0[5u].w;
        float _3374 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) - _567)) + _567) < ((_384 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_294, cbSceneParam._m0[5u].z, fma(_293, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _292));
    float _420 = fma(_294, cbSceneParam._m0[6u].z, fma(_293, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _292));
    float _423 = fma(_294, cbSceneParam._m0[7u].z, fma(_293, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _292));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = _436 + 9u;
    uint _439 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3385 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _451 = 1.0 - _300;
    float _452 = _448 * _451;
    float _453 = _449 * _451;
    float _454 = _450 * _451;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _300;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _300;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _300;
    float _462 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _477 = _474.x * TEXCOORD_1.w;
    float _478 = dot(vec3(_292, _293, _294), vec3(_375, _376, _377));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _292) - _375;
    float _486 = (_481 * _293) - _376;
    float _487 = (_481 * _294) - _377;
    float _491 = abs(dot(vec3(_375, _376, _377), vec3(_292, _293, _294)));
    float _3418 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_296);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _512 = (1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _513 = _506 * _493;
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _609 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _613 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _638 = _541 + _292;
        float _639 = _545 + _293;
        float _640 = _549 + _294;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_292, _293, _294), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3466 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_292, _293, _294), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3499 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_292, _293, _294), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3532 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _924 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _928 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _932 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _955 = _541 + _292;
        float _956 = _545 + _293;
        float _957 = _549 + _294;
        float _967 = fma(_957, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955)) - _924;
        float _968 = fma(_957, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955)) - _928;
        float _969 = fma(_957, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955)) - _932;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[35u].z) + ((((((_932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1023 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_990.x + (-0.5));
        float _1025 = _1023 * (_990.y + (-0.5));
        float _1026 = _1023 * (_990.z + (-0.5));
        float _1033 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_997.x + (-0.5));
        float _1035 = _1033 * (_997.y + (-0.5));
        float _1036 = _1033 * (_997.z + (-0.5));
        float _1043 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1004.x + (-0.5));
        float _1045 = _1043 * (_1004.y + (-0.5));
        float _1046 = _1043 * (_1004.z + (-0.5));
        float _1053 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1011.x + (-0.5));
        float _1055 = _1053 * (_1011.y + (-0.5));
        float _1056 = _1053 * (_1011.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_292, _293, _294), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3595 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1087 + 1.0))) + _1092) * _1057;
        float _1102 = _1025 * 0.5;
        float _1103 = _1035 * 0.5;
        float _1104 = _1045 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_292, _293, _294), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3628 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1129 + 1.0))) + _1134) * _1058;
        float _1144 = _1026 * 0.5;
        float _1145 = _1036 * 0.5;
        float _1146 = _1046 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_292, _293, _294), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3661 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1171 + 1.0))) + _1176) * _1059;
        _1193 = _1026;
        _1194 = _1025;
        _1195 = _1024;
        _1196 = _1036;
        _1197 = _1035;
        _1198 = _1034;
        _1199 = _1046;
        _1200 = _1045;
        _1201 = _1044;
        _1202 = _1059;
        _1203 = _1058;
        _1204 = _1057;
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = _881;
        _1203 = _881;
        _1204 = _881;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1240 = fma(_1219, cbSceneParam._m0[89u].z, fma(_1218, cbSceneParam._m0[89u].y, _1217 * cbSceneParam._m0[89u].x));
    float _1243 = fma(_1219, cbSceneParam._m0[90u].z, fma(_1218, cbSceneParam._m0[90u].y, _1217 * cbSceneParam._m0[90u].x));
    float _1246 = fma(_1219, cbSceneParam._m0[91u].z, fma(_1218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1217));
    float _1261 = _485 * 0.5;
    float _1262 = _486 * 0.5;
    float _1263 = _487 * 0.5;
    float _1264 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1267 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1270 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1277 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_880, _884, _887, _890));
        float _1281 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_882, _885, _888, _891));
        float _1285 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_883, _886, _889, _892));
        float _1292 = dot(vec4(cbModelParam._m0[39u]), vec4(_1261, _1262, _1263, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1306 = dot(vec4(cbModelParam._m0[40u]), vec4(_1261, _1262, _1263, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1319 = (_1315 * cbModelParam._m0[1u].x) + (_1304 * (1.0 - cbModelParam._m0[1u].x));
    float _1329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _296);
    float _1330 = isnan(_1329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1329 : min(cbModelParam._m0[25u].z, _1329));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_549, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_549, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_549, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1393 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1396 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1424;
        if (_1390 > 0.0)
        {
            _1424 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1424 = frontier_phi_17_15_ladder;
        }
        float _1632;
        if (_1393 > 0.0)
        {
            _1632 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1632 = frontier_phi_26_22_ladder;
        }
        float _1886;
        if (_1396 > 0.0)
        {
            _1886 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1886 = frontier_phi_38_33_ladder;
        }
        float _1888 = isnan(_1632) ? _1424 : (isnan(_1424) ? _1632 : min(_1424, _1632));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1390) + _1379;
        float _1894 = (_1889 * _1393) + _1383;
        float _1895 = (_1889 * _1396) + _1387;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_16_38_ladder = _2023.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2023.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2023.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_16_38_ladder_2;
        _1414 = frontier_phi_16_38_ladder_1;
        _1416 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1330);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1420 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _296);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1420 : min(cbModelParam._m0[25u].w, _1420));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1478 = fma(_549, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541)) + cbModelParam._m0[21u].w;
        float _1482 = fma(_549, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541)) + cbModelParam._m0[22u].w;
        float _1486 = fma(_549, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541)) + cbModelParam._m0[23u].w;
        float _1489 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1492 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1495 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1637;
        if (_1489 > 0.0)
        {
            _1637 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1637 = frontier_phi_28_24_ladder;
        }
        float _1913;
        if (_1492 > 0.0)
        {
            _1913 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1913 = frontier_phi_40_35_ladder;
        }
        float _2126;
        if (_1495 > 0.0)
        {
            _2126 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2126 = frontier_phi_49_46_ladder;
        }
        float _2128 = isnan(_1913) ? _1637 : (isnan(_1637) ? _1913 : min(_1637, _1913));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1489) + _1478;
        float _2134 = (_2129 * _1492) + _1482;
        float _2135 = (_2129 * _1495) + _1486;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2136;
        float _2139 = _2136 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2135 > _2139) || ((_2135 < _2137) || ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 < _2137) || (_2133 > _2139))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2336 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2135, cbModelParam._m0[17u].z, fma(_2134, cbModelParam._m0[17u].y, _2133 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2135, cbModelParam._m0[18u].z, fma(_2134, cbModelParam._m0[18u].y, _2133 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2135, cbModelParam._m0[19u].z, fma(_2134, cbModelParam._m0[19u].y, _2133 * cbModelParam._m0[19u].x))), _1421);
            frontier_phi_25_49_ladder = _2336.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2336.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2336.x * cbModelParam._m0[1u].z;
        }
        _1514 = frontier_phi_25_49_ladder_2;
        _1516 = frontier_phi_25_49_ladder_1;
        _1518 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1421);
        _1514 = _1498.x * cbModelParam._m0[1u].z;
        _1516 = _1498.y * cbModelParam._m0[1u].z;
        _1518 = _1498.z * cbModelParam._m0[1u].z;
    }
    float _1531 = (((_512 * _462) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_512 * _464) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_512 * _465) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1538 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, _1531 * cbSceneParam._m0[91u].x));
    uvec4 _1554 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1556 = _1554.x * 14u;
    uint _1557 = _1556 + 13u;
    float _1564 = _477 + (-1.0);
    float _1569 = (cbLight._m0[_1557].x * _1564) + 1.0;
    float _1570 = (cbLight._m0[_1557].y * _1564) + 1.0;
    float _1571 = (cbLight._m0[_1557].z * _1564) + 1.0;
    float _1572 = (cbLight._m0[_1557].w * _1564) + 1.0;
    uint _1573 = _1556 + 5u;
    float _1579 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1583 = _1556 + 4u;
    float _1590 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
    uint _1594 = _1556 | 1u;
    float _1605 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_292, _293, _294));
    float _1608 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_292, _293, _294));
    float _3797 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _3808 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1613 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.3183098733425140380859375;
    float _1615 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.3183098733425140380859375;
    float _1622 = ((cbLight._m0[_1573].x * _1579) * _1615) + ((cbLight._m0[_1583].x * _1590) * _1613);
    float _1623 = ((_1579 * cbLight._m0[_1573].y) * _1615) + ((_1590 * cbLight._m0[_1583].y) * _1613);
    float _1624 = ((_1579 * cbLight._m0[_1573].z) * _1615) + ((_1590 * cbLight._m0[_1583].z) * _1613);
    uvec4 _1629 = floatBitsToUint(cbLight._m0[_1556 + 12u]);
    bool _1631 = _1629.x == 0u;
    float _1642;
    float _1644;
    float _1646;
    if (_1631)
    {
        _1642 = _1622;
        _1644 = _1623;
        _1646 = _1624;
    }
    else
    {
        uint _1650 = _1556 + 6u;
        float _1666 = (dot(vec3(cbLight._m0[_1556 + 2u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1667 = _1666 * _1666;
        float _3819 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1669 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _1642 = (((cbLight._m0[_1650].x * 0.3183098733425140380859375) * _1668) * _1669) + _1622;
        _1644 = (((cbLight._m0[_1650].y * 0.3183098733425140380859375) * _1668) * _1669) + _1623;
        _1646 = (((cbLight._m0[_1650].z * 0.3183098733425140380859375) * _1668) * _1669) + _1624;
    }
    bool _1649 = _1629.y == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1649)
    {
        _1687 = _1642;
        _1689 = _1644;
        _1691 = _1646;
    }
    else
    {
        uint _1857 = _1556 + 7u;
        float _1873 = (dot(vec3(cbLight._m0[_1556 + 3u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1874 = _1873 * _1873;
        float _3835 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1876 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1687 = (((cbLight._m0[_1857].x * 0.3183098733425140380859375) * _1875) * _1876) + _1642;
        _1689 = (((cbLight._m0[_1857].y * 0.3183098733425140380859375) * _1875) * _1876) + _1644;
        _1691 = (((cbLight._m0[_1857].z * 0.3183098733425140380859375) * _1875) * _1876) + _1646;
    }
    uint _1694 = _1556 + 8u;
    float _1707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1556].w)) * _296) * 0.949999988079071044921875);
    float _1708 = _1707 * _1707;
    float _1709 = cbLight._m0[_1556].x + _375;
    float _1710 = cbLight._m0[_1556].y + _376;
    float _1711 = cbLight._m0[_1556].z + _377;
    float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
    float _1716 = _1715 * _1709;
    float _1717 = _1715 * _1710;
    float _1718 = _1715 * _1711;
    float _1719 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1556].xyz));
    float _3851 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _1723 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _1724 = dot(vec3(_292, _293, _294), vec3(_1716, _1717, _1718));
    float _3873 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1728 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_1716, _1717, _1718));
    float _3884 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1732 = _1708 * _1708;
    float _1736 = ((_1727 * _1727) * (_1732 + (-1.0))) + 1.0;
    float _1744 = exp2(log2(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * 5.0);
    float _1745 = 0.959999978542327880859375 - _459;
    float _1747 = 0.959999978542327880859375 - _460;
    float _1748 = 0.959999978542327880859375 - _461;
    float _1755 = 1.0 - _1708;
    float _1766 = (0.5 / (((_1723 * ((_1722 * _1755) + _1708)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1755) + _1708) * _1722))) * _1722;
    float _3895 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1768 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1732 / ((_1736 * _1736) * 3.141590118408203125));
    uint _1779 = _1556 + 9u;
    float _1790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _296) * 0.949999988079071044921875);
    float _1791 = _1790 * _1790;
    float _1792 = cbLight._m0[_1594].x + _375;
    float _1793 = cbLight._m0[_1594].y + _376;
    float _1794 = cbLight._m0[_1594].z + _377;
    float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
    float _1799 = _1798 * _1792;
    float _1800 = _1798 * _1793;
    float _1801 = _1798 * _1794;
    float _1802 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1594].xyz));
    float _3906 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1806 = dot(vec3(_292, _293, _294), vec3(_1799, _1800, _1801));
    float _3917 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1799, _1800, _1801));
    float _3928 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1791 * _1791;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1825 = exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0);
    float _1832 = 1.0 - _1791;
    float _1842 = (0.5 / (((_1723 * ((_1805 * _1832) + _1791)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1832) + _1791) * _1805))) * _1805;
    float _3939 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    float _1854 = (((((_1825 * _1745) + _462) * cbLight._m0[_1779].x) * _1844) * _1579) + (((((_1744 * _1745) + _462) * cbLight._m0[_1694].x) * _1768) * _1590);
    float _1855 = (((((_1825 * _1747) + _464) * cbLight._m0[_1779].y) * _1844) * _1579) + (((((_1744 * _1747) + _464) * cbLight._m0[_1694].y) * _1768) * _1590);
    float _1856 = (((((_1825 * _1748) + _465) * cbLight._m0[_1779].z) * _1844) * _1579) + (((((_1744 * _1748) + _465) * cbLight._m0[_1694].z) * _1768) * _1590);
    float _1918;
    float _1920;
    float _1922;
    if (_1631)
    {
        _1918 = _1854;
        _1920 = _1855;
        _1922 = _1856;
    }
    else
    {
        uint _1924 = _1556 + 2u;
        uint _1928 = _1556 + 10u;
        float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _296) * 0.949999988079071044921875);
        float _1943 = _1942 * _1942;
        float _1944 = cbLight._m0[_1924].x + _375;
        float _1945 = cbLight._m0[_1924].y + _376;
        float _1946 = cbLight._m0[_1924].z + _377;
        float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
        float _1951 = _1950 * _1944;
        float _1952 = _1950 * _1945;
        float _1953 = _1950 * _1946;
        float _1954 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1924].xyz));
        float _3950 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1958 = dot(vec3(_292, _293, _294), vec3(_1951, _1952, _1953));
        float _3961 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1962 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_1951, _1952, _1953));
        float _3972 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1966 = _1943 * _1943;
        float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
        float _1977 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
        float _1984 = 1.0 - _1943;
        float _1994 = (0.5 / (((_1723 * ((_1957 * _1984) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1984) + _1943) * _1957))) * _1957;
        float _3983 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1996 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
        float _1997 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _1918 = (((((_1977 * _1745) + _462) * cbLight._m0[_1928].x) * _1996) * _1997) + _1854;
        _1920 = (((((_1977 * _1747) + _464) * cbLight._m0[_1928].y) * _1996) * _1997) + _1855;
        _1922 = (((((_1977 * _1748) + _465) * cbLight._m0[_1928].z) * _1996) * _1997) + _1856;
    }
    float _2032;
    float _2034;
    float _2036;
    if (_1649)
    {
        _2032 = _1918;
        _2034 = _1920;
        _2036 = _1922;
    }
    else
    {
        uint _2043 = _1556 + 3u;
        uint _2047 = _1556 + 11u;
        float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _296) * 0.949999988079071044921875);
        float _2062 = _2061 * _2061;
        float _2063 = cbLight._m0[_2043].x + _375;
        float _2064 = cbLight._m0[_2043].y + _376;
        float _2065 = cbLight._m0[_2043].z + _377;
        float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
        float _2070 = _2069 * _2063;
        float _2071 = _2069 * _2064;
        float _2072 = _2069 * _2065;
        float _2073 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_2043].xyz));
        float _3999 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2077 = dot(vec3(_292, _293, _294), vec3(_2070, _2071, _2072));
        float _4010 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2081 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2070, _2071, _2072));
        float _4021 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _2062 * _2062;
        float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
        float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
        float _2103 = 1.0 - _2062;
        float _2113 = (0.5 / (((_1723 * ((_2076 * _2103) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _2103) + _2062) * _2076))) * _2076;
        float _4032 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _2032 = (((((_2096 * _1745) + _462) * cbLight._m0[_2047].x) * _2115) * _2116) + _1918;
        _2034 = (((((_2096 * _1747) + _464) * cbLight._m0[_2047].y) * _2115) * _2116) + _1920;
        _2036 = (((((_2096 * _1748) + _465) * cbLight._m0[_2047].z) * _2115) * _2116) + _1922;
    }
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    if (_1554.y == 0u)
    {
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2191;
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2191;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2191;
        uvec4 _2206 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2207 = _2206.x;
        uint _2218 = uint((float(_2206.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2207))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2207)));
        float _2228 = (log2(_2194 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2229 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        uint _2232 = uint(isnan(14.0) ? _2229 : (isnan(_2229) ? 14.0 : min(_2229, 14.0)));
        uvec4 _2237 = texelFetch(g_lightClusterGridBuffer, int(((_2232 << 2u) + (_2218 << 6u)) >> 2u));
        uint _2238 = _2237.x;
        uint _2239 = _2206.z;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        if (((((1u << ((_2239 >> 4u) & 15u)) + 4294967295u) & _2238) == 0u) || ((_2239 & 240u) == 0u))
        {
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
        }
        else
        {
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            uint _2500 = 0u;
            uint _2509;
            bool _2510;
            for (;;)
            {
                _2509 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2500 << 2u)) >> 2u)).x;
                _2510 = _2509 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2510)
                {
                    frontier_phi_66_pred = _2494;
                    frontier_phi_66_pred_1 = _2499;
                    frontier_phi_66_pred_2 = _2498;
                    frontier_phi_66_pred_3 = _2497;
                    frontier_phi_66_pred_4 = _2496;
                    frontier_phi_66_pred_5 = _2495;
                }
                else
                {
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    uint _2645;
                    _2639 = _2494;
                    _2640 = _2495;
                    _2641 = _2496;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2509;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2649 = uint(findLSB(_2645)) + (_2500 << 5u);
                        uint _2646 = (_2645 + 4294967295u) & _2645;
                        uint _2651 = _2649 * 48u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2671 = (_2649 * 48u) + 4u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 3u)).x));
                        uint _2690 = (_2649 * 48u) + 8u;
                        vec3 _2701 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x));
                        float _2705 = _2665.x - _2192;
                        float _2706 = _2665.y - _2193;
                        float _2707 = _2665.z - _2194;
                        float _2708 = dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707));
                        float _2711 = inversesqrt(_2708);
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2715 = dot(vec3(_417, _420, _423), vec3(_2712, _2713, _2714));
                        float _2720 = 1.0 - (_2708 * _2665.w);
                        float _4058 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2721 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2722 = sqrt(_2708) * _2684.w;
                        float _2725 = 1.39999997615814208984375 / (_2722 + 1.39999997615814208984375);
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * _2715) + _2726;
                        float _2732 = _2722 * _2722;
                        float _2736 = ((isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))) * _2721) / ((_2732 * 0.699999988079071044921875) + 1.0);
                        float _2740 = (-0.0) - _2192;
                        float _2741 = (-0.0) - _2193;
                        float _2742 = (-0.0) - _2194;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2757 = exp2(log2(1.0 / ((_2732 * 3.5) + 5.0)) * 0.25);
                        float _2758 = 1.0 - _493;
                        float _2765 = sqrt(1.0 - ((1.0 - (_2758 * _2758)) * (1.0 - (_2757 * _2757))));
                        float _2766 = _2765 * _2765;
                        float _2767 = _2766 * _2766;
                        float _2768 = _2747 + _2712;
                        float _2769 = _2748 + _2713;
                        float _2770 = _2749 + _2714;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2778 = dot(vec3(_417, _420, _423), vec3(_2747, _2748, _2749));
                        float _4074 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2782 = dot(vec3(_417, _420, _423), vec3(_2774 * _2768, _2774 * _2769, _2774 * _2770));
                        float _4085 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2789 = ((_2785 * _2785) * (_2767 + (-1.0))) + 1.0;
                        float _2790 = _2725 * _2766;
                        float _2791 = _2790 * _2790;
                        float _2794 = ((1.0 - _2791) * _2715) + _2791;
                        float _4096 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2796 = 1.0 - _2766;
                        float _2806 = (0.5 / (((_2795 * ((_2781 * _2796) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2795 * _2796) + _2766) * _2781))) * _2795;
                        float _4107 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2817 = (((_2767 * 3.1415927410125732421875) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) / ((_2789 * _2789) * ((_2732 * 2.1991131305694580078125) + 3.141590118408203125))) * _2721;
                        _2569 = (_2736 * _2684.x) + _2642;
                        _2570 = (_2736 * _2684.y) + _2643;
                        _2571 = (_2736 * _2684.z) + _2644;
                        _2566 = (_2817 * _2701.x) + _2639;
                        _2567 = (_2817 * _2701.y) + _2640;
                        _2568 = (_2817 * _2701.z) + _2641;
                        if (_2646 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2639 = _2566;
                            _2640 = _2567;
                            _2641 = _2568;
                            _2642 = _2569;
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2646;
                        }
                    }
                    frontier_phi_66_pred = _2566;
                    frontier_phi_66_pred_1 = _2571;
                    frontier_phi_66_pred_2 = _2570;
                    frontier_phi_66_pred_3 = _2569;
                    frontier_phi_66_pred_4 = _2568;
                    frontier_phi_66_pred_5 = _2567;
                }
                _2342 = frontier_phi_66_pred;
                _2352 = frontier_phi_66_pred_1;
                _2350 = frontier_phi_66_pred_2;
                _2348 = frontier_phi_66_pred_3;
                _2346 = frontier_phi_66_pred_4;
                _2344 = frontier_phi_66_pred_5;
                uint _2501 = _2500 + 1u;
                if (_2501 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2494 = _2342;
                    _2495 = _2344;
                    _2496 = _2346;
                    _2497 = _2348;
                    _2498 = _2350;
                    _2499 = _2352;
                    _2500 = _2501;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
        }
        uvec4 _2355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2356 = _2355.z;
        uint _2358 = (_2356 >> 8u) & 15u;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((4294967295u << _2358) & _2238) == 0u)
        {
            _2462 = _2341;
            _2464 = _2343;
            _2466 = _2345;
            _2468 = _2347;
            _2470 = _2349;
            _2472 = _2351;
        }
        else
        {
            float _2487 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
            float _2488 = _2487 * _2192;
            float _2489 = _2487 * _2193;
            float _2490 = _2487 * _2194;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2358 < ((_2356 >> 12u) & 15u))
            {
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2622 = _2341;
                float _2623 = _2343;
                float _2624 = _2345;
                float _2625 = _2347;
                float _2626 = _2349;
                float _2627 = _2351;
                uint _2628 = _2358;
                uint _2637;
                bool _2638;
                for (;;)
                {
                    _2637 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                    _2638 = _2637 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2638)
                    {
                        frontier_phi_77_pred = _2627;
                        frontier_phi_77_pred_1 = _2626;
                        frontier_phi_77_pred_2 = _2625;
                        frontier_phi_77_pred_3 = _2624;
                        frontier_phi_77_pred_4 = _2623;
                        frontier_phi_77_pred_5 = _2622;
                    }
                    else
                    {
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _2844 = _2622;
                        float _2845 = _2623;
                        float _2846 = _2624;
                        float _2847 = _2625;
                        float _2848 = _2626;
                        float _2849 = _2627;
                        uint _2850 = _2637;
                        uint _2851;
                        vec4 _2876;
                        float _2877;
                        vec4 _2892;
                        vec3 _2904;
                        vec4 _2920;
                        vec4 _2936;
                        float _2983;
                        bool _2984;
                        for (;;)
                        {
                            uint _2861 = ((_2628 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2850));
                            _2851 = (_2850 + 4294967295u) & _2850;
                            uint _2863 = _2861 * 40u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            _2877 = _2876.w;
                            uint _2879 = (_2861 * 40u) + 4u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2894 = (_2861 * 40u) + 8u;
                            _2904 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x));
                            uint _2907 = (_2861 * 40u) + 16u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2861 * 40u) + 20u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2861 * 40u) + 24u;
                            vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2958 = (_2861 * 40u) + 28u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            _2983 = fma(_2194, _2971.z, fma(_2193, _2971.y, _2971.x * _2192)) + _2971.w;
                            _2984 = !((fma(_2194, _2952.z, fma(_2193, _2952.y, _2952.x * _2192)) + _2952.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2984)
                            {
                                float _3011 = _2876.x - _2192;
                                float _3012 = _2876.y - _2193;
                                float _3013 = _2876.z - _2194;
                                float _3014 = dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013));
                                float _3017 = inversesqrt(_3014);
                                float _3018 = _3017 * _3011;
                                float _3019 = _3017 * _3012;
                                float _3020 = _3017 * _3013;
                                float _3024 = 1.0 - (_3014 / (_2877 * _2877));
                                float _4118 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3029 = sqrt(_3014) * _2892.w;
                                float _3031 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                                float _3032 = _3031 * _3031;
                                float _3035 = ((1.0 - _3032) * dot(vec3(_3018, _3019, _3020), vec3(_417, _420, _423))) + _3032;
                                float _3038 = _3029 * _3029;
                                float _3042 = (fma(_2194, _2920.z, fma(_2193, _2920.y, _2920.x * _2192)) + _2920.w) / _2983;
                                float _3043 = (fma(_2194, _2936.z, fma(_2193, _2936.y, _2936.x * _2192)) + _2936.w) / _2983;
                                float _3047 = 1.0 - dot(vec2(_3042, _3043), vec2(_3042, _3043));
                                float _4134 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3049 = _3048 * (((isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))) * _3025) / ((_3038 * 0.699999988079071044921875) + 1.0));
                                float _3061 = exp2(log2(1.0 / ((_3038 * 3.5) + 5.0)) * 0.25);
                                float _3062 = 1.0 - _493;
                                float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                                float _3070 = _3069 * _3069;
                                float _3071 = _3070 * _3070;
                                float _3072 = _3018 - _2488;
                                float _3073 = _3019 - _2489;
                                float _3074 = _3020 - _2490;
                                float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                                float _3082 = dot(vec3(_417, _420, _423), vec3((-0.0) - _2488, (-0.0) - _2489, (-0.0) - _2490));
                                float _4145 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3085 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3086 = dot(vec3(_417, _420, _423), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                                float _4156 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3089 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                                float _3094 = _3031 * _3070;
                                float _3095 = _3094 * _3094;
                                float _3101 = ((1.0 - _3095) * dot(vec3(_417, _420, _423), vec3(_3018, _3019, _3020))) + _3095;
                                float _4167 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3103 = 1.0 - _3070;
                                float _3113 = (0.5 / (((_3102 * ((_3085 * _3103) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3070) * _3085))) * _3102;
                                float _4178 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3123 = (_3048 * _3025) * (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_3093 * _3093) * ((_3038 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3049 * _2892.y;
                                frontier_phi_83_pred_1 = _3049 * _2892.x;
                                frontier_phi_83_pred_2 = _3123 * _2904.z;
                                frontier_phi_83_pred_3 = _3123 * _2904.y;
                                frontier_phi_83_pred_4 = _3123 * _2904.x;
                                frontier_phi_83_pred_5 = _3049 * _2892.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3131 = frontier_phi_83_pred;
                            _3130 = frontier_phi_83_pred_1;
                            _3129 = frontier_phi_83_pred_2;
                            _3128 = frontier_phi_83_pred_3;
                            _3127 = frontier_phi_83_pred_4;
                            _3132 = frontier_phi_83_pred_5;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            if (_2851 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2851;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2836;
                        frontier_phi_77_pred_1 = _2835;
                        frontier_phi_77_pred_2 = _2834;
                        frontier_phi_77_pred_3 = _2833;
                        frontier_phi_77_pred_4 = _2832;
                        frontier_phi_77_pred_5 = _2831;
                    }
                    _2473 = frontier_phi_77_pred;
                    _2471 = frontier_phi_77_pred_1;
                    _2469 = frontier_phi_77_pred_2;
                    _2467 = frontier_phi_77_pred_3;
                    _2465 = frontier_phi_77_pred_4;
                    _2463 = frontier_phi_77_pred_5;
                    uint _2629 = _2628 + 1u;
                    if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2622 = _2463;
                        _2623 = _2465;
                        _2624 = _2467;
                        _2625 = _2469;
                        _2626 = _2471;
                        _2627 = _2473;
                        _2628 = _2629;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2467;
                frontier_phi_58_59_ladder_1 = _2473;
                frontier_phi_58_59_ladder_2 = _2471;
                frontier_phi_58_59_ladder_3 = _2469;
                frontier_phi_58_59_ladder_4 = _2465;
                frontier_phi_58_59_ladder_5 = _2463;
            }
            else
            {
                frontier_phi_58_59_ladder = _2345;
                frontier_phi_58_59_ladder_1 = _2351;
                frontier_phi_58_59_ladder_2 = _2349;
                frontier_phi_58_59_ladder_3 = _2347;
                frontier_phi_58_59_ladder_4 = _2343;
                frontier_phi_58_59_ladder_5 = _2341;
            }
            _2462 = frontier_phi_58_59_ladder_5;
            _2464 = frontier_phi_58_59_ladder_4;
            _2466 = frontier_phi_58_59_ladder;
            _2468 = frontier_phi_58_59_ladder_3;
            _2470 = frontier_phi_58_59_ladder_2;
            _2472 = frontier_phi_58_59_ladder_1;
        }
        float _2477 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2251 = (_2477 * _2468) + _1687;
        _2253 = (_2477 * _2470) + _1689;
        _2255 = (_2477 * _2472) + _1691;
        _2257 = ((_2462 * _462) * _2477) + _2032;
        _2259 = ((_2464 * _464) * _2477) + _2034;
        _2261 = ((_2466 * _465) * _2477) + _2036;
    }
    else
    {
        _2251 = _1687;
        _2253 = _1689;
        _2255 = _1691;
        _2257 = _2032;
        _2259 = _2034;
        _2261 = _2036;
    }
    float _4194 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4205 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4216 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4227 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _2279 = ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2251 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _477))) + ((_2257 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2280 = ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2253 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _477))) + ((_2259 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2281 = ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2255 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _477))) + ((_2261 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2286 = cbInstanceData._m0[_436 + 6u].w * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)));
    float _2291 = _396 / cbSceneParam._m0[86u].x;
    float _2292 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2306 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2291, _2292, (log2((isnan(cbSceneParam._m0[77u].w) ? _316 : (isnan(_316) ? cbSceneParam._m0[77u].w : min(_316, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2308 = _2306.x;
    float _2309 = _2306.y;
    float _2310 = _2306.z;
    float _2311 = _2306.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_316 > cbSceneParam._m0[78u].w)
    {
        float _2366 = isnan(_316) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _316 : min(cbSceneParam._m0[80u].w, _316));
        float _2367 = _2366 / _316;
        float _2378 = _2367 * _368;
        float _2379 = _369 * _2367;
        float _2380 = (-0.0) - _2379;
        float _2382 = _2367 * _370;
        float _2384 = (cbSceneParam._m0[77u].w * _2380) / _2366;
        float _2385 = _2384 + cbSceneParam._m0[79u].w;
        float _2386 = cbSceneParam._m0[79u].w - _2379;
        float _2392 = sqrt(((_2378 * _2378) + (_2379 * _2379)) + (_2382 * _2382));
        float _2395 = (1.0 - (cbSceneParam._m0[77u].w / _2366)) * _2392;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2579;
        if (abs((_2380 - _2384) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2579 = ((((_2385 > 0.0) ? exp2(_2400 * _2385) : (2.0 - exp2(_2402 * _2385))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2395;
        }
        else
        {
            float _2523 = 1.0 / cbSceneParam._m0[80u].x;
            float _2524 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : max(_2385, _2386));
            float _2525 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : min(_2385, _2386));
            float _2534 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : min(_2524, 0.0));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            _2579 = ((abs(_2392 / _2380) * cbSceneParam._m0[80u].y) * ((((_2534 - _2535) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0))))) * _2523)) - ((exp2(_2402 * _2534) - exp2(_2402 * _2535)) * _2523))) + (_2395 * cbSceneParam._m0[80u].z);
        }
        vec4 _2581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2291, _2292, 1.0), 0.0);
        float _2590 = exp2((_2579 * (-1.44269502162933349609375)) * (1.0 - _2581.w));
        float _2591 = log2(_2590);
        float _2607 = log2(_2311);
        _2404 = (exp2(_2607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].x)) * _2581.x) / cbSceneParam._m0[78u].x)) + _2308;
        _2406 = (exp2(_2607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].y)) * _2581.y) / cbSceneParam._m0[78u].y)) + _2309;
        _2408 = (exp2(_2607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].z)) * _2581.z) / cbSceneParam._m0[78u].z)) + _2310;
        _2410 = _2590 * _2311;
    }
    else
    {
        _2404 = _2308;
        _2406 = _2309;
        _2408 = _2310;
        _2410 = _2311;
    }
    bool _2617;
    vec4 _2420;
    vec4 _2442;
    float _2444;
    float _2448;
    float _2449;
    float _2450;
    float _2451;
    bool _2461;
    for (;;)
    {
        _2420 = cbMatDynParam._m0[0u];
        float _2422 = roundEven(_2420.y);
        bool _2423 = _2422 == 3.0;
        float _2424 = log2(_2410);
        float _2431 = exp2(_2424 * cbSceneParam._m0[78u].x) * _2279;
        float _2432 = exp2(_2424 * cbSceneParam._m0[78u].y) * _2280;
        float _2433 = exp2(_2424 * cbSceneParam._m0[78u].z) * _2281;
        float _2440 = _384 + (-0.5);
        _2442 = cbMtdParam._m0[1u];
        _2444 = _2442.y * _2440;
        float _2447 = (_2422 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2448 = _2447 * (_2423 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2404)));
        _2449 = _2447 * (_2423 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2406)));
        _2450 = _2447 * (_2423 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2408)));
        _2451 = _2440 * 0.999000012874603271484375;
        _2461 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2461)
        {
            if ((cbInstanceData._m0[_436 + 7u].x + _2451) < 0.5)
            {
                _2617 = true;
                break;
            }
        }
        uint _2558 = _438 + uint(_2420.w);
        if ((cbInstanceData._m0[_2558].w < 1.0) && ((cbInstanceData._m0[_2558].w + _2451) < 0.5))
        {
            _2617 = true;
            break;
        }
        if ((_2444 + _231) < _2442.x)
        {
            _2617 = true;
            break;
        }
        _2617 = false;
        break;
    }
    float _2822;
    if (_2617)
    {
        discard_state = true;
        _2822 = 0.0;
    }
    else
    {
        _2822 = _2286;
    }
    SV_Target.x = _2448;
    SV_Target.y = _2449;
    SV_Target.z = _2450;
    SV_Target.w = _2822;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2286;
    discard_exit();
}


