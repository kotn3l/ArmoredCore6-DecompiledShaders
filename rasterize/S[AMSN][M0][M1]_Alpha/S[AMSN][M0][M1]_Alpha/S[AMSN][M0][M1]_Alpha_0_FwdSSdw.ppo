#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _838;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _223.x * cbMtdParam._m0[9u].x;
    float _231 = _223.y * cbMtdParam._m0[9u].y;
    float _232 = _223.z * cbMtdParam._m0[9u].z;
    float _233 = _223.w * TEXCOORD_1.z;
    vec4 _245 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _245.x;
    vec4 _259 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _263 = _259.z;
    float _267 = (_259.x * 2.0) + (-1.0);
    float _269 = (_259.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3201 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0))));
    float _279 = fma(_276, _193 * NORMAL.x, fma(_269, _200 * TANGENT.x, (_186 * _178) * _267));
    float _282 = fma(_276, _193 * NORMAL.y, fma(_269, _200 * TANGENT.y, (_186 * _179) * _267));
    float _285 = fma(_276, _193 * NORMAL.z, fma(_269, _200 * TANGENT.z, (_186 * _180) * _267));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _3212 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _293 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _294 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    float _3234 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3245 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3256 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3267 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _298 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _314 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_292, cbSceneParam._m0[5u].z, fma(_291, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _290));
    float _406 = fma(_292, cbSceneParam._m0[6u].z, fma(_291, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _290));
    float _409 = fma(_292, cbSceneParam._m0[7u].z, fma(_291, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _290));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = (_422 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_425].z;
    float _3278 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _437 = 1.0 - _298;
    float _438 = _434 * _437;
    float _439 = _435 * _437;
    float _440 = _436 * _437;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _298;
    float _446 = (_435 + (-0.039999999105930328369140625)) * _298;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _298;
    float _448 = _445 + 0.039999999105930328369140625;
    float _450 = _446 + 0.039999999105930328369140625;
    float _451 = _447 + 0.039999999105930328369140625;
    vec4 _460 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _463 = _460.x * TEXCOORD_1.w;
    float _464 = dot(vec3(_290, _291, _292), vec3(_373, _374, _375));
    float _467 = _464 * 2.0;
    float _471 = (_467 * _290) - _373;
    float _472 = (_467 * _291) - _374;
    float _473 = (_467 * _292) - _375;
    float _477 = abs(dot(vec3(_373, _374, _375), vec3(_290, _291, _292)));
    float _3311 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _479 = sqrt(_294);
    float _492 = exp2((_479 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_479 * 3.0));
    float _498 = (1.0 - _492) * ((_479 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _499 = _492 * _479;
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _837;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _562 = fma(_535, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _527));
        float _566 = fma(_535, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _527));
        float _570 = fma(_535, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _527));
        float _595 = _527 + _290;
        float _596 = _531 + _291;
        float _597 = _535 + _292;
        float _607 = fma(_597, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _595)) - _562;
        float _608 = fma(_597, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _595)) - _566;
        float _609 = fma(_597, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _595)) - _570;
        float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
        float _626 = ((_613 * _607) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_562 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _627 = ((_613 * _608) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_566 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _628 = ((_613 * _609) / cbModelParam._m0[34u].z) + ((((((_570 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        float _665 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_631.x + (-0.5));
        float _667 = _665 * (_631.y + (-0.5));
        float _668 = _665 * (_631.z + (-0.5));
        float _675 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_638.x + (-0.5));
        float _677 = _675 * (_638.y + (-0.5));
        float _678 = _675 * (_638.z + (-0.5));
        float _685 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_645.x + (-0.5));
        float _687 = _685 * (_645.y + (-0.5));
        float _688 = _685 * (_645.z + (-0.5));
        float _695 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_652.x + (-0.5));
        float _697 = _695 * (_652.y + (-0.5));
        float _698 = _695 * (_652.z + (-0.5));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = _666 * 0.5;
        float _703 = _676 * 0.5;
        float _704 = _686 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _719 = (dot(vec3(_290, _291, _292), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3337 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _729 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3348 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3359 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))) * (_731 + 1.0))) + _736) * _699;
        float _746 = _667 * 0.5;
        float _747 = _677 * 0.5;
        float _748 = _687 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _762 = (dot(vec3(_290, _291, _292), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3370 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _771 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_700 + 9.9999997473787516355514526367188e-06);
        float _3381 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3392 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (_773 + 1.0))) + _778) * _700;
        float _788 = _668 * 0.5;
        float _789 = _678 * 0.5;
        float _790 = _688 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _804 = (dot(vec3(_290, _291, _292), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _813 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3425 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_815 + 1.0))) + _820) * _701;
        _837 = _668;
        _839 = _667;
        _840 = _666;
        _841 = _678;
        _842 = _677;
        _843 = _676;
        _844 = _688;
        _845 = _687;
        _846 = _686;
        _847 = _701;
        _848 = _700;
        _849 = _699;
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
        _851 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
    }
    else
    {
        _837 = _838;
        _839 = _838;
        _840 = _838;
        _841 = _838;
        _842 = _838;
        _843 = _838;
        _844 = _838;
        _845 = _838;
        _846 = _838;
        _847 = _838;
        _848 = _838;
        _849 = _838;
        _850 = 0.0;
        _851 = 0.0;
        _852 = 0.0;
    }
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _878 = fma(_535, cbModelParam._m0[30u].z, fma(_531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _527));
        float _882 = fma(_535, cbModelParam._m0[31u].z, fma(_531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _527));
        float _886 = fma(_535, cbModelParam._m0[32u].z, fma(_531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _527));
        float _909 = _527 + _290;
        float _910 = _531 + _291;
        float _911 = _535 + _292;
        float _921 = fma(_911, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909)) - _878;
        float _922 = fma(_911, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909)) - _882;
        float _923 = fma(_911, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909)) - _886;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_878 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_882 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[35u].z) + ((((((_886 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _977 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_944.x + (-0.5));
        float _979 = _977 * (_944.y + (-0.5));
        float _980 = _977 * (_944.z + (-0.5));
        float _987 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_951.x + (-0.5));
        float _989 = _987 * (_951.y + (-0.5));
        float _990 = _987 * (_951.z + (-0.5));
        float _997 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_958.x + (-0.5));
        float _999 = _997 * (_958.y + (-0.5));
        float _1000 = _997 * (_958.z + (-0.5));
        float _1007 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_965.x + (-0.5));
        float _1009 = _1007 * (_965.y + (-0.5));
        float _1010 = _1007 * (_965.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_290, _291, _292), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3488 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_1041 + 1.0))) + _1046) * _1011;
        float _1056 = _979 * 0.5;
        float _1057 = _989 * 0.5;
        float _1058 = _999 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_290, _291, _292), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3521 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_1083 + 1.0))) + _1088) * _1012;
        float _1098 = _980 * 0.5;
        float _1099 = _990 * 0.5;
        float _1100 = _1000 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_290, _291, _292), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3554 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1125 + 1.0))) + _1130) * _1013;
        _1147 = _980;
        _1148 = _979;
        _1149 = _978;
        _1150 = _990;
        _1151 = _989;
        _1152 = _988;
        _1153 = _1000;
        _1154 = _999;
        _1155 = _998;
        _1156 = _1013;
        _1157 = _1012;
        _1158 = _1011;
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _838;
        _1148 = _838;
        _1149 = _838;
        _1150 = _838;
        _1151 = _838;
        _1152 = _838;
        _1153 = _838;
        _1154 = _838;
        _1155 = _838;
        _1156 = _838;
        _1157 = _838;
        _1158 = _838;
        _1159 = 0.0;
        _1160 = 0.0;
        _1161 = 0.0;
    }
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _851)) + _851;
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _852)) + _852;
    float _1194 = fma(_1173, cbSceneParam._m0[89u].z, fma(_1172, cbSceneParam._m0[89u].y, _1171 * cbSceneParam._m0[89u].x));
    float _1197 = fma(_1173, cbSceneParam._m0[90u].z, fma(_1172, cbSceneParam._m0[90u].y, _1171 * cbSceneParam._m0[90u].x));
    float _1200 = fma(_1173, cbSceneParam._m0[91u].z, fma(_1172, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1171));
    float _1215 = _471 * 0.5;
    float _1216 = _472 * 0.5;
    float _1217 = _473 * 0.5;
    float _1218 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1221 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1148, _1151, _1154, _1157));
    float _1224 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1258;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1231 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_837, _841, _844, _847));
        float _1235 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_839, _842, _845, _848));
        float _1239 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_840, _843, _846, _849));
        float _1246 = dot(vec4(cbModelParam._m0[39u]), vec4(_1215, _1216, _1217, 1.0));
        _1258 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1246) ? 0.0 : (isnan(0.0) ? _1246 : max(0.0, _1246))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1258 = 1.0;
    }
    float _1269;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1260 = dot(vec4(cbModelParam._m0[40u]), vec4(_1215, _1216, _1217, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1273 = (_1269 * cbModelParam._m0[1u].x) + (_1258 * (1.0 - cbModelParam._m0[1u].x));
    float _1283 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _294);
    float _1284 = isnan(_1283) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1283 : min(cbModelParam._m0[25u].z, _1283));
    float _1366;
    float _1368;
    float _1370;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1333 = fma(_535, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527)) + cbModelParam._m0[13u].w;
        float _1337 = fma(_535, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527)) + cbModelParam._m0[14u].w;
        float _1341 = fma(_535, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527)) + cbModelParam._m0[15u].w;
        float _1344 = fma(_473, cbModelParam._m0[13u].z, fma(_472, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _471));
        float _1347 = fma(_473, cbModelParam._m0[14u].z, fma(_472, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _471));
        float _1350 = fma(_473, cbModelParam._m0[15u].z, fma(_472, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _471));
        float _1378;
        if (_1344 > 0.0)
        {
            _1378 = abs((1.0 - _1333) / _1344);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1333 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1378 = frontier_phi_14_12_ladder;
        }
        float _1607;
        if (_1347 > 0.0)
        {
            _1607 = abs((1.0 - _1337) / _1347);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1337 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1607 = frontier_phi_23_19_ladder;
        }
        float _1864;
        if (_1350 > 0.0)
        {
            _1864 = abs((1.0 - _1341) / _1350);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1341 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1864 = frontier_phi_35_30_ladder;
        }
        float _1866 = isnan(_1607) ? _1378 : (isnan(_1378) ? _1607 : min(_1378, _1607));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1344) + _1333;
        float _1872 = (_1867 * _1347) + _1337;
        float _1873 = (_1867 * _1350) + _1341;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1874;
        float _1878 = _1874 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 > _1878) || ((_1872 < _1876) || ((_1871 < _1876) || (_1871 > _1878))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1873, cbModelParam._m0[9u].z, fma(_1872, cbModelParam._m0[9u].y, _1871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1873, cbModelParam._m0[10u].z, fma(_1872, cbModelParam._m0[10u].y, _1871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1873, cbModelParam._m0[11u].z, fma(_1872, cbModelParam._m0[11u].y, _1871 * cbModelParam._m0[11u].x))), _1284);
            frontier_phi_13_35_ladder = _2001.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2001.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2001.x * cbModelParam._m0[1u].y;
        }
        _1366 = frontier_phi_13_35_ladder_2;
        _1368 = frontier_phi_13_35_ladder_1;
        _1370 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_471, _472, _473), _1284);
        _1366 = _1354.x * cbModelParam._m0[1u].y;
        _1368 = _1354.y * cbModelParam._m0[1u].y;
        _1370 = _1354.z * cbModelParam._m0[1u].y;
    }
    float _1374 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _294);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1374 : min(cbModelParam._m0[25u].w, _1374));
    float _1468;
    float _1470;
    float _1472;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1432 = fma(_535, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527)) + cbModelParam._m0[21u].w;
        float _1436 = fma(_535, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527)) + cbModelParam._m0[22u].w;
        float _1440 = fma(_535, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527)) + cbModelParam._m0[23u].w;
        float _1443 = fma(_473, cbModelParam._m0[21u].z, fma(_472, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _471));
        float _1446 = fma(_473, cbModelParam._m0[22u].z, fma(_472, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _471));
        float _1449 = fma(_473, cbModelParam._m0[23u].z, fma(_472, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _471));
        float _1612;
        if (_1443 > 0.0)
        {
            _1612 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1612 = frontier_phi_25_21_ladder;
        }
        float _1891;
        if (_1446 > 0.0)
        {
            _1891 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1891 = frontier_phi_37_32_ladder;
        }
        float _2104;
        if (_1449 > 0.0)
        {
            _2104 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2104 = frontier_phi_46_43_ladder;
        }
        float _2106 = isnan(_1891) ? _1612 : (isnan(_1612) ? _1891 : min(_1612, _1891));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1443) + _1432;
        float _2112 = (_2107 * _1446) + _1436;
        float _2113 = (_2107 * _1449) + _1440;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2114;
        float _2117 = _2114 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2113 > _2117) || ((_2113 < _2115) || ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 < _2115) || (_2111 > _2117))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2113, cbModelParam._m0[17u].z, fma(_2112, cbModelParam._m0[17u].y, _2111 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2113, cbModelParam._m0[18u].z, fma(_2112, cbModelParam._m0[18u].y, _2111 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2113, cbModelParam._m0[19u].z, fma(_2112, cbModelParam._m0[19u].y, _2111 * cbModelParam._m0[19u].x))), _1375);
            frontier_phi_22_46_ladder = _2314.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2314.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2314.x * cbModelParam._m0[1u].z;
        }
        _1468 = frontier_phi_22_46_ladder_2;
        _1470 = frontier_phi_22_46_ladder_1;
        _1472 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_471, _472, _473), _1375);
        _1468 = _1452.x * cbModelParam._m0[1u].z;
        _1470 = _1452.y * cbModelParam._m0[1u].z;
        _1472 = _1452.z * cbModelParam._m0[1u].z;
    }
    float _1485 = (((_498 * _448) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1487 = (((_498 * _450) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1489 = (((_498 * _451) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1472 - _1370)) + _1370);
    float _1492 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1485 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1485 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, _1485 * cbSceneParam._m0[91u].x));
    vec4 _1506 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_381, _382));
    float _1508 = _1506.w;
    float _1520 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1508);
    float _1521 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1508);
    float _1522 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1508);
    uvec4 _1526 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1528 = _1526.x * 14u;
    uint _1529 = _1528 + 13u;
    float _1536 = _463 + (-1.0);
    float _1541 = (cbLight._m0[_1529].x * _1536) + 1.0;
    float _1542 = (cbLight._m0[_1529].y * _1536) + 1.0;
    float _1543 = (cbLight._m0[_1529].z * _1536) + 1.0;
    float _1544 = (cbLight._m0[_1529].w * _1536) + 1.0;
    uint _1545 = _1528 + 5u;
    float _1551 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
    uint _1555 = _1528 + 4u;
    float _1565 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    uint _1569 = _1528 | 1u;
    float _1580 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_290, _291, _292));
    float _1583 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_290, _291, _292));
    float _3690 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _3701 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1588 = (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * 0.3183098733425140380859375;
    float _1590 = (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.3183098733425140380859375;
    float _1597 = ((cbLight._m0[_1545].x * _1551) * _1590) + (((cbLight._m0[_1555].x * _1520) * _1565) * _1588);
    float _1598 = ((_1551 * cbLight._m0[_1545].y) * _1590) + (((cbLight._m0[_1555].y * _1521) * _1565) * _1588);
    float _1599 = ((_1551 * cbLight._m0[_1545].z) * _1590) + (((cbLight._m0[_1555].z * _1522) * _1565) * _1588);
    uvec4 _1604 = floatBitsToUint(cbLight._m0[_1528 + 12u]);
    bool _1606 = _1604.x == 0u;
    float _1617;
    float _1619;
    float _1621;
    if (_1606)
    {
        _1617 = _1597;
        _1619 = _1598;
        _1621 = _1599;
    }
    else
    {
        uint _1625 = _1528 + 6u;
        float _1641 = (dot(vec3(cbLight._m0[_1528 + 2u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1642 = _1641 * _1641;
        float _3712 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1644 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1617 = (((cbLight._m0[_1625].x * 0.3183098733425140380859375) * _1643) * _1644) + _1597;
        _1619 = (((cbLight._m0[_1625].y * 0.3183098733425140380859375) * _1643) * _1644) + _1598;
        _1621 = (((cbLight._m0[_1625].z * 0.3183098733425140380859375) * _1643) * _1644) + _1599;
    }
    bool _1624 = _1604.y == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1624)
    {
        _1662 = _1617;
        _1664 = _1619;
        _1666 = _1621;
    }
    else
    {
        uint _1835 = _1528 + 7u;
        float _1851 = (dot(vec3(cbLight._m0[_1528 + 3u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3728 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1854 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1662 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1617;
        _1664 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1619;
        _1666 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1621;
    }
    uint _1669 = _1528 + 8u;
    float _1682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1528].w)) * _294) * 0.949999988079071044921875);
    float _1683 = _1682 * _1682;
    float _1684 = cbLight._m0[_1528].x + _373;
    float _1685 = cbLight._m0[_1528].y + _374;
    float _1686 = cbLight._m0[_1528].z + _375;
    float _1690 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
    float _1691 = _1690 * _1684;
    float _1692 = _1690 * _1685;
    float _1693 = _1690 * _1686;
    float _1694 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1528].xyz));
    float _3744 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _1698 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _1699 = dot(vec3(_290, _291, _292), vec3(_1691, _1692, _1693));
    float _3766 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _1703 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_1691, _1692, _1693));
    float _3777 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1707 = _1683 * _1683;
    float _1711 = ((_1702 * _1702) * (_1707 + (-1.0))) + 1.0;
    float _1719 = exp2(log2(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * 5.0);
    float _1720 = 0.959999978542327880859375 - _445;
    float _1722 = 0.959999978542327880859375 - _446;
    float _1723 = 0.959999978542327880859375 - _447;
    float _1730 = 1.0 - _1683;
    float _1741 = (0.5 / (((_1698 * ((_1697 * _1730) + _1683)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1730) + _1683) * _1697))) * _1697;
    float _3788 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1743 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1707 / ((_1711 * _1711) * 3.141590118408203125));
    uint _1757 = _1528 + 9u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1569].w)) * _294) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1569].x + _373;
    float _1771 = cbLight._m0[_1569].y + _374;
    float _1772 = cbLight._m0[_1569].z + _375;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1569].xyz));
    float _3799 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1784 = dot(vec3(_290, _291, _292), vec3(_1777, _1778, _1779));
    float _3810 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_1777, _1778, _1779));
    float _3821 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1769 * _1769;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1803 = exp2(log2(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * 5.0);
    float _1810 = 1.0 - _1769;
    float _1820 = (0.5 / (((_1698 * ((_1783 * _1810) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1810) + _1769) * _1783))) * _1783;
    float _3832 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    float _1832 = (((((_1803 * _1720) + _448) * cbLight._m0[_1757].x) * _1822) * _1551) + ((((cbLight._m0[_1669].x * _1520) * ((_1719 * _1720) + _448)) * _1743) * _1565);
    float _1833 = (((((_1803 * _1722) + _450) * cbLight._m0[_1757].y) * _1822) * _1551) + ((((cbLight._m0[_1669].y * _1521) * ((_1719 * _1722) + _450)) * _1743) * _1565);
    float _1834 = (((((_1803 * _1723) + _451) * cbLight._m0[_1757].z) * _1822) * _1551) + ((((cbLight._m0[_1669].z * _1522) * ((_1719 * _1723) + _451)) * _1743) * _1565);
    float _1896;
    float _1898;
    float _1900;
    if (_1606)
    {
        _1896 = _1832;
        _1898 = _1833;
        _1900 = _1834;
    }
    else
    {
        uint _1902 = _1528 + 2u;
        uint _1906 = _1528 + 10u;
        float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _294) * 0.949999988079071044921875);
        float _1921 = _1920 * _1920;
        float _1922 = cbLight._m0[_1902].x + _373;
        float _1923 = cbLight._m0[_1902].y + _374;
        float _1924 = cbLight._m0[_1902].z + _375;
        float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
        float _1929 = _1928 * _1922;
        float _1930 = _1928 * _1923;
        float _1931 = _1928 * _1924;
        float _1932 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1902].xyz));
        float _3843 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1936 = dot(vec3(_290, _291, _292), vec3(_1929, _1930, _1931));
        float _3854 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1939 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1940 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_1929, _1930, _1931));
        float _3865 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1944 = _1921 * _1921;
        float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
        float _1955 = exp2(log2(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * 5.0);
        float _1962 = 1.0 - _1921;
        float _1972 = (0.5 / (((_1698 * ((_1935 * _1962) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _1962) + _1921) * _1935))) * _1935;
        float _3876 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1974 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
        float _1975 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1896 = (((((_1955 * _1720) + _448) * cbLight._m0[_1906].x) * _1974) * _1975) + _1832;
        _1898 = (((((_1955 * _1722) + _450) * cbLight._m0[_1906].y) * _1974) * _1975) + _1833;
        _1900 = (((((_1955 * _1723) + _451) * cbLight._m0[_1906].z) * _1974) * _1975) + _1834;
    }
    float _2010;
    float _2012;
    float _2014;
    if (_1624)
    {
        _2010 = _1896;
        _2012 = _1898;
        _2014 = _1900;
    }
    else
    {
        uint _2021 = _1528 + 3u;
        uint _2025 = _1528 + 11u;
        float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _294) * 0.949999988079071044921875);
        float _2040 = _2039 * _2039;
        float _2041 = cbLight._m0[_2021].x + _373;
        float _2042 = cbLight._m0[_2021].y + _374;
        float _2043 = cbLight._m0[_2021].z + _375;
        float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
        float _2048 = _2047 * _2041;
        float _2049 = _2047 * _2042;
        float _2050 = _2047 * _2043;
        float _2051 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2021].xyz));
        float _3892 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _2055 = dot(vec3(_290, _291, _292), vec3(_2048, _2049, _2050));
        float _3903 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _2059 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2048, _2049, _2050));
        float _3914 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2063 = _2040 * _2040;
        float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
        float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0);
        float _2081 = 1.0 - _2040;
        float _2091 = (0.5 / (((_1698 * ((_2054 * _2081) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1698 * _2081) + _2040) * _2054))) * _2054;
        float _3925 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2093 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
        float _2094 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _2010 = (((((_2074 * _1720) + _448) * cbLight._m0[_2025].x) * _2093) * _2094) + _1896;
        _2012 = (((((_2074 * _1722) + _450) * cbLight._m0[_2025].y) * _2093) * _2094) + _1898;
        _2014 = (((((_2074 * _1723) + _451) * cbLight._m0[_2025].z) * _2093) * _2094) + _1900;
    }
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_1526.y == 0u)
    {
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2169;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2169;
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2169;
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.x;
        uint _2196 = uint((float(_2184.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2185))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2185)));
        float _2206 = (log2(_2172 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2207 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        uint _2210 = uint(isnan(14.0) ? _2207 : (isnan(_2207) ? 14.0 : min(_2207, 14.0)));
        uvec4 _2215 = texelFetch(g_lightClusterGridBuffer, int(((_2210 << 2u) + (_2196 << 6u)) >> 2u));
        uint _2216 = _2215.x;
        uint _2217 = _2184.z;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        if (((((1u << ((_2217 >> 4u) & 15u)) + 4294967295u) & _2216) == 0u) || ((_2217 & 240u) == 0u))
        {
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
        }
        else
        {
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            uint _2470 = 0u;
            uint _2479;
            bool _2480;
            for (;;)
            {
                _2479 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2470 << 2u)) >> 2u)).x;
                _2480 = _2479 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2480)
                {
                    frontier_phi_61_pred = _2464;
                    frontier_phi_61_pred_1 = _2469;
                    frontier_phi_61_pred_2 = _2468;
                    frontier_phi_61_pred_3 = _2467;
                    frontier_phi_61_pred_4 = _2466;
                    frontier_phi_61_pred_5 = _2465;
                }
                else
                {
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    uint _2594;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2466;
                    _2591 = _2467;
                    _2592 = _2468;
                    _2593 = _2469;
                    _2594 = _2479;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    for (;;)
                    {
                        uint _2598 = uint(findLSB(_2594)) + (_2470 << 5u);
                        uint _2595 = (_2594 + 4294967295u) & _2594;
                        uint _2600 = _2598 * 48u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2600)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 3u)).x));
                        uint _2620 = (_2598 * 48u) + 4u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2639 = (_2598 * 48u) + 8u;
                        vec3 _2650 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x));
                        float _2654 = _2614.x - _2170;
                        float _2655 = _2614.y - _2171;
                        float _2656 = _2614.z - _2172;
                        float _2657 = dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656));
                        float _2660 = inversesqrt(_2657);
                        float _2661 = _2660 * _2654;
                        float _2662 = _2660 * _2655;
                        float _2663 = _2660 * _2656;
                        float _2664 = dot(vec3(_403, _406, _409), vec3(_2661, _2662, _2663));
                        float _2669 = 1.0 - (_2657 * _2614.w);
                        float _3951 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2670 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2671 = sqrt(_2657) * _2633.w;
                        float _2674 = 1.39999997615814208984375 / (_2671 + 1.39999997615814208984375);
                        float _2675 = _2674 * _2674;
                        float _2678 = ((1.0 - _2675) * _2664) + _2675;
                        float _2681 = _2671 * _2671;
                        float _2685 = ((isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))) * _2670) / ((_2681 * 0.699999988079071044921875) + 1.0);
                        float _2689 = (-0.0) - _2170;
                        float _2690 = (-0.0) - _2171;
                        float _2691 = (-0.0) - _2172;
                        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
                        float _2696 = _2695 * _2689;
                        float _2697 = _2695 * _2690;
                        float _2698 = _2695 * _2691;
                        float _2706 = exp2(log2(1.0 / ((_2681 * 3.5) + 5.0)) * 0.25);
                        float _2707 = 1.0 - _479;
                        float _2714 = sqrt(1.0 - ((1.0 - (_2707 * _2707)) * (1.0 - (_2706 * _2706))));
                        float _2715 = _2714 * _2714;
                        float _2716 = _2715 * _2715;
                        float _2717 = _2696 + _2661;
                        float _2718 = _2697 + _2662;
                        float _2719 = _2698 + _2663;
                        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                        float _2727 = dot(vec3(_403, _406, _409), vec3(_2696, _2697, _2698));
                        float _3967 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                        float _2731 = dot(vec3(_403, _406, _409), vec3(_2723 * _2717, _2723 * _2718, _2723 * _2719));
                        float _3978 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2738 = ((_2734 * _2734) * (_2716 + (-1.0))) + 1.0;
                        float _2739 = _2674 * _2715;
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2664) + _2740;
                        float _3989 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2745 = 1.0 - _2715;
                        float _2755 = (0.5 / (((_2744 * ((_2730 * _2745) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2745) + _2715) * _2730))) * _2744;
                        float _4000 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2766 = (((_2716 * 3.1415927410125732421875) * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) / ((_2738 * _2738) * ((_2681 * 2.1991131305694580078125) + 3.141590118408203125))) * _2670;
                        _2523 = (_2685 * _2633.x) + _2591;
                        _2524 = (_2685 * _2633.y) + _2592;
                        _2525 = (_2685 * _2633.z) + _2593;
                        _2520 = (_2766 * _2650.x) + _2588;
                        _2521 = (_2766 * _2650.y) + _2589;
                        _2522 = (_2766 * _2650.z) + _2590;
                        if (_2595 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2522;
                            _2591 = _2523;
                            _2592 = _2524;
                            _2593 = _2525;
                            _2594 = _2595;
                        }
                    }
                    frontier_phi_61_pred = _2520;
                    frontier_phi_61_pred_1 = _2525;
                    frontier_phi_61_pred_2 = _2524;
                    frontier_phi_61_pred_3 = _2523;
                    frontier_phi_61_pred_4 = _2522;
                    frontier_phi_61_pred_5 = _2521;
                }
                _2320 = frontier_phi_61_pred;
                _2330 = frontier_phi_61_pred_1;
                _2328 = frontier_phi_61_pred_2;
                _2326 = frontier_phi_61_pred_3;
                _2324 = frontier_phi_61_pred_4;
                _2322 = frontier_phi_61_pred_5;
                uint _2471 = _2470 + 1u;
                if (_2471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2464 = _2320;
                    _2465 = _2322;
                    _2466 = _2324;
                    _2467 = _2326;
                    _2468 = _2328;
                    _2469 = _2330;
                    _2470 = _2471;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
        }
        uvec4 _2333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2334 = _2333.z;
        uint _2336 = (_2334 >> 8u) & 15u;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((4294967295u << _2336) & _2216) == 0u)
        {
            _2432 = _2319;
            _2434 = _2321;
            _2436 = _2323;
            _2438 = _2325;
            _2440 = _2327;
            _2442 = _2329;
        }
        else
        {
            float _2457 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
            float _2458 = _2457 * _2170;
            float _2459 = _2457 * _2171;
            float _2460 = _2457 * _2172;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2336 < ((_2334 >> 12u) & 15u))
            {
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2571 = _2319;
                float _2572 = _2321;
                float _2573 = _2323;
                float _2574 = _2325;
                float _2575 = _2327;
                float _2576 = _2329;
                uint _2577 = _2336;
                uint _2586;
                bool _2587;
                for (;;)
                {
                    _2586 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                    _2587 = _2586 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2587)
                    {
                        frontier_phi_67_pred = _2574;
                        frontier_phi_67_pred_1 = _2575;
                        frontier_phi_67_pred_2 = _2576;
                        frontier_phi_67_pred_3 = _2573;
                        frontier_phi_67_pred_4 = _2572;
                        frontier_phi_67_pred_5 = _2571;
                    }
                    else
                    {
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        float _2786 = _2573;
                        float _2787 = _2574;
                        float _2788 = _2575;
                        float _2789 = _2576;
                        uint _2790 = _2586;
                        uint _2791;
                        vec4 _2816;
                        float _2817;
                        vec4 _2832;
                        vec3 _2844;
                        vec4 _2860;
                        vec4 _2876;
                        float _2923;
                        bool _2924;
                        for (;;)
                        {
                            uint _2801 = ((_2577 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2790));
                            _2791 = (_2790 + 4294967295u) & _2790;
                            uint _2803 = _2801 * 40u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            _2817 = _2816.w;
                            uint _2819 = (_2801 * 40u) + 4u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2834 = (_2801 * 40u) + 8u;
                            _2844 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x));
                            uint _2847 = (_2801 * 40u) + 16u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2863 = (_2801 * 40u) + 20u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2879 = (_2801 * 40u) + 24u;
                            vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2898 = (_2801 * 40u) + 28u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2923 = fma(_2172, _2911.z, fma(_2171, _2911.y, _2911.x * _2170)) + _2911.w;
                            _2924 = !((fma(_2172, _2892.z, fma(_2171, _2892.y, _2892.x * _2170)) + _2892.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2924)
                            {
                                float _2951 = _2816.x - _2170;
                                float _2952 = _2816.y - _2171;
                                float _2953 = _2816.z - _2172;
                                float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                                float _2957 = inversesqrt(_2954);
                                float _2958 = _2957 * _2951;
                                float _2959 = _2957 * _2952;
                                float _2960 = _2957 * _2953;
                                float _2964 = 1.0 - (_2954 / (_2817 * _2817));
                                float _4011 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2965 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _2969 = sqrt(_2954) * _2832.w;
                                float _2971 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                                float _2972 = _2971 * _2971;
                                float _2975 = ((1.0 - _2972) * dot(vec3(_2958, _2959, _2960), vec3(_403, _406, _409))) + _2972;
                                float _2978 = _2969 * _2969;
                                float _2982 = (fma(_2172, _2860.z, fma(_2171, _2860.y, _2860.x * _2170)) + _2860.w) / _2923;
                                float _2983 = (fma(_2172, _2876.z, fma(_2171, _2876.y, _2876.x * _2170)) + _2876.w) / _2923;
                                float _2987 = 1.0 - dot(vec2(_2982, _2983), vec2(_2982, _2983));
                                float _4027 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2988 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                                float _2989 = _2988 * (((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2965) / ((_2978 * 0.699999988079071044921875) + 1.0));
                                float _3001 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                                float _3002 = 1.0 - _479;
                                float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                                float _3010 = _3009 * _3009;
                                float _3011 = _3010 * _3010;
                                float _3012 = _2958 - _2458;
                                float _3013 = _2959 - _2459;
                                float _3014 = _2960 - _2460;
                                float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                                float _3022 = dot(vec3(_403, _406, _409), vec3((-0.0) - _2458, (-0.0) - _2459, (-0.0) - _2460));
                                float _4038 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3026 = dot(vec3(_403, _406, _409), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                                float _4049 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3029 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                                float _3034 = _2971 * _3010;
                                float _3035 = _3034 * _3034;
                                float _3041 = ((1.0 - _3035) * dot(vec3(_403, _406, _409), vec3(_2958, _2959, _2960))) + _3035;
                                float _4060 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3043 = 1.0 - _3010;
                                float _3053 = (0.5 / (((_3042 * ((_3025 * _3043) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3010) * _3025))) * _3042;
                                float _4071 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3063 = (_2988 * _2965) * (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) / ((_3033 * _3033) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3063 * _2844.x;
                                frontier_phi_73_pred_1 = _3063 * _2844.y;
                                frontier_phi_73_pred_2 = _2989 * _2832.z;
                                frontier_phi_73_pred_3 = _2989 * _2832.y;
                                frontier_phi_73_pred_4 = _2989 * _2832.x;
                                frontier_phi_73_pred_5 = _3063 * _2844.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3067 = frontier_phi_73_pred;
                            _3068 = frontier_phi_73_pred_1;
                            _3072 = frontier_phi_73_pred_2;
                            _3071 = frontier_phi_73_pred_3;
                            _3070 = frontier_phi_73_pred_4;
                            _3069 = frontier_phi_73_pred_5;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            if (_2791 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2791;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2774;
                        frontier_phi_67_pred_1 = _2775;
                        frontier_phi_67_pred_2 = _2776;
                        frontier_phi_67_pred_3 = _2773;
                        frontier_phi_67_pred_4 = _2772;
                        frontier_phi_67_pred_5 = _2771;
                    }
                    _2439 = frontier_phi_67_pred;
                    _2441 = frontier_phi_67_pred_1;
                    _2443 = frontier_phi_67_pred_2;
                    _2437 = frontier_phi_67_pred_3;
                    _2435 = frontier_phi_67_pred_4;
                    _2433 = frontier_phi_67_pred_5;
                    uint _2578 = _2577 + 1u;
                    if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2571 = _2433;
                        _2572 = _2435;
                        _2573 = _2437;
                        _2574 = _2439;
                        _2575 = _2441;
                        _2576 = _2443;
                        _2577 = _2578;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2441;
                frontier_phi_55_56_ladder_1 = _2443;
                frontier_phi_55_56_ladder_2 = _2439;
                frontier_phi_55_56_ladder_3 = _2437;
                frontier_phi_55_56_ladder_4 = _2435;
                frontier_phi_55_56_ladder_5 = _2433;
            }
            else
            {
                frontier_phi_55_56_ladder = _2327;
                frontier_phi_55_56_ladder_1 = _2329;
                frontier_phi_55_56_ladder_2 = _2325;
                frontier_phi_55_56_ladder_3 = _2323;
                frontier_phi_55_56_ladder_4 = _2321;
                frontier_phi_55_56_ladder_5 = _2319;
            }
            _2432 = frontier_phi_55_56_ladder_5;
            _2434 = frontier_phi_55_56_ladder_4;
            _2436 = frontier_phi_55_56_ladder_3;
            _2438 = frontier_phi_55_56_ladder_2;
            _2440 = frontier_phi_55_56_ladder;
            _2442 = frontier_phi_55_56_ladder_1;
        }
        float _2447 = isnan(1.0) ? _463 : (isnan(_463) ? 1.0 : min(_463, 1.0));
        _2229 = (_2447 * _2438) + _1662;
        _2231 = (_2447 * _2440) + _1664;
        _2233 = (_2447 * _2442) + _1666;
        _2235 = ((_2432 * _448) * _2447) + _2010;
        _2237 = ((_2434 * _450) * _2447) + _2012;
        _2239 = ((_2436 * _451) * _2447) + _2014;
    }
    else
    {
        _2229 = _1662;
        _2231 = _1664;
        _2233 = _1666;
        _2235 = _2010;
        _2237 = _2012;
        _2239 = _2014;
    }
    float _4087 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4098 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4109 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4120 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _2264 = cbInstanceData._m0[_422 + 6u].w * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)));
    float _2269 = _381 / cbSceneParam._m0[86u].x;
    float _2270 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2284 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, (log2((isnan(cbSceneParam._m0[77u].w) ? _314 : (isnan(_314) ? cbSceneParam._m0[77u].w : min(_314, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2286 = _2284.x;
    float _2287 = _2284.y;
    float _2288 = _2284.z;
    float _2289 = _2284.w;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    if (_314 > cbSceneParam._m0[78u].w)
    {
        float _2344 = isnan(_314) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _314 : min(cbSceneParam._m0[80u].w, _314));
        float _2345 = _2344 / _314;
        float _2356 = _2345 * _366;
        float _2357 = _367 * _2345;
        float _2358 = (-0.0) - _2357;
        float _2360 = _2345 * _368;
        float _2362 = (cbSceneParam._m0[77u].w * _2358) / _2344;
        float _2363 = _2362 + cbSceneParam._m0[79u].w;
        float _2364 = cbSceneParam._m0[79u].w - _2357;
        float _2370 = sqrt(((_2356 * _2356) + (_2357 * _2357)) + (_2360 * _2360));
        float _2373 = (1.0 - (cbSceneParam._m0[77u].w / _2344)) * _2370;
        float _2378 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2380 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2533;
        if (abs((_2358 - _2362) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2533 = ((((_2363 > 0.0) ? exp2(_2378 * _2363) : (2.0 - exp2(_2380 * _2363))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2373;
        }
        else
        {
            float _2493 = 1.0 / cbSceneParam._m0[80u].x;
            float _2494 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : max(_2363, _2364));
            float _2495 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : min(_2363, _2364));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            _2533 = ((abs(_2370 / _2358) * cbSceneParam._m0[80u].y) * ((((_2504 - _2505) * 2.0) - ((exp2(_2378 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0)))) - exp2(_2378 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0))))) * _2493)) - ((exp2(_2380 * _2504) - exp2(_2380 * _2505)) * _2493))) + (_2373 * cbSceneParam._m0[80u].z);
        }
        vec4 _2535 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, 1.0), 0.0);
        float _2544 = exp2((_2533 * (-1.44269502162933349609375)) * (1.0 - _2535.w));
        float _2545 = log2(_2544);
        float _2561 = log2(_2289);
        _2382 = (exp2(_2561 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].x)) * _2535.x) / cbSceneParam._m0[78u].x)) + _2286;
        _2384 = (exp2(_2561 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].y)) * _2535.y) / cbSceneParam._m0[78u].y)) + _2287;
        _2386 = (exp2(_2561 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].z)) * _2535.z) / cbSceneParam._m0[78u].z)) + _2288;
        _2388 = _2544 * _2289;
    }
    else
    {
        _2382 = _2286;
        _2384 = _2287;
        _2386 = _2288;
        _2388 = _2289;
    }
    float _2400 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2401 = _2400 == 3.0;
    float _2402 = log2(_2388);
    float _2409 = exp2(_2402 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2229 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _463))) + ((_2235 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2410 = exp2(_2402 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2231 + ((isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))) * _463))) + ((_2237 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2411 = exp2(_2402 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2233 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _463))) + ((_2239 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2420 = (_2400 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2420 * (_2401 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.y = _2420 * (_2401 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2384)));
    SV_Target.z = _2420 * (_2401 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2386)));
    SV_Target.w = _2264;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2264;
}


